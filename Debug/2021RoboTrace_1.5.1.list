
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f70  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08017130  08017130  00027130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080178fc  080178fc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080178fc  080178fc  000278fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017904  08017904  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017904  08017904  00027904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801790c  0801790c  0002790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b240  200001e0  08017aec  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2003b420  08017aec  0003b420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003563c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075fe  00000000  00000000  00065848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002100  00000000  00000000  0006ce48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e40  00000000  00000000  0006ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036dcd  00000000  00000000  00070d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002479a  00000000  00000000  000a7b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001101bf  00000000  00000000  000cc2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc4ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0d4  00000000  00000000  001dc52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017118 	.word	0x08017118

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017118 	.word	0x08017118

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 ff36 	bl	8007e48 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20038f14 	.word	0x20038f14

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 ff1e 	bl	8007e48 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20038f14 	.word	0x20038f14

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 fda7 	bl	8007b74 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fb0e 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fb08 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fb02 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fafc 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 faf6 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 faf0 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 faea 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fae4 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fade 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fad8 	bl	8006648 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 facc 	bl	8006648 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fac6 	bl	8006648 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 ff79 	bl	8014020 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a fcd6 	bl	800bb78 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a fcd2 	bl	800bb78 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20039168 	.word	0x20039168
 80011f0:	20038e4c 	.word	0x20038e4c
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa37 	bl	80018cc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa4b 	bl	80018f8 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f f8db 	bl	8010632 <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20037d58 	.word	0x20037d58

0800148c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write_float+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write_float+0x98>)
 80014c6:	f011 fe1b 	bl	8013100 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write_float+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write_float+0x9c>)
 80014d8:	f00f f91f 	bl	801071a <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write_float+0x9c>)
 80014e2:	f00f f91a 	bl	801071a <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write_float+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write_float+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write_float+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write_float+0x9c>)
 80014f4:	f00e fe8b 	bl	801020e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 fa18 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write_float+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017130 	.word	0x08017130
 8001524:	20037cc8 	.word	0x20037cc8
 8001528:	20037d58 	.word	0x20037d58
 800152c:	20037d48 	.word	0x20037d48

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c0 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f f896 	bl	8010686 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fb01 	bl	8010b62 <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f f890 	bl	8010686 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f9c7 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f011 fdb6 	bl	8013100 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f f8bd 	bl	801071a <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00e fe2e 	bl	801020e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f9bb 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f f82f 	bl	8010632 <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20037bc8 	.word	0x20037bc8
 80015e4:	20036a88 	.word	0x20036a88
 80015e8:	0801714c 	.word	0x0801714c
 80015ec:	08017130 	.word	0x08017130
 80015f0:	20037cc8 	.word	0x20037cc8
 80015f4:	20037d58 	.word	0x20037d58
 80015f8:	20037d48 	.word	0x20037d48

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f95a 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f f830 	bl	8010686 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fa9b 	bl	8010b62 <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f f82a 	bl	8010686 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f961 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f011 fd54 	bl	8013100 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f f85b 	bl	801071a <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00e fdcc 	bl	801020e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f959 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00e ffcd 	bl	8010632 <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20037bc8 	.word	0x20037bc8
 80016a8:	20036a88 	.word	0x20036a88
 80016ac:	0801714c 	.word	0x0801714c
 80016b0:	08017150 	.word	0x08017150
 80016b4:	20037cc8 	.word	0x20037cc8
 80016b8:	20037d58 	.word	0x20037d58
 80016bc:	20037d48 	.word	0x20037d48

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8f6 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f90a 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f011 fd57 	bl	80131a8 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f00f fbfa 	bl	8010f18 <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f8ff 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00e ff7f 	bl	8010632 <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08017148 	.word	0x08017148
 8001744:	20037cc8 	.word	0x20037cc8
 8001748:	20037d58 	.word	0x20037d58

0800174c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8b2 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <sd_write_array_int+0xa0>)
 8001772:	f00e ff88 	bl	8010686 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <sd_write_array_int+0xa4>)
 8001778:	f00f f9f3 	bl	8010b62 <f_unlink>
		f_chdir("..");
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <sd_write_array_int+0xa8>)
 800177e:	f00e ff82 	bl	8010686 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001782:	f000 f8b9 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	82fb      	strh	r3, [r7, #22]
 800178a:	e021      	b.n	80017d0 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <sd_write_array_int+0xac>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <sd_write_array_int+0xb0>)
 800179e:	f011 fcaf 	bl	8013100 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sd_write_array_int+0xb4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <sd_write_array_int+0xb4>)
 80017aa:	f00e ffb6 	bl	801071a <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <sd_write_array_int+0xb0>)
 80017b0:	f7fe fd26 	bl	8000200 <strlen>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <sd_write_array_int+0xb8>)
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <sd_write_array_int+0xb0>)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <sd_write_array_int+0xb4>)
 80017bc:	f00e fd27 	bl	801020e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c0:	f000 f8b4 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbd7      	blt.n	800178c <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <sd_write_array_int+0xb4>)
 80017de:	f00e ff28 	bl	8010632 <f_close>

	return ret;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20037bc8 	.word	0x20037bc8
 80017f0:	20036a88 	.word	0x20036a88
 80017f4:	0801714c 	.word	0x0801714c
 80017f8:	0801715c 	.word	0x0801715c
 80017fc:	20037cc8 	.word	0x20037cc8
 8001800:	20037d58 	.word	0x20037d58
 8001804:	20037d48 	.word	0x20037d48

08001808 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f852 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001828:	f000 f866 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800182c:	e019      	b.n	8001862 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <sd_read_array_int+0x80>)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <sd_read_array_int+0x84>)
 800183e:	f011 fcb3 	bl	80131a8 <siscanf>
		i++;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800184e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	db03      	blt.n	8001862 <sd_read_array_int+0x5a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <sd_read_array_int+0x88>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <sd_read_array_int+0x84>)
 8001868:	f00f fb56 	bl	8010f18 <f_gets>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1dd      	bne.n	800182e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001872:	f000 f85b 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <sd_read_array_int+0x88>)
 8001878:	f00e fedb 	bl	8010632 <f_close>

	return ret;
 800187c:	7d7b      	ldrb	r3, [r7, #21]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08017160 	.word	0x08017160
 800188c:	20037cc8 	.word	0x20037cc8
 8001890:	20037d58 	.word	0x20037d58

08001894 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800189e:	2201      	movs	r2, #1
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <sd_mount+0x30>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <sd_mount+0x34>)
 80018a4:	f00e f942 	bl	800fb2c <f_mount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <sd_mount+0x20>
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <sd_mount+0x24>
	else ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	08017164 	.word	0x08017164
 80018c8:	20036b88 	.word	0x20036b88

080018cc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <create_path+0x24>)
 80018da:	f011 fcd4 	bl	8013286 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <create_path+0x28>)
 80018e2:	f011 fcd0 	bl	8013286 <strcpy>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20037bc8 	.word	0x20037bc8
 80018f4:	20036a88 	.word	0x20036a88

080018f8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <fopen_folder_and_file+0x24>)
 80018fe:	f00f f9f1 	bl	8010ce4 <f_mkdir>

	f_chdir(dirpath);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <fopen_folder_and_file+0x24>)
 8001904:	f00e febf 	bl	8010686 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001908:	2213      	movs	r2, #19
 800190a:	4905      	ldr	r1, [pc, #20]	; (8001920 <fopen_folder_and_file+0x28>)
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <fopen_folder_and_file+0x2c>)
 800190e:	f00e f953 	bl	800fbb8 <f_open>

	f_chdir("..");
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <fopen_folder_and_file+0x30>)
 8001914:	f00e feb7 	bl	8010686 <f_chdir>


}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20037bc8 	.word	0x20037bc8
 8001920:	20036a88 	.word	0x20036a88
 8001924:	20037d58 	.word	0x20037d58
 8001928:	0801714c 	.word	0x0801714c

0800192c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e007      	b.n	8001948 <bufclear+0x1c>
		buffer[i] = '\0';
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <bufclear+0x30>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	ddf4      	ble.n	8001938 <bufclear+0xc>
	}
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20037cc8 	.word	0x20037cc8

08001960 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <read_byte+0x54>)
 800197c:	f006 f8fa 	bl	8007b74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <read_byte+0x58>)
 800198a:	f009 fabb 	bl	800af04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800198e:	f107 010e 	add.w	r1, r7, #14
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <read_byte+0x58>)
 8001998:	f009 fbe8 	bl	800b16c <HAL_SPI_Receive>
	CS_SET;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <read_byte+0x54>)
 80019a4:	f006 f8e6 	bl	8007b74 <HAL_GPIO_WritePin>

	return val;
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020400 	.word	0x40020400
 80019b8:	20038df4 	.word	0x20038df4

080019bc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <write_byte+0x54>)
 80019de:	f006 f8c9 	bl	8007b74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <write_byte+0x58>)
 80019ec:	f009 fa8a 	bl	800af04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80019f0:	1db9      	adds	r1, r7, #6
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <write_byte+0x58>)
 80019f8:	f009 fa84 	bl	800af04 <HAL_SPI_Transmit>
	CS_SET;
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <write_byte+0x54>)
 8001a04:	f006 f8b6 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20038df4 	.word	0x20038df4

08001a18 <IMU_init>:

uint16_t IMU_init() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff9c 	bl	8001960 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2be0      	cmp	r3, #224	; 0xe0
 8001a30:	d119      	bne.n	8001a66 <IMU_init+0x4e>
		ret = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001a36:	2101      	movs	r1, #1
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffbf 	bl	80019bc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001a3e:	2110      	movs	r1, #16
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff ffbb 	bl	80019bc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001a46:	2120      	movs	r1, #32
 8001a48:	207f      	movs	r0, #127	; 0x7f
 8001a4a:	f7ff ffb7 	bl	80019bc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffb3 	bl	80019bc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a56:	2106      	movs	r1, #6
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ffaf 	bl	80019bc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	207f      	movs	r0, #127	; 0x7f
 8001a62:	f7ff ffab 	bl	80019bc <write_byte>
	}
	return ret;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <read_gyro_data>:

void read_gyro_data() {
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a74:	2033      	movs	r0, #51	; 0x33
 8001a76:	f7ff ff73 	bl	8001960 <read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f7ff ff6d 	bl	8001960 <read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <read_gyro_data+0x64>)
 8001a90:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a92:	2035      	movs	r0, #53	; 0x35
 8001a94:	f7ff ff64 	bl	8001960 <read_byte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21c      	sxth	r4, r3
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff ff5e 	bl	8001960 <read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <read_gyro_data+0x68>)
 8001aae:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f7ff ff55 	bl	8001960 <read_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	2038      	movs	r0, #56	; 0x38
 8001abe:	f7ff ff4f 	bl	8001960 <read_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <read_gyro_data+0x6c>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	bd98      	pop	{r3, r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20038d90 	.word	0x20038d90
 8001ad8:	20038d8e 	.word	0x20038d8e
 8001adc:	20038d88 	.word	0x20038d88

08001ae0 <read_accel_data>:

void read_accel_data() {
 8001ae0:	b598      	push	{r3, r4, r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001ae4:	202d      	movs	r0, #45	; 0x2d
 8001ae6:	f7ff ff3b 	bl	8001960 <read_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21c      	sxth	r4, r3
 8001af0:	202e      	movs	r0, #46	; 0x2e
 8001af2:	f7ff ff35 	bl	8001960 <read_byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4323      	orrs	r3, r4
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <read_accel_data+0x64>)
 8001b00:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001b02:	202f      	movs	r0, #47	; 0x2f
 8001b04:	f7ff ff2c 	bl	8001960 <read_byte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21c      	sxth	r4, r3
 8001b0e:	2030      	movs	r0, #48	; 0x30
 8001b10:	f7ff ff26 	bl	8001960 <read_byte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <read_accel_data+0x68>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f7ff ff1d 	bl	8001960 <read_byte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f7ff ff17 	bl	8001960 <read_byte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4323      	orrs	r3, r4
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <read_accel_data+0x6c>)
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	bd98      	pop	{r3, r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20038d8c 	.word	0x20038d8c
 8001b48:	20038d92 	.word	0x20038d92
 8001b4c:	20038d8a 	.word	0x20038d8a

08001b50 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	805a      	strh	r2, [r3, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	809a      	strh	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	811a      	strh	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	815a      	strh	r2, [r3, #10]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ba0:	f7ff ff3a 	bl	8001a18 <IMU_init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <_ZN3IMU4initEv+0x24>)
 8001bae:	f011 fa25 	bl	8012ffc <iprintf>

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08017168 	.word	0x08017168

08001bc0 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001bc8:	f7ff ff52 	bl	8001a70 <read_gyro_data>
	read_accel_data();
 8001bcc:	f7ff ff88 	bl	8001ae0 <read_accel_data>

	xa_ = xa;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_ZN3IMU12updateValuesEv+0x54>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_ZN3IMU12updateValuesEv+0x58>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <_ZN3IMU12updateValuesEv+0x5c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <_ZN3IMU12updateValuesEv+0x60>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <_ZN3IMU12updateValuesEv+0x64>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_ZN3IMU12updateValuesEv+0x68>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	815a      	strh	r2, [r3, #10]

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20038d8c 	.word	0x20038d8c
 8001c18:	20038d92 	.word	0x20038d92
 8001c1c:	20038d8a 	.word	0x20038d8a
 8001c20:	20038d90 	.word	0x20038d90
 8001c24:	20038d8e 	.word	0x20038d8e
 8001c28:	20038d88 	.word	0x20038d88
 8001c2c:	00000000 	.word	0x00000000

08001c30 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc88 	bl	8000554 <__aeabi_i2d>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001c56:	a315      	add	r3, pc, #84	; (adr r3, 8001cac <_ZN3IMU8getOmegaEv+0x7c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c60:	f7fe fe0c 	bl	800087c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c6e:	a311      	add	r3, pc, #68	; (adr r3, 8001cb4 <_ZN3IMU8getOmegaEv+0x84>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_ZN3IMU8getOmegaEv+0x78>)
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	40668000 	.word	0x40668000
 8001cac:	66666666 	.word	0x66666666
 8001cb0:	40306666 	.word	0x40306666
 8001cb4:	54411744 	.word	0x54411744
 8001cb8:	400921fb 	.word	0x400921fb

08001cbc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	b299      	uxth	r1, r3
 8001cd0:	1dfa      	adds	r2, r7, #7
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <INA260_read+0x50>)
 8001cda:	f006 f8b5 	bl	8007e48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	f107 020c 	add.w	r2, r7, #12
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2302      	movs	r3, #2
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <INA260_read+0x50>)
 8001cee:	f006 f9a9 	bl	8008044 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cf2:	7b3b      	ldrb	r3, [r7, #12]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d02:	89fb      	ldrh	r3, [r7, #14]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20038fa8 	.word	0x20038fa8

08001d10 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	4603      	mov	r3, r0
 8001d24:	71bb      	strb	r3, [r7, #6]
 8001d26:	460b      	mov	r3, r1
 8001d28:	717b      	strb	r3, [r7, #5]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	733b      	strb	r3, [r7, #12]
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	737b      	strb	r3, [r7, #13]
 8001d36:	797b      	ldrb	r3, [r7, #5]
 8001d38:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d3a:	793b      	ldrb	r3, [r7, #4]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2303      	movs	r3, #3
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <INA260_write+0x48>)
 8001d4a:	f006 f87d 	bl	8007e48 <HAL_I2C_Master_Transmit>
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20038fa8 	.word	0x20038fa8

08001d5c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	460b      	mov	r3, r1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d6e:	797b      	ldrb	r3, [r7, #5]
 8001d70:	79ba      	ldrb	r2, [r7, #6]
 8001d72:	79f9      	ldrb	r1, [r7, #7]
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff ffcb 	bl	8001d10 <INA260_write>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	21df      	movs	r1, #223	; 0xdf
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff ffe2 	bl	8001d5c <setConfig>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
{

}
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	482a      	ldr	r0, [pc, #168]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dca:	f005 febb 	bl	8007b44 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <_ZN8JoyStick8getValueEv+0x2e>
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001de6:	2101      	movs	r1, #1
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <_ZN8JoyStick8getValueEv+0xc0>)
 8001dea:	f005 feab 	bl	8007b44 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <_ZN8JoyStick8getValueEv+0x4e>
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0a:	481a      	ldr	r0, [pc, #104]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e0c:	f005 fe9a 	bl	8007b44 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <_ZN8JoyStick8getValueEv+0x70>
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4814      	ldr	r0, [pc, #80]	; (8001e7c <_ZN8JoyStick8getValueEv+0xc4>)
 8001e2c:	f005 fe8a 	bl	8007b44 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <_ZN8JoyStick8getValueEv+0x90>
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e4c:	f005 fe7a 	bl	8007b44 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <_ZN8JoyStick8getValueEv+0xb0>
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e68:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40020400 	.word	0x40020400

08001e80 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b52      	cmp	r3, #82	; 0x52
 8001e90:	d112      	bne.n	8001eb8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	4856      	ldr	r0, [pc, #344]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f005 fe6b 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ea4:	4853      	ldr	r0, [pc, #332]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f005 fe65 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb0:	4850      	ldr	r0, [pc, #320]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001eb2:	f005 fe5f 	bl	8007b74 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eb6:	e098      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b47      	cmp	r3, #71	; 0x47
 8001ebc:	d112      	bne.n	8001ee4 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec4:	484b      	ldr	r0, [pc, #300]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f005 fe55 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed0:	4848      	ldr	r0, [pc, #288]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f005 fe4f 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001edc:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ede:	f005 fe49 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001ee2:	e082      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b42      	cmp	r3, #66	; 0x42
 8001ee8:	d112      	bne.n	8001f10 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef0:	4840      	ldr	r0, [pc, #256]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f005 fe3f 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efc:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f005 fe39 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f0a:	f005 fe33 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001f0e:	e06c      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b43      	cmp	r3, #67	; 0x43
 8001f14:	d112      	bne.n	8001f3c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	4835      	ldr	r0, [pc, #212]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f005 fe29 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f28:	4832      	ldr	r0, [pc, #200]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f005 fe23 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f34:	482f      	ldr	r0, [pc, #188]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f36:	f005 fe1d 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001f3a:	e056      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b4d      	cmp	r3, #77	; 0x4d
 8001f40:	d112      	bne.n	8001f68 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f48:	482a      	ldr	r0, [pc, #168]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f005 fe13 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f54:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f005 fe0d 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f60:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f62:	f005 fe07 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001f66:	e040      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	2b59      	cmp	r3, #89	; 0x59
 8001f6c:	d112      	bne.n	8001f94 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f005 fdfd 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f80:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f005 fdf7 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f8e:	f005 fdf1 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001f92:	e02a      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b57      	cmp	r3, #87	; 0x57
 8001f98:	d112      	bne.n	8001fc0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa0:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f005 fde7 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f005 fde1 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb8:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fba:	f005 fddb 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001fbe:	e014      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc4:	d111      	bne.n	8001fea <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fdd1 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f005 fdcb 	bl	8007b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fe6:	f005 fdc5 	bl	8007b74 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
 8002004:	4613      	mov	r3, r2
 8002006:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002018:	f005 fdac 	bl	8007b74 <HAL_GPIO_WritePin>
 800201c:	e009      	b.n	8002032 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 800202e:	f005 fda1 	bl	8007b74 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002032:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d106      	bne.n	8002048 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002042:	f005 fd97 	bl	8007b74 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002046:	e009      	b.n	800205c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002058:	f005 fd8c 	bl	8007b74 <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020000 	.word	0x40020000

08002068 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002068:	b580      	push	{r7, lr}
 800206a:	b092      	sub	sp, #72	; 0x48
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fe92 	bl	8001da0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	331c      	adds	r3, #28
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
 800208a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	429a      	cmp	r2, r3
 8002090:	d008      	beq.n	80020a4 <_ZN10LineSensorC1Ev+0x3c>
 8002092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	3302      	adds	r3, #2
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
 80020a2:	e7f2      	b.n	800208a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	3338      	adds	r3, #56	; 0x38
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d009      	beq.n	80020d2 <_ZN10LineSensorC1Ev+0x6a>
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	623b      	str	r3, [r7, #32]
		s = 0;
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	3304      	adds	r3, #4
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
 80020d0:	e7f1      	b.n	80020b6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3338      	adds	r3, #56	; 0x38
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d009      	beq.n	8002100 <_ZN10LineSensorC1Ev+0x98>
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	617b      	str	r3, [r7, #20]
		m = 0;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	3304      	adds	r3, #4
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	e7f1      	b.n	80020e4 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <_ZN10LineSensorC1Ev+0xc6>
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	60bb      	str	r3, [r7, #8]
		s = 1;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002124:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	3304      	adds	r3, #4
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
 800212c:	e7f1      	b.n	8002112 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	3748      	adds	r7, #72	; 0x48
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	220e      	movs	r2, #14
 8002144:	4619      	mov	r1, r3
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002148:	f004 fae4 	bl	8006714 <HAL_ADC_Start_DMA>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20038ecc 	.word	0x20038ecc

08002158 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b0d      	cmp	r3, #13
 8002168:	dc2f      	bgt.n	80021ca <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3392      	adds	r3, #146	; 0x92
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	33a0      	adds	r3, #160	; 0xa0
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	440b      	add	r3, r1
 80021b6:	3306      	adds	r3, #6
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e7cc      	b.n	8002164 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b09      	cmp	r3, #9
 80021dc:	d902      	bls.n	80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]


}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000200 	.word	0x20000200

080021f4 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021f4:	b490      	push	{r4, r7}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002206:	2b0d      	cmp	r3, #13
 8002208:	f200 8087 	bhi.w	800231a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002212:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002216:	2b09      	cmp	r3, #9
 8002218:	d81c      	bhi.n	8002254 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800221a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800221e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002222:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4423      	add	r3, r4
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4403      	add	r3, r0
 8002238:	3304      	adds	r3, #4
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	008b      	lsls	r3, r1, #2
 800223e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002242:	440b      	add	r3, r1
 8002244:	3b30      	subs	r3, #48	; 0x30
 8002246:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002248:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800224c:	3301      	adds	r3, #1
 800224e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002252:	e7de      	b.n	8002212 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800225a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225e:	2b09      	cmp	r3, #9
 8002260:	d84d      	bhi.n	80022fe <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002262:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800226c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002270:	2b09      	cmp	r3, #9
 8002272:	d83e      	bhi.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002274:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227e:	4413      	add	r3, r2
 8002280:	3b30      	subs	r3, #48	; 0x30
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002290:	4413      	add	r3, r2
 8002292:	3b30      	subs	r3, #48	; 0x30
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d521      	bpl.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ac:	4413      	add	r3, r2
 80022ae:	3b30      	subs	r3, #48	; 0x30
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022b4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022c2:	440a      	add	r2, r1
 80022c4:	3a30      	subs	r2, #48	; 0x30
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ce:	440b      	add	r3, r1
 80022d0:	3b30      	subs	r3, #48	; 0x30
 80022d2:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022de:	4413      	add	r3, r2
 80022e0:	3b30      	subs	r3, #48	; 0x30
 80022e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e4:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ea:	3301      	adds	r3, #1
 80022ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022f0:	e7bc      	b.n	800226c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	3301      	adds	r3, #1
 80022f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022fc:	e7ad      	b.n	800225a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80022fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	33b0      	adds	r3, #176	; 0xb0
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800230e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002312:	3301      	adds	r3, #1
 8002314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002318:	e773      	b.n	8002202 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800231a:	bf00      	nop
 800231c:	3738      	adds	r7, #56	; 0x38
 800231e:	46bd      	mov	sp, r7
 8002320:	bc90      	pop	{r4, r7}
 8002322:	4770      	bx	lr

08002324 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	d012      	beq.n	8002370 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002390 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	db02      	blt.n	8002368 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	3301      	adds	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	3304      	adds	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e7e8      	b.n	8002342 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	2b0d      	cmp	r3, #13
 8002374:	d902      	bls.n	800237c <_ZN10LineSensor13emergencyStopEv+0x58>
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
 800237a:	e001      	b.n	8002380 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002380:	7dfb      	ldrb	r3, [r7, #23]

}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	44160000 	.word	0x44160000

08002394 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	609a      	str	r2, [r3, #8]
}
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800240c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800243c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002450:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800245c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002468:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002474:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002480:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800248c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	ee07 3a90 	vmov	s15, r3

}
 800249e:	eeb0 0a67 	vmov.f32	s0, s15
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff95 	bl	80023e8 <_ZN9LineTrace9calcErrorEv>
 80024be:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80024c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <_ZN9LineTrace3pidEv+0x130>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fe f842 	bl	8000578 <__aeabi_f2d>
 80024f4:	a338      	add	r3, pc, #224	; (adr r3, 80025d8 <_ZN9LineTrace3pidEv+0x128>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f9bf 	bl	800087c <__aeabi_ddiv>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	4618      	mov	r0, r3
 8002504:	4621      	mov	r1, r4
 8002506:	f7fe fb87 	bl	8000c18 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f830 	bl	8000578 <__aeabi_f2d>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002522:	edd7 7a07 	vldr	s15, [r7, #28]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f823 	bl	8000578 <__aeabi_f2d>
 8002532:	a329      	add	r3, pc, #164	; (adr r3, 80025d8 <_ZN9LineTrace3pidEv+0x128>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f876 	bl	8000628 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4603      	mov	r3, r0
 800254a:	460c      	mov	r4, r1
 800254c:	4618      	mov	r0, r3
 800254e:	4621      	mov	r1, r4
 8002550:	f7fe fb62 	bl	8000c18 <__aeabi_d2f>
 8002554:	4602      	mov	r2, r0
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002558:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002560:	edd7 6a06 	vldr	s13, [r7, #24]
 8002564:	edd7 7a05 	vldr	s15, [r7, #20]
 8002568:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ed93 7a08 	vldr	s14, [r3, #32]
 8002584:	edd7 6a06 	vldr	s13, [r7, #24]
 8002588:	edd7 7a05 	vldr	s15, [r7, #20]
 800258c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681c      	ldr	r4, [r3, #0]
 80025a6:	6938      	ldr	r0, [r7, #16]
 80025a8:	f7fd ffe6 	bl	8000578 <__aeabi_f2d>
 80025ac:	4605      	mov	r5, r0
 80025ae:	460e      	mov	r6, r1
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7fd ffe1 	bl	8000578 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b11 	vmov	d1, r2, r3
 80025be:	ec46 5b10 	vmov	d0, r5, r6
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 fa10 	bl	80029e8 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <_ZN9LineTrace3pidEv+0x130>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	6013      	str	r3, [r2, #0]

}
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f50624d 	.word	0x3f50624d
 80025e0:	20000204 	.word	0x20000204
 80025e4:	20000208 	.word	0x20000208

080025e8 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80025f8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	659a      	str	r2, [r3, #88]	; 0x58
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff21 	bl	80024b0 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe56 	bl	8002324 <_ZN10LineSensor13emergencyStopEv>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80026c0 <_ZN9LineTrace4flipEv+0x68>
 8002686:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80026c0 <_ZN9LineTrace4flipEv+0x68>
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f9ac 	bl	80029e8 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	330c      	adds	r3, #12
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fcac 	bl	8001ff8 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80026a0:	e007      	b.n	80026b2 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f04f 32ff 	mov.w	r2, #4294967295
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fca3 	bl	8001ff8 <_ZN3LED2LREaa>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
	...

080026c8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	771a      	strb	r2, [r3, #28]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	0000      	movs	r0, r0
 80026e4:	0000      	movs	r0, r0
	...

080026e8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002710 <_ZN9LineTrace4stopEv+0x28>
 80026fe:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002710 <_ZN9LineTrace4stopEv+0x28>
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f970 	bl	80029e8 <_ZN5Motor8setRatioEdd>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
	...

08002718 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002726:	3330      	adds	r3, #48	; 0x30
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002732:	3332      	adds	r3, #50	; 0x32
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800273e:	3334      	adds	r3, #52	; 0x34
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002760:	f7ff f898 	bl	8001894 <sd_mount>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002776:	f010 fcb5 	bl	80130e4 <puts>
	  ret = true;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
 800277e:	e004      	b.n	800278a <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002780:	4814      	ldr	r0, [pc, #80]	; (80027d4 <_ZN6Logger10sdCardInitEv+0x80>)
 8002782:	f010 fcaf 	bl	80130e4 <puts>
	  ret = false;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800278e:	f107 0210 	add.w	r2, r7, #16
 8002792:	2301      	movs	r3, #1
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	2201      	movs	r2, #1
 800279a:	490f      	ldr	r1, [pc, #60]	; (80027d8 <_ZN6Logger10sdCardInitEv+0x84>)
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 800279e:	f7fe ffd5 	bl	800174c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	2201      	movs	r2, #1
 80027a8:	490b      	ldr	r1, [pc, #44]	; (80027d8 <_ZN6Logger10sdCardInitEv+0x84>)
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 80027ac:	f7ff f82c 	bl	8001808 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80027b0:	f107 020c 	add.w	r2, r7, #12
 80027b4:	2301      	movs	r3, #1
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	2201      	movs	r2, #1
 80027bc:	4908      	ldr	r1, [pc, #32]	; (80027e0 <_ZN6Logger10sdCardInitEv+0x8c>)
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 80027c0:	f7fe ffc4 	bl	800174c <sd_write_array_int>

	return ret;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	08017178 	.word	0x08017178
 80027d4:	08017188 	.word	0x08017188
 80027d8:	08017198 	.word	0x08017198
 80027dc:	080171a4 	.word	0x080171a4
 80027e0:	080171ac 	.word	0x080171ac

080027e4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002830:	3332      	adds	r3, #50	; 0x32
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f241 3287 	movw	r2, #4999	; 0x1387
 8002838:	4293      	cmp	r3, r2
 800283a:	d905      	bls.n	8002848 <_ZN6Logger8storeLogEf+0x64>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]
	}
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68b8      	ldr	r0, [r7, #8]
 8002870:	f7fe fe5e 	bl	8001530 <sd_write_array_float>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002890:	3330      	adds	r3, #48	; 0x30
 8002892:	2200      	movs	r2, #0
 8002894:	9200      	str	r2, [sp, #0]
 8002896:	f241 7270 	movw	r2, #6000	; 0x1770
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f7fe fead 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80028a8:	33b0      	adds	r3, #176	; 0xb0
 80028aa:	2200      	movs	r2, #0
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	f241 7270 	movw	r2, #6000	; 0x1770
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	68b8      	ldr	r0, [r7, #8]
 80028b6:	f7fe fea1 	bl	80015fc <sd_write_array_double>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80028d0:	3330      	adds	r3, #48	; 0x30
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80028f0:	3330      	adds	r3, #48	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	805a      	strh	r2, [r3, #2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800292c:	2108      	movs	r1, #8
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <_ZN5Motor4initEv+0x20>)
 8002930:	f009 f852 	bl	800b9d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002934:	210c      	movs	r1, #12
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <_ZN5Motor4initEv+0x20>)
 8002938:	f009 f84e 	bl	800b9d8 <HAL_TIM_PWM_Start>

}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20038e8c 	.word	0x20038e8c

08002948 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0d      	bge.n	8002976 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002960:	481f      	ldr	r0, [pc, #124]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002962:	f005 f907 	bl	8007b74 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296c:	b29b      	uxth	r3, r3
 800296e:	425b      	negs	r3, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	81fb      	strh	r3, [r7, #14]
 8002974:	e00a      	b.n	800298c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800297c:	4818      	ldr	r0, [pc, #96]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 800297e:	f005 f8f9 	bl	8007b74 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	b29b      	uxth	r3, r3
 800298a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da0d      	bge.n	80029b2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 800299e:	f005 f8e9 	bl	8007b74 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	425b      	negs	r3, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	81bb      	strh	r3, [r7, #12]
 80029b0:	e00a      	b.n	80029c8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b8:	4809      	ldr	r0, [pc, #36]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 80029ba:	f005 f8db 	bl	8007b74 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80029c8:	89fa      	ldrh	r2, [r7, #14]
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80029d0:	89ba      	ldrh	r2, [r7, #12]
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	20038e8c 	.word	0x20038e8c

080029e8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6178      	str	r0, [r7, #20]
 80029f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80029f4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 80029fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a02:	f7fe f8a1 	bl	8000b48 <__aeabi_dcmpgt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <_ZN5Motor8setRatioEdd+0x30>
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	4c2b      	ldr	r4, [pc, #172]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a12:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002a16:	e00e      	b.n	8002a36 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a22:	f7fe f873 	bl	8000b0c <__aeabi_dcmplt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <_ZN5Motor8setRatioEdd+0x4e>
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	4c24      	ldr	r4, [pc, #144]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a40:	f7fe f882 	bl	8000b48 <__aeabi_dcmpgt>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <_ZN5Motor8setRatioEdd+0x6e>
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	4c1c      	ldr	r4, [pc, #112]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a50:	e9c7 3400 	strd	r3, r4, [r7]
 8002a54:	e00e      	b.n	8002a74 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a60:	f7fe f854 	bl	8000b0c <__aeabi_dcmplt>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <_ZN5Motor8setRatioEdd+0x8c>
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	4c15      	ldr	r4, [pc, #84]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a70:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a7e:	f7fd fdd3 	bl	8000628 <__aeabi_dmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	4618      	mov	r0, r3
 8002a88:	4621      	mov	r1, r4
 8002a8a:	f7fe f87d 	bl	8000b88 <__aeabi_d2iz>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aa0:	f7fd fdc2 	bl	8000628 <__aeabi_dmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	f7fe f86c 	bl	8000b88 <__aeabi_d2iz>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	805a      	strh	r2, [r3, #2]

}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	3ff00000 	.word	0x3ff00000
 8002ac4:	bff00000 	.word	0xbff00000
 8002ac8:	409c2000 	.word	0x409c2000

08002acc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002acc:	b490      	push	{r4, r7}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	f04f 0400 	mov.w	r4, #0
 8002ae4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc90      	pop	{r4, r7}
 8002b20:	4770      	bx	lr
 8002b22:	0000      	movs	r0, r0
 8002b24:	0000      	movs	r0, r0
	...

08002b28 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f87a 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8002b3c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fc16 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002b4a:	ec54 3b10 	vmov	r3, r4, d0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4621      	mov	r1, r4
 8002b52:	f7fe f861 	bl	8000c18 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002b5a:	a358      	add	r3, pc, #352	; (adr r3, 8002cbc <_ZN8Odometry12calcPotitionEv+0x194>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b64:	f7fd fd60 	bl	8000628 <__aeabi_dmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7fd fcfd 	bl	8000578 <__aeabi_f2d>
 8002b7e:	4682      	mov	sl, r0
 8002b80:	468b      	mov	fp, r1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b96:	f7fd fe71 	bl	800087c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	f7fd fb8b 	bl	80002bc <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	ec43 2b17 	vmov	d7, r2, r3
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	eef0 0a67 	vmov.f32	s1, s15
 8002bb6:	f00e fa4b 	bl	8011050 <cos>
 8002bba:	ec53 2b10 	vmov	r2, r3, d0
 8002bbe:	4650      	mov	r0, sl
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	f7fd fd31 	bl	8000628 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd fb75 	bl	80002bc <__adddf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7fd fcc8 	bl	8000578 <__aeabi_f2d>
 8002be8:	4682      	mov	sl, r0
 8002bea:	468b      	mov	fp, r1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c00:	f7fd fe3c 	bl	800087c <__aeabi_ddiv>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fb56 	bl	80002bc <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b17 	vmov	d7, r2, r3
 8002c18:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1c:	eef0 0a67 	vmov.f32	s1, s15
 8002c20:	f00e fa5a 	bl	80110d8 <sin>
 8002c24:	ec53 2b10 	vmov	r2, r3, d0
 8002c28:	4650      	mov	r0, sl
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	f7fd fcfc 	bl	8000628 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	f7fd fb40 	bl	80002bc <__adddf3>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002c52:	461a      	mov	r2, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	f7fd fb31 	bl	80002bc <__adddf3>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f7fd ffd3 	bl	8000c18 <__aeabi_d2f>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002c76:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4621      	mov	r1, r4
 8002c82:	f7fd ffc9 	bl	8000c18 <__aeabi_d2f>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002c8a:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002c92:	4618      	mov	r0, r3
 8002c94:	4621      	mov	r1, r4
 8002c96:	f7fd ffbf 	bl	8000c18 <__aeabi_d2f>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002c9e:	601a      	str	r2, [r3, #0]


}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	f3af 8000 	nop.w
 8002cb0:	2000020c 	.word	0x2000020c
 8002cb4:	20000210 	.word	0x20000210
 8002cb8:	20000214 	.word	0x20000214
 8002cbc:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cc0:	3f50624d 	.word	0x3f50624d

08002cc4 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff2b 	bl	8002b28 <_ZN8Odometry12calcPotitionEv>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 8002cda:	b490      	push	{r4, r7}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
	return x_;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002ce8:	ec44 3b17 	vmov	d7, r3, r4
}
 8002cec:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf0:	eef0 0a67 	vmov.f32	s1, s15
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc90      	pop	{r4, r7}
 8002cfa:	4770      	bx	lr

08002cfc <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 8002cfc:	b490      	push	{r4, r7}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	return y_;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002d0a:	ec44 3b17 	vmov	d7, r3, r4
}
 8002d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d12:	eef0 0a67 	vmov.f32	s1, s15
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc90      	pop	{r4, r7}
 8002d1c:	4770      	bx	lr

08002d1e <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 8002d1e:	b490      	push	{r4, r7}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	return theta_;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002d2c:	ec44 3b17 	vmov	d7, r3, r4
}
 8002d30:	eeb0 0a47 	vmov.f32	s0, s14
 8002d34:	eef0 0a67 	vmov.f32	s1, s15
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc90      	pop	{r4, r7}
 8002d3e:	4770      	bx	lr

08002d40 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002d40:	b490      	push	{r4, r7}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	f04f 0400 	mov.w	r4, #0
 8002d52:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc90      	pop	{r4, r7}
 8002d7a:	4770      	bx	lr

08002d7c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002d7c:	b490      	push	{r4, r7}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f04f 0400 	mov.w	r4, #0
 8002da2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002dba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	f04f 0400 	mov.w	r4, #0
 8002dcc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002dde:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	f04f 0400 	mov.w	r4, #0
 8002e04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f04f 0400 	mov.w	r4, #0
 8002e2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002e40:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <_ZN13PathFollowingC1Ev+0xf4>)
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <_ZN13PathFollowingC1Ev+0xf4>)
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc90      	pop	{r4, r7}
 8002e66:	4770      	bx	lr
 8002e68:	20039390 	.word	0x20039390
 8002e6c:	20039320 	.word	0x20039320
 8002e70:	20039380 	.word	0x20039380

08002e74 <_ZN13PathFollowing6isNearEddd>:
	y = y + distance * sin(theta);

}

bool PathFollowing::isNear(const double src_data, const double target_data, const double margin)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	61f8      	str	r0, [r7, #28]
 8002e7c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e80:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e84:	ed87 2b00 	vstr	d2, [r7]

	if(target_data - margin < src_data && src_data < target_data + margin){
 8002e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e90:	f7fd fa12 	bl	80002b8 <__aeabi_dsub>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ea0:	f7fd fe52 	bl	8000b48 <__aeabi_dcmpgt>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <_ZN13PathFollowing6isNearEddd+0x5c>
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb2:	f7fd fa03 	bl	80002bc <__adddf3>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec2:	f7fd fe23 	bl	8000b0c <__aeabi_dcmplt>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <_ZN13PathFollowing6isNearEddd+0x5c>
		return true;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <_ZN13PathFollowing6isNearEddd+0x5e>
	}
	else{
		return false;
 8002ed0:	2300      	movs	r3, #0
	}

}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8002ee2:	f001 ff27 	bl	8004d34 <path_following_initialize>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8002ef0:	b490      	push	{r4, r7}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	61f8      	str	r0, [r7, #28]
 8002ef8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002efc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f00:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f0a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f14:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc90      	pop	{r4, r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20039390 	.word	0x20039390

08002f30 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8002f30:	b490      	push	{r4, r7}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <_ZN13PathFollowing8getKxValEv+0x24>)
 8002f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f3e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc90      	pop	{r4, r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20039390 	.word	0x20039390

08002f58 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8002f58:	b490      	push	{r4, r7}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_ZN13PathFollowing8getKyValEv+0x24>)
 8002f62:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002f66:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6e:	eef0 0a67 	vmov.f32	s1, s15
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc90      	pop	{r4, r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20039390 	.word	0x20039390

08002f80 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8002f80:	b490      	push	{r4, r7}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <_ZN13PathFollowing8getKtValEv+0x24>)
 8002f8a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002f8e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f92:	eeb0 0a47 	vmov.f32	s0, s14
 8002f96:	eef0 0a67 	vmov.f32	s1, s15
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc90      	pop	{r4, r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20039390 	.word	0x20039390

08002fa8 <_ZN13PathFollowing18setTargetPathMultiEv>:
	rtU.target_y = y;
	rtU.th = th;
}

void PathFollowing::setTargetPathMulti()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	sd_read_array_double("Pos", "d_th.txt", LOG_DATA_SIZE_DIS, log_delta_thetas_);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8002fb6:	33a0      	adds	r3, #160	; 0xa0
 8002fb8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fbc:	490f      	ldr	r1, [pc, #60]	; (8002ffc <_ZN13PathFollowing18setTargetPathMultiEv+0x54>)
 8002fbe:	4810      	ldr	r0, [pc, #64]	; (8003000 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8002fc0:	f7fe fb7e 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Pos", "d_dis.txt", LOG_DATA_SIZE_DIS, log_distances_);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3320      	adds	r3, #32
 8002fc8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fcc:	490d      	ldr	r1, [pc, #52]	; (8003004 <_ZN13PathFollowing18setTargetPathMultiEv+0x5c>)
 8002fce:	480c      	ldr	r0, [pc, #48]	; (8003000 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8002fd0:	f7fe fb76 	bl	80016c0 <sd_read_array_double>

	mon_log_dis = log_distances_[1];
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <_ZN13PathFollowing18setTargetPathMultiEv+0x60>)
 8002fdc:	e9c2 3400 	strd	r3, r4, [r2]
	mon_log_th = log_delta_thetas_[1];
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8002fe6:	33a8      	adds	r3, #168	; 0xa8
 8002fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <_ZN13PathFollowing18setTargetPathMultiEv+0x64>)
 8002fee:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	080171b8 	.word	0x080171b8
 8003000:	080171c4 	.word	0x080171c4
 8003004:	080171c8 	.word	0x080171c8
 8003008:	20000238 	.word	0x20000238
 800300c:	20000240 	.word	0x20000240

08003010 <_ZN13PathFollowing12targetUpdateEv>:

void PathFollowing::targetUpdate()
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8110 	beq.w	8003244 <_ZN13PathFollowing12targetUpdateEv+0x234>
		//if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 30) == true && isNear(rtU.th_cur, th_tar_, 1.100) == true){
		if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 10) == true && isNear(rtU.th_cur, th_tar_, 3) == true){
 8003024:	4b9c      	ldr	r3, [pc, #624]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 8003026:	ed93 7b06 	vldr	d7, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003030:	ed9f 2b95 	vldr	d2, [pc, #596]	; 8003288 <_ZN13PathFollowing12targetUpdateEv+0x278>
 8003034:	eeb0 1a46 	vmov.f32	s2, s12
 8003038:	eef0 1a66 	vmov.f32	s3, s13
 800303c:	eeb0 0a47 	vmov.f32	s0, s14
 8003040:	eef0 0a67 	vmov.f32	s1, s15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff15 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02d      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 8003050:	4b91      	ldr	r3, [pc, #580]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 8003052:	ed93 7b08 	vldr	d7, [r3, #32]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	ed93 6b04 	vldr	d6, [r3, #16]
 800305c:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 8003288 <_ZN13PathFollowing12targetUpdateEv+0x278>
 8003060:	eeb0 1a46 	vmov.f32	s2, s12
 8003064:	eef0 1a66 	vmov.f32	s3, s13
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	eef0 0a67 	vmov.f32	s1, s15
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff feff 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 800307c:	4b86      	ldr	r3, [pc, #536]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 800307e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	ed93 6b06 	vldr	d6, [r3, #24]
 8003088:	ed9f 2b81 	vldr	d2, [pc, #516]	; 8003290 <_ZN13PathFollowing12targetUpdateEv+0x280>
 800308c:	eeb0 1a46 	vmov.f32	s2, s12
 8003090:	eef0 1a66 	vmov.f32	s3, s13
 8003094:	eeb0 0a47 	vmov.f32	s0, s14
 8003098:	eef0 0a67 	vmov.f32	s1, s15
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fee9 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <_ZN13PathFollowing12targetUpdateEv+0x9e>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80b6 	beq.w	8003220 <_ZN13PathFollowing12targetUpdateEv+0x210>
			ref_num++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030ca:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030ce:	801a      	strh	r2, [r3, #0]
			x_tar_ = x_tar_ + log_distances_[ref_num] * cos(th_tar_ + log_delta_thetas_[ref_num] / 2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030fa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003106:	3314      	adds	r3, #20
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003118:	f7fd fbb0 	bl	800087c <__aeabi_ddiv>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4650      	mov	r0, sl
 8003122:	4659      	mov	r1, fp
 8003124:	f7fd f8ca 	bl	80002bc <__adddf3>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b17 	vmov	d7, r2, r3
 8003130:	eeb0 0a47 	vmov.f32	s0, s14
 8003134:	eef0 0a67 	vmov.f32	s1, s15
 8003138:	f00d ff8a 	bl	8011050 <cos>
 800313c:	ec53 2b10 	vmov	r2, r3, d0
 8003140:	4640      	mov	r0, r8
 8003142:	4649      	mov	r1, r9
 8003144:	f7fd fa70 	bl	8000628 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f8b4 	bl	80002bc <__adddf3>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	e9c2 3402 	strd	r3, r4, [r2, #8]
			y_tar_ = y_tar_ + log_distances_[ref_num] * sin(th_tar_ + log_delta_thetas_[ref_num] / 2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800316a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003188:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003194:	3314      	adds	r3, #20
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a6:	f7fd fb69 	bl	800087c <__aeabi_ddiv>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4650      	mov	r0, sl
 80031b0:	4659      	mov	r1, fp
 80031b2:	f7fd f883 	bl	80002bc <__adddf3>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	ec43 2b17 	vmov	d7, r2, r3
 80031be:	eeb0 0a47 	vmov.f32	s0, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	f00d ff87 	bl	80110d8 <sin>
 80031ca:	ec53 2b10 	vmov	r2, r3, d0
 80031ce:	4640      	mov	r0, r8
 80031d0:	4649      	mov	r1, r9
 80031d2:	f7fd fa29 	bl	8000628 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4620      	mov	r0, r4
 80031dc:	4629      	mov	r1, r5
 80031de:	f7fd f86d 	bl	80002bc <__adddf3>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			th_tar_ = th_tar_ + log_delta_thetas_[ref_num];
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80031f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003204:	3314      	adds	r3, #20
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800320e:	461a      	mov	r2, r3
 8003210:	4623      	mov	r3, r4
 8003212:	f7fd f853 	bl	80002bc <__adddf3>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	e9c2 3406 	strd	r3, r4, [r2, #24]
		}
		if(ref_num >= LOG_DATA_SIZE_DIS) ref_num = LOG_DATA_SIZE_DIS;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003226:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003230:	4293      	cmp	r3, r2
 8003232:	d907      	bls.n	8003244 <_ZN13PathFollowing12targetUpdateEv+0x234>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800323a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800323e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003242:	801a      	strh	r2, [r3, #0]

	}

	mon_ref_num = ref_num;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800324a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <_ZN13PathFollowing12targetUpdateEv+0x28c>)
 8003252:	801a      	strh	r2, [r3, #0]
	mon_x = x_tar_;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <_ZN13PathFollowing12targetUpdateEv+0x290>)
 800325c:	e9c2 3400 	strd	r3, r4, [r2]
	mon_y = y_tar_;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003266:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <_ZN13PathFollowing12targetUpdateEv+0x294>)
 8003268:	e9c2 3400 	strd	r3, r4, [r2]
	mon_th = th_tar_;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <_ZN13PathFollowing12targetUpdateEv+0x298>)
 8003274:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	f3af 8000 	nop.w
 8003288:	00000000 	.word	0x00000000
 800328c:	40240000 	.word	0x40240000
 8003290:	00000000 	.word	0x00000000
 8003294:	40080000 	.word	0x40080000
 8003298:	20039320 	.word	0x20039320
 800329c:	20000218 	.word	0x20000218
 80032a0:	20000220 	.word	0x20000220
 80032a4:	20000228 	.word	0x20000228
 80032a8:	20000230 	.word	0x20000230

080032ac <_ZN13PathFollowing14setCurrentPathEddd>:


void PathFollowing::setCurrentPath(double x, double y, double th)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	61f8      	str	r0, [r7, #28]
 80032b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80032b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80032bc:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032c6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032d0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032da:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 80032de:	bf00      	nop
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc90      	pop	{r4, r7}
 80032e6:	4770      	bx	lr
 80032e8:	20039320 	.word	0x20039320

080032ec <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 80032ec:	b490      	push	{r4, r7}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 80032fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 8003306:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bc90      	pop	{r4, r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20039380 	.word	0x20039380

08003320 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_ZN13PathFollowing4flipEv+0x14>
		path_following_step();
 8003330:	f001 fbf8 	bl	8004b24 <path_following_step>
	}
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN13PathFollowing5startEv>:

void PathFollowing::start()
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 8003356:	b490      	push	{r4, r7}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
	ref_num = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800336a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800336e:	2200      	movs	r2, #0
 8003370:	801a      	strh	r2, [r3, #0]
	x_tar_ = 0;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	y_tar_ = 0;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	f04f 0400 	mov.w	r4, #0
 800338a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	th_tar_ = 0;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc90      	pop	{r4, r7}
 80033a4:	4770      	bx	lr

080033a6 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80033ae:	2088      	movs	r0, #136	; 0x88
 80033b0:	f7fe fce7 	bl	8001d82 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80033b4:	2080      	movs	r0, #128	; 0x80
 80033b6:	f7fe fce4 	bl	8001d82 <INA260_init>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	0000      	movs	r0, r0
 80033c4:	0000      	movs	r0, r0
	...

080033c8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80033d0:	2188      	movs	r1, #136	; 0x88
 80033d2:	2002      	movs	r0, #2
 80033d4:	f7fe fc72 	bl	8001cbc <INA260_read>
 80033d8:	4603      	mov	r3, r0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8ba 	bl	8000554 <__aeabi_i2d>
 80033e0:	a30c      	add	r3, pc, #48	; (adr r3, 8003414 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f91f 	bl	8000628 <__aeabi_dmul>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	4618      	mov	r0, r3
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7fd fc11 	bl	8000c18 <__aeabi_d2f>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a03      	ldr	r2, [pc, #12]	; (8003410 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	f3af 8000 	nop.w
 8003410:	20000248 	.word	0x20000248
 8003414:	47ae147b 	.word	0x47ae147b
 8003418:	3f547ae1 	.word	0x3f547ae1
 800341c:	00000000 	.word	0x00000000

08003420 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f8a1 	bl	8000578 <__aeabi_f2d>
 8003436:	a311      	add	r3, pc, #68	; (adr r3, 800347c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fd fb66 	bl	8000b0c <__aeabi_dcmplt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e002      	b.n	800345a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003456:	2200      	movs	r2, #0
 8003458:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003468:	2201      	movs	r2, #1
 800346a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2000024c 	.word	0x2000024c
 800347c:	9999999a 	.word	0x9999999a
 8003480:	401d9999 	.word	0x401d9999

08003484 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003490:	2102      	movs	r1, #2
 8003492:	4822      	ldr	r0, [pc, #136]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003494:	f004 fb56 	bl	8007b44 <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80034b0:	2108      	movs	r1, #8
 80034b2:	481a      	ldr	r0, [pc, #104]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034b4:	f004 fb46 	bl	8007b44 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80034d0:	2110      	movs	r1, #16
 80034d2:	4812      	ldr	r0, [pc, #72]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034d4:	f004 fb36 	bl	8007b44 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	480a      	ldr	r0, [pc, #40]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034f4:	f004 fb26 	bl	8007b44 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003510:	89fb      	ldrh	r3, [r7, #14]

}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020c00 	.word	0x40020c00

08003520 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
{

}
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d111      	bne.n	800356e <_ZN10SideSensor12updateStatusEt+0x36>
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e010      	b.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d10d      	bne.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d111      	bne.n	80035bc <_ZN10SideSensor12updateStatusEt+0x84>
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80035ba:	e011      	b.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d10d      	bne.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f083 0302 	eor.w	r3, r3, #2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	2000024e 	.word	0x2000024e
 80035f0:	2000024f 	.word	0x2000024f

080035f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80035f4:	b490      	push	{r4, r7}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	61da      	str	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	621a      	str	r2, [r3, #32]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
	...

08003680 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f107 0208 	add.w	r2, r7, #8
 8003690:	f107 0110 	add.w	r1, r7, #16
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fe57 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 800369a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800369e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	f7fc fe09 	bl	80002bc <__adddf3>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	4618      	mov	r0, r3
 80036b0:	4621      	mov	r1, r4
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ba:	f7fd f8df 	bl	800087c <__aeabi_ddiv>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80036c6:	a310      	add	r3, pc, #64	; (adr r3, 8003708 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036d0:	f7fc ffaa 	bl	8000628 <__aeabi_dmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4618      	mov	r0, r3
 80036da:	4621      	mov	r1, r4
 80036dc:	f7fd fa9c 	bl	8000c18 <__aeabi_d2f>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc ff44 	bl	8000578 <__aeabi_f2d>
 80036f0:	4603      	mov	r3, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	ec44 3b17 	vmov	d7, r3, r4
}
 80036f8:	eeb0 0a47 	vmov.f32	s0, s14
 80036fc:	eef0 0a67 	vmov.f32	s1, s15
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	1ab1d998 	.word	0x1ab1d998
 800370c:	3f7830b5 	.word	0x3f7830b5

08003710 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b08d      	sub	sp, #52	; 0x34
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	ed93 7a00 	vldr	s14, [r3]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	edd3 7a02 	vldr	s15, [r3, #8]
 8003724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003728:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc ff21 	bl	8000578 <__aeabi_f2d>
 8003736:	4604      	mov	r4, r0
 8003738:	460d      	mov	r5, r1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fa76 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8003744:	ec53 2b10 	vmov	r2, r3, d0
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc fdb4 	bl	80002b8 <__aeabi_dsub>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4618      	mov	r0, r3
 8003756:	4621      	mov	r1, r4
 8003758:	f7fd fa5e 	bl	8000c18 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	edd3 7a06 	vldr	s15, [r3, #24]
 8003766:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	ed93 7a07 	vldr	s14, [r3, #28]
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <_ZN12VelocityCtrl3pidEv+0x238>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003782:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	ee17 0a90 	vmov	r0, s15
 800378e:	f7fc fef3 	bl	8000578 <__aeabi_f2d>
 8003792:	a36b      	add	r3, pc, #428	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fc ff46 	bl	8000628 <__aeabi_dmul>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4618      	mov	r0, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	f7fd fa38 	bl	8000c18 <__aeabi_d2f>
 80037a8:	4603      	mov	r3, r0
 80037aa:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80037ac:	4b67      	ldr	r3, [pc, #412]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fee1 	bl	8000578 <__aeabi_f2d>
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80037c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c8:	ee17 0a90 	vmov	r0, s15
 80037cc:	f7fc fed4 	bl	8000578 <__aeabi_f2d>
 80037d0:	a35b      	add	r3, pc, #364	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f7fc ff27 	bl	8000628 <__aeabi_dmul>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4620      	mov	r0, r4
 80037e0:	4629      	mov	r1, r5
 80037e2:	f7fc fd6b 	bl	80002bc <__adddf3>
 80037e6:	4603      	mov	r3, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	4618      	mov	r0, r3
 80037ec:	4621      	mov	r1, r4
 80037ee:	f7fd fa13 	bl	8000c18 <__aeabi_d2f>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037f6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80037fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800381a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fea7 	bl	8000578 <__aeabi_f2d>
 800382a:	a345      	add	r3, pc, #276	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc fefa 	bl	8000628 <__aeabi_dmul>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4618      	mov	r0, r3
 800383a:	4621      	mov	r1, r4
 800383c:	f7fd f9ec 	bl	8000c18 <__aeabi_d2f>
 8003840:	4603      	mov	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe95 	bl	8000578 <__aeabi_f2d>
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800385c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003860:	ee17 0a90 	vmov	r0, s15
 8003864:	f7fc fe88 	bl	8000578 <__aeabi_f2d>
 8003868:	a335      	add	r3, pc, #212	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fedb 	bl	8000628 <__aeabi_dmul>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f7fc fd1f 	bl	80002bc <__adddf3>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	4618      	mov	r0, r3
 8003884:	4621      	mov	r1, r4
 8003886:	f7fd f9c7 	bl	8000c18 <__aeabi_d2f>
 800388a:	4602      	mov	r2, r0
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 800388e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003890:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003894:	edd7 7a08 	vldr	s15, [r7, #32]
 8003898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a6:	edc7 7a05 	vstr	s15, [r7, #20]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80038ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80038b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	eef1 7a67 	vneg.f32	s15, s15
 80038e2:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80038ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	ee17 0a90 	vmov	r0, s15
 80038fa:	f7fc fe3d 	bl	8000578 <__aeabi_f2d>
 80038fe:	4605      	mov	r5, r0
 8003900:	460e      	mov	r6, r1
 8003902:	ed97 7a05 	vldr	s14, [r7, #20]
 8003906:	edd7 7a02 	vldr	s15, [r7, #8]
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	ee17 0a90 	vmov	r0, s15
 8003912:	f7fc fe31 	bl	8000578 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	ec43 2b11 	vmov	d1, r2, r3
 800391e:	ec46 5b10 	vmov	d0, r5, r6
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff f860 	bl	80029e8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <_ZN12VelocityCtrl3pidEv+0x238>)
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	3734      	adds	r7, #52	; 0x34
 8003938:	46bd      	mov	sp, r7
 800393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393c:	f3af 8000 	nop.w
 8003940:	d2f1a9fc 	.word	0xd2f1a9fc
 8003944:	3f50624d 	.word	0x3f50624d
 8003948:	20000250 	.word	0x20000250
 800394c:	20000258 	.word	0x20000258
 8003950:	20000254 	.word	0x20000254
 8003954:	2000025c 	.word	0x2000025c

08003958 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	ed87 0a02 	vstr	s0, [r7, #8]
 8003964:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	ed87 0a02 	vstr	s0, [r7, #8]
 800398c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003990:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80039be:	edc7 0a01 	vstr	s1, [r7, #4]
 80039c2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fe47 	bl	8003680 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe87 	bl	8003710 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003a58 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003a58 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ffcf 	bl	80029e8 <_ZN5Motor8setRatioEdd>

}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	f3af 8000 	nop.w
	...

08003a60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003a80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003a88:	e000      	b.n	8003a8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8003a8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003a8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f9      	beq.n	8003a8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003a96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e009      	b.n	8003ad4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	60ba      	str	r2, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffc9 	bl	8003a60 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	dbf1      	blt.n	8003ac0 <_write+0x12>
  }
  return len;
 8003adc:	687b      	ldr	r3, [r7, #4]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 f8da 	bl	8005cac <cppExit>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003b12:	f001 fff9 	bl	8005b08 <cppFlip1ms>

		tim6_timer++;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b1e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d902      	bls.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003b3a:	f002 f80f 	bl	8005b5c <cppFlip100ns>

		tim7_timer++;
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b46:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d902      	bls.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003b62:	f002 f805 	bl	8005b70 <cppFlip10ms>

		tim13_timer++;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b6e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d902      	bls.n	8003b80 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
	}

}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40001000 	.word	0x40001000
 8003b8c:	20038ffc 	.word	0x20038ffc
 8003b90:	0001869f 	.word	0x0001869f
 8003b94:	40001400 	.word	0x40001400
 8003b98:	20039040 	.word	0x20039040
 8003b9c:	40001c00 	.word	0x40001c00
 8003ba0:	20039044 	.word	0x20039044

08003ba4 <init>:

void init()
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bae:	4808      	ldr	r0, [pc, #32]	; (8003bd0 <init+0x2c>)
 8003bb0:	f003 ffe0 	bl	8007b74 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <init+0x30>)
 8003bb6:	f007 fec0 	bl	800b93a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003bba:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <init+0x34>)
 8003bbc:	f007 febd 	bl	800b93a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003bc0:	4806      	ldr	r0, [pc, #24]	; (8003bdc <init+0x38>)
 8003bc2:	f007 feba 	bl	800b93a <HAL_TIM_Base_Start_IT>

	cppInit();
 8003bc6:	f001 ff1f 	bl	8005a08 <cppInit>

	//path_following_initialize();

}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	20039128 	.word	0x20039128
 8003bd8:	200392cc 	.word	0x200392cc
 8003bdc:	20039048 	.word	0x20039048

08003be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003be4:	f002 fcbe 	bl	8006564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003be8:	f000 f82a 	bl	8003c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bec:	f000 fdbc 	bl	8004768 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bf0:	f000 fd8a 	bl	8004708 <MX_DMA_Init>
  MX_I2C2_Init();
 8003bf4:	f000 f9e8 	bl	8003fc8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003bf8:	f000 fa14 	bl	8004024 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003bfc:	f000 fa32 	bl	8004064 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003c00:	f000 fa66 	bl	80040d0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003c04:	f000 fb70 	bl	80042e8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003c08:	f000 fc3c 	bl	8004484 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003c0c:	f000 fd52 	bl	80046b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003c10:	f009 fe66 	bl	800d8e0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003c14:	f000 fbcc 	bl	80043b0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003c18:	f000 f9a8 	bl	8003f6c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003c1c:	f000 fb00 	bl	8004220 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003c20:	f000 fc88 	bl	8004534 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003c24:	f000 fcd4 	bl	80045d0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003c28:	f000 f898 	bl	8003d5c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003c2c:	f000 fbf6 	bl	800441c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003c30:	f000 fd1c 	bl	800466c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003c34:	f7ff ffb6 	bl	8003ba4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003c38:	f002 f84a 	bl	8005cd0 <cppLoop>
 8003c3c:	e7fc      	b.n	8003c38 <main+0x58>
	...

08003c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0a4      	sub	sp, #144	; 0x90
 8003c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c4a:	2234      	movs	r2, #52	; 0x34
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00e fb8e 	bl	8012370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	223c      	movs	r2, #60	; 0x3c
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f00e fb7f 	bl	8012370 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <SystemClock_Config+0x114>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a36      	ldr	r2, [pc, #216]	; (8003d54 <SystemClock_Config+0x114>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <SystemClock_Config+0x114>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <SystemClock_Config+0x118>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <SystemClock_Config+0x118>)
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <SystemClock_Config+0x118>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003cc2:	23b4      	movs	r3, #180	; 0xb4
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003cce:	2308      	movs	r3, #8
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fb82 	bl	80093e8 <HAL_RCC_OscConfig>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003cea:	f000 fe93 	bl	8004a14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cee:	f004 fefd 	bl	8008aec <HAL_PWREx_EnableOverDrive>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003cf8:	f000 fe8c 	bl	8004a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d00:	2302      	movs	r3, #2
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d12:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d18:	2105      	movs	r1, #5
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 ff36 	bl	8008b8c <HAL_RCC_ClockConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003d26:	f000 fe75 	bl	8004a14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003d2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003d34:	2300      	movs	r3, #0
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f005 f915 	bl	8008f6c <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003d48:	f000 fe64 	bl	8004a14 <Error_Handler>
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3790      	adds	r7, #144	; 0x90
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000

08003d5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d62:	463b      	mov	r3, r7
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d70:	4a7c      	ldr	r2, [pc, #496]	; (8003f64 <MX_ADC2_Init+0x208>)
 8003d72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d74:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d7c:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003d88:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d8e:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d9c:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <MX_ADC2_Init+0x20c>)
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003da2:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003daa:	220e      	movs	r2, #14
 8003dac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003dae:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003db6:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003dbc:	4868      	ldr	r0, [pc, #416]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dbe:	f002 fc65 	bl	800668c <HAL_ADC_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003dc8:	f000 fe24 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003dcc:	230a      	movs	r3, #10
 8003dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dd8:	463b      	mov	r3, r7
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4860      	ldr	r0, [pc, #384]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dde:	f002 fda9 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003de8:	f000 fe14 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003dec:	230b      	movs	r3, #11
 8003dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003df4:	463b      	mov	r3, r7
 8003df6:	4619      	mov	r1, r3
 8003df8:	4859      	ldr	r0, [pc, #356]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dfa:	f002 fd9b 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003e04:	f000 fe06 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e08:	230c      	movs	r3, #12
 8003e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e10:	463b      	mov	r3, r7
 8003e12:	4619      	mov	r1, r3
 8003e14:	4852      	ldr	r0, [pc, #328]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e16:	f002 fd8d 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003e20:	f000 fdf8 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003e24:	230d      	movs	r3, #13
 8003e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e28:	2304      	movs	r3, #4
 8003e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	4619      	mov	r1, r3
 8003e30:	484b      	ldr	r0, [pc, #300]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e32:	f002 fd7f 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003e3c:	f000 fdea 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e44:	2305      	movs	r3, #5
 8003e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e48:	463b      	mov	r3, r7
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4844      	ldr	r0, [pc, #272]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e4e:	f002 fd71 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003e58:	f000 fddc 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003e60:	2306      	movs	r3, #6
 8003e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e64:	463b      	mov	r3, r7
 8003e66:	4619      	mov	r1, r3
 8003e68:	483d      	ldr	r0, [pc, #244]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e6a:	f002 fd63 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003e74:	f000 fdce 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003e7c:	2307      	movs	r3, #7
 8003e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e80:	463b      	mov	r3, r7
 8003e82:	4619      	mov	r1, r3
 8003e84:	4836      	ldr	r0, [pc, #216]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e86:	f002 fd55 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003e90:	f000 fdc0 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e94:	2303      	movs	r3, #3
 8003e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	482f      	ldr	r0, [pc, #188]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ea2:	f002 fd47 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003eac:	f000 fdb2 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4828      	ldr	r0, [pc, #160]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ebe:	f002 fd39 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003ec8:	f000 fda4 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003ecc:	2305      	movs	r3, #5
 8003ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4821      	ldr	r0, [pc, #132]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003eda:	f002 fd2b 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003ee4:	f000 fd96 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003ee8:	2306      	movs	r3, #6
 8003eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003eec:	230b      	movs	r3, #11
 8003eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	481a      	ldr	r0, [pc, #104]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ef6:	f002 fd1d 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003f00:	f000 fd88 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003f04:	2307      	movs	r3, #7
 8003f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003f08:	230c      	movs	r3, #12
 8003f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4813      	ldr	r0, [pc, #76]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f12:	f002 fd0f 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003f1c:	f000 fd7a 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f20:	2308      	movs	r3, #8
 8003f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003f24:	230d      	movs	r3, #13
 8003f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480c      	ldr	r0, [pc, #48]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f2e:	f002 fd01 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003f38:	f000 fd6c 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003f3c:	2309      	movs	r3, #9
 8003f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003f40:	230e      	movs	r3, #14
 8003f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f44:	463b      	mov	r3, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	4805      	ldr	r0, [pc, #20]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f4a:	f002 fcf3 	bl	8006934 <HAL_ADC_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003f54:	f000 fd5e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20038ecc 	.word	0x20038ecc
 8003f64:	40012100 	.word	0x40012100
 8003f68:	0f000001 	.word	0x0f000001

08003f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <MX_I2C1_Init+0x54>)
 8003f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <MX_I2C1_Init+0x58>)
 8003f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003faa:	f003 fe15 	bl	8007bd8 <HAL_I2C_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fb4:	f000 fd2e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20038f14 	.word	0x20038f14
 8003fc0:	40005400 	.word	0x40005400
 8003fc4:	000186a0 	.word	0x000186a0

08003fc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <MX_I2C2_Init+0x54>)
 8003fd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <MX_I2C2_Init+0x58>)
 8003fd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_I2C2_Init+0x50>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <MX_I2C2_Init+0x50>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_I2C2_Init+0x50>)
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_I2C2_Init+0x50>)
 8004006:	f003 fde7 	bl	8007bd8 <HAL_I2C_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004010:	f000 fd00 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20038fa8 	.word	0x20038fa8
 800401c:	40005800 	.word	0x40005800
 8004020:	000186a0 	.word	0x000186a0

08004024 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800402a:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <MX_SDIO_SD_Init+0x3c>)
 800402c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800403c:	2200      	movs	r2, #0
 800403e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	200391a8 	.word	0x200391a8
 8004060:	40012c00 	.word	0x40012c00

08004064 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004068:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <MX_SPI2_Init+0x64>)
 800406a:	4a18      	ldr	r2, [pc, #96]	; (80040cc <MX_SPI2_Init+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <MX_SPI2_Init+0x64>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004084:	2202      	movs	r2, #2
 8004086:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <MX_SPI2_Init+0x64>)
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004094:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004098:	2228      	movs	r2, #40	; 0x28
 800409a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <MX_SPI2_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040b0:	220a      	movs	r2, #10
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040b6:	f006 fec1 	bl	800ae3c <HAL_SPI_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040c0:	f000 fca8 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20038df4 	.word	0x20038df4
 80040cc:	40003800 	.word	0x40003800

080040d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b09a      	sub	sp, #104	; 0x68
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f00e f946 	bl	8012370 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040ee:	f107 0320 	add.w	r3, r7, #32
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	615a      	str	r2, [r3, #20]
 8004100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004102:	463b      	mov	r3, r7
 8004104:	2220      	movs	r2, #32
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f00e f931 	bl	8012370 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800410e:	4b42      	ldr	r3, [pc, #264]	; (8004218 <MX_TIM1_Init+0x148>)
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <MX_TIM1_Init+0x14c>)
 8004112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <MX_TIM1_Init+0x148>)
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <MX_TIM1_Init+0x148>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <MX_TIM1_Init+0x148>)
 8004122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <MX_TIM1_Init+0x148>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <MX_TIM1_Init+0x148>)
 8004130:	2200      	movs	r2, #0
 8004132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004134:	4b38      	ldr	r3, [pc, #224]	; (8004218 <MX_TIM1_Init+0x148>)
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800413a:	4837      	ldr	r0, [pc, #220]	; (8004218 <MX_TIM1_Init+0x148>)
 800413c:	f007 fc21 	bl	800b982 <HAL_TIM_PWM_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004146:	f000 fc65 	bl	8004a14 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800414a:	2303      	movs	r3, #3
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800414e:	2300      	movs	r3, #0
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004152:	2301      	movs	r3, #1
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800415e:	2300      	movs	r3, #0
 8004160:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004162:	2301      	movs	r3, #1
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800416e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004172:	4619      	mov	r1, r3
 8004174:	4828      	ldr	r0, [pc, #160]	; (8004218 <MX_TIM1_Init+0x148>)
 8004176:	f007 fc6d 	bl	800ba54 <HAL_TIM_Encoder_Init>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004180:	f000 fc48 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800418c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004190:	4619      	mov	r1, r3
 8004192:	4821      	ldr	r0, [pc, #132]	; (8004218 <MX_TIM1_Init+0x148>)
 8004194:	f008 f994 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800419e:	f000 fc39 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a2:	2360      	movs	r3, #96	; 0x60
 80041a4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041ae:	2300      	movs	r3, #0
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041be:	f107 0320 	add.w	r3, r7, #32
 80041c2:	2208      	movs	r2, #8
 80041c4:	4619      	mov	r1, r3
 80041c6:	4814      	ldr	r0, [pc, #80]	; (8004218 <MX_TIM1_Init+0x148>)
 80041c8:	f007 fe16 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80041d2:	f000 fc1f 	bl	8004a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041f4:	463b      	mov	r3, r7
 80041f6:	4619      	mov	r1, r3
 80041f8:	4807      	ldr	r0, [pc, #28]	; (8004218 <MX_TIM1_Init+0x148>)
 80041fa:	f008 f9dd 	bl	800c5b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004204:	f000 fc06 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004208:	4803      	ldr	r0, [pc, #12]	; (8004218 <MX_TIM1_Init+0x148>)
 800420a:	f001 f97f 	bl	800550c <HAL_TIM_MspPostInit>

}
 800420e:	bf00      	nop
 8004210:	3768      	adds	r7, #104	; 0x68
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20039168 	.word	0x20039168
 800421c:	40010000 	.word	0x40010000

08004220 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	60da      	str	r2, [r3, #12]
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	615a      	str	r2, [r3, #20]
 8004240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004242:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <MX_TIM3_Init+0xc4>)
 8004246:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800424a:	2200      	movs	r2, #0
 800424c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800425a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004262:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004268:	481d      	ldr	r0, [pc, #116]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800426a:	f007 fb8a 	bl	800b982 <HAL_TIM_PWM_Init>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004274:	f000 fbce 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004280:	f107 0320 	add.w	r3, r7, #32
 8004284:	4619      	mov	r1, r3
 8004286:	4816      	ldr	r0, [pc, #88]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004288:	f008 f91a 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004292:	f000 fbbf 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004296:	2360      	movs	r3, #96	; 0x60
 8004298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	4619      	mov	r1, r3
 80042ac:	480c      	ldr	r0, [pc, #48]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042ae:	f007 fda3 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80042b8:	f000 fbac 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	2204      	movs	r2, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4807      	ldr	r0, [pc, #28]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042c4:	f007 fd98 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042ce:	f000 fba1 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80042d2:	4803      	ldr	r0, [pc, #12]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042d4:	f001 f91a 	bl	800550c <HAL_TIM_MspPostInit>

}
 80042d8:	bf00      	nop
 80042da:	3728      	adds	r7, #40	; 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20039000 	.word	0x20039000
 80042e4:	40000400 	.word	0x40000400

080042e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ee:	f107 0320 	add.w	r3, r7, #32
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	615a      	str	r2, [r3, #20]
 8004308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <MX_TIM4_Init+0xc4>)
 800430e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800431e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004326:	2200      	movs	r2, #0
 8004328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004330:	481d      	ldr	r0, [pc, #116]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004332:	f007 fb26 	bl	800b982 <HAL_TIM_PWM_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800433c:	f000 fb6a 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004348:	f107 0320 	add.w	r3, r7, #32
 800434c:	4619      	mov	r1, r3
 800434e:	4816      	ldr	r0, [pc, #88]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004350:	f008 f8b6 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800435a:	f000 fb5b 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800435e:	2360      	movs	r3, #96	; 0x60
 8004360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	2208      	movs	r2, #8
 8004372:	4619      	mov	r1, r3
 8004374:	480c      	ldr	r0, [pc, #48]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004376:	f007 fd3f 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004380:	f000 fb48 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	220c      	movs	r2, #12
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800438c:	f007 fd34 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004396:	f000 fb3d 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800439a:	4803      	ldr	r0, [pc, #12]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800439c:	f001 f8b6 	bl	800550c <HAL_TIM_MspPostInit>

}
 80043a0:	bf00      	nop
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20038e8c 	.word	0x20038e8c
 80043ac:	40000800 	.word	0x40000800

080043b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b6:	463b      	mov	r3, r7
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <MX_TIM6_Init+0x64>)
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <MX_TIM6_Init+0x68>)
 80043c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <MX_TIM6_Init+0x64>)
 80043c6:	2259      	movs	r2, #89	; 0x59
 80043c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <MX_TIM6_Init+0x64>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <MX_TIM6_Init+0x64>)
 80043d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <MX_TIM6_Init+0x64>)
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043de:	480d      	ldr	r0, [pc, #52]	; (8004414 <MX_TIM6_Init+0x64>)
 80043e0:	f007 fa80 	bl	800b8e4 <HAL_TIM_Base_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043ea:	f000 fb13 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043f6:	463b      	mov	r3, r7
 80043f8:	4619      	mov	r1, r3
 80043fa:	4806      	ldr	r0, [pc, #24]	; (8004414 <MX_TIM6_Init+0x64>)
 80043fc:	f008 f860 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004406:	f000 fb05 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20039128 	.word	0x20039128
 8004418:	40001000 	.word	0x40001000

0800441c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004422:	463b      	mov	r3, r7
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <MX_TIM7_Init+0x60>)
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <MX_TIM7_Init+0x64>)
 800442e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <MX_TIM7_Init+0x60>)
 8004432:	22b3      	movs	r2, #179	; 0xb3
 8004434:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <MX_TIM7_Init+0x60>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <MX_TIM7_Init+0x60>)
 800443e:	2231      	movs	r2, #49	; 0x31
 8004440:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <MX_TIM7_Init+0x60>)
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004448:	480c      	ldr	r0, [pc, #48]	; (800447c <MX_TIM7_Init+0x60>)
 800444a:	f007 fa4b 	bl	800b8e4 <HAL_TIM_Base_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004454:	f000 fade 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004460:	463b      	mov	r3, r7
 8004462:	4619      	mov	r1, r3
 8004464:	4805      	ldr	r0, [pc, #20]	; (800447c <MX_TIM7_Init+0x60>)
 8004466:	f008 f82b 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004470:	f000 fad0 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200392cc 	.word	0x200392cc
 8004480:	40001400 	.word	0x40001400

08004484 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f00d ff6c 	bl	8012370 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <MX_TIM8_Init+0xa8>)
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <MX_TIM8_Init+0xac>)
 80044a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80044a6:	4b21      	ldr	r3, [pc, #132]	; (800452c <MX_TIM8_Init+0xa8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80044ac:	4b1f      	ldr	r3, [pc, #124]	; (800452c <MX_TIM8_Init+0xa8>)
 80044ae:	2210      	movs	r2, #16
 80044b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <MX_TIM8_Init+0xa8>)
 80044b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <MX_TIM8_Init+0xa8>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <MX_TIM8_Init+0xa8>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <MX_TIM8_Init+0xa8>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80044cc:	2303      	movs	r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044e0:	2300      	movs	r3, #0
 80044e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	4619      	mov	r1, r3
 80044f6:	480d      	ldr	r0, [pc, #52]	; (800452c <MX_TIM8_Init+0xa8>)
 80044f8:	f007 faac 	bl	800ba54 <HAL_TIM_Encoder_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004502:	f000 fa87 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4806      	ldr	r0, [pc, #24]	; (800452c <MX_TIM8_Init+0xa8>)
 8004514:	f007 ffd4 	bl	800c4c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800451e:	f000 fa79 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004522:	bf00      	nop
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20038e4c 	.word	0x20038e4c
 8004530:	40010400 	.word	0x40010400

08004534 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
 8004548:	615a      	str	r2, [r3, #20]
 800454a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <MX_TIM10_Init+0x94>)
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <MX_TIM10_Init+0x98>)
 8004550:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <MX_TIM10_Init+0x94>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004564:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456c:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <MX_TIM10_Init+0x94>)
 800456e:	2200      	movs	r2, #0
 8004570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004572:	4815      	ldr	r0, [pc, #84]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004574:	f007 f9b6 	bl	800b8e4 <HAL_TIM_Base_Init>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800457e:	f000 fa49 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004582:	4811      	ldr	r0, [pc, #68]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004584:	f007 f9fd 	bl	800b982 <HAL_TIM_PWM_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800458e:	f000 fa41 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004592:	2360      	movs	r3, #96	; 0x60
 8004594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2200      	movs	r2, #0
 80045a6:	4619      	mov	r1, r3
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM10_Init+0x94>)
 80045aa:	f007 fc25 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80045b4:	f000 fa2e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM10_Init+0x94>)
 80045ba:	f000 ffa7 	bl	800550c <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20038f68 	.word	0x20038f68
 80045cc:	40014400 	.word	0x40014400

080045d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	611a      	str	r2, [r3, #16]
 80045e4:	615a      	str	r2, [r3, #20]
 80045e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <MX_TIM11_Init+0x94>)
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <MX_TIM11_Init+0x98>)
 80045ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <MX_TIM11_Init+0x94>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <MX_TIM11_Init+0x94>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <MX_TIM11_Init+0x94>)
 80045fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004600:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <MX_TIM11_Init+0x94>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <MX_TIM11_Init+0x94>)
 800460a:	2200      	movs	r2, #0
 800460c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800460e:	4815      	ldr	r0, [pc, #84]	; (8004664 <MX_TIM11_Init+0x94>)
 8004610:	f007 f968 	bl	800b8e4 <HAL_TIM_Base_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800461a:	f000 f9fb 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800461e:	4811      	ldr	r0, [pc, #68]	; (8004664 <MX_TIM11_Init+0x94>)
 8004620:	f007 f9af 	bl	800b982 <HAL_TIM_PWM_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800462a:	f000 f9f3 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800462e:	2360      	movs	r3, #96	; 0x60
 8004630:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2200      	movs	r2, #0
 8004642:	4619      	mov	r1, r3
 8004644:	4807      	ldr	r0, [pc, #28]	; (8004664 <MX_TIM11_Init+0x94>)
 8004646:	f007 fbd7 	bl	800bdf8 <HAL_TIM_PWM_ConfigChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004650:	f000 f9e0 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <MX_TIM11_Init+0x94>)
 8004656:	f000 ff59 	bl	800550c <HAL_TIM_MspPostInit>

}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20039088 	.word	0x20039088
 8004668:	40014800 	.word	0x40014800

0800466c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <MX_TIM13_Init+0x40>)
 8004672:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <MX_TIM13_Init+0x44>)
 8004674:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <MX_TIM13_Init+0x40>)
 8004678:	2259      	movs	r2, #89	; 0x59
 800467a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <MX_TIM13_Init+0x40>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <MX_TIM13_Init+0x40>)
 8004684:	f242 720f 	movw	r2, #9999	; 0x270f
 8004688:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <MX_TIM13_Init+0x40>)
 800468c:	2200      	movs	r2, #0
 800468e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <MX_TIM13_Init+0x40>)
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004696:	4805      	ldr	r0, [pc, #20]	; (80046ac <MX_TIM13_Init+0x40>)
 8004698:	f007 f924 	bl	800b8e4 <HAL_TIM_Base_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80046a2:	f000 f9b7 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20039048 	.word	0x20039048
 80046b0:	40001c00 	.word	0x40001c00

080046b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <MX_USART2_UART_Init+0x50>)
 80046bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046da:	220c      	movs	r2, #12
 80046dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046ea:	4805      	ldr	r0, [pc, #20]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ec:	f007 ffca 	bl	800c684 <HAL_UART_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80046f6:	f000 f98d 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	2003922c 	.word	0x2003922c
 8004704:	40004400 	.word	0x40004400

08004708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <MX_DMA_Init+0x5c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <MX_DMA_Init+0x5c>)
 8004718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800471c:	6313      	str	r3, [r2, #48]	; 0x30
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <MX_DMA_Init+0x5c>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	203a      	movs	r0, #58	; 0x3a
 8004730:	f002 fc8b 	bl	800704a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004734:	203a      	movs	r0, #58	; 0x3a
 8004736:	f002 fca4 	bl	8007082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	203b      	movs	r0, #59	; 0x3b
 8004740:	f002 fc83 	bl	800704a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004744:	203b      	movs	r0, #59	; 0x3b
 8004746:	f002 fc9c 	bl	8007082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	2045      	movs	r0, #69	; 0x45
 8004750:	f002 fc7b 	bl	800704a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004754:	2045      	movs	r0, #69	; 0x45
 8004756:	f002 fc94 	bl	8007082 <HAL_NVIC_EnableIRQ>

}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800

08004768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	4b9c      	ldr	r3, [pc, #624]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a9b      	ldr	r2, [pc, #620]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004788:	f043 0310 	orr.w	r3, r3, #16
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b99      	ldr	r3, [pc, #612]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	4b95      	ldr	r3, [pc, #596]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a94      	ldr	r2, [pc, #592]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	4b8e      	ldr	r3, [pc, #568]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a8d      	ldr	r2, [pc, #564]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	4b87      	ldr	r3, [pc, #540]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a86      	ldr	r2, [pc, #536]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b84      	ldr	r3, [pc, #528]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a7f      	ldr	r2, [pc, #508]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a78      	ldr	r2, [pc, #480]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <MX_GPIO_Init+0x28c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004826:	2200      	movs	r2, #0
 8004828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800482c:	4872      	ldr	r0, [pc, #456]	; (80049f8 <MX_GPIO_Init+0x290>)
 800482e:	f003 f9a1 	bl	8007b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004832:	2200      	movs	r2, #0
 8004834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004838:	4870      	ldr	r0, [pc, #448]	; (80049fc <MX_GPIO_Init+0x294>)
 800483a:	f003 f99b 	bl	8007b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800483e:	2200      	movs	r2, #0
 8004840:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004844:	486e      	ldr	r0, [pc, #440]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004846:	f003 f995 	bl	8007b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800484a:	2200      	movs	r2, #0
 800484c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004850:	486c      	ldr	r0, [pc, #432]	; (8004a04 <MX_GPIO_Init+0x29c>)
 8004852:	f003 f98f 	bl	8007b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004856:	2304      	movs	r3, #4
 8004858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800485a:	4b6b      	ldr	r3, [pc, #428]	; (8004a08 <MX_GPIO_Init+0x2a0>)
 800485c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	4619      	mov	r1, r3
 8004868:	4863      	ldr	r0, [pc, #396]	; (80049f8 <MX_GPIO_Init+0x290>)
 800486a:	f002 ffc1 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800486e:	230f      	movs	r3, #15
 8004870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004872:	2303      	movs	r3, #3
 8004874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	4862      	ldr	r0, [pc, #392]	; (8004a0c <MX_GPIO_Init+0x2a4>)
 8004882:	f002 ffb5 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004886:	23e1      	movs	r3, #225	; 0xe1
 8004888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488a:	2303      	movs	r3, #3
 800488c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	4619      	mov	r1, r3
 8004898:	485a      	ldr	r0, [pc, #360]	; (8004a04 <MX_GPIO_Init+0x29c>)
 800489a:	f002 ffa9 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800489e:	2303      	movs	r3, #3
 80048a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a2:	2303      	movs	r3, #3
 80048a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	4852      	ldr	r0, [pc, #328]	; (80049fc <MX_GPIO_Init+0x294>)
 80048b2:	f002 ff9d 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048b6:	2304      	movs	r3, #4
 80048b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048be:	2301      	movs	r3, #1
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c2:	f107 031c 	add.w	r3, r7, #28
 80048c6:	4619      	mov	r1, r3
 80048c8:	484c      	ldr	r0, [pc, #304]	; (80049fc <MX_GPIO_Init+0x294>)
 80048ca:	f002 ff91 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80048ce:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80048d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048dc:	f107 031c 	add.w	r3, r7, #28
 80048e0:	4619      	mov	r1, r3
 80048e2:	4845      	ldr	r0, [pc, #276]	; (80049f8 <MX_GPIO_Init+0x290>)
 80048e4:	f002 ff84 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80048e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	2300      	movs	r3, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	4619      	mov	r1, r3
 8004900:	483d      	ldr	r0, [pc, #244]	; (80049f8 <MX_GPIO_Init+0x290>)
 8004902:	f002 ff75 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800490a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490c:	2301      	movs	r3, #1
 800490e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	4619      	mov	r1, r3
 800491e:	4837      	ldr	r0, [pc, #220]	; (80049fc <MX_GPIO_Init+0x294>)
 8004920:	f002 ff66 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <MX_GPIO_Init+0x2a8>)
 800492c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	4619      	mov	r1, r3
 8004938:	4831      	ldr	r0, [pc, #196]	; (8004a00 <MX_GPIO_Init+0x298>)
 800493a:	f002 ff59 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800493e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004944:	2301      	movs	r3, #1
 8004946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494c:	2300      	movs	r3, #0
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4619      	mov	r1, r3
 8004956:	482a      	ldr	r0, [pc, #168]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004958:	f002 ff4a 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800495c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004962:	2301      	movs	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004966:	2301      	movs	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496a:	2300      	movs	r3, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800496e:	f107 031c 	add.w	r3, r7, #28
 8004972:	4619      	mov	r1, r3
 8004974:	4822      	ldr	r0, [pc, #136]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004976:	f002 ff3b 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800497a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800497e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004980:	2301      	movs	r3, #1
 8004982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004988:	2300      	movs	r3, #0
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	4619      	mov	r1, r3
 8004992:	481c      	ldr	r0, [pc, #112]	; (8004a04 <MX_GPIO_Init+0x29c>)
 8004994:	f002 ff2c 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a6:	f107 031c 	add.w	r3, r7, #28
 80049aa:	4619      	mov	r1, r3
 80049ac:	4815      	ldr	r0, [pc, #84]	; (8004a04 <MX_GPIO_Init+0x29c>)
 80049ae:	f002 ff1f 	bl	80077f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80049b2:	239b      	movs	r3, #155	; 0x9b
 80049b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ba:	2301      	movs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	4619      	mov	r1, r3
 80049c4:	480e      	ldr	r0, [pc, #56]	; (8004a00 <MX_GPIO_Init+0x298>)
 80049c6:	f002 ff13 	bl	80077f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2100      	movs	r1, #0
 80049ce:	2008      	movs	r0, #8
 80049d0:	f002 fb3b 	bl	800704a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80049d4:	2008      	movs	r0, #8
 80049d6:	f002 fb54 	bl	8007082 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80049da:	2200      	movs	r2, #0
 80049dc:	2100      	movs	r1, #0
 80049de:	2017      	movs	r0, #23
 80049e0:	f002 fb33 	bl	800704a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049e4:	2017      	movs	r0, #23
 80049e6:	f002 fb4c 	bl	8007082 <HAL_NVIC_EnableIRQ>

}
 80049ea:	bf00      	nop
 80049ec:	3730      	adds	r7, #48	; 0x30
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40020000 	.word	0x40020000
 8004a08:	10310000 	.word	0x10310000
 8004a0c:	40020800 	.word	0x40020800
 8004a10:	10110000 	.word	0x10110000

08004a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a1a:	e7fe      	b.n	8004a1a <Error_Handler+0x6>

08004a1c <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 8004a24:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <CalcError1+0x100>)
 8004a26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a2a:	4b3c      	ldr	r3, [pc, #240]	; (8004b1c <CalcError1+0x100>)
 8004a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a30:	f7fb fc42 	bl	80002b8 <__aeabi_dsub>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004a3c:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <CalcError1+0x100>)
 8004a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <CalcError1+0x100>)
 8004a44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a48:	f7fb fc36 	bl	80002b8 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <CalcError1+0x100>)
 8004a56:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a5e:	eef0 0a67 	vmov.f32	s1, s15
 8004a62:	f00c fb39 	bl	80110d8 <sin>
 8004a66:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <CalcError1+0x100>)
 8004a6c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004a70:	eeb0 0a47 	vmov.f32	s0, s14
 8004a74:	eef0 0a67 	vmov.f32	s1, s15
 8004a78:	f00c faea 	bl	8011050 <cos>
 8004a7c:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a88:	f7fb fdce 	bl	8000628 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4690      	mov	r8, r2
 8004a92:	4699      	mov	r9, r3
 8004a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a9c:	f7fb fdc4 	bl	8000628 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	f7fb fc08 	bl	80002bc <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <CalcError1+0x104>)
 8004ab2:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 8004ab6:	68bc      	ldr	r4, [r7, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb fdaf 	bl	8000628 <__aeabi_dmul>
 8004aca:	4603      	mov	r3, r0
 8004acc:	460c      	mov	r4, r1
 8004ace:	4625      	mov	r5, r4
 8004ad0:	461c      	mov	r4, r3
 8004ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ada:	f7fb fda5 	bl	8000628 <__aeabi_dmul>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fbe9 	bl	80002bc <__adddf3>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <CalcError1+0x104>)
 8004af0:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <CalcError1+0x100>)
 8004af6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <CalcError1+0x100>)
 8004afc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b00:	461a      	mov	r2, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	f7fb fbd8 	bl	80002b8 <__aeabi_dsub>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <CalcError1+0x104>)
 8004b0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004b12:	bf00      	nop
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1c:	20039320 	.word	0x20039320
 8004b20:	20039350 	.word	0x20039350

08004b24 <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b28:	b08a      	sub	sp, #40	; 0x28
 8004b2a:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004b2c:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <path_following_step+0x1f4>)
 8004b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <path_following_step+0x1f8>)
 8004b38:	f7fb fd76 	bl	8000628 <__aeabi_dmul>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004b44:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <path_following_step+0x1fc>)
 8004b46:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b52:	f7fb fbb1 	bl	80002b8 <__aeabi_dsub>
 8004b56:	4603      	mov	r3, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  mon1 = rtb_TSamp;
 8004b5e:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <path_following_step+0x200>)
 8004b60:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b64:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004b68:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <path_following_step+0x1fc>)
 8004b6a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <path_following_step+0x204>)
 8004b70:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b7c:	f7fb fd54 	bl	8000628 <__aeabi_dmul>
 8004b80:	4603      	mov	r3, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004b88:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <path_following_step+0x1f4>)
 8004b8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <path_following_step+0x1f8>)
 8004b94:	f7fb fd48 	bl	8000628 <__aeabi_dmul>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004ba0:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <path_following_step+0x1fc>)
 8004ba2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4623      	mov	r3, r4
 8004baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bae:	f7fb fb83 	bl	80002b8 <__aeabi_dsub>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bc2:	f7fb fd31 	bl	8000628 <__aeabi_dmul>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4621      	mov	r1, r4
 8004bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bd2:	f7fb fb73 	bl	80002bc <__adddf3>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	ec44 3b17 	vmov	d7, r3, r4
 8004bde:	eeb0 0a47 	vmov.f32	s0, s14
 8004be2:	eef0 0a67 	vmov.f32	s1, s15
 8004be6:	f00c fabf 	bl	8011168 <sqrt>
 8004bea:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004bee:	f7ff ff15 	bl	8004a1c <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <path_following_step+0x1f4>)
 8004bf4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <path_following_step+0x1f8>)
 8004bfe:	f7fb fd13 	bl	8000628 <__aeabi_dmul>
 8004c02:	4603      	mov	r3, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004c0a:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <path_following_step+0x1fc>)
 8004c0c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004c10:	461a      	mov	r2, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c18:	f7fb fb4e 	bl	80002b8 <__aeabi_dsub>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004c24:	4a3e      	ldr	r2, [pc, #248]	; (8004d20 <path_following_step+0x1fc>)
 8004c26:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c2a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <path_following_step+0x1fc>)
 8004c30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c34:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <path_following_step+0x1fc>)
 8004c3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c3e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <path_following_step+0x208>)
 8004c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <path_following_step+0x1fc>)
 8004c4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4623      	mov	r3, r4
 8004c52:	f7fb fce9 	bl	8000628 <__aeabi_dmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4625      	mov	r5, r4
 8004c5c:	461c      	mov	r4, r3
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <path_following_step+0x1fc>)
 8004c60:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c64:	eeb0 0a47 	vmov.f32	s0, s14
 8004c68:	eef0 0a67 	vmov.f32	s1, s15
 8004c6c:	f00c f9f0 	bl	8011050 <cos>
 8004c70:	ec51 0b10 	vmov	r0, r1, d0
 8004c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c78:	f7fb fcd6 	bl	8000628 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb fb1a 	bl	80002bc <__adddf3>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <path_following_step+0x20c>)
 8004c8e:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <path_following_step+0x208>)
 8004c94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <path_following_step+0x1fc>)
 8004c9a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	f7fb fcc1 	bl	8000628 <__aeabi_dmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4698      	mov	r8, r3
 8004cac:	46a1      	mov	r9, r4
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <path_following_step+0x208>)
 8004cb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <path_following_step+0x1fc>)
 8004cb6:	ed93 7b04 	vldr	d7, [r3, #16]
 8004cba:	eeb0 0a47 	vmov.f32	s0, s14
 8004cbe:	eef0 0a67 	vmov.f32	s1, s15
 8004cc2:	f00c fa09 	bl	80110d8 <sin>
 8004cc6:	ec53 2b10 	vmov	r2, r3, d0
 8004cca:	4620      	mov	r0, r4
 8004ccc:	4629      	mov	r1, r5
 8004cce:	f7fb fcab 	bl	8000628 <__aeabi_dmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	f7fb faed 	bl	80002bc <__adddf3>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4621      	mov	r1, r4
 8004cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cee:	f7fb fc9b 	bl	8000628 <__aeabi_dmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfe:	f7fb fadd 	bl	80002bc <__adddf3>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <path_following_step+0x20c>)
 8004d08:	e9c2 3402 	strd	r3, r4, [r2, #8]
  //mon2 = rtb_Diff;


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004d0c:	bf00      	nop
 8004d0e:	3728      	adds	r7, #40	; 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d16:	bf00      	nop
 8004d18:	20039320 	.word	0x20039320
 8004d1c:	408f4000 	.word	0x408f4000
 8004d20:	20039350 	.word	0x20039350
 8004d24:	20039310 	.word	0x20039310
 8004d28:	20039318 	.word	0x20039318
 8004d2c:	20039390 	.word	0x20039390
 8004d30:	20039380 	.word	0x20039380

08004d34 <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	4a0f      	ldr	r2, [pc, #60]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d58:	6453      	str	r3, [r2, #68]	; 0x44
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6413      	str	r3, [r2, #64]	; 0x40
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800

08004d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d9c:	f107 031c 	add.w	r3, r7, #28
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_ADC_MspInit+0x148>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	f040 808e 	bne.w	8004ed4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	4b48      	ldr	r3, [pc, #288]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc8:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	4a40      	ldr	r2, [pc, #256]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6313      	str	r3, [r2, #48]	; 0x30
 8004de4:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004e00:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1c:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e28:	230f      	movs	r3, #15
 8004e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e34:	f107 031c 	add.w	r3, r7, #28
 8004e38:	4619      	mov	r1, r3
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <HAL_ADC_MspInit+0x150>)
 8004e3c:	f002 fcd8 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e40:	23ff      	movs	r3, #255	; 0xff
 8004e42:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e44:	2303      	movs	r3, #3
 8004e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4c:	f107 031c 	add.w	r3, r7, #28
 8004e50:	4619      	mov	r1, r3
 8004e52:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <HAL_ADC_MspInit+0x154>)
 8004e54:	f002 fccc 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4820      	ldr	r0, [pc, #128]	; (8004eec <HAL_ADC_MspInit+0x158>)
 8004e6c:	f002 fcc0 	bl	80077f0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <HAL_ADC_MspInit+0x160>)
 8004e74:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e90:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e98:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004eb0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004eb8:	480d      	ldr	r0, [pc, #52]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eba:	f002 f8fd 	bl	80070b8 <HAL_DMA_Init>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004ec4:	f7ff fda6 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ed4:	bf00      	nop
 8004ed6:	3730      	adds	r7, #48	; 0x30
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40012100 	.word	0x40012100
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	2003926c 	.word	0x2003926c
 8004ef4:	40026440 	.word	0x40026440

08004ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	; 0x30
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	f107 031c 	add.w	r3, r7, #28
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <HAL_I2C_MspInit+0xe8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d12c      	bne.n	8004f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f36:	23c0      	movs	r3, #192	; 0xc0
 8004f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f42:	2303      	movs	r3, #3
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f46:	2304      	movs	r3, #4
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4825      	ldr	r0, [pc, #148]	; (8004fe8 <HAL_I2C_MspInit+0xf0>)
 8004f52:	f002 fc4d 	bl	80077f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f72:	e031      	b.n	8004fd8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_I2C_MspInit+0xf4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d12c      	bne.n	8004fd8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fa0:	2312      	movs	r3, #18
 8004fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fac:	2304      	movs	r3, #4
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <HAL_I2C_MspInit+0xf0>)
 8004fb8:	f002 fc1a 	bl	80077f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4a07      	ldr	r2, [pc, #28]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fca:	6413      	str	r3, [r2, #64]	; 0x40
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40005400 	.word	0x40005400
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40020400 	.word	0x40020400
 8004fec:	40005800 	.word	0x40005800

08004ff0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_SD_MspInit+0x1c4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	f040 80cb 	bne.w	80051aa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	4a66      	ldr	r2, [pc, #408]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800501e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005022:	6453      	str	r3, [r2, #68]	; 0x44
 8005024:	4b64      	ldr	r3, [pc, #400]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	4a5f      	ldr	r2, [pc, #380]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6313      	str	r3, [r2, #48]	; 0x30
 8005040:	4b5d      	ldr	r3, [pc, #372]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005056:	f043 0308 	orr.w	r3, r3, #8
 800505a:	6313      	str	r3, [r2, #48]	; 0x30
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005068:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800506c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800507a:	230c      	movs	r3, #12
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	4619      	mov	r1, r3
 8005084:	484d      	ldr	r0, [pc, #308]	; (80051bc <HAL_SD_MspInit+0x1cc>)
 8005086:	f002 fbb3 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800508a:	2304      	movs	r3, #4
 800508c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508e:	2302      	movs	r3, #2
 8005090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005096:	2303      	movs	r3, #3
 8005098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800509a:	230c      	movs	r3, #12
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	4619      	mov	r1, r3
 80050a4:	4846      	ldr	r0, [pc, #280]	; (80051c0 <HAL_SD_MspInit+0x1d0>)
 80050a6:	f002 fba3 	bl	80077f0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_SD_MspInit+0x1d8>)
 80050ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80050b0:	4b44      	ldr	r3, [pc, #272]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050be:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050cc:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050da:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050de:	2220      	movs	r2, #32
 80050e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ec:	2204      	movs	r2, #4
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050f2:	2203      	movs	r2, #3
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80050f6:	4b33      	ldr	r3, [pc, #204]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 8005100:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005106:	482f      	ldr	r0, [pc, #188]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 8005108:	f001 ffd6 	bl	80070b8 <HAL_DMA_Init>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005112:	f7ff fc7f 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005122:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005124:	4a2a      	ldr	r2, [pc, #168]	; (80051d0 <HAL_SD_MspInit+0x1e0>)
 8005126:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005128:	4b28      	ldr	r3, [pc, #160]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800512a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800512e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005138:	2200      	movs	r2, #0
 800513a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800513e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005142:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800514a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800514c:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800514e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005152:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005156:	2220      	movs	r2, #32
 8005158:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800515a:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800515c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005160:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005164:	2204      	movs	r2, #4
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800516a:	2203      	movs	r2, #3
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005170:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005178:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800517e:	4813      	ldr	r0, [pc, #76]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005180:	f001 ff9a 	bl	80070b8 <HAL_DMA_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800518a:	f7ff fc43 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	2031      	movs	r0, #49	; 0x31
 80051a0:	f001 ff53 	bl	800704a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80051a4:	2031      	movs	r0, #49	; 0x31
 80051a6:	f001 ff6c 	bl	8007082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80051aa:	bf00      	nop
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40020800 	.word	0x40020800
 80051c0:	40020c00 	.word	0x40020c00
 80051c4:	20038d94 	.word	0x20038d94
 80051c8:	40026458 	.word	0x40026458
 80051cc:	200390c8 	.word	0x200390c8
 80051d0:	400264a0 	.word	0x400264a0

080051d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_SPI_MspInit+0x84>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d12c      	bne.n	8005250 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_SPI_MspInit+0x88>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <HAL_SPI_MspInit+0x88>)
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800522e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005240:	2305      	movs	r3, #5
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4619      	mov	r1, r3
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <HAL_SPI_MspInit+0x8c>)
 800524c:	f002 fad0 	bl	80077f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005250:	bf00      	nop
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40003800 	.word	0x40003800
 800525c:	40023800 	.word	0x40023800
 8005260:	40020400 	.word	0x40020400

08005264 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526c:	f107 031c 	add.w	r3, r7, #28
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <HAL_TIM_PWM_MspInit+0xd4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d12d      	bne.n	80052e2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	4a24      	ldr	r2, [pc, #144]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052ac:	f043 0310 	orr.w	r3, r3, #16
 80052b0:	6313      	str	r3, [r2, #48]	; 0x30
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80052be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	2302      	movs	r3, #2
 80052c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052d0:	2301      	movs	r3, #1
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052d4:	f107 031c 	add.w	r3, r7, #28
 80052d8:	4619      	mov	r1, r3
 80052da:	4819      	ldr	r0, [pc, #100]	; (8005340 <HAL_TIM_PWM_MspInit+0xdc>)
 80052dc:	f002 fa88 	bl	80077f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80052e0:	e026      	b.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <HAL_TIM_PWM_MspInit+0xe0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	6413      	str	r3, [r2, #64]	; 0x40
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]
}
 8005308:	e012      	b.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <HAL_TIM_PWM_MspInit+0xe4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10d      	bne.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4a07      	ldr	r2, [pc, #28]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800531e:	f043 0304 	orr.w	r3, r3, #4
 8005322:	6413      	str	r3, [r2, #64]	; 0x40
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	bf00      	nop
 8005332:	3730      	adds	r7, #48	; 0x30
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40010000 	.word	0x40010000
 800533c:	40023800 	.word	0x40023800
 8005340:	40021000 	.word	0x40021000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800

0800534c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a3e      	ldr	r2, [pc, #248]	; (8005454 <HAL_TIM_Base_MspInit+0x108>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d116      	bne.n	800538c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a3c      	ldr	r2, [pc, #240]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2101      	movs	r1, #1
 800537e:	2036      	movs	r0, #54	; 0x36
 8005380:	f001 fe63 	bl	800704a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005384:	2036      	movs	r0, #54	; 0x36
 8005386:	f001 fe7c 	bl	8007082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800538a:	e05e      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a32      	ldr	r2, [pc, #200]	; (800545c <HAL_TIM_Base_MspInit+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d116      	bne.n	80053c4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2037      	movs	r0, #55	; 0x37
 80053b8:	f001 fe47 	bl	800704a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053bc:	2037      	movs	r0, #55	; 0x37
 80053be:	f001 fe60 	bl	8007082 <HAL_NVIC_EnableIRQ>
}
 80053c2:	e042      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a25      	ldr	r2, [pc, #148]	; (8005460 <HAL_TIM_Base_MspInit+0x114>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	4a20      	ldr	r2, [pc, #128]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	6453      	str	r3, [r2, #68]	; 0x44
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]
}
 80053ea:	e02e      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <HAL_TIM_Base_MspInit+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005404:	6453      	str	r3, [r2, #68]	; 0x44
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]
}
 8005412:	e01a      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <HAL_TIM_Base_MspInit+0x11c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d115      	bne.n	800544a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	202c      	movs	r0, #44	; 0x2c
 8005440:	f001 fe03 	bl	800704a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005444:	202c      	movs	r0, #44	; 0x2c
 8005446:	f001 fe1c 	bl	8007082 <HAL_NVIC_EnableIRQ>
}
 800544a:	bf00      	nop
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40001000 	.word	0x40001000
 8005458:	40023800 	.word	0x40023800
 800545c:	40001400 	.word	0x40001400
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	40001c00 	.word	0x40001c00

0800546c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_TIM_Encoder_MspInit+0x94>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d133      	bne.n	80054f6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	6453      	str	r3, [r2, #68]	; 0x44
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	6313      	str	r3, [r2, #48]	; 0x30
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054c6:	23c0      	movs	r3, #192	; 0xc0
 80054c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054d6:	2303      	movs	r3, #3
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	4619      	mov	r1, r3
 80054e0:	4809      	ldr	r0, [pc, #36]	; (8005508 <HAL_TIM_Encoder_MspInit+0x9c>)
 80054e2:	f002 f985 	bl	80077f0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	202c      	movs	r0, #44	; 0x2c
 80054ec:	f001 fdad 	bl	800704a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80054f0:	202c      	movs	r0, #44	; 0x2c
 80054f2:	f001 fdc6 	bl	8007082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80054f6:	bf00      	nop
 80054f8:	3728      	adds	r7, #40	; 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40010400 	.word	0x40010400
 8005504:	40023800 	.word	0x40023800
 8005508:	40020800 	.word	0x40020800

0800550c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	; 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005514:	f107 031c 	add.w	r3, r7, #28
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5c      	ldr	r2, [pc, #368]	; (800569c <HAL_TIM_MspPostInit+0x190>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d11f      	bne.n	800556e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005538:	f043 0310 	orr.w	r3, r3, #16
 800553c:	6313      	str	r3, [r2, #48]	; 0x30
 800553e:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800554a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800554e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2302      	movs	r3, #2
 8005552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005558:	2300      	movs	r3, #0
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800555c:	2301      	movs	r3, #1
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005560:	f107 031c 	add.w	r3, r7, #28
 8005564:	4619      	mov	r1, r3
 8005566:	484f      	ldr	r0, [pc, #316]	; (80056a4 <HAL_TIM_MspPostInit+0x198>)
 8005568:	f002 f942 	bl	80077f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800556c:	e091      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4d      	ldr	r2, [pc, #308]	; (80056a8 <HAL_TIM_MspPostInit+0x19c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d11e      	bne.n	80055b6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a47      	ldr	r2, [pc, #284]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005582:	f043 0302 	orr.w	r3, r3, #2
 8005586:	6313      	str	r3, [r2, #48]	; 0x30
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005594:	2330      	movs	r3, #48	; 0x30
 8005596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055a4:	2302      	movs	r3, #2
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	4619      	mov	r1, r3
 80055ae:	483f      	ldr	r0, [pc, #252]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 80055b0:	f002 f91e 	bl	80077f0 <HAL_GPIO_Init>
}
 80055b4:	e06d      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3d      	ldr	r2, [pc, #244]	; (80056b0 <HAL_TIM_MspPostInit+0x1a4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d11f      	bne.n	8005600 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055ca:	f043 0308 	orr.w	r3, r3, #8
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
 80055d0:	4b33      	ldr	r3, [pc, #204]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80055dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055ee:	2302      	movs	r3, #2
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055f2:	f107 031c 	add.w	r3, r7, #28
 80055f6:	4619      	mov	r1, r3
 80055f8:	482e      	ldr	r0, [pc, #184]	; (80056b4 <HAL_TIM_MspPostInit+0x1a8>)
 80055fa:	f002 f8f9 	bl	80077f0 <HAL_GPIO_Init>
}
 80055fe:	e048      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_TIM_MspPostInit+0x1ac>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d11f      	bne.n	800564a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005638:	2303      	movs	r3, #3
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	481a      	ldr	r0, [pc, #104]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 8005644:	f002 f8d4 	bl	80077f0 <HAL_GPIO_Init>
}
 8005648:	e023      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_TIM_MspPostInit+0x1b0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d11e      	bne.n	8005692 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800565e:	f043 0302 	orr.w	r3, r3, #2
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005682:	2303      	movs	r3, #3
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	4619      	mov	r1, r3
 800568c:	4807      	ldr	r0, [pc, #28]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 800568e:	f002 f8af 	bl	80077f0 <HAL_GPIO_Init>
}
 8005692:	bf00      	nop
 8005694:	3730      	adds	r7, #48	; 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800

080056c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_UART_MspInit+0x84>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d12b      	bne.n	800573a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	6413      	str	r3, [r2, #64]	; 0x40
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a10      	ldr	r2, [pc, #64]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800571a:	2360      	movs	r3, #96	; 0x60
 800571c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800572a:	2307      	movs	r3, #7
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	4619      	mov	r1, r3
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <HAL_UART_MspInit+0x8c>)
 8005736:	f002 f85b 	bl	80077f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800573a:	bf00      	nop
 800573c:	3728      	adds	r7, #40	; 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40004400 	.word	0x40004400
 8005748:	40023800 	.word	0x40023800
 800574c:	40020c00 	.word	0x40020c00

08005750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005754:	e7fe      	b.n	8005754 <NMI_Handler+0x4>

08005756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800575a:	e7fe      	b.n	800575a <HardFault_Handler+0x4>

0800575c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005760:	e7fe      	b.n	8005760 <MemManage_Handler+0x4>

08005762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005766:	e7fe      	b.n	8005766 <BusFault_Handler+0x4>

08005768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800576c:	e7fe      	b.n	800576c <UsageFault_Handler+0x4>

0800576e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800579c:	f000 ff34 	bl	8006608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057a8:	2004      	movs	r0, #4
 80057aa:	f002 f9fd 	bl	8007ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057ba:	f002 f9f5 	bl	8007ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057c8:	4803      	ldr	r0, [pc, #12]	; (80057d8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80057ca:	f006 fa0c 	bl	800bbe6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80057ce:	4803      	ldr	r0, [pc, #12]	; (80057dc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80057d0:	f006 fa09 	bl	800bbe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20038e4c 	.word	0x20038e4c
 80057dc:	20039048 	.word	0x20039048

080057e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80057e4:	4802      	ldr	r0, [pc, #8]	; (80057f0 <SDIO_IRQHandler+0x10>)
 80057e6:	f004 faa5 	bl	8009d34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200391a8 	.word	0x200391a8

080057f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80057f8:	4802      	ldr	r0, [pc, #8]	; (8005804 <TIM6_DAC_IRQHandler+0x10>)
 80057fa:	f006 f9f4 	bl	800bbe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20039128 	.word	0x20039128

08005808 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <TIM7_IRQHandler+0x10>)
 800580e:	f006 f9ea 	bl	800bbe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200392cc 	.word	0x200392cc

0800581c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <DMA2_Stream2_IRQHandler+0x10>)
 8005822:	f001 fd71 	bl	8007308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2003926c 	.word	0x2003926c

08005830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <DMA2_Stream3_IRQHandler+0x10>)
 8005836:	f001 fd67 	bl	8007308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20038d94 	.word	0x20038d94

08005844 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005848:	4802      	ldr	r0, [pc, #8]	; (8005854 <DMA2_Stream6_IRQHandler+0x10>)
 800584a:	f001 fd5d 	bl	8007308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200390c8 	.word	0x200390c8

08005858 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e00a      	b.n	8005880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800586a:	f3af 8000 	nop.w
 800586e:	4601      	mov	r1, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	60ba      	str	r2, [r7, #8]
 8005876:	b2ca      	uxtb	r2, r1
 8005878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	3301      	adds	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	dbf0      	blt.n	800586a <_read+0x12>
	}

return len;
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
	return -1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ba:	605a      	str	r2, [r3, #4]
	return 0;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <_isatty>:

int _isatty(int file)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
	return 1;
 80058d2:	2301      	movs	r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
	return 0;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005904:	4a14      	ldr	r2, [pc, #80]	; (8005958 <_sbrk+0x5c>)
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <_sbrk+0x60>)
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <_sbrk+0x64>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <_sbrk+0x64>)
 800591a:	4a12      	ldr	r2, [pc, #72]	; (8005964 <_sbrk+0x68>)
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <_sbrk+0x64>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d207      	bcs.n	800593c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800592c:	f00c fcf6 	bl	801231c <__errno>
 8005930:	4602      	mov	r2, r0
 8005932:	230c      	movs	r3, #12
 8005934:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e009      	b.n	8005950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <_sbrk+0x64>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <_sbrk+0x64>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <_sbrk+0x64>)
 800594c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20050000 	.word	0x20050000
 800595c:	00000400 	.word	0x00000400
 8005960:	20000260 	.word	0x20000260
 8005964:	2003b420 	.word	0x2003b420

08005968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800596c:	4b08      	ldr	r3, [pc, #32]	; (8005990 <SystemInit+0x28>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	4a07      	ldr	r2, [pc, #28]	; (8005990 <SystemInit+0x28>)
 8005974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <SystemInit+0x28>)
 800597e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005982:	609a      	str	r2, [r3, #8]
#endif
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <batteryLowMode>:
double mon_v, mon_w;

bool flag = false;

void batteryLowMode()
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
	lcd_clear();
 8005998:	f7fb fb82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800599c:	2100      	movs	r1, #0
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fb fb8e 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80059a4:	4814      	ldr	r0, [pc, #80]	; (80059f8 <batteryLowMode+0x64>)
 80059a6:	f7fb fbb5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059aa:	2101      	movs	r1, #1
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fb fb87 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80059b2:	4812      	ldr	r0, [pc, #72]	; (80059fc <batteryLowMode+0x68>)
 80059b4:	f7fb fbae 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80059b8:	2152      	movs	r1, #82	; 0x52
 80059ba:	4811      	ldr	r0, [pc, #68]	; (8005a00 <batteryLowMode+0x6c>)
 80059bc:	f7fc fa60 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059c0:	2064      	movs	r0, #100	; 0x64
 80059c2:	f000 fe41 	bl	8006648 <HAL_Delay>
		led.fullColor('Y');
 80059c6:	2159      	movs	r1, #89	; 0x59
 80059c8:	480d      	ldr	r0, [pc, #52]	; (8005a00 <batteryLowMode+0x6c>)
 80059ca:	f7fc fa59 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059ce:	2064      	movs	r0, #100	; 0x64
 80059d0:	f000 fe3a 	bl	8006648 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80059d4:	480b      	ldr	r0, [pc, #44]	; (8005a04 <batteryLowMode+0x70>)
 80059d6:	f7fc f9ef 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b02      	cmp	r3, #2
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0e6      	beq.n	80059b8 <batteryLowMode+0x24>
			HAL_Delay(500);
 80059ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059ee:	f000 fe2b 	bl	8006648 <HAL_Delay>
			break;
 80059f2:	bf00      	nop
		}
	}
}
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	080171d4 	.word	0x080171d4
 80059fc:	080171dc 	.word	0x080171dc
 8005a00:	2000056c 	.word	0x2000056c
 8005a04:	20000560 	.word	0x20000560

08005a08 <cppInit>:

void cppInit(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	lcd_init();
 8005a0c:	f7fb fb04 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005a10:	482f      	ldr	r0, [pc, #188]	; (8005ad0 <cppInit+0xc8>)
 8005a12:	f7fd fcc8 	bl	80033a6 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005a16:	2064      	movs	r0, #100	; 0x64
 8005a18:	f000 fe16 	bl	8006648 <HAL_Delay>
	power_sensor.updateValues();
 8005a1c:	482c      	ldr	r0, [pc, #176]	; (8005ad0 <cppInit+0xc8>)
 8005a1e:	f7fd fcd3 	bl	80033c8 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a22:	482b      	ldr	r0, [pc, #172]	; (8005ad0 <cppInit+0xc8>)
 8005a24:	f7fd fcfc 	bl	8003420 <_ZN11PowerSensor12butteryCheckEv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <cppInit+0x2a>
 8005a2e:	f7ff ffb1 	bl	8005994 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a32:	4828      	ldr	r0, [pc, #160]	; (8005ad4 <cppInit+0xcc>)
 8005a34:	f7fc fe8e 	bl	8002754 <_ZN6Logger10sdCardInitEv>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <cppInit+0x46>
		led.fullColor('G');
 8005a3e:	2147      	movs	r1, #71	; 0x47
 8005a40:	4825      	ldr	r0, [pc, #148]	; (8005ad8 <cppInit+0xd0>)
 8005a42:	f7fc fa1d 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a46:	2064      	movs	r0, #100	; 0x64
 8005a48:	f000 fdfe 	bl	8006648 <HAL_Delay>
 8005a4c:	e006      	b.n	8005a5c <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005a4e:	2152      	movs	r1, #82	; 0x52
 8005a50:	4821      	ldr	r0, [pc, #132]	; (8005ad8 <cppInit+0xd0>)
 8005a52:	f7fc fa15 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a56:	2064      	movs	r0, #100	; 0x64
 8005a58:	f000 fdf6 	bl	8006648 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005a5c:	481f      	ldr	r0, [pc, #124]	; (8005adc <cppInit+0xd4>)
 8005a5e:	f7fc fb6b 	bl	8002138 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005a62:	481f      	ldr	r0, [pc, #124]	; (8005ae0 <cppInit+0xd8>)
 8005a64:	f7fc ff5e 	bl	8002924 <_ZN5Motor4initEv>
	encoder.init();
 8005a68:	481e      	ldr	r0, [pc, #120]	; (8005ae4 <cppInit+0xdc>)
 8005a6a:	f7fb fba7 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005a6e:	481e      	ldr	r0, [pc, #120]	; (8005ae8 <cppInit+0xe0>)
 8005a70:	f7fc f892 	bl	8001b98 <_ZN3IMU4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8005a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a78:	f000 fde6 	bl	8006648 <HAL_Delay>

	led.fullColor('M');
 8005a7c:	214d      	movs	r1, #77	; 0x4d
 8005a7e:	4816      	ldr	r0, [pc, #88]	; (8005ad8 <cppInit+0xd0>)
 8005a80:	f7fc f9fe 	bl	8001e80 <_ZN3LED9fullColorEc>
	//imu.calibration();

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005a84:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8005aec <cppInit+0xe4>
 8005a88:	eddf 0a19 	vldr	s1, [pc, #100]	; 8005af0 <cppInit+0xe8>
 8005a8c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005af4 <cppInit+0xec>
 8005a90:	4819      	ldr	r0, [pc, #100]	; (8005af8 <cppInit+0xf0>)
 8005a92:	f7fc fda9 	bl	80025e8 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005a96:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8005aec <cppInit+0xe4>
 8005a9a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005aec <cppInit+0xe4>
 8005a9e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005aec <cppInit+0xe4>
 8005aa2:	4816      	ldr	r0, [pc, #88]	; (8005afc <cppInit+0xf4>)
 8005aa4:	f7fd ff6c 	bl	8003980 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 8005aa8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005aec <cppInit+0xe4>
 8005aac:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005aec <cppInit+0xe4>
 8005ab0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005aec <cppInit+0xe4>
 8005ab4:	4811      	ldr	r0, [pc, #68]	; (8005afc <cppInit+0xf4>)
 8005ab6:	f7fd ff7c 	bl	80039b2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 8005aba:	480a      	ldr	r0, [pc, #40]	; (8005ae4 <cppInit+0xdc>)
 8005abc:	f7fb fc6c 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005ac0:	480f      	ldr	r0, [pc, #60]	; (8005b00 <cppInit+0xf8>)
 8005ac2:	f7fd f93d 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005ac6:	480f      	ldr	r0, [pc, #60]	; (8005b04 <cppInit+0xfc>)
 8005ac8:	f7fd fa07 	bl	8002eda <_ZN13PathFollowing4initEv>

}
 8005acc:	bf00      	nop
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000570 	.word	0x20000570
 8005ad4:	200005a0 	.word	0x200005a0
 8005ad8:	2000056c 	.word	0x2000056c
 8005adc:	20000264 	.word	0x20000264
 8005ae0:	20000568 	.word	0x20000568
 8005ae4:	2001f1d8 	.word	0x2001f1d8
 8005ae8:	20000580 	.word	0x20000580
 8005aec:	00000000 	.word	0x00000000
 8005af0:	360637bd 	.word	0x360637bd
 8005af4:	3a03126f 	.word	0x3a03126f
 8005af8:	2001f248 	.word	0x2001f248
 8005afc:	2001f208 	.word	0x2001f208
 8005b00:	2001f2a8 	.word	0x2001f2a8
 8005b04:	2001f2d8 	.word	0x2001f2d8

08005b08 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <cppFlip1ms+0x38>)
 8005b0e:	f7fc fb71 	bl	80021f4 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <cppFlip1ms+0x3c>)
 8005b14:	f7fc f854 	bl	8001bc0 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <cppFlip1ms+0x40>)
 8005b1a:	f7fb fb71 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005b1e:	480b      	ldr	r0, [pc, #44]	; (8005b4c <cppFlip1ms+0x44>)
 8005b20:	f7fc fd9a 	bl	8002658 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005b24:	480a      	ldr	r0, [pc, #40]	; (8005b50 <cppFlip1ms+0x48>)
 8005b26:	f7fd ff5d 	bl	80039e4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005b2a:	480a      	ldr	r0, [pc, #40]	; (8005b54 <cppFlip1ms+0x4c>)
 8005b2c:	f7fd f8ca 	bl	8002cc4 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005b30:	4809      	ldr	r0, [pc, #36]	; (8005b58 <cppFlip1ms+0x50>)
 8005b32:	f7fc ff09 	bl	8002948 <_ZN5Motor9motorCtrlEv>
		odometry.clearPotition();
	}
	*/


	encoder.clearCnt();
 8005b36:	4804      	ldr	r0, [pc, #16]	; (8005b48 <cppFlip1ms+0x40>)
 8005b38:	f7fb fc3e 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000264 	.word	0x20000264
 8005b44:	20000580 	.word	0x20000580
 8005b48:	2001f1d8 	.word	0x2001f1d8
 8005b4c:	2001f248 	.word	0x2001f248
 8005b50:	2001f208 	.word	0x2001f208
 8005b54:	2001f2a8 	.word	0x2001f2a8
 8005b58:	20000568 	.word	0x20000568

08005b5c <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005b60:	4802      	ldr	r0, [pc, #8]	; (8005b6c <cppFlip100ns+0x10>)
 8005b62:	f7fc faf9 	bl	8002158 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000264 	.word	0x20000264

08005b70 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	ed2d 8b04 	vpush	{d8-d9}
 8005b76:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005b78:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <cppFlip10ms+0x110>)
 8005b7a:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b82:	4840      	ldr	r0, [pc, #256]	; (8005c84 <cppFlip10ms+0x114>)
 8005b84:	f7fc fe2e 	bl	80027e4 <_ZN6Logger8storeLogEf>

	//path_following.setGain(0.0, 0.0, 0.0);
	static double x, y, th;
	if(flag == true){
 8005b88:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <cppFlip10ms+0x118>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d028      	beq.n	8005be2 <cppFlip10ms+0x72>
		x += 0.001;
 8005b90:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <cppFlip10ms+0x11c>)
 8005b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b96:	a338      	add	r3, pc, #224	; (adr r3, 8005c78 <cppFlip10ms+0x108>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f7fa fb8e 	bl	80002bc <__adddf3>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4a39      	ldr	r2, [pc, #228]	; (8005c8c <cppFlip10ms+0x11c>)
 8005ba6:	e9c2 3400 	strd	r3, r4, [r2]
		y += 0.00;
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <cppFlip10ms+0x120>)
 8005bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	f7fa fb80 	bl	80002bc <__adddf3>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <cppFlip10ms+0x120>)
 8005bc2:	e9c2 3400 	strd	r3, r4, [r2]
		th += 0.00;
 8005bc6:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <cppFlip10ms+0x124>)
 8005bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f7fa fb72 	bl	80002bc <__adddf3>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <cppFlip10ms+0x124>)
 8005bde:	e9c2 3400 	strd	r3, r4, [r2]
	}
	//path_following.setTargetPathSingle(x, y, th);
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005be2:	482d      	ldr	r0, [pc, #180]	; (8005c98 <cppFlip10ms+0x128>)
 8005be4:	f7fd f879 	bl	8002cda <_ZN8Odometry4getXEv>
 8005be8:	eeb0 8a40 	vmov.f32	s16, s0
 8005bec:	eef0 8a60 	vmov.f32	s17, s1
 8005bf0:	4829      	ldr	r0, [pc, #164]	; (8005c98 <cppFlip10ms+0x128>)
 8005bf2:	f7fd f883 	bl	8002cfc <_ZN8Odometry4getYEv>
 8005bf6:	eeb0 9a40 	vmov.f32	s18, s0
 8005bfa:	eef0 9a60 	vmov.f32	s19, s1
 8005bfe:	4826      	ldr	r0, [pc, #152]	; (8005c98 <cppFlip10ms+0x128>)
 8005c00:	f7fd f88d 	bl	8002d1e <_ZN8Odometry8getThetaEv>
 8005c04:	eeb0 7a40 	vmov.f32	s14, s0
 8005c08:	eef0 7a60 	vmov.f32	s15, s1
 8005c0c:	eeb0 2a47 	vmov.f32	s4, s14
 8005c10:	eef0 2a67 	vmov.f32	s5, s15
 8005c14:	eeb0 1a49 	vmov.f32	s2, s18
 8005c18:	eef0 1a69 	vmov.f32	s3, s19
 8005c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c20:	eef0 0a68 	vmov.f32	s1, s17
 8005c24:	481d      	ldr	r0, [pc, #116]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c26:	f7fd fb41 	bl	80032ac <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.targetUpdate();
 8005c2a:	481c      	ldr	r0, [pc, #112]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c2c:	f7fd f9f0 	bl	8003010 <_ZN13PathFollowing12targetUpdateEv>
	path_following.flip();
 8005c30:	481a      	ldr	r0, [pc, #104]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c32:	f7fd fb75 	bl	8003320 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005c36:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <cppFlip10ms+0x130>)
 8005c38:	491a      	ldr	r1, [pc, #104]	; (8005ca4 <cppFlip10ms+0x134>)
 8005c3a:	4818      	ldr	r0, [pc, #96]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c3c:	f7fd fb56 	bl	80032ec <_ZN13PathFollowing18getTargetVelocitysERdS0_>

	velocity_ctrl.setVelocity(mon_v, mon_w);
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <cppFlip10ms+0x134>)
 8005c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c46:	4618      	mov	r0, r3
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7fa ffe5 	bl	8000c18 <__aeabi_d2f>
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <cppFlip10ms+0x130>)
 8005c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c56:	4618      	mov	r0, r3
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7fa ffdd 	bl	8000c18 <__aeabi_d2f>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	ee00 3a90 	vmov	s1, r3
 8005c64:	ee00 5a10 	vmov	s0, r5
 8005c68:	480f      	ldr	r0, [pc, #60]	; (8005ca8 <cppFlip10ms+0x138>)
 8005c6a:	f7fd fe75 	bl	8003958 <_ZN12VelocityCtrl11setVelocityEff>
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	ecbd 8b04 	vpop	{d8-d9}
 8005c76:	bdb0      	pop	{r4, r5, r7, pc}
 8005c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c7c:	3f50624d 	.word	0x3f50624d
 8005c80:	20000264 	.word	0x20000264
 8005c84:	200005a0 	.word	0x200005a0
 8005c88:	20036a20 	.word	0x20036a20
 8005c8c:	20036a28 	.word	0x20036a28
 8005c90:	20036a30 	.word	0x20036a30
 8005c94:	20036a38 	.word	0x20036a38
 8005c98:	2001f2a8 	.word	0x2001f2a8
 8005c9c:	2001f2d8 	.word	0x2001f2d8
 8005ca0:	20036a18 	.word	0x20036a18
 8005ca4:	20036a10 	.word	0x20036a10
 8005ca8:	2001f208 	.word	0x2001f208

08005cac <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4803      	ldr	r0, [pc, #12]	; (8005cc8 <cppExit+0x1c>)
 8005cbc:	f7fd fc3c 	bl	8003538 <_ZN10SideSensor12updateStatusEt>
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2000055c 	.word	0x2000055c
 8005ccc:	00000000 	.word	0x00000000

08005cd0 <cppLoop>:

void cppLoop(void)
{
 8005cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cd4:	b08a      	sub	sp, #40	; 0x28
 8005cd6:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005cd8:	48bd      	ldr	r0, [pc, #756]	; (8005fd0 <cppLoop+0x300>)
 8005cda:	f7fd fbd3 	bl	8003484 <_ZN12RotarySwitch8getValueEv>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	f200 8390 	bhi.w	8006406 <cppLoop+0x736>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <cppLoop+0x1c>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d4f 	.word	0x08005d4f
 8005cf4:	08005dd7 	.word	0x08005dd7
 8005cf8:	08005e83 	.word	0x08005e83
 8005cfc:	08005f3b 	.word	0x08005f3b
 8005d00:	08006035 	.word	0x08006035
 8005d04:	08006101 	.word	0x08006101
 8005d08:	080061bb 	.word	0x080061bb
 8005d0c:	080062e5 	.word	0x080062e5
 8005d10:	08006407 	.word	0x08006407
 8005d14:	08006407 	.word	0x08006407
 8005d18:	08006407 	.word	0x08006407
 8005d1c:	08006407 	.word	0x08006407
 8005d20:	08006407 	.word	0x08006407
 8005d24:	08006407 	.word	0x08006407
 8005d28:	08006407 	.word	0x08006407

	case 0:
		lcd_clear();
 8005d2c:	f7fb f9b8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d30:	2100      	movs	r1, #0
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fb f9c4 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005d38:	48a6      	ldr	r0, [pc, #664]	; (8005fd4 <cppLoop+0x304>)
 8005d3a:	f7fb f9eb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7fb f9bd 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005d46:	48a4      	ldr	r0, [pc, #656]	; (8005fd8 <cppLoop+0x308>)
 8005d48:	f7fb f9e4 	bl	8001114 <lcd_printf>
		break;
 8005d4c:	e36c      	b.n	8006428 <cppLoop+0x758>

	case 1:
		lcd_clear();
 8005d4e:	f7fb f9a7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d52:	2100      	movs	r1, #0
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7fb f9b3 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005d5a:	48a0      	ldr	r0, [pc, #640]	; (8005fdc <cppLoop+0x30c>)
 8005d5c:	f7fb f9da 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d60:	2101      	movs	r1, #1
 8005d62:	2000      	movs	r0, #0
 8005d64:	f7fb f9ac 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005d68:	489d      	ldr	r0, [pc, #628]	; (8005fe0 <cppLoop+0x310>)
 8005d6a:	f7fb f9d3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d6e:	489d      	ldr	r0, [pc, #628]	; (8005fe4 <cppLoop+0x314>)
 8005d70:	f7fc f822 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8342 	beq.w	800640a <cppLoop+0x73a>
			HAL_Delay(500);
 8005d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d8a:	f000 fc5d 	bl	8006648 <HAL_Delay>

			logger.start();
 8005d8e:	4896      	ldr	r0, [pc, #600]	; (8005fe8 <cppLoop+0x318>)
 8005d90:	f7fc fd97 	bl	80028c2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005d94:	4895      	ldr	r0, [pc, #596]	; (8005fec <cppLoop+0x31c>)
 8005d96:	f7fd fe38 	bl	8003a0a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005d9a:	eddf 0a95 	vldr	s1, [pc, #596]	; 8005ff0 <cppLoop+0x320>
 8005d9e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005ff0 <cppLoop+0x320>
 8005da2:	4892      	ldr	r0, [pc, #584]	; (8005fec <cppLoop+0x31c>)
 8005da4:	f7fd fdd8 	bl	8003958 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	2101      	movs	r1, #1
 8005dae:	4891      	ldr	r0, [pc, #580]	; (8005ff4 <cppLoop+0x324>)
 8005db0:	f7fc f922 	bl	8001ff8 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005db4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005db8:	f000 fc46 	bl	8006648 <HAL_Delay>

			velocity_ctrl.stop();
 8005dbc:	488b      	ldr	r0, [pc, #556]	; (8005fec <cppLoop+0x31c>)
 8005dbe:	f7fd fe33 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	488a      	ldr	r0, [pc, #552]	; (8005ff4 <cppLoop+0x324>)
 8005dca:	f7fc f915 	bl	8001ff8 <_ZN3LED2LREaa>

			logger.stop();
 8005dce:	4886      	ldr	r0, [pc, #536]	; (8005fe8 <cppLoop+0x318>)
 8005dd0:	f7fc fd87 	bl	80028e2 <_ZN6Logger4stopEv>
		}

		break;
 8005dd4:	e319      	b.n	800640a <cppLoop+0x73a>

	case 2:
		lcd_clear();
 8005dd6:	f7fb f963 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f7fb f96f 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005de2:	4885      	ldr	r0, [pc, #532]	; (8005ff8 <cppLoop+0x328>)
 8005de4:	f7fb f996 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005de8:	2101      	movs	r1, #1
 8005dea:	2000      	movs	r0, #0
 8005dec:	f7fb f968 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005df0:	4882      	ldr	r0, [pc, #520]	; (8005ffc <cppLoop+0x32c>)
 8005df2:	f7fb f98f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005df6:	487b      	ldr	r0, [pc, #492]	; (8005fe4 <cppLoop+0x314>)
 8005df8:	f7fb ffde 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8300 	beq.w	800640e <cppLoop+0x73e>
			led.LR(-1, 1);
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f04f 31ff 	mov.w	r1, #4294967295
 8005e14:	4877      	ldr	r0, [pc, #476]	; (8005ff4 <cppLoop+0x324>)
 8005e16:	f7fc f8ef 	bl	8001ff8 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e1e:	f000 fc13 	bl	8006648 <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005e22:	4b77      	ldr	r3, [pc, #476]	; (8006000 <cppLoop+0x330>)
 8005e24:	61fb      	str	r3, [r7, #28]
			double d = 0.123456789123456789123456789;
 8005e26:	a468      	add	r4, pc, #416	; (adr r4, 8005fc8 <cppLoop+0x2f8>)
 8005e28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e2c:	e9c7 3404 	strd	r3, r4, [r7, #16]
			mon_f = f;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa fba0 	bl	8000578 <__aeabi_f2d>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4a71      	ldr	r2, [pc, #452]	; (8006004 <cppLoop+0x334>)
 8005e3e:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005e42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e46:	4a70      	ldr	r2, [pc, #448]	; (8006008 <cppLoop+0x338>)
 8005e48:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005e4c:	f107 021c 	add.w	r2, r7, #28
 8005e50:	2300      	movs	r3, #0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	2201      	movs	r2, #1
 8005e58:	496c      	ldr	r1, [pc, #432]	; (800600c <cppLoop+0x33c>)
 8005e5a:	486d      	ldr	r0, [pc, #436]	; (8006010 <cppLoop+0x340>)
 8005e5c:	f7fb fb68 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005e60:	f107 0210 	add.w	r2, r7, #16
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4969      	ldr	r1, [pc, #420]	; (8006014 <cppLoop+0x344>)
 8005e6e:	4868      	ldr	r0, [pc, #416]	; (8006010 <cppLoop+0x340>)
 8005e70:	f7fb fbc4 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005e74:	2200      	movs	r2, #0
 8005e76:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7a:	485e      	ldr	r0, [pc, #376]	; (8005ff4 <cppLoop+0x324>)
 8005e7c:	f7fc f8bc 	bl	8001ff8 <_ZN3LED2LREaa>
		}
		break;
 8005e80:	e2c5      	b.n	800640e <cppLoop+0x73e>

	case 3:
		led.fullColor('C');
 8005e82:	2143      	movs	r1, #67	; 0x43
 8005e84:	485b      	ldr	r0, [pc, #364]	; (8005ff4 <cppLoop+0x324>)
 8005e86:	f7fb fffb 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e8a:	f7fb f909 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e8e:	2100      	movs	r1, #0
 8005e90:	2000      	movs	r0, #0
 8005e92:	f7fb f915 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005e96:	4860      	ldr	r0, [pc, #384]	; (8006018 <cppLoop+0x348>)
 8005e98:	f7fb f93c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f7fb f90e 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005ea4:	485d      	ldr	r0, [pc, #372]	; (800601c <cppLoop+0x34c>)
 8005ea6:	f7fb f935 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005eaa:	484e      	ldr	r0, [pc, #312]	; (8005fe4 <cppLoop+0x314>)
 8005eac:	f7fb ff84 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 82a8 	beq.w	8006412 <cppLoop+0x742>
			led.LR(-1, 1);
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec8:	484a      	ldr	r0, [pc, #296]	; (8005ff4 <cppLoop+0x324>)
 8005eca:	f7fc f895 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ed2:	f000 fbb9 	bl	8006648 <HAL_Delay>

			logger.start();
 8005ed6:	4844      	ldr	r0, [pc, #272]	; (8005fe8 <cppLoop+0x318>)
 8005ed8:	f7fc fcf3 	bl	80028c2 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005edc:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006020 <cppLoop+0x350>
 8005ee0:	4850      	ldr	r0, [pc, #320]	; (8006024 <cppLoop+0x354>)
 8005ee2:	f7fc fb9a 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005ee6:	484f      	ldr	r0, [pc, #316]	; (8006024 <cppLoop+0x354>)
 8005ee8:	f7fc fbee 	bl	80026c8 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005eec:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ef0:	f000 fbaa 	bl	8006648 <HAL_Delay>

			logger.stop();
 8005ef4:	483c      	ldr	r0, [pc, #240]	; (8005fe8 <cppLoop+0x318>)
 8005ef6:	f7fc fcf4 	bl	80028e2 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005efa:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8006020 <cppLoop+0x350>
 8005efe:	4849      	ldr	r0, [pc, #292]	; (8006024 <cppLoop+0x354>)
 8005f00:	f7fc fb8b 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005f04:	4847      	ldr	r0, [pc, #284]	; (8006024 <cppLoop+0x354>)
 8005f06:	f7fc fbef 	bl	80026e8 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4838      	ldr	r0, [pc, #224]	; (8005ff4 <cppLoop+0x324>)
 8005f12:	f7fc f871 	bl	8001ff8 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005f16:	4a44      	ldr	r2, [pc, #272]	; (8006028 <cppLoop+0x358>)
 8005f18:	4944      	ldr	r1, [pc, #272]	; (800602c <cppLoop+0x35c>)
 8005f1a:	4833      	ldr	r0, [pc, #204]	; (8005fe8 <cppLoop+0x318>)
 8005f1c:	f7fc fc9a 	bl	8002854 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	2100      	movs	r1, #0
 8005f26:	4833      	ldr	r0, [pc, #204]	; (8005ff4 <cppLoop+0x324>)
 8005f28:	f7fc f866 	bl	8001ff8 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f32:	4830      	ldr	r0, [pc, #192]	; (8005ff4 <cppLoop+0x324>)
 8005f34:	f7fc f860 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 8005f38:	e26b      	b.n	8006412 <cppLoop+0x742>

	case 4:
		led.fullColor('M');
 8005f3a:	214d      	movs	r1, #77	; 0x4d
 8005f3c:	482d      	ldr	r0, [pc, #180]	; (8005ff4 <cppLoop+0x324>)
 8005f3e:	f7fb ff9f 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f42:	f7fb f8ad 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f46:	2100      	movs	r1, #0
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fb f8b9 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005f4e:	4838      	ldr	r0, [pc, #224]	; (8006030 <cppLoop+0x360>)
 8005f50:	f7fb f8e0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f54:	2101      	movs	r1, #1
 8005f56:	2000      	movs	r0, #0
 8005f58:	f7fb f8b2 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005f5c:	482f      	ldr	r0, [pc, #188]	; (800601c <cppLoop+0x34c>)
 8005f5e:	f7fb f8d9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f62:	4820      	ldr	r0, [pc, #128]	; (8005fe4 <cppLoop+0x314>)
 8005f64:	f7fb ff28 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 824e 	beq.w	8006416 <cppLoop+0x746>
			led.LR(-1, 1);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f80:	481c      	ldr	r0, [pc, #112]	; (8005ff4 <cppLoop+0x324>)
 8005f82:	f7fc f839 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f8a:	f000 fb5d 	bl	8006648 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005f8e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8006020 <cppLoop+0x350>
 8005f92:	4824      	ldr	r0, [pc, #144]	; (8006024 <cppLoop+0x354>)
 8005f94:	f7fc fb50 	bl	8002638 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005f98:	4814      	ldr	r0, [pc, #80]	; (8005fec <cppLoop+0x31c>)
 8005f9a:	f7fd fd36 	bl	8003a0a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005f9e:	4821      	ldr	r0, [pc, #132]	; (8006024 <cppLoop+0x354>)
 8005fa0:	f7fc fb92 	bl	80026c8 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005fa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005fa8:	f000 fb4e 	bl	8006648 <HAL_Delay>

			line_trace.stop();
 8005fac:	481d      	ldr	r0, [pc, #116]	; (8006024 <cppLoop+0x354>)
 8005fae:	f7fc fb9b 	bl	80026e8 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005fb2:	480e      	ldr	r0, [pc, #56]	; (8005fec <cppLoop+0x31c>)
 8005fb4:	f7fd fd38 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbe:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <cppLoop+0x324>)
 8005fc0:	f7fc f81a 	bl	8001ff8 <_ZN3LED2LREaa>
		}
		break;
 8005fc4:	e227      	b.n	8006416 <cppLoop+0x746>
 8005fc6:	bf00      	nop
 8005fc8:	37c1215e 	.word	0x37c1215e
 8005fcc:	3fbf9add 	.word	0x3fbf9add
 8005fd0:	20000564 	.word	0x20000564
 8005fd4:	080171e0 	.word	0x080171e0
 8005fd8:	080171e4 	.word	0x080171e4
 8005fdc:	080171ec 	.word	0x080171ec
 8005fe0:	080171f8 	.word	0x080171f8
 8005fe4:	20000560 	.word	0x20000560
 8005fe8:	200005a0 	.word	0x200005a0
 8005fec:	2001f208 	.word	0x2001f208
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	2000056c 	.word	0x2000056c
 8005ff8:	08017200 	.word	0x08017200
 8005ffc:	08017204 	.word	0x08017204
 8006000:	3dfcd6ea 	.word	0x3dfcd6ea
 8006004:	20036a00 	.word	0x20036a00
 8006008:	20036a08 	.word	0x20036a08
 800600c:	0801720c 	.word	0x0801720c
 8006010:	08017218 	.word	0x08017218
 8006014:	08017224 	.word	0x08017224
 8006018:	08017230 	.word	0x08017230
 800601c:	08017238 	.word	0x08017238
 8006020:	3dcccccd 	.word	0x3dcccccd
 8006024:	2001f248 	.word	0x2001f248
 8006028:	08017240 	.word	0x08017240
 800602c:	0801724c 	.word	0x0801724c
 8006030:	0801725c 	.word	0x0801725c

	case 5:
		led.fullColor('Y');
 8006034:	2159      	movs	r1, #89	; 0x59
 8006036:	4897      	ldr	r0, [pc, #604]	; (8006294 <cppLoop+0x5c4>)
 8006038:	f7fb ff22 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 800603c:	f7fb f830 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006040:	2100      	movs	r1, #0
 8006042:	2000      	movs	r0, #0
 8006044:	f7fb f83c 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006048:	4893      	ldr	r0, [pc, #588]	; (8006298 <cppLoop+0x5c8>)
 800604a:	f7fb f863 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800604e:	2101      	movs	r1, #1
 8006050:	2000      	movs	r0, #0
 8006052:	f7fb f835 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006056:	4891      	ldr	r0, [pc, #580]	; (800629c <cppLoop+0x5cc>)
 8006058:	f7fb f85c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800605c:	4890      	ldr	r0, [pc, #576]	; (80062a0 <cppLoop+0x5d0>)
 800605e:	f7fb feab 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8006062:	4603      	mov	r3, r0
 8006064:	2b02      	cmp	r3, #2
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 81d3 	beq.w	800641a <cppLoop+0x74a>
			led.LR(-1, 1);
 8006074:	2201      	movs	r2, #1
 8006076:	f04f 31ff 	mov.w	r1, #4294967295
 800607a:	4886      	ldr	r0, [pc, #536]	; (8006294 <cppLoop+0x5c4>)
 800607c:	f7fb ffbc 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006084:	f000 fae0 	bl	8006648 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006088:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80062a4 <cppLoop+0x5d4>
 800608c:	4886      	ldr	r0, [pc, #536]	; (80062a8 <cppLoop+0x5d8>)
 800608e:	f7fc fac4 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006092:	4885      	ldr	r0, [pc, #532]	; (80062a8 <cppLoop+0x5d8>)
 8006094:	f7fc fb18 	bl	80026c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800609c:	f000 fad4 	bl	8006648 <HAL_Delay>

			led.fullColor('R');
 80060a0:	2152      	movs	r1, #82	; 0x52
 80060a2:	487c      	ldr	r0, [pc, #496]	; (8006294 <cppLoop+0x5c4>)
 80060a4:	f7fb feec 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80060a8:	4880      	ldr	r0, [pc, #512]	; (80062ac <cppLoop+0x5dc>)
 80060aa:	f7fb f9af 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80060ae:	487f      	ldr	r0, [pc, #508]	; (80062ac <cppLoop+0x5dc>)
 80060b0:	f7fb f972 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80060b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80060b8:	f000 fac6 	bl	8006648 <HAL_Delay>

			line_trace.stop();
 80060bc:	487a      	ldr	r0, [pc, #488]	; (80062a8 <cppLoop+0x5d8>)
 80060be:	f7fc fb13 	bl	80026e8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80060c2:	497b      	ldr	r1, [pc, #492]	; (80062b0 <cppLoop+0x5e0>)
 80060c4:	487b      	ldr	r0, [pc, #492]	; (80062b4 <cppLoop+0x5e4>)
 80060c6:	f7fb f9bf 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 80060ca:	4878      	ldr	r0, [pc, #480]	; (80062ac <cppLoop+0x5dc>)
 80060cc:	f7fb f953 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 80060d0:	ec54 3b10 	vmov	r3, r4, d0
 80060d4:	4618      	mov	r0, r3
 80060d6:	4621      	mov	r1, r4
 80060d8:	f7fa fd9e 	bl	8000c18 <__aeabi_d2f>
 80060dc:	4603      	mov	r3, r0
 80060de:	60fb      	str	r3, [r7, #12]
			sd_write_float(1, &d, ADD_WRITE);
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	2201      	movs	r2, #1
 80060e6:	4619      	mov	r1, r3
 80060e8:	2001      	movs	r0, #1
 80060ea:	f7fb f9cf 	bl	800148c <sd_write_float>
			user_fclose();
 80060ee:	f7fb f9bd 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 80060f2:	2200      	movs	r2, #0
 80060f4:	f04f 31ff 	mov.w	r1, #4294967295
 80060f8:	4866      	ldr	r0, [pc, #408]	; (8006294 <cppLoop+0x5c4>)
 80060fa:	f7fb ff7d 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 80060fe:	e18c      	b.n	800641a <cppLoop+0x74a>

	case 6:
		led.fullColor('C');
 8006100:	2143      	movs	r1, #67	; 0x43
 8006102:	4864      	ldr	r0, [pc, #400]	; (8006294 <cppLoop+0x5c4>)
 8006104:	f7fb febc 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006108:	f7fa ffca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800610c:	2100      	movs	r1, #0
 800610e:	2000      	movs	r0, #0
 8006110:	f7fa ffd6 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006114:	4868      	ldr	r0, [pc, #416]	; (80062b8 <cppLoop+0x5e8>)
 8006116:	f7fa fffd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800611a:	2101      	movs	r1, #1
 800611c:	2000      	movs	r0, #0
 800611e:	f7fa ffcf 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006122:	4866      	ldr	r0, [pc, #408]	; (80062bc <cppLoop+0x5ec>)
 8006124:	f7fa fff6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006128:	485d      	ldr	r0, [pc, #372]	; (80062a0 <cppLoop+0x5d0>)
 800612a:	f7fb fe45 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 800612e:	4603      	mov	r3, r0
 8006130:	2b02      	cmp	r3, #2
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 816f 	beq.w	800641e <cppLoop+0x74e>
			HAL_Delay(500);
 8006140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006144:	f000 fa80 	bl	8006648 <HAL_Delay>
			led.LR(-1, 1);
 8006148:	2201      	movs	r2, #1
 800614a:	f04f 31ff 	mov.w	r1, #4294967295
 800614e:	4851      	ldr	r0, [pc, #324]	; (8006294 <cppLoop+0x5c4>)
 8006150:	f7fb ff52 	bl	8001ff8 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 8006154:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80062c0 <cppLoop+0x5f0>
 8006158:	4853      	ldr	r0, [pc, #332]	; (80062a8 <cppLoop+0x5d8>)
 800615a:	f7fc fa5e 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800615e:	4852      	ldr	r0, [pc, #328]	; (80062a8 <cppLoop+0x5d8>)
 8006160:	f7fc fab2 	bl	80026c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006168:	f000 fa6e 	bl	8006648 <HAL_Delay>

			led.fullColor('R');
 800616c:	2152      	movs	r1, #82	; 0x52
 800616e:	4849      	ldr	r0, [pc, #292]	; (8006294 <cppLoop+0x5c4>)
 8006170:	f7fb fe86 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006174:	484d      	ldr	r0, [pc, #308]	; (80062ac <cppLoop+0x5dc>)
 8006176:	f7fb f949 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800617a:	484c      	ldr	r0, [pc, #304]	; (80062ac <cppLoop+0x5dc>)
 800617c:	f7fb f90c 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006180:	4850      	ldr	r0, [pc, #320]	; (80062c4 <cppLoop+0x5f4>)
 8006182:	f7fc fddd 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006186:	4850      	ldr	r0, [pc, #320]	; (80062c8 <cppLoop+0x5f8>)
 8006188:	f7fc fb9b 	bl	80028c2 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 800618c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006190:	f000 fa5a 	bl	8006648 <HAL_Delay>

			line_trace.stop();
 8006194:	4844      	ldr	r0, [pc, #272]	; (80062a8 <cppLoop+0x5d8>)
 8006196:	f7fc faa7 	bl	80026e8 <_ZN9LineTrace4stopEv>
			logger.stop();
 800619a:	484b      	ldr	r0, [pc, #300]	; (80062c8 <cppLoop+0x5f8>)
 800619c:	f7fc fba1 	bl	80028e2 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 80061a0:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <cppLoop+0x5fc>)
 80061a2:	4a4b      	ldr	r2, [pc, #300]	; (80062d0 <cppLoop+0x600>)
 80061a4:	4944      	ldr	r1, [pc, #272]	; (80062b8 <cppLoop+0x5e8>)
 80061a6:	4848      	ldr	r0, [pc, #288]	; (80062c8 <cppLoop+0x5f8>)
 80061a8:	f7fc fb68 	bl	800287c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	f04f 31ff 	mov.w	r1, #4294967295
 80061b2:	4838      	ldr	r0, [pc, #224]	; (8006294 <cppLoop+0x5c4>)
 80061b4:	f7fb ff20 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 80061b8:	e131      	b.n	800641e <cppLoop+0x74e>

	case 7:
		led.fullColor('M');
 80061ba:	214d      	movs	r1, #77	; 0x4d
 80061bc:	4835      	ldr	r0, [pc, #212]	; (8006294 <cppLoop+0x5c4>)
 80061be:	f7fb fe5f 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061c2:	f7fa ff6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061c6:	2100      	movs	r1, #0
 80061c8:	2000      	movs	r0, #0
 80061ca:	f7fa ff79 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 80061ce:	4841      	ldr	r0, [pc, #260]	; (80062d4 <cppLoop+0x604>)
 80061d0:	f7fa ffa0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061d4:	2101      	movs	r1, #1
 80061d6:	2000      	movs	r0, #0
 80061d8:	f7fa ff72 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80061dc:	482f      	ldr	r0, [pc, #188]	; (800629c <cppLoop+0x5cc>)
 80061de:	f7fa ff99 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80061e2:	482f      	ldr	r0, [pc, #188]	; (80062a0 <cppLoop+0x5d0>)
 80061e4:	f7fb fde8 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	bf0c      	ite	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	2300      	movne	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <cppLoop+0x548>
			led.LR(-1, 1);
 80061f8:	2201      	movs	r2, #1
 80061fa:	f04f 31ff 	mov.w	r1, #4294967295
 80061fe:	4825      	ldr	r0, [pc, #148]	; (8006294 <cppLoop+0x5c4>)
 8006200:	f7fb fefa 	bl	8001ff8 <_ZN3LED2LREaa>
			path_following.setTargetPathMulti();
 8006204:	4834      	ldr	r0, [pc, #208]	; (80062d8 <cppLoop+0x608>)
 8006206:	f7fc fecf 	bl	8002fa8 <_ZN13PathFollowing18setTargetPathMultiEv>
			led.LR(-1, 0);
 800620a:	2200      	movs	r2, #0
 800620c:	f04f 31ff 	mov.w	r1, #4294967295
 8006210:	4820      	ldr	r0, [pc, #128]	; (8006294 <cppLoop+0x5c4>)
 8006212:	f7fb fef1 	bl	8001ff8 <_ZN3LED2LREaa>
			velocity_ctrl.stop();
			flag = false;

			led.LR(-1, 0);
		}
		break;
 8006216:	e104      	b.n	8006422 <cppLoop+0x752>
		else if(joy_stick.getValue() == JOY_C){
 8006218:	4821      	ldr	r0, [pc, #132]	; (80062a0 <cppLoop+0x5d0>)
 800621a:	f7fb fdcd 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 800621e:	4603      	mov	r3, r0
 8006220:	2b02      	cmp	r3, #2
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80f9 	beq.w	8006422 <cppLoop+0x752>
			led.LR(-1, 1);
 8006230:	2201      	movs	r2, #1
 8006232:	f04f 31ff 	mov.w	r1, #4294967295
 8006236:	4817      	ldr	r0, [pc, #92]	; (8006294 <cppLoop+0x5c4>)
 8006238:	f7fb fede 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800623c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006240:	f000 fa02 	bl	8006648 <HAL_Delay>
			led.fullColor('R');
 8006244:	2152      	movs	r1, #82	; 0x52
 8006246:	4813      	ldr	r0, [pc, #76]	; (8006294 <cppLoop+0x5c4>)
 8006248:	f7fb fe1a 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800624c:	4817      	ldr	r0, [pc, #92]	; (80062ac <cppLoop+0x5dc>)
 800624e:	f7fb f8dd 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006252:	4816      	ldr	r0, [pc, #88]	; (80062ac <cppLoop+0x5dc>)
 8006254:	f7fb f8a0 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006258:	481a      	ldr	r0, [pc, #104]	; (80062c4 <cppLoop+0x5f4>)
 800625a:	f7fc fd71 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 800625e:	481e      	ldr	r0, [pc, #120]	; (80062d8 <cppLoop+0x608>)
 8006260:	f7fd f86c 	bl	800333c <_ZN13PathFollowing5startEv>
			flag = true;
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <cppLoop+0x60c>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10000);
 800626a:	f242 7010 	movw	r0, #10000	; 0x2710
 800626e:	f000 f9eb 	bl	8006648 <HAL_Delay>
			path_following.stop();
 8006272:	4819      	ldr	r0, [pc, #100]	; (80062d8 <cppLoop+0x608>)
 8006274:	f7fd f86f 	bl	8003356 <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 8006278:	4819      	ldr	r0, [pc, #100]	; (80062e0 <cppLoop+0x610>)
 800627a:	f7fd fbd5 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>
			flag = false;
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <cppLoop+0x60c>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
			led.LR(-1, 0);
 8006284:	2200      	movs	r2, #0
 8006286:	f04f 31ff 	mov.w	r1, #4294967295
 800628a:	4802      	ldr	r0, [pc, #8]	; (8006294 <cppLoop+0x5c4>)
 800628c:	f7fb feb4 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006290:	e0c7      	b.n	8006422 <cppLoop+0x752>
 8006292:	bf00      	nop
 8006294:	2000056c 	.word	0x2000056c
 8006298:	08017268 	.word	0x08017268
 800629c:	08017270 	.word	0x08017270
 80062a0:	20000560 	.word	0x20000560
 80062a4:	00000000 	.word	0x00000000
 80062a8:	2001f248 	.word	0x2001f248
 80062ac:	2001f1d8 	.word	0x2001f1d8
 80062b0:	0801727c 	.word	0x0801727c
 80062b4:	08017284 	.word	0x08017284
 80062b8:	08017290 	.word	0x08017290
 80062bc:	0801729c 	.word	0x0801729c
 80062c0:	3dcccccd 	.word	0x3dcccccd
 80062c4:	2001f2a8 	.word	0x2001f2a8
 80062c8:	200005a0 	.word	0x200005a0
 80062cc:	080172a4 	.word	0x080172a4
 80062d0:	080172b4 	.word	0x080172b4
 80062d4:	080172c8 	.word	0x080172c8
 80062d8:	2001f2d8 	.word	0x2001f2d8
 80062dc:	20036a20 	.word	0x20036a20
 80062e0:	2001f208 	.word	0x2001f208

	case 8:
		led.fullColor('M');
 80062e4:	214d      	movs	r1, #77	; 0x4d
 80062e6:	4854      	ldr	r0, [pc, #336]	; (8006438 <cppLoop+0x768>)
 80062e8:	f7fb fdca 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062ec:	f7fa fed8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062f0:	2100      	movs	r1, #0
 80062f2:	2000      	movs	r0, #0
 80062f4:	f7fa fee4 	bl	80010c0 <lcd_locate>
		lcd_printf("%3.1lf     ", path_following.getKxVal());
 80062f8:	4850      	ldr	r0, [pc, #320]	; (800643c <cppLoop+0x76c>)
 80062fa:	f7fc fe19 	bl	8002f30 <_ZN13PathFollowing8getKxValEv>
 80062fe:	ec54 3b10 	vmov	r3, r4, d0
 8006302:	461a      	mov	r2, r3
 8006304:	4623      	mov	r3, r4
 8006306:	484e      	ldr	r0, [pc, #312]	; (8006440 <cppLoop+0x770>)
 8006308:	f7fa ff04 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800630c:	2101      	movs	r1, #1
 800630e:	2000      	movs	r0, #0
 8006310:	f7fa fed6 	bl	80010c0 <lcd_locate>
		lcd_printf("%3.1lf,%3.1lf", path_following.getKyVal(), path_following.getKtVal());
 8006314:	4849      	ldr	r0, [pc, #292]	; (800643c <cppLoop+0x76c>)
 8006316:	f7fc fe1f 	bl	8002f58 <_ZN13PathFollowing8getKyValEv>
 800631a:	ec55 4b10 	vmov	r4, r5, d0
 800631e:	4847      	ldr	r0, [pc, #284]	; (800643c <cppLoop+0x76c>)
 8006320:	f7fc fe2e 	bl	8002f80 <_ZN13PathFollowing8getKtValEv>
 8006324:	eeb0 7a40 	vmov.f32	s14, s0
 8006328:	eef0 7a60 	vmov.f32	s15, s1
 800632c:	ed8d 7b00 	vstr	d7, [sp]
 8006330:	4622      	mov	r2, r4
 8006332:	462b      	mov	r3, r5
 8006334:	4843      	ldr	r0, [pc, #268]	; (8006444 <cppLoop+0x774>)
 8006336:	f7fa feed 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800633a:	4843      	ldr	r0, [pc, #268]	; (8006448 <cppLoop+0x778>)
 800633c:	f7fb fd3c 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8006340:	4603      	mov	r3, r0
 8006342:	2b04      	cmp	r3, #4
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03a      	beq.n	80063c6 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8006350:	2201      	movs	r2, #1
 8006352:	f04f 31ff 	mov.w	r1, #4294967295
 8006356:	4838      	ldr	r0, [pc, #224]	; (8006438 <cppLoop+0x768>)
 8006358:	f7fb fe4e 	bl	8001ff8 <_ZN3LED2LREaa>

			int temp_kx, temp_ky, temp_kt;
			sd_read_array_int("Params", "kx.txt", 1, &temp_kx);
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	2201      	movs	r2, #1
 8006362:	493a      	ldr	r1, [pc, #232]	; (800644c <cppLoop+0x77c>)
 8006364:	483a      	ldr	r0, [pc, #232]	; (8006450 <cppLoop+0x780>)
 8006366:	f7fb fa4f 	bl	8001808 <sd_read_array_int>
			//HAL_Delay(10);
			sd_read_array_int("Params", "ky.txt", 1, &temp_ky);
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	2201      	movs	r2, #1
 800636e:	4939      	ldr	r1, [pc, #228]	; (8006454 <cppLoop+0x784>)
 8006370:	4837      	ldr	r0, [pc, #220]	; (8006450 <cppLoop+0x780>)
 8006372:	f7fb fa49 	bl	8001808 <sd_read_array_int>
			//HAL_Delay(10);
			sd_read_array_int("Params", "kt.txt", 1, &temp_kt);
 8006376:	463b      	mov	r3, r7
 8006378:	2201      	movs	r2, #1
 800637a:	4937      	ldr	r1, [pc, #220]	; (8006458 <cppLoop+0x788>)
 800637c:	4834      	ldr	r0, [pc, #208]	; (8006450 <cppLoop+0x780>)
 800637e:	f7fb fa43 	bl	8001808 <sd_read_array_int>
			//HAL_Delay(10);
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa f8e5 	bl	8000554 <__aeabi_i2d>
 800638a:	4604      	mov	r4, r0
 800638c:	460d      	mov	r5, r1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa f8df 	bl	8000554 <__aeabi_i2d>
 8006396:	4680      	mov	r8, r0
 8006398:	4689      	mov	r9, r1
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	4618      	mov	r0, r3
 800639e:	f7fa f8d9 	bl	8000554 <__aeabi_i2d>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	ec43 2b12 	vmov	d2, r2, r3
 80063aa:	ec49 8b11 	vmov	d1, r8, r9
 80063ae:	ec45 4b10 	vmov	d0, r4, r5
 80063b2:	4822      	ldr	r0, [pc, #136]	; (800643c <cppLoop+0x76c>)
 80063b4:	f7fc fd9c 	bl	8002ef0 <_ZN13PathFollowing7setGainEddd>
			//path_following.setGain(1.1, 2.2, 3.3);

			led.LR(-1, 0);
 80063b8:	2200      	movs	r2, #0
 80063ba:	f04f 31ff 	mov.w	r1, #4294967295
 80063be:	481e      	ldr	r0, [pc, #120]	; (8006438 <cppLoop+0x768>)
 80063c0:	f7fb fe1a 	bl	8001ff8 <_ZN3LED2LREaa>

			led.fullColor('R');

			led.LR(-1, 0);
		}
		break;
 80063c4:	e02f      	b.n	8006426 <cppLoop+0x756>
		else if(joy_stick.getValue() == JOY_C){
 80063c6:	4820      	ldr	r0, [pc, #128]	; (8006448 <cppLoop+0x778>)
 80063c8:	f7fb fcf6 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d024      	beq.n	8006426 <cppLoop+0x756>
			led.LR(-1, 1);
 80063dc:	2201      	movs	r2, #1
 80063de:	f04f 31ff 	mov.w	r1, #4294967295
 80063e2:	4815      	ldr	r0, [pc, #84]	; (8006438 <cppLoop+0x768>)
 80063e4:	f7fb fe08 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ec:	f000 f92c 	bl	8006648 <HAL_Delay>
			led.fullColor('R');
 80063f0:	2152      	movs	r1, #82	; 0x52
 80063f2:	4811      	ldr	r0, [pc, #68]	; (8006438 <cppLoop+0x768>)
 80063f4:	f7fb fd44 	bl	8001e80 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80063f8:	2200      	movs	r2, #0
 80063fa:	f04f 31ff 	mov.w	r1, #4294967295
 80063fe:	480e      	ldr	r0, [pc, #56]	; (8006438 <cppLoop+0x768>)
 8006400:	f7fb fdfa 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006404:	e00f      	b.n	8006426 <cppLoop+0x756>
	case 15:

		break;

	default:
		break;
 8006406:	bf00      	nop
 8006408:	e00e      	b.n	8006428 <cppLoop+0x758>
		break;
 800640a:	bf00      	nop
 800640c:	e00c      	b.n	8006428 <cppLoop+0x758>
		break;
 800640e:	bf00      	nop
 8006410:	e00a      	b.n	8006428 <cppLoop+0x758>
		break;
 8006412:	bf00      	nop
 8006414:	e008      	b.n	8006428 <cppLoop+0x758>
		break;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <cppLoop+0x758>
		break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <cppLoop+0x758>
		break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <cppLoop+0x758>
		break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <cppLoop+0x758>
		break;
 8006426:	bf00      	nop

	}

	HAL_Delay(10);
 8006428:	200a      	movs	r0, #10
 800642a:	f000 f90d 	bl	8006648 <HAL_Delay>

}
 800642e:	bf00      	nop
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006438:	2000056c 	.word	0x2000056c
 800643c:	2001f2d8 	.word	0x2001f2d8
 8006440:	080172d0 	.word	0x080172d0
 8006444:	080172dc 	.word	0x080172dc
 8006448:	20000560 	.word	0x20000560
 800644c:	080172ec 	.word	0x080172ec
 8006450:	080172f4 	.word	0x080172f4
 8006454:	080172fc 	.word	0x080172fc
 8006458:	08017304 	.word	0x08017304

0800645c <_Z41__static_initialization_and_destruction_0ii>:
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d12e      	bne.n	80064ca <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006472:	4293      	cmp	r3, r2
 8006474:	d129      	bne.n	80064ca <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 8006476:	4817      	ldr	r0, [pc, #92]	; (80064d4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006478:	f7fb fdf6 	bl	8002068 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800647c:	4816      	ldr	r0, [pc, #88]	; (80064d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800647e:	f7fd f84f 	bl	8003520 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006482:	4816      	ldr	r0, [pc, #88]	; (80064dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006484:	f7fb fc8c 	bl	8001da0 <_ZN8JoyStickC1Ev>
Motor motor;
 8006488:	4815      	ldr	r0, [pc, #84]	; (80064e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800648a:	f7fc fa3a 	bl	8002902 <_ZN5MotorC1Ev>
IMU imu;
 800648e:	4815      	ldr	r0, [pc, #84]	; (80064e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006490:	f7fb fb5e 	bl	8001b50 <_ZN3IMUC1Ev>
Logger logger;
 8006494:	4814      	ldr	r0, [pc, #80]	; (80064e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006496:	f7fc f93f 	bl	8002718 <_ZN6LoggerC1Ev>
Encoder encoder;
 800649a:	4814      	ldr	r0, [pc, #80]	; (80064ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800649c:	f7fa fe5a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80064a0:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80064a2:	4a12      	ldr	r2, [pc, #72]	; (80064ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80064a4:	490e      	ldr	r1, [pc, #56]	; (80064e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80064a6:	4812      	ldr	r0, [pc, #72]	; (80064f0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80064a8:	f7fd f8a4 	bl	80035f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80064b0:	490b      	ldr	r1, [pc, #44]	; (80064e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80064b2:	4810      	ldr	r0, [pc, #64]	; (80064f4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80064b4:	f7fb ff6e 	bl	8002394 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80064bc:	490b      	ldr	r1, [pc, #44]	; (80064ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80064be:	480e      	ldr	r0, [pc, #56]	; (80064f8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80064c0:	f7fc fb04 	bl	8002acc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 80064c4:	480d      	ldr	r0, [pc, #52]	; (80064fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80064c6:	f7fc fc59 	bl	8002d7c <_ZN13PathFollowingC1Ev>
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000264 	.word	0x20000264
 80064d8:	2000055c 	.word	0x2000055c
 80064dc:	20000560 	.word	0x20000560
 80064e0:	20000568 	.word	0x20000568
 80064e4:	20000580 	.word	0x20000580
 80064e8:	200005a0 	.word	0x200005a0
 80064ec:	2001f1d8 	.word	0x2001f1d8
 80064f0:	2001f208 	.word	0x2001f208
 80064f4:	2001f248 	.word	0x2001f248
 80064f8:	2001f2a8 	.word	0x2001f2a8
 80064fc:	2001f2d8 	.word	0x2001f2d8

08006500 <_GLOBAL__sub_I_line_sensor>:
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
 8006504:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006508:	2001      	movs	r0, #1
 800650a:	f7ff ffa7 	bl	800645c <_Z41__static_initialization_and_destruction_0ii>
 800650e:	bd80      	pop	{r7, pc}

08006510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006548 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006516:	e003      	b.n	8006520 <LoopCopyDataInit>

08006518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800651a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800651c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800651e:	3104      	adds	r1, #4

08006520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006520:	480b      	ldr	r0, [pc, #44]	; (8006550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006528:	d3f6      	bcc.n	8006518 <CopyDataInit>
  ldr  r2, =_sbss
 800652a:	4a0b      	ldr	r2, [pc, #44]	; (8006558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800652c:	e002      	b.n	8006534 <LoopFillZerobss>

0800652e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800652e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006530:	f842 3b04 	str.w	r3, [r2], #4

08006534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006538:	d3f9      	bcc.n	800652e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800653a:	f7ff fa15 	bl	8005968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800653e:	f00b fef3 	bl	8012328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006542:	f7fd fb4d 	bl	8003be0 <main>
  bx  lr    
 8006546:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006548:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800654c:	08017910 	.word	0x08017910
  ldr  r0, =_sdata
 8006550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006554:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006558:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800655c:	2003b420 	.word	0x2003b420

08006560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006560:	e7fe      	b.n	8006560 <ADC_IRQHandler>
	...

08006564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <HAL_Init+0x40>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <HAL_Init+0x40>)
 800656e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_Init+0x40>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <HAL_Init+0x40>)
 800657a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800657e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006580:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <HAL_Init+0x40>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <HAL_Init+0x40>)
 8006586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800658c:	2003      	movs	r0, #3
 800658e:	f000 fd51 	bl	8007034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006592:	2000      	movs	r0, #0
 8006594:	f000 f808 	bl	80065a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006598:	f7fe fbd4 	bl	8004d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40023c00 	.word	0x40023c00

080065a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <HAL_InitTick+0x54>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <HAL_InitTick+0x58>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065be:	fbb3 f3f1 	udiv	r3, r3, r1
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fd69 	bl	800709e <HAL_SYSTICK_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e00e      	b.n	80065f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b0f      	cmp	r3, #15
 80065da:	d80a      	bhi.n	80065f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065dc:	2200      	movs	r2, #0
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	f000 fd31 	bl	800704a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065e8:	4a06      	ldr	r2, [pc, #24]	; (8006604 <HAL_InitTick+0x5c>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000000 	.word	0x20000000
 8006600:	20000008 	.word	0x20000008
 8006604:	20000004 	.word	0x20000004

08006608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_IncTick+0x20>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	4b06      	ldr	r3, [pc, #24]	; (800662c <HAL_IncTick+0x24>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4413      	add	r3, r2
 8006618:	4a04      	ldr	r2, [pc, #16]	; (800662c <HAL_IncTick+0x24>)
 800661a:	6013      	str	r3, [r2, #0]
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000008 	.word	0x20000008
 800662c:	200393a8 	.word	0x200393a8

08006630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return uwTick;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_GetTick+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200393a8 	.word	0x200393a8

08006648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006650:	f7ff ffee 	bl	8006630 <HAL_GetTick>
 8006654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d005      	beq.n	800666e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <HAL_Delay+0x40>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800666e:	bf00      	nop
 8006670:	f7ff ffde 	bl	8006630 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	429a      	cmp	r2, r3
 800667e:	d8f7      	bhi.n	8006670 <HAL_Delay+0x28>
  {
  }
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000008 	.word	0x20000008

0800668c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e033      	b.n	800670a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fe fb72 	bl	8004d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d118      	bne.n	80066fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066d2:	f023 0302 	bic.w	r3, r3, #2
 80066d6:	f043 0202 	orr.w	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa5a 	bl	8006b98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	f043 0201 	orr.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
 80066fa:	e001      	b.n	8006700 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_ADC_Start_DMA+0x1e>
 800672e:	2302      	movs	r3, #2
 8006730:	e0cc      	b.n	80068cc <HAL_ADC_Start_DMA+0x1b8>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	d018      	beq.n	800677a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_ADC_Start_DMA+0x1c0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5e      	ldr	r2, [pc, #376]	; (80068d8 <HAL_ADC_Start_DMA+0x1c4>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0c9a      	lsrs	r2, r3, #18
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800676c:	e002      	b.n	8006774 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	3b01      	subs	r3, #1
 8006772:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f9      	bne.n	800676e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	f040 80a0 	bne.w	80068ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c8:	d106      	bne.n	80067d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f023 0206 	bic.w	r2, r3, #6
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44
 80067d6:	e002      	b.n	80067de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067e6:	4b3d      	ldr	r3, [pc, #244]	; (80068dc <HAL_ADC_Start_DMA+0x1c8>)
 80067e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	4a3c      	ldr	r2, [pc, #240]	; (80068e0 <HAL_ADC_Start_DMA+0x1cc>)
 80067f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	4a3b      	ldr	r2, [pc, #236]	; (80068e4 <HAL_ADC_Start_DMA+0x1d0>)
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	4a3a      	ldr	r2, [pc, #232]	; (80068e8 <HAL_ADC_Start_DMA+0x1d4>)
 8006800:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800680a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800681a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800682a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	334c      	adds	r3, #76	; 0x4c
 8006836:	4619      	mov	r1, r3
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f000 fcea 	bl	8007214 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2b00      	cmp	r3, #0
 800684a:	d12a      	bne.n	80068a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a26      	ldr	r2, [pc, #152]	; (80068ec <HAL_ADC_Start_DMA+0x1d8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d015      	beq.n	8006882 <HAL_ADC_Start_DMA+0x16e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <HAL_ADC_Start_DMA+0x1dc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d105      	bne.n	800686c <HAL_ADC_Start_DMA+0x158>
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <HAL_ADC_Start_DMA+0x1c8>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <HAL_ADC_Start_DMA+0x1e0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d129      	bne.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
 8006876:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_ADC_Start_DMA+0x1c8>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d823      	bhi.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11c      	bne.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	e013      	b.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a11      	ldr	r2, [pc, #68]	; (80068ec <HAL_ADC_Start_DMA+0x1d8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10e      	bne.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000000 	.word	0x20000000
 80068d8:	431bde83 	.word	0x431bde83
 80068dc:	40012300 	.word	0x40012300
 80068e0:	08006d91 	.word	0x08006d91
 80068e4:	08006e4b 	.word	0x08006e4b
 80068e8:	08006e67 	.word	0x08006e67
 80068ec:	40012000 	.word	0x40012000
 80068f0:	40012100 	.word	0x40012100
 80068f4:	40012200 	.word	0x40012200

080068f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x1c>
 800694c:	2302      	movs	r3, #2
 800694e:	e113      	b.n	8006b78 <HAL_ADC_ConfigChannel+0x244>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b09      	cmp	r3, #9
 800695e:	d925      	bls.n	80069ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68d9      	ldr	r1, [r3, #12]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	4613      	mov	r3, r2
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	4413      	add	r3, r2
 8006974:	3b1e      	subs	r3, #30
 8006976:	2207      	movs	r2, #7
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	43da      	mvns	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	400a      	ands	r2, r1
 8006984:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68d9      	ldr	r1, [r3, #12]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	4618      	mov	r0, r3
 8006998:	4603      	mov	r3, r0
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4403      	add	r3, r0
 800699e:	3b1e      	subs	r3, #30
 80069a0:	409a      	lsls	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e022      	b.n	80069f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6919      	ldr	r1, [r3, #16]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	4613      	mov	r3, r2
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4413      	add	r3, r2
 80069c0:	2207      	movs	r2, #7
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43da      	mvns	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	400a      	ands	r2, r1
 80069ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6919      	ldr	r1, [r3, #16]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4618      	mov	r0, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	4403      	add	r3, r0
 80069e8:	409a      	lsls	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d824      	bhi.n	8006a44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	3b05      	subs	r3, #5
 8006a0c:	221f      	movs	r2, #31
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43da      	mvns	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	400a      	ands	r2, r1
 8006a1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4618      	mov	r0, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	3b05      	subs	r3, #5
 8006a36:	fa00 f203 	lsl.w	r2, r0, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	635a      	str	r2, [r3, #52]	; 0x34
 8006a42:	e04c      	b.n	8006ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d824      	bhi.n	8006a96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3b23      	subs	r3, #35	; 0x23
 8006a5e:	221f      	movs	r2, #31
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	43da      	mvns	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	3b23      	subs	r3, #35	; 0x23
 8006a88:	fa00 f203 	lsl.w	r2, r0, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
 8006a94:	e023      	b.n	8006ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3b41      	subs	r3, #65	; 0x41
 8006aa8:	221f      	movs	r2, #31
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	43da      	mvns	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	3b41      	subs	r3, #65	; 0x41
 8006ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ade:	4b29      	ldr	r3, [pc, #164]	; (8006b84 <HAL_ADC_ConfigChannel+0x250>)
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a28      	ldr	r2, [pc, #160]	; (8006b88 <HAL_ADC_ConfigChannel+0x254>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10f      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x1d8>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b12      	cmp	r3, #18
 8006af2:	d10b      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1d      	ldr	r2, [pc, #116]	; (8006b88 <HAL_ADC_ConfigChannel+0x254>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d12b      	bne.n	8006b6e <HAL_ADC_ConfigChannel+0x23a>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1c      	ldr	r2, [pc, #112]	; (8006b8c <HAL_ADC_ConfigChannel+0x258>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <HAL_ADC_ConfigChannel+0x1f4>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b11      	cmp	r3, #17
 8006b26:	d122      	bne.n	8006b6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a11      	ldr	r2, [pc, #68]	; (8006b8c <HAL_ADC_ConfigChannel+0x258>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d111      	bne.n	8006b6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_ADC_ConfigChannel+0x25c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <HAL_ADC_ConfigChannel+0x260>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	0c9a      	lsrs	r2, r3, #18
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b60:	e002      	b.n	8006b68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f9      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40012300 	.word	0x40012300
 8006b88:	40012000 	.word	0x40012000
 8006b8c:	10000012 	.word	0x10000012
 8006b90:	20000000 	.word	0x20000000
 8006b94:	431bde83 	.word	0x431bde83

08006b98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ba0:	4b79      	ldr	r3, [pc, #484]	; (8006d88 <ADC_Init+0x1f0>)
 8006ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6859      	ldr	r1, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	021a      	lsls	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6899      	ldr	r1, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	4a58      	ldr	r2, [pc, #352]	; (8006d8c <ADC_Init+0x1f4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6899      	ldr	r1, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6899      	ldr	r1, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	e00f      	b.n	8006c96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0202 	bic.w	r2, r2, #2
 8006ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6899      	ldr	r1, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7e1b      	ldrb	r3, [r3, #24]
 8006cb0:	005a      	lsls	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6859      	ldr	r1, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	035a      	lsls	r2, r3, #13
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
 8006cfa:	e007      	b.n	8006d0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	051a      	lsls	r2, r3, #20
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d4e:	025a      	lsls	r2, r3, #9
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6899      	ldr	r1, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	029a      	lsls	r2, r3, #10
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40012300 	.word	0x40012300
 8006d8c:	0f000001 	.word	0x0f000001

08006d90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d13c      	bne.n	8006e24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d12b      	bne.n	8006e1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d127      	bne.n	8006e1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d119      	bne.n	8006e1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0220 	bic.w	r2, r2, #32
 8006df6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d105      	bne.n	8006e1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	f043 0201 	orr.w	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff fd6b 	bl	80068f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e22:	e00e      	b.n	8006e42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fd75 	bl	8006920 <HAL_ADC_ErrorCallback>
}
 8006e36:	e004      	b.n	8006e42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff fd57 	bl	800690c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2240      	movs	r2, #64	; 0x40
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff fd4a 	bl	8006920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <__NVIC_SetPriorityGrouping>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ec6:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	60d3      	str	r3, [r2, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <__NVIC_GetPriorityGrouping>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	f003 0307 	and.w	r3, r3, #7
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	e000ed00 	.word	0xe000ed00

08006ef8 <__NVIC_EnableIRQ>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	db0b      	blt.n	8006f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	f003 021f 	and.w	r2, r3, #31
 8006f10:	4907      	ldr	r1, [pc, #28]	; (8006f30 <__NVIC_EnableIRQ+0x38>)
 8006f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	2001      	movs	r0, #1
 8006f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	e000e100 	.word	0xe000e100

08006f34 <__NVIC_SetPriority>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	db0a      	blt.n	8006f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	490c      	ldr	r1, [pc, #48]	; (8006f80 <__NVIC_SetPriority+0x4c>)
 8006f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f52:	0112      	lsls	r2, r2, #4
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	440b      	add	r3, r1
 8006f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f5c:	e00a      	b.n	8006f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4908      	ldr	r1, [pc, #32]	; (8006f84 <__NVIC_SetPriority+0x50>)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	3b04      	subs	r3, #4
 8006f6c:	0112      	lsls	r2, r2, #4
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	440b      	add	r3, r1
 8006f72:	761a      	strb	r2, [r3, #24]
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	e000e100 	.word	0xe000e100
 8006f84:	e000ed00 	.word	0xe000ed00

08006f88 <NVIC_EncodePriority>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	; 0x24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f1c3 0307 	rsb	r3, r3, #7
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	bf28      	it	cs
 8006fa6:	2304      	movcs	r3, #4
 8006fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3304      	adds	r3, #4
 8006fae:	2b06      	cmp	r3, #6
 8006fb0:	d902      	bls.n	8006fb8 <NVIC_EncodePriority+0x30>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3b03      	subs	r3, #3
 8006fb6:	e000      	b.n	8006fba <NVIC_EncodePriority+0x32>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43da      	mvns	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	401a      	ands	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fda:	43d9      	mvns	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fe0:	4313      	orrs	r3, r2
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3724      	adds	r7, #36	; 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <SysTick_Config>:
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007000:	d301      	bcc.n	8007006 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007002:	2301      	movs	r3, #1
 8007004:	e00f      	b.n	8007026 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007006:	4a0a      	ldr	r2, [pc, #40]	; (8007030 <SysTick_Config+0x40>)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3b01      	subs	r3, #1
 800700c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800700e:	210f      	movs	r1, #15
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	f7ff ff8e 	bl	8006f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <SysTick_Config+0x40>)
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800701e:	4b04      	ldr	r3, [pc, #16]	; (8007030 <SysTick_Config+0x40>)
 8007020:	2207      	movs	r2, #7
 8007022:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	e000e010 	.word	0xe000e010

08007034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff ff29 	bl	8006e94 <__NVIC_SetPriorityGrouping>
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	4603      	mov	r3, r0
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800705c:	f7ff ff3e 	bl	8006edc <__NVIC_GetPriorityGrouping>
 8007060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f7ff ff8e 	bl	8006f88 <NVIC_EncodePriority>
 800706c:	4602      	mov	r2, r0
 800706e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff ff5d 	bl	8006f34 <__NVIC_SetPriority>
}
 800707a:	bf00      	nop
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	4603      	mov	r3, r0
 800708a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800708c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ff31 	bl	8006ef8 <__NVIC_EnableIRQ>
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff ffa2 	bl	8006ff0 <SysTick_Config>
 80070ac:	4603      	mov	r3, r0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070c4:	f7ff fab4 	bl	8006630 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e099      	b.n	8007208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070f4:	e00f      	b.n	8007116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070f6:	f7ff fa9b 	bl	8006630 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b05      	cmp	r3, #5
 8007102:	d908      	bls.n	8007116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e078      	b.n	8007208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e8      	bne.n	80070f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4b38      	ldr	r3, [pc, #224]	; (8007210 <HAL_DMA_Init+0x158>)
 8007130:	4013      	ands	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800714e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800715a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b04      	cmp	r3, #4
 800716e:	d107      	bne.n	8007180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	4313      	orrs	r3, r2
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d117      	bne.n	80071da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00e      	beq.n	80071da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa9d 	bl	80076fc <DMA_CheckFifoParam>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2240      	movs	r2, #64	; 0x40
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80071d6:	2301      	movs	r3, #1
 80071d8:	e016      	b.n	8007208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa54 	bl	8007690 <DMA_CalcBaseAndBitshift>
 80071e8:	4603      	mov	r3, r0
 80071ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f0:	223f      	movs	r2, #63	; 0x3f
 80071f2:	409a      	lsls	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	f010803f 	.word	0xf010803f

08007214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_DMA_Start_IT+0x26>
 8007236:	2302      	movs	r3, #2
 8007238:	e040      	b.n	80072bc <HAL_DMA_Start_IT+0xa8>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b01      	cmp	r3, #1
 800724c:	d12f      	bne.n	80072ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f9e6 	bl	8007634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	223f      	movs	r2, #63	; 0x3f
 800726e:	409a      	lsls	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0216 	orr.w	r2, r2, #22
 8007282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	e005      	b.n	80072ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072b6:	2302      	movs	r3, #2
 80072b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d004      	beq.n	80072e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e00c      	b.n	80072fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2205      	movs	r2, #5
 80072e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007314:	4b92      	ldr	r3, [pc, #584]	; (8007560 <HAL_DMA_IRQHandler+0x258>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a92      	ldr	r2, [pc, #584]	; (8007564 <HAL_DMA_IRQHandler+0x25c>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	0a9b      	lsrs	r3, r3, #10
 8007320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	2208      	movs	r2, #8
 8007334:	409a      	lsls	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01a      	beq.n	8007374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d013      	beq.n	8007374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0204 	bic.w	r2, r2, #4
 800735a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	2208      	movs	r2, #8
 8007362:	409a      	lsls	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	f043 0201 	orr.w	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007378:	2201      	movs	r2, #1
 800737a:	409a      	lsls	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d012      	beq.n	80073aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	2201      	movs	r2, #1
 8007398:	409a      	lsls	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f043 0202 	orr.w	r2, r3, #2
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ae:	2204      	movs	r2, #4
 80073b0:	409a      	lsls	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d012      	beq.n	80073e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	2204      	movs	r2, #4
 80073ce:	409a      	lsls	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	f043 0204 	orr.w	r2, r3, #4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e4:	2210      	movs	r2, #16
 80073e6:	409a      	lsls	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d043      	beq.n	8007478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d03c      	beq.n	8007478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	2210      	movs	r2, #16
 8007404:	409a      	lsls	r2, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d018      	beq.n	800744a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d108      	bne.n	8007438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d024      	beq.n	8007478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
 8007436:	e01f      	b.n	8007478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
 8007448:	e016      	b.n	8007478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d107      	bne.n	8007468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0208 	bic.w	r2, r2, #8
 8007466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	2220      	movs	r2, #32
 800747e:	409a      	lsls	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 808e 	beq.w	80075a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8086 	beq.w	80075a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749e:	2220      	movs	r2, #32
 80074a0:	409a      	lsls	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b05      	cmp	r3, #5
 80074b0:	d136      	bne.n	8007520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0216 	bic.w	r2, r2, #22
 80074c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695a      	ldr	r2, [r3, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_DMA_IRQHandler+0x1da>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0208 	bic.w	r2, r2, #8
 80074f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f6:	223f      	movs	r2, #63	; 0x3f
 80074f8:	409a      	lsls	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007512:	2b00      	cmp	r3, #0
 8007514:	d07d      	beq.n	8007612 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
        }
        return;
 800751e:	e078      	b.n	8007612 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01c      	beq.n	8007568 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007540:	2b00      	cmp	r3, #0
 8007542:	d030      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
 800754c:	e02b      	b.n	80075a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d027      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	e022      	b.n	80075a6 <HAL_DMA_IRQHandler+0x29e>
 8007560:	20000000 	.word	0x20000000
 8007564:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0210 	bic.w	r2, r2, #16
 8007584:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d032      	beq.n	8007614 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d022      	beq.n	8007600 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2205      	movs	r2, #5
 80075be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d307      	bcc.n	80075ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f2      	bne.n	80075d2 <HAL_DMA_IRQHandler+0x2ca>
 80075ec:	e000      	b.n	80075f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80075ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
 8007610:	e000      	b.n	8007614 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007612:	bf00      	nop
    }
  }
}
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop

0800761c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d108      	bne.n	8007674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007672:	e007      	b.n	8007684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	60da      	str	r2, [r3, #12]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	3b10      	subs	r3, #16
 80076a0:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <DMA_CalcBaseAndBitshift+0x64>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	091b      	lsrs	r3, r3, #4
 80076a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076aa:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <DMA_CalcBaseAndBitshift+0x68>)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d909      	bls.n	80076d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	659a      	str	r2, [r3, #88]	; 0x58
 80076d0:	e007      	b.n	80076e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	aaaaaaab 	.word	0xaaaaaaab
 80076f8:	08017340 	.word	0x08017340

080076fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d11f      	bne.n	8007756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d855      	bhi.n	80077c8 <DMA_CheckFifoParam+0xcc>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <DMA_CheckFifoParam+0x28>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007735 	.word	0x08007735
 8007728:	08007747 	.word	0x08007747
 800772c:	08007735 	.word	0x08007735
 8007730:	080077c9 	.word	0x080077c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d045      	beq.n	80077cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007744:	e042      	b.n	80077cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800774e:	d13f      	bne.n	80077d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007754:	e03c      	b.n	80077d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775e:	d121      	bne.n	80077a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b03      	cmp	r3, #3
 8007764:	d836      	bhi.n	80077d4 <DMA_CheckFifoParam+0xd8>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <DMA_CheckFifoParam+0x70>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	0800777d 	.word	0x0800777d
 8007770:	08007783 	.word	0x08007783
 8007774:	0800777d 	.word	0x0800777d
 8007778:	08007795 	.word	0x08007795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
      break;
 8007780:	e02f      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d024      	beq.n	80077d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007792:	e021      	b.n	80077d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800779c:	d11e      	bne.n	80077dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077a2:	e01b      	b.n	80077dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d902      	bls.n	80077b0 <DMA_CheckFifoParam+0xb4>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d003      	beq.n	80077b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077ae:	e018      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
      break;
 80077b4:	e015      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00e      	beq.n	80077e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	73fb      	strb	r3, [r7, #15]
      break;
 80077c6:	e00b      	b.n	80077e0 <DMA_CheckFifoParam+0xe4>
      break;
 80077c8:	bf00      	nop
 80077ca:	e00a      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;
 80077cc:	bf00      	nop
 80077ce:	e008      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;
 80077d0:	bf00      	nop
 80077d2:	e006      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;
 80077d4:	bf00      	nop
 80077d6:	e004      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;
 80077d8:	bf00      	nop
 80077da:	e002      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80077dc:	bf00      	nop
 80077de:	e000      	b.n	80077e2 <DMA_CheckFifoParam+0xe6>
      break;
 80077e0:	bf00      	nop
    }
  } 
  
  return status; 
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	e177      	b.n	8007afc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800780c:	2201      	movs	r2, #1
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4013      	ands	r3, r2
 800781e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	429a      	cmp	r2, r3
 8007826:	f040 8166 	bne.w	8007af6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d00b      	beq.n	800784a <HAL_GPIO_Init+0x5a>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d007      	beq.n	800784a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800783e:	2b11      	cmp	r3, #17
 8007840:	d003      	beq.n	800784a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b12      	cmp	r3, #18
 8007848:	d130      	bne.n	80078ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	2203      	movs	r2, #3
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4313      	orrs	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007880:	2201      	movs	r2, #1
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	f003 0201 	and.w	r2, r3, #1
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	2203      	movs	r2, #3
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d003      	beq.n	80078ec <HAL_GPIO_Init+0xfc>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b12      	cmp	r3, #18
 80078ea:	d123      	bne.n	8007934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	08da      	lsrs	r2, r3, #3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3208      	adds	r2, #8
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	220f      	movs	r2, #15
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	43db      	mvns	r3, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	4313      	orrs	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	08da      	lsrs	r2, r3, #3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3208      	adds	r2, #8
 800792e:	69b9      	ldr	r1, [r7, #24]
 8007930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	2203      	movs	r2, #3
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	43db      	mvns	r3, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4013      	ands	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f003 0203 	and.w	r2, r3, #3
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	4313      	orrs	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80c0 	beq.w	8007af6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	4b65      	ldr	r3, [pc, #404]	; (8007b10 <HAL_GPIO_Init+0x320>)
 800797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797e:	4a64      	ldr	r2, [pc, #400]	; (8007b10 <HAL_GPIO_Init+0x320>)
 8007980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007984:	6453      	str	r3, [r2, #68]	; 0x44
 8007986:	4b62      	ldr	r3, [pc, #392]	; (8007b10 <HAL_GPIO_Init+0x320>)
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007992:	4a60      	ldr	r2, [pc, #384]	; (8007b14 <HAL_GPIO_Init+0x324>)
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	089b      	lsrs	r3, r3, #2
 8007998:	3302      	adds	r3, #2
 800799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800799e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	220f      	movs	r2, #15
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43db      	mvns	r3, r3
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	4013      	ands	r3, r2
 80079b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a57      	ldr	r2, [pc, #348]	; (8007b18 <HAL_GPIO_Init+0x328>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d037      	beq.n	8007a2e <HAL_GPIO_Init+0x23e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a56      	ldr	r2, [pc, #344]	; (8007b1c <HAL_GPIO_Init+0x32c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_GPIO_Init+0x23a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a55      	ldr	r2, [pc, #340]	; (8007b20 <HAL_GPIO_Init+0x330>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d02b      	beq.n	8007a26 <HAL_GPIO_Init+0x236>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a54      	ldr	r2, [pc, #336]	; (8007b24 <HAL_GPIO_Init+0x334>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d025      	beq.n	8007a22 <HAL_GPIO_Init+0x232>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a53      	ldr	r2, [pc, #332]	; (8007b28 <HAL_GPIO_Init+0x338>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01f      	beq.n	8007a1e <HAL_GPIO_Init+0x22e>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a52      	ldr	r2, [pc, #328]	; (8007b2c <HAL_GPIO_Init+0x33c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d019      	beq.n	8007a1a <HAL_GPIO_Init+0x22a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a51      	ldr	r2, [pc, #324]	; (8007b30 <HAL_GPIO_Init+0x340>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <HAL_GPIO_Init+0x226>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a50      	ldr	r2, [pc, #320]	; (8007b34 <HAL_GPIO_Init+0x344>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00d      	beq.n	8007a12 <HAL_GPIO_Init+0x222>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a4f      	ldr	r2, [pc, #316]	; (8007b38 <HAL_GPIO_Init+0x348>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <HAL_GPIO_Init+0x21e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a4e      	ldr	r2, [pc, #312]	; (8007b3c <HAL_GPIO_Init+0x34c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d101      	bne.n	8007a0a <HAL_GPIO_Init+0x21a>
 8007a06:	2309      	movs	r3, #9
 8007a08:	e012      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e010      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	e00e      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a12:	2307      	movs	r3, #7
 8007a14:	e00c      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a16:	2306      	movs	r3, #6
 8007a18:	e00a      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a1a:	2305      	movs	r3, #5
 8007a1c:	e008      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a1e:	2304      	movs	r3, #4
 8007a20:	e006      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a22:	2303      	movs	r3, #3
 8007a24:	e004      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e002      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_GPIO_Init+0x240>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	f002 0203 	and.w	r2, r2, #3
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	4093      	lsls	r3, r2
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a40:	4934      	ldr	r1, [pc, #208]	; (8007b14 <HAL_GPIO_Init+0x324>)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	3302      	adds	r3, #2
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a4e:	4b3c      	ldr	r3, [pc, #240]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a72:	4a33      	ldr	r2, [pc, #204]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a78:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007acc:	4b1c      	ldr	r3, [pc, #112]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007af0:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <HAL_GPIO_Init+0x350>)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	f67f ae84 	bls.w	800780c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b04:	bf00      	nop
 8007b06:	3724      	adds	r7, #36	; 0x24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40023800 	.word	0x40023800
 8007b14:	40013800 	.word	0x40013800
 8007b18:	40020000 	.word	0x40020000
 8007b1c:	40020400 	.word	0x40020400
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020c00 	.word	0x40020c00
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	40021400 	.word	0x40021400
 8007b30:	40021800 	.word	0x40021800
 8007b34:	40021c00 	.word	0x40021c00
 8007b38:	40022000 	.word	0x40022000
 8007b3c:	40022400 	.word	0x40022400
 8007b40:	40013c00 	.word	0x40013c00

08007b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	887b      	ldrh	r3, [r7, #2]
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
 8007b60:	e001      	b.n	8007b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
 8007b80:	4613      	mov	r3, r2
 8007b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b84:	787b      	ldrb	r3, [r7, #1]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b8a:	887a      	ldrh	r2, [r7, #2]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b90:	e003      	b.n	8007b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b92:	887b      	ldrh	r3, [r7, #2]
 8007b94:	041a      	lsls	r2, r3, #16
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	619a      	str	r2, [r3, #24]
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bbe:	4a05      	ldr	r2, [pc, #20]	; (8007bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb ff8d 	bl	8003ae6 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40013c00 	.word	0x40013c00

08007bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e11f      	b.n	8007e2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fd f97a 	bl	8004ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	; 0x24
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0201 	bic.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c3c:	f001 f96e 	bl	8008f1c <HAL_RCC_GetPCLK1Freq>
 8007c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4a7b      	ldr	r2, [pc, #492]	; (8007e34 <HAL_I2C_Init+0x25c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d807      	bhi.n	8007c5c <HAL_I2C_Init+0x84>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a7a      	ldr	r2, [pc, #488]	; (8007e38 <HAL_I2C_Init+0x260>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bf94      	ite	ls
 8007c54:	2301      	movls	r3, #1
 8007c56:	2300      	movhi	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e006      	b.n	8007c6a <HAL_I2C_Init+0x92>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <HAL_I2C_Init+0x264>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bf94      	ite	ls
 8007c64:	2301      	movls	r3, #1
 8007c66:	2300      	movhi	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0db      	b.n	8007e2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a72      	ldr	r2, [pc, #456]	; (8007e40 <HAL_I2C_Init+0x268>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	0c9b      	lsrs	r3, r3, #18
 8007c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a64      	ldr	r2, [pc, #400]	; (8007e34 <HAL_I2C_Init+0x25c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d802      	bhi.n	8007cac <HAL_I2C_Init+0xd4>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	e009      	b.n	8007cc0 <HAL_I2C_Init+0xe8>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	4a63      	ldr	r2, [pc, #396]	; (8007e44 <HAL_I2C_Init+0x26c>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	099b      	lsrs	r3, r3, #6
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	4956      	ldr	r1, [pc, #344]	; (8007e34 <HAL_I2C_Init+0x25c>)
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	d80d      	bhi.n	8007cfc <HAL_I2C_Init+0x124>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	1e59      	subs	r1, r3, #1
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cee:	3301      	adds	r3, #1
 8007cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	bf38      	it	cc
 8007cf8:	2304      	movcc	r3, #4
 8007cfa:	e04f      	b.n	8007d9c <HAL_I2C_Init+0x1c4>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d111      	bne.n	8007d28 <HAL_I2C_Init+0x150>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	1e58      	subs	r0, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	440b      	add	r3, r1
 8007d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d16:	3301      	adds	r3, #1
 8007d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e012      	b.n	8007d4e <HAL_I2C_Init+0x176>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	1e58      	subs	r0, r3, #1
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6859      	ldr	r1, [r3, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	0099      	lsls	r1, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d3e:	3301      	adds	r3, #1
 8007d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_I2C_Init+0x17e>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e022      	b.n	8007d9c <HAL_I2C_Init+0x1c4>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10e      	bne.n	8007d7c <HAL_I2C_Init+0x1a4>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1e58      	subs	r0, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6859      	ldr	r1, [r3, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	440b      	add	r3, r1
 8007d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d70:	3301      	adds	r3, #1
 8007d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7a:	e00f      	b.n	8007d9c <HAL_I2C_Init+0x1c4>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1e58      	subs	r0, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	0099      	lsls	r1, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d92:	3301      	adds	r3, #1
 8007d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	6809      	ldr	r1, [r1, #0]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69da      	ldr	r2, [r3, #28]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6911      	ldr	r1, [r2, #16]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	68d2      	ldr	r2, [r2, #12]
 8007dd6:	4311      	orrs	r1, r2
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	000186a0 	.word	0x000186a0
 8007e38:	001e847f 	.word	0x001e847f
 8007e3c:	003d08ff 	.word	0x003d08ff
 8007e40:	431bde83 	.word	0x431bde83
 8007e44:	10624dd3 	.word	0x10624dd3

08007e48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	461a      	mov	r2, r3
 8007e54:	460b      	mov	r3, r1
 8007e56:	817b      	strh	r3, [r7, #10]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e5c:	f7fe fbe8 	bl	8006630 <HAL_GetTick>
 8007e60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	f040 80e0 	bne.w	8008030 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2319      	movs	r3, #25
 8007e76:	2201      	movs	r2, #1
 8007e78:	4970      	ldr	r1, [pc, #448]	; (800803c <HAL_I2C_Master_Transmit+0x1f4>)
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fc58 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e0d3      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_I2C_Master_Transmit+0x50>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0cc      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d007      	beq.n	8007ebe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2221      	movs	r2, #33	; 0x21
 8007ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	893a      	ldrh	r2, [r7, #8]
 8007eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4a50      	ldr	r2, [pc, #320]	; (8008040 <HAL_I2C_Master_Transmit+0x1f8>)
 8007efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f00:	8979      	ldrh	r1, [r7, #10]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6a3a      	ldr	r2, [r7, #32]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fac2 	bl	8008490 <I2C_MasterRequestWrite>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e08d      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007f2c:	e066      	b.n	8007ffc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	6a39      	ldr	r1, [r7, #32]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fcd2 	bl	80088dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d107      	bne.n	8007f56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e06b      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d11b      	bne.n	8007fd0 <HAL_I2C_Master_Transmit+0x188>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d017      	beq.n	8007fd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	6a39      	ldr	r1, [r7, #32]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fcc2 	bl	800895e <I2C_WaitOnBTFFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d107      	bne.n	8007ff8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e01a      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008000:	2b00      	cmp	r3, #0
 8008002:	d194      	bne.n	8007f2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e000      	b.n	8008032 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008030:	2302      	movs	r3, #2
  }
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	00100002 	.word	0x00100002
 8008040:	ffff0000 	.word	0xffff0000

08008044 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08c      	sub	sp, #48	; 0x30
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	461a      	mov	r2, r3
 8008050:	460b      	mov	r3, r1
 8008052:	817b      	strh	r3, [r7, #10]
 8008054:	4613      	mov	r3, r2
 8008056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008058:	f7fe faea 	bl	8006630 <HAL_GetTick>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b20      	cmp	r3, #32
 8008068:	f040 820b 	bne.w	8008482 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2319      	movs	r3, #25
 8008072:	2201      	movs	r2, #1
 8008074:	497c      	ldr	r1, [pc, #496]	; (8008268 <HAL_I2C_Master_Receive+0x224>)
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fb5a 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
 8008084:	e1fe      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_I2C_Master_Receive+0x50>
 8008090:	2302      	movs	r3, #2
 8008092:	e1f7      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d007      	beq.n	80080ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2222      	movs	r2, #34	; 0x22
 80080ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2210      	movs	r2, #16
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	893a      	ldrh	r2, [r7, #8]
 80080ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a5c      	ldr	r2, [pc, #368]	; (800826c <HAL_I2C_Master_Receive+0x228>)
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80080fc:	8979      	ldrh	r1, [r7, #10]
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa46 	bl	8008594 <I2C_MasterRequestRead>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e1b8      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d113      	bne.n	8008142 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811a:	2300      	movs	r3, #0
 800811c:	623b      	str	r3, [r7, #32]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	623b      	str	r3, [r7, #32]
 800812e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e18c      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008146:	2b01      	cmp	r3, #1
 8008148:	d11b      	bne.n	8008182 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e16c      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008186:	2b02      	cmp	r3, #2
 8008188:	d11b      	bne.n	80081c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008198:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081aa:	2300      	movs	r3, #0
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	e14c      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80081e8:	e138      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	f200 80f1 	bhi.w	80083d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d123      	bne.n	8008244 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fbed 	bl	80089e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e139      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008242:	e10b      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008248:	2b02      	cmp	r3, #2
 800824a:	d14e      	bne.n	80082ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2200      	movs	r2, #0
 8008254:	4906      	ldr	r1, [pc, #24]	; (8008270 <HAL_I2C_Master_Receive+0x22c>)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 fa6a 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d008      	beq.n	8008274 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e10e      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
 8008266:	bf00      	nop
 8008268:	00100002 	.word	0x00100002
 800826c:	ffff0000 	.word	0xffff0000
 8008270:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691a      	ldr	r2, [r3, #16]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082e8:	e0b8      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2200      	movs	r2, #0
 80082f2:	4966      	ldr	r1, [pc, #408]	; (800848c <HAL_I2C_Master_Receive+0x448>)
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fa1b 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e0bf      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833c:	b29b      	uxth	r3, r3
 800833e:	3b01      	subs	r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	2200      	movs	r2, #0
 800834e:	494f      	ldr	r1, [pc, #316]	; (800848c <HAL_I2C_Master_Receive+0x448>)
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f9ed 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e091      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083d4:	e042      	b.n	800845c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fb00 	bl	80089e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e04c      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b04      	cmp	r3, #4
 8008428:	d118      	bne.n	800845c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008460:	2b00      	cmp	r3, #0
 8008462:	f47f aec2 	bne.w	80081ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e000      	b.n	8008484 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008482:	2302      	movs	r3, #2
  }
}
 8008484:	4618      	mov	r0, r3
 8008486:	3728      	adds	r7, #40	; 0x28
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	00010004 	.word	0x00010004

08008490 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	460b      	mov	r3, r1
 800849e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d006      	beq.n	80084ba <I2C_MasterRequestWrite+0x2a>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d003      	beq.n	80084ba <I2C_MasterRequestWrite+0x2a>
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084b8:	d108      	bne.n	80084cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e00b      	b.n	80084e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	2b12      	cmp	r3, #18
 80084d2:	d107      	bne.n	80084e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f91d 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00d      	beq.n	8008518 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850a:	d103      	bne.n	8008514 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e035      	b.n	8008584 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008520:	d108      	bne.n	8008534 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008522:	897b      	ldrh	r3, [r7, #10]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008530:	611a      	str	r2, [r3, #16]
 8008532:	e01b      	b.n	800856c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008534:	897b      	ldrh	r3, [r7, #10]
 8008536:	11db      	asrs	r3, r3, #7
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0306 	and.w	r3, r3, #6
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f063 030f 	orn	r3, r3, #15
 8008544:	b2da      	uxtb	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	490e      	ldr	r1, [pc, #56]	; (800858c <I2C_MasterRequestWrite+0xfc>)
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f943 	bl	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e010      	b.n	8008584 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008562:	897b      	ldrh	r3, [r7, #10]
 8008564:	b2da      	uxtb	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	4907      	ldr	r1, [pc, #28]	; (8008590 <I2C_MasterRequestWrite+0x100>)
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f933 	bl	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	00010008 	.word	0x00010008
 8008590:	00010002 	.word	0x00010002

08008594 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	460b      	mov	r3, r1
 80085a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d006      	beq.n	80085ce <I2C_MasterRequestRead+0x3a>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d003      	beq.n	80085ce <I2C_MasterRequestRead+0x3a>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085cc:	d108      	bne.n	80085e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e00b      	b.n	80085f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e4:	2b11      	cmp	r3, #17
 80085e6:	d107      	bne.n	80085f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f893 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861e:	d103      	bne.n	8008628 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e079      	b.n	8008720 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008634:	d108      	bne.n	8008648 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008636:	897b      	ldrh	r3, [r7, #10]
 8008638:	b2db      	uxtb	r3, r3
 800863a:	f043 0301 	orr.w	r3, r3, #1
 800863e:	b2da      	uxtb	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	611a      	str	r2, [r3, #16]
 8008646:	e05f      	b.n	8008708 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008648:	897b      	ldrh	r3, [r7, #10]
 800864a:	11db      	asrs	r3, r3, #7
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0306 	and.w	r3, r3, #6
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f063 030f 	orn	r3, r3, #15
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4930      	ldr	r1, [pc, #192]	; (8008728 <I2C_MasterRequestRead+0x194>)
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f8b9 	bl	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e054      	b.n	8008720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008676:	897b      	ldrh	r3, [r7, #10]
 8008678:	b2da      	uxtb	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	4929      	ldr	r1, [pc, #164]	; (800872c <I2C_MasterRequestRead+0x198>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f8a9 	bl	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e044      	b.n	8008720 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f831 	bl	8008730 <I2C_WaitOnFlagUntilTimeout>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00d      	beq.n	80086f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e2:	d103      	bne.n	80086ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e017      	b.n	8008720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80086f0:	897b      	ldrh	r3, [r7, #10]
 80086f2:	11db      	asrs	r3, r3, #7
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0306 	and.w	r3, r3, #6
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f063 030e 	orn	r3, r3, #14
 8008700:	b2da      	uxtb	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	4907      	ldr	r1, [pc, #28]	; (800872c <I2C_MasterRequestRead+0x198>)
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 f865 	bl	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	00010008 	.word	0x00010008
 800872c:	00010002 	.word	0x00010002

08008730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008740:	e025      	b.n	800878e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d021      	beq.n	800878e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874a:	f7fd ff71 	bl	8006630 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d116      	bne.n	800878e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f043 0220 	orr.w	r2, r3, #32
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e023      	b.n	80087d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d10d      	bne.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	43da      	mvns	r2, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	e00c      	b.n	80087ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	43da      	mvns	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4013      	ands	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bf0c      	ite	eq
 80087c6:	2301      	moveq	r3, #1
 80087c8:	2300      	movne	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d0b6      	beq.n	8008742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087ec:	e051      	b.n	8008892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fc:	d123      	bne.n	8008846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800880c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f043 0204 	orr.w	r2, r3, #4
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e046      	b.n	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	d021      	beq.n	8008892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884e:	f7fd feef 	bl	8006630 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d302      	bcc.n	8008864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d116      	bne.n	8008892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f043 0220 	orr.w	r2, r3, #32
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e020      	b.n	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10c      	bne.n	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	43da      	mvns	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	e00b      	b.n	80088ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	43da      	mvns	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d18d      	bne.n	80087ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088e8:	e02d      	b.n	8008946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f8ce 	bl	8008a8c <I2C_IsAcknowledgeFailed>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e02d      	b.n	8008956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d021      	beq.n	8008946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008902:	f7fd fe95 	bl	8006630 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d116      	bne.n	8008946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2220      	movs	r2, #32
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f043 0220 	orr.w	r2, r3, #32
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e007      	b.n	8008956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008950:	2b80      	cmp	r3, #128	; 0x80
 8008952:	d1ca      	bne.n	80088ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800896a:	e02d      	b.n	80089c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f88d 	bl	8008a8c <I2C_IsAcknowledgeFailed>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e02d      	b.n	80089d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d021      	beq.n	80089c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008984:	f7fd fe54 	bl	8006630 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	d302      	bcc.n	800899a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d116      	bne.n	80089c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	f043 0220 	orr.w	r2, r3, #32
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e007      	b.n	80089d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d1ca      	bne.n	800896c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089ec:	e042      	b.n	8008a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d119      	bne.n	8008a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e029      	b.n	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a30:	f7fd fdfe 	bl	8006630 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d116      	bne.n	8008a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e007      	b.n	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	d1b5      	bne.n	80089ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa2:	d11b      	bne.n	8008adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	f043 0204 	orr.w	r2, r3, #4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
	...

08008aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008af6:	2300      	movs	r3, #0
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8008b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b04:	6413      	str	r3, [r2, #64]	; 0x40
 8008b06:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008b12:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <HAL_PWREx_EnableOverDrive+0x94>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b18:	f7fd fd8a 	bl	8006630 <HAL_GetTick>
 8008b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b1e:	e009      	b.n	8008b34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b20:	f7fd fd86 	bl	8006630 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b2e:	d901      	bls.n	8008b34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e01f      	b.n	8008b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b34:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b40:	d1ee      	bne.n	8008b20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b48:	f7fd fd72 	bl	8006630 <HAL_GetTick>
 8008b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b4e:	e009      	b.n	8008b64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b50:	f7fd fd6e 	bl	8006630 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5e:	d901      	bls.n	8008b64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e007      	b.n	8008b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b70:	d1ee      	bne.n	8008b50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	420e0040 	.word	0x420e0040
 8008b84:	40007000 	.word	0x40007000
 8008b88:	420e0044 	.word	0x420e0044

08008b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e0cc      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ba0:	4b68      	ldr	r3, [pc, #416]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d90c      	bls.n	8008bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bae:	4b65      	ldr	r3, [pc, #404]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb6:	4b63      	ldr	r3, [pc, #396]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d001      	beq.n	8008bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e0b8      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d020      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008be0:	4b59      	ldr	r3, [pc, #356]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	4a58      	ldr	r2, [pc, #352]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bf8:	4b53      	ldr	r3, [pc, #332]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	4a52      	ldr	r2, [pc, #328]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c04:	4b50      	ldr	r3, [pc, #320]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	494d      	ldr	r1, [pc, #308]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d044      	beq.n	8008cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d107      	bne.n	8008c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c2a:	4b47      	ldr	r3, [pc, #284]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d119      	bne.n	8008c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e07f      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d003      	beq.n	8008c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d107      	bne.n	8008c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c4a:	4b3f      	ldr	r3, [pc, #252]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e06f      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5a:	4b3b      	ldr	r3, [pc, #236]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e067      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c6a:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f023 0203 	bic.w	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	4934      	ldr	r1, [pc, #208]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c7c:	f7fd fcd8 	bl	8006630 <HAL_GetTick>
 8008c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c82:	e00a      	b.n	8008c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c84:	f7fd fcd4 	bl	8006630 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e04f      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c9a:	4b2b      	ldr	r3, [pc, #172]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 020c 	and.w	r2, r3, #12
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d1eb      	bne.n	8008c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 030f 	and.w	r3, r3, #15
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d20c      	bcs.n	8008cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc2:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d001      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e032      	b.n	8008d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d008      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ce0:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	4916      	ldr	r1, [pc, #88]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	490e      	ldr	r1, [pc, #56]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d12:	f000 f821 	bl	8008d58 <HAL_RCC_GetSysClockFreq>
 8008d16:	4601      	mov	r1, r0
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	091b      	lsrs	r3, r3, #4
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <HAL_RCC_ClockConfig+0x1c0>)
 8008d24:	5cd3      	ldrb	r3, [r2, r3]
 8008d26:	fa21 f303 	lsr.w	r3, r1, r3
 8008d2a:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <HAL_RCC_ClockConfig+0x1c4>)
 8008d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <HAL_RCC_ClockConfig+0x1c8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd fc38 	bl	80065a8 <HAL_InitTick>

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	40023c00 	.word	0x40023c00
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	08017328 	.word	0x08017328
 8008d50:	20000000 	.word	0x20000000
 8008d54:	20000004 	.word	0x20000004

08008d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	2300      	movs	r3, #0
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6e:	4b63      	ldr	r3, [pc, #396]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 030c 	and.w	r3, r3, #12
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d007      	beq.n	8008d8a <HAL_RCC_GetSysClockFreq+0x32>
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	d008      	beq.n	8008d90 <HAL_RCC_GetSysClockFreq+0x38>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f040 80b4 	bne.w	8008eec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d84:	4b5e      	ldr	r3, [pc, #376]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008d86:	60bb      	str	r3, [r7, #8]
       break;
 8008d88:	e0b3      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d8a:	4b5d      	ldr	r3, [pc, #372]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008d8c:	60bb      	str	r3, [r7, #8]
      break;
 8008d8e:	e0b0      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d90:	4b5a      	ldr	r3, [pc, #360]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d9a:	4b58      	ldr	r3, [pc, #352]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d04a      	beq.n	8008e3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008da6:	4b55      	ldr	r3, [pc, #340]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	099b      	lsrs	r3, r3, #6
 8008dac:	f04f 0400 	mov.w	r4, #0
 8008db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	ea03 0501 	and.w	r5, r3, r1
 8008dbc:	ea04 0602 	and.w	r6, r4, r2
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	f04f 0400 	mov.w	r4, #0
 8008dcc:	0154      	lsls	r4, r2, #5
 8008dce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008dd2:	014b      	lsls	r3, r1, #5
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	1b49      	subs	r1, r1, r5
 8008dda:	eb62 0206 	sbc.w	r2, r2, r6
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	f04f 0400 	mov.w	r4, #0
 8008de6:	0194      	lsls	r4, r2, #6
 8008de8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008dec:	018b      	lsls	r3, r1, #6
 8008dee:	1a5b      	subs	r3, r3, r1
 8008df0:	eb64 0402 	sbc.w	r4, r4, r2
 8008df4:	f04f 0100 	mov.w	r1, #0
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	00e2      	lsls	r2, r4, #3
 8008dfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e02:	00d9      	lsls	r1, r3, #3
 8008e04:	460b      	mov	r3, r1
 8008e06:	4614      	mov	r4, r2
 8008e08:	195b      	adds	r3, r3, r5
 8008e0a:	eb44 0406 	adc.w	r4, r4, r6
 8008e0e:	f04f 0100 	mov.w	r1, #0
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	02a2      	lsls	r2, r4, #10
 8008e18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008e1c:	0299      	lsls	r1, r3, #10
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4614      	mov	r4, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	4621      	mov	r1, r4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f04f 0400 	mov.w	r4, #0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4623      	mov	r3, r4
 8008e30:	f7f7 ff42 	bl	8000cb8 <__aeabi_uldivmod>
 8008e34:	4603      	mov	r3, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e049      	b.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e3c:	4b2f      	ldr	r3, [pc, #188]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	099b      	lsrs	r3, r3, #6
 8008e42:	f04f 0400 	mov.w	r4, #0
 8008e46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	ea03 0501 	and.w	r5, r3, r1
 8008e52:	ea04 0602 	and.w	r6, r4, r2
 8008e56:	4629      	mov	r1, r5
 8008e58:	4632      	mov	r2, r6
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	f04f 0400 	mov.w	r4, #0
 8008e62:	0154      	lsls	r4, r2, #5
 8008e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008e68:	014b      	lsls	r3, r1, #5
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	1b49      	subs	r1, r1, r5
 8008e70:	eb62 0206 	sbc.w	r2, r2, r6
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	f04f 0400 	mov.w	r4, #0
 8008e7c:	0194      	lsls	r4, r2, #6
 8008e7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008e82:	018b      	lsls	r3, r1, #6
 8008e84:	1a5b      	subs	r3, r3, r1
 8008e86:	eb64 0402 	sbc.w	r4, r4, r2
 8008e8a:	f04f 0100 	mov.w	r1, #0
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	00e2      	lsls	r2, r4, #3
 8008e94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e98:	00d9      	lsls	r1, r3, #3
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	195b      	adds	r3, r3, r5
 8008ea0:	eb44 0406 	adc.w	r4, r4, r6
 8008ea4:	f04f 0100 	mov.w	r1, #0
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	02a2      	lsls	r2, r4, #10
 8008eae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008eb2:	0299      	lsls	r1, r3, #10
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4614      	mov	r4, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	4621      	mov	r1, r4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f04f 0400 	mov.w	r4, #0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	f7f7 fef7 	bl	8000cb8 <__aeabi_uldivmod>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	3301      	adds	r3, #1
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee8:	60bb      	str	r3, [r7, #8]
      break;
 8008eea:	e002      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008eec:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008eee:	60bb      	str	r3, [r7, #8]
      break;
 8008ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efc:	40023800 	.word	0x40023800
 8008f00:	00f42400 	.word	0x00f42400

08008f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000000 	.word	0x20000000

08008f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f20:	f7ff fff0 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	0a9b      	lsrs	r3, r3, #10
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	4a03      	ldr	r2, [pc, #12]	; (8008f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	40023800 	.word	0x40023800
 8008f40:	08017338 	.word	0x08017338

08008f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f48:	f7ff ffdc 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	0b5b      	lsrs	r3, r3, #13
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	4a03      	ldr	r2, [pc, #12]	; (8008f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f5a:	5cd3      	ldrb	r3, [r2, r3]
 8008f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40023800 	.word	0x40023800
 8008f68:	08017338 	.word	0x08017338

08008f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f94:	4b66      	ldr	r3, [pc, #408]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	4963      	ldr	r1, [pc, #396]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008fb6:	4b5e      	ldr	r3, [pc, #376]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fbc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	495a      	ldr	r1, [pc, #360]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d075      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ff0:	4b50      	ldr	r3, [pc, #320]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ff6:	f7fd fb1b 	bl	8006630 <HAL_GetTick>
 8008ffa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ffc:	e008      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ffe:	f7fd fb17 	bl	8006630 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e1dc      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009010:	4b47      	ldr	r3, [pc, #284]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f0      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d009      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	019a      	lsls	r2, r3, #6
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	071b      	lsls	r3, r3, #28
 8009034:	493e      	ldr	r1, [pc, #248]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009036:	4313      	orrs	r3, r2
 8009038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01f      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009048:	4b39      	ldr	r3, [pc, #228]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800904a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	019a      	lsls	r2, r3, #6
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	061b      	lsls	r3, r3, #24
 8009062:	431a      	orrs	r2, r3
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	071b      	lsls	r3, r3, #28
 8009068:	4931      	ldr	r1, [pc, #196]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800906a:	4313      	orrs	r3, r2
 800906c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009070:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009076:	f023 021f 	bic.w	r2, r3, #31
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	3b01      	subs	r3, #1
 8009080:	492b      	ldr	r1, [pc, #172]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009082:	4313      	orrs	r3, r2
 8009084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00d      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	019a      	lsls	r2, r3, #6
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	061b      	lsls	r3, r3, #24
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	071b      	lsls	r3, r3, #28
 80090a8:	4921      	ldr	r1, [pc, #132]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80090b0:	4b20      	ldr	r3, [pc, #128]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090b6:	f7fd fabb 	bl	8006630 <HAL_GetTick>
 80090ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090bc:	e008      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090be:	f7fd fab7 	bl	8006630 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d901      	bls.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e17c      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090d0:	4b17      	ldr	r3, [pc, #92]	; (8009130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0f0      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d112      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10c      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80ce 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800910a:	f040 80c8 	bne.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009114:	f7fd fa8c 	bl	8006630 <HAL_GetTick>
 8009118:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800911a:	e00f      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800911c:	f7fd fa88 	bl	8006630 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d908      	bls.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e14d      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800912e:	bf00      	nop
 8009130:	40023800 	.word	0x40023800
 8009134:	42470068 	.word	0x42470068
 8009138:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800913c:	4ba5      	ldr	r3, [pc, #660]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009148:	d0e8      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0304 	and.w	r3, r3, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	d02e      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009156:	4b9f      	ldr	r3, [pc, #636]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915c:	0c1b      	lsrs	r3, r3, #16
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	3301      	adds	r3, #1
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009168:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916e:	0f1b      	lsrs	r3, r3, #28
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	019a      	lsls	r2, r3, #6
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	3b01      	subs	r3, #1
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	431a      	orrs	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	061b      	lsls	r3, r3, #24
 800918c:	431a      	orrs	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	071b      	lsls	r3, r3, #28
 8009192:	4990      	ldr	r1, [pc, #576]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009194:	4313      	orrs	r3, r2
 8009196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800919a:	4b8e      	ldr	r3, [pc, #568]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800919c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	3b01      	subs	r3, #1
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	4989      	ldr	r1, [pc, #548]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02c      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80091c0:	4b84      	ldr	r3, [pc, #528]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c6:	0c1b      	lsrs	r3, r3, #16
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	3301      	adds	r3, #1
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091d2:	4b80      	ldr	r3, [pc, #512]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d8:	0e1b      	lsrs	r3, r3, #24
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	019a      	lsls	r2, r3, #6
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	085b      	lsrs	r3, r3, #1
 80091ea:	3b01      	subs	r3, #1
 80091ec:	041b      	lsls	r3, r3, #16
 80091ee:	431a      	orrs	r2, r3
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	061b      	lsls	r3, r3, #24
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	071b      	lsls	r3, r3, #28
 80091fc:	4975      	ldr	r1, [pc, #468]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009204:	4b73      	ldr	r3, [pc, #460]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800920a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	4970      	ldr	r1, [pc, #448]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009214:	4313      	orrs	r3, r2
 8009216:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d024      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800922a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800922e:	d11f      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009230:	4b68      	ldr	r3, [pc, #416]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009236:	0e1b      	lsrs	r3, r3, #24
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800923e:	4b65      	ldr	r3, [pc, #404]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009244:	0f1b      	lsrs	r3, r3, #28
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	019a      	lsls	r2, r3, #6
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	3b01      	subs	r3, #1
 800925a:	041b      	lsls	r3, r3, #16
 800925c:	431a      	orrs	r2, r3
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	061b      	lsls	r3, r3, #24
 8009262:	431a      	orrs	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	071b      	lsls	r3, r3, #28
 8009268:	495a      	ldr	r1, [pc, #360]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009270:	4b59      	ldr	r3, [pc, #356]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009272:	2201      	movs	r2, #1
 8009274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009276:	f7fd f9db 	bl	8006630 <HAL_GetTick>
 800927a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800927e:	f7fd f9d7 	bl	8006630 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e09c      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009290:	4b50      	ldr	r3, [pc, #320]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929c:	d1ef      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8083 	beq.w	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092ac:	2300      	movs	r3, #0
 80092ae:	60bb      	str	r3, [r7, #8]
 80092b0:	4b48      	ldr	r3, [pc, #288]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	4a47      	ldr	r2, [pc, #284]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	6413      	str	r3, [r2, #64]	; 0x40
 80092bc:	4b45      	ldr	r3, [pc, #276]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80092c8:	4b44      	ldr	r3, [pc, #272]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a43      	ldr	r2, [pc, #268]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80092ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092d4:	f7fd f9ac 	bl	8006630 <HAL_GetTick>
 80092d8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092da:	e008      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80092dc:	f7fd f9a8 	bl	8006630 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e06d      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092ee:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092fa:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009302:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d02f      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	429a      	cmp	r2, r3
 8009316:	d028      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009318:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009320:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009322:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009328:	4b2d      	ldr	r3, [pc, #180]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800932e:	4a29      	ldr	r2, [pc, #164]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009334:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b01      	cmp	r3, #1
 800933e:	d114      	bne.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009340:	f7fd f976 	bl	8006630 <HAL_GetTick>
 8009344:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009346:	e00a      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009348:	f7fd f972 	bl	8006630 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	f241 3288 	movw	r2, #5000	; 0x1388
 8009356:	4293      	cmp	r3, r2
 8009358:	d901      	bls.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e035      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0ee      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009376:	d10d      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009378:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938c:	4911      	ldr	r1, [pc, #68]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800938e:	4313      	orrs	r3, r2
 8009390:	608b      	str	r3, [r1, #8]
 8009392:	e005      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	4a0e      	ldr	r2, [pc, #56]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800939a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ac:	4909      	ldr	r1, [pc, #36]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0310 	and.w	r3, r3, #16
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80093c4:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80093c6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800
 80093d8:	42470070 	.word	0x42470070
 80093dc:	40007000 	.word	0x40007000
 80093e0:	42470e40 	.word	0x42470e40
 80093e4:	424711e0 	.word	0x424711e0

080093e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d075      	beq.n	80094ec <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009400:	4ba2      	ldr	r3, [pc, #648]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f003 030c 	and.w	r3, r3, #12
 8009408:	2b04      	cmp	r3, #4
 800940a:	d00c      	beq.n	8009426 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800940c:	4b9f      	ldr	r3, [pc, #636]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009414:	2b08      	cmp	r3, #8
 8009416:	d112      	bne.n	800943e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009418:	4b9c      	ldr	r3, [pc, #624]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009424:	d10b      	bne.n	800943e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009426:	4b99      	ldr	r3, [pc, #612]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d05b      	beq.n	80094ea <HAL_RCC_OscConfig+0x102>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d157      	bne.n	80094ea <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e20b      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009446:	d106      	bne.n	8009456 <HAL_RCC_OscConfig+0x6e>
 8009448:	4b90      	ldr	r3, [pc, #576]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a8f      	ldr	r2, [pc, #572]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800944e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	e01d      	b.n	8009492 <HAL_RCC_OscConfig+0xaa>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800945e:	d10c      	bne.n	800947a <HAL_RCC_OscConfig+0x92>
 8009460:	4b8a      	ldr	r3, [pc, #552]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a89      	ldr	r2, [pc, #548]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4b87      	ldr	r3, [pc, #540]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a86      	ldr	r2, [pc, #536]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e00b      	b.n	8009492 <HAL_RCC_OscConfig+0xaa>
 800947a:	4b84      	ldr	r3, [pc, #528]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a83      	ldr	r2, [pc, #524]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4b81      	ldr	r3, [pc, #516]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a80      	ldr	r2, [pc, #512]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800948c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d013      	beq.n	80094c2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800949a:	f7fd f8c9 	bl	8006630 <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a0:	e008      	b.n	80094b4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094a2:	f7fd f8c5 	bl	8006630 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b64      	cmp	r3, #100	; 0x64
 80094ae:	d901      	bls.n	80094b4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e1d0      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094b4:	4b75      	ldr	r3, [pc, #468]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0f0      	beq.n	80094a2 <HAL_RCC_OscConfig+0xba>
 80094c0:	e014      	b.n	80094ec <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c2:	f7fd f8b5 	bl	8006630 <HAL_GetTick>
 80094c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094c8:	e008      	b.n	80094dc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094ca:	f7fd f8b1 	bl	8006630 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b64      	cmp	r3, #100	; 0x64
 80094d6:	d901      	bls.n	80094dc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e1bc      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094dc:	4b6b      	ldr	r3, [pc, #428]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1f0      	bne.n	80094ca <HAL_RCC_OscConfig+0xe2>
 80094e8:	e000      	b.n	80094ec <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d063      	beq.n	80095c0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80094f8:	4b64      	ldr	r3, [pc, #400]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 030c 	and.w	r3, r3, #12
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009504:	4b61      	ldr	r3, [pc, #388]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800950c:	2b08      	cmp	r3, #8
 800950e:	d11c      	bne.n	800954a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009510:	4b5e      	ldr	r3, [pc, #376]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d116      	bne.n	800954a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800951c:	4b5b      	ldr	r3, [pc, #364]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_RCC_OscConfig+0x14c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d001      	beq.n	8009534 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e190      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009534:	4b55      	ldr	r3, [pc, #340]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	00db      	lsls	r3, r3, #3
 8009542:	4952      	ldr	r1, [pc, #328]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009544:	4313      	orrs	r3, r2
 8009546:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009548:	e03a      	b.n	80095c0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d020      	beq.n	8009594 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009552:	4b4f      	ldr	r3, [pc, #316]	; (8009690 <HAL_RCC_OscConfig+0x2a8>)
 8009554:	2201      	movs	r2, #1
 8009556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009558:	f7fd f86a 	bl	8006630 <HAL_GetTick>
 800955c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009560:	f7fd f866 	bl	8006630 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e171      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009572:	4b46      	ldr	r3, [pc, #280]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800957e:	4b43      	ldr	r3, [pc, #268]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	493f      	ldr	r1, [pc, #252]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800958e:	4313      	orrs	r3, r2
 8009590:	600b      	str	r3, [r1, #0]
 8009592:	e015      	b.n	80095c0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009594:	4b3e      	ldr	r3, [pc, #248]	; (8009690 <HAL_RCC_OscConfig+0x2a8>)
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800959a:	f7fd f849 	bl	8006630 <HAL_GetTick>
 800959e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095a0:	e008      	b.n	80095b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095a2:	f7fd f845 	bl	8006630 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d901      	bls.n	80095b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e150      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095b4:	4b35      	ldr	r3, [pc, #212]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1f0      	bne.n	80095a2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0308 	and.w	r3, r3, #8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d030      	beq.n	800962e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d016      	beq.n	8009602 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095d4:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <HAL_RCC_OscConfig+0x2ac>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095da:	f7fd f829 	bl	8006630 <HAL_GetTick>
 80095de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095e2:	f7fd f825 	bl	8006630 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e130      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095f4:	4b25      	ldr	r3, [pc, #148]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 80095f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f0      	beq.n	80095e2 <HAL_RCC_OscConfig+0x1fa>
 8009600:	e015      	b.n	800962e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009602:	4b24      	ldr	r3, [pc, #144]	; (8009694 <HAL_RCC_OscConfig+0x2ac>)
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009608:	f7fd f812 	bl	8006630 <HAL_GetTick>
 800960c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800960e:	e008      	b.n	8009622 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009610:	f7fd f80e 	bl	8006630 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d901      	bls.n	8009622 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e119      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009622:	4b1a      	ldr	r3, [pc, #104]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1f0      	bne.n	8009610 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 809f 	beq.w	800977a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800963c:	2300      	movs	r3, #0
 800963e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	4b0e      	ldr	r3, [pc, #56]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 8009656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965a:	6413      	str	r3, [r2, #64]	; 0x40
 800965c:	4b0b      	ldr	r3, [pc, #44]	; (800968c <HAL_RCC_OscConfig+0x2a4>)
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <HAL_RCC_OscConfig+0x2b0>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009674:	2b00      	cmp	r3, #0
 8009676:	d120      	bne.n	80096ba <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009678:	4b07      	ldr	r3, [pc, #28]	; (8009698 <HAL_RCC_OscConfig+0x2b0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a06      	ldr	r2, [pc, #24]	; (8009698 <HAL_RCC_OscConfig+0x2b0>)
 800967e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009684:	f7fc ffd4 	bl	8006630 <HAL_GetTick>
 8009688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800968a:	e010      	b.n	80096ae <HAL_RCC_OscConfig+0x2c6>
 800968c:	40023800 	.word	0x40023800
 8009690:	42470000 	.word	0x42470000
 8009694:	42470e80 	.word	0x42470e80
 8009698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800969c:	f7fc ffc8 	bl	8006630 <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e0d3      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096ae:	4b6c      	ldr	r3, [pc, #432]	; (8009860 <HAL_RCC_OscConfig+0x478>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0f0      	beq.n	800969c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d106      	bne.n	80096d0 <HAL_RCC_OscConfig+0x2e8>
 80096c2:	4b68      	ldr	r3, [pc, #416]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c6:	4a67      	ldr	r2, [pc, #412]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096c8:	f043 0301 	orr.w	r3, r3, #1
 80096cc:	6713      	str	r3, [r2, #112]	; 0x70
 80096ce:	e01c      	b.n	800970a <HAL_RCC_OscConfig+0x322>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	2b05      	cmp	r3, #5
 80096d6:	d10c      	bne.n	80096f2 <HAL_RCC_OscConfig+0x30a>
 80096d8:	4b62      	ldr	r3, [pc, #392]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096dc:	4a61      	ldr	r2, [pc, #388]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096de:	f043 0304 	orr.w	r3, r3, #4
 80096e2:	6713      	str	r3, [r2, #112]	; 0x70
 80096e4:	4b5f      	ldr	r3, [pc, #380]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e8:	4a5e      	ldr	r2, [pc, #376]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	6713      	str	r3, [r2, #112]	; 0x70
 80096f0:	e00b      	b.n	800970a <HAL_RCC_OscConfig+0x322>
 80096f2:	4b5c      	ldr	r3, [pc, #368]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4a5b      	ldr	r2, [pc, #364]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	6713      	str	r3, [r2, #112]	; 0x70
 80096fe:	4b59      	ldr	r3, [pc, #356]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	4a58      	ldr	r2, [pc, #352]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d015      	beq.n	800973e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009712:	f7fc ff8d 	bl	8006630 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009718:	e00a      	b.n	8009730 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7fc ff89 	bl	8006630 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d901      	bls.n	8009730 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e092      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009730:	4b4c      	ldr	r3, [pc, #304]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0ee      	beq.n	800971a <HAL_RCC_OscConfig+0x332>
 800973c:	e014      	b.n	8009768 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973e:	f7fc ff77 	bl	8006630 <HAL_GetTick>
 8009742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009744:	e00a      	b.n	800975c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009746:	f7fc ff73 	bl	8006630 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	4293      	cmp	r3, r2
 8009756:	d901      	bls.n	800975c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e07c      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800975c:	4b41      	ldr	r3, [pc, #260]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 800975e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1ee      	bne.n	8009746 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d105      	bne.n	800977a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800976e:	4b3d      	ldr	r3, [pc, #244]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	4a3c      	ldr	r2, [pc, #240]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d068      	beq.n	8009854 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009782:	4b38      	ldr	r3, [pc, #224]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 030c 	and.w	r3, r3, #12
 800978a:	2b08      	cmp	r3, #8
 800978c:	d060      	beq.n	8009850 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d145      	bne.n	8009822 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009796:	4b34      	ldr	r3, [pc, #208]	; (8009868 <HAL_RCC_OscConfig+0x480>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800979c:	f7fc ff48 	bl	8006630 <HAL_GetTick>
 80097a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097a2:	e008      	b.n	80097b6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097a4:	f7fc ff44 	bl	8006630 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d901      	bls.n	80097b6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e04f      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097b6:	4b2b      	ldr	r3, [pc, #172]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f0      	bne.n	80097a4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	69da      	ldr	r2, [r3, #28]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	019b      	lsls	r3, r3, #6
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	3b01      	subs	r3, #1
 80097dc:	041b      	lsls	r3, r3, #16
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	061b      	lsls	r3, r3, #24
 80097e6:	431a      	orrs	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	071b      	lsls	r3, r3, #28
 80097ee:	491d      	ldr	r1, [pc, #116]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097f4:	4b1c      	ldr	r3, [pc, #112]	; (8009868 <HAL_RCC_OscConfig+0x480>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fa:	f7fc ff19 	bl	8006630 <HAL_GetTick>
 80097fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009800:	e008      	b.n	8009814 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009802:	f7fc ff15 	bl	8006630 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e020      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0f0      	beq.n	8009802 <HAL_RCC_OscConfig+0x41a>
 8009820:	e018      	b.n	8009854 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009822:	4b11      	ldr	r3, [pc, #68]	; (8009868 <HAL_RCC_OscConfig+0x480>)
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009828:	f7fc ff02 	bl	8006630 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009830:	f7fc fefe 	bl	8006630 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e009      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009842:	4b08      	ldr	r3, [pc, #32]	; (8009864 <HAL_RCC_OscConfig+0x47c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1f0      	bne.n	8009830 <HAL_RCC_OscConfig+0x448>
 800984e:	e001      	b.n	8009854 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	40007000 	.word	0x40007000
 8009864:	40023800 	.word	0x40023800
 8009868:	42470060 	.word	0x42470060

0800986c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e022      	b.n	80098c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d105      	bne.n	8009896 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fb fbad 	bl	8004ff0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2203      	movs	r2, #3
 800989a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f814 	bl	80098cc <HAL_SD_InitCard>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e00a      	b.n	80098c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098cc:	b5b0      	push	{r4, r5, r7, lr}
 80098ce:	b08e      	sub	sp, #56	; 0x38
 80098d0:	af04      	add	r7, sp, #16
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80098e8:	2376      	movs	r3, #118	; 0x76
 80098ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681d      	ldr	r5, [r3, #0]
 80098f0:	466c      	mov	r4, sp
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009904:	4628      	mov	r0, r5
 8009906:	f003 fa87 	bl	800ce18 <SDIO_Init>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e031      	b.n	8009980 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <HAL_SD_InitCard+0xbc>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f003 fabf 	bl	800ceaa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800992c:	4b16      	ldr	r3, [pc, #88]	; (8009988 <HAL_SD_InitCard+0xbc>)
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 ffc6 	bl	800a8c4 <SD_PowerON>
 8009938:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e013      	b.n	8009980 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fee5 	bl	800a728 <SD_InitCard>
 800995e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3728      	adds	r7, #40	; 0x28
 8009984:	46bd      	mov	sp, r7
 8009986:	bdb0      	pop	{r4, r5, r7, pc}
 8009988:	422580a0 	.word	0x422580a0

0800998c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08c      	sub	sp, #48	; 0x30
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d107      	bne.n	80099b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0c7      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b01      	cmp	r3, #1
 80099be:	f040 80c0 	bne.w	8009b42 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d907      	bls.n	80099e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e0ae      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2203      	movs	r2, #3
 80099ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009a04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	4a50      	ldr	r2, [pc, #320]	; (8009b4c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	4a4f      	ldr	r2, [pc, #316]	; (8009b50 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009a14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3380      	adds	r3, #128	; 0x80
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	025b      	lsls	r3, r3, #9
 8009a30:	089b      	lsrs	r3, r3, #2
 8009a32:	f7fd fbef 	bl	8007214 <HAL_DMA_Start_IT>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d017      	beq.n	8009a6c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009a4a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a40      	ldr	r2, [pc, #256]	; (8009b54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009a52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e06b      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009a6c:	4b3a      	ldr	r3, [pc, #232]	; (8009b58 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d002      	beq.n	8009a80 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	025b      	lsls	r3, r3, #9
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f003 faa1 	bl	800cfd0 <SDMMC_CmdBlockLength>
 8009a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00f      	beq.n	8009ab6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a2e      	ldr	r2, [pc, #184]	; (8009b54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e046      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	025b      	lsls	r3, r3, #9
 8009ac0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009ac2:	2390      	movs	r3, #144	; 0x90
 8009ac4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f107 0210 	add.w	r2, r7, #16
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f003 fa4b 	bl	800cf78 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d90a      	bls.n	8009afe <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2282      	movs	r2, #130	; 0x82
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af4:	4618      	mov	r0, r3
 8009af6:	f003 faaf 	bl	800d058 <SDMMC_CmdReadMultiBlock>
 8009afa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009afc:	e009      	b.n	8009b12 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2281      	movs	r2, #129	; 0x81
 8009b02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f003 fa82 	bl	800d014 <SDMMC_CmdReadSingleBlock>
 8009b10:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d012      	beq.n	8009b3e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a0d      	ldr	r2, [pc, #52]	; (8009b54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	431a      	orrs	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e002      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e000      	b.n	8009b44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009b42:	2302      	movs	r3, #2
  }
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3730      	adds	r7, #48	; 0x30
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	0800a537 	.word	0x0800a537
 8009b50:	0800a5a9 	.word	0x0800a5a9
 8009b54:	004005ff 	.word	0x004005ff
 8009b58:	4225858c 	.word	0x4225858c

08009b5c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08c      	sub	sp, #48	; 0x30
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d107      	bne.n	8009b84 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e0ca      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	f040 80c3 	bne.w	8009d18 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d907      	bls.n	8009bb6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e0b1      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 021a 	orr.w	r2, r2, #26
 8009bd4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	4a52      	ldr	r2, [pc, #328]	; (8009d24 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be2:	4a51      	ldr	r2, [pc, #324]	; (8009d28 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009be4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bea:	2200      	movs	r2, #0
 8009bec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d002      	beq.n	8009bfc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	025b      	lsls	r3, r3, #9
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c04:	4618      	mov	r0, r3
 8009c06:	f003 f9e3 	bl	800cfd0 <SDMMC_CmdBlockLength>
 8009c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a45      	ldr	r2, [pc, #276]	; (8009d2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	431a      	orrs	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e073      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d90a      	bls.n	8009c4e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	22a0      	movs	r2, #160	; 0xa0
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c44:	4618      	mov	r0, r3
 8009c46:	f003 fa4b 	bl	800d0e0 <SDMMC_CmdWriteMultiBlock>
 8009c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009c4c:	e009      	b.n	8009c62 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2290      	movs	r2, #144	; 0x90
 8009c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f003 fa1e 	bl	800d09c <SDMMC_CmdWriteSingleBlock>
 8009c60:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d012      	beq.n	8009c8e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a2f      	ldr	r2, [pc, #188]	; (8009d2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	431a      	orrs	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e045      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009c8e:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009c98:	68b9      	ldr	r1, [r7, #8]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3380      	adds	r3, #128	; 0x80
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	025b      	lsls	r3, r3, #9
 8009ca6:	089b      	lsrs	r3, r3, #2
 8009ca8:	f7fd fab4 	bl	8007214 <HAL_DMA_Start_IT>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01a      	beq.n	8009ce8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 021a 	bic.w	r2, r2, #26
 8009cc0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a19      	ldr	r2, [pc, #100]	; (8009d2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e018      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	025b      	lsls	r3, r3, #9
 8009cf2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009cf4:	2390      	movs	r3, #144	; 0x90
 8009cf6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f107 0210 	add.w	r2, r7, #16
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f003 f932 	bl	800cf78 <SDIO_ConfigData>

      return HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	e000      	b.n	8009d1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009d18:	2302      	movs	r3, #2
  }
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3730      	adds	r7, #48	; 0x30
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	0800a50d 	.word	0x0800a50d
 8009d28:	0800a5a9 	.word	0x0800a5a9
 8009d2c:	004005ff 	.word	0x004005ff
 8009d30:	4225858c 	.word	0x4225858c

08009d34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d008      	beq.n	8009d62 <HAL_SD_IRQHandler+0x2e>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 ffc8 	bl	800acf0 <SD_Read_IT>
 8009d60:	e155      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 808f 	beq.w	8009e90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d7a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009d8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009d8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f022 0201 	bic.w	r2, r2, #1
 8009d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d039      	beq.n	8009e1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <HAL_SD_IRQHandler+0x8a>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d011      	beq.n	8009de2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f003 f9ae 	bl	800d124 <SDMMC_CmdStopTransfer>
 8009dc8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f91f 	bl	800a020 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009dea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <HAL_SD_IRQHandler+0xda>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f003 fe0c 	bl	800da2c <HAL_SD_RxCpltCallback>
 8009e14:	e0fb      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f003 fdfe 	bl	800da18 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e1c:	e0f7      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 80f2 	beq.w	800a00e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d011      	beq.n	8009e58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f003 f973 	bl	800d124 <SDMMC_CmdStopTransfer>
 8009e3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f8e4 	bl	800a020 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f040 80d5 	bne.w	800a00e <HAL_SD_IRQHandler+0x2da>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 80cf 	bne.w	800a00e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0208 	bic.w	r2, r2, #8
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f003 fdc5 	bl	800da18 <HAL_SD_TxCpltCallback>
}
 8009e8e:	e0be      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d008      	beq.n	8009eb0 <HAL_SD_IRQHandler+0x17c>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f003 0308 	and.w	r3, r3, #8
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 ff72 	bl	800ad92 <SD_Write_IT>
 8009eae:	e0ae      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 80a7 	beq.w	800a00e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed2:	f043 0202 	orr.w	r2, r3, #2
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	f043 0208 	orr.w	r2, r3, #8
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	f043 0220 	orr.w	r2, r3, #32
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f14:	f003 0310 	and.w	r3, r3, #16
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	f043 0210 	orr.w	r2, r3, #16
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009f40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f003 f8ec 	bl	800d124 <SDMMC_CmdStopTransfer>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f003 0308 	and.w	r3, r3, #8
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f855 	bl	800a020 <HAL_SD_ErrorCallback>
}
 8009f76:	e04a      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d045      	beq.n	800a00e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <HAL_SD_IRQHandler+0x262>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d011      	beq.n	8009fba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	4a1f      	ldr	r2, [pc, #124]	; (800a018 <HAL_SD_IRQHandler+0x2e4>)
 8009f9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd f98e 	bl	80072c4 <HAL_DMA_Abort_IT>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d02f      	beq.n	800a00e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fb4a 	bl	800a64c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009fb8:	e029      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <HAL_SD_IRQHandler+0x29a>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d011      	beq.n	8009ff2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	4a12      	ldr	r2, [pc, #72]	; (800a01c <HAL_SD_IRQHandler+0x2e8>)
 8009fd4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd f972 	bl	80072c4 <HAL_DMA_Abort_IT>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d013      	beq.n	800a00e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fb65 	bl	800a6ba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009ff0:	e00d      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f003 fcfc 	bl	800da04 <HAL_SD_AbortCallback>
}
 800a00c:	e7ff      	b.n	800a00e <HAL_SD_IRQHandler+0x2da>
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	0800a64d 	.word	0x0800a64d
 800a01c:	0800a6bb 	.word	0x0800a6bb

0800a020 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a042:	0f9b      	lsrs	r3, r3, #30
 800a044:	b2da      	uxtb	r2, r3
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a04e:	0e9b      	lsrs	r3, r3, #26
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	b2da      	uxtb	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a060:	0e1b      	lsrs	r3, r3, #24
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a072:	0c1b      	lsrs	r3, r3, #16
 800a074:	b2da      	uxtb	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a07e:	0a1b      	lsrs	r3, r3, #8
 800a080:	b2da      	uxtb	r2, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a094:	0d1b      	lsrs	r3, r3, #20
 800a096:	b29a      	uxth	r2, r3
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 030f 	and.w	r3, r3, #15
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0b2:	0bdb      	lsrs	r3, r3, #15
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0c4:	0b9b      	lsrs	r3, r3, #14
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0d6:	0b5b      	lsrs	r3, r3, #13
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e8:	0b1b      	lsrs	r3, r3, #12
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a100:	2b00      	cmp	r3, #0
 800a102:	d163      	bne.n	800a1cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a108:	009a      	lsls	r2, r3, #2
 800a10a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a10e:	4013      	ands	r3, r2
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a114:	0f92      	lsrs	r2, r2, #30
 800a116:	431a      	orrs	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a120:	0edb      	lsrs	r3, r3, #27
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a132:	0e1b      	lsrs	r3, r3, #24
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a144:	0d5b      	lsrs	r3, r3, #21
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a156:	0c9b      	lsrs	r3, r3, #18
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a168:	0bdb      	lsrs	r3, r3, #15
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	b2da      	uxtb	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	7e1b      	ldrb	r3, [r3, #24]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	3302      	adds	r3, #2
 800a18c:	2201      	movs	r2, #1
 800a18e:	fa02 f303 	lsl.w	r3, r2, r3
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a196:	fb02 f203 	mul.w	r2, r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	7a1b      	ldrb	r3, [r3, #8]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	409a      	lsls	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a1b8:	0a52      	lsrs	r2, r2, #9
 800a1ba:	fb02 f203 	mul.w	r2, r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a1ca:	e031      	b.n	800a230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d11d      	bne.n	800a210 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d8:	041b      	lsls	r3, r3, #16
 800a1da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	029a      	lsls	r2, r3, #10
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a204:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	661a      	str	r2, [r3, #96]	; 0x60
 800a20e:	e00f      	b.n	800a230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a58      	ldr	r2, [pc, #352]	; (800a378 <HAL_SD_GetCardCSD+0x344>)
 800a216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e09d      	b.n	800a36c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a234:	0b9b      	lsrs	r3, r3, #14
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a246:	09db      	lsrs	r3, r3, #7
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a268:	0fdb      	lsrs	r3, r3, #31
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a274:	0f5b      	lsrs	r3, r3, #29
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	0e9b      	lsrs	r3, r3, #26
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a298:	0d9b      	lsrs	r3, r3, #22
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2aa:	0d5b      	lsrs	r3, r3, #21
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	0c1b      	lsrs	r3, r3, #16
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2da:	0bdb      	lsrs	r3, r3, #15
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ee:	0b9b      	lsrs	r3, r3, #14
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a302:	0b5b      	lsrs	r3, r3, #13
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a316:	0b1b      	lsrs	r3, r3, #12
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32a:	0a9b      	lsrs	r3, r3, #10
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	b2da      	uxtb	r2, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33e:	0a1b      	lsrs	r3, r3, #8
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	b2da      	uxtb	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	b2db      	uxtb	r3, r3
 800a356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	004005ff 	.word	0x004005ff

0800a37c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a3d4:	b5b0      	push	{r4, r5, r7, lr}
 800a3d6:	b08e      	sub	sp, #56	; 0x38
 800a3d8:	af04      	add	r7, sp, #16
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d02e      	beq.n	800a44c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f4:	d106      	bne.n	800a404 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	639a      	str	r2, [r3, #56]	; 0x38
 800a402:	e029      	b.n	800a458 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a40a:	d10a      	bne.n	800a422 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fb0f 	bl	800aa30 <SD_WideBus_Enable>
 800a412:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38
 800a420:	e01a      	b.n	800a458 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb4c 	bl	800aac6 <SD_WideBus_Disable>
 800a42e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
 800a43c:	e00c      	b.n	800a458 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	639a      	str	r2, [r3, #56]	; 0x38
 800a44a:	e005      	b.n	800a458 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a450:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a18      	ldr	r2, [pc, #96]	; (800a4c8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e024      	b.n	800a4be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	466c      	mov	r4, sp
 800a49c:	f107 0318 	add.w	r3, r7, #24
 800a4a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4a8:	f107 030c 	add.w	r3, r7, #12
 800a4ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f002 fcb2 	bl	800ce18 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3728      	adds	r7, #40	; 0x28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	004005ff 	.word	0x004005ff

0800a4cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4d8:	f107 030c 	add.w	r3, r7, #12
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fa7e 	bl	800a9e0 <SD_SendStatus>
 800a4e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	0a5b      	lsrs	r3, r3, #9
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a502:	693b      	ldr	r3, [r7, #16]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a528:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a52a:	bf00      	nop
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	2b82      	cmp	r3, #130	; 0x82
 800a54a:	d111      	bne.n	800a570 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f002 fde7 	bl	800d124 <SDMMC_CmdStopTransfer>
 800a556:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	431a      	orrs	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fd58 	bl	800a020 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0208 	bic.w	r2, r2, #8
 800a57e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f240 523a 	movw	r2, #1338	; 0x53a
 800a588:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f003 fa47 	bl	800da2c <HAL_SD_RxCpltCallback>
#endif
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fd f830 	bl	800761c <HAL_DMA_GetError>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d03e      	beq.n	800a640 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d002      	beq.n	800a5de <SD_DMAError+0x36>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d12d      	bne.n	800a63a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a19      	ldr	r2, [pc, #100]	; (800a648 <SD_DMAError+0xa0>)
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a5f4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff ff62 	bl	800a4cc <HAL_SD_GetCardState>
 800a608:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b06      	cmp	r3, #6
 800a60e:	d002      	beq.n	800a616 <SD_DMAError+0x6e>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b05      	cmp	r3, #5
 800a614:	d10a      	bne.n	800a62c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f002 fd82 	bl	800d124 <SDMMC_CmdStopTransfer>
 800a620:	4602      	mov	r2, r0
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	431a      	orrs	r2, r3
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2200      	movs	r2, #0
 800a638:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a63a:	6978      	ldr	r0, [r7, #20]
 800a63c:	f7ff fcf0 	bl	800a020 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	004005ff 	.word	0x004005ff

0800a64c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff ff31 	bl	800a4cc <HAL_SD_GetCardState>
 800a66a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b06      	cmp	r3, #6
 800a67e:	d002      	beq.n	800a686 <SD_DMATxAbort+0x3a>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b05      	cmp	r3, #5
 800a684:	d10a      	bne.n	800a69c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f002 fd4a 	bl	800d124 <SDMMC_CmdStopTransfer>
 800a690:	4602      	mov	r2, r0
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	431a      	orrs	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f003 f9ad 	bl	800da04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a6aa:	e002      	b.n	800a6b2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7ff fcb7 	bl	800a020 <HAL_SD_ErrorCallback>
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f240 523a 	movw	r2, #1338	; 0x53a
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fefa 	bl	800a4cc <HAL_SD_GetCardState>
 800a6d8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2b06      	cmp	r3, #6
 800a6ec:	d002      	beq.n	800a6f4 <SD_DMARxAbort+0x3a>
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d10a      	bne.n	800a70a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f002 fd13 	bl	800d124 <SDMMC_CmdStopTransfer>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	431a      	orrs	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d103      	bne.n	800a71a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f003 f976 	bl	800da04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a718:	e002      	b.n	800a720 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff fc80 	bl	800a020 <HAL_SD_ErrorCallback>
}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a728:	b5b0      	push	{r4, r5, r7, lr}
 800a72a:	b094      	sub	sp, #80	; 0x50
 800a72c:	af04      	add	r7, sp, #16
 800a72e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a730:	2301      	movs	r3, #1
 800a732:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	f002 fbc5 	bl	800cec8 <SDIO_GetPowerState>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a744:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a748:	e0b7      	b.n	800a8ba <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d02f      	beq.n	800a7b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f002 fdee 	bl	800d338 <SDMMC_CmdSendCID>
 800a75c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <SD_InitCard+0x40>
    {
      return errorstate;
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a766:	e0a8      	b.n	800a8ba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f002 fbef 	bl	800cf52 <SDIO_GetResponse>
 800a774:	4602      	mov	r2, r0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2104      	movs	r1, #4
 800a780:	4618      	mov	r0, r3
 800a782:	f002 fbe6 	bl	800cf52 <SDIO_GetResponse>
 800a786:	4602      	mov	r2, r0
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2108      	movs	r1, #8
 800a792:	4618      	mov	r0, r3
 800a794:	f002 fbdd 	bl	800cf52 <SDIO_GetResponse>
 800a798:	4602      	mov	r2, r0
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	210c      	movs	r1, #12
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f002 fbd4 	bl	800cf52 <SDIO_GetResponse>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d00d      	beq.n	800a7d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f107 020e 	add.w	r2, r7, #14
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f002 fdf4 	bl	800d3b2 <SDMMC_CmdSetRelAdd>
 800a7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <SD_InitCard+0xae>
    {
      return errorstate;
 800a7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d4:	e071      	b.n	800a8ba <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d036      	beq.n	800a84c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a7de:	89fb      	ldrh	r3, [r7, #14]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f002 fdbe 	bl	800d374 <SDMMC_CmdSendCSD>
 800a7f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a802:	e05a      	b.n	800a8ba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 fba1 	bl	800cf52 <SDIO_GetResponse>
 800a810:	4602      	mov	r2, r0
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2104      	movs	r1, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f002 fb98 	bl	800cf52 <SDIO_GetResponse>
 800a822:	4602      	mov	r2, r0
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2108      	movs	r1, #8
 800a82e:	4618      	mov	r0, r3
 800a830:	f002 fb8f 	bl	800cf52 <SDIO_GetResponse>
 800a834:	4602      	mov	r2, r0
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	210c      	movs	r1, #12
 800a840:	4618      	mov	r0, r3
 800a842:	f002 fb86 	bl	800cf52 <SDIO_GetResponse>
 800a846:	4602      	mov	r2, r0
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2104      	movs	r1, #4
 800a852:	4618      	mov	r0, r3
 800a854:	f002 fb7d 	bl	800cf52 <SDIO_GetResponse>
 800a858:	4603      	mov	r3, r0
 800a85a:	0d1a      	lsrs	r2, r3, #20
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a860:	f107 0310 	add.w	r3, r7, #16
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fbe4 	bl	800a034 <HAL_SD_GetCardCSD>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a876:	e020      	b.n	800a8ba <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6819      	ldr	r1, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a880:	041b      	lsls	r3, r3, #16
 800a882:	f04f 0400 	mov.w	r4, #0
 800a886:	461a      	mov	r2, r3
 800a888:	4623      	mov	r3, r4
 800a88a:	4608      	mov	r0, r1
 800a88c:	f002 fc6c 	bl	800d168 <SDMMC_CmdSelDesel>
 800a890:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <SD_InitCard+0x174>
  {
    return errorstate;
 800a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89a:	e00e      	b.n	800a8ba <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681d      	ldr	r5, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	466c      	mov	r4, sp
 800a8a4:	f103 0210 	add.w	r2, r3, #16
 800a8a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f002 fab0 	bl	800ce18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3740      	adds	r7, #64	; 0x40
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a8c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f002 fc66 	bl	800d1ae <SDMMC_CmdGoIdleState>
 800a8e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <SD_PowerON+0x2a>
  {
    return errorstate;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	e072      	b.n	800a9d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f002 fc79 	bl	800d1ea <SDMMC_CmdOperCond>
 800a8f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00d      	beq.n	800a91c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f002 fc4f 	bl	800d1ae <SDMMC_CmdGoIdleState>
 800a910:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	e05b      	b.n	800a9d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a926:	2b01      	cmp	r3, #1
 800a928:	d137      	bne.n	800a99a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f002 fc79 	bl	800d228 <SDMMC_CmdAppCommand>
 800a936:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d02d      	beq.n	800a99a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a93e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a942:	e047      	b.n	800a9d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f002 fc6c 	bl	800d228 <SDMMC_CmdAppCommand>
 800a950:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <SD_PowerON+0x98>
    {
      return errorstate;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	e03b      	b.n	800a9d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	491e      	ldr	r1, [pc, #120]	; (800a9dc <SD_PowerON+0x118>)
 800a962:	4618      	mov	r0, r3
 800a964:	f002 fc82 	bl	800d26c <SDMMC_CmdAppOperCommand>
 800a968:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a974:	e02e      	b.n	800a9d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f002 fae8 	bl	800cf52 <SDIO_GetResponse>
 800a982:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	0fdb      	lsrs	r3, r3, #31
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d101      	bne.n	800a990 <SD_PowerON+0xcc>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e000      	b.n	800a992 <SD_PowerON+0xce>
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]

    count++;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	3301      	adds	r3, #1
 800a998:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d802      	bhi.n	800a9aa <SD_PowerON+0xe6>
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0cc      	beq.n	800a944 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d902      	bls.n	800a9ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a9b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9b8:	e00c      	b.n	800a9d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	645a      	str	r2, [r3, #68]	; 0x44
 800a9ca:	e002      	b.n	800a9d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	c1100000 	.word	0xc1100000

0800a9e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9f4:	e018      	b.n	800aa28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9fe:	041b      	lsls	r3, r3, #16
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f002 fcf6 	bl	800d3f4 <SDMMC_CmdSendStatus>
 800aa08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	e009      	b.n	800aa28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f002 fa99 	bl	800cf52 <SDIO_GetResponse>
 800aa20:	4602      	mov	r2, r0
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f002 fa83 	bl	800cf52 <SDIO_GetResponse>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa56:	d102      	bne.n	800aa5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa5c:	e02f      	b.n	800aabe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa5e:	f107 030c 	add.w	r3, r7, #12
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f879 	bl	800ab5c <SD_FindSCR>
 800aa6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	e023      	b.n	800aabe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01c      	beq.n	800aaba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	f002 fbcb 	bl	800d228 <SDMMC_CmdAppCommand>
 800aa92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	e00f      	b.n	800aabe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2102      	movs	r1, #2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f002 fc04 	bl	800d2b2 <SDMMC_CmdBusWidth>
 800aaaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	e003      	b.n	800aabe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	e001      	b.n	800aabe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aaba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2100      	movs	r1, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	f002 fa38 	bl	800cf52 <SDIO_GetResponse>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaec:	d102      	bne.n	800aaf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aaee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaf2:	e02f      	b.n	800ab54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f82e 	bl	800ab5c <SD_FindSCR>
 800ab00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	e023      	b.n	800ab54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01c      	beq.n	800ab50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1e:	041b      	lsls	r3, r3, #16
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f002 fb80 	bl	800d228 <SDMMC_CmdAppCommand>
 800ab28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	e00f      	b.n	800ab54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f002 fbb9 	bl	800d2b2 <SDMMC_CmdBusWidth>
 800ab40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	e003      	b.n	800ab54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e001      	b.n	800ab54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b08f      	sub	sp, #60	; 0x3c
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab66:	f7fb fd63 	bl	8006630 <HAL_GetTick>
 800ab6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ab70:	2300      	movs	r3, #0
 800ab72:	60bb      	str	r3, [r7, #8]
 800ab74:	2300      	movs	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2108      	movs	r1, #8
 800ab82:	4618      	mov	r0, r3
 800ab84:	f002 fa24 	bl	800cfd0 <SDMMC_CmdBlockLength>
 800ab88:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	e0a9      	b.n	800ace8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9c:	041b      	lsls	r3, r3, #16
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4610      	mov	r0, r2
 800aba2:	f002 fb41 	bl	800d228 <SDMMC_CmdAppCommand>
 800aba6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	e09a      	b.n	800ace8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
 800abb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800abb8:	2308      	movs	r3, #8
 800abba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800abbc:	2330      	movs	r3, #48	; 0x30
 800abbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800abc0:	2302      	movs	r3, #2
 800abc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800abc8:	2301      	movs	r3, #1
 800abca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f107 0210 	add.w	r2, r7, #16
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f002 f9ce 	bl	800cf78 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f002 fb88 	bl	800d2f6 <SDMMC_CmdSendSCR>
 800abe6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	2b00      	cmp	r3, #0
 800abec:	d022      	beq.n	800ac34 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	e07a      	b.n	800ace8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00e      	beq.n	800ac1e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	18d4      	adds	r4, r2, r3
 800ac0e:	4608      	mov	r0, r1
 800ac10:	f002 f92d 	bl	800ce6e <SDIO_ReadFIFO>
 800ac14:	4603      	mov	r3, r0
 800ac16:	6023      	str	r3, [r4, #0]
      index++;
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac1e:	f7fb fd07 	bl	8006630 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2c:	d102      	bne.n	800ac34 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac32:	e059      	b.n	800ace8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac3a:	f240 432a 	movw	r3, #1066	; 0x42a
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d0d6      	beq.n	800abf2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	f003 0308 	and.w	r3, r3, #8
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d005      	beq.n	800ac5e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2208      	movs	r2, #8
 800ac58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	e044      	b.n	800ace8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2202      	movs	r2, #2
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	e037      	b.n	800ace8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac8e:	2320      	movs	r3, #32
 800ac90:	e02a      	b.n	800ace8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	061a      	lsls	r2, r3, #24
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aca8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	0a1b      	lsrs	r3, r3, #8
 800acae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800acb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	0e1b      	lsrs	r3, r3, #24
 800acb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	601a      	str	r2, [r3, #0]
    scr++;
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	3304      	adds	r3, #4
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	061a      	lsls	r2, r3, #24
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	0e1b      	lsrs	r3, r3, #24
 800ace0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	373c      	adds	r7, #60	; 0x3c
 800acec:	46bd      	mov	sp, r7
 800acee:	bd90      	pop	{r4, r7, pc}

0800acf0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d03f      	beq.n	800ad8a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	e033      	b.n	800ad78 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 f8aa 	bl	800ce6e <SDIO_ReadFIFO>
 800ad1a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	0c1b      	lsrs	r3, r3, #16
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3301      	adds	r3, #1
 800ad54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	0e1b      	lsrs	r3, r3, #24
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b07      	cmp	r3, #7
 800ad7c:	d9c8      	bls.n	800ad10 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b086      	sub	sp, #24
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d043      	beq.n	800ae34 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]
 800adb0:	e037      	b.n	800ae22 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	3301      	adds	r3, #1
 800adbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	021a      	lsls	r2, r3, #8
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4313      	orrs	r3, r2
 800adce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	3301      	adds	r3, #1
 800add4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	3b01      	subs	r3, #1
 800adda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	041a      	lsls	r2, r3, #16
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3301      	adds	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	061a      	lsls	r2, r3, #24
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f107 0208 	add.w	r2, r7, #8
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f002 f836 	bl	800ce88 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b07      	cmp	r3, #7
 800ae26:	d9c4      	bls.n	800adb2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ae34:	bf00      	nop
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e056      	b.n	800aefc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fa f9b3 	bl	80051d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	431a      	orrs	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	ea42 0103 	orr.w	r1, r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	0c1b      	lsrs	r3, r3, #16
 800aecc:	f003 0104 	and.w	r1, r3, #4
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	69da      	ldr	r2, [r3, #28]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aeea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d101      	bne.n	800af26 <HAL_SPI_Transmit+0x22>
 800af22:	2302      	movs	r3, #2
 800af24:	e11e      	b.n	800b164 <HAL_SPI_Transmit+0x260>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af2e:	f7fb fb7f 	bl	8006630 <HAL_GetTick>
 800af32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b01      	cmp	r3, #1
 800af42:	d002      	beq.n	800af4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800af44:	2302      	movs	r3, #2
 800af46:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af48:	e103      	b.n	800b152 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <HAL_SPI_Transmit+0x52>
 800af50:	88fb      	ldrh	r3, [r7, #6]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af5a:	e0fa      	b.n	800b152 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2203      	movs	r2, #3
 800af60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	88fa      	ldrh	r2, [r7, #6]
 800af74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	88fa      	ldrh	r2, [r7, #6]
 800af7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa2:	d107      	bne.n	800afb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d007      	beq.n	800afd2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afda:	d14b      	bne.n	800b074 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <HAL_SPI_Transmit+0xe6>
 800afe4:	8afb      	ldrh	r3, [r7, #22]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d13e      	bne.n	800b068 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afee:	881a      	ldrh	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	1c9a      	adds	r2, r3, #2
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	b29a      	uxth	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b00e:	e02b      	b.n	800b068 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d112      	bne.n	800b044 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	881a      	ldrh	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	1c9a      	adds	r2, r3, #2
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	86da      	strh	r2, [r3, #54]	; 0x36
 800b042:	e011      	b.n	800b068 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b044:	f7fb faf4 	bl	8006630 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d803      	bhi.n	800b05c <HAL_SPI_Transmit+0x158>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05a:	d102      	bne.n	800b062 <HAL_SPI_Transmit+0x15e>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b066:	e074      	b.n	800b152 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1ce      	bne.n	800b010 <HAL_SPI_Transmit+0x10c>
 800b072:	e04c      	b.n	800b10e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <HAL_SPI_Transmit+0x17e>
 800b07c:	8afb      	ldrh	r3, [r7, #22]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d140      	bne.n	800b104 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	330c      	adds	r3, #12
 800b08c:	7812      	ldrb	r2, [r2, #0]
 800b08e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b0a8:	e02c      	b.n	800b104 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d113      	bne.n	800b0e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	330c      	adds	r3, #12
 800b0c2:	7812      	ldrb	r2, [r2, #0]
 800b0c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800b0de:	e011      	b.n	800b104 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e0:	f7fb faa6 	bl	8006630 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d803      	bhi.n	800b0f8 <HAL_SPI_Transmit+0x1f4>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f6:	d102      	bne.n	800b0fe <HAL_SPI_Transmit+0x1fa>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d102      	bne.n	800b104 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b102:	e026      	b.n	800b152 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1cd      	bne.n	800b0aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f000 fba4 	bl	800b860 <SPI_EndRxTxTransaction>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2220      	movs	r2, #32
 800b122:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b12c:	2300      	movs	r3, #0
 800b12e:	613b      	str	r3, [r7, #16]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	613b      	str	r3, [r7, #16]
 800b140:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e000      	b.n	800b152 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b150:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b162:	7ffb      	ldrb	r3, [r7, #31]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3720      	adds	r7, #32
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af02      	add	r7, sp, #8
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b188:	d112      	bne.n	800b1b0 <HAL_SPI_Receive+0x44>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10e      	bne.n	800b1b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2204      	movs	r2, #4
 800b196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b19a:	88fa      	ldrh	r2, [r7, #6]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f8e9 	bl	800b37e <HAL_SPI_TransmitReceive>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	e0e2      	b.n	800b376 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_SPI_Receive+0x52>
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e0db      	b.n	800b376 <HAL_SPI_Receive+0x20a>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1c6:	f7fb fa33 	bl	8006630 <HAL_GetTick>
 800b1ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d002      	beq.n	800b1de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b1dc:	e0c2      	b.n	800b364 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <HAL_SPI_Receive+0x7e>
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b1ee:	e0b9      	b.n	800b364 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	88fa      	ldrh	r2, [r7, #6]
 800b208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	88fa      	ldrh	r2, [r7, #6]
 800b20e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b236:	d107      	bne.n	800b248 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b246:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b252:	2b40      	cmp	r3, #64	; 0x40
 800b254:	d007      	beq.n	800b266 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b264:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d162      	bne.n	800b334 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b26e:	e02e      	b.n	800b2ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d115      	bne.n	800b2aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f103 020c 	add.w	r2, r3, #12
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2a8:	e011      	b.n	800b2ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2aa:	f7fb f9c1 	bl	8006630 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d803      	bhi.n	800b2c2 <HAL_SPI_Receive+0x156>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c0:	d102      	bne.n	800b2c8 <HAL_SPI_Receive+0x15c>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b2cc:	e04a      	b.n	800b364 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1cb      	bne.n	800b270 <HAL_SPI_Receive+0x104>
 800b2d8:	e031      	b.n	800b33e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d113      	bne.n	800b310 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	b292      	uxth	r2, r2
 800b2f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fa:	1c9a      	adds	r2, r3, #2
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b304:	b29b      	uxth	r3, r3
 800b306:	3b01      	subs	r3, #1
 800b308:	b29a      	uxth	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b30e:	e011      	b.n	800b334 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b310:	f7fb f98e 	bl	8006630 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d803      	bhi.n	800b328 <HAL_SPI_Receive+0x1bc>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b326:	d102      	bne.n	800b32e <HAL_SPI_Receive+0x1c2>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b332:	e017      	b.n	800b364 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1cd      	bne.n	800b2da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 fa27 	bl	800b796 <SPI_EndRxTransaction>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2220      	movs	r2, #32
 800b352:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	75fb      	strb	r3, [r7, #23]
 800b360:	e000      	b.n	800b364 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b374:	7dfb      	ldrb	r3, [r7, #23]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b08c      	sub	sp, #48	; 0x30
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
 800b38a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b38c:	2301      	movs	r3, #1
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_SPI_TransmitReceive+0x26>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e18a      	b.n	800b6ba <HAL_SPI_TransmitReceive+0x33c>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ac:	f7fb f940 	bl	8006630 <HAL_GetTick>
 800b3b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b3c2:	887b      	ldrh	r3, [r7, #2]
 800b3c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d00f      	beq.n	800b3ee <HAL_SPI_TransmitReceive+0x70>
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3d4:	d107      	bne.n	800b3e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d103      	bne.n	800b3e6 <HAL_SPI_TransmitReceive+0x68>
 800b3de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d003      	beq.n	800b3ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b3ec:	e15b      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <HAL_SPI_TransmitReceive+0x82>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <HAL_SPI_TransmitReceive+0x82>
 800b3fa:	887b      	ldrh	r3, [r7, #2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d103      	bne.n	800b408 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b406:	e14e      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b04      	cmp	r3, #4
 800b412:	d003      	beq.n	800b41c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2205      	movs	r2, #5
 800b418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	887a      	ldrh	r2, [r7, #2]
 800b42c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	887a      	ldrh	r2, [r7, #2]
 800b432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	887a      	ldrh	r2, [r7, #2]
 800b43e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	887a      	ldrh	r2, [r7, #2]
 800b444:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d007      	beq.n	800b470 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b46e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b478:	d178      	bne.n	800b56c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <HAL_SPI_TransmitReceive+0x10a>
 800b482:	8b7b      	ldrh	r3, [r7, #26]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d166      	bne.n	800b556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48c:	881a      	ldrh	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b498:	1c9a      	adds	r2, r3, #2
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4ac:	e053      	b.n	800b556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f003 0302 	and.w	r3, r3, #2
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d11b      	bne.n	800b4f4 <HAL_SPI_TransmitReceive+0x176>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d016      	beq.n	800b4f4 <HAL_SPI_TransmitReceive+0x176>
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d113      	bne.n	800b4f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	881a      	ldrh	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	1c9a      	adds	r2, r3, #2
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d119      	bne.n	800b536 <HAL_SPI_TransmitReceive+0x1b8>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b506:	b29b      	uxth	r3, r3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d014      	beq.n	800b536 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	b292      	uxth	r2, r2
 800b518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	1c9a      	adds	r2, r3, #2
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b528:	b29b      	uxth	r3, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b532:	2301      	movs	r3, #1
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b536:	f7fb f87b 	bl	8006630 <HAL_GetTick>
 800b53a:	4602      	mov	r2, r0
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b542:	429a      	cmp	r2, r3
 800b544:	d807      	bhi.n	800b556 <HAL_SPI_TransmitReceive+0x1d8>
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d003      	beq.n	800b556 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b554:	e0a7      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1a6      	bne.n	800b4ae <HAL_SPI_TransmitReceive+0x130>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b564:	b29b      	uxth	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1a1      	bne.n	800b4ae <HAL_SPI_TransmitReceive+0x130>
 800b56a:	e07c      	b.n	800b666 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <HAL_SPI_TransmitReceive+0x1fc>
 800b574:	8b7b      	ldrh	r3, [r7, #26]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d16b      	bne.n	800b652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	330c      	adds	r3, #12
 800b584:	7812      	ldrb	r2, [r2, #0]
 800b586:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b596:	b29b      	uxth	r3, r3
 800b598:	3b01      	subs	r3, #1
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5a0:	e057      	b.n	800b652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d11c      	bne.n	800b5ea <HAL_SPI_TransmitReceive+0x26c>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d017      	beq.n	800b5ea <HAL_SPI_TransmitReceive+0x26c>
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d114      	bne.n	800b5ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d119      	bne.n	800b62c <HAL_SPI_TransmitReceive+0x2ae>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d014      	beq.n	800b62c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68da      	ldr	r2, [r3, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60c:	b2d2      	uxtb	r2, r2
 800b60e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	1c5a      	adds	r2, r3, #1
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3b01      	subs	r3, #1
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b628:	2301      	movs	r3, #1
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b62c:	f7fb f800 	bl	8006630 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b638:	429a      	cmp	r2, r3
 800b63a:	d803      	bhi.n	800b644 <HAL_SPI_TransmitReceive+0x2c6>
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b642:	d102      	bne.n	800b64a <HAL_SPI_TransmitReceive+0x2cc>
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b650:	e029      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b656:	b29b      	uxth	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1a2      	bne.n	800b5a2 <HAL_SPI_TransmitReceive+0x224>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d19d      	bne.n	800b5a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 f8f8 	bl	800b860 <SPI_EndRxTxTransaction>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2220      	movs	r2, #32
 800b680:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b682:	e010      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10b      	bne.n	800b6a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	e000      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b6a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3730      	adds	r7, #48	; 0x30
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	60b9      	str	r1, [r7, #8]
 800b6cc:	603b      	str	r3, [r7, #0]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6d2:	e04c      	b.n	800b76e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d048      	beq.n	800b76e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b6dc:	f7fa ffa8 	bl	8006630 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d902      	bls.n	800b6f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d13d      	bne.n	800b76e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b70a:	d111      	bne.n	800b730 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b714:	d004      	beq.n	800b720 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71e:	d107      	bne.n	800b730 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b72e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b738:	d10f      	bne.n	800b75a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e00f      	b.n	800b78e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	4013      	ands	r3, r2
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	bf0c      	ite	eq
 800b77e:	2301      	moveq	r3, #1
 800b780:	2300      	movne	r3, #0
 800b782:	b2db      	uxtb	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d1a3      	bne.n	800b6d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af02      	add	r7, sp, #8
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7aa:	d111      	bne.n	800b7d0 <SPI_EndRxTransaction+0x3a>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b4:	d004      	beq.n	800b7c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7be:	d107      	bne.n	800b7d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7d8:	d12a      	bne.n	800b830 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e2:	d012      	beq.n	800b80a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2180      	movs	r1, #128	; 0x80
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff ff67 	bl	800b6c2 <SPI_WaitFlagStateUntilTimeout>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d02d      	beq.n	800b856 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fe:	f043 0220 	orr.w	r2, r3, #32
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e026      	b.n	800b858 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2200      	movs	r2, #0
 800b812:	2101      	movs	r1, #1
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff ff54 	bl	800b6c2 <SPI_WaitFlagStateUntilTimeout>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b824:	f043 0220 	orr.w	r2, r3, #32
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e013      	b.n	800b858 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2200      	movs	r2, #0
 800b838:	2101      	movs	r1, #1
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff ff41 	bl	800b6c2 <SPI_WaitFlagStateUntilTimeout>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d007      	beq.n	800b856 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84a:	f043 0220 	orr.w	r2, r3, #32
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e000      	b.n	800b858 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af02      	add	r7, sp, #8
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <SPI_EndRxTxTransaction+0x7c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a1b      	ldr	r2, [pc, #108]	; (800b8e0 <SPI_EndRxTxTransaction+0x80>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	0d5b      	lsrs	r3, r3, #21
 800b878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b87c:	fb02 f303 	mul.w	r3, r2, r3
 800b880:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b88a:	d112      	bne.n	800b8b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	2180      	movs	r1, #128	; 0x80
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff ff13 	bl	800b6c2 <SPI_WaitFlagStateUntilTimeout>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d016      	beq.n	800b8d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a6:	f043 0220 	orr.w	r2, r3, #32
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e00f      	b.n	800b8d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00a      	beq.n	800b8ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c8:	2b80      	cmp	r3, #128	; 0x80
 800b8ca:	d0f2      	beq.n	800b8b2 <SPI_EndRxTxTransaction+0x52>
 800b8cc:	e000      	b.n	800b8d0 <SPI_EndRxTxTransaction+0x70>
        break;
 800b8ce:	bf00      	nop
  }

  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20000000 	.word	0x20000000
 800b8e0:	165e9f81 	.word	0x165e9f81

0800b8e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e01d      	b.n	800b932 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7f9 fd1e 	bl	800534c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3304      	adds	r3, #4
 800b920:	4619      	mov	r1, r3
 800b922:	4610      	mov	r0, r2
 800b924:	f000 fb56 	bl	800bfd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f042 0201 	orr.w	r2, r2, #1
 800b950:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f003 0307 	and.w	r3, r3, #7
 800b95c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b06      	cmp	r3, #6
 800b962:	d007      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0201 	orr.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e01d      	b.n	800b9d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d106      	bne.n	800b9ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7f9 fc5b 	bl	8005264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3304      	adds	r3, #4
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	f000 fb07 	bl	800bfd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 fd42 	bl	800c474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a15      	ldr	r2, [pc, #84]	; (800ba4c <HAL_TIM_PWM_Start+0x74>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d004      	beq.n	800ba04 <HAL_TIM_PWM_Start+0x2c>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a14      	ldr	r2, [pc, #80]	; (800ba50 <HAL_TIM_PWM_Start+0x78>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d101      	bne.n	800ba08 <HAL_TIM_PWM_Start+0x30>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <HAL_TIM_PWM_Start+0x32>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d007      	beq.n	800ba1e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f003 0307 	and.w	r3, r3, #7
 800ba28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b06      	cmp	r3, #6
 800ba2e:	d007      	beq.n	800ba40 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f042 0201 	orr.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40010400 	.word	0x40010400

0800ba54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e083      	b.n	800bb70 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d106      	bne.n	800ba82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7f9 fcf5 	bl	800546c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2202      	movs	r2, #2
 800ba86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba98:	f023 0307 	bic.w	r3, r3, #7
 800ba9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3304      	adds	r3, #4
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f000 fa93 	bl	800bfd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	4313      	orrs	r3, r2
 800bace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	4313      	orrs	r3, r2
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4313      	orrs	r3, r2
 800baec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800baf4:	f023 030c 	bic.w	r3, r3, #12
 800baf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	4313      	orrs	r3, r2
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	011a      	lsls	r2, r3, #4
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	031b      	lsls	r3, r3, #12
 800bb24:	4313      	orrs	r3, r2
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4313      	orrs	r3, r2
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <HAL_TIM_Encoder_Start+0x16>
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d008      	beq.n	800bb9e <HAL_TIM_Encoder_Start+0x26>
 800bb8c:	e00f      	b.n	800bbae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2201      	movs	r2, #1
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 fc6c 	bl	800c474 <TIM_CCxChannelCmd>
      break;
 800bb9c:	e016      	b.n	800bbcc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2201      	movs	r2, #1
 800bba4:	2104      	movs	r1, #4
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 fc64 	bl	800c474 <TIM_CCxChannelCmd>
      break;
 800bbac:	e00e      	b.n	800bbcc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fc5c 	bl	800c474 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	2104      	movs	r1, #4
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 fc55 	bl	800c474 <TIM_CCxChannelCmd>
      break;
 800bbca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0201 	orr.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b082      	sub	sp, #8
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f003 0302 	and.w	r3, r3, #2
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d122      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f003 0302 	and.w	r3, r3, #2
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d11b      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f06f 0202 	mvn.w	r2, #2
 800bc12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f9b5 	bl	800bf98 <HAL_TIM_IC_CaptureCallback>
 800bc2e:	e005      	b.n	800bc3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9a7 	bl	800bf84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f9b8 	bl	800bfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d122      	bne.n	800bc96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d11b      	bne.n	800bc96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f06f 0204 	mvn.w	r2, #4
 800bc66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f98b 	bl	800bf98 <HAL_TIM_IC_CaptureCallback>
 800bc82:	e005      	b.n	800bc90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f97d 	bl	800bf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f98e 	bl	800bfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d122      	bne.n	800bcea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f003 0308 	and.w	r3, r3, #8
 800bcae:	2b08      	cmp	r3, #8
 800bcb0:	d11b      	bne.n	800bcea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f06f 0208 	mvn.w	r2, #8
 800bcba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f961 	bl	800bf98 <HAL_TIM_IC_CaptureCallback>
 800bcd6:	e005      	b.n	800bce4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f953 	bl	800bf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f964 	bl	800bfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	f003 0310 	and.w	r3, r3, #16
 800bcf4:	2b10      	cmp	r3, #16
 800bcf6:	d122      	bne.n	800bd3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f003 0310 	and.w	r3, r3, #16
 800bd02:	2b10      	cmp	r3, #16
 800bd04:	d11b      	bne.n	800bd3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f06f 0210 	mvn.w	r2, #16
 800bd0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2208      	movs	r2, #8
 800bd14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f937 	bl	800bf98 <HAL_TIM_IC_CaptureCallback>
 800bd2a:	e005      	b.n	800bd38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f929 	bl	800bf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f93a 	bl	800bfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10e      	bne.n	800bd6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d107      	bne.n	800bd6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f06f 0201 	mvn.w	r2, #1
 800bd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7f7 fecb 	bl	8003b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd74:	2b80      	cmp	r3, #128	; 0x80
 800bd76:	d10e      	bne.n	800bd96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd82:	2b80      	cmp	r3, #128	; 0x80
 800bd84:	d107      	bne.n	800bd96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fc6d 	bl	800c670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda0:	2b40      	cmp	r3, #64	; 0x40
 800bda2:	d10e      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdae:	2b40      	cmp	r3, #64	; 0x40
 800bdb0:	d107      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bdba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f8ff 	bl	800bfc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f003 0320 	and.w	r3, r3, #32
 800bdcc:	2b20      	cmp	r3, #32
 800bdce:	d10e      	bne.n	800bdee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b20      	cmp	r3, #32
 800bddc:	d107      	bne.n	800bdee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f06f 0220 	mvn.w	r2, #32
 800bde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fc37 	bl	800c65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d101      	bne.n	800be12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800be0e:	2302      	movs	r3, #2
 800be10:	e0b4      	b.n	800bf7c <HAL_TIM_PWM_ConfigChannel+0x184>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2202      	movs	r2, #2
 800be1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b0c      	cmp	r3, #12
 800be26:	f200 809f 	bhi.w	800bf68 <HAL_TIM_PWM_ConfigChannel+0x170>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be65 	.word	0x0800be65
 800be34:	0800bf69 	.word	0x0800bf69
 800be38:	0800bf69 	.word	0x0800bf69
 800be3c:	0800bf69 	.word	0x0800bf69
 800be40:	0800bea5 	.word	0x0800bea5
 800be44:	0800bf69 	.word	0x0800bf69
 800be48:	0800bf69 	.word	0x0800bf69
 800be4c:	0800bf69 	.word	0x0800bf69
 800be50:	0800bee7 	.word	0x0800bee7
 800be54:	0800bf69 	.word	0x0800bf69
 800be58:	0800bf69 	.word	0x0800bf69
 800be5c:	0800bf69 	.word	0x0800bf69
 800be60:	0800bf27 	.word	0x0800bf27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 f952 	bl	800c114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	699a      	ldr	r2, [r3, #24]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0208 	orr.w	r2, r2, #8
 800be7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f022 0204 	bic.w	r2, r2, #4
 800be8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6999      	ldr	r1, [r3, #24]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	691a      	ldr	r2, [r3, #16]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	619a      	str	r2, [r3, #24]
      break;
 800bea2:	e062      	b.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f9a2 	bl	800c1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	699a      	ldr	r2, [r3, #24]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6999      	ldr	r1, [r3, #24]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	021a      	lsls	r2, r3, #8
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	430a      	orrs	r2, r1
 800bee2:	619a      	str	r2, [r3, #24]
      break;
 800bee4:	e041      	b.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f9f7 	bl	800c2e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	69da      	ldr	r2, [r3, #28]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f042 0208 	orr.w	r2, r2, #8
 800bf00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	69da      	ldr	r2, [r3, #28]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f022 0204 	bic.w	r2, r2, #4
 800bf10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69d9      	ldr	r1, [r3, #28]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	691a      	ldr	r2, [r3, #16]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	430a      	orrs	r2, r1
 800bf22:	61da      	str	r2, [r3, #28]
      break;
 800bf24:	e021      	b.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 fa4b 	bl	800c3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	69da      	ldr	r2, [r3, #28]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69da      	ldr	r2, [r3, #28]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	69d9      	ldr	r1, [r3, #28]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	021a      	lsls	r2, r3, #8
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	61da      	str	r2, [r3, #28]
      break;
 800bf66:	e000      	b.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bf68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a40      	ldr	r2, [pc, #256]	; (800c0e8 <TIM_Base_SetConfig+0x114>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d013      	beq.n	800c014 <TIM_Base_SetConfig+0x40>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff2:	d00f      	beq.n	800c014 <TIM_Base_SetConfig+0x40>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a3d      	ldr	r2, [pc, #244]	; (800c0ec <TIM_Base_SetConfig+0x118>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d00b      	beq.n	800c014 <TIM_Base_SetConfig+0x40>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a3c      	ldr	r2, [pc, #240]	; (800c0f0 <TIM_Base_SetConfig+0x11c>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d007      	beq.n	800c014 <TIM_Base_SetConfig+0x40>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a3b      	ldr	r2, [pc, #236]	; (800c0f4 <TIM_Base_SetConfig+0x120>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d003      	beq.n	800c014 <TIM_Base_SetConfig+0x40>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a3a      	ldr	r2, [pc, #232]	; (800c0f8 <TIM_Base_SetConfig+0x124>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d108      	bne.n	800c026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c01a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a2f      	ldr	r2, [pc, #188]	; (800c0e8 <TIM_Base_SetConfig+0x114>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d02b      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c034:	d027      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a2c      	ldr	r2, [pc, #176]	; (800c0ec <TIM_Base_SetConfig+0x118>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d023      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a2b      	ldr	r2, [pc, #172]	; (800c0f0 <TIM_Base_SetConfig+0x11c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d01f      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a2a      	ldr	r2, [pc, #168]	; (800c0f4 <TIM_Base_SetConfig+0x120>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d01b      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a29      	ldr	r2, [pc, #164]	; (800c0f8 <TIM_Base_SetConfig+0x124>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d017      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a28      	ldr	r2, [pc, #160]	; (800c0fc <TIM_Base_SetConfig+0x128>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d013      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a27      	ldr	r2, [pc, #156]	; (800c100 <TIM_Base_SetConfig+0x12c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00f      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a26      	ldr	r2, [pc, #152]	; (800c104 <TIM_Base_SetConfig+0x130>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d00b      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a25      	ldr	r2, [pc, #148]	; (800c108 <TIM_Base_SetConfig+0x134>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d007      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a24      	ldr	r2, [pc, #144]	; (800c10c <TIM_Base_SetConfig+0x138>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d003      	beq.n	800c086 <TIM_Base_SetConfig+0xb2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a23      	ldr	r2, [pc, #140]	; (800c110 <TIM_Base_SetConfig+0x13c>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d108      	bne.n	800c098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c08c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	689a      	ldr	r2, [r3, #8]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a0a      	ldr	r2, [pc, #40]	; (800c0e8 <TIM_Base_SetConfig+0x114>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d003      	beq.n	800c0cc <TIM_Base_SetConfig+0xf8>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <TIM_Base_SetConfig+0x124>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d103      	bne.n	800c0d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	691a      	ldr	r2, [r3, #16]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	615a      	str	r2, [r3, #20]
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	40010000 	.word	0x40010000
 800c0ec:	40000400 	.word	0x40000400
 800c0f0:	40000800 	.word	0x40000800
 800c0f4:	40000c00 	.word	0x40000c00
 800c0f8:	40010400 	.word	0x40010400
 800c0fc:	40014000 	.word	0x40014000
 800c100:	40014400 	.word	0x40014400
 800c104:	40014800 	.word	0x40014800
 800c108:	40001800 	.word	0x40001800
 800c10c:	40001c00 	.word	0x40001c00
 800c110:	40002000 	.word	0x40002000

0800c114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	f023 0201 	bic.w	r2, r3, #1
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4313      	orrs	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f023 0302 	bic.w	r3, r3, #2
 800c15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	4313      	orrs	r3, r2
 800c166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a20      	ldr	r2, [pc, #128]	; (800c1ec <TIM_OC1_SetConfig+0xd8>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d003      	beq.n	800c178 <TIM_OC1_SetConfig+0x64>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a1f      	ldr	r2, [pc, #124]	; (800c1f0 <TIM_OC1_SetConfig+0xdc>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d10c      	bne.n	800c192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f023 0308 	bic.w	r3, r3, #8
 800c17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	4313      	orrs	r3, r2
 800c188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f023 0304 	bic.w	r3, r3, #4
 800c190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a15      	ldr	r2, [pc, #84]	; (800c1ec <TIM_OC1_SetConfig+0xd8>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_OC1_SetConfig+0x8e>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a14      	ldr	r2, [pc, #80]	; (800c1f0 <TIM_OC1_SetConfig+0xdc>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d111      	bne.n	800c1c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	621a      	str	r2, [r3, #32]
}
 800c1e0:	bf00      	nop
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40010400 	.word	0x40010400

0800c1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	f023 0210 	bic.w	r2, r3, #16
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4313      	orrs	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f023 0320 	bic.w	r3, r3, #32
 800c23e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	011b      	lsls	r3, r3, #4
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	4313      	orrs	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a22      	ldr	r2, [pc, #136]	; (800c2d8 <TIM_OC2_SetConfig+0xe4>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_OC2_SetConfig+0x68>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a21      	ldr	r2, [pc, #132]	; (800c2dc <TIM_OC2_SetConfig+0xe8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d10d      	bne.n	800c278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a17      	ldr	r2, [pc, #92]	; (800c2d8 <TIM_OC2_SetConfig+0xe4>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_OC2_SetConfig+0x94>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a16      	ldr	r2, [pc, #88]	; (800c2dc <TIM_OC2_SetConfig+0xe8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d113      	bne.n	800c2b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c28e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	621a      	str	r2, [r3, #32]
}
 800c2ca:	bf00      	nop
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40010400 	.word	0x40010400

0800c2e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	4313      	orrs	r3, r2
 800c334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a21      	ldr	r2, [pc, #132]	; (800c3c0 <TIM_OC3_SetConfig+0xe0>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d003      	beq.n	800c346 <TIM_OC3_SetConfig+0x66>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a20      	ldr	r2, [pc, #128]	; (800c3c4 <TIM_OC3_SetConfig+0xe4>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d10d      	bne.n	800c362 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c34c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	021b      	lsls	r3, r3, #8
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	4313      	orrs	r3, r2
 800c358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a16      	ldr	r2, [pc, #88]	; (800c3c0 <TIM_OC3_SetConfig+0xe0>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d003      	beq.n	800c372 <TIM_OC3_SetConfig+0x92>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a15      	ldr	r2, [pc, #84]	; (800c3c4 <TIM_OC3_SetConfig+0xe4>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d113      	bne.n	800c39a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	011b      	lsls	r3, r3, #4
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	4313      	orrs	r3, r2
 800c398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	621a      	str	r2, [r3, #32]
}
 800c3b4:	bf00      	nop
 800c3b6:	371c      	adds	r7, #28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400

0800c3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a12      	ldr	r2, [pc, #72]	; (800c46c <TIM_OC4_SetConfig+0xa4>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d003      	beq.n	800c430 <TIM_OC4_SetConfig+0x68>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a11      	ldr	r2, [pc, #68]	; (800c470 <TIM_OC4_SetConfig+0xa8>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d109      	bne.n	800c444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	019b      	lsls	r3, r3, #6
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	621a      	str	r2, [r3, #32]
}
 800c45e:	bf00      	nop
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	40010000 	.word	0x40010000
 800c470:	40010400 	.word	0x40010400

0800c474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c474:	b480      	push	{r7}
 800c476:	b087      	sub	sp, #28
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f003 031f 	and.w	r3, r3, #31
 800c486:	2201      	movs	r2, #1
 800c488:	fa02 f303 	lsl.w	r3, r2, r3
 800c48c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6a1a      	ldr	r2, [r3, #32]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	43db      	mvns	r3, r3
 800c496:	401a      	ands	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6a1a      	ldr	r2, [r3, #32]
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f003 031f 	and.w	r3, r3, #31
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	621a      	str	r2, [r3, #32]
}
 800c4b2:	bf00      	nop
 800c4b4:	371c      	adds	r7, #28
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d101      	bne.n	800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	e05a      	b.n	800c58e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a21      	ldr	r2, [pc, #132]	; (800c59c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d022      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c524:	d01d      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a1d      	ldr	r2, [pc, #116]	; (800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d018      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d013      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a1a      	ldr	r2, [pc, #104]	; (800c5a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d00e      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a18      	ldr	r2, [pc, #96]	; (800c5ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d009      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a17      	ldr	r2, [pc, #92]	; (800c5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d004      	beq.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a15      	ldr	r2, [pc, #84]	; (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d10c      	bne.n	800c57c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4313      	orrs	r3, r2
 800c572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	40010000 	.word	0x40010000
 800c5a0:	40000400 	.word	0x40000400
 800c5a4:	40000800 	.word	0x40000800
 800c5a8:	40000c00 	.word	0x40000c00
 800c5ac:	40010400 	.word	0x40010400
 800c5b0:	40014000 	.word	0x40014000
 800c5b4:	40001800 	.word	0x40001800

0800c5b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d101      	bne.n	800c5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	e03d      	b.n	800c650 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	4313      	orrs	r3, r2
 800c604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4313      	orrs	r3, r2
 800c612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	4313      	orrs	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e03f      	b.n	800c716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7f9 f808 	bl	80056c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2224      	movs	r2, #36	; 0x24
 800c6b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f829 	bl	800c720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	695a      	ldr	r2, [r3, #20]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2220      	movs	r2, #32
 800c710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	430a      	orrs	r2, r1
 800c73e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	431a      	orrs	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	4313      	orrs	r3, r2
 800c756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c762:	f023 030c 	bic.w	r3, r3, #12
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	430b      	orrs	r3, r1
 800c76e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c78e:	f040 818b 	bne.w	800caa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4ac1      	ldr	r2, [pc, #772]	; (800ca9c <UART_SetConfig+0x37c>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d005      	beq.n	800c7a8 <UART_SetConfig+0x88>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4abf      	ldr	r2, [pc, #764]	; (800caa0 <UART_SetConfig+0x380>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	f040 80bd 	bne.w	800c922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7a8:	f7fc fbcc 	bl	8008f44 <HAL_RCC_GetPCLK2Freq>
 800c7ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	461d      	mov	r5, r3
 800c7b2:	f04f 0600 	mov.w	r6, #0
 800c7b6:	46a8      	mov	r8, r5
 800c7b8:	46b1      	mov	r9, r6
 800c7ba:	eb18 0308 	adds.w	r3, r8, r8
 800c7be:	eb49 0409 	adc.w	r4, r9, r9
 800c7c2:	4698      	mov	r8, r3
 800c7c4:	46a1      	mov	r9, r4
 800c7c6:	eb18 0805 	adds.w	r8, r8, r5
 800c7ca:	eb49 0906 	adc.w	r9, r9, r6
 800c7ce:	f04f 0100 	mov.w	r1, #0
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c7da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c7de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c7e2:	4688      	mov	r8, r1
 800c7e4:	4691      	mov	r9, r2
 800c7e6:	eb18 0005 	adds.w	r0, r8, r5
 800c7ea:	eb49 0106 	adc.w	r1, r9, r6
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	461d      	mov	r5, r3
 800c7f4:	f04f 0600 	mov.w	r6, #0
 800c7f8:	196b      	adds	r3, r5, r5
 800c7fa:	eb46 0406 	adc.w	r4, r6, r6
 800c7fe:	461a      	mov	r2, r3
 800c800:	4623      	mov	r3, r4
 800c802:	f7f4 fa59 	bl	8000cb8 <__aeabi_uldivmod>
 800c806:	4603      	mov	r3, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	461a      	mov	r2, r3
 800c80c:	4ba5      	ldr	r3, [pc, #660]	; (800caa4 <UART_SetConfig+0x384>)
 800c80e:	fba3 2302 	umull	r2, r3, r3, r2
 800c812:	095b      	lsrs	r3, r3, #5
 800c814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	461d      	mov	r5, r3
 800c81c:	f04f 0600 	mov.w	r6, #0
 800c820:	46a9      	mov	r9, r5
 800c822:	46b2      	mov	sl, r6
 800c824:	eb19 0309 	adds.w	r3, r9, r9
 800c828:	eb4a 040a 	adc.w	r4, sl, sl
 800c82c:	4699      	mov	r9, r3
 800c82e:	46a2      	mov	sl, r4
 800c830:	eb19 0905 	adds.w	r9, r9, r5
 800c834:	eb4a 0a06 	adc.w	sl, sl, r6
 800c838:	f04f 0100 	mov.w	r1, #0
 800c83c:	f04f 0200 	mov.w	r2, #0
 800c840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c84c:	4689      	mov	r9, r1
 800c84e:	4692      	mov	sl, r2
 800c850:	eb19 0005 	adds.w	r0, r9, r5
 800c854:	eb4a 0106 	adc.w	r1, sl, r6
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	461d      	mov	r5, r3
 800c85e:	f04f 0600 	mov.w	r6, #0
 800c862:	196b      	adds	r3, r5, r5
 800c864:	eb46 0406 	adc.w	r4, r6, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4623      	mov	r3, r4
 800c86c:	f7f4 fa24 	bl	8000cb8 <__aeabi_uldivmod>
 800c870:	4603      	mov	r3, r0
 800c872:	460c      	mov	r4, r1
 800c874:	461a      	mov	r2, r3
 800c876:	4b8b      	ldr	r3, [pc, #556]	; (800caa4 <UART_SetConfig+0x384>)
 800c878:	fba3 1302 	umull	r1, r3, r3, r2
 800c87c:	095b      	lsrs	r3, r3, #5
 800c87e:	2164      	movs	r1, #100	; 0x64
 800c880:	fb01 f303 	mul.w	r3, r1, r3
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	3332      	adds	r3, #50	; 0x32
 800c88a:	4a86      	ldr	r2, [pc, #536]	; (800caa4 <UART_SetConfig+0x384>)
 800c88c:	fba2 2303 	umull	r2, r3, r2, r3
 800c890:	095b      	lsrs	r3, r3, #5
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c898:	4498      	add	r8, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	461d      	mov	r5, r3
 800c89e:	f04f 0600 	mov.w	r6, #0
 800c8a2:	46a9      	mov	r9, r5
 800c8a4:	46b2      	mov	sl, r6
 800c8a6:	eb19 0309 	adds.w	r3, r9, r9
 800c8aa:	eb4a 040a 	adc.w	r4, sl, sl
 800c8ae:	4699      	mov	r9, r3
 800c8b0:	46a2      	mov	sl, r4
 800c8b2:	eb19 0905 	adds.w	r9, r9, r5
 800c8b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800c8ba:	f04f 0100 	mov.w	r1, #0
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	4692      	mov	sl, r2
 800c8d2:	eb19 0005 	adds.w	r0, r9, r5
 800c8d6:	eb4a 0106 	adc.w	r1, sl, r6
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	461d      	mov	r5, r3
 800c8e0:	f04f 0600 	mov.w	r6, #0
 800c8e4:	196b      	adds	r3, r5, r5
 800c8e6:	eb46 0406 	adc.w	r4, r6, r6
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	f7f4 f9e3 	bl	8000cb8 <__aeabi_uldivmod>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4b6a      	ldr	r3, [pc, #424]	; (800caa4 <UART_SetConfig+0x384>)
 800c8fa:	fba3 1302 	umull	r1, r3, r3, r2
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	2164      	movs	r1, #100	; 0x64
 800c902:	fb01 f303 	mul.w	r3, r1, r3
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	3332      	adds	r3, #50	; 0x32
 800c90c:	4a65      	ldr	r2, [pc, #404]	; (800caa4 <UART_SetConfig+0x384>)
 800c90e:	fba2 2303 	umull	r2, r3, r2, r3
 800c912:	095b      	lsrs	r3, r3, #5
 800c914:	f003 0207 	and.w	r2, r3, #7
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4442      	add	r2, r8
 800c91e:	609a      	str	r2, [r3, #8]
 800c920:	e26f      	b.n	800ce02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c922:	f7fc fafb 	bl	8008f1c <HAL_RCC_GetPCLK1Freq>
 800c926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	461d      	mov	r5, r3
 800c92c:	f04f 0600 	mov.w	r6, #0
 800c930:	46a8      	mov	r8, r5
 800c932:	46b1      	mov	r9, r6
 800c934:	eb18 0308 	adds.w	r3, r8, r8
 800c938:	eb49 0409 	adc.w	r4, r9, r9
 800c93c:	4698      	mov	r8, r3
 800c93e:	46a1      	mov	r9, r4
 800c940:	eb18 0805 	adds.w	r8, r8, r5
 800c944:	eb49 0906 	adc.w	r9, r9, r6
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c95c:	4688      	mov	r8, r1
 800c95e:	4691      	mov	r9, r2
 800c960:	eb18 0005 	adds.w	r0, r8, r5
 800c964:	eb49 0106 	adc.w	r1, r9, r6
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	461d      	mov	r5, r3
 800c96e:	f04f 0600 	mov.w	r6, #0
 800c972:	196b      	adds	r3, r5, r5
 800c974:	eb46 0406 	adc.w	r4, r6, r6
 800c978:	461a      	mov	r2, r3
 800c97a:	4623      	mov	r3, r4
 800c97c:	f7f4 f99c 	bl	8000cb8 <__aeabi_uldivmod>
 800c980:	4603      	mov	r3, r0
 800c982:	460c      	mov	r4, r1
 800c984:	461a      	mov	r2, r3
 800c986:	4b47      	ldr	r3, [pc, #284]	; (800caa4 <UART_SetConfig+0x384>)
 800c988:	fba3 2302 	umull	r2, r3, r3, r2
 800c98c:	095b      	lsrs	r3, r3, #5
 800c98e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	461d      	mov	r5, r3
 800c996:	f04f 0600 	mov.w	r6, #0
 800c99a:	46a9      	mov	r9, r5
 800c99c:	46b2      	mov	sl, r6
 800c99e:	eb19 0309 	adds.w	r3, r9, r9
 800c9a2:	eb4a 040a 	adc.w	r4, sl, sl
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	46a2      	mov	sl, r4
 800c9aa:	eb19 0905 	adds.w	r9, r9, r5
 800c9ae:	eb4a 0a06 	adc.w	sl, sl, r6
 800c9b2:	f04f 0100 	mov.w	r1, #0
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c9c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c9c6:	4689      	mov	r9, r1
 800c9c8:	4692      	mov	sl, r2
 800c9ca:	eb19 0005 	adds.w	r0, r9, r5
 800c9ce:	eb4a 0106 	adc.w	r1, sl, r6
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	461d      	mov	r5, r3
 800c9d8:	f04f 0600 	mov.w	r6, #0
 800c9dc:	196b      	adds	r3, r5, r5
 800c9de:	eb46 0406 	adc.w	r4, r6, r6
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	f7f4 f967 	bl	8000cb8 <__aeabi_uldivmod>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b2c      	ldr	r3, [pc, #176]	; (800caa4 <UART_SetConfig+0x384>)
 800c9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800c9f6:	095b      	lsrs	r3, r3, #5
 800c9f8:	2164      	movs	r1, #100	; 0x64
 800c9fa:	fb01 f303 	mul.w	r3, r1, r3
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	3332      	adds	r3, #50	; 0x32
 800ca04:	4a27      	ldr	r2, [pc, #156]	; (800caa4 <UART_SetConfig+0x384>)
 800ca06:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0a:	095b      	lsrs	r3, r3, #5
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca12:	4498      	add	r8, r3
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	461d      	mov	r5, r3
 800ca18:	f04f 0600 	mov.w	r6, #0
 800ca1c:	46a9      	mov	r9, r5
 800ca1e:	46b2      	mov	sl, r6
 800ca20:	eb19 0309 	adds.w	r3, r9, r9
 800ca24:	eb4a 040a 	adc.w	r4, sl, sl
 800ca28:	4699      	mov	r9, r3
 800ca2a:	46a2      	mov	sl, r4
 800ca2c:	eb19 0905 	adds.w	r9, r9, r5
 800ca30:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca34:	f04f 0100 	mov.w	r1, #0
 800ca38:	f04f 0200 	mov.w	r2, #0
 800ca3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca48:	4689      	mov	r9, r1
 800ca4a:	4692      	mov	sl, r2
 800ca4c:	eb19 0005 	adds.w	r0, r9, r5
 800ca50:	eb4a 0106 	adc.w	r1, sl, r6
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	461d      	mov	r5, r3
 800ca5a:	f04f 0600 	mov.w	r6, #0
 800ca5e:	196b      	adds	r3, r5, r5
 800ca60:	eb46 0406 	adc.w	r4, r6, r6
 800ca64:	461a      	mov	r2, r3
 800ca66:	4623      	mov	r3, r4
 800ca68:	f7f4 f926 	bl	8000cb8 <__aeabi_uldivmod>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	461a      	mov	r2, r3
 800ca72:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <UART_SetConfig+0x384>)
 800ca74:	fba3 1302 	umull	r1, r3, r3, r2
 800ca78:	095b      	lsrs	r3, r3, #5
 800ca7a:	2164      	movs	r1, #100	; 0x64
 800ca7c:	fb01 f303 	mul.w	r3, r1, r3
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	3332      	adds	r3, #50	; 0x32
 800ca86:	4a07      	ldr	r2, [pc, #28]	; (800caa4 <UART_SetConfig+0x384>)
 800ca88:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8c:	095b      	lsrs	r3, r3, #5
 800ca8e:	f003 0207 	and.w	r2, r3, #7
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4442      	add	r2, r8
 800ca98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ca9a:	e1b2      	b.n	800ce02 <UART_SetConfig+0x6e2>
 800ca9c:	40011000 	.word	0x40011000
 800caa0:	40011400 	.word	0x40011400
 800caa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4ad7      	ldr	r2, [pc, #860]	; (800ce0c <UART_SetConfig+0x6ec>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d005      	beq.n	800cabe <UART_SetConfig+0x39e>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4ad6      	ldr	r2, [pc, #856]	; (800ce10 <UART_SetConfig+0x6f0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	f040 80d1 	bne.w	800cc60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cabe:	f7fc fa41 	bl	8008f44 <HAL_RCC_GetPCLK2Freq>
 800cac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	469a      	mov	sl, r3
 800cac8:	f04f 0b00 	mov.w	fp, #0
 800cacc:	46d0      	mov	r8, sl
 800cace:	46d9      	mov	r9, fp
 800cad0:	eb18 0308 	adds.w	r3, r8, r8
 800cad4:	eb49 0409 	adc.w	r4, r9, r9
 800cad8:	4698      	mov	r8, r3
 800cada:	46a1      	mov	r9, r4
 800cadc:	eb18 080a 	adds.w	r8, r8, sl
 800cae0:	eb49 090b 	adc.w	r9, r9, fp
 800cae4:	f04f 0100 	mov.w	r1, #0
 800cae8:	f04f 0200 	mov.w	r2, #0
 800caec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800caf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800caf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800caf8:	4688      	mov	r8, r1
 800cafa:	4691      	mov	r9, r2
 800cafc:	eb1a 0508 	adds.w	r5, sl, r8
 800cb00:	eb4b 0609 	adc.w	r6, fp, r9
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f04f 0200 	mov.w	r2, #0
 800cb0e:	f04f 0300 	mov.w	r3, #0
 800cb12:	f04f 0400 	mov.w	r4, #0
 800cb16:	0094      	lsls	r4, r2, #2
 800cb18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb1c:	008b      	lsls	r3, r1, #2
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4623      	mov	r3, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	4631      	mov	r1, r6
 800cb26:	f7f4 f8c7 	bl	8000cb8 <__aeabi_uldivmod>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4bb8      	ldr	r3, [pc, #736]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cb32:	fba3 2302 	umull	r2, r3, r3, r2
 800cb36:	095b      	lsrs	r3, r3, #5
 800cb38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	469b      	mov	fp, r3
 800cb40:	f04f 0c00 	mov.w	ip, #0
 800cb44:	46d9      	mov	r9, fp
 800cb46:	46e2      	mov	sl, ip
 800cb48:	eb19 0309 	adds.w	r3, r9, r9
 800cb4c:	eb4a 040a 	adc.w	r4, sl, sl
 800cb50:	4699      	mov	r9, r3
 800cb52:	46a2      	mov	sl, r4
 800cb54:	eb19 090b 	adds.w	r9, r9, fp
 800cb58:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb5c:	f04f 0100 	mov.w	r1, #0
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb70:	4689      	mov	r9, r1
 800cb72:	4692      	mov	sl, r2
 800cb74:	eb1b 0509 	adds.w	r5, fp, r9
 800cb78:	eb4c 060a 	adc.w	r6, ip, sl
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4619      	mov	r1, r3
 800cb82:	f04f 0200 	mov.w	r2, #0
 800cb86:	f04f 0300 	mov.w	r3, #0
 800cb8a:	f04f 0400 	mov.w	r4, #0
 800cb8e:	0094      	lsls	r4, r2, #2
 800cb90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb94:	008b      	lsls	r3, r1, #2
 800cb96:	461a      	mov	r2, r3
 800cb98:	4623      	mov	r3, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	f7f4 f88b 	bl	8000cb8 <__aeabi_uldivmod>
 800cba2:	4603      	mov	r3, r0
 800cba4:	460c      	mov	r4, r1
 800cba6:	461a      	mov	r2, r3
 800cba8:	4b9a      	ldr	r3, [pc, #616]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cbaa:	fba3 1302 	umull	r1, r3, r3, r2
 800cbae:	095b      	lsrs	r3, r3, #5
 800cbb0:	2164      	movs	r1, #100	; 0x64
 800cbb2:	fb01 f303 	mul.w	r3, r1, r3
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	3332      	adds	r3, #50	; 0x32
 800cbbc:	4a95      	ldr	r2, [pc, #596]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cbbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc2:	095b      	lsrs	r3, r3, #5
 800cbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbc8:	4498      	add	r8, r3
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	469b      	mov	fp, r3
 800cbce:	f04f 0c00 	mov.w	ip, #0
 800cbd2:	46d9      	mov	r9, fp
 800cbd4:	46e2      	mov	sl, ip
 800cbd6:	eb19 0309 	adds.w	r3, r9, r9
 800cbda:	eb4a 040a 	adc.w	r4, sl, sl
 800cbde:	4699      	mov	r9, r3
 800cbe0:	46a2      	mov	sl, r4
 800cbe2:	eb19 090b 	adds.w	r9, r9, fp
 800cbe6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cbea:	f04f 0100 	mov.w	r1, #0
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cbfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbfe:	4689      	mov	r9, r1
 800cc00:	4692      	mov	sl, r2
 800cc02:	eb1b 0509 	adds.w	r5, fp, r9
 800cc06:	eb4c 060a 	adc.w	r6, ip, sl
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	f04f 0300 	mov.w	r3, #0
 800cc18:	f04f 0400 	mov.w	r4, #0
 800cc1c:	0094      	lsls	r4, r2, #2
 800cc1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cc22:	008b      	lsls	r3, r1, #2
 800cc24:	461a      	mov	r2, r3
 800cc26:	4623      	mov	r3, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	f7f4 f844 	bl	8000cb8 <__aeabi_uldivmod>
 800cc30:	4603      	mov	r3, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	461a      	mov	r2, r3
 800cc36:	4b77      	ldr	r3, [pc, #476]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cc38:	fba3 1302 	umull	r1, r3, r3, r2
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	2164      	movs	r1, #100	; 0x64
 800cc40:	fb01 f303 	mul.w	r3, r1, r3
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	3332      	adds	r3, #50	; 0x32
 800cc4a:	4a72      	ldr	r2, [pc, #456]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc50:	095b      	lsrs	r3, r3, #5
 800cc52:	f003 020f 	and.w	r2, r3, #15
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4442      	add	r2, r8
 800cc5c:	609a      	str	r2, [r3, #8]
 800cc5e:	e0d0      	b.n	800ce02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc60:	f7fc f95c 	bl	8008f1c <HAL_RCC_GetPCLK1Freq>
 800cc64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	469a      	mov	sl, r3
 800cc6a:	f04f 0b00 	mov.w	fp, #0
 800cc6e:	46d0      	mov	r8, sl
 800cc70:	46d9      	mov	r9, fp
 800cc72:	eb18 0308 	adds.w	r3, r8, r8
 800cc76:	eb49 0409 	adc.w	r4, r9, r9
 800cc7a:	4698      	mov	r8, r3
 800cc7c:	46a1      	mov	r9, r4
 800cc7e:	eb18 080a 	adds.w	r8, r8, sl
 800cc82:	eb49 090b 	adc.w	r9, r9, fp
 800cc86:	f04f 0100 	mov.w	r1, #0
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cc92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cc96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cc9a:	4688      	mov	r8, r1
 800cc9c:	4691      	mov	r9, r2
 800cc9e:	eb1a 0508 	adds.w	r5, sl, r8
 800cca2:	eb4b 0609 	adc.w	r6, fp, r9
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f04f 0200 	mov.w	r2, #0
 800ccb0:	f04f 0300 	mov.w	r3, #0
 800ccb4:	f04f 0400 	mov.w	r4, #0
 800ccb8:	0094      	lsls	r4, r2, #2
 800ccba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ccbe:	008b      	lsls	r3, r1, #2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	4631      	mov	r1, r6
 800ccc8:	f7f3 fff6 	bl	8000cb8 <__aeabi_uldivmod>
 800cccc:	4603      	mov	r3, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4b50      	ldr	r3, [pc, #320]	; (800ce14 <UART_SetConfig+0x6f4>)
 800ccd4:	fba3 2302 	umull	r2, r3, r3, r2
 800ccd8:	095b      	lsrs	r3, r3, #5
 800ccda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	469b      	mov	fp, r3
 800cce2:	f04f 0c00 	mov.w	ip, #0
 800cce6:	46d9      	mov	r9, fp
 800cce8:	46e2      	mov	sl, ip
 800ccea:	eb19 0309 	adds.w	r3, r9, r9
 800ccee:	eb4a 040a 	adc.w	r4, sl, sl
 800ccf2:	4699      	mov	r9, r3
 800ccf4:	46a2      	mov	sl, r4
 800ccf6:	eb19 090b 	adds.w	r9, r9, fp
 800ccfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ccfe:	f04f 0100 	mov.w	r1, #0
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd12:	4689      	mov	r9, r1
 800cd14:	4692      	mov	sl, r2
 800cd16:	eb1b 0509 	adds.w	r5, fp, r9
 800cd1a:	eb4c 060a 	adc.w	r6, ip, sl
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	4619      	mov	r1, r3
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f04f 0400 	mov.w	r4, #0
 800cd30:	0094      	lsls	r4, r2, #2
 800cd32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd36:	008b      	lsls	r3, r1, #2
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	4631      	mov	r1, r6
 800cd40:	f7f3 ffba 	bl	8000cb8 <__aeabi_uldivmod>
 800cd44:	4603      	mov	r3, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4b32      	ldr	r3, [pc, #200]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cd4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd50:	095b      	lsrs	r3, r3, #5
 800cd52:	2164      	movs	r1, #100	; 0x64
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	011b      	lsls	r3, r3, #4
 800cd5c:	3332      	adds	r3, #50	; 0x32
 800cd5e:	4a2d      	ldr	r2, [pc, #180]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cd60:	fba2 2303 	umull	r2, r3, r2, r3
 800cd64:	095b      	lsrs	r3, r3, #5
 800cd66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd6a:	4498      	add	r8, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	469b      	mov	fp, r3
 800cd70:	f04f 0c00 	mov.w	ip, #0
 800cd74:	46d9      	mov	r9, fp
 800cd76:	46e2      	mov	sl, ip
 800cd78:	eb19 0309 	adds.w	r3, r9, r9
 800cd7c:	eb4a 040a 	adc.w	r4, sl, sl
 800cd80:	4699      	mov	r9, r3
 800cd82:	46a2      	mov	sl, r4
 800cd84:	eb19 090b 	adds.w	r9, r9, fp
 800cd88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd8c:	f04f 0100 	mov.w	r1, #0
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cda0:	4689      	mov	r9, r1
 800cda2:	4692      	mov	sl, r2
 800cda4:	eb1b 0509 	adds.w	r5, fp, r9
 800cda8:	eb4c 060a 	adc.w	r6, ip, sl
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	f04f 0400 	mov.w	r4, #0
 800cdbe:	0094      	lsls	r4, r2, #2
 800cdc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdc4:	008b      	lsls	r3, r1, #2
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4623      	mov	r3, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	4631      	mov	r1, r6
 800cdce:	f7f3 ff73 	bl	8000cb8 <__aeabi_uldivmod>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cdda:	fba3 1302 	umull	r1, r3, r3, r2
 800cdde:	095b      	lsrs	r3, r3, #5
 800cde0:	2164      	movs	r1, #100	; 0x64
 800cde2:	fb01 f303 	mul.w	r3, r1, r3
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	3332      	adds	r3, #50	; 0x32
 800cdec:	4a09      	ldr	r2, [pc, #36]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	095b      	lsrs	r3, r3, #5
 800cdf4:	f003 020f 	and.w	r2, r3, #15
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4442      	add	r2, r8
 800cdfe:	609a      	str	r2, [r3, #8]
}
 800ce00:	e7ff      	b.n	800ce02 <UART_SetConfig+0x6e2>
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0c:	40011000 	.word	0x40011000
 800ce10:	40011400 	.word	0x40011400
 800ce14:	51eb851f 	.word	0x51eb851f

0800ce18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ce18:	b084      	sub	sp, #16
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	f107 001c 	add.w	r0, r7, #28
 800ce26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ce2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ce30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ce32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ce36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ce3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ce3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ce42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ce52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	b004      	add	sp, #16
 800ce6c:	4770      	bx	lr

0800ce6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2203      	movs	r2, #3
 800ceb6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ceb8:	2002      	movs	r0, #2
 800ceba:	f7f9 fbc5 	bl	8006648 <HAL_Delay>
  
  return HAL_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0303 	and.w	r3, r3, #3
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cf08:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cf0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cf1e:	f023 030f 	bic.w	r3, r3, #15
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	431a      	orrs	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	b2db      	uxtb	r3, r3
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3314      	adds	r3, #20
 800cf60:	461a      	mov	r2, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	4413      	add	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
}  
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cfa4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cfaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	431a      	orrs	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0

}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cfde:	2310      	movs	r3, #16
 800cfe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfe2:	2340      	movs	r3, #64	; 0x40
 800cfe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cff0:	f107 0308 	add.w	r3, r7, #8
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff ff74 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d000:	2110      	movs	r1, #16
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 fa40 	bl	800d488 <SDMMC_GetCmdResp1>
 800d008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d00a:	69fb      	ldr	r3, [r7, #28]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3720      	adds	r7, #32
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d022:	2311      	movs	r3, #17
 800d024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d026:	2340      	movs	r3, #64	; 0x40
 800d028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d02a:	2300      	movs	r3, #0
 800d02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d034:	f107 0308 	add.w	r3, r7, #8
 800d038:	4619      	mov	r1, r3
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ff52 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d040:	f241 3288 	movw	r2, #5000	; 0x1388
 800d044:	2111      	movs	r1, #17
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa1e 	bl	800d488 <SDMMC_GetCmdResp1>
 800d04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d04e:	69fb      	ldr	r3, [r7, #28]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d066:	2312      	movs	r3, #18
 800d068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d06a:	2340      	movs	r3, #64	; 0x40
 800d06c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d06e:	2300      	movs	r3, #0
 800d070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff ff30 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d084:	f241 3288 	movw	r2, #5000	; 0x1388
 800d088:	2112      	movs	r1, #18
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f9fc 	bl	800d488 <SDMMC_GetCmdResp1>
 800d090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d092:	69fb      	ldr	r3, [r7, #28]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3720      	adds	r7, #32
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b088      	sub	sp, #32
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d0aa:	2318      	movs	r3, #24
 800d0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0ae:	2340      	movs	r3, #64	; 0x40
 800d0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0bc:	f107 0308 	add.w	r3, r7, #8
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff ff0e 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0cc:	2118      	movs	r1, #24
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f9da 	bl	800d488 <SDMMC_GetCmdResp1>
 800d0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d0ee:	2319      	movs	r3, #25
 800d0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0f2:	2340      	movs	r3, #64	; 0x40
 800d0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d100:	f107 0308 	add.w	r3, r7, #8
 800d104:	4619      	mov	r1, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff feec 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d110:	2119      	movs	r1, #25
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f9b8 	bl	800d488 <SDMMC_GetCmdResp1>
 800d118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11a:	69fb      	ldr	r3, [r7, #28]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3720      	adds	r7, #32
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d130:	230c      	movs	r3, #12
 800d132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d138:	2300      	movs	r3, #0
 800d13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d142:	f107 0308 	add.w	r3, r7, #8
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff fecb 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d14e:	4a05      	ldr	r2, [pc, #20]	; (800d164 <SDMMC_CmdStopTransfer+0x40>)
 800d150:	210c      	movs	r1, #12
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f998 	bl	800d488 <SDMMC_GetCmdResp1>
 800d158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15a:	69fb      	ldr	r3, [r7, #28]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	05f5e100 	.word	0x05f5e100

0800d168 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08a      	sub	sp, #40	; 0x28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d178:	2307      	movs	r3, #7
 800d17a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d17c:	2340      	movs	r3, #64	; 0x40
 800d17e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d180:	2300      	movs	r3, #0
 800d182:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d188:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d18a:	f107 0310 	add.w	r3, r7, #16
 800d18e:	4619      	mov	r1, r3
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff fea7 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d196:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19a:	2107      	movs	r1, #7
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 f973 	bl	800d488 <SDMMC_GetCmdResp1>
 800d1a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3728      	adds	r7, #40	; 0x28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b088      	sub	sp, #32
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1cc:	f107 0308 	add.w	r3, r7, #8
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fe86 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f92d 	bl	800d438 <SDMMC_GetCmdError>
 800d1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b088      	sub	sp, #32
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d1f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d1f8:	2308      	movs	r3, #8
 800d1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d200:	2300      	movs	r3, #0
 800d202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d208:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d20a:	f107 0308 	add.w	r3, r7, #8
 800d20e:	4619      	mov	r1, r3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff fe67 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fb16 	bl	800d848 <SDMMC_GetCmdResp7>
 800d21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d21e:	69fb      	ldr	r3, [r7, #28]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3720      	adds	r7, #32
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d236:	2337      	movs	r3, #55	; 0x37
 800d238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d23a:	2340      	movs	r3, #64	; 0x40
 800d23c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d246:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d248:	f107 0308 	add.w	r3, r7, #8
 800d24c:	4619      	mov	r1, r3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7ff fe48 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d254:	f241 3288 	movw	r2, #5000	; 0x1388
 800d258:	2137      	movs	r1, #55	; 0x37
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f914 	bl	800d488 <SDMMC_GetCmdResp1>
 800d260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d262:	69fb      	ldr	r3, [r7, #28]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3720      	adds	r7, #32
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d282:	2329      	movs	r3, #41	; 0x29
 800d284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d286:	2340      	movs	r3, #64	; 0x40
 800d288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d294:	f107 0308 	add.w	r3, r7, #8
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff fe22 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fa23 	bl	800d6ec <SDMMC_GetCmdResp3>
 800d2a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3720      	adds	r7, #32
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b088      	sub	sp, #32
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d2c0:	2306      	movs	r3, #6
 800d2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2c4:	2340      	movs	r3, #64	; 0x40
 800d2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2d2:	f107 0308 	add.w	r3, r7, #8
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff fe03 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e2:	2106      	movs	r1, #6
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f8cf 	bl	800d488 <SDMMC_GetCmdResp1>
 800d2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3720      	adds	r7, #32
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b088      	sub	sp, #32
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d302:	2333      	movs	r3, #51	; 0x33
 800d304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d306:	2340      	movs	r3, #64	; 0x40
 800d308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d30a:	2300      	movs	r3, #0
 800d30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d314:	f107 0308 	add.w	r3, r7, #8
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff fde2 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d320:	f241 3288 	movw	r2, #5000	; 0x1388
 800d324:	2133      	movs	r1, #51	; 0x33
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f8ae 	bl	800d488 <SDMMC_GetCmdResp1>
 800d32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d32e:	69fb      	ldr	r3, [r7, #28]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3720      	adds	r7, #32
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d340:	2300      	movs	r3, #0
 800d342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d344:	2302      	movs	r3, #2
 800d346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d348:	23c0      	movs	r3, #192	; 0xc0
 800d34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d356:	f107 0308 	add.w	r3, r7, #8
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fdc1 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f97c 	bl	800d660 <SDMMC_GetCmdResp2>
 800d368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d382:	2309      	movs	r3, #9
 800d384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d386:	23c0      	movs	r3, #192	; 0xc0
 800d388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fda2 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f95d 	bl	800d660 <SDMMC_GetCmdResp2>
 800d3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b088      	sub	sp, #32
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3c4:	2340      	movs	r3, #64	; 0x40
 800d3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3d2:	f107 0308 	add.w	r3, r7, #8
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff fd83 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	2103      	movs	r1, #3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f9bc 	bl	800d760 <SDMMC_GetCmdResp6>
 800d3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3720      	adds	r7, #32
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d402:	230d      	movs	r3, #13
 800d404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d406:	2340      	movs	r3, #64	; 0x40
 800d408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d414:	f107 0308 	add.w	r3, r7, #8
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fd62 	bl	800cee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d420:	f241 3288 	movw	r2, #5000	; 0x1388
 800d424:	210d      	movs	r1, #13
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f82e 	bl	800d488 <SDMMC_GetCmdResp1>
 800d42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d42e:	69fb      	ldr	r3, [r7, #28]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3720      	adds	r7, #32
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d438:	b490      	push	{r4, r7}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <SDMMC_GetCmdError+0x48>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a0f      	ldr	r2, [pc, #60]	; (800d484 <SDMMC_GetCmdError+0x4c>)
 800d446:	fba2 2303 	umull	r2, r3, r2, r3
 800d44a:	0a5b      	lsrs	r3, r3, #9
 800d44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d450:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d454:	4623      	mov	r3, r4
 800d456:	1e5c      	subs	r4, r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d45c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d460:	e009      	b.n	800d476 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0f2      	beq.n	800d454 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	22c5      	movs	r2, #197	; 0xc5
 800d472:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bc90      	pop	{r4, r7}
 800d47e:	4770      	bx	lr
 800d480:	20000000 	.word	0x20000000
 800d484:	10624dd3 	.word	0x10624dd3

0800d488 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d488:	b590      	push	{r4, r7, lr}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	460b      	mov	r3, r1
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d496:	4b6f      	ldr	r3, [pc, #444]	; (800d654 <SDMMC_GetCmdResp1+0x1cc>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a6f      	ldr	r2, [pc, #444]	; (800d658 <SDMMC_GetCmdResp1+0x1d0>)
 800d49c:	fba2 2303 	umull	r2, r3, r2, r3
 800d4a0:	0a5b      	lsrs	r3, r3, #9
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	1e5c      	subs	r4, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4b4:	e0c9      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0f0      	beq.n	800d4a8 <SDMMC_GetCmdResp1+0x20>
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1eb      	bne.n	800d4a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d004      	beq.n	800d4e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2204      	movs	r2, #4
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4e2:	2304      	movs	r3, #4
 800d4e4:	e0b1      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d004      	beq.n	800d4fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e0a6      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	22c5      	movs	r2, #197	; 0xc5
 800d500:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f7ff fd18 	bl	800cf38 <SDIO_GetCommandResponse>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	7afb      	ldrb	r3, [r7, #11]
 800d50e:	4293      	cmp	r3, r2
 800d510:	d001      	beq.n	800d516 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d512:	2301      	movs	r3, #1
 800d514:	e099      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d516:	2100      	movs	r1, #0
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7ff fd1a 	bl	800cf52 <SDIO_GetResponse>
 800d51e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	4b4e      	ldr	r3, [pc, #312]	; (800d65c <SDMMC_GetCmdResp1+0x1d4>)
 800d524:	4013      	ands	r3, r2
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d52a:	2300      	movs	r3, #0
 800d52c:	e08d      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	da02      	bge.n	800d53a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d538:	e087      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d001      	beq.n	800d548 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d544:	2340      	movs	r3, #64	; 0x40
 800d546:	e080      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d552:	2380      	movs	r3, #128	; 0x80
 800d554:	e079      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d560:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d564:	e071      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d570:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d574:	e069      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d584:	e061      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d594:	e059      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d5a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5a4:	e051      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5b4:	e049      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d5c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d5c4:	e041      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5d4:	e039      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d5e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5e4:	e031      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d5f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d5f4:	e029      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d600:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d604:	e021      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d614:	e019      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d624:	e011      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d634:	e009      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	f003 0308 	and.w	r3, r3, #8
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d640:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d644:	e001      	b.n	800d64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd90      	pop	{r4, r7, pc}
 800d652:	bf00      	nop
 800d654:	20000000 	.word	0x20000000
 800d658:	10624dd3 	.word	0x10624dd3
 800d65c:	fdffe008 	.word	0xfdffe008

0800d660 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d660:	b490      	push	{r4, r7}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d668:	4b1e      	ldr	r3, [pc, #120]	; (800d6e4 <SDMMC_GetCmdResp2+0x84>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a1e      	ldr	r2, [pc, #120]	; (800d6e8 <SDMMC_GetCmdResp2+0x88>)
 800d66e:	fba2 2303 	umull	r2, r3, r2, r3
 800d672:	0a5b      	lsrs	r3, r3, #9
 800d674:	f241 3288 	movw	r2, #5000	; 0x1388
 800d678:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d67c:	4623      	mov	r3, r4
 800d67e:	1e5c      	subs	r4, r3, #1
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d688:	e026      	b.n	800d6d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0f0      	beq.n	800d67c <SDMMC_GetCmdResp2+0x1c>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1eb      	bne.n	800d67c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2204      	movs	r2, #4
 800d6b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6b6:	2304      	movs	r3, #4
 800d6b8:	e00e      	b.n	800d6d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d004      	beq.n	800d6d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e003      	b.n	800d6d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	22c5      	movs	r2, #197	; 0xc5
 800d6d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bc90      	pop	{r4, r7}
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20000000 	.word	0x20000000
 800d6e8:	10624dd3 	.word	0x10624dd3

0800d6ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d6ec:	b490      	push	{r4, r7}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6f4:	4b18      	ldr	r3, [pc, #96]	; (800d758 <SDMMC_GetCmdResp3+0x6c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a18      	ldr	r2, [pc, #96]	; (800d75c <SDMMC_GetCmdResp3+0x70>)
 800d6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fe:	0a5b      	lsrs	r3, r3, #9
 800d700:	f241 3288 	movw	r2, #5000	; 0x1388
 800d704:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d708:	4623      	mov	r3, r4
 800d70a:	1e5c      	subs	r4, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d714:	e01b      	b.n	800d74e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0f0      	beq.n	800d708 <SDMMC_GetCmdResp3+0x1c>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1eb      	bne.n	800d708 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2204      	movs	r2, #4
 800d740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d742:	2304      	movs	r3, #4
 800d744:	e003      	b.n	800d74e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	22c5      	movs	r2, #197	; 0xc5
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bc90      	pop	{r4, r7}
 800d756:	4770      	bx	lr
 800d758:	20000000 	.word	0x20000000
 800d75c:	10624dd3 	.word	0x10624dd3

0800d760 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d760:	b590      	push	{r4, r7, lr}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	460b      	mov	r3, r1
 800d76a:	607a      	str	r2, [r7, #4]
 800d76c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d76e:	4b34      	ldr	r3, [pc, #208]	; (800d840 <SDMMC_GetCmdResp6+0xe0>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a34      	ldr	r2, [pc, #208]	; (800d844 <SDMMC_GetCmdResp6+0xe4>)
 800d774:	fba2 2303 	umull	r2, r3, r2, r3
 800d778:	0a5b      	lsrs	r3, r3, #9
 800d77a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d77e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d782:	4623      	mov	r3, r4
 800d784:	1e5c      	subs	r4, r3, #1
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d78a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d78e:	e052      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d794:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d0f0      	beq.n	800d782 <SDMMC_GetCmdResp6+0x22>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1eb      	bne.n	800d782 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ae:	f003 0304 	and.w	r3, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d004      	beq.n	800d7c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2204      	movs	r2, #4
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7bc:	2304      	movs	r3, #4
 800d7be:	e03a      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e02f      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff fbae 	bl	800cf38 <SDIO_GetCommandResponse>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	461a      	mov	r2, r3
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d001      	beq.n	800d7ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e025      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	22c5      	movs	r2, #197	; 0xc5
 800d7ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f7ff fbad 	bl	800cf52 <SDIO_GetResponse>
 800d7f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d800:	2b00      	cmp	r3, #0
 800d802:	d106      	bne.n	800d812 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	0c1b      	lsrs	r3, r3, #16
 800d808:	b29a      	uxth	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d80e:	2300      	movs	r3, #0
 800d810:	e011      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d81c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d820:	e009      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d830:	e001      	b.n	800d836 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d836:	4618      	mov	r0, r3
 800d838:	371c      	adds	r7, #28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd90      	pop	{r4, r7, pc}
 800d83e:	bf00      	nop
 800d840:	20000000 	.word	0x20000000
 800d844:	10624dd3 	.word	0x10624dd3

0800d848 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d848:	b490      	push	{r4, r7}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d850:	4b21      	ldr	r3, [pc, #132]	; (800d8d8 <SDMMC_GetCmdResp7+0x90>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a21      	ldr	r2, [pc, #132]	; (800d8dc <SDMMC_GetCmdResp7+0x94>)
 800d856:	fba2 2303 	umull	r2, r3, r2, r3
 800d85a:	0a5b      	lsrs	r3, r3, #9
 800d85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d860:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d864:	4623      	mov	r3, r4
 800d866:	1e5c      	subs	r4, r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d870:	e02c      	b.n	800d8cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d876:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0f0      	beq.n	800d864 <SDMMC_GetCmdResp7+0x1c>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1eb      	bne.n	800d864 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2204      	movs	r2, #4
 800d89c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d89e:	2304      	movs	r3, #4
 800d8a0:	e014      	b.n	800d8cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e009      	b.n	800d8cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2240      	movs	r2, #64	; 0x40
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d8ca:	2300      	movs	r3, #0
  
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bc90      	pop	{r4, r7}
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	20000000 	.word	0x20000000
 800d8dc:	10624dd3 	.word	0x10624dd3

0800d8e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d8e4:	4904      	ldr	r1, [pc, #16]	; (800d8f8 <MX_FATFS_Init+0x18>)
 800d8e6:	4805      	ldr	r0, [pc, #20]	; (800d8fc <MX_FATFS_Init+0x1c>)
 800d8e8:	f003 fba0 	bl	801102c <FATFS_LinkDriver>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4b03      	ldr	r3, [pc, #12]	; (800d900 <MX_FATFS_Init+0x20>)
 800d8f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d8f4:	bf00      	nop
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	200393b0 	.word	0x200393b0
 800d8fc:	08017348 	.word	0x08017348
 800d900:	200393ac 	.word	0x200393ac

0800d904 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d908:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d91e:	f000 f896 	bl	800da4e <BSP_SD_IsDetected>
 800d922:	4603      	mov	r3, r0
 800d924:	2b01      	cmp	r3, #1
 800d926:	d001      	beq.n	800d92c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e012      	b.n	800d952 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d92c:	480b      	ldr	r0, [pc, #44]	; (800d95c <BSP_SD_Init+0x48>)
 800d92e:	f7fb ff9d 	bl	800986c <HAL_SD_Init>
 800d932:	4603      	mov	r3, r0
 800d934:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d109      	bne.n	800d950 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d93c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d940:	4806      	ldr	r0, [pc, #24]	; (800d95c <BSP_SD_Init+0x48>)
 800d942:	f7fc fd47 	bl	800a3d4 <HAL_SD_ConfigWideBusOperation>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d950:	79fb      	ldrb	r3, [r7, #7]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	200391a8 	.word	0x200391a8

0800d960 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	68f9      	ldr	r1, [r7, #12]
 800d976:	4806      	ldr	r0, [pc, #24]	; (800d990 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d978:	f7fc f808 	bl	800998c <HAL_SD_ReadBlocks_DMA>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d986:	7dfb      	ldrb	r3, [r7, #23]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	200391a8 	.word	0x200391a8

0800d994 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	68f9      	ldr	r1, [r7, #12]
 800d9aa:	4806      	ldr	r0, [pc, #24]	; (800d9c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d9ac:	f7fc f8d6 	bl	8009b5c <HAL_SD_WriteBlocks_DMA>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200391a8 	.word	0x200391a8

0800d9c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d9cc:	4805      	ldr	r0, [pc, #20]	; (800d9e4 <BSP_SD_GetCardState+0x1c>)
 800d9ce:	f7fc fd7d 	bl	800a4cc <HAL_SD_GetCardState>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b04      	cmp	r3, #4
 800d9d6:	bf14      	ite	ne
 800d9d8:	2301      	movne	r3, #1
 800d9da:	2300      	moveq	r3, #0
 800d9dc:	b2db      	uxtb	r3, r3
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	200391a8 	.word	0x200391a8

0800d9e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	4803      	ldr	r0, [pc, #12]	; (800da00 <BSP_SD_GetCardInfo+0x18>)
 800d9f4:	f7fc fcc2 	bl	800a37c <HAL_SD_GetCardInfo>
}
 800d9f8:	bf00      	nop
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	200391a8 	.word	0x200391a8

0800da04 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800da0c:	f000 f818 	bl	800da40 <BSP_SD_AbortCallback>
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800da20:	f000 f9a8 	bl	800dd74 <BSP_SD_WriteCpltCallback>
}
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800da34:	f000 f9aa 	bl	800dd8c <BSP_SD_ReadCpltCallback>
}
 800da38:	bf00      	nop
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0

}
 800da44:	bf00      	nop
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da54:	2301      	movs	r3, #1
 800da56:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800da58:	f000 f80c 	bl	800da74 <BSP_PlatformIsDetected>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800da62:	2300      	movs	r3, #0
 800da64:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	b2db      	uxtb	r3, r3
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
	...

0800da74 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800da7a:	2301      	movs	r3, #1
 800da7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800da7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da82:	4806      	ldr	r0, [pc, #24]	; (800da9c <BSP_PlatformIsDetected+0x28>)
 800da84:	f7fa f85e 	bl	8007b44 <HAL_GPIO_ReadPin>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800da8e:	2300      	movs	r3, #0
 800da90:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800da92:	79fb      	ldrb	r3, [r7, #7]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	40020000 	.word	0x40020000

0800daa0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800daa8:	f7f8 fdc2 	bl	8006630 <HAL_GetTick>
 800daac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800daae:	e006      	b.n	800dabe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dab0:	f7ff ff8a 	bl	800d9c8 <BSP_SD_GetCardState>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	e009      	b.n	800dad2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dabe:	f7f8 fdb7 	bl	8006630 <HAL_GetTick>
 800dac2:	4602      	mov	r2, r0
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d8f0      	bhi.n	800dab0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dace:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
	...

0800dadc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	4603      	mov	r3, r0
 800dae4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <SD_CheckStatus+0x38>)
 800dae8:	2201      	movs	r2, #1
 800daea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800daec:	f7ff ff6c 	bl	800d9c8 <BSP_SD_GetCardState>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d107      	bne.n	800db06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800daf6:	4b07      	ldr	r3, [pc, #28]	; (800db14 <SD_CheckStatus+0x38>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	f023 0301 	bic.w	r3, r3, #1
 800db00:	b2da      	uxtb	r2, r3
 800db02:	4b04      	ldr	r3, [pc, #16]	; (800db14 <SD_CheckStatus+0x38>)
 800db04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db06:	4b03      	ldr	r3, [pc, #12]	; (800db14 <SD_CheckStatus+0x38>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b2db      	uxtb	r3, r3
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	20000009 	.word	0x20000009

0800db18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	4603      	mov	r3, r0
 800db20:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800db22:	f7ff fef7 	bl	800d914 <BSP_SD_Init>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d107      	bne.n	800db3c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff ffd4 	bl	800dadc <SD_CheckStatus>
 800db34:	4603      	mov	r3, r0
 800db36:	461a      	mov	r2, r3
 800db38:	4b04      	ldr	r3, [pc, #16]	; (800db4c <SD_initialize+0x34>)
 800db3a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800db3c:	4b03      	ldr	r3, [pc, #12]	; (800db4c <SD_initialize+0x34>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	b2db      	uxtb	r3, r3
}
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20000009 	.word	0x20000009

0800db50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	4603      	mov	r3, r0
 800db58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800db5a:	79fb      	ldrb	r3, [r7, #7]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff ffbd 	bl	800dadc <SD_CheckStatus>
 800db62:	4603      	mov	r3, r0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60b9      	str	r1, [r7, #8]
 800db74:	607a      	str	r2, [r7, #4]
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800db80:	f247 5030 	movw	r0, #30000	; 0x7530
 800db84:	f7ff ff8c 	bl	800daa0 <SD_CheckStatusWithTimeout>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da01      	bge.n	800db92 <SD_read+0x26>
  {
    return res;
 800db8e:	7dfb      	ldrb	r3, [r7, #23]
 800db90:	e03b      	b.n	800dc0a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	68b8      	ldr	r0, [r7, #8]
 800db98:	f7ff fee2 	bl	800d960 <BSP_SD_ReadBlocks_DMA>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d132      	bne.n	800dc08 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dba2:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <SD_read+0xa8>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dba8:	f7f8 fd42 	bl	8006630 <HAL_GetTick>
 800dbac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dbae:	bf00      	nop
 800dbb0:	4b18      	ldr	r3, [pc, #96]	; (800dc14 <SD_read+0xa8>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <SD_read+0x5e>
 800dbb8:	f7f8 fd3a 	bl	8006630 <HAL_GetTick>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	f247 522f 	movw	r2, #29999	; 0x752f
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d9f2      	bls.n	800dbb0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800dbca:	4b12      	ldr	r3, [pc, #72]	; (800dc14 <SD_read+0xa8>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d102      	bne.n	800dbd8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	75fb      	strb	r3, [r7, #23]
 800dbd6:	e017      	b.n	800dc08 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800dbd8:	4b0e      	ldr	r3, [pc, #56]	; (800dc14 <SD_read+0xa8>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dbde:	f7f8 fd27 	bl	8006630 <HAL_GetTick>
 800dbe2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dbe4:	e007      	b.n	800dbf6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dbe6:	f7ff feef 	bl	800d9c8 <BSP_SD_GetCardState>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d102      	bne.n	800dbf6 <SD_read+0x8a>
          {
            res = RES_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dbf4:	e008      	b.n	800dc08 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dbf6:	f7f8 fd1b 	bl	8006630 <HAL_GetTick>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	f247 522f 	movw	r2, #29999	; 0x752f
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d9ee      	bls.n	800dbe6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	20036a44 	.word	0x20036a44

0800dc18 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60b9      	str	r1, [r7, #8]
 800dc20:	607a      	str	r2, [r7, #4]
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	4603      	mov	r3, r0
 800dc26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800dc2c:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <SD_write+0xa8>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dc32:	f247 5030 	movw	r0, #30000	; 0x7530
 800dc36:	f7ff ff33 	bl	800daa0 <SD_CheckStatusWithTimeout>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da01      	bge.n	800dc44 <SD_write+0x2c>
  {
    return res;
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	e038      	b.n	800dcb6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	68b8      	ldr	r0, [r7, #8]
 800dc4a:	f7ff fea3 	bl	800d994 <BSP_SD_WriteBlocks_DMA>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d12f      	bne.n	800dcb4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dc54:	f7f8 fcec 	bl	8006630 <HAL_GetTick>
 800dc58:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dc5a:	bf00      	nop
 800dc5c:	4b18      	ldr	r3, [pc, #96]	; (800dcc0 <SD_write+0xa8>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d108      	bne.n	800dc76 <SD_write+0x5e>
 800dc64:	f7f8 fce4 	bl	8006630 <HAL_GetTick>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	f247 522f 	movw	r2, #29999	; 0x752f
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d9f2      	bls.n	800dc5c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800dc76:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <SD_write+0xa8>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d102      	bne.n	800dc84 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	75fb      	strb	r3, [r7, #23]
 800dc82:	e017      	b.n	800dcb4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800dc84:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <SD_write+0xa8>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dc8a:	f7f8 fcd1 	bl	8006630 <HAL_GetTick>
 800dc8e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dc90:	e007      	b.n	800dca2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc92:	f7ff fe99 	bl	800d9c8 <BSP_SD_GetCardState>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d102      	bne.n	800dca2 <SD_write+0x8a>
          {
            res = RES_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	75fb      	strb	r3, [r7, #23]
            break;
 800dca0:	e008      	b.n	800dcb4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dca2:	f7f8 fcc5 	bl	8006630 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d9ee      	bls.n	800dc92 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20036a40 	.word	0x20036a40

0800dcc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08c      	sub	sp, #48	; 0x30
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	603a      	str	r2, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dcda:	4b25      	ldr	r3, [pc, #148]	; (800dd70 <SD_ioctl+0xac>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <SD_ioctl+0x28>
 800dce8:	2303      	movs	r3, #3
 800dcea:	e03c      	b.n	800dd66 <SD_ioctl+0xa2>

  switch (cmd)
 800dcec:	79bb      	ldrb	r3, [r7, #6]
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d834      	bhi.n	800dd5c <SD_ioctl+0x98>
 800dcf2:	a201      	add	r2, pc, #4	; (adr r2, 800dcf8 <SD_ioctl+0x34>)
 800dcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf8:	0800dd09 	.word	0x0800dd09
 800dcfc:	0800dd11 	.word	0x0800dd11
 800dd00:	0800dd29 	.word	0x0800dd29
 800dd04:	0800dd43 	.word	0x0800dd43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd0e:	e028      	b.n	800dd62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd10:	f107 030c 	add.w	r3, r7, #12
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7ff fe67 	bl	800d9e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd26:	e01c      	b.n	800dd62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd28:	f107 030c 	add.w	r3, r7, #12
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fe5b 	bl	800d9e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd40:	e00f      	b.n	800dd62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd42:	f107 030c 	add.w	r3, r7, #12
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fe4e 	bl	800d9e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	0a5a      	lsrs	r2, r3, #9
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd5a:	e002      	b.n	800dd62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dd5c:	2304      	movs	r3, #4
 800dd5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dd62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3730      	adds	r7, #48	; 0x30
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000009 	.word	0x20000009

0800dd74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800dd78:	4b03      	ldr	r3, [pc, #12]	; (800dd88 <BSP_SD_WriteCpltCallback+0x14>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]
}
 800dd7e:	bf00      	nop
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	20036a40 	.word	0x20036a40

0800dd8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800dd90:	4b03      	ldr	r3, [pc, #12]	; (800dda0 <BSP_SD_ReadCpltCallback+0x14>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	601a      	str	r2, [r3, #0]
}
 800dd96:	bf00      	nop
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr
 800dda0:	20036a44 	.word	0x20036a44

0800dda4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	4a08      	ldr	r2, [pc, #32]	; (800ddd4 <disk_status+0x30>)
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	79fa      	ldrb	r2, [r7, #7]
 800ddbc:	4905      	ldr	r1, [pc, #20]	; (800ddd4 <disk_status+0x30>)
 800ddbe:	440a      	add	r2, r1
 800ddc0:	7a12      	ldrb	r2, [r2, #8]
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	4798      	blx	r3
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	20036a70 	.word	0x20036a70

0800ddd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	4603      	mov	r3, r0
 800dde0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dde6:	79fb      	ldrb	r3, [r7, #7]
 800dde8:	4a0d      	ldr	r2, [pc, #52]	; (800de20 <disk_initialize+0x48>)
 800ddea:	5cd3      	ldrb	r3, [r2, r3]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d111      	bne.n	800de14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	4a0b      	ldr	r2, [pc, #44]	; (800de20 <disk_initialize+0x48>)
 800ddf4:	2101      	movs	r1, #1
 800ddf6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	4a09      	ldr	r2, [pc, #36]	; (800de20 <disk_initialize+0x48>)
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	79fa      	ldrb	r2, [r7, #7]
 800de06:	4906      	ldr	r1, [pc, #24]	; (800de20 <disk_initialize+0x48>)
 800de08:	440a      	add	r2, r1
 800de0a:	7a12      	ldrb	r2, [r2, #8]
 800de0c:	4610      	mov	r0, r2
 800de0e:	4798      	blx	r3
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20036a70 	.word	0x20036a70

0800de24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	607a      	str	r2, [r7, #4]
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	4603      	mov	r3, r0
 800de32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de34:	7bfb      	ldrb	r3, [r7, #15]
 800de36:	4a0a      	ldr	r2, [pc, #40]	; (800de60 <disk_read+0x3c>)
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	689c      	ldr	r4, [r3, #8]
 800de40:	7bfb      	ldrb	r3, [r7, #15]
 800de42:	4a07      	ldr	r2, [pc, #28]	; (800de60 <disk_read+0x3c>)
 800de44:	4413      	add	r3, r2
 800de46:	7a18      	ldrb	r0, [r3, #8]
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	68b9      	ldr	r1, [r7, #8]
 800de4e:	47a0      	blx	r4
 800de50:	4603      	mov	r3, r0
 800de52:	75fb      	strb	r3, [r7, #23]
  return res;
 800de54:	7dfb      	ldrb	r3, [r7, #23]
}
 800de56:	4618      	mov	r0, r3
 800de58:	371c      	adds	r7, #28
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd90      	pop	{r4, r7, pc}
 800de5e:	bf00      	nop
 800de60:	20036a70 	.word	0x20036a70

0800de64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800de64:	b590      	push	{r4, r7, lr}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	4603      	mov	r3, r0
 800de72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	4a0a      	ldr	r2, [pc, #40]	; (800dea0 <disk_write+0x3c>)
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4413      	add	r3, r2
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	68dc      	ldr	r4, [r3, #12]
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	4a07      	ldr	r2, [pc, #28]	; (800dea0 <disk_write+0x3c>)
 800de84:	4413      	add	r3, r2
 800de86:	7a18      	ldrb	r0, [r3, #8]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	68b9      	ldr	r1, [r7, #8]
 800de8e:	47a0      	blx	r4
 800de90:	4603      	mov	r3, r0
 800de92:	75fb      	strb	r3, [r7, #23]
  return res;
 800de94:	7dfb      	ldrb	r3, [r7, #23]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd90      	pop	{r4, r7, pc}
 800de9e:	bf00      	nop
 800dea0:	20036a70 	.word	0x20036a70

0800dea4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	603a      	str	r2, [r7, #0]
 800deae:	71fb      	strb	r3, [r7, #7]
 800deb0:	460b      	mov	r3, r1
 800deb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	4a09      	ldr	r2, [pc, #36]	; (800dedc <disk_ioctl+0x38>)
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	691b      	ldr	r3, [r3, #16]
 800dec0:	79fa      	ldrb	r2, [r7, #7]
 800dec2:	4906      	ldr	r1, [pc, #24]	; (800dedc <disk_ioctl+0x38>)
 800dec4:	440a      	add	r2, r1
 800dec6:	7a10      	ldrb	r0, [r2, #8]
 800dec8:	79b9      	ldrb	r1, [r7, #6]
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	4798      	blx	r3
 800dece:	4603      	mov	r3, r0
 800ded0:	73fb      	strb	r3, [r7, #15]
  return res;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20036a70 	.word	0x20036a70

0800dee0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3301      	adds	r3, #1
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800def0:	89fb      	ldrh	r3, [r7, #14]
 800def2:	021b      	lsls	r3, r3, #8
 800def4:	b21a      	sxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	b21b      	sxth	r3, r3
 800defc:	4313      	orrs	r3, r2
 800defe:	b21b      	sxth	r3, r3
 800df00:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df02:	89fb      	ldrh	r3, [r7, #14]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3303      	adds	r3, #3
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	021b      	lsls	r3, r3, #8
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	3202      	adds	r2, #2
 800df28:	7812      	ldrb	r2, [r2, #0]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	021b      	lsls	r3, r3, #8
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	3201      	adds	r2, #1
 800df36:	7812      	ldrb	r2, [r2, #0]
 800df38:	4313      	orrs	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	021b      	lsls	r3, r3, #8
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	7812      	ldrb	r2, [r2, #0]
 800df44:	4313      	orrs	r3, r2
 800df46:	60fb      	str	r3, [r7, #12]
	return rv;
 800df48:	68fb      	ldr	r3, [r7, #12]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	460b      	mov	r3, r1
 800df60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	887a      	ldrh	r2, [r7, #2]
 800df6a:	b2d2      	uxtb	r2, r2
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	887b      	ldrh	r3, [r7, #2]
 800df70:	0a1b      	lsrs	r3, r3, #8
 800df72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	607a      	str	r2, [r7, #4]
 800df7a:	887a      	ldrh	r2, [r7, #2]
 800df7c:	b2d2      	uxtb	r2, r2
 800df7e:	701a      	strb	r2, [r3, #0]
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	607a      	str	r2, [r7, #4]
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	b2d2      	uxtb	r2, r2
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	0a1b      	lsrs	r3, r3, #8
 800dfa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	b2d2      	uxtb	r2, r2
 800dfb2:	701a      	strb	r2, [r3, #0]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	0a1b      	lsrs	r3, r3, #8
 800dfb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	b2d2      	uxtb	r2, r2
 800dfc4:	701a      	strb	r2, [r3, #0]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	0a1b      	lsrs	r3, r3, #8
 800dfca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	607a      	str	r2, [r7, #4]
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	b2d2      	uxtb	r2, r2
 800dfd6:	701a      	strb	r2, [r3, #0]
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00d      	beq.n	800e01a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	1c53      	adds	r3, r2, #1
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	1c59      	adds	r1, r3, #1
 800e008:	6179      	str	r1, [r7, #20]
 800e00a:	7812      	ldrb	r2, [r2, #0]
 800e00c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3b01      	subs	r3, #1
 800e012:	607b      	str	r3, [r7, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1f1      	bne.n	800dffe <mem_cpy+0x1a>
	}
}
 800e01a:	bf00      	nop
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e026:	b480      	push	{r7}
 800e028:	b087      	sub	sp, #28
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	617a      	str	r2, [r7, #20]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	b2d2      	uxtb	r2, r2
 800e040:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	3b01      	subs	r3, #1
 800e046:	607b      	str	r3, [r7, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1f3      	bne.n	800e036 <mem_set+0x10>
}
 800e04e:	bf00      	nop
 800e050:	371c      	adds	r7, #28
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e05a:	b480      	push	{r7}
 800e05c:	b089      	sub	sp, #36	; 0x24
 800e05e:	af00      	add	r7, sp, #0
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	60b9      	str	r1, [r7, #8]
 800e064:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	61fb      	str	r3, [r7, #28]
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	61fa      	str	r2, [r7, #28]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	4619      	mov	r1, r3
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	61ba      	str	r2, [r7, #24]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	1acb      	subs	r3, r1, r3
 800e086:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	607b      	str	r3, [r7, #4]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <mem_cmp+0x40>
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0eb      	beq.n	800e072 <mem_cmp+0x18>

	return r;
 800e09a:	697b      	ldr	r3, [r7, #20]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3724      	adds	r7, #36	; 0x24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e0b2:	e002      	b.n	800e0ba <chk_chr+0x12>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	607b      	str	r3, [r7, #4]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d005      	beq.n	800e0ce <chk_chr+0x26>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d1f2      	bne.n	800e0b4 <chk_chr+0xc>
	return *str;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
	...

0800e0e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60bb      	str	r3, [r7, #8]
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	e029      	b.n	800e148 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e0f4:	4a27      	ldr	r2, [pc, #156]	; (800e194 <chk_lock+0xb4>)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	4413      	add	r3, r2
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d01d      	beq.n	800e13e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e102:	4a24      	ldr	r2, [pc, #144]	; (800e194 <chk_lock+0xb4>)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	011b      	lsls	r3, r3, #4
 800e108:	4413      	add	r3, r2
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	429a      	cmp	r2, r3
 800e112:	d116      	bne.n	800e142 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e114:	4a1f      	ldr	r2, [pc, #124]	; (800e194 <chk_lock+0xb4>)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	4413      	add	r3, r2
 800e11c:	3304      	adds	r3, #4
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e124:	429a      	cmp	r2, r3
 800e126:	d10c      	bne.n	800e142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e128:	4a1a      	ldr	r2, [pc, #104]	; (800e194 <chk_lock+0xb4>)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	011b      	lsls	r3, r3, #4
 800e12e:	4413      	add	r3, r2
 800e130:	3308      	adds	r3, #8
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e138:	429a      	cmp	r2, r3
 800e13a:	d102      	bne.n	800e142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e13c:	e007      	b.n	800e14e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e13e:	2301      	movs	r3, #1
 800e140:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3301      	adds	r3, #1
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d9d2      	bls.n	800e0f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b02      	cmp	r3, #2
 800e152:	d109      	bne.n	800e168 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d102      	bne.n	800e160 <chk_lock+0x80>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d101      	bne.n	800e164 <chk_lock+0x84>
 800e160:	2300      	movs	r3, #0
 800e162:	e010      	b.n	800e186 <chk_lock+0xa6>
 800e164:	2312      	movs	r3, #18
 800e166:	e00e      	b.n	800e186 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d108      	bne.n	800e180 <chk_lock+0xa0>
 800e16e:	4a09      	ldr	r2, [pc, #36]	; (800e194 <chk_lock+0xb4>)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	011b      	lsls	r3, r3, #4
 800e174:	4413      	add	r3, r2
 800e176:	330c      	adds	r3, #12
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e17e:	d101      	bne.n	800e184 <chk_lock+0xa4>
 800e180:	2310      	movs	r3, #16
 800e182:	e000      	b.n	800e186 <chk_lock+0xa6>
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	20036a50 	.word	0x20036a50

0800e198 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	607b      	str	r3, [r7, #4]
 800e1a2:	e002      	b.n	800e1aa <enq_lock+0x12>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	607b      	str	r3, [r7, #4]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d806      	bhi.n	800e1be <enq_lock+0x26>
 800e1b0:	4a09      	ldr	r2, [pc, #36]	; (800e1d8 <enq_lock+0x40>)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	011b      	lsls	r3, r3, #4
 800e1b6:	4413      	add	r3, r2
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1f2      	bne.n	800e1a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	bf14      	ite	ne
 800e1c4:	2301      	movne	r3, #1
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	20036a50 	.word	0x20036a50

0800e1dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	e01f      	b.n	800e22c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e1ec:	4a41      	ldr	r2, [pc, #260]	; (800e2f4 <inc_lock+0x118>)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	011b      	lsls	r3, r3, #4
 800e1f2:	4413      	add	r3, r2
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d113      	bne.n	800e226 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e1fe:	4a3d      	ldr	r2, [pc, #244]	; (800e2f4 <inc_lock+0x118>)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	4413      	add	r3, r2
 800e206:	3304      	adds	r3, #4
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e20e:	429a      	cmp	r2, r3
 800e210:	d109      	bne.n	800e226 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e212:	4a38      	ldr	r2, [pc, #224]	; (800e2f4 <inc_lock+0x118>)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	011b      	lsls	r3, r3, #4
 800e218:	4413      	add	r3, r2
 800e21a:	3308      	adds	r3, #8
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e222:	429a      	cmp	r2, r3
 800e224:	d006      	beq.n	800e234 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d9dc      	bls.n	800e1ec <inc_lock+0x10>
 800e232:	e000      	b.n	800e236 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e234:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d132      	bne.n	800e2a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e23c:	2300      	movs	r3, #0
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e002      	b.n	800e248 <inc_lock+0x6c>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d806      	bhi.n	800e25c <inc_lock+0x80>
 800e24e:	4a29      	ldr	r2, [pc, #164]	; (800e2f4 <inc_lock+0x118>)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	4413      	add	r3, r2
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f2      	bne.n	800e242 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d101      	bne.n	800e266 <inc_lock+0x8a>
 800e262:	2300      	movs	r3, #0
 800e264:	e040      	b.n	800e2e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	4922      	ldr	r1, [pc, #136]	; (800e2f4 <inc_lock+0x118>)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	011b      	lsls	r3, r3, #4
 800e270:	440b      	add	r3, r1
 800e272:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689a      	ldr	r2, [r3, #8]
 800e278:	491e      	ldr	r1, [pc, #120]	; (800e2f4 <inc_lock+0x118>)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	011b      	lsls	r3, r3, #4
 800e27e:	440b      	add	r3, r1
 800e280:	3304      	adds	r3, #4
 800e282:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695a      	ldr	r2, [r3, #20]
 800e288:	491a      	ldr	r1, [pc, #104]	; (800e2f4 <inc_lock+0x118>)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	011b      	lsls	r3, r3, #4
 800e28e:	440b      	add	r3, r1
 800e290:	3308      	adds	r3, #8
 800e292:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e294:	4a17      	ldr	r2, [pc, #92]	; (800e2f4 <inc_lock+0x118>)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	011b      	lsls	r3, r3, #4
 800e29a:	4413      	add	r3, r2
 800e29c:	330c      	adds	r3, #12
 800e29e:	2200      	movs	r2, #0
 800e2a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d009      	beq.n	800e2bc <inc_lock+0xe0>
 800e2a8:	4a12      	ldr	r2, [pc, #72]	; (800e2f4 <inc_lock+0x118>)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	011b      	lsls	r3, r3, #4
 800e2ae:	4413      	add	r3, r2
 800e2b0:	330c      	adds	r3, #12
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <inc_lock+0xe0>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e015      	b.n	800e2e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d108      	bne.n	800e2d4 <inc_lock+0xf8>
 800e2c2:	4a0c      	ldr	r2, [pc, #48]	; (800e2f4 <inc_lock+0x118>)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	011b      	lsls	r3, r3, #4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	330c      	adds	r3, #12
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	e001      	b.n	800e2d8 <inc_lock+0xfc>
 800e2d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2d8:	4906      	ldr	r1, [pc, #24]	; (800e2f4 <inc_lock+0x118>)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	011b      	lsls	r3, r3, #4
 800e2de:	440b      	add	r3, r1
 800e2e0:	330c      	adds	r3, #12
 800e2e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr
 800e2f4:	20036a50 	.word	0x20036a50

0800e2f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3b01      	subs	r3, #1
 800e304:	607b      	str	r3, [r7, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d825      	bhi.n	800e358 <dec_lock+0x60>
		n = Files[i].ctr;
 800e30c:	4a17      	ldr	r2, [pc, #92]	; (800e36c <dec_lock+0x74>)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	011b      	lsls	r3, r3, #4
 800e312:	4413      	add	r3, r2
 800e314:	330c      	adds	r3, #12
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e31a:	89fb      	ldrh	r3, [r7, #14]
 800e31c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e320:	d101      	bne.n	800e326 <dec_lock+0x2e>
 800e322:	2300      	movs	r3, #0
 800e324:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <dec_lock+0x3a>
 800e32c:	89fb      	ldrh	r3, [r7, #14]
 800e32e:	3b01      	subs	r3, #1
 800e330:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e332:	4a0e      	ldr	r2, [pc, #56]	; (800e36c <dec_lock+0x74>)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	4413      	add	r3, r2
 800e33a:	330c      	adds	r3, #12
 800e33c:	89fa      	ldrh	r2, [r7, #14]
 800e33e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e340:	89fb      	ldrh	r3, [r7, #14]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d105      	bne.n	800e352 <dec_lock+0x5a>
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <dec_lock+0x74>)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	011b      	lsls	r3, r3, #4
 800e34c:	4413      	add	r3, r2
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	737b      	strb	r3, [r7, #13]
 800e356:	e001      	b.n	800e35c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e358:	2302      	movs	r3, #2
 800e35a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e35c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	20036a50 	.word	0x20036a50

0800e370 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e010      	b.n	800e3a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e37e:	4a0d      	ldr	r2, [pc, #52]	; (800e3b4 <clear_lock+0x44>)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	011b      	lsls	r3, r3, #4
 800e384:	4413      	add	r3, r2
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d105      	bne.n	800e39a <clear_lock+0x2a>
 800e38e:	4a09      	ldr	r2, [pc, #36]	; (800e3b4 <clear_lock+0x44>)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	011b      	lsls	r3, r3, #4
 800e394:	4413      	add	r3, r2
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3301      	adds	r3, #1
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d9eb      	bls.n	800e37e <clear_lock+0xe>
	}
}
 800e3a6:	bf00      	nop
 800e3a8:	3714      	adds	r7, #20
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20036a50 	.word	0x20036a50

0800e3b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	78db      	ldrb	r3, [r3, #3]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d034      	beq.n	800e436 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	7858      	ldrb	r0, [r3, #1]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3dc:	2301      	movs	r3, #1
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	f7ff fd40 	bl	800de64 <disk_write>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	73fb      	strb	r3, [r7, #15]
 800e3ee:	e022      	b.n	800e436 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	1ad2      	subs	r2, r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	429a      	cmp	r2, r3
 800e404:	d217      	bcs.n	800e436 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	789b      	ldrb	r3, [r3, #2]
 800e40a:	613b      	str	r3, [r7, #16]
 800e40c:	e010      	b.n	800e430 <sync_window+0x78>
					wsect += fs->fsize;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a1b      	ldr	r3, [r3, #32]
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	4413      	add	r3, r2
 800e416:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7858      	ldrb	r0, [r3, #1]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e422:	2301      	movs	r3, #1
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	f7ff fd1d 	bl	800de64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	613b      	str	r3, [r7, #16]
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d8eb      	bhi.n	800e40e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e436:	7bfb      	ldrb	r3, [r7, #15]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d01b      	beq.n	800e490 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff ffad 	bl	800e3b8 <sync_window>
 800e45e:	4603      	mov	r3, r0
 800e460:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e462:	7bfb      	ldrb	r3, [r7, #15]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d113      	bne.n	800e490 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7858      	ldrb	r0, [r3, #1]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e472:	2301      	movs	r3, #1
 800e474:	683a      	ldr	r2, [r7, #0]
 800e476:	f7ff fcd5 	bl	800de24 <disk_read>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d004      	beq.n	800e48a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e480:	f04f 33ff 	mov.w	r3, #4294967295
 800e484:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e486:	2301      	movs	r3, #1
 800e488:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e490:	7bfb      	ldrb	r3, [r7, #15]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff ff87 	bl	800e3b8 <sync_window>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d159      	bne.n	800e568 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b03      	cmp	r3, #3
 800e4ba:	d149      	bne.n	800e550 <sync_fs+0xb4>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	791b      	ldrb	r3, [r3, #4]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d145      	bne.n	800e550 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	899b      	ldrh	r3, [r3, #12]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	f7ff fda8 	bl	800e026 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3338      	adds	r3, #56	; 0x38
 800e4da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e4de:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff fd37 	bl	800df56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3338      	adds	r3, #56	; 0x38
 800e4ec:	4921      	ldr	r1, [pc, #132]	; (800e574 <sync_fs+0xd8>)
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff fd4c 	bl	800df8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3338      	adds	r3, #56	; 0x38
 800e4f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4fc:	491e      	ldr	r1, [pc, #120]	; (800e578 <sync_fs+0xdc>)
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7ff fd44 	bl	800df8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3338      	adds	r3, #56	; 0x38
 800e508:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	695b      	ldr	r3, [r3, #20]
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7ff fd3a 	bl	800df8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3338      	adds	r3, #56	; 0x38
 800e51c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f7ff fd30 	bl	800df8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	1c5a      	adds	r2, r3, #1
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7858      	ldrb	r0, [r3, #1]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e544:	2301      	movs	r3, #1
 800e546:	f7ff fc8d 	bl	800de64 <disk_write>
			fs->fsi_flag = 0;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	785b      	ldrb	r3, [r3, #1]
 800e554:	2200      	movs	r2, #0
 800e556:	2100      	movs	r1, #0
 800e558:	4618      	mov	r0, r3
 800e55a:	f7ff fca3 	bl	800dea4 <disk_ioctl>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <sync_fs+0xcc>
 800e564:	2301      	movs	r3, #1
 800e566:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e568:	7bfb      	ldrb	r3, [r7, #15]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	41615252 	.word	0x41615252
 800e578:	61417272 	.word	0x61417272

0800e57c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	3b02      	subs	r3, #2
 800e58a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	3b02      	subs	r3, #2
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	d301      	bcc.n	800e59c <clust2sect+0x20>
 800e598:	2300      	movs	r3, #0
 800e59a:	e008      	b.n	800e5ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	895b      	ldrh	r3, [r3, #10]
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	fb03 f202 	mul.w	r2, r3, r2
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ac:	4413      	add	r3, r2
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b086      	sub	sp, #24
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d904      	bls.n	800e5da <get_fat+0x20>
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	69db      	ldr	r3, [r3, #28]
 800e5d4:	683a      	ldr	r2, [r7, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d302      	bcc.n	800e5e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e5da:	2301      	movs	r3, #1
 800e5dc:	617b      	str	r3, [r7, #20]
 800e5de:	e0b7      	b.n	800e750 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d05a      	beq.n	800e6a4 <get_fat+0xea>
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d07d      	beq.n	800e6ee <get_fat+0x134>
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	f040 80a2 	bne.w	800e73c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	085b      	lsrs	r3, r3, #1
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	4413      	add	r3, r2
 800e604:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	4619      	mov	r1, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	fbb3 f3f1 	udiv	r3, r3, r1
 800e616:	4413      	add	r3, r2
 800e618:	4619      	mov	r1, r3
 800e61a:	6938      	ldr	r0, [r7, #16]
 800e61c:	f7ff ff10 	bl	800e440 <move_window>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	f040 808d 	bne.w	800e742 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	60fa      	str	r2, [r7, #12]
 800e62e:	693a      	ldr	r2, [r7, #16]
 800e630:	8992      	ldrh	r2, [r2, #12]
 800e632:	fbb3 f1f2 	udiv	r1, r3, r2
 800e636:	fb02 f201 	mul.w	r2, r2, r1
 800e63a:	1a9b      	subs	r3, r3, r2
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	4413      	add	r3, r2
 800e640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e644:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	899b      	ldrh	r3, [r3, #12]
 800e64e:	4619      	mov	r1, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	fbb3 f3f1 	udiv	r3, r3, r1
 800e656:	4413      	add	r3, r2
 800e658:	4619      	mov	r1, r3
 800e65a:	6938      	ldr	r0, [r7, #16]
 800e65c:	f7ff fef0 	bl	800e440 <move_window>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d16f      	bne.n	800e746 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	461a      	mov	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e672:	fb02 f201 	mul.w	r2, r2, r1
 800e676:	1a9b      	subs	r3, r3, r2
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	4413      	add	r3, r2
 800e67c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e680:	021b      	lsls	r3, r3, #8
 800e682:	461a      	mov	r2, r3
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4313      	orrs	r3, r2
 800e688:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <get_fat+0xe0>
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	091b      	lsrs	r3, r3, #4
 800e698:	e002      	b.n	800e6a0 <get_fat+0xe6>
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6a0:	617b      	str	r3, [r7, #20]
			break;
 800e6a2:	e055      	b.n	800e750 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	899b      	ldrh	r3, [r3, #12]
 800e6ac:	085b      	lsrs	r3, r3, #1
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6b8:	4413      	add	r3, r2
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6938      	ldr	r0, [r7, #16]
 800e6be:	f7ff febf 	bl	800e440 <move_window>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d140      	bne.n	800e74a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	8992      	ldrh	r2, [r2, #12]
 800e6d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6da:	fb02 f200 	mul.w	r2, r2, r0
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	440b      	add	r3, r1
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff fbfc 	bl	800dee0 <ld_word>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	617b      	str	r3, [r7, #20]
			break;
 800e6ec:	e030      	b.n	800e750 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	899b      	ldrh	r3, [r3, #12]
 800e6f6:	089b      	lsrs	r3, r3, #2
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800e702:	4413      	add	r3, r2
 800e704:	4619      	mov	r1, r3
 800e706:	6938      	ldr	r0, [r7, #16]
 800e708:	f7ff fe9a 	bl	800e440 <move_window>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d11d      	bne.n	800e74e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	8992      	ldrh	r2, [r2, #12]
 800e720:	fbb3 f0f2 	udiv	r0, r3, r2
 800e724:	fb02 f200 	mul.w	r2, r2, r0
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	440b      	add	r3, r1
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff fbef 	bl	800df10 <ld_dword>
 800e732:	4603      	mov	r3, r0
 800e734:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e738:	617b      	str	r3, [r7, #20]
			break;
 800e73a:	e009      	b.n	800e750 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e73c:	2301      	movs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e006      	b.n	800e750 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e742:	bf00      	nop
 800e744:	e004      	b.n	800e750 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e746:	bf00      	nop
 800e748:	e002      	b.n	800e750 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e74a:	bf00      	nop
 800e74c:	e000      	b.n	800e750 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e74e:	bf00      	nop
		}
	}

	return val;
 800e750:	697b      	ldr	r3, [r7, #20]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e75a:	b590      	push	{r4, r7, lr}
 800e75c:	b089      	sub	sp, #36	; 0x24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	60b9      	str	r1, [r7, #8]
 800e764:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e766:	2302      	movs	r3, #2
 800e768:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	f240 8106 	bls.w	800e97e <put_fat+0x224>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	429a      	cmp	r2, r3
 800e77a:	f080 8100 	bcs.w	800e97e <put_fat+0x224>
		switch (fs->fs_type) {
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	2b02      	cmp	r3, #2
 800e784:	f000 8088 	beq.w	800e898 <put_fat+0x13e>
 800e788:	2b03      	cmp	r3, #3
 800e78a:	f000 80b0 	beq.w	800e8ee <put_fat+0x194>
 800e78e:	2b01      	cmp	r3, #1
 800e790:	f040 80f5 	bne.w	800e97e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	61bb      	str	r3, [r7, #24]
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	085b      	lsrs	r3, r3, #1
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	4413      	add	r3, r2
 800e7a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	899b      	ldrh	r3, [r3, #12]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff fe42 	bl	800e440 <move_window>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7c0:	7ffb      	ldrb	r3, [r7, #31]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f040 80d4 	bne.w	800e970 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	1c5a      	adds	r2, r3, #1
 800e7d2:	61ba      	str	r2, [r7, #24]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	8992      	ldrh	r2, [r2, #12]
 800e7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7dc:	fb02 f200 	mul.w	r2, r2, r0
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00d      	beq.n	800e80c <put_fat+0xb2>
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	b25b      	sxtb	r3, r3
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	b25a      	sxtb	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	011b      	lsls	r3, r3, #4
 800e802:	b25b      	sxtb	r3, r3
 800e804:	4313      	orrs	r3, r2
 800e806:	b25b      	sxtb	r3, r3
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	e001      	b.n	800e810 <put_fat+0xb6>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2201      	movs	r2, #1
 800e818:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	899b      	ldrh	r3, [r3, #12]
 800e822:	4619      	mov	r1, r3
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	fbb3 f3f1 	udiv	r3, r3, r1
 800e82a:	4413      	add	r3, r2
 800e82c:	4619      	mov	r1, r3
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff fe06 	bl	800e440 <move_window>
 800e834:	4603      	mov	r3, r0
 800e836:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e838:	7ffb      	ldrb	r3, [r7, #31]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f040 809a 	bne.w	800e974 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	899b      	ldrh	r3, [r3, #12]
 800e84a:	461a      	mov	r2, r3
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e852:	fb02 f200 	mul.w	r2, r2, r0
 800e856:	1a9b      	subs	r3, r3, r2
 800e858:	440b      	add	r3, r1
 800e85a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	d003      	beq.n	800e86e <put_fat+0x114>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	091b      	lsrs	r3, r3, #4
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	e00e      	b.n	800e88c <put_fat+0x132>
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	b25b      	sxtb	r3, r3
 800e874:	f023 030f 	bic.w	r3, r3, #15
 800e878:	b25a      	sxtb	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	0a1b      	lsrs	r3, r3, #8
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	f003 030f 	and.w	r3, r3, #15
 800e884:	b25b      	sxtb	r3, r3
 800e886:	4313      	orrs	r3, r2
 800e888:	b25b      	sxtb	r3, r3
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2201      	movs	r2, #1
 800e894:	70da      	strb	r2, [r3, #3]
			break;
 800e896:	e072      	b.n	800e97e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	899b      	ldrh	r3, [r3, #12]
 800e8a0:	085b      	lsrs	r3, r3, #1
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8ac:	4413      	add	r3, r2
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7ff fdc5 	bl	800e440 <move_window>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8ba:	7ffb      	ldrb	r3, [r7, #31]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d15b      	bne.n	800e978 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	005b      	lsls	r3, r3, #1
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	8992      	ldrh	r2, [r2, #12]
 800e8ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8d2:	fb02 f200 	mul.w	r2, r2, r0
 800e8d6:	1a9b      	subs	r3, r3, r2
 800e8d8:	440b      	add	r3, r1
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	b292      	uxth	r2, r2
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fb38 	bl	800df56 <st_word>
			fs->wflag = 1;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	70da      	strb	r2, [r3, #3]
			break;
 800e8ec:	e047      	b.n	800e97e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	899b      	ldrh	r3, [r3, #12]
 800e8f6:	089b      	lsrs	r3, r3, #2
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800e902:	4413      	add	r3, r2
 800e904:	4619      	mov	r1, r3
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f7ff fd9a 	bl	800e440 <move_window>
 800e90c:	4603      	mov	r3, r0
 800e90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e910:	7ffb      	ldrb	r3, [r7, #31]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d132      	bne.n	800e97c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	8992      	ldrh	r2, [r2, #12]
 800e92a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e92e:	fb02 f200 	mul.w	r2, r2, r0
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	440b      	add	r3, r1
 800e936:	4618      	mov	r0, r3
 800e938:	f7ff faea 	bl	800df10 <ld_dword>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e942:	4323      	orrs	r3, r4
 800e944:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	8992      	ldrh	r2, [r2, #12]
 800e954:	fbb3 f0f2 	udiv	r0, r3, r2
 800e958:	fb02 f200 	mul.w	r2, r2, r0
 800e95c:	1a9b      	subs	r3, r3, r2
 800e95e:	440b      	add	r3, r1
 800e960:	6879      	ldr	r1, [r7, #4]
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff fb12 	bl	800df8c <st_dword>
			fs->wflag = 1;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2201      	movs	r2, #1
 800e96c:	70da      	strb	r2, [r3, #3]
			break;
 800e96e:	e006      	b.n	800e97e <put_fat+0x224>
			if (res != FR_OK) break;
 800e970:	bf00      	nop
 800e972:	e004      	b.n	800e97e <put_fat+0x224>
			if (res != FR_OK) break;
 800e974:	bf00      	nop
 800e976:	e002      	b.n	800e97e <put_fat+0x224>
			if (res != FR_OK) break;
 800e978:	bf00      	nop
 800e97a:	e000      	b.n	800e97e <put_fat+0x224>
			if (res != FR_OK) break;
 800e97c:	bf00      	nop
		}
	}
	return res;
 800e97e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3724      	adds	r7, #36	; 0x24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd90      	pop	{r4, r7, pc}

0800e988 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d904      	bls.n	800e9ae <remove_chain+0x26>
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	69db      	ldr	r3, [r3, #28]
 800e9a8:	68ba      	ldr	r2, [r7, #8]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d301      	bcc.n	800e9b2 <remove_chain+0x2a>
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	e04b      	b.n	800ea4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00c      	beq.n	800e9d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	69b8      	ldr	r0, [r7, #24]
 800e9c0:	f7ff fecb 	bl	800e75a <put_fat>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e9c8:	7ffb      	ldrb	r3, [r7, #31]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <remove_chain+0x4a>
 800e9ce:	7ffb      	ldrb	r3, [r7, #31]
 800e9d0:	e03b      	b.n	800ea4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e9d2:	68b9      	ldr	r1, [r7, #8]
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f7ff fdf0 	bl	800e5ba <get_fat>
 800e9da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d031      	beq.n	800ea46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d101      	bne.n	800e9ec <remove_chain+0x64>
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	e02e      	b.n	800ea4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f2:	d101      	bne.n	800e9f8 <remove_chain+0x70>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e028      	b.n	800ea4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	69b8      	ldr	r0, [r7, #24]
 800e9fe:	f7ff feac 	bl	800e75a <put_fat>
 800ea02:	4603      	mov	r3, r0
 800ea04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ea06:	7ffb      	ldrb	r3, [r7, #31]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <remove_chain+0x88>
 800ea0c:	7ffb      	ldrb	r3, [r7, #31]
 800ea0e:	e01c      	b.n	800ea4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	695a      	ldr	r2, [r3, #20]
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	69db      	ldr	r3, [r3, #28]
 800ea18:	3b02      	subs	r3, #2
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d20b      	bcs.n	800ea36 <remove_chain+0xae>
			fs->free_clst++;
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	791b      	ldrb	r3, [r3, #4]
 800ea2c:	f043 0301 	orr.w	r3, r3, #1
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	69db      	ldr	r3, [r3, #28]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d3c6      	bcc.n	800e9d2 <remove_chain+0x4a>
 800ea44:	e000      	b.n	800ea48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ea46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3720      	adds	r7, #32
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b088      	sub	sp, #32
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10d      	bne.n	800ea84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d004      	beq.n	800ea7e <create_chain+0x2c>
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	69db      	ldr	r3, [r3, #28]
 800ea78:	69ba      	ldr	r2, [r7, #24]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d31b      	bcc.n	800eab6 <create_chain+0x64>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	e018      	b.n	800eab6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff fd97 	bl	800e5ba <get_fat>
 800ea8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d801      	bhi.n	800ea98 <create_chain+0x46>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e070      	b.n	800eb7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	d101      	bne.n	800eaa4 <create_chain+0x52>
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	e06a      	b.n	800eb7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d201      	bcs.n	800eab2 <create_chain+0x60>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	e063      	b.n	800eb7a <create_chain+0x128>
		scl = clst;
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	3301      	adds	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	69db      	ldr	r3, [r3, #28]
 800eac4:	69fa      	ldr	r2, [r7, #28]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d307      	bcc.n	800eada <create_chain+0x88>
				ncl = 2;
 800eaca:	2302      	movs	r3, #2
 800eacc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d901      	bls.n	800eada <create_chain+0x88>
 800ead6:	2300      	movs	r3, #0
 800ead8:	e04f      	b.n	800eb7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eada:	69f9      	ldr	r1, [r7, #28]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7ff fd6c 	bl	800e5ba <get_fat>
 800eae2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00e      	beq.n	800eb08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d003      	beq.n	800eaf8 <create_chain+0xa6>
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf6:	d101      	bne.n	800eafc <create_chain+0xaa>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	e03e      	b.n	800eb7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800eafc:	69fa      	ldr	r2, [r7, #28]
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d1da      	bne.n	800eaba <create_chain+0x68>
 800eb04:	2300      	movs	r3, #0
 800eb06:	e038      	b.n	800eb7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eb08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb0e:	69f9      	ldr	r1, [r7, #28]
 800eb10:	6938      	ldr	r0, [r7, #16]
 800eb12:	f7ff fe22 	bl	800e75a <put_fat>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d109      	bne.n	800eb34 <create_chain+0xe2>
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d006      	beq.n	800eb34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eb26:	69fa      	ldr	r2, [r7, #28]
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6938      	ldr	r0, [r7, #16]
 800eb2c:	f7ff fe15 	bl	800e75a <put_fat>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d116      	bne.n	800eb68 <create_chain+0x116>
		fs->last_clst = ncl;
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	695a      	ldr	r2, [r3, #20]
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	3b02      	subs	r3, #2
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d804      	bhi.n	800eb58 <create_chain+0x106>
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	1e5a      	subs	r2, r3, #1
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	791b      	ldrb	r3, [r3, #4]
 800eb5c:	f043 0301 	orr.w	r3, r3, #1
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	711a      	strb	r2, [r3, #4]
 800eb66:	e007      	b.n	800eb78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d102      	bne.n	800eb74 <create_chain+0x122>
 800eb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb72:	e000      	b.n	800eb76 <create_chain+0x124>
 800eb74:	2301      	movs	r3, #1
 800eb76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eb78:	69fb      	ldr	r3, [r7, #28]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b087      	sub	sp, #28
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb96:	3304      	adds	r3, #4
 800eb98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	899b      	ldrh	r3, [r3, #12]
 800eb9e:	461a      	mov	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	8952      	ldrh	r2, [r2, #10]
 800ebaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	1d1a      	adds	r2, r3, #4
 800ebb4:	613a      	str	r2, [r7, #16]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <clmt_clust+0x42>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e010      	b.n	800ebe6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d307      	bcc.n	800ebdc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ebcc:	697a      	ldr	r2, [r7, #20]
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ebda:	e7e9      	b.n	800ebb0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ebdc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	4413      	add	r3, r2
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b086      	sub	sp, #24
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec08:	d204      	bcs.n	800ec14 <dir_sdi+0x22>
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	f003 031f 	and.w	r3, r3, #31
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ec14:	2302      	movs	r3, #2
 800ec16:	e071      	b.n	800ecfc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <dir_sdi+0x46>
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d902      	bls.n	800ec38 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec36:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d10c      	bne.n	800ec58 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	095b      	lsrs	r3, r3, #5
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	8912      	ldrh	r2, [r2, #8]
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d301      	bcc.n	800ec4e <dir_sdi+0x5c>
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	e056      	b.n	800ecfc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	61da      	str	r2, [r3, #28]
 800ec56:	e02d      	b.n	800ecb4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	895b      	ldrh	r3, [r3, #10]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	899b      	ldrh	r3, [r3, #12]
 800ec62:	fb03 f302 	mul.w	r3, r3, r2
 800ec66:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec68:	e019      	b.n	800ec9e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6979      	ldr	r1, [r7, #20]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7ff fca3 	bl	800e5ba <get_fat>
 800ec74:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7c:	d101      	bne.n	800ec82 <dir_sdi+0x90>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e03c      	b.n	800ecfc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d904      	bls.n	800ec92 <dir_sdi+0xa0>
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	69db      	ldr	r3, [r3, #28]
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d301      	bcc.n	800ec96 <dir_sdi+0xa4>
 800ec92:	2302      	movs	r3, #2
 800ec94:	e032      	b.n	800ecfc <dir_sdi+0x10a>
			ofs -= csz;
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d2e1      	bcs.n	800ec6a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eca6:	6979      	ldr	r1, [r7, #20]
 800eca8:	6938      	ldr	r0, [r7, #16]
 800ecaa:	f7ff fc67 	bl	800e57c <clust2sect>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <dir_sdi+0xd4>
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	e01a      	b.n	800ecfc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	69da      	ldr	r2, [r3, #28]
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecd6:	441a      	add	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	899b      	ldrh	r3, [r3, #12]
 800ece6:	461a      	mov	r2, r3
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecee:	fb02 f200 	mul.w	r2, r2, r0
 800ecf2:	1a9b      	subs	r3, r3, r2
 800ecf4:	18ca      	adds	r2, r1, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b086      	sub	sp, #24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	695b      	ldr	r3, [r3, #20]
 800ed18:	3320      	adds	r3, #32
 800ed1a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	69db      	ldr	r3, [r3, #28]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <dir_next+0x28>
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed2a:	d301      	bcc.n	800ed30 <dir_next+0x2c>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	e0bb      	b.n	800eea8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	899b      	ldrh	r3, [r3, #12]
 800ed34:	461a      	mov	r2, r3
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed3c:	fb02 f201 	mul.w	r2, r2, r1
 800ed40:	1a9b      	subs	r3, r3, r2
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f040 809d 	bne.w	800ee82 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	69db      	ldr	r3, [r3, #28]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10b      	bne.n	800ed72 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	095b      	lsrs	r3, r3, #5
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	8912      	ldrh	r2, [r2, #8]
 800ed62:	4293      	cmp	r3, r2
 800ed64:	f0c0 808d 	bcc.w	800ee82 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	61da      	str	r2, [r3, #28]
 800ed6e:	2304      	movs	r3, #4
 800ed70:	e09a      	b.n	800eea8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	899b      	ldrh	r3, [r3, #12]
 800ed76:	461a      	mov	r2, r3
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	8952      	ldrh	r2, [r2, #10]
 800ed82:	3a01      	subs	r2, #1
 800ed84:	4013      	ands	r3, r2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d17b      	bne.n	800ee82 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7ff fc11 	bl	800e5ba <get_fat>
 800ed98:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d801      	bhi.n	800eda4 <dir_next+0xa0>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e081      	b.n	800eea8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edaa:	d101      	bne.n	800edb0 <dir_next+0xac>
 800edac:	2301      	movs	r3, #1
 800edae:	e07b      	b.n	800eea8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	69db      	ldr	r3, [r3, #28]
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d359      	bcc.n	800ee6e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d104      	bne.n	800edca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	61da      	str	r2, [r3, #28]
 800edc6:	2304      	movs	r3, #4
 800edc8:	e06e      	b.n	800eea8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	699b      	ldr	r3, [r3, #24]
 800edd0:	4619      	mov	r1, r3
 800edd2:	4610      	mov	r0, r2
 800edd4:	f7ff fe3d 	bl	800ea52 <create_chain>
 800edd8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <dir_next+0xe0>
 800ede0:	2307      	movs	r3, #7
 800ede2:	e061      	b.n	800eea8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d101      	bne.n	800edee <dir_next+0xea>
 800edea:	2302      	movs	r3, #2
 800edec:	e05c      	b.n	800eea8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf4:	d101      	bne.n	800edfa <dir_next+0xf6>
 800edf6:	2301      	movs	r3, #1
 800edf8:	e056      	b.n	800eea8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff fadc 	bl	800e3b8 <sync_window>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <dir_next+0x106>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e04e      	b.n	800eea8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	899b      	ldrh	r3, [r3, #12]
 800ee14:	461a      	mov	r2, r3
 800ee16:	2100      	movs	r1, #0
 800ee18:	f7ff f905 	bl	800e026 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	613b      	str	r3, [r7, #16]
 800ee20:	6979      	ldr	r1, [r7, #20]
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f7ff fbaa 	bl	800e57c <clust2sect>
 800ee28:	4602      	mov	r2, r0
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	635a      	str	r2, [r3, #52]	; 0x34
 800ee2e:	e012      	b.n	800ee56 <dir_next+0x152>
						fs->wflag = 1;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2201      	movs	r2, #1
 800ee34:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff fabe 	bl	800e3b8 <sync_window>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <dir_next+0x142>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e030      	b.n	800eea8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	613b      	str	r3, [r7, #16]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee50:	1c5a      	adds	r2, r3, #1
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	635a      	str	r2, [r3, #52]	; 0x34
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	895b      	ldrh	r3, [r3, #10]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d3e6      	bcc.n	800ee30 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	1ad2      	subs	r2, r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ee74:	6979      	ldr	r1, [r7, #20]
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f7ff fb80 	bl	800e57c <clust2sect>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	899b      	ldrh	r3, [r3, #12]
 800ee92:	461a      	mov	r2, r3
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee9a:	fb02 f200 	mul.w	r2, r2, r0
 800ee9e:	1a9b      	subs	r3, r3, r2
 800eea0:	18ca      	adds	r2, r1, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eec0:	2100      	movs	r1, #0
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff fe95 	bl	800ebf2 <dir_sdi>
 800eec8:	4603      	mov	r3, r0
 800eeca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eecc:	7dfb      	ldrb	r3, [r7, #23]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d12b      	bne.n	800ef2a <dir_alloc+0x7a>
		n = 0;
 800eed2:	2300      	movs	r3, #0
 800eed4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	4619      	mov	r1, r3
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f7ff faaf 	bl	800e440 <move_window>
 800eee2:	4603      	mov	r3, r0
 800eee4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d11d      	bne.n	800ef28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a1b      	ldr	r3, [r3, #32]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	2be5      	cmp	r3, #229	; 0xe5
 800eef4:	d004      	beq.n	800ef00 <dir_alloc+0x50>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d107      	bne.n	800ef10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	3301      	adds	r3, #1
 800ef04:	613b      	str	r3, [r7, #16]
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d102      	bne.n	800ef14 <dir_alloc+0x64>
 800ef0e:	e00c      	b.n	800ef2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ef10:	2300      	movs	r3, #0
 800ef12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ef14:	2101      	movs	r1, #1
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fef4 	bl	800ed04 <dir_next>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d0d7      	beq.n	800eed6 <dir_alloc+0x26>
 800ef26:	e000      	b.n	800ef2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ef28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ef2a:	7dfb      	ldrb	r3, [r7, #23]
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d101      	bne.n	800ef34 <dir_alloc+0x84>
 800ef30:	2307      	movs	r3, #7
 800ef32:	75fb      	strb	r3, [r7, #23]
	return res;
 800ef34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	331a      	adds	r3, #26
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fe ffc7 	bl	800dee0 <ld_word>
 800ef52:	4603      	mov	r3, r0
 800ef54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	2b03      	cmp	r3, #3
 800ef5c:	d109      	bne.n	800ef72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	3314      	adds	r3, #20
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fe ffbc 	bl	800dee0 <ld_word>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	041b      	lsls	r3, r3, #16
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ef72:	68fb      	ldr	r3, [r7, #12]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3710      	adds	r7, #16
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	331a      	adds	r3, #26
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	b292      	uxth	r2, r2
 800ef90:	4611      	mov	r1, r2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fe ffdf 	bl	800df56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b03      	cmp	r3, #3
 800ef9e:	d109      	bne.n	800efb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f103 0214 	add.w	r2, r3, #20
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	0c1b      	lsrs	r3, r3, #16
 800efaa:	b29b      	uxth	r3, r3
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f7fe ffd1 	bl	800df56 <st_word>
	}
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800efc6:	2304      	movs	r3, #4
 800efc8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800efd0:	e03c      	b.n	800f04c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	69db      	ldr	r3, [r3, #28]
 800efd6:	4619      	mov	r1, r3
 800efd8:	6938      	ldr	r0, [r7, #16]
 800efda:	f7ff fa31 	bl	800e440 <move_window>
 800efde:	4603      	mov	r3, r0
 800efe0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d136      	bne.n	800f056 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a1b      	ldr	r3, [r3, #32]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d102      	bne.n	800effc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eff6:	2304      	movs	r3, #4
 800eff8:	75fb      	strb	r3, [r7, #23]
 800effa:	e031      	b.n	800f060 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a1b      	ldr	r3, [r3, #32]
 800f000:	330b      	adds	r3, #11
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f008:	73bb      	strb	r3, [r7, #14]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	7bba      	ldrb	r2, [r7, #14]
 800f00e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f010:	7bfb      	ldrb	r3, [r7, #15]
 800f012:	2be5      	cmp	r3, #229	; 0xe5
 800f014:	d011      	beq.n	800f03a <dir_read+0x7e>
 800f016:	7bfb      	ldrb	r3, [r7, #15]
 800f018:	2b2e      	cmp	r3, #46	; 0x2e
 800f01a:	d00e      	beq.n	800f03a <dir_read+0x7e>
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	2b0f      	cmp	r3, #15
 800f020:	d00b      	beq.n	800f03a <dir_read+0x7e>
 800f022:	7bbb      	ldrb	r3, [r7, #14]
 800f024:	f023 0320 	bic.w	r3, r3, #32
 800f028:	2b08      	cmp	r3, #8
 800f02a:	bf0c      	ite	eq
 800f02c:	2301      	moveq	r3, #1
 800f02e:	2300      	movne	r3, #0
 800f030:	b2db      	uxtb	r3, r3
 800f032:	461a      	mov	r2, r3
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	4293      	cmp	r3, r2
 800f038:	d00f      	beq.n	800f05a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f03a:	2100      	movs	r1, #0
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff fe61 	bl	800ed04 <dir_next>
 800f042:	4603      	mov	r3, r0
 800f044:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f046:	7dfb      	ldrb	r3, [r7, #23]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d108      	bne.n	800f05e <dir_read+0xa2>
	while (dp->sect) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1be      	bne.n	800efd2 <dir_read+0x16>
 800f054:	e004      	b.n	800f060 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f056:	bf00      	nop
 800f058:	e002      	b.n	800f060 <dir_read+0xa4>
				break;
 800f05a:	bf00      	nop
 800f05c:	e000      	b.n	800f060 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f05e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f060:	7dfb      	ldrb	r3, [r7, #23]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d002      	beq.n	800f06c <dir_read+0xb0>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	61da      	str	r2, [r3, #28]
	return res;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3718      	adds	r7, #24
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b086      	sub	sp, #24
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f084:	2100      	movs	r1, #0
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fdb3 	bl	800ebf2 <dir_sdi>
 800f08c:	4603      	mov	r3, r0
 800f08e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f090:	7dfb      	ldrb	r3, [r7, #23]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <dir_find+0x24>
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	e03e      	b.n	800f118 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	69db      	ldr	r3, [r3, #28]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6938      	ldr	r0, [r7, #16]
 800f0a2:	f7ff f9cd 	bl	800e440 <move_window>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d12f      	bne.n	800f110 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a1b      	ldr	r3, [r3, #32]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d102      	bne.n	800f0c4 <dir_find+0x4e>
 800f0be:	2304      	movs	r3, #4
 800f0c0:	75fb      	strb	r3, [r7, #23]
 800f0c2:	e028      	b.n	800f116 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a1b      	ldr	r3, [r3, #32]
 800f0c8:	330b      	adds	r3, #11
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
 800f0da:	330b      	adds	r3, #11
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	f003 0308 	and.w	r3, r3, #8
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10a      	bne.n	800f0fc <dir_find+0x86>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a18      	ldr	r0, [r3, #32]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3324      	adds	r3, #36	; 0x24
 800f0ee:	220b      	movs	r2, #11
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	f7fe ffb2 	bl	800e05a <mem_cmp>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00b      	beq.n	800f114 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff fe00 	bl	800ed04 <dir_next>
 800f104:	4603      	mov	r3, r0
 800f106:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f108:	7dfb      	ldrb	r3, [r7, #23]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0c5      	beq.n	800f09a <dir_find+0x24>
 800f10e:	e002      	b.n	800f116 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f110:	bf00      	nop
 800f112:	e000      	b.n	800f116 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f114:	bf00      	nop

	return res;
 800f116:	7dfb      	ldrb	r3, [r7, #23]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f12e:	2101      	movs	r1, #1
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff febd 	bl	800eeb0 <dir_alloc>
 800f136:	4603      	mov	r3, r0
 800f138:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d11c      	bne.n	800f17a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	4619      	mov	r1, r3
 800f146:	68b8      	ldr	r0, [r7, #8]
 800f148:	f7ff f97a 	bl	800e440 <move_window>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d111      	bne.n	800f17a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a1b      	ldr	r3, [r3, #32]
 800f15a:	2220      	movs	r2, #32
 800f15c:	2100      	movs	r1, #0
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe ff61 	bl	800e026 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a18      	ldr	r0, [r3, #32]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	3324      	adds	r3, #36	; 0x24
 800f16c:	220b      	movs	r2, #11
 800f16e:	4619      	mov	r1, r3
 800f170:	f7fe ff38 	bl	800dfe4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2201      	movs	r2, #1
 800f178:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	69db      	ldr	r3, [r3, #28]
 800f196:	4619      	mov	r1, r3
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f7ff f951 	bl	800e440 <move_window>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f1a2:	7afb      	ldrb	r3, [r7, #11]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d106      	bne.n	800f1b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a1b      	ldr	r3, [r3, #32]
 800f1ac:	22e5      	movs	r2, #229	; 0xe5
 800f1ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f1b6:	7afb      	ldrb	r3, [r7, #11]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	60fb      	str	r3, [r7, #12]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3324      	adds	r3, #36	; 0x24
 800f1d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f1d6:	220b      	movs	r2, #11
 800f1d8:	2120      	movs	r1, #32
 800f1da:	68b8      	ldr	r0, [r7, #8]
 800f1dc:	f7fe ff23 	bl	800e026 <mem_set>
	si = i = 0; ni = 8;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	613b      	str	r3, [r7, #16]
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	617b      	str	r3, [r7, #20]
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f1f6:	d12f      	bne.n	800f258 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	617a      	str	r2, [r7, #20]
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f206:	7ffb      	ldrb	r3, [r7, #31]
 800f208:	2b2e      	cmp	r3, #46	; 0x2e
 800f20a:	d10a      	bne.n	800f222 <create_name+0x62>
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d807      	bhi.n	800f222 <create_name+0x62>
			sfn[i++] = c;
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	613a      	str	r2, [r7, #16]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	4413      	add	r3, r2
 800f21c:	7ffa      	ldrb	r2, [r7, #31]
 800f21e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f220:	e7ea      	b.n	800f1f8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f222:	7ffb      	ldrb	r3, [r7, #31]
 800f224:	2b2f      	cmp	r3, #47	; 0x2f
 800f226:	d007      	beq.n	800f238 <create_name+0x78>
 800f228:	7ffb      	ldrb	r3, [r7, #31]
 800f22a:	2b5c      	cmp	r3, #92	; 0x5c
 800f22c:	d004      	beq.n	800f238 <create_name+0x78>
 800f22e:	7ffb      	ldrb	r3, [r7, #31]
 800f230:	2b20      	cmp	r3, #32
 800f232:	d901      	bls.n	800f238 <create_name+0x78>
 800f234:	2306      	movs	r3, #6
 800f236:	e084      	b.n	800f342 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	441a      	add	r2, r3
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f242:	7ffb      	ldrb	r3, [r7, #31]
 800f244:	2b20      	cmp	r3, #32
 800f246:	d801      	bhi.n	800f24c <create_name+0x8c>
 800f248:	2224      	movs	r2, #36	; 0x24
 800f24a:	e000      	b.n	800f24e <create_name+0x8e>
 800f24c:	2220      	movs	r2, #32
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	330b      	adds	r3, #11
 800f252:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	e074      	b.n	800f342 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	617a      	str	r2, [r7, #20]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f266:	7ffb      	ldrb	r3, [r7, #31]
 800f268:	2b20      	cmp	r3, #32
 800f26a:	d94e      	bls.n	800f30a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f26c:	7ffb      	ldrb	r3, [r7, #31]
 800f26e:	2b2f      	cmp	r3, #47	; 0x2f
 800f270:	d006      	beq.n	800f280 <create_name+0xc0>
 800f272:	7ffb      	ldrb	r3, [r7, #31]
 800f274:	2b5c      	cmp	r3, #92	; 0x5c
 800f276:	d110      	bne.n	800f29a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f278:	e002      	b.n	800f280 <create_name+0xc0>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	3301      	adds	r3, #1
 800f27e:	617b      	str	r3, [r7, #20]
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	4413      	add	r3, r2
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b2f      	cmp	r3, #47	; 0x2f
 800f28a:	d0f6      	beq.n	800f27a <create_name+0xba>
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	4413      	add	r3, r2
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	2b5c      	cmp	r3, #92	; 0x5c
 800f296:	d0f0      	beq.n	800f27a <create_name+0xba>
			break;
 800f298:	e038      	b.n	800f30c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f29a:	7ffb      	ldrb	r3, [r7, #31]
 800f29c:	2b2e      	cmp	r3, #46	; 0x2e
 800f29e:	d003      	beq.n	800f2a8 <create_name+0xe8>
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d30c      	bcc.n	800f2c2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	2b0b      	cmp	r3, #11
 800f2ac:	d002      	beq.n	800f2b4 <create_name+0xf4>
 800f2ae:	7ffb      	ldrb	r3, [r7, #31]
 800f2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2b2:	d001      	beq.n	800f2b8 <create_name+0xf8>
 800f2b4:	2306      	movs	r3, #6
 800f2b6:	e044      	b.n	800f342 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	613b      	str	r3, [r7, #16]
 800f2bc:	230b      	movs	r3, #11
 800f2be:	61bb      	str	r3, [r7, #24]
			continue;
 800f2c0:	e022      	b.n	800f308 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f2c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	da04      	bge.n	800f2d4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f2ca:	7ffb      	ldrb	r3, [r7, #31]
 800f2cc:	3b80      	subs	r3, #128	; 0x80
 800f2ce:	4a1f      	ldr	r2, [pc, #124]	; (800f34c <create_name+0x18c>)
 800f2d0:	5cd3      	ldrb	r3, [r2, r3]
 800f2d2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f2d4:	7ffb      	ldrb	r3, [r7, #31]
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	481d      	ldr	r0, [pc, #116]	; (800f350 <create_name+0x190>)
 800f2da:	f7fe fee5 	bl	800e0a8 <chk_chr>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <create_name+0x128>
 800f2e4:	2306      	movs	r3, #6
 800f2e6:	e02c      	b.n	800f342 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f2e8:	7ffb      	ldrb	r3, [r7, #31]
 800f2ea:	2b60      	cmp	r3, #96	; 0x60
 800f2ec:	d905      	bls.n	800f2fa <create_name+0x13a>
 800f2ee:	7ffb      	ldrb	r3, [r7, #31]
 800f2f0:	2b7a      	cmp	r3, #122	; 0x7a
 800f2f2:	d802      	bhi.n	800f2fa <create_name+0x13a>
 800f2f4:	7ffb      	ldrb	r3, [r7, #31]
 800f2f6:	3b20      	subs	r3, #32
 800f2f8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	613a      	str	r2, [r7, #16]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	4413      	add	r3, r2
 800f304:	7ffa      	ldrb	r2, [r7, #31]
 800f306:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f308:	e7a6      	b.n	800f258 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f30a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	441a      	add	r2, r3
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <create_name+0x160>
 800f31c:	2306      	movs	r3, #6
 800f31e:	e010      	b.n	800f342 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2be5      	cmp	r3, #229	; 0xe5
 800f326:	d102      	bne.n	800f32e <create_name+0x16e>
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	2205      	movs	r2, #5
 800f32c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f32e:	7ffb      	ldrb	r3, [r7, #31]
 800f330:	2b20      	cmp	r3, #32
 800f332:	d801      	bhi.n	800f338 <create_name+0x178>
 800f334:	2204      	movs	r2, #4
 800f336:	e000      	b.n	800f33a <create_name+0x17a>
 800f338:	2200      	movs	r2, #0
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	330b      	adds	r3, #11
 800f33e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f340:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f342:	4618      	mov	r0, r3
 800f344:	3720      	adds	r7, #32
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	0801735c 	.word	0x0801735c
 800f350:	0801730c 	.word	0x0801730c

0800f354 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	2b2f      	cmp	r3, #47	; 0x2f
 800f36e:	d00b      	beq.n	800f388 <follow_path+0x34>
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	2b5c      	cmp	r3, #92	; 0x5c
 800f376:	d007      	beq.n	800f388 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699a      	ldr	r2, [r3, #24]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	609a      	str	r2, [r3, #8]
 800f380:	e00d      	b.n	800f39e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	3301      	adds	r3, #1
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b2f      	cmp	r3, #47	; 0x2f
 800f38e:	d0f8      	beq.n	800f382 <follow_path+0x2e>
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	2b5c      	cmp	r3, #92	; 0x5c
 800f396:	d0f4      	beq.n	800f382 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	2200      	movs	r2, #0
 800f39c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b1f      	cmp	r3, #31
 800f3a4:	d80a      	bhi.n	800f3bc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2280      	movs	r2, #128	; 0x80
 800f3aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff fc1e 	bl	800ebf2 <dir_sdi>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	75fb      	strb	r3, [r7, #23]
 800f3ba:	e05b      	b.n	800f474 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3bc:	463b      	mov	r3, r7
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f7ff fefd 	bl	800f1c0 <create_name>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d14c      	bne.n	800f46a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff fe50 	bl	800f076 <dir_find>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01b      	beq.n	800f420 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f3e8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ea:	2b04      	cmp	r3, #4
 800f3ec:	d13f      	bne.n	800f46e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f3ee:	7afb      	ldrb	r3, [r7, #11]
 800f3f0:	f003 0320 	and.w	r3, r3, #32
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00b      	beq.n	800f410 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f3f8:	7afb      	ldrb	r3, [r7, #11]
 800f3fa:	f003 0304 	and.w	r3, r3, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d031      	beq.n	800f466 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2280      	movs	r2, #128	; 0x80
 800f406:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f40e:	e02e      	b.n	800f46e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f410:	7afb      	ldrb	r3, [r7, #11]
 800f412:	f003 0304 	and.w	r3, r3, #4
 800f416:	2b00      	cmp	r3, #0
 800f418:	d129      	bne.n	800f46e <follow_path+0x11a>
 800f41a:	2305      	movs	r3, #5
 800f41c:	75fb      	strb	r3, [r7, #23]
				break;
 800f41e:	e026      	b.n	800f46e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f420:	7afb      	ldrb	r3, [r7, #11]
 800f422:	f003 0304 	and.w	r3, r3, #4
 800f426:	2b00      	cmp	r3, #0
 800f428:	d123      	bne.n	800f472 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	799b      	ldrb	r3, [r3, #6]
 800f42e:	f003 0310 	and.w	r3, r3, #16
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f436:	2305      	movs	r3, #5
 800f438:	75fb      	strb	r3, [r7, #23]
 800f43a:	e01b      	b.n	800f474 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	8992      	ldrh	r2, [r2, #12]
 800f44a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f44e:	fb02 f200 	mul.w	r2, r2, r0
 800f452:	1a9b      	subs	r3, r3, r2
 800f454:	440b      	add	r3, r1
 800f456:	4619      	mov	r1, r3
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7ff fd70 	bl	800ef3e <ld_clust>
 800f45e:	4602      	mov	r2, r0
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	609a      	str	r2, [r3, #8]
 800f464:	e7aa      	b.n	800f3bc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f466:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f468:	e7a8      	b.n	800f3bc <follow_path+0x68>
			if (res != FR_OK) break;
 800f46a:	bf00      	nop
 800f46c:	e002      	b.n	800f474 <follow_path+0x120>
				break;
 800f46e:	bf00      	nop
 800f470:	e000      	b.n	800f474 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f472:	bf00      	nop
			}
		}
	}

	return res;
 800f474:	7dfb      	ldrb	r3, [r7, #23]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f47e:	b480      	push	{r7}
 800f480:	b087      	sub	sp, #28
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f486:	f04f 33ff 	mov.w	r3, #4294967295
 800f48a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d031      	beq.n	800f4f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	617b      	str	r3, [r7, #20]
 800f49a:	e002      	b.n	800f4a2 <get_ldnumber+0x24>
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	617b      	str	r3, [r7, #20]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	2b20      	cmp	r3, #32
 800f4a8:	d903      	bls.n	800f4b2 <get_ldnumber+0x34>
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b3a      	cmp	r3, #58	; 0x3a
 800f4b0:	d1f4      	bne.n	800f49c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	2b3a      	cmp	r3, #58	; 0x3a
 800f4b8:	d11c      	bne.n	800f4f4 <get_ldnumber+0x76>
			tp = *path;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	60fa      	str	r2, [r7, #12]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	3b30      	subs	r3, #48	; 0x30
 800f4ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b09      	cmp	r3, #9
 800f4d0:	d80e      	bhi.n	800f4f0 <get_ldnumber+0x72>
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d10a      	bne.n	800f4f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d107      	bne.n	800f4f0 <get_ldnumber+0x72>
					vol = (int)i;
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	e002      	b.n	800f4fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f4f8:	693b      	ldr	r3, [r7, #16]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
	...

0800f508 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	70da      	strb	r2, [r3, #3]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f04f 32ff 	mov.w	r2, #4294967295
 800f51e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7fe ff8c 	bl	800e440 <move_window>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <check_fs+0x2a>
 800f52e:	2304      	movs	r3, #4
 800f530:	e038      	b.n	800f5a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3338      	adds	r3, #56	; 0x38
 800f536:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fe fcd0 	bl	800dee0 <ld_word>
 800f540:	4603      	mov	r3, r0
 800f542:	461a      	mov	r2, r3
 800f544:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f548:	429a      	cmp	r2, r3
 800f54a:	d001      	beq.n	800f550 <check_fs+0x48>
 800f54c:	2303      	movs	r3, #3
 800f54e:	e029      	b.n	800f5a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f556:	2be9      	cmp	r3, #233	; 0xe9
 800f558:	d009      	beq.n	800f56e <check_fs+0x66>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f560:	2beb      	cmp	r3, #235	; 0xeb
 800f562:	d11e      	bne.n	800f5a2 <check_fs+0x9a>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f56a:	2b90      	cmp	r3, #144	; 0x90
 800f56c:	d119      	bne.n	800f5a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3338      	adds	r3, #56	; 0x38
 800f572:	3336      	adds	r3, #54	; 0x36
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fccb 	bl	800df10 <ld_dword>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f580:	4a0a      	ldr	r2, [pc, #40]	; (800f5ac <check_fs+0xa4>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d101      	bne.n	800f58a <check_fs+0x82>
 800f586:	2300      	movs	r3, #0
 800f588:	e00c      	b.n	800f5a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	3338      	adds	r3, #56	; 0x38
 800f58e:	3352      	adds	r3, #82	; 0x52
 800f590:	4618      	mov	r0, r3
 800f592:	f7fe fcbd 	bl	800df10 <ld_dword>
 800f596:	4602      	mov	r2, r0
 800f598:	4b05      	ldr	r3, [pc, #20]	; (800f5b0 <check_fs+0xa8>)
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d101      	bne.n	800f5a2 <check_fs+0x9a>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	e000      	b.n	800f5a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f5a2:	2302      	movs	r3, #2
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	00544146 	.word	0x00544146
 800f5b0:	33544146 	.word	0x33544146

0800f5b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b096      	sub	sp, #88	; 0x58
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff ff58 	bl	800f47e <get_ldnumber>
 800f5ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	da01      	bge.n	800f5da <find_volume+0x26>
 800f5d6:	230b      	movs	r3, #11
 800f5d8:	e268      	b.n	800faac <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f5da:	4ab0      	ldr	r2, [pc, #704]	; (800f89c <find_volume+0x2e8>)
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d101      	bne.n	800f5ee <find_volume+0x3a>
 800f5ea:	230c      	movs	r3, #12
 800f5ec:	e25e      	b.n	800faac <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	f023 0301 	bic.w	r3, r3, #1
 800f5fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d01a      	beq.n	800f63a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	785b      	ldrb	r3, [r3, #1]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fe fbcb 	bl	800dda4 <disk_status>
 800f60e:	4603      	mov	r3, r0
 800f610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10c      	bne.n	800f63a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d007      	beq.n	800f636 <find_volume+0x82>
 800f626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f62a:	f003 0304 	and.w	r3, r3, #4
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f632:	230a      	movs	r3, #10
 800f634:	e23a      	b.n	800faac <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800f636:	2300      	movs	r3, #0
 800f638:	e238      	b.n	800faac <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f642:	b2da      	uxtb	r2, r3
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	785b      	ldrb	r3, [r3, #1]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe fbc3 	bl	800ddd8 <disk_initialize>
 800f652:	4603      	mov	r3, r0
 800f654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f664:	2303      	movs	r3, #3
 800f666:	e221      	b.n	800faac <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <find_volume+0xca>
 800f66e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f672:	f003 0304 	and.w	r3, r3, #4
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f67a:	230a      	movs	r3, #10
 800f67c:	e216      	b.n	800faac <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	7858      	ldrb	r0, [r3, #1]
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	330c      	adds	r3, #12
 800f686:	461a      	mov	r2, r3
 800f688:	2102      	movs	r1, #2
 800f68a:	f7fe fc0b 	bl	800dea4 <disk_ioctl>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <find_volume+0xe4>
 800f694:	2301      	movs	r3, #1
 800f696:	e209      	b.n	800faac <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	899b      	ldrh	r3, [r3, #12]
 800f69c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6a0:	d80d      	bhi.n	800f6be <find_volume+0x10a>
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	899b      	ldrh	r3, [r3, #12]
 800f6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6aa:	d308      	bcc.n	800f6be <find_volume+0x10a>
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	899b      	ldrh	r3, [r3, #12]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	899b      	ldrh	r3, [r3, #12]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <find_volume+0x10e>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e1f4      	b.n	800faac <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f6c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ca:	f7ff ff1d 	bl	800f508 <check_fs>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f6d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d14b      	bne.n	800f774 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6dc:	2300      	movs	r3, #0
 800f6de:	643b      	str	r3, [r7, #64]	; 0x40
 800f6e0:	e01f      	b.n	800f722 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f6f0:	4413      	add	r3, r2
 800f6f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d006      	beq.n	800f70c <find_volume+0x158>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	3308      	adds	r3, #8
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe fc04 	bl	800df10 <ld_dword>
 800f708:	4602      	mov	r2, r0
 800f70a:	e000      	b.n	800f70e <find_volume+0x15a>
 800f70c:	2200      	movs	r2, #0
 800f70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f716:	440b      	add	r3, r1
 800f718:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f71e:	3301      	adds	r3, #1
 800f720:	643b      	str	r3, [r7, #64]	; 0x40
 800f722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f724:	2b03      	cmp	r3, #3
 800f726:	d9dc      	bls.n	800f6e2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f728:	2300      	movs	r3, #0
 800f72a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <find_volume+0x184>
 800f732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f734:	3b01      	subs	r3, #1
 800f736:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f740:	4413      	add	r3, r2
 800f742:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f746:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <find_volume+0x1a6>
 800f74e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f752:	f7ff fed9 	bl	800f508 <check_fs>
 800f756:	4603      	mov	r3, r0
 800f758:	e000      	b.n	800f75c <find_volume+0x1a8>
 800f75a:	2303      	movs	r3, #3
 800f75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f764:	2b01      	cmp	r3, #1
 800f766:	d905      	bls.n	800f774 <find_volume+0x1c0>
 800f768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76a:	3301      	adds	r3, #1
 800f76c:	643b      	str	r3, [r7, #64]	; 0x40
 800f76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f770:	2b03      	cmp	r3, #3
 800f772:	d9e1      	bls.n	800f738 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d101      	bne.n	800f780 <find_volume+0x1cc>
 800f77c:	2301      	movs	r3, #1
 800f77e:	e195      	b.n	800faac <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f784:	2b01      	cmp	r3, #1
 800f786:	d901      	bls.n	800f78c <find_volume+0x1d8>
 800f788:	230d      	movs	r3, #13
 800f78a:	e18f      	b.n	800faac <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	3338      	adds	r3, #56	; 0x38
 800f790:	330b      	adds	r3, #11
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe fba4 	bl	800dee0 <ld_word>
 800f798:	4603      	mov	r3, r0
 800f79a:	461a      	mov	r2, r3
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	899b      	ldrh	r3, [r3, #12]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d001      	beq.n	800f7a8 <find_volume+0x1f4>
 800f7a4:	230d      	movs	r3, #13
 800f7a6:	e181      	b.n	800faac <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	3338      	adds	r3, #56	; 0x38
 800f7ac:	3316      	adds	r3, #22
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fe fb96 	bl	800dee0 <ld_word>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <find_volume+0x218>
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	3338      	adds	r3, #56	; 0x38
 800f7c2:	3324      	adds	r3, #36	; 0x24
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fe fba3 	bl	800df10 <ld_dword>
 800f7ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	789b      	ldrb	r3, [r3, #2]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d005      	beq.n	800f7f0 <find_volume+0x23c>
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	789b      	ldrb	r3, [r3, #2]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d001      	beq.n	800f7f0 <find_volume+0x23c>
 800f7ec:	230d      	movs	r3, #13
 800f7ee:	e15d      	b.n	800faac <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	789b      	ldrb	r3, [r3, #2]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7f8:	fb02 f303 	mul.w	r3, r2, r3
 800f7fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f804:	b29a      	uxth	r2, r3
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80c:	895b      	ldrh	r3, [r3, #10]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d008      	beq.n	800f824 <find_volume+0x270>
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	895b      	ldrh	r3, [r3, #10]
 800f816:	461a      	mov	r2, r3
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	895b      	ldrh	r3, [r3, #10]
 800f81c:	3b01      	subs	r3, #1
 800f81e:	4013      	ands	r3, r2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <find_volume+0x274>
 800f824:	230d      	movs	r3, #13
 800f826:	e141      	b.n	800faac <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82a:	3338      	adds	r3, #56	; 0x38
 800f82c:	3311      	adds	r3, #17
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fb56 	bl	800dee0 <ld_word>
 800f834:	4603      	mov	r3, r0
 800f836:	461a      	mov	r2, r3
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f842:	8992      	ldrh	r2, [r2, #12]
 800f844:	0952      	lsrs	r2, r2, #5
 800f846:	b292      	uxth	r2, r2
 800f848:	fbb3 f1f2 	udiv	r1, r3, r2
 800f84c:	fb02 f201 	mul.w	r2, r2, r1
 800f850:	1a9b      	subs	r3, r3, r2
 800f852:	b29b      	uxth	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <find_volume+0x2a8>
 800f858:	230d      	movs	r3, #13
 800f85a:	e127      	b.n	800faac <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85e:	3338      	adds	r3, #56	; 0x38
 800f860:	3313      	adds	r3, #19
 800f862:	4618      	mov	r0, r3
 800f864:	f7fe fb3c 	bl	800dee0 <ld_word>
 800f868:	4603      	mov	r3, r0
 800f86a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f86c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d106      	bne.n	800f880 <find_volume+0x2cc>
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	3338      	adds	r3, #56	; 0x38
 800f876:	3320      	adds	r3, #32
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fe fb49 	bl	800df10 <ld_dword>
 800f87e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f882:	3338      	adds	r3, #56	; 0x38
 800f884:	330e      	adds	r3, #14
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fb2a 	bl	800dee0 <ld_word>
 800f88c:	4603      	mov	r3, r0
 800f88e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f892:	2b00      	cmp	r3, #0
 800f894:	d104      	bne.n	800f8a0 <find_volume+0x2ec>
 800f896:	230d      	movs	r3, #13
 800f898:	e108      	b.n	800faac <find_volume+0x4f8>
 800f89a:	bf00      	nop
 800f89c:	20036a48 	.word	0x20036a48

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f8a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a4:	4413      	add	r3, r2
 800f8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8a8:	8911      	ldrh	r1, [r2, #8]
 800f8aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ac:	8992      	ldrh	r2, [r2, #12]
 800f8ae:	0952      	lsrs	r2, r2, #5
 800f8b0:	b292      	uxth	r2, r2
 800f8b2:	fbb1 f2f2 	udiv	r2, r1, r2
 800f8b6:	b292      	uxth	r2, r2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f8bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d201      	bcs.n	800f8c8 <find_volume+0x314>
 800f8c4:	230d      	movs	r3, #13
 800f8c6:	e0f1      	b.n	800faac <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8d0:	8952      	ldrh	r2, [r2, #10]
 800f8d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d101      	bne.n	800f8e2 <find_volume+0x32e>
 800f8de:	230d      	movs	r3, #13
 800f8e0:	e0e4      	b.n	800faac <find_volume+0x4f8>
		fmt = FS_FAT32;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d802      	bhi.n	800f8f8 <find_volume+0x344>
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d802      	bhi.n	800f908 <find_volume+0x354>
 800f902:	2301      	movs	r3, #1
 800f904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	1c9a      	adds	r2, r3, #2
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f914:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f916:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f91a:	441a      	add	r2, r3
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f924:	441a      	add	r2, r3
 800f926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f928:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f92a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f92e:	2b03      	cmp	r3, #3
 800f930:	d11e      	bne.n	800f970 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f934:	3338      	adds	r3, #56	; 0x38
 800f936:	332a      	adds	r3, #42	; 0x2a
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fad1 	bl	800dee0 <ld_word>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <find_volume+0x394>
 800f944:	230d      	movs	r3, #13
 800f946:	e0b1      	b.n	800faac <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d001      	beq.n	800f954 <find_volume+0x3a0>
 800f950:	230d      	movs	r3, #13
 800f952:	e0ab      	b.n	800faac <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	3338      	adds	r3, #56	; 0x38
 800f958:	332c      	adds	r3, #44	; 0x2c
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fe fad8 	bl	800df10 <ld_dword>
 800f960:	4602      	mov	r2, r0
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f968:	69db      	ldr	r3, [r3, #28]
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	647b      	str	r3, [r7, #68]	; 0x44
 800f96e:	e01f      	b.n	800f9b0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f972:	891b      	ldrh	r3, [r3, #8]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <find_volume+0x3c8>
 800f978:	230d      	movs	r3, #13
 800f97a:	e097      	b.n	800faac <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f982:	441a      	add	r2, r3
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d103      	bne.n	800f998 <find_volume+0x3e4>
 800f990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f992:	69db      	ldr	r3, [r3, #28]
 800f994:	005b      	lsls	r3, r3, #1
 800f996:	e00a      	b.n	800f9ae <find_volume+0x3fa>
 800f998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99a:	69da      	ldr	r2, [r3, #28]
 800f99c:	4613      	mov	r3, r2
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	4413      	add	r3, r2
 800f9a2:	085a      	lsrs	r2, r3, #1
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a6:	69db      	ldr	r3, [r3, #28]
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f9ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	6a1a      	ldr	r2, [r3, #32]
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b6:	899b      	ldrh	r3, [r3, #12]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9bc:	440b      	add	r3, r1
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9c2:	8989      	ldrh	r1, [r1, #12]
 800f9c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d201      	bcs.n	800f9d0 <find_volume+0x41c>
 800f9cc:	230d      	movs	r3, #13
 800f9ce:	e06d      	b.n	800faac <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d6:	615a      	str	r2, [r3, #20]
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	695a      	ldr	r2, [r3, #20]
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	2280      	movs	r2, #128	; 0x80
 800f9e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f9e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9ea:	2b03      	cmp	r3, #3
 800f9ec:	d149      	bne.n	800fa82 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	3338      	adds	r3, #56	; 0x38
 800f9f2:	3330      	adds	r3, #48	; 0x30
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe fa73 	bl	800dee0 <ld_word>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d140      	bne.n	800fa82 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fa00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa02:	3301      	adds	r3, #1
 800fa04:	4619      	mov	r1, r3
 800fa06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa08:	f7fe fd1a 	bl	800e440 <move_window>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d137      	bne.n	800fa82 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	2200      	movs	r2, #0
 800fa16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	3338      	adds	r3, #56	; 0x38
 800fa1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fe fa5d 	bl	800dee0 <ld_word>
 800fa26:	4603      	mov	r3, r0
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d127      	bne.n	800fa82 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	3338      	adds	r3, #56	; 0x38
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fe fa6a 	bl	800df10 <ld_dword>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	4b1d      	ldr	r3, [pc, #116]	; (800fab4 <find_volume+0x500>)
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d11e      	bne.n	800fa82 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa46:	3338      	adds	r3, #56	; 0x38
 800fa48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fe fa5f 	bl	800df10 <ld_dword>
 800fa52:	4602      	mov	r2, r0
 800fa54:	4b18      	ldr	r3, [pc, #96]	; (800fab8 <find_volume+0x504>)
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d113      	bne.n	800fa82 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5c:	3338      	adds	r3, #56	; 0x38
 800fa5e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe fa54 	bl	800df10 <ld_dword>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	3338      	adds	r3, #56	; 0x38
 800fa72:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fe fa4a 	bl	800df10 <ld_dword>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fa88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <find_volume+0x508>)
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	4b0a      	ldr	r3, [pc, #40]	; (800fabc <find_volume+0x508>)
 800fa94:	801a      	strh	r2, [r3, #0]
 800fa96:	4b09      	ldr	r3, [pc, #36]	; (800fabc <find_volume+0x508>)
 800fa98:	881a      	ldrh	r2, [r3, #0]
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	2200      	movs	r2, #0
 800faa2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800faa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800faa6:	f7fe fc63 	bl	800e370 <clear_lock>
#endif
	return FR_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3758      	adds	r7, #88	; 0x58
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	41615252 	.word	0x41615252
 800fab8:	61417272 	.word	0x61417272
 800fabc:	20036a4c 	.word	0x20036a4c

0800fac0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800faca:	2309      	movs	r3, #9
 800facc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d01c      	beq.n	800fb0e <validate+0x4e>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d018      	beq.n	800fb0e <validate+0x4e>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d013      	beq.n	800fb0e <validate+0x4e>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	889a      	ldrh	r2, [r3, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	88db      	ldrh	r3, [r3, #6]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d10c      	bne.n	800fb0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	785b      	ldrb	r3, [r3, #1]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fe f952 	bl	800dda4 <disk_status>
 800fb00:	4603      	mov	r3, r0
 800fb02:	f003 0301 	and.w	r3, r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <validate+0x4e>
			res = FR_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d102      	bne.n	800fb1a <validate+0x5a>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	e000      	b.n	800fb1c <validate+0x5c>
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	6013      	str	r3, [r2, #0]
	return res;
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b088      	sub	sp, #32
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4613      	mov	r3, r2
 800fb38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb3e:	f107 0310 	add.w	r3, r7, #16
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff fc9b 	bl	800f47e <get_ldnumber>
 800fb48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	da01      	bge.n	800fb54 <f_mount+0x28>
 800fb50:	230b      	movs	r3, #11
 800fb52:	e02b      	b.n	800fbac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb54:	4a17      	ldr	r2, [pc, #92]	; (800fbb4 <f_mount+0x88>)
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d005      	beq.n	800fb70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb64:	69b8      	ldr	r0, [r7, #24]
 800fb66:	f7fe fc03 	bl	800e370 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	490d      	ldr	r1, [pc, #52]	; (800fbb4 <f_mount+0x88>)
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <f_mount+0x66>
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d001      	beq.n	800fb96 <f_mount+0x6a>
 800fb92:	2300      	movs	r3, #0
 800fb94:	e00a      	b.n	800fbac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fb96:	f107 010c 	add.w	r1, r7, #12
 800fb9a:	f107 0308 	add.w	r3, r7, #8
 800fb9e:	2200      	movs	r2, #0
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff fd07 	bl	800f5b4 <find_volume>
 800fba6:	4603      	mov	r3, r0
 800fba8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3720      	adds	r7, #32
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20036a48 	.word	0x20036a48

0800fbb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b098      	sub	sp, #96	; 0x60
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d101      	bne.n	800fbd0 <f_open+0x18>
 800fbcc:	2309      	movs	r3, #9
 800fbce:	e1bb      	b.n	800ff48 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbd6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fbd8:	79fa      	ldrb	r2, [r7, #7]
 800fbda:	f107 0110 	add.w	r1, r7, #16
 800fbde:	f107 0308 	add.w	r3, r7, #8
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7ff fce6 	bl	800f5b4 <find_volume>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f040 819f 	bne.w	800ff36 <f_open+0x37e>
		dj.obj.fs = fs;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	f107 0314 	add.w	r3, r7, #20
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff fba5 	bl	800f354 <follow_path>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d11a      	bne.n	800fc4e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc1c:	b25b      	sxtb	r3, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	da03      	bge.n	800fc2a <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc22:	2306      	movs	r3, #6
 800fc24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc28:	e011      	b.n	800fc4e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	f023 0301 	bic.w	r3, r3, #1
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bf14      	ite	ne
 800fc34:	2301      	movne	r3, #1
 800fc36:	2300      	moveq	r3, #0
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	4611      	mov	r1, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe fa4c 	bl	800e0e0 <chk_lock>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc4e:	79fb      	ldrb	r3, [r7, #7]
 800fc50:	f003 031c 	and.w	r3, r3, #28
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d07f      	beq.n	800fd58 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fc58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d017      	beq.n	800fc90 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fc60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d10e      	bne.n	800fc86 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fc68:	f7fe fa96 	bl	800e198 <enq_lock>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d006      	beq.n	800fc80 <f_open+0xc8>
 800fc72:	f107 0314 	add.w	r3, r7, #20
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fa52 	bl	800f120 <dir_register>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	e000      	b.n	800fc82 <f_open+0xca>
 800fc80:	2312      	movs	r3, #18
 800fc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	f043 0308 	orr.w	r3, r3, #8
 800fc8c:	71fb      	strb	r3, [r7, #7]
 800fc8e:	e010      	b.n	800fcb2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fc90:	7ebb      	ldrb	r3, [r7, #26]
 800fc92:	f003 0311 	and.w	r3, r3, #17
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d003      	beq.n	800fca2 <f_open+0xea>
					res = FR_DENIED;
 800fc9a:	2307      	movs	r3, #7
 800fc9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fca0:	e007      	b.n	800fcb2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d002      	beq.n	800fcb2 <f_open+0xfa>
 800fcac:	2308      	movs	r3, #8
 800fcae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fcb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d168      	bne.n	800fd8c <f_open+0x1d4>
 800fcba:	79fb      	ldrb	r3, [r7, #7]
 800fcbc:	f003 0308 	and.w	r3, r3, #8
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d063      	beq.n	800fd8c <f_open+0x1d4>
				dw = GET_FATTIME();
 800fcc4:	f7fd fe1e 	bl	800d904 <get_fattime>
 800fcc8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fccc:	330e      	adds	r3, #14
 800fcce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fe f95b 	bl	800df8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd8:	3316      	adds	r3, #22
 800fcda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fe f955 	bl	800df8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce4:	330b      	adds	r3, #11
 800fce6:	2220      	movs	r2, #32
 800fce8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcee:	4611      	mov	r1, r2
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff f924 	bl	800ef3e <ld_clust>
 800fcf6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff f93c 	bl	800ef7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd06:	331c      	adds	r3, #28
 800fd08:	2100      	movs	r1, #0
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fe f93e 	bl	800df8c <st_dword>
					fs->wflag = 1;
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	2201      	movs	r2, #1
 800fd14:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d037      	beq.n	800fd8c <f_open+0x1d4>
						dw = fs->winsect;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd20:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fd22:	f107 0314 	add.w	r3, r7, #20
 800fd26:	2200      	movs	r2, #0
 800fd28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fe fe2c 	bl	800e988 <remove_chain>
 800fd30:	4603      	mov	r3, r0
 800fd32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fd36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d126      	bne.n	800fd8c <f_open+0x1d4>
							res = move_window(fs, dw);
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe fb7c 	bl	800e440 <move_window>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd52:	3a01      	subs	r2, #1
 800fd54:	611a      	str	r2, [r3, #16]
 800fd56:	e019      	b.n	800fd8c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d115      	bne.n	800fd8c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd60:	7ebb      	ldrb	r3, [r7, #26]
 800fd62:	f003 0310 	and.w	r3, r3, #16
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d003      	beq.n	800fd72 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fd6a:	2304      	movs	r3, #4
 800fd6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fd70:	e00c      	b.n	800fd8c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	f003 0302 	and.w	r3, r3, #2
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d007      	beq.n	800fd8c <f_open+0x1d4>
 800fd7c:	7ebb      	ldrb	r3, [r7, #26]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <f_open+0x1d4>
						res = FR_DENIED;
 800fd86:	2307      	movs	r3, #7
 800fd88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d128      	bne.n	800fde6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	f003 0308 	and.w	r3, r3, #8
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fdae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	f023 0301 	bic.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	bf14      	ite	ne
 800fdbe:	2301      	movne	r3, #1
 800fdc0:	2300      	moveq	r3, #0
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	f107 0314 	add.w	r3, r7, #20
 800fdca:	4611      	mov	r1, r2
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fe fa05 	bl	800e1dc <inc_lock>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d102      	bne.n	800fde6 <f_open+0x22e>
 800fde0:	2302      	movs	r3, #2
 800fde2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fde6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f040 80a3 	bne.w	800ff36 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff f8a1 	bl	800ef3e <ld_clust>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe04:	331c      	adds	r3, #28
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe f882 	bl	800df10 <ld_dword>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	88da      	ldrh	r2, [r3, #6]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	79fa      	ldrb	r2, [r7, #7]
 800fe2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3330      	adds	r3, #48	; 0x30
 800fe42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe46:	2100      	movs	r1, #0
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe f8ec 	bl	800e026 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	f003 0320 	and.w	r3, r3, #32
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d06e      	beq.n	800ff36 <f_open+0x37e>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d06a      	beq.n	800ff36 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	68da      	ldr	r2, [r3, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	895b      	ldrh	r3, [r3, #10]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	899b      	ldrh	r3, [r3, #12]
 800fe72:	fb03 f302 	mul.w	r3, r3, r2
 800fe76:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	657b      	str	r3, [r7, #84]	; 0x54
 800fe84:	e016      	b.n	800feb4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe fb95 	bl	800e5ba <get_fat>
 800fe90:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fe92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d802      	bhi.n	800fe9e <f_open+0x2e6>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea4:	d102      	bne.n	800feac <f_open+0x2f4>
 800fea6:	2301      	movs	r3, #1
 800fea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800feac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800feae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	657b      	str	r3, [r7, #84]	; 0x54
 800feb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d103      	bne.n	800fec4 <f_open+0x30c>
 800febc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800febe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d8e0      	bhi.n	800fe86 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fec8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800feca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d131      	bne.n	800ff36 <f_open+0x37e>
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	899b      	ldrh	r3, [r3, #12]
 800fed6:	461a      	mov	r2, r3
 800fed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feda:	fbb3 f1f2 	udiv	r1, r3, r2
 800fede:	fb02 f201 	mul.w	r2, r2, r1
 800fee2:	1a9b      	subs	r3, r3, r2
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d026      	beq.n	800ff36 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800feec:	4618      	mov	r0, r3
 800feee:	f7fe fb45 	bl	800e57c <clust2sect>
 800fef2:	6478      	str	r0, [r7, #68]	; 0x44
 800fef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d103      	bne.n	800ff02 <f_open+0x34a>
						res = FR_INT_ERR;
 800fefa:	2302      	movs	r3, #2
 800fefc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff00:	e019      	b.n	800ff36 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	899b      	ldrh	r3, [r3, #12]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff10:	441a      	add	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	7858      	ldrb	r0, [r3, #1]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6a1a      	ldr	r2, [r3, #32]
 800ff24:	2301      	movs	r3, #1
 800ff26:	f7fd ff7d 	bl	800de24 <disk_read>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <f_open+0x37e>
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ff36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <f_open+0x38c>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ff44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3760      	adds	r7, #96	; 0x60
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b08e      	sub	sp, #56	; 0x38
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f107 0214 	add.w	r2, r7, #20
 800ff6e:	4611      	mov	r1, r2
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff fda5 	bl	800fac0 <validate>
 800ff76:	4603      	mov	r3, r0
 800ff78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ff7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d107      	bne.n	800ff94 <f_read+0x44>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	7d5b      	ldrb	r3, [r3, #21]
 800ff88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d002      	beq.n	800ff9a <f_read+0x4a>
 800ff94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff98:	e135      	b.n	8010206 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	7d1b      	ldrb	r3, [r3, #20]
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <f_read+0x5a>
 800ffa6:	2307      	movs	r3, #7
 800ffa8:	e12d      	b.n	8010206 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	68da      	ldr	r2, [r3, #12]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	1ad3      	subs	r3, r2, r3
 800ffb4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	6a3b      	ldr	r3, [r7, #32]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	f240 811e 	bls.w	80101fc <f_read+0x2ac>
 800ffc0:	6a3b      	ldr	r3, [r7, #32]
 800ffc2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ffc4:	e11a      	b.n	80101fc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	699b      	ldr	r3, [r3, #24]
 800ffca:	697a      	ldr	r2, [r7, #20]
 800ffcc:	8992      	ldrh	r2, [r2, #12]
 800ffce:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffd2:	fb02 f201 	mul.w	r2, r2, r1
 800ffd6:	1a9b      	subs	r3, r3, r2
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 80d5 	bne.w	8010188 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	699b      	ldr	r3, [r3, #24]
 800ffe2:	697a      	ldr	r2, [r7, #20]
 800ffe4:	8992      	ldrh	r2, [r2, #12]
 800ffe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	8952      	ldrh	r2, [r2, #10]
 800ffee:	3a01      	subs	r2, #1
 800fff0:	4013      	ands	r3, r2
 800fff2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d12f      	bne.n	801005a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d103      	bne.n	801000a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	633b      	str	r3, [r7, #48]	; 0x30
 8010008:	e013      	b.n	8010032 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000e:	2b00      	cmp	r3, #0
 8010010:	d007      	beq.n	8010022 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	4619      	mov	r1, r3
 8010018:	68f8      	ldr	r0, [r7, #12]
 801001a:	f7fe fdb2 	bl	800eb82 <clmt_clust>
 801001e:	6338      	str	r0, [r7, #48]	; 0x30
 8010020:	e007      	b.n	8010032 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	4619      	mov	r1, r3
 801002a:	4610      	mov	r0, r2
 801002c:	f7fe fac5 	bl	800e5ba <get_fat>
 8010030:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	2b01      	cmp	r3, #1
 8010036:	d804      	bhi.n	8010042 <f_read+0xf2>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2202      	movs	r2, #2
 801003c:	755a      	strb	r2, [r3, #21]
 801003e:	2302      	movs	r3, #2
 8010040:	e0e1      	b.n	8010206 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010048:	d104      	bne.n	8010054 <f_read+0x104>
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2201      	movs	r2, #1
 801004e:	755a      	strb	r2, [r3, #21]
 8010050:	2301      	movs	r3, #1
 8010052:	e0d8      	b.n	8010206 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010058:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f7fe fa8a 	bl	800e57c <clust2sect>
 8010068:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d104      	bne.n	801007a <f_read+0x12a>
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2202      	movs	r2, #2
 8010074:	755a      	strb	r2, [r3, #21]
 8010076:	2302      	movs	r3, #2
 8010078:	e0c5      	b.n	8010206 <f_read+0x2b6>
			sect += csect;
 801007a:	69ba      	ldr	r2, [r7, #24]
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	4413      	add	r3, r2
 8010080:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	899b      	ldrh	r3, [r3, #12]
 8010086:	461a      	mov	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	fbb3 f3f2 	udiv	r3, r3, r2
 801008e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	2b00      	cmp	r3, #0
 8010094:	d041      	beq.n	801011a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010096:	69fa      	ldr	r2, [r7, #28]
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	4413      	add	r3, r2
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	8952      	ldrh	r2, [r2, #10]
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d905      	bls.n	80100b0 <f_read+0x160>
					cc = fs->csize - csect;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	895b      	ldrh	r3, [r3, #10]
 80100a8:	461a      	mov	r2, r3
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	1ad3      	subs	r3, r2, r3
 80100ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	7858      	ldrb	r0, [r3, #1]
 80100b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b6:	69ba      	ldr	r2, [r7, #24]
 80100b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100ba:	f7fd feb3 	bl	800de24 <disk_read>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d004      	beq.n	80100ce <f_read+0x17e>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2201      	movs	r2, #1
 80100c8:	755a      	strb	r2, [r3, #21]
 80100ca:	2301      	movs	r3, #1
 80100cc:	e09b      	b.n	8010206 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	7d1b      	ldrb	r3, [r3, #20]
 80100d2:	b25b      	sxtb	r3, r3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	da18      	bge.n	801010a <f_read+0x1ba>
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6a1a      	ldr	r2, [r3, #32]
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d911      	bls.n	801010a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6a1a      	ldr	r2, [r3, #32]
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	8992      	ldrh	r2, [r2, #12]
 80100f2:	fb02 f303 	mul.w	r3, r2, r3
 80100f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100f8:	18d0      	adds	r0, r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	899b      	ldrh	r3, [r3, #12]
 8010104:	461a      	mov	r2, r3
 8010106:	f7fd ff6d 	bl	800dfe4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	461a      	mov	r2, r3
 8010110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010112:	fb02 f303 	mul.w	r3, r2, r3
 8010116:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010118:	e05c      	b.n	80101d4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	6a1b      	ldr	r3, [r3, #32]
 801011e:	69ba      	ldr	r2, [r7, #24]
 8010120:	429a      	cmp	r2, r3
 8010122:	d02e      	beq.n	8010182 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	7d1b      	ldrb	r3, [r3, #20]
 8010128:	b25b      	sxtb	r3, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	da18      	bge.n	8010160 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	7858      	ldrb	r0, [r3, #1]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6a1a      	ldr	r2, [r3, #32]
 801013c:	2301      	movs	r3, #1
 801013e:	f7fd fe91 	bl	800de64 <disk_write>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <f_read+0x202>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2201      	movs	r2, #1
 801014c:	755a      	strb	r2, [r3, #21]
 801014e:	2301      	movs	r3, #1
 8010150:	e059      	b.n	8010206 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	7d1b      	ldrb	r3, [r3, #20]
 8010156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801015a:	b2da      	uxtb	r2, r3
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	7858      	ldrb	r0, [r3, #1]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801016a:	2301      	movs	r3, #1
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	f7fd fe59 	bl	800de24 <disk_read>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d004      	beq.n	8010182 <f_read+0x232>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2201      	movs	r2, #1
 801017c:	755a      	strb	r2, [r3, #21]
 801017e:	2301      	movs	r3, #1
 8010180:	e041      	b.n	8010206 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	69ba      	ldr	r2, [r7, #24]
 8010186:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	899b      	ldrh	r3, [r3, #12]
 801018c:	4618      	mov	r0, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	699b      	ldr	r3, [r3, #24]
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	8992      	ldrh	r2, [r2, #12]
 8010196:	fbb3 f1f2 	udiv	r1, r3, r2
 801019a:	fb02 f201 	mul.w	r2, r2, r1
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	1ac3      	subs	r3, r0, r3
 80101a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80101a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d901      	bls.n	80101b0 <f_read+0x260>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	8992      	ldrh	r2, [r2, #12]
 80101be:	fbb3 f0f2 	udiv	r0, r3, r2
 80101c2:	fb02 f200 	mul.w	r2, r2, r0
 80101c6:	1a9b      	subs	r3, r3, r2
 80101c8:	440b      	add	r3, r1
 80101ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101cc:	4619      	mov	r1, r3
 80101ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101d0:	f7fd ff08 	bl	800dfe4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80101d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d8:	4413      	add	r3, r2
 80101da:	627b      	str	r3, [r7, #36]	; 0x24
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	699a      	ldr	r2, [r3, #24]
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	441a      	add	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	619a      	str	r2, [r3, #24]
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	441a      	add	r2, r3
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f47f aee1 	bne.w	800ffc6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3738      	adds	r7, #56	; 0x38
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b08c      	sub	sp, #48	; 0x30
 8010212:	af00      	add	r7, sp, #0
 8010214:	60f8      	str	r0, [r7, #12]
 8010216:	60b9      	str	r1, [r7, #8]
 8010218:	607a      	str	r2, [r7, #4]
 801021a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2200      	movs	r2, #0
 8010224:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f107 0210 	add.w	r2, r7, #16
 801022c:	4611      	mov	r1, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f7ff fc46 	bl	800fac0 <validate>
 8010234:	4603      	mov	r3, r0
 8010236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801023a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801023e:	2b00      	cmp	r3, #0
 8010240:	d107      	bne.n	8010252 <f_write+0x44>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	7d5b      	ldrb	r3, [r3, #21]
 8010246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801024a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <f_write+0x4a>
 8010252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010256:	e16a      	b.n	801052e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	7d1b      	ldrb	r3, [r3, #20]
 801025c:	f003 0302 	and.w	r3, r3, #2
 8010260:	2b00      	cmp	r3, #0
 8010262:	d101      	bne.n	8010268 <f_write+0x5a>
 8010264:	2307      	movs	r3, #7
 8010266:	e162      	b.n	801052e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	699a      	ldr	r2, [r3, #24]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	441a      	add	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	699b      	ldr	r3, [r3, #24]
 8010274:	429a      	cmp	r2, r3
 8010276:	f080 814c 	bcs.w	8010512 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	699b      	ldr	r3, [r3, #24]
 801027e:	43db      	mvns	r3, r3
 8010280:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010282:	e146      	b.n	8010512 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	699b      	ldr	r3, [r3, #24]
 8010288:	693a      	ldr	r2, [r7, #16]
 801028a:	8992      	ldrh	r2, [r2, #12]
 801028c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010290:	fb02 f201 	mul.w	r2, r2, r1
 8010294:	1a9b      	subs	r3, r3, r2
 8010296:	2b00      	cmp	r3, #0
 8010298:	f040 80f1 	bne.w	801047e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	8992      	ldrh	r2, [r2, #12]
 80102a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	8952      	ldrh	r2, [r2, #10]
 80102ac:	3a01      	subs	r2, #1
 80102ae:	4013      	ands	r3, r2
 80102b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d143      	bne.n	8010340 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	699b      	ldr	r3, [r3, #24]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10c      	bne.n	80102da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80102c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d11a      	bne.n	8010302 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2100      	movs	r1, #0
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fe fbbe 	bl	800ea52 <create_chain>
 80102d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80102d8:	e013      	b.n	8010302 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d007      	beq.n	80102f2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	4619      	mov	r1, r3
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f7fe fc4a 	bl	800eb82 <clmt_clust>
 80102ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80102f0:	e007      	b.n	8010302 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	69db      	ldr	r3, [r3, #28]
 80102f8:	4619      	mov	r1, r3
 80102fa:	4610      	mov	r0, r2
 80102fc:	f7fe fba9 	bl	800ea52 <create_chain>
 8010300:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010304:	2b00      	cmp	r3, #0
 8010306:	f000 8109 	beq.w	801051c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801030a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030c:	2b01      	cmp	r3, #1
 801030e:	d104      	bne.n	801031a <f_write+0x10c>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2202      	movs	r2, #2
 8010314:	755a      	strb	r2, [r3, #21]
 8010316:	2302      	movs	r3, #2
 8010318:	e109      	b.n	801052e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010320:	d104      	bne.n	801032c <f_write+0x11e>
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2201      	movs	r2, #1
 8010326:	755a      	strb	r2, [r3, #21]
 8010328:	2301      	movs	r3, #1
 801032a:	e100      	b.n	801052e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010330:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d102      	bne.n	8010340 <f_write+0x132>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801033e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	7d1b      	ldrb	r3, [r3, #20]
 8010344:	b25b      	sxtb	r3, r3
 8010346:	2b00      	cmp	r3, #0
 8010348:	da18      	bge.n	801037c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	7858      	ldrb	r0, [r3, #1]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6a1a      	ldr	r2, [r3, #32]
 8010358:	2301      	movs	r3, #1
 801035a:	f7fd fd83 	bl	800de64 <disk_write>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d004      	beq.n	801036e <f_write+0x160>
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2201      	movs	r2, #1
 8010368:	755a      	strb	r2, [r3, #21]
 801036a:	2301      	movs	r3, #1
 801036c:	e0df      	b.n	801052e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	7d1b      	ldrb	r3, [r3, #20]
 8010372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010376:	b2da      	uxtb	r2, r3
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801037c:	693a      	ldr	r2, [r7, #16]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	69db      	ldr	r3, [r3, #28]
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7fe f8f9 	bl	800e57c <clust2sect>
 801038a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d104      	bne.n	801039c <f_write+0x18e>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2202      	movs	r2, #2
 8010396:	755a      	strb	r2, [r3, #21]
 8010398:	2302      	movs	r3, #2
 801039a:	e0c8      	b.n	801052e <f_write+0x320>
			sect += csect;
 801039c:	697a      	ldr	r2, [r7, #20]
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	4413      	add	r3, r2
 80103a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	899b      	ldrh	r3, [r3, #12]
 80103a8:	461a      	mov	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80103b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d043      	beq.n	8010440 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80103b8:	69ba      	ldr	r2, [r7, #24]
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	4413      	add	r3, r2
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	8952      	ldrh	r2, [r2, #10]
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d905      	bls.n	80103d2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	895b      	ldrh	r3, [r3, #10]
 80103ca:	461a      	mov	r2, r3
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	7858      	ldrb	r0, [r3, #1]
 80103d6:	6a3b      	ldr	r3, [r7, #32]
 80103d8:	697a      	ldr	r2, [r7, #20]
 80103da:	69f9      	ldr	r1, [r7, #28]
 80103dc:	f7fd fd42 	bl	800de64 <disk_write>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d004      	beq.n	80103f0 <f_write+0x1e2>
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2201      	movs	r2, #1
 80103ea:	755a      	strb	r2, [r3, #21]
 80103ec:	2301      	movs	r3, #1
 80103ee:	e09e      	b.n	801052e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6a1a      	ldr	r2, [r3, #32]
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	6a3a      	ldr	r2, [r7, #32]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d918      	bls.n	8010430 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6a1a      	ldr	r2, [r3, #32]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	8992      	ldrh	r2, [r2, #12]
 8010410:	fb02 f303 	mul.w	r3, r2, r3
 8010414:	69fa      	ldr	r2, [r7, #28]
 8010416:	18d1      	adds	r1, r2, r3
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	899b      	ldrh	r3, [r3, #12]
 801041c:	461a      	mov	r2, r3
 801041e:	f7fd fde1 	bl	800dfe4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	7d1b      	ldrb	r3, [r3, #20]
 8010426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801042a:	b2da      	uxtb	r2, r3
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	899b      	ldrh	r3, [r3, #12]
 8010434:	461a      	mov	r2, r3
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	fb02 f303 	mul.w	r3, r2, r3
 801043c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801043e:	e04b      	b.n	80104d8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	429a      	cmp	r2, r3
 8010448:	d016      	beq.n	8010478 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	699a      	ldr	r2, [r3, #24]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010452:	429a      	cmp	r2, r3
 8010454:	d210      	bcs.n	8010478 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	7858      	ldrb	r0, [r3, #1]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010460:	2301      	movs	r3, #1
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	f7fd fcde 	bl	800de24 <disk_read>
 8010468:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801046a:	2b00      	cmp	r3, #0
 801046c:	d004      	beq.n	8010478 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2201      	movs	r2, #1
 8010472:	755a      	strb	r2, [r3, #21]
 8010474:	2301      	movs	r3, #1
 8010476:	e05a      	b.n	801052e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	899b      	ldrh	r3, [r3, #12]
 8010482:	4618      	mov	r0, r3
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	699b      	ldr	r3, [r3, #24]
 8010488:	693a      	ldr	r2, [r7, #16]
 801048a:	8992      	ldrh	r2, [r2, #12]
 801048c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010490:	fb02 f201 	mul.w	r2, r2, r1
 8010494:	1a9b      	subs	r3, r3, r2
 8010496:	1ac3      	subs	r3, r0, r3
 8010498:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801049a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d901      	bls.n	80104a6 <f_write+0x298>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	699b      	ldr	r3, [r3, #24]
 80104b0:	693a      	ldr	r2, [r7, #16]
 80104b2:	8992      	ldrh	r2, [r2, #12]
 80104b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80104b8:	fb02 f200 	mul.w	r2, r2, r0
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	440b      	add	r3, r1
 80104c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104c2:	69f9      	ldr	r1, [r7, #28]
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fd fd8d 	bl	800dfe4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	7d1b      	ldrb	r3, [r3, #20]
 80104ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80104d2:	b2da      	uxtb	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104dc:	4413      	add	r3, r2
 80104de:	61fb      	str	r3, [r7, #28]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	699a      	ldr	r2, [r3, #24]
 80104e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e6:	441a      	add	r2, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	619a      	str	r2, [r3, #24]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	699b      	ldr	r3, [r3, #24]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	bf38      	it	cc
 80104f8:	461a      	movcc	r2, r3
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010504:	441a      	add	r2, r3
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	f47f aeb5 	bne.w	8010284 <f_write+0x76>
 801051a:	e000      	b.n	801051e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801051c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	7d1b      	ldrb	r3, [r3, #20]
 8010522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010526:	b2da      	uxtb	r2, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	3730      	adds	r7, #48	; 0x30
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010536:	b580      	push	{r7, lr}
 8010538:	b086      	sub	sp, #24
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f107 0208 	add.w	r2, r7, #8
 8010544:	4611      	mov	r1, r2
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff faba 	bl	800fac0 <validate>
 801054c:	4603      	mov	r3, r0
 801054e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d168      	bne.n	8010628 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	7d1b      	ldrb	r3, [r3, #20]
 801055a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801055e:	2b00      	cmp	r3, #0
 8010560:	d062      	beq.n	8010628 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	7d1b      	ldrb	r3, [r3, #20]
 8010566:	b25b      	sxtb	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	da15      	bge.n	8010598 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	7858      	ldrb	r0, [r3, #1]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1a      	ldr	r2, [r3, #32]
 801057a:	2301      	movs	r3, #1
 801057c:	f7fd fc72 	bl	800de64 <disk_write>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d001      	beq.n	801058a <f_sync+0x54>
 8010586:	2301      	movs	r3, #1
 8010588:	e04f      	b.n	801062a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	7d1b      	ldrb	r3, [r3, #20]
 801058e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010592:	b2da      	uxtb	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010598:	f7fd f9b4 	bl	800d904 <get_fattime>
 801059c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a4:	4619      	mov	r1, r3
 80105a6:	4610      	mov	r0, r2
 80105a8:	f7fd ff4a 	bl	800e440 <move_window>
 80105ac:	4603      	mov	r3, r0
 80105ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80105b0:	7dfb      	ldrb	r3, [r7, #23]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d138      	bne.n	8010628 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	330b      	adds	r3, #11
 80105c0:	781a      	ldrb	r2, [r3, #0]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	330b      	adds	r3, #11
 80105c6:	f042 0220 	orr.w	r2, r2, #32
 80105ca:	b2d2      	uxtb	r2, r2
 80105cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6818      	ldr	r0, [r3, #0]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	461a      	mov	r2, r3
 80105d8:	68f9      	ldr	r1, [r7, #12]
 80105da:	f7fe fccf 	bl	800ef7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f103 021c 	add.w	r2, r3, #28
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	4619      	mov	r1, r3
 80105ea:	4610      	mov	r0, r2
 80105ec:	f7fd fcce 	bl	800df8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	3316      	adds	r3, #22
 80105f4:	6939      	ldr	r1, [r7, #16]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fd fcc8 	bl	800df8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	3312      	adds	r3, #18
 8010600:	2100      	movs	r1, #0
 8010602:	4618      	mov	r0, r3
 8010604:	f7fd fca7 	bl	800df56 <st_word>
					fs->wflag = 1;
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2201      	movs	r2, #1
 801060c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	4618      	mov	r0, r3
 8010612:	f7fd ff43 	bl	800e49c <sync_fs>
 8010616:	4603      	mov	r3, r0
 8010618:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	7d1b      	ldrb	r3, [r3, #20]
 801061e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010622:	b2da      	uxtb	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010628:	7dfb      	ldrb	r3, [r7, #23]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b084      	sub	sp, #16
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff ff7b 	bl	8010536 <f_sync>
 8010640:	4603      	mov	r3, r0
 8010642:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010644:	7bfb      	ldrb	r3, [r7, #15]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d118      	bne.n	801067c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f107 0208 	add.w	r2, r7, #8
 8010650:	4611      	mov	r1, r2
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fa34 	bl	800fac0 <validate>
 8010658:	4603      	mov	r3, r0
 801065a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10c      	bne.n	801067c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	4618      	mov	r0, r3
 8010668:	f7fd fe46 	bl	800e2f8 <dec_lock>
 801066c:	4603      	mov	r3, r0
 801066e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010670:	7bfb      	ldrb	r3, [r7, #15]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801067c:	7bfb      	ldrb	r3, [r7, #15]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010686:	b590      	push	{r4, r7, lr}
 8010688:	b091      	sub	sp, #68	; 0x44
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801068e:	f107 0108 	add.w	r1, r7, #8
 8010692:	1d3b      	adds	r3, r7, #4
 8010694:	2200      	movs	r2, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe ff8c 	bl	800f5b4 <find_volume>
 801069c:	4603      	mov	r3, r0
 801069e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80106a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d131      	bne.n	801070e <f_chdir+0x88>
		dj.obj.fs = fs;
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	f107 030c 	add.w	r3, r7, #12
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fe4c 	bl	800f354 <follow_path>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80106c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d11a      	bne.n	8010700 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80106ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106ce:	b25b      	sxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da03      	bge.n	80106dc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	619a      	str	r2, [r3, #24]
 80106da:	e011      	b.n	8010700 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80106dc:	7cbb      	ldrb	r3, [r7, #18]
 80106de:	f003 0310 	and.w	r3, r3, #16
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d009      	beq.n	80106fa <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106ea:	68bc      	ldr	r4, [r7, #8]
 80106ec:	4611      	mov	r1, r2
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fc25 	bl	800ef3e <ld_clust>
 80106f4:	4603      	mov	r3, r0
 80106f6:	61a3      	str	r3, [r4, #24]
 80106f8:	e002      	b.n	8010700 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80106fa:	2305      	movs	r3, #5
 80106fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010704:	2b04      	cmp	r3, #4
 8010706:	d102      	bne.n	801070e <f_chdir+0x88>
 8010708:	2305      	movs	r3, #5
 801070a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801070e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010712:	4618      	mov	r0, r3
 8010714:	3744      	adds	r7, #68	; 0x44
 8010716:	46bd      	mov	sp, r7
 8010718:	bd90      	pop	{r4, r7, pc}

0801071a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b090      	sub	sp, #64	; 0x40
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f107 0208 	add.w	r2, r7, #8
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff f9c7 	bl	800fac0 <validate>
 8010732:	4603      	mov	r3, r0
 8010734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801073c:	2b00      	cmp	r3, #0
 801073e:	d103      	bne.n	8010748 <f_lseek+0x2e>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	7d5b      	ldrb	r3, [r3, #21]
 8010744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <f_lseek+0x3c>
 8010750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010754:	e201      	b.n	8010b5a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075a:	2b00      	cmp	r3, #0
 801075c:	f000 80d9 	beq.w	8010912 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010766:	d15a      	bne.n	801081e <f_lseek+0x104>
			tbl = fp->cltbl;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	1d1a      	adds	r2, r3, #4
 8010772:	627a      	str	r2, [r7, #36]	; 0x24
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	2302      	movs	r3, #2
 801077a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	2b00      	cmp	r3, #0
 8010786:	d03a      	beq.n	80107fe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078a:	613b      	str	r3, [r7, #16]
 801078c:	2300      	movs	r3, #0
 801078e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	3302      	adds	r3, #2
 8010794:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	3301      	adds	r3, #1
 801079e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fd ff08 	bl	800e5ba <get_fat>
 80107aa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d804      	bhi.n	80107bc <f_lseek+0xa2>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2202      	movs	r2, #2
 80107b6:	755a      	strb	r2, [r3, #21]
 80107b8:	2302      	movs	r3, #2
 80107ba:	e1ce      	b.n	8010b5a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c2:	d104      	bne.n	80107ce <f_lseek+0xb4>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	755a      	strb	r2, [r3, #21]
 80107ca:	2301      	movs	r3, #1
 80107cc:	e1c5      	b.n	8010b5a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3301      	adds	r3, #1
 80107d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d0de      	beq.n	8010796 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80107d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d809      	bhi.n	80107f4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80107e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e2:	1d1a      	adds	r2, r3, #4
 80107e4:	627a      	str	r2, [r7, #36]	; 0x24
 80107e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e8:	601a      	str	r2, [r3, #0]
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	1d1a      	adds	r2, r3, #4
 80107ee:	627a      	str	r2, [r7, #36]	; 0x24
 80107f0:	693a      	ldr	r2, [r7, #16]
 80107f2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	69db      	ldr	r3, [r3, #28]
 80107f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d3c4      	bcc.n	8010788 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010804:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	429a      	cmp	r2, r3
 801080c:	d803      	bhi.n	8010816 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010810:	2200      	movs	r2, #0
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	e19f      	b.n	8010b56 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010816:	2311      	movs	r3, #17
 8010818:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801081c:	e19b      	b.n	8010b56 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	683a      	ldr	r2, [r7, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d902      	bls.n	801082e <f_lseek+0x114>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	f000 818d 	beq.w	8010b56 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	3b01      	subs	r3, #1
 8010840:	4619      	mov	r1, r3
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7fe f99d 	bl	800eb82 <clmt_clust>
 8010848:	4602      	mov	r2, r0
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	69db      	ldr	r3, [r3, #28]
 8010854:	4619      	mov	r1, r3
 8010856:	4610      	mov	r0, r2
 8010858:	f7fd fe90 	bl	800e57c <clust2sect>
 801085c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d104      	bne.n	801086e <f_lseek+0x154>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2202      	movs	r2, #2
 8010868:	755a      	strb	r2, [r3, #21]
 801086a:	2302      	movs	r3, #2
 801086c:	e175      	b.n	8010b5a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	3b01      	subs	r3, #1
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	8992      	ldrh	r2, [r2, #12]
 8010876:	fbb3 f3f2 	udiv	r3, r3, r2
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	8952      	ldrh	r2, [r2, #10]
 801087e:	3a01      	subs	r2, #1
 8010880:	4013      	ands	r3, r2
 8010882:	69ba      	ldr	r2, [r7, #24]
 8010884:	4413      	add	r3, r2
 8010886:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	699b      	ldr	r3, [r3, #24]
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	8992      	ldrh	r2, [r2, #12]
 8010890:	fbb3 f1f2 	udiv	r1, r3, r2
 8010894:	fb02 f201 	mul.w	r2, r2, r1
 8010898:	1a9b      	subs	r3, r3, r2
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 815b 	beq.w	8010b56 <f_lseek+0x43c>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a1b      	ldr	r3, [r3, #32]
 80108a4:	69ba      	ldr	r2, [r7, #24]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f000 8155 	beq.w	8010b56 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	7d1b      	ldrb	r3, [r3, #20]
 80108b0:	b25b      	sxtb	r3, r3
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	da18      	bge.n	80108e8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	7858      	ldrb	r0, [r3, #1]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a1a      	ldr	r2, [r3, #32]
 80108c4:	2301      	movs	r3, #1
 80108c6:	f7fd facd 	bl	800de64 <disk_write>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d004      	beq.n	80108da <f_lseek+0x1c0>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	755a      	strb	r2, [r3, #21]
 80108d6:	2301      	movs	r3, #1
 80108d8:	e13f      	b.n	8010b5a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	7d1b      	ldrb	r3, [r3, #20]
 80108de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	7858      	ldrb	r0, [r3, #1]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108f2:	2301      	movs	r3, #1
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	f7fd fa95 	bl	800de24 <disk_read>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d004      	beq.n	801090a <f_lseek+0x1f0>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2201      	movs	r2, #1
 8010904:	755a      	strb	r2, [r3, #21]
 8010906:	2301      	movs	r3, #1
 8010908:	e127      	b.n	8010b5a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	69ba      	ldr	r2, [r7, #24]
 801090e:	621a      	str	r2, [r3, #32]
 8010910:	e121      	b.n	8010b56 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	d908      	bls.n	801092e <f_lseek+0x214>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7d1b      	ldrb	r3, [r3, #20]
 8010920:	f003 0302 	and.w	r3, r3, #2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	699b      	ldr	r3, [r3, #24]
 8010932:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	637b      	str	r3, [r7, #52]	; 0x34
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801093c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 80b5 	beq.w	8010ab0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	895b      	ldrh	r3, [r3, #10]
 801094a:	461a      	mov	r2, r3
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	899b      	ldrh	r3, [r3, #12]
 8010950:	fb03 f302 	mul.w	r3, r3, r2
 8010954:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d01b      	beq.n	8010994 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	1e5a      	subs	r2, r3, #1
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	fbb2 f2f3 	udiv	r2, r2, r3
 8010966:	6a3b      	ldr	r3, [r7, #32]
 8010968:	1e59      	subs	r1, r3, #1
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010970:	429a      	cmp	r2, r3
 8010972:	d30f      	bcc.n	8010994 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	1e5a      	subs	r2, r3, #1
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	425b      	negs	r3, r3
 801097c:	401a      	ands	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	699b      	ldr	r3, [r3, #24]
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	69db      	ldr	r3, [r3, #28]
 8010990:	63bb      	str	r3, [r7, #56]	; 0x38
 8010992:	e022      	b.n	80109da <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	2b00      	cmp	r3, #0
 801099e:	d119      	bne.n	80109d4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2100      	movs	r1, #0
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fe f854 	bl	800ea52 <create_chain>
 80109aa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d104      	bne.n	80109bc <f_lseek+0x2a2>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2202      	movs	r2, #2
 80109b6:	755a      	strb	r2, [r3, #21]
 80109b8:	2302      	movs	r3, #2
 80109ba:	e0ce      	b.n	8010b5a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c2:	d104      	bne.n	80109ce <f_lseek+0x2b4>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	755a      	strb	r2, [r3, #21]
 80109ca:	2301      	movs	r3, #1
 80109cc:	e0c5      	b.n	8010b5a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109d2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109d8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d067      	beq.n	8010ab0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80109e0:	e03a      	b.n	8010a58 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	603b      	str	r3, [r7, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	699a      	ldr	r2, [r3, #24]
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	441a      	add	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	7d1b      	ldrb	r3, [r3, #20]
 80109fa:	f003 0302 	and.w	r3, r3, #2
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d00b      	beq.n	8010a1a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe f823 	bl	800ea52 <create_chain>
 8010a0c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d108      	bne.n	8010a26 <f_lseek+0x30c>
							ofs = 0; break;
 8010a14:	2300      	movs	r3, #0
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	e022      	b.n	8010a60 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fd fdcb 	bl	800e5ba <get_fat>
 8010a24:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2c:	d104      	bne.n	8010a38 <f_lseek+0x31e>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	755a      	strb	r2, [r3, #21]
 8010a34:	2301      	movs	r3, #1
 8010a36:	e090      	b.n	8010b5a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d904      	bls.n	8010a48 <f_lseek+0x32e>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	69db      	ldr	r3, [r3, #28]
 8010a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d304      	bcc.n	8010a52 <f_lseek+0x338>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	755a      	strb	r2, [r3, #21]
 8010a4e:	2302      	movs	r3, #2
 8010a50:	e083      	b.n	8010b5a <f_lseek+0x440>
					fp->clust = clst;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a56:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d8c0      	bhi.n	80109e2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	699a      	ldr	r2, [r3, #24]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	441a      	add	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	899b      	ldrh	r3, [r3, #12]
 8010a70:	461a      	mov	r2, r3
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a78:	fb02 f201 	mul.w	r2, r2, r1
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d016      	beq.n	8010ab0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fd fd78 	bl	800e57c <clust2sect>
 8010a8c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d104      	bne.n	8010a9e <f_lseek+0x384>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2202      	movs	r2, #2
 8010a98:	755a      	strb	r2, [r3, #21]
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	e05d      	b.n	8010b5a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	899b      	ldrh	r3, [r3, #12]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aac:	4413      	add	r3, r2
 8010aae:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	699a      	ldr	r2, [r3, #24]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d90a      	bls.n	8010ad2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	699a      	ldr	r2, [r3, #24]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7d1b      	ldrb	r3, [r3, #20]
 8010ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	8992      	ldrh	r2, [r2, #12]
 8010ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ade:	fb02 f201 	mul.w	r2, r2, r1
 8010ae2:	1a9b      	subs	r3, r3, r2
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d036      	beq.n	8010b56 <f_lseek+0x43c>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6a1b      	ldr	r3, [r3, #32]
 8010aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d031      	beq.n	8010b56 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	7d1b      	ldrb	r3, [r3, #20]
 8010af6:	b25b      	sxtb	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	da18      	bge.n	8010b2e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	7858      	ldrb	r0, [r3, #1]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a1a      	ldr	r2, [r3, #32]
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	f7fd f9aa 	bl	800de64 <disk_write>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d004      	beq.n	8010b20 <f_lseek+0x406>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2201      	movs	r2, #1
 8010b1a:	755a      	strb	r2, [r3, #21]
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e01c      	b.n	8010b5a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
 8010b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	7858      	ldrb	r0, [r3, #1]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b38:	2301      	movs	r3, #1
 8010b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b3c:	f7fd f972 	bl	800de24 <disk_read>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d004      	beq.n	8010b50 <f_lseek+0x436>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	755a      	strb	r2, [r3, #21]
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e004      	b.n	8010b5a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b54:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3740      	adds	r7, #64	; 0x40
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b09e      	sub	sp, #120	; 0x78
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010b6e:	f107 010c 	add.w	r1, r7, #12
 8010b72:	1d3b      	adds	r3, r7, #4
 8010b74:	2202      	movs	r2, #2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fe fd1c 	bl	800f5b4 <find_volume>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8010b86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f040 80a4 	bne.w	8010cd8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7fe fbdb 	bl	800f354 <follow_path>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010ba4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d108      	bne.n	8010bbe <f_unlink+0x5c>
 8010bac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010bb0:	f003 0320 	and.w	r3, r3, #32
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010bb8:	2306      	movs	r3, #6
 8010bba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010bbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d108      	bne.n	8010bd8 <f_unlink+0x76>
 8010bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010bca:	2102      	movs	r1, #2
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fd fa87 	bl	800e0e0 <chk_lock>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010bd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d17b      	bne.n	8010cd8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010be0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010be4:	b25b      	sxtb	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	da03      	bge.n	8010bf2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010bea:	2306      	movs	r3, #6
 8010bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010bf0:	e008      	b.n	8010c04 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010bf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010bf6:	f003 0301 	and.w	r3, r3, #1
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d002      	beq.n	8010c04 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010bfe:	2307      	movs	r3, #7
 8010c00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8010c04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d13d      	bne.n	8010c88 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c10:	4611      	mov	r1, r2
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe f993 	bl	800ef3e <ld_clust>
 8010c18:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010c1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010c1e:	f003 0310 	and.w	r3, r3, #16
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d030      	beq.n	8010c88 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d103      	bne.n	8010c38 <f_unlink+0xd6>
						res = FR_DENIED;
 8010c30:	2307      	movs	r3, #7
 8010c32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010c36:	e027      	b.n	8010c88 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c3e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010c40:	f107 0310 	add.w	r3, r7, #16
 8010c44:	2100      	movs	r1, #0
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fd ffd3 	bl	800ebf2 <dir_sdi>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8010c52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d116      	bne.n	8010c88 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010c5a:	f107 0310 	add.w	r3, r7, #16
 8010c5e:	2100      	movs	r1, #0
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fe f9ab 	bl	800efbc <dir_read>
 8010c66:	4603      	mov	r3, r0
 8010c68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d102      	bne.n	8010c7a <f_unlink+0x118>
 8010c74:	2307      	movs	r3, #7
 8010c76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c7e:	2b04      	cmp	r3, #4
 8010c80:	d102      	bne.n	8010c88 <f_unlink+0x126>
 8010c82:	2300      	movs	r3, #0
 8010c84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8010c88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d123      	bne.n	8010cd8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fa75 	bl	800f184 <dir_remove>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010ca0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10c      	bne.n	8010cc2 <f_unlink+0x160>
 8010ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d009      	beq.n	8010cc2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010cae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fd fe66 	bl	800e988 <remove_chain>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010cc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <f_unlink+0x176>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fd fbe5 	bl	800e49c <sync_fs>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010cd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3778      	adds	r7, #120	; 0x78
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b096      	sub	sp, #88	; 0x58
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010cec:	f107 0108 	add.w	r1, r7, #8
 8010cf0:	1d3b      	adds	r3, r7, #4
 8010cf2:	2202      	movs	r2, #2
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fe fc5d 	bl	800f5b4 <find_volume>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f040 80ff 	bne.w	8010f0c <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	f107 030c 	add.w	r3, r7, #12
 8010d14:	4611      	mov	r1, r2
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fb1c 	bl	800f354 <follow_path>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010d22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d102      	bne.n	8010d30 <f_mkdir+0x4c>
 8010d2a:	2308      	movs	r3, #8
 8010d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d34:	2b04      	cmp	r3, #4
 8010d36:	d108      	bne.n	8010d4a <f_mkdir+0x66>
 8010d38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d3c:	f003 0320 	and.w	r3, r3, #32
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8010d44:	2306      	movs	r3, #6
 8010d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	f040 80dc 	bne.w	8010f0c <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010d54:	f107 030c 	add.w	r3, r7, #12
 8010d58:	2100      	movs	r1, #0
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fd fe79 	bl	800ea52 <create_chain>
 8010d60:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	895b      	ldrh	r3, [r3, #10]
 8010d66:	461a      	mov	r2, r3
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	899b      	ldrh	r3, [r3, #12]
 8010d6c:	fb03 f302 	mul.w	r3, r3, r2
 8010d70:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d102      	bne.n	8010d84 <f_mkdir+0xa0>
 8010d7e:	2307      	movs	r3, #7
 8010d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d102      	bne.n	8010d90 <f_mkdir+0xac>
 8010d8a:	2302      	movs	r3, #2
 8010d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d96:	d102      	bne.n	8010d9e <f_mkdir+0xba>
 8010d98:	2301      	movs	r3, #1
 8010d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <f_mkdir+0xd0>
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fb05 	bl	800e3b8 <sync_window>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8010db4:	f7fc fda6 	bl	800d904 <get_fattime>
 8010db8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d16c      	bne.n	8010e9c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fd fbd8 	bl	800e57c <clust2sect>
 8010dcc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	3338      	adds	r3, #56	; 0x38
 8010dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	899b      	ldrh	r3, [r3, #12]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dde:	f7fd f922 	bl	800e026 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010de2:	220b      	movs	r2, #11
 8010de4:	2120      	movs	r1, #32
 8010de6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010de8:	f7fd f91d 	bl	800e026 <mem_set>
					dir[DIR_Name] = '.';
 8010dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dee:	222e      	movs	r2, #46	; 0x2e
 8010df0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df4:	330b      	adds	r3, #11
 8010df6:	2210      	movs	r2, #16
 8010df8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dfc:	3316      	adds	r3, #22
 8010dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7fd f8c3 	bl	800df8c <st_dword>
					st_clust(fs, dir, dcl);
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe f8b5 	bl	800ef7c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e14:	3320      	adds	r3, #32
 8010e16:	2220      	movs	r2, #32
 8010e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fd f8e2 	bl	800dfe4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e22:	3321      	adds	r3, #33	; 0x21
 8010e24:	222e      	movs	r2, #46	; 0x2e
 8010e26:	701a      	strb	r2, [r3, #0]
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	d106      	bne.n	8010e42 <f_mkdir+0x15e>
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d101      	bne.n	8010e42 <f_mkdir+0x15e>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010e42:	68b8      	ldr	r0, [r7, #8]
 8010e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e46:	3320      	adds	r3, #32
 8010e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	f7fe f896 	bl	800ef7c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	895b      	ldrh	r3, [r3, #10]
 8010e54:	653b      	str	r3, [r7, #80]	; 0x50
 8010e56:	e01c      	b.n	8010e92 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8010e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2201      	movs	r2, #1
 8010e66:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fd faa4 	bl	800e3b8 <sync_window>
 8010e70:	4603      	mov	r3, r0
 8010e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8010e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10d      	bne.n	8010e9a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	899b      	ldrh	r3, [r3, #12]
 8010e82:	461a      	mov	r2, r3
 8010e84:	2100      	movs	r1, #0
 8010e86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e88:	f7fd f8cd 	bl	800e026 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	653b      	str	r3, [r7, #80]	; 0x50
 8010e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d1df      	bne.n	8010e58 <f_mkdir+0x174>
 8010e98:	e000      	b.n	8010e9c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010e9a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d107      	bne.n	8010eb4 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010ea4:	f107 030c 	add.w	r3, r7, #12
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe f939 	bl	800f120 <dir_register>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8010eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d120      	bne.n	8010efe <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec2:	3316      	adds	r3, #22
 8010ec4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd f860 	bl	800df8c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe f852 	bl	800ef7c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eda:	330b      	adds	r3, #11
 8010edc:	2210      	movs	r2, #16
 8010ede:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10e      	bne.n	8010f0c <f_mkdir+0x228>
					res = sync_fs(fs);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fd fad3 	bl	800e49c <sync_fs>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010efc:	e006      	b.n	8010f0c <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010efe:	f107 030c 	add.w	r3, r7, #12
 8010f02:	2200      	movs	r2, #0
 8010f04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fd fd3e 	bl	800e988 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3758      	adds	r7, #88	; 0x58
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b088      	sub	sp, #32
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010f24:	2300      	movs	r3, #0
 8010f26:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010f2c:	e01b      	b.n	8010f66 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010f2e:	f107 0310 	add.w	r3, r7, #16
 8010f32:	f107 0114 	add.w	r1, r7, #20
 8010f36:	2201      	movs	r2, #1
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff f809 	bl	800ff50 <f_read>
		if (rc != 1) break;
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d116      	bne.n	8010f72 <f_gets+0x5a>
		c = s[0];
 8010f44:	7d3b      	ldrb	r3, [r7, #20]
 8010f46:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010f48:	7dfb      	ldrb	r3, [r7, #23]
 8010f4a:	2b0d      	cmp	r3, #13
 8010f4c:	d100      	bne.n	8010f50 <f_gets+0x38>
 8010f4e:	e00a      	b.n	8010f66 <f_gets+0x4e>
		*p++ = c;
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	1c5a      	adds	r2, r3, #1
 8010f54:	61ba      	str	r2, [r7, #24]
 8010f56:	7dfa      	ldrb	r2, [r7, #23]
 8010f58:	701a      	strb	r2, [r3, #0]
		n++;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	2b0a      	cmp	r3, #10
 8010f64:	d007      	beq.n	8010f76 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	69fa      	ldr	r2, [r7, #28]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	dbde      	blt.n	8010f2e <f_gets+0x16>
 8010f70:	e002      	b.n	8010f78 <f_gets+0x60>
		if (rc != 1) break;
 8010f72:	bf00      	nop
 8010f74:	e000      	b.n	8010f78 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010f76:	bf00      	nop
	}
	*p = 0;
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <f_gets+0x70>
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	e000      	b.n	8010f8a <f_gets+0x72>
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3720      	adds	r7, #32
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b087      	sub	sp, #28
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010faa:	4b1f      	ldr	r3, [pc, #124]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fac:	7a5b      	ldrb	r3, [r3, #9]
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d131      	bne.n	8011018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010fb4:	4b1c      	ldr	r3, [pc, #112]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fb6:	7a5b      	ldrb	r3, [r3, #9]
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	461a      	mov	r2, r3
 8010fbc:	4b1a      	ldr	r3, [pc, #104]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010fc2:	4b19      	ldr	r3, [pc, #100]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fc4:	7a5b      	ldrb	r3, [r3, #9]
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	4a17      	ldr	r2, [pc, #92]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4413      	add	r3, r2
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010fd2:	4b15      	ldr	r3, [pc, #84]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fd4:	7a5b      	ldrb	r3, [r3, #9]
 8010fd6:	b2db      	uxtb	r3, r3
 8010fd8:	461a      	mov	r2, r3
 8010fda:	4b13      	ldr	r3, [pc, #76]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fdc:	4413      	add	r3, r2
 8010fde:	79fa      	ldrb	r2, [r7, #7]
 8010fe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010fe2:	4b11      	ldr	r3, [pc, #68]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fe4:	7a5b      	ldrb	r3, [r3, #9]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	b2d1      	uxtb	r1, r2
 8010fec:	4a0e      	ldr	r2, [pc, #56]	; (8011028 <FATFS_LinkDriverEx+0x94>)
 8010fee:	7251      	strb	r1, [r2, #9]
 8010ff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010ff2:	7dbb      	ldrb	r3, [r7, #22]
 8010ff4:	3330      	adds	r3, #48	; 0x30
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	3301      	adds	r3, #1
 8011000:	223a      	movs	r2, #58	; 0x3a
 8011002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	3302      	adds	r3, #2
 8011008:	222f      	movs	r2, #47	; 0x2f
 801100a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	3303      	adds	r3, #3
 8011010:	2200      	movs	r2, #0
 8011012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011014:	2300      	movs	r3, #0
 8011016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011018:	7dfb      	ldrb	r3, [r7, #23]
}
 801101a:	4618      	mov	r0, r3
 801101c:	371c      	adds	r7, #28
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	20036a70 	.word	0x20036a70

0801102c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011036:	2200      	movs	r2, #0
 8011038:	6839      	ldr	r1, [r7, #0]
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff ffaa 	bl	8010f94 <FATFS_LinkDriverEx>
 8011040:	4603      	mov	r3, r0
}
 8011042:	4618      	mov	r0, r3
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	0000      	movs	r0, r0
 801104c:	0000      	movs	r0, r0
	...

08011050 <cos>:
 8011050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011052:	ec51 0b10 	vmov	r0, r1, d0
 8011056:	4a1e      	ldr	r2, [pc, #120]	; (80110d0 <cos+0x80>)
 8011058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801105c:	4293      	cmp	r3, r2
 801105e:	dc06      	bgt.n	801106e <cos+0x1e>
 8011060:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80110c8 <cos+0x78>
 8011064:	f000 fb80 	bl	8011768 <__kernel_cos>
 8011068:	ec51 0b10 	vmov	r0, r1, d0
 801106c:	e007      	b.n	801107e <cos+0x2e>
 801106e:	4a19      	ldr	r2, [pc, #100]	; (80110d4 <cos+0x84>)
 8011070:	4293      	cmp	r3, r2
 8011072:	dd09      	ble.n	8011088 <cos+0x38>
 8011074:	ee10 2a10 	vmov	r2, s0
 8011078:	460b      	mov	r3, r1
 801107a:	f7ef f91d 	bl	80002b8 <__aeabi_dsub>
 801107e:	ec41 0b10 	vmov	d0, r0, r1
 8011082:	b005      	add	sp, #20
 8011084:	f85d fb04 	ldr.w	pc, [sp], #4
 8011088:	4668      	mov	r0, sp
 801108a:	f000 f8c9 	bl	8011220 <__ieee754_rem_pio2>
 801108e:	f000 0003 	and.w	r0, r0, #3
 8011092:	2801      	cmp	r0, #1
 8011094:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011098:	ed9d 0b00 	vldr	d0, [sp]
 801109c:	d007      	beq.n	80110ae <cos+0x5e>
 801109e:	2802      	cmp	r0, #2
 80110a0:	d00e      	beq.n	80110c0 <cos+0x70>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d0de      	beq.n	8011064 <cos+0x14>
 80110a6:	2001      	movs	r0, #1
 80110a8:	f000 ff66 	bl	8011f78 <__kernel_sin>
 80110ac:	e7dc      	b.n	8011068 <cos+0x18>
 80110ae:	f000 ff63 	bl	8011f78 <__kernel_sin>
 80110b2:	ec53 2b10 	vmov	r2, r3, d0
 80110b6:	ee10 0a10 	vmov	r0, s0
 80110ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80110be:	e7de      	b.n	801107e <cos+0x2e>
 80110c0:	f000 fb52 	bl	8011768 <__kernel_cos>
 80110c4:	e7f5      	b.n	80110b2 <cos+0x62>
 80110c6:	bf00      	nop
	...
 80110d0:	3fe921fb 	.word	0x3fe921fb
 80110d4:	7fefffff 	.word	0x7fefffff

080110d8 <sin>:
 80110d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110da:	ec51 0b10 	vmov	r0, r1, d0
 80110de:	4a20      	ldr	r2, [pc, #128]	; (8011160 <sin+0x88>)
 80110e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110e4:	4293      	cmp	r3, r2
 80110e6:	dc07      	bgt.n	80110f8 <sin+0x20>
 80110e8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011158 <sin+0x80>
 80110ec:	2000      	movs	r0, #0
 80110ee:	f000 ff43 	bl	8011f78 <__kernel_sin>
 80110f2:	ec51 0b10 	vmov	r0, r1, d0
 80110f6:	e007      	b.n	8011108 <sin+0x30>
 80110f8:	4a1a      	ldr	r2, [pc, #104]	; (8011164 <sin+0x8c>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	dd09      	ble.n	8011112 <sin+0x3a>
 80110fe:	ee10 2a10 	vmov	r2, s0
 8011102:	460b      	mov	r3, r1
 8011104:	f7ef f8d8 	bl	80002b8 <__aeabi_dsub>
 8011108:	ec41 0b10 	vmov	d0, r0, r1
 801110c:	b005      	add	sp, #20
 801110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011112:	4668      	mov	r0, sp
 8011114:	f000 f884 	bl	8011220 <__ieee754_rem_pio2>
 8011118:	f000 0003 	and.w	r0, r0, #3
 801111c:	2801      	cmp	r0, #1
 801111e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011122:	ed9d 0b00 	vldr	d0, [sp]
 8011126:	d004      	beq.n	8011132 <sin+0x5a>
 8011128:	2802      	cmp	r0, #2
 801112a:	d005      	beq.n	8011138 <sin+0x60>
 801112c:	b970      	cbnz	r0, 801114c <sin+0x74>
 801112e:	2001      	movs	r0, #1
 8011130:	e7dd      	b.n	80110ee <sin+0x16>
 8011132:	f000 fb19 	bl	8011768 <__kernel_cos>
 8011136:	e7dc      	b.n	80110f2 <sin+0x1a>
 8011138:	2001      	movs	r0, #1
 801113a:	f000 ff1d 	bl	8011f78 <__kernel_sin>
 801113e:	ec53 2b10 	vmov	r2, r3, d0
 8011142:	ee10 0a10 	vmov	r0, s0
 8011146:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801114a:	e7dd      	b.n	8011108 <sin+0x30>
 801114c:	f000 fb0c 	bl	8011768 <__kernel_cos>
 8011150:	e7f5      	b.n	801113e <sin+0x66>
 8011152:	bf00      	nop
 8011154:	f3af 8000 	nop.w
	...
 8011160:	3fe921fb 	.word	0x3fe921fb
 8011164:	7fefffff 	.word	0x7fefffff

08011168 <sqrt>:
 8011168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801116c:	ed2d 8b02 	vpush	{d8}
 8011170:	b08b      	sub	sp, #44	; 0x2c
 8011172:	ec55 4b10 	vmov	r4, r5, d0
 8011176:	f000 fa45 	bl	8011604 <__ieee754_sqrt>
 801117a:	4b26      	ldr	r3, [pc, #152]	; (8011214 <sqrt+0xac>)
 801117c:	eeb0 8a40 	vmov.f32	s16, s0
 8011180:	eef0 8a60 	vmov.f32	s17, s1
 8011184:	f993 6000 	ldrsb.w	r6, [r3]
 8011188:	1c73      	adds	r3, r6, #1
 801118a:	d02a      	beq.n	80111e2 <sqrt+0x7a>
 801118c:	4622      	mov	r2, r4
 801118e:	462b      	mov	r3, r5
 8011190:	4620      	mov	r0, r4
 8011192:	4629      	mov	r1, r5
 8011194:	f7ef fce2 	bl	8000b5c <__aeabi_dcmpun>
 8011198:	4607      	mov	r7, r0
 801119a:	bb10      	cbnz	r0, 80111e2 <sqrt+0x7a>
 801119c:	f04f 0800 	mov.w	r8, #0
 80111a0:	f04f 0900 	mov.w	r9, #0
 80111a4:	4642      	mov	r2, r8
 80111a6:	464b      	mov	r3, r9
 80111a8:	4620      	mov	r0, r4
 80111aa:	4629      	mov	r1, r5
 80111ac:	f7ef fcae 	bl	8000b0c <__aeabi_dcmplt>
 80111b0:	b1b8      	cbz	r0, 80111e2 <sqrt+0x7a>
 80111b2:	2301      	movs	r3, #1
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	4b18      	ldr	r3, [pc, #96]	; (8011218 <sqrt+0xb0>)
 80111b8:	9301      	str	r3, [sp, #4]
 80111ba:	9708      	str	r7, [sp, #32]
 80111bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80111c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80111c4:	b9b6      	cbnz	r6, 80111f4 <sqrt+0x8c>
 80111c6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80111ca:	4668      	mov	r0, sp
 80111cc:	f001 f81c 	bl	8012208 <matherr>
 80111d0:	b1d0      	cbz	r0, 8011208 <sqrt+0xa0>
 80111d2:	9b08      	ldr	r3, [sp, #32]
 80111d4:	b11b      	cbz	r3, 80111de <sqrt+0x76>
 80111d6:	f001 f8a1 	bl	801231c <__errno>
 80111da:	9b08      	ldr	r3, [sp, #32]
 80111dc:	6003      	str	r3, [r0, #0]
 80111de:	ed9d 8b06 	vldr	d8, [sp, #24]
 80111e2:	eeb0 0a48 	vmov.f32	s0, s16
 80111e6:	eef0 0a68 	vmov.f32	s1, s17
 80111ea:	b00b      	add	sp, #44	; 0x2c
 80111ec:	ecbd 8b02 	vpop	{d8}
 80111f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111f4:	4642      	mov	r2, r8
 80111f6:	464b      	mov	r3, r9
 80111f8:	4640      	mov	r0, r8
 80111fa:	4649      	mov	r1, r9
 80111fc:	f7ef fb3e 	bl	800087c <__aeabi_ddiv>
 8011200:	2e02      	cmp	r6, #2
 8011202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011206:	d1e0      	bne.n	80111ca <sqrt+0x62>
 8011208:	f001 f888 	bl	801231c <__errno>
 801120c:	2321      	movs	r3, #33	; 0x21
 801120e:	6003      	str	r3, [r0, #0]
 8011210:	e7df      	b.n	80111d2 <sqrt+0x6a>
 8011212:	bf00      	nop
 8011214:	2000000a 	.word	0x2000000a
 8011218:	080173dc 	.word	0x080173dc
 801121c:	00000000 	.word	0x00000000

08011220 <__ieee754_rem_pio2>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	ec57 6b10 	vmov	r6, r7, d0
 8011228:	4bc3      	ldr	r3, [pc, #780]	; (8011538 <__ieee754_rem_pio2+0x318>)
 801122a:	b08d      	sub	sp, #52	; 0x34
 801122c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011230:	4598      	cmp	r8, r3
 8011232:	4604      	mov	r4, r0
 8011234:	9704      	str	r7, [sp, #16]
 8011236:	dc07      	bgt.n	8011248 <__ieee754_rem_pio2+0x28>
 8011238:	2200      	movs	r2, #0
 801123a:	2300      	movs	r3, #0
 801123c:	ed84 0b00 	vstr	d0, [r4]
 8011240:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011244:	2500      	movs	r5, #0
 8011246:	e027      	b.n	8011298 <__ieee754_rem_pio2+0x78>
 8011248:	4bbc      	ldr	r3, [pc, #752]	; (801153c <__ieee754_rem_pio2+0x31c>)
 801124a:	4598      	cmp	r8, r3
 801124c:	dc75      	bgt.n	801133a <__ieee754_rem_pio2+0x11a>
 801124e:	9b04      	ldr	r3, [sp, #16]
 8011250:	4dbb      	ldr	r5, [pc, #748]	; (8011540 <__ieee754_rem_pio2+0x320>)
 8011252:	2b00      	cmp	r3, #0
 8011254:	ee10 0a10 	vmov	r0, s0
 8011258:	a3a9      	add	r3, pc, #676	; (adr r3, 8011500 <__ieee754_rem_pio2+0x2e0>)
 801125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125e:	4639      	mov	r1, r7
 8011260:	dd36      	ble.n	80112d0 <__ieee754_rem_pio2+0xb0>
 8011262:	f7ef f829 	bl	80002b8 <__aeabi_dsub>
 8011266:	45a8      	cmp	r8, r5
 8011268:	4606      	mov	r6, r0
 801126a:	460f      	mov	r7, r1
 801126c:	d018      	beq.n	80112a0 <__ieee754_rem_pio2+0x80>
 801126e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011508 <__ieee754_rem_pio2+0x2e8>)
 8011270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011274:	f7ef f820 	bl	80002b8 <__aeabi_dsub>
 8011278:	4602      	mov	r2, r0
 801127a:	460b      	mov	r3, r1
 801127c:	e9c4 2300 	strd	r2, r3, [r4]
 8011280:	4630      	mov	r0, r6
 8011282:	4639      	mov	r1, r7
 8011284:	f7ef f818 	bl	80002b8 <__aeabi_dsub>
 8011288:	a39f      	add	r3, pc, #636	; (adr r3, 8011508 <__ieee754_rem_pio2+0x2e8>)
 801128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128e:	f7ef f813 	bl	80002b8 <__aeabi_dsub>
 8011292:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011296:	2501      	movs	r5, #1
 8011298:	4628      	mov	r0, r5
 801129a:	b00d      	add	sp, #52	; 0x34
 801129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a0:	a39b      	add	r3, pc, #620	; (adr r3, 8011510 <__ieee754_rem_pio2+0x2f0>)
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	f7ef f807 	bl	80002b8 <__aeabi_dsub>
 80112aa:	a39b      	add	r3, pc, #620	; (adr r3, 8011518 <__ieee754_rem_pio2+0x2f8>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	4606      	mov	r6, r0
 80112b2:	460f      	mov	r7, r1
 80112b4:	f7ef f800 	bl	80002b8 <__aeabi_dsub>
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	e9c4 2300 	strd	r2, r3, [r4]
 80112c0:	4630      	mov	r0, r6
 80112c2:	4639      	mov	r1, r7
 80112c4:	f7ee fff8 	bl	80002b8 <__aeabi_dsub>
 80112c8:	a393      	add	r3, pc, #588	; (adr r3, 8011518 <__ieee754_rem_pio2+0x2f8>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	e7de      	b.n	801128e <__ieee754_rem_pio2+0x6e>
 80112d0:	f7ee fff4 	bl	80002bc <__adddf3>
 80112d4:	45a8      	cmp	r8, r5
 80112d6:	4606      	mov	r6, r0
 80112d8:	460f      	mov	r7, r1
 80112da:	d016      	beq.n	801130a <__ieee754_rem_pio2+0xea>
 80112dc:	a38a      	add	r3, pc, #552	; (adr r3, 8011508 <__ieee754_rem_pio2+0x2e8>)
 80112de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e2:	f7ee ffeb 	bl	80002bc <__adddf3>
 80112e6:	4602      	mov	r2, r0
 80112e8:	460b      	mov	r3, r1
 80112ea:	e9c4 2300 	strd	r2, r3, [r4]
 80112ee:	4630      	mov	r0, r6
 80112f0:	4639      	mov	r1, r7
 80112f2:	f7ee ffe1 	bl	80002b8 <__aeabi_dsub>
 80112f6:	a384      	add	r3, pc, #528	; (adr r3, 8011508 <__ieee754_rem_pio2+0x2e8>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ffde 	bl	80002bc <__adddf3>
 8011300:	f04f 35ff 	mov.w	r5, #4294967295
 8011304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011308:	e7c6      	b.n	8011298 <__ieee754_rem_pio2+0x78>
 801130a:	a381      	add	r3, pc, #516	; (adr r3, 8011510 <__ieee754_rem_pio2+0x2f0>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	f7ee ffd4 	bl	80002bc <__adddf3>
 8011314:	a380      	add	r3, pc, #512	; (adr r3, 8011518 <__ieee754_rem_pio2+0x2f8>)
 8011316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131a:	4606      	mov	r6, r0
 801131c:	460f      	mov	r7, r1
 801131e:	f7ee ffcd 	bl	80002bc <__adddf3>
 8011322:	4602      	mov	r2, r0
 8011324:	460b      	mov	r3, r1
 8011326:	e9c4 2300 	strd	r2, r3, [r4]
 801132a:	4630      	mov	r0, r6
 801132c:	4639      	mov	r1, r7
 801132e:	f7ee ffc3 	bl	80002b8 <__aeabi_dsub>
 8011332:	a379      	add	r3, pc, #484	; (adr r3, 8011518 <__ieee754_rem_pio2+0x2f8>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	e7e0      	b.n	80112fc <__ieee754_rem_pio2+0xdc>
 801133a:	4b82      	ldr	r3, [pc, #520]	; (8011544 <__ieee754_rem_pio2+0x324>)
 801133c:	4598      	cmp	r8, r3
 801133e:	f300 80d0 	bgt.w	80114e2 <__ieee754_rem_pio2+0x2c2>
 8011342:	f000 fed3 	bl	80120ec <fabs>
 8011346:	ec57 6b10 	vmov	r6, r7, d0
 801134a:	ee10 0a10 	vmov	r0, s0
 801134e:	a374      	add	r3, pc, #464	; (adr r3, 8011520 <__ieee754_rem_pio2+0x300>)
 8011350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011354:	4639      	mov	r1, r7
 8011356:	f7ef f967 	bl	8000628 <__aeabi_dmul>
 801135a:	2200      	movs	r2, #0
 801135c:	4b7a      	ldr	r3, [pc, #488]	; (8011548 <__ieee754_rem_pio2+0x328>)
 801135e:	f7ee ffad 	bl	80002bc <__adddf3>
 8011362:	f7ef fc11 	bl	8000b88 <__aeabi_d2iz>
 8011366:	4605      	mov	r5, r0
 8011368:	f7ef f8f4 	bl	8000554 <__aeabi_i2d>
 801136c:	a364      	add	r3, pc, #400	; (adr r3, 8011500 <__ieee754_rem_pio2+0x2e0>)
 801136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011376:	f7ef f957 	bl	8000628 <__aeabi_dmul>
 801137a:	4602      	mov	r2, r0
 801137c:	460b      	mov	r3, r1
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7ee ff99 	bl	80002b8 <__aeabi_dsub>
 8011386:	a360      	add	r3, pc, #384	; (adr r3, 8011508 <__ieee754_rem_pio2+0x2e8>)
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	4682      	mov	sl, r0
 801138e:	468b      	mov	fp, r1
 8011390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011394:	f7ef f948 	bl	8000628 <__aeabi_dmul>
 8011398:	2d1f      	cmp	r5, #31
 801139a:	4606      	mov	r6, r0
 801139c:	460f      	mov	r7, r1
 801139e:	dc0c      	bgt.n	80113ba <__ieee754_rem_pio2+0x19a>
 80113a0:	1e6a      	subs	r2, r5, #1
 80113a2:	4b6a      	ldr	r3, [pc, #424]	; (801154c <__ieee754_rem_pio2+0x32c>)
 80113a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a8:	4543      	cmp	r3, r8
 80113aa:	d006      	beq.n	80113ba <__ieee754_rem_pio2+0x19a>
 80113ac:	4632      	mov	r2, r6
 80113ae:	463b      	mov	r3, r7
 80113b0:	4650      	mov	r0, sl
 80113b2:	4659      	mov	r1, fp
 80113b4:	f7ee ff80 	bl	80002b8 <__aeabi_dsub>
 80113b8:	e00e      	b.n	80113d8 <__ieee754_rem_pio2+0x1b8>
 80113ba:	4632      	mov	r2, r6
 80113bc:	463b      	mov	r3, r7
 80113be:	4650      	mov	r0, sl
 80113c0:	4659      	mov	r1, fp
 80113c2:	f7ee ff79 	bl	80002b8 <__aeabi_dsub>
 80113c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80113ca:	9305      	str	r3, [sp, #20]
 80113cc:	9a05      	ldr	r2, [sp, #20]
 80113ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	2b10      	cmp	r3, #16
 80113d6:	dc02      	bgt.n	80113de <__ieee754_rem_pio2+0x1be>
 80113d8:	e9c4 0100 	strd	r0, r1, [r4]
 80113dc:	e039      	b.n	8011452 <__ieee754_rem_pio2+0x232>
 80113de:	a34c      	add	r3, pc, #304	; (adr r3, 8011510 <__ieee754_rem_pio2+0x2f0>)
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113e8:	f7ef f91e 	bl	8000628 <__aeabi_dmul>
 80113ec:	4606      	mov	r6, r0
 80113ee:	460f      	mov	r7, r1
 80113f0:	4602      	mov	r2, r0
 80113f2:	460b      	mov	r3, r1
 80113f4:	4650      	mov	r0, sl
 80113f6:	4659      	mov	r1, fp
 80113f8:	f7ee ff5e 	bl	80002b8 <__aeabi_dsub>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4680      	mov	r8, r0
 8011402:	4689      	mov	r9, r1
 8011404:	4650      	mov	r0, sl
 8011406:	4659      	mov	r1, fp
 8011408:	f7ee ff56 	bl	80002b8 <__aeabi_dsub>
 801140c:	4632      	mov	r2, r6
 801140e:	463b      	mov	r3, r7
 8011410:	f7ee ff52 	bl	80002b8 <__aeabi_dsub>
 8011414:	a340      	add	r3, pc, #256	; (adr r3, 8011518 <__ieee754_rem_pio2+0x2f8>)
 8011416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141a:	4606      	mov	r6, r0
 801141c:	460f      	mov	r7, r1
 801141e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011422:	f7ef f901 	bl	8000628 <__aeabi_dmul>
 8011426:	4632      	mov	r2, r6
 8011428:	463b      	mov	r3, r7
 801142a:	f7ee ff45 	bl	80002b8 <__aeabi_dsub>
 801142e:	4602      	mov	r2, r0
 8011430:	460b      	mov	r3, r1
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	4640      	mov	r0, r8
 8011438:	4649      	mov	r1, r9
 801143a:	f7ee ff3d 	bl	80002b8 <__aeabi_dsub>
 801143e:	9a05      	ldr	r2, [sp, #20]
 8011440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	2b31      	cmp	r3, #49	; 0x31
 8011448:	dc20      	bgt.n	801148c <__ieee754_rem_pio2+0x26c>
 801144a:	e9c4 0100 	strd	r0, r1, [r4]
 801144e:	46c2      	mov	sl, r8
 8011450:	46cb      	mov	fp, r9
 8011452:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011456:	4650      	mov	r0, sl
 8011458:	4642      	mov	r2, r8
 801145a:	464b      	mov	r3, r9
 801145c:	4659      	mov	r1, fp
 801145e:	f7ee ff2b 	bl	80002b8 <__aeabi_dsub>
 8011462:	463b      	mov	r3, r7
 8011464:	4632      	mov	r2, r6
 8011466:	f7ee ff27 	bl	80002b8 <__aeabi_dsub>
 801146a:	9b04      	ldr	r3, [sp, #16]
 801146c:	2b00      	cmp	r3, #0
 801146e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011472:	f6bf af11 	bge.w	8011298 <__ieee754_rem_pio2+0x78>
 8011476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801147a:	6063      	str	r3, [r4, #4]
 801147c:	f8c4 8000 	str.w	r8, [r4]
 8011480:	60a0      	str	r0, [r4, #8]
 8011482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011486:	60e3      	str	r3, [r4, #12]
 8011488:	426d      	negs	r5, r5
 801148a:	e705      	b.n	8011298 <__ieee754_rem_pio2+0x78>
 801148c:	a326      	add	r3, pc, #152	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011496:	f7ef f8c7 	bl	8000628 <__aeabi_dmul>
 801149a:	4606      	mov	r6, r0
 801149c:	460f      	mov	r7, r1
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ee ff07 	bl	80002b8 <__aeabi_dsub>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4682      	mov	sl, r0
 80114b0:	468b      	mov	fp, r1
 80114b2:	4640      	mov	r0, r8
 80114b4:	4649      	mov	r1, r9
 80114b6:	f7ee feff 	bl	80002b8 <__aeabi_dsub>
 80114ba:	4632      	mov	r2, r6
 80114bc:	463b      	mov	r3, r7
 80114be:	f7ee fefb 	bl	80002b8 <__aeabi_dsub>
 80114c2:	a31b      	add	r3, pc, #108	; (adr r3, 8011530 <__ieee754_rem_pio2+0x310>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	4606      	mov	r6, r0
 80114ca:	460f      	mov	r7, r1
 80114cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114d0:	f7ef f8aa 	bl	8000628 <__aeabi_dmul>
 80114d4:	4632      	mov	r2, r6
 80114d6:	463b      	mov	r3, r7
 80114d8:	f7ee feee 	bl	80002b8 <__aeabi_dsub>
 80114dc:	4606      	mov	r6, r0
 80114de:	460f      	mov	r7, r1
 80114e0:	e764      	b.n	80113ac <__ieee754_rem_pio2+0x18c>
 80114e2:	4b1b      	ldr	r3, [pc, #108]	; (8011550 <__ieee754_rem_pio2+0x330>)
 80114e4:	4598      	cmp	r8, r3
 80114e6:	dd35      	ble.n	8011554 <__ieee754_rem_pio2+0x334>
 80114e8:	ee10 2a10 	vmov	r2, s0
 80114ec:	463b      	mov	r3, r7
 80114ee:	4630      	mov	r0, r6
 80114f0:	4639      	mov	r1, r7
 80114f2:	f7ee fee1 	bl	80002b8 <__aeabi_dsub>
 80114f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114fa:	e9c4 0100 	strd	r0, r1, [r4]
 80114fe:	e6a1      	b.n	8011244 <__ieee754_rem_pio2+0x24>
 8011500:	54400000 	.word	0x54400000
 8011504:	3ff921fb 	.word	0x3ff921fb
 8011508:	1a626331 	.word	0x1a626331
 801150c:	3dd0b461 	.word	0x3dd0b461
 8011510:	1a600000 	.word	0x1a600000
 8011514:	3dd0b461 	.word	0x3dd0b461
 8011518:	2e037073 	.word	0x2e037073
 801151c:	3ba3198a 	.word	0x3ba3198a
 8011520:	6dc9c883 	.word	0x6dc9c883
 8011524:	3fe45f30 	.word	0x3fe45f30
 8011528:	2e000000 	.word	0x2e000000
 801152c:	3ba3198a 	.word	0x3ba3198a
 8011530:	252049c1 	.word	0x252049c1
 8011534:	397b839a 	.word	0x397b839a
 8011538:	3fe921fb 	.word	0x3fe921fb
 801153c:	4002d97b 	.word	0x4002d97b
 8011540:	3ff921fb 	.word	0x3ff921fb
 8011544:	413921fb 	.word	0x413921fb
 8011548:	3fe00000 	.word	0x3fe00000
 801154c:	080173e4 	.word	0x080173e4
 8011550:	7fefffff 	.word	0x7fefffff
 8011554:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011558:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801155c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011560:	4630      	mov	r0, r6
 8011562:	460f      	mov	r7, r1
 8011564:	f7ef fb10 	bl	8000b88 <__aeabi_d2iz>
 8011568:	f7ee fff4 	bl	8000554 <__aeabi_i2d>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	4630      	mov	r0, r6
 8011572:	4639      	mov	r1, r7
 8011574:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011578:	f7ee fe9e 	bl	80002b8 <__aeabi_dsub>
 801157c:	2200      	movs	r2, #0
 801157e:	4b1f      	ldr	r3, [pc, #124]	; (80115fc <__ieee754_rem_pio2+0x3dc>)
 8011580:	f7ef f852 	bl	8000628 <__aeabi_dmul>
 8011584:	460f      	mov	r7, r1
 8011586:	4606      	mov	r6, r0
 8011588:	f7ef fafe 	bl	8000b88 <__aeabi_d2iz>
 801158c:	f7ee ffe2 	bl	8000554 <__aeabi_i2d>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801159c:	f7ee fe8c 	bl	80002b8 <__aeabi_dsub>
 80115a0:	2200      	movs	r2, #0
 80115a2:	4b16      	ldr	r3, [pc, #88]	; (80115fc <__ieee754_rem_pio2+0x3dc>)
 80115a4:	f7ef f840 	bl	8000628 <__aeabi_dmul>
 80115a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80115ac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80115b0:	f04f 0803 	mov.w	r8, #3
 80115b4:	2600      	movs	r6, #0
 80115b6:	2700      	movs	r7, #0
 80115b8:	4632      	mov	r2, r6
 80115ba:	463b      	mov	r3, r7
 80115bc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80115c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80115c4:	f7ef fa98 	bl	8000af8 <__aeabi_dcmpeq>
 80115c8:	b9b0      	cbnz	r0, 80115f8 <__ieee754_rem_pio2+0x3d8>
 80115ca:	4b0d      	ldr	r3, [pc, #52]	; (8011600 <__ieee754_rem_pio2+0x3e0>)
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	2302      	movs	r3, #2
 80115d0:	9300      	str	r3, [sp, #0]
 80115d2:	462a      	mov	r2, r5
 80115d4:	4643      	mov	r3, r8
 80115d6:	4621      	mov	r1, r4
 80115d8:	a806      	add	r0, sp, #24
 80115da:	f000 f98d 	bl	80118f8 <__kernel_rem_pio2>
 80115de:	9b04      	ldr	r3, [sp, #16]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	4605      	mov	r5, r0
 80115e4:	f6bf ae58 	bge.w	8011298 <__ieee754_rem_pio2+0x78>
 80115e8:	6863      	ldr	r3, [r4, #4]
 80115ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80115ee:	6063      	str	r3, [r4, #4]
 80115f0:	68e3      	ldr	r3, [r4, #12]
 80115f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80115f6:	e746      	b.n	8011486 <__ieee754_rem_pio2+0x266>
 80115f8:	46d0      	mov	r8, sl
 80115fa:	e7dd      	b.n	80115b8 <__ieee754_rem_pio2+0x398>
 80115fc:	41700000 	.word	0x41700000
 8011600:	08017464 	.word	0x08017464

08011604 <__ieee754_sqrt>:
 8011604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011608:	4955      	ldr	r1, [pc, #340]	; (8011760 <__ieee754_sqrt+0x15c>)
 801160a:	ec55 4b10 	vmov	r4, r5, d0
 801160e:	43a9      	bics	r1, r5
 8011610:	462b      	mov	r3, r5
 8011612:	462a      	mov	r2, r5
 8011614:	d112      	bne.n	801163c <__ieee754_sqrt+0x38>
 8011616:	ee10 2a10 	vmov	r2, s0
 801161a:	ee10 0a10 	vmov	r0, s0
 801161e:	4629      	mov	r1, r5
 8011620:	f7ef f802 	bl	8000628 <__aeabi_dmul>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4620      	mov	r0, r4
 801162a:	4629      	mov	r1, r5
 801162c:	f7ee fe46 	bl	80002bc <__adddf3>
 8011630:	4604      	mov	r4, r0
 8011632:	460d      	mov	r5, r1
 8011634:	ec45 4b10 	vmov	d0, r4, r5
 8011638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801163c:	2d00      	cmp	r5, #0
 801163e:	ee10 0a10 	vmov	r0, s0
 8011642:	4621      	mov	r1, r4
 8011644:	dc0f      	bgt.n	8011666 <__ieee754_sqrt+0x62>
 8011646:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801164a:	4330      	orrs	r0, r6
 801164c:	d0f2      	beq.n	8011634 <__ieee754_sqrt+0x30>
 801164e:	b155      	cbz	r5, 8011666 <__ieee754_sqrt+0x62>
 8011650:	ee10 2a10 	vmov	r2, s0
 8011654:	4620      	mov	r0, r4
 8011656:	4629      	mov	r1, r5
 8011658:	f7ee fe2e 	bl	80002b8 <__aeabi_dsub>
 801165c:	4602      	mov	r2, r0
 801165e:	460b      	mov	r3, r1
 8011660:	f7ef f90c 	bl	800087c <__aeabi_ddiv>
 8011664:	e7e4      	b.n	8011630 <__ieee754_sqrt+0x2c>
 8011666:	151b      	asrs	r3, r3, #20
 8011668:	d073      	beq.n	8011752 <__ieee754_sqrt+0x14e>
 801166a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801166e:	07dd      	lsls	r5, r3, #31
 8011670:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011674:	bf48      	it	mi
 8011676:	0fc8      	lsrmi	r0, r1, #31
 8011678:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801167c:	bf44      	itt	mi
 801167e:	0049      	lslmi	r1, r1, #1
 8011680:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011684:	2500      	movs	r5, #0
 8011686:	1058      	asrs	r0, r3, #1
 8011688:	0fcb      	lsrs	r3, r1, #31
 801168a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801168e:	0049      	lsls	r1, r1, #1
 8011690:	2316      	movs	r3, #22
 8011692:	462c      	mov	r4, r5
 8011694:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011698:	19a7      	adds	r7, r4, r6
 801169a:	4297      	cmp	r7, r2
 801169c:	bfde      	ittt	le
 801169e:	19bc      	addle	r4, r7, r6
 80116a0:	1bd2      	suble	r2, r2, r7
 80116a2:	19ad      	addle	r5, r5, r6
 80116a4:	0fcf      	lsrs	r7, r1, #31
 80116a6:	3b01      	subs	r3, #1
 80116a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80116ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80116b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80116b4:	d1f0      	bne.n	8011698 <__ieee754_sqrt+0x94>
 80116b6:	f04f 0c20 	mov.w	ip, #32
 80116ba:	469e      	mov	lr, r3
 80116bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80116c0:	42a2      	cmp	r2, r4
 80116c2:	eb06 070e 	add.w	r7, r6, lr
 80116c6:	dc02      	bgt.n	80116ce <__ieee754_sqrt+0xca>
 80116c8:	d112      	bne.n	80116f0 <__ieee754_sqrt+0xec>
 80116ca:	428f      	cmp	r7, r1
 80116cc:	d810      	bhi.n	80116f0 <__ieee754_sqrt+0xec>
 80116ce:	2f00      	cmp	r7, #0
 80116d0:	eb07 0e06 	add.w	lr, r7, r6
 80116d4:	da42      	bge.n	801175c <__ieee754_sqrt+0x158>
 80116d6:	f1be 0f00 	cmp.w	lr, #0
 80116da:	db3f      	blt.n	801175c <__ieee754_sqrt+0x158>
 80116dc:	f104 0801 	add.w	r8, r4, #1
 80116e0:	1b12      	subs	r2, r2, r4
 80116e2:	428f      	cmp	r7, r1
 80116e4:	bf88      	it	hi
 80116e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80116ea:	1bc9      	subs	r1, r1, r7
 80116ec:	4433      	add	r3, r6
 80116ee:	4644      	mov	r4, r8
 80116f0:	0052      	lsls	r2, r2, #1
 80116f2:	f1bc 0c01 	subs.w	ip, ip, #1
 80116f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80116fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80116fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011702:	d1dd      	bne.n	80116c0 <__ieee754_sqrt+0xbc>
 8011704:	430a      	orrs	r2, r1
 8011706:	d006      	beq.n	8011716 <__ieee754_sqrt+0x112>
 8011708:	1c5c      	adds	r4, r3, #1
 801170a:	bf13      	iteet	ne
 801170c:	3301      	addne	r3, #1
 801170e:	3501      	addeq	r5, #1
 8011710:	4663      	moveq	r3, ip
 8011712:	f023 0301 	bicne.w	r3, r3, #1
 8011716:	106a      	asrs	r2, r5, #1
 8011718:	085b      	lsrs	r3, r3, #1
 801171a:	07e9      	lsls	r1, r5, #31
 801171c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011720:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011724:	bf48      	it	mi
 8011726:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801172a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801172e:	461c      	mov	r4, r3
 8011730:	e780      	b.n	8011634 <__ieee754_sqrt+0x30>
 8011732:	0aca      	lsrs	r2, r1, #11
 8011734:	3815      	subs	r0, #21
 8011736:	0549      	lsls	r1, r1, #21
 8011738:	2a00      	cmp	r2, #0
 801173a:	d0fa      	beq.n	8011732 <__ieee754_sqrt+0x12e>
 801173c:	02d6      	lsls	r6, r2, #11
 801173e:	d50a      	bpl.n	8011756 <__ieee754_sqrt+0x152>
 8011740:	f1c3 0420 	rsb	r4, r3, #32
 8011744:	fa21 f404 	lsr.w	r4, r1, r4
 8011748:	1e5d      	subs	r5, r3, #1
 801174a:	4099      	lsls	r1, r3
 801174c:	4322      	orrs	r2, r4
 801174e:	1b43      	subs	r3, r0, r5
 8011750:	e78b      	b.n	801166a <__ieee754_sqrt+0x66>
 8011752:	4618      	mov	r0, r3
 8011754:	e7f0      	b.n	8011738 <__ieee754_sqrt+0x134>
 8011756:	0052      	lsls	r2, r2, #1
 8011758:	3301      	adds	r3, #1
 801175a:	e7ef      	b.n	801173c <__ieee754_sqrt+0x138>
 801175c:	46a0      	mov	r8, r4
 801175e:	e7bf      	b.n	80116e0 <__ieee754_sqrt+0xdc>
 8011760:	7ff00000 	.word	0x7ff00000
 8011764:	00000000 	.word	0x00000000

08011768 <__kernel_cos>:
 8011768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	ec59 8b10 	vmov	r8, r9, d0
 8011770:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011774:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011778:	ed2d 8b02 	vpush	{d8}
 801177c:	eeb0 8a41 	vmov.f32	s16, s2
 8011780:	eef0 8a61 	vmov.f32	s17, s3
 8011784:	da07      	bge.n	8011796 <__kernel_cos+0x2e>
 8011786:	ee10 0a10 	vmov	r0, s0
 801178a:	4649      	mov	r1, r9
 801178c:	f7ef f9fc 	bl	8000b88 <__aeabi_d2iz>
 8011790:	2800      	cmp	r0, #0
 8011792:	f000 8089 	beq.w	80118a8 <__kernel_cos+0x140>
 8011796:	4642      	mov	r2, r8
 8011798:	464b      	mov	r3, r9
 801179a:	4640      	mov	r0, r8
 801179c:	4649      	mov	r1, r9
 801179e:	f7ee ff43 	bl	8000628 <__aeabi_dmul>
 80117a2:	2200      	movs	r2, #0
 80117a4:	4b4e      	ldr	r3, [pc, #312]	; (80118e0 <__kernel_cos+0x178>)
 80117a6:	4604      	mov	r4, r0
 80117a8:	460d      	mov	r5, r1
 80117aa:	f7ee ff3d 	bl	8000628 <__aeabi_dmul>
 80117ae:	a340      	add	r3, pc, #256	; (adr r3, 80118b0 <__kernel_cos+0x148>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4682      	mov	sl, r0
 80117b6:	468b      	mov	fp, r1
 80117b8:	4620      	mov	r0, r4
 80117ba:	4629      	mov	r1, r5
 80117bc:	f7ee ff34 	bl	8000628 <__aeabi_dmul>
 80117c0:	a33d      	add	r3, pc, #244	; (adr r3, 80118b8 <__kernel_cos+0x150>)
 80117c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c6:	f7ee fd79 	bl	80002bc <__adddf3>
 80117ca:	4622      	mov	r2, r4
 80117cc:	462b      	mov	r3, r5
 80117ce:	f7ee ff2b 	bl	8000628 <__aeabi_dmul>
 80117d2:	a33b      	add	r3, pc, #236	; (adr r3, 80118c0 <__kernel_cos+0x158>)
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	f7ee fd6e 	bl	80002b8 <__aeabi_dsub>
 80117dc:	4622      	mov	r2, r4
 80117de:	462b      	mov	r3, r5
 80117e0:	f7ee ff22 	bl	8000628 <__aeabi_dmul>
 80117e4:	a338      	add	r3, pc, #224	; (adr r3, 80118c8 <__kernel_cos+0x160>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	f7ee fd67 	bl	80002bc <__adddf3>
 80117ee:	4622      	mov	r2, r4
 80117f0:	462b      	mov	r3, r5
 80117f2:	f7ee ff19 	bl	8000628 <__aeabi_dmul>
 80117f6:	a336      	add	r3, pc, #216	; (adr r3, 80118d0 <__kernel_cos+0x168>)
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	f7ee fd5c 	bl	80002b8 <__aeabi_dsub>
 8011800:	4622      	mov	r2, r4
 8011802:	462b      	mov	r3, r5
 8011804:	f7ee ff10 	bl	8000628 <__aeabi_dmul>
 8011808:	a333      	add	r3, pc, #204	; (adr r3, 80118d8 <__kernel_cos+0x170>)
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	f7ee fd55 	bl	80002bc <__adddf3>
 8011812:	4622      	mov	r2, r4
 8011814:	462b      	mov	r3, r5
 8011816:	f7ee ff07 	bl	8000628 <__aeabi_dmul>
 801181a:	4622      	mov	r2, r4
 801181c:	462b      	mov	r3, r5
 801181e:	f7ee ff03 	bl	8000628 <__aeabi_dmul>
 8011822:	ec53 2b18 	vmov	r2, r3, d8
 8011826:	4604      	mov	r4, r0
 8011828:	460d      	mov	r5, r1
 801182a:	4640      	mov	r0, r8
 801182c:	4649      	mov	r1, r9
 801182e:	f7ee fefb 	bl	8000628 <__aeabi_dmul>
 8011832:	460b      	mov	r3, r1
 8011834:	4602      	mov	r2, r0
 8011836:	4629      	mov	r1, r5
 8011838:	4620      	mov	r0, r4
 801183a:	f7ee fd3d 	bl	80002b8 <__aeabi_dsub>
 801183e:	4b29      	ldr	r3, [pc, #164]	; (80118e4 <__kernel_cos+0x17c>)
 8011840:	429e      	cmp	r6, r3
 8011842:	4680      	mov	r8, r0
 8011844:	4689      	mov	r9, r1
 8011846:	dc11      	bgt.n	801186c <__kernel_cos+0x104>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	4650      	mov	r0, sl
 801184e:	4659      	mov	r1, fp
 8011850:	f7ee fd32 	bl	80002b8 <__aeabi_dsub>
 8011854:	460b      	mov	r3, r1
 8011856:	4924      	ldr	r1, [pc, #144]	; (80118e8 <__kernel_cos+0x180>)
 8011858:	4602      	mov	r2, r0
 801185a:	2000      	movs	r0, #0
 801185c:	f7ee fd2c 	bl	80002b8 <__aeabi_dsub>
 8011860:	ecbd 8b02 	vpop	{d8}
 8011864:	ec41 0b10 	vmov	d0, r0, r1
 8011868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	4b1f      	ldr	r3, [pc, #124]	; (80118ec <__kernel_cos+0x184>)
 801186e:	491e      	ldr	r1, [pc, #120]	; (80118e8 <__kernel_cos+0x180>)
 8011870:	429e      	cmp	r6, r3
 8011872:	bfcc      	ite	gt
 8011874:	4d1e      	ldrgt	r5, [pc, #120]	; (80118f0 <__kernel_cos+0x188>)
 8011876:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801187a:	2400      	movs	r4, #0
 801187c:	4622      	mov	r2, r4
 801187e:	462b      	mov	r3, r5
 8011880:	2000      	movs	r0, #0
 8011882:	f7ee fd19 	bl	80002b8 <__aeabi_dsub>
 8011886:	4622      	mov	r2, r4
 8011888:	4606      	mov	r6, r0
 801188a:	460f      	mov	r7, r1
 801188c:	462b      	mov	r3, r5
 801188e:	4650      	mov	r0, sl
 8011890:	4659      	mov	r1, fp
 8011892:	f7ee fd11 	bl	80002b8 <__aeabi_dsub>
 8011896:	4642      	mov	r2, r8
 8011898:	464b      	mov	r3, r9
 801189a:	f7ee fd0d 	bl	80002b8 <__aeabi_dsub>
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4630      	mov	r0, r6
 80118a4:	4639      	mov	r1, r7
 80118a6:	e7d9      	b.n	801185c <__kernel_cos+0xf4>
 80118a8:	2000      	movs	r0, #0
 80118aa:	490f      	ldr	r1, [pc, #60]	; (80118e8 <__kernel_cos+0x180>)
 80118ac:	e7d8      	b.n	8011860 <__kernel_cos+0xf8>
 80118ae:	bf00      	nop
 80118b0:	be8838d4 	.word	0xbe8838d4
 80118b4:	bda8fae9 	.word	0xbda8fae9
 80118b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80118bc:	3e21ee9e 	.word	0x3e21ee9e
 80118c0:	809c52ad 	.word	0x809c52ad
 80118c4:	3e927e4f 	.word	0x3e927e4f
 80118c8:	19cb1590 	.word	0x19cb1590
 80118cc:	3efa01a0 	.word	0x3efa01a0
 80118d0:	16c15177 	.word	0x16c15177
 80118d4:	3f56c16c 	.word	0x3f56c16c
 80118d8:	5555554c 	.word	0x5555554c
 80118dc:	3fa55555 	.word	0x3fa55555
 80118e0:	3fe00000 	.word	0x3fe00000
 80118e4:	3fd33332 	.word	0x3fd33332
 80118e8:	3ff00000 	.word	0x3ff00000
 80118ec:	3fe90000 	.word	0x3fe90000
 80118f0:	3fd20000 	.word	0x3fd20000
 80118f4:	00000000 	.word	0x00000000

080118f8 <__kernel_rem_pio2>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	ed2d 8b02 	vpush	{d8}
 8011900:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011904:	1ed4      	subs	r4, r2, #3
 8011906:	9308      	str	r3, [sp, #32]
 8011908:	9101      	str	r1, [sp, #4]
 801190a:	4bc5      	ldr	r3, [pc, #788]	; (8011c20 <__kernel_rem_pio2+0x328>)
 801190c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801190e:	9009      	str	r0, [sp, #36]	; 0x24
 8011910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011914:	9304      	str	r3, [sp, #16]
 8011916:	9b08      	ldr	r3, [sp, #32]
 8011918:	3b01      	subs	r3, #1
 801191a:	9307      	str	r3, [sp, #28]
 801191c:	2318      	movs	r3, #24
 801191e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011922:	f06f 0317 	mvn.w	r3, #23
 8011926:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801192a:	fb04 3303 	mla	r3, r4, r3, r3
 801192e:	eb03 0a02 	add.w	sl, r3, r2
 8011932:	9b04      	ldr	r3, [sp, #16]
 8011934:	9a07      	ldr	r2, [sp, #28]
 8011936:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011c10 <__kernel_rem_pio2+0x318>
 801193a:	eb03 0802 	add.w	r8, r3, r2
 801193e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011940:	1aa7      	subs	r7, r4, r2
 8011942:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011946:	ae22      	add	r6, sp, #136	; 0x88
 8011948:	2500      	movs	r5, #0
 801194a:	4545      	cmp	r5, r8
 801194c:	dd13      	ble.n	8011976 <__kernel_rem_pio2+0x7e>
 801194e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011c10 <__kernel_rem_pio2+0x318>
 8011952:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011956:	2600      	movs	r6, #0
 8011958:	9b04      	ldr	r3, [sp, #16]
 801195a:	429e      	cmp	r6, r3
 801195c:	dc32      	bgt.n	80119c4 <__kernel_rem_pio2+0xcc>
 801195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011960:	9302      	str	r3, [sp, #8]
 8011962:	9b08      	ldr	r3, [sp, #32]
 8011964:	199d      	adds	r5, r3, r6
 8011966:	ab22      	add	r3, sp, #136	; 0x88
 8011968:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801196c:	9306      	str	r3, [sp, #24]
 801196e:	ec59 8b18 	vmov	r8, r9, d8
 8011972:	2700      	movs	r7, #0
 8011974:	e01f      	b.n	80119b6 <__kernel_rem_pio2+0xbe>
 8011976:	42ef      	cmn	r7, r5
 8011978:	d407      	bmi.n	801198a <__kernel_rem_pio2+0x92>
 801197a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801197e:	f7ee fde9 	bl	8000554 <__aeabi_i2d>
 8011982:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011986:	3501      	adds	r5, #1
 8011988:	e7df      	b.n	801194a <__kernel_rem_pio2+0x52>
 801198a:	ec51 0b18 	vmov	r0, r1, d8
 801198e:	e7f8      	b.n	8011982 <__kernel_rem_pio2+0x8a>
 8011990:	9906      	ldr	r1, [sp, #24]
 8011992:	9d02      	ldr	r5, [sp, #8]
 8011994:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011998:	9106      	str	r1, [sp, #24]
 801199a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801199e:	9502      	str	r5, [sp, #8]
 80119a0:	f7ee fe42 	bl	8000628 <__aeabi_dmul>
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	4640      	mov	r0, r8
 80119aa:	4649      	mov	r1, r9
 80119ac:	f7ee fc86 	bl	80002bc <__adddf3>
 80119b0:	3701      	adds	r7, #1
 80119b2:	4680      	mov	r8, r0
 80119b4:	4689      	mov	r9, r1
 80119b6:	9b07      	ldr	r3, [sp, #28]
 80119b8:	429f      	cmp	r7, r3
 80119ba:	dde9      	ble.n	8011990 <__kernel_rem_pio2+0x98>
 80119bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80119c0:	3601      	adds	r6, #1
 80119c2:	e7c9      	b.n	8011958 <__kernel_rem_pio2+0x60>
 80119c4:	9b04      	ldr	r3, [sp, #16]
 80119c6:	aa0e      	add	r2, sp, #56	; 0x38
 80119c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119cc:	930c      	str	r3, [sp, #48]	; 0x30
 80119ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80119d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80119d4:	9c04      	ldr	r4, [sp, #16]
 80119d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80119d8:	ab9a      	add	r3, sp, #616	; 0x268
 80119da:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80119de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119e6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80119ea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80119ee:	ab9a      	add	r3, sp, #616	; 0x268
 80119f0:	445b      	add	r3, fp
 80119f2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80119f6:	2500      	movs	r5, #0
 80119f8:	1b63      	subs	r3, r4, r5
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	dc78      	bgt.n	8011af0 <__kernel_rem_pio2+0x1f8>
 80119fe:	4650      	mov	r0, sl
 8011a00:	ec49 8b10 	vmov	d0, r8, r9
 8011a04:	f000 fc04 	bl	8012210 <scalbn>
 8011a08:	ec57 6b10 	vmov	r6, r7, d0
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011a12:	ee10 0a10 	vmov	r0, s0
 8011a16:	4639      	mov	r1, r7
 8011a18:	f7ee fe06 	bl	8000628 <__aeabi_dmul>
 8011a1c:	ec41 0b10 	vmov	d0, r0, r1
 8011a20:	f000 fb6e 	bl	8012100 <floor>
 8011a24:	2200      	movs	r2, #0
 8011a26:	ec51 0b10 	vmov	r0, r1, d0
 8011a2a:	4b7e      	ldr	r3, [pc, #504]	; (8011c24 <__kernel_rem_pio2+0x32c>)
 8011a2c:	f7ee fdfc 	bl	8000628 <__aeabi_dmul>
 8011a30:	4602      	mov	r2, r0
 8011a32:	460b      	mov	r3, r1
 8011a34:	4630      	mov	r0, r6
 8011a36:	4639      	mov	r1, r7
 8011a38:	f7ee fc3e 	bl	80002b8 <__aeabi_dsub>
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	4606      	mov	r6, r0
 8011a40:	f7ef f8a2 	bl	8000b88 <__aeabi_d2iz>
 8011a44:	9006      	str	r0, [sp, #24]
 8011a46:	f7ee fd85 	bl	8000554 <__aeabi_i2d>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4630      	mov	r0, r6
 8011a50:	4639      	mov	r1, r7
 8011a52:	f7ee fc31 	bl	80002b8 <__aeabi_dsub>
 8011a56:	f1ba 0f00 	cmp.w	sl, #0
 8011a5a:	4606      	mov	r6, r0
 8011a5c:	460f      	mov	r7, r1
 8011a5e:	dd6c      	ble.n	8011b3a <__kernel_rem_pio2+0x242>
 8011a60:	1e62      	subs	r2, r4, #1
 8011a62:	ab0e      	add	r3, sp, #56	; 0x38
 8011a64:	f1ca 0118 	rsb	r1, sl, #24
 8011a68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a6c:	9d06      	ldr	r5, [sp, #24]
 8011a6e:	fa40 f301 	asr.w	r3, r0, r1
 8011a72:	441d      	add	r5, r3
 8011a74:	408b      	lsls	r3, r1
 8011a76:	1ac0      	subs	r0, r0, r3
 8011a78:	ab0e      	add	r3, sp, #56	; 0x38
 8011a7a:	9506      	str	r5, [sp, #24]
 8011a7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011a80:	f1ca 0317 	rsb	r3, sl, #23
 8011a84:	fa40 f303 	asr.w	r3, r0, r3
 8011a88:	9302      	str	r3, [sp, #8]
 8011a8a:	9b02      	ldr	r3, [sp, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	dd62      	ble.n	8011b56 <__kernel_rem_pio2+0x25e>
 8011a90:	9b06      	ldr	r3, [sp, #24]
 8011a92:	2200      	movs	r2, #0
 8011a94:	3301      	adds	r3, #1
 8011a96:	9306      	str	r3, [sp, #24]
 8011a98:	4615      	mov	r5, r2
 8011a9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011a9e:	4294      	cmp	r4, r2
 8011aa0:	f300 8095 	bgt.w	8011bce <__kernel_rem_pio2+0x2d6>
 8011aa4:	f1ba 0f00 	cmp.w	sl, #0
 8011aa8:	dd07      	ble.n	8011aba <__kernel_rem_pio2+0x1c2>
 8011aaa:	f1ba 0f01 	cmp.w	sl, #1
 8011aae:	f000 80a2 	beq.w	8011bf6 <__kernel_rem_pio2+0x2fe>
 8011ab2:	f1ba 0f02 	cmp.w	sl, #2
 8011ab6:	f000 80c1 	beq.w	8011c3c <__kernel_rem_pio2+0x344>
 8011aba:	9b02      	ldr	r3, [sp, #8]
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	d14a      	bne.n	8011b56 <__kernel_rem_pio2+0x25e>
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	463b      	mov	r3, r7
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	4958      	ldr	r1, [pc, #352]	; (8011c28 <__kernel_rem_pio2+0x330>)
 8011ac8:	f7ee fbf6 	bl	80002b8 <__aeabi_dsub>
 8011acc:	4606      	mov	r6, r0
 8011ace:	460f      	mov	r7, r1
 8011ad0:	2d00      	cmp	r5, #0
 8011ad2:	d040      	beq.n	8011b56 <__kernel_rem_pio2+0x25e>
 8011ad4:	4650      	mov	r0, sl
 8011ad6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011c18 <__kernel_rem_pio2+0x320>
 8011ada:	f000 fb99 	bl	8012210 <scalbn>
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	ec53 2b10 	vmov	r2, r3, d0
 8011ae6:	f7ee fbe7 	bl	80002b8 <__aeabi_dsub>
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	e032      	b.n	8011b56 <__kernel_rem_pio2+0x25e>
 8011af0:	2200      	movs	r2, #0
 8011af2:	4b4e      	ldr	r3, [pc, #312]	; (8011c2c <__kernel_rem_pio2+0x334>)
 8011af4:	4640      	mov	r0, r8
 8011af6:	4649      	mov	r1, r9
 8011af8:	f7ee fd96 	bl	8000628 <__aeabi_dmul>
 8011afc:	f7ef f844 	bl	8000b88 <__aeabi_d2iz>
 8011b00:	f7ee fd28 	bl	8000554 <__aeabi_i2d>
 8011b04:	2200      	movs	r2, #0
 8011b06:	4b4a      	ldr	r3, [pc, #296]	; (8011c30 <__kernel_rem_pio2+0x338>)
 8011b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b0c:	f7ee fd8c 	bl	8000628 <__aeabi_dmul>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4640      	mov	r0, r8
 8011b16:	4649      	mov	r1, r9
 8011b18:	f7ee fbce 	bl	80002b8 <__aeabi_dsub>
 8011b1c:	f7ef f834 	bl	8000b88 <__aeabi_d2iz>
 8011b20:	ab0e      	add	r3, sp, #56	; 0x38
 8011b22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011b26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b2e:	f7ee fbc5 	bl	80002bc <__adddf3>
 8011b32:	3501      	adds	r5, #1
 8011b34:	4680      	mov	r8, r0
 8011b36:	4689      	mov	r9, r1
 8011b38:	e75e      	b.n	80119f8 <__kernel_rem_pio2+0x100>
 8011b3a:	d105      	bne.n	8011b48 <__kernel_rem_pio2+0x250>
 8011b3c:	1e63      	subs	r3, r4, #1
 8011b3e:	aa0e      	add	r2, sp, #56	; 0x38
 8011b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011b44:	15c3      	asrs	r3, r0, #23
 8011b46:	e79f      	b.n	8011a88 <__kernel_rem_pio2+0x190>
 8011b48:	2200      	movs	r2, #0
 8011b4a:	4b3a      	ldr	r3, [pc, #232]	; (8011c34 <__kernel_rem_pio2+0x33c>)
 8011b4c:	f7ee fff2 	bl	8000b34 <__aeabi_dcmpge>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d139      	bne.n	8011bc8 <__kernel_rem_pio2+0x2d0>
 8011b54:	9002      	str	r0, [sp, #8]
 8011b56:	2200      	movs	r2, #0
 8011b58:	2300      	movs	r3, #0
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	4639      	mov	r1, r7
 8011b5e:	f7ee ffcb 	bl	8000af8 <__aeabi_dcmpeq>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	f000 80c7 	beq.w	8011cf6 <__kernel_rem_pio2+0x3fe>
 8011b68:	1e65      	subs	r5, r4, #1
 8011b6a:	462b      	mov	r3, r5
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	9904      	ldr	r1, [sp, #16]
 8011b70:	428b      	cmp	r3, r1
 8011b72:	da6a      	bge.n	8011c4a <__kernel_rem_pio2+0x352>
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	f000 8088 	beq.w	8011c8a <__kernel_rem_pio2+0x392>
 8011b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011b80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f000 80b4 	beq.w	8011cf2 <__kernel_rem_pio2+0x3fa>
 8011b8a:	4650      	mov	r0, sl
 8011b8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011c18 <__kernel_rem_pio2+0x320>
 8011b90:	f000 fb3e 	bl	8012210 <scalbn>
 8011b94:	00ec      	lsls	r4, r5, #3
 8011b96:	ab72      	add	r3, sp, #456	; 0x1c8
 8011b98:	191e      	adds	r6, r3, r4
 8011b9a:	ec59 8b10 	vmov	r8, r9, d0
 8011b9e:	f106 0a08 	add.w	sl, r6, #8
 8011ba2:	462f      	mov	r7, r5
 8011ba4:	2f00      	cmp	r7, #0
 8011ba6:	f280 80df 	bge.w	8011d68 <__kernel_rem_pio2+0x470>
 8011baa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011c10 <__kernel_rem_pio2+0x318>
 8011bae:	f04f 0a00 	mov.w	sl, #0
 8011bb2:	eba5 030a 	sub.w	r3, r5, sl
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f2c0 810a 	blt.w	8011dd0 <__kernel_rem_pio2+0x4d8>
 8011bbc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011c38 <__kernel_rem_pio2+0x340>
 8011bc0:	ec59 8b18 	vmov	r8, r9, d8
 8011bc4:	2700      	movs	r7, #0
 8011bc6:	e0f5      	b.n	8011db4 <__kernel_rem_pio2+0x4bc>
 8011bc8:	2302      	movs	r3, #2
 8011bca:	9302      	str	r3, [sp, #8]
 8011bcc:	e760      	b.n	8011a90 <__kernel_rem_pio2+0x198>
 8011bce:	ab0e      	add	r3, sp, #56	; 0x38
 8011bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd4:	b94d      	cbnz	r5, 8011bea <__kernel_rem_pio2+0x2f2>
 8011bd6:	b12b      	cbz	r3, 8011be4 <__kernel_rem_pio2+0x2ec>
 8011bd8:	a80e      	add	r0, sp, #56	; 0x38
 8011bda:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011bde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011be2:	2301      	movs	r3, #1
 8011be4:	3201      	adds	r2, #1
 8011be6:	461d      	mov	r5, r3
 8011be8:	e759      	b.n	8011a9e <__kernel_rem_pio2+0x1a6>
 8011bea:	a80e      	add	r0, sp, #56	; 0x38
 8011bec:	1acb      	subs	r3, r1, r3
 8011bee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011bf2:	462b      	mov	r3, r5
 8011bf4:	e7f6      	b.n	8011be4 <__kernel_rem_pio2+0x2ec>
 8011bf6:	1e62      	subs	r2, r4, #1
 8011bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8011bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011c02:	a90e      	add	r1, sp, #56	; 0x38
 8011c04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011c08:	e757      	b.n	8011aba <__kernel_rem_pio2+0x1c2>
 8011c0a:	bf00      	nop
 8011c0c:	f3af 8000 	nop.w
	...
 8011c1c:	3ff00000 	.word	0x3ff00000
 8011c20:	080175b0 	.word	0x080175b0
 8011c24:	40200000 	.word	0x40200000
 8011c28:	3ff00000 	.word	0x3ff00000
 8011c2c:	3e700000 	.word	0x3e700000
 8011c30:	41700000 	.word	0x41700000
 8011c34:	3fe00000 	.word	0x3fe00000
 8011c38:	08017570 	.word	0x08017570
 8011c3c:	1e62      	subs	r2, r4, #1
 8011c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8011c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011c48:	e7db      	b.n	8011c02 <__kernel_rem_pio2+0x30a>
 8011c4a:	a90e      	add	r1, sp, #56	; 0x38
 8011c4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011c50:	3b01      	subs	r3, #1
 8011c52:	430a      	orrs	r2, r1
 8011c54:	e78b      	b.n	8011b6e <__kernel_rem_pio2+0x276>
 8011c56:	3301      	adds	r3, #1
 8011c58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	d0fa      	beq.n	8011c56 <__kernel_rem_pio2+0x35e>
 8011c60:	9a08      	ldr	r2, [sp, #32]
 8011c62:	4422      	add	r2, r4
 8011c64:	00d2      	lsls	r2, r2, #3
 8011c66:	a922      	add	r1, sp, #136	; 0x88
 8011c68:	18e3      	adds	r3, r4, r3
 8011c6a:	9206      	str	r2, [sp, #24]
 8011c6c:	440a      	add	r2, r1
 8011c6e:	9302      	str	r3, [sp, #8]
 8011c70:	f10b 0108 	add.w	r1, fp, #8
 8011c74:	f102 0308 	add.w	r3, r2, #8
 8011c78:	1c66      	adds	r6, r4, #1
 8011c7a:	910a      	str	r1, [sp, #40]	; 0x28
 8011c7c:	2500      	movs	r5, #0
 8011c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c80:	9b02      	ldr	r3, [sp, #8]
 8011c82:	42b3      	cmp	r3, r6
 8011c84:	da04      	bge.n	8011c90 <__kernel_rem_pio2+0x398>
 8011c86:	461c      	mov	r4, r3
 8011c88:	e6a6      	b.n	80119d8 <__kernel_rem_pio2+0xe0>
 8011c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	e7e3      	b.n	8011c58 <__kernel_rem_pio2+0x360>
 8011c90:	9b06      	ldr	r3, [sp, #24]
 8011c92:	18ef      	adds	r7, r5, r3
 8011c94:	ab22      	add	r3, sp, #136	; 0x88
 8011c96:	441f      	add	r7, r3
 8011c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011c9e:	f7ee fc59 	bl	8000554 <__aeabi_i2d>
 8011ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca4:	461c      	mov	r4, r3
 8011ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ca8:	e9c7 0100 	strd	r0, r1, [r7]
 8011cac:	eb03 0b05 	add.w	fp, r3, r5
 8011cb0:	2700      	movs	r7, #0
 8011cb2:	f04f 0800 	mov.w	r8, #0
 8011cb6:	f04f 0900 	mov.w	r9, #0
 8011cba:	9b07      	ldr	r3, [sp, #28]
 8011cbc:	429f      	cmp	r7, r3
 8011cbe:	dd08      	ble.n	8011cd2 <__kernel_rem_pio2+0x3da>
 8011cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8011cc4:	18eb      	adds	r3, r5, r3
 8011cc6:	4413      	add	r3, r2
 8011cc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011ccc:	3601      	adds	r6, #1
 8011cce:	3508      	adds	r5, #8
 8011cd0:	e7d6      	b.n	8011c80 <__kernel_rem_pio2+0x388>
 8011cd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011cd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011cda:	f7ee fca5 	bl	8000628 <__aeabi_dmul>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	4649      	mov	r1, r9
 8011ce6:	f7ee fae9 	bl	80002bc <__adddf3>
 8011cea:	3701      	adds	r7, #1
 8011cec:	4680      	mov	r8, r0
 8011cee:	4689      	mov	r9, r1
 8011cf0:	e7e3      	b.n	8011cba <__kernel_rem_pio2+0x3c2>
 8011cf2:	3d01      	subs	r5, #1
 8011cf4:	e741      	b.n	8011b7a <__kernel_rem_pio2+0x282>
 8011cf6:	f1ca 0000 	rsb	r0, sl, #0
 8011cfa:	ec47 6b10 	vmov	d0, r6, r7
 8011cfe:	f000 fa87 	bl	8012210 <scalbn>
 8011d02:	ec57 6b10 	vmov	r6, r7, d0
 8011d06:	2200      	movs	r2, #0
 8011d08:	4b99      	ldr	r3, [pc, #612]	; (8011f70 <__kernel_rem_pio2+0x678>)
 8011d0a:	ee10 0a10 	vmov	r0, s0
 8011d0e:	4639      	mov	r1, r7
 8011d10:	f7ee ff10 	bl	8000b34 <__aeabi_dcmpge>
 8011d14:	b1f8      	cbz	r0, 8011d56 <__kernel_rem_pio2+0x45e>
 8011d16:	2200      	movs	r2, #0
 8011d18:	4b96      	ldr	r3, [pc, #600]	; (8011f74 <__kernel_rem_pio2+0x67c>)
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	f7ee fc83 	bl	8000628 <__aeabi_dmul>
 8011d22:	f7ee ff31 	bl	8000b88 <__aeabi_d2iz>
 8011d26:	4680      	mov	r8, r0
 8011d28:	f7ee fc14 	bl	8000554 <__aeabi_i2d>
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	4b90      	ldr	r3, [pc, #576]	; (8011f70 <__kernel_rem_pio2+0x678>)
 8011d30:	f7ee fc7a 	bl	8000628 <__aeabi_dmul>
 8011d34:	460b      	mov	r3, r1
 8011d36:	4602      	mov	r2, r0
 8011d38:	4639      	mov	r1, r7
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f7ee fabc 	bl	80002b8 <__aeabi_dsub>
 8011d40:	f7ee ff22 	bl	8000b88 <__aeabi_d2iz>
 8011d44:	1c65      	adds	r5, r4, #1
 8011d46:	ab0e      	add	r3, sp, #56	; 0x38
 8011d48:	f10a 0a18 	add.w	sl, sl, #24
 8011d4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011d50:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011d54:	e719      	b.n	8011b8a <__kernel_rem_pio2+0x292>
 8011d56:	4630      	mov	r0, r6
 8011d58:	4639      	mov	r1, r7
 8011d5a:	f7ee ff15 	bl	8000b88 <__aeabi_d2iz>
 8011d5e:	ab0e      	add	r3, sp, #56	; 0x38
 8011d60:	4625      	mov	r5, r4
 8011d62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011d66:	e710      	b.n	8011b8a <__kernel_rem_pio2+0x292>
 8011d68:	ab0e      	add	r3, sp, #56	; 0x38
 8011d6a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011d6e:	f7ee fbf1 	bl	8000554 <__aeabi_i2d>
 8011d72:	4642      	mov	r2, r8
 8011d74:	464b      	mov	r3, r9
 8011d76:	f7ee fc57 	bl	8000628 <__aeabi_dmul>
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011d80:	4b7c      	ldr	r3, [pc, #496]	; (8011f74 <__kernel_rem_pio2+0x67c>)
 8011d82:	4640      	mov	r0, r8
 8011d84:	4649      	mov	r1, r9
 8011d86:	f7ee fc4f 	bl	8000628 <__aeabi_dmul>
 8011d8a:	3f01      	subs	r7, #1
 8011d8c:	4680      	mov	r8, r0
 8011d8e:	4689      	mov	r9, r1
 8011d90:	e708      	b.n	8011ba4 <__kernel_rem_pio2+0x2ac>
 8011d92:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011d9e:	f7ee fc43 	bl	8000628 <__aeabi_dmul>
 8011da2:	4602      	mov	r2, r0
 8011da4:	460b      	mov	r3, r1
 8011da6:	4640      	mov	r0, r8
 8011da8:	4649      	mov	r1, r9
 8011daa:	f7ee fa87 	bl	80002bc <__adddf3>
 8011dae:	3701      	adds	r7, #1
 8011db0:	4680      	mov	r8, r0
 8011db2:	4689      	mov	r9, r1
 8011db4:	9b04      	ldr	r3, [sp, #16]
 8011db6:	429f      	cmp	r7, r3
 8011db8:	dc01      	bgt.n	8011dbe <__kernel_rem_pio2+0x4c6>
 8011dba:	45ba      	cmp	sl, r7
 8011dbc:	dae9      	bge.n	8011d92 <__kernel_rem_pio2+0x49a>
 8011dbe:	ab4a      	add	r3, sp, #296	; 0x128
 8011dc0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011dc4:	e9c3 8900 	strd	r8, r9, [r3]
 8011dc8:	f10a 0a01 	add.w	sl, sl, #1
 8011dcc:	3e08      	subs	r6, #8
 8011dce:	e6f0      	b.n	8011bb2 <__kernel_rem_pio2+0x2ba>
 8011dd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011dd2:	2b03      	cmp	r3, #3
 8011dd4:	d85b      	bhi.n	8011e8e <__kernel_rem_pio2+0x596>
 8011dd6:	e8df f003 	tbb	[pc, r3]
 8011dda:	264a      	.short	0x264a
 8011ddc:	0226      	.short	0x0226
 8011dde:	ab9a      	add	r3, sp, #616	; 0x268
 8011de0:	441c      	add	r4, r3
 8011de2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011de6:	46a2      	mov	sl, r4
 8011de8:	46ab      	mov	fp, r5
 8011dea:	f1bb 0f00 	cmp.w	fp, #0
 8011dee:	dc6c      	bgt.n	8011eca <__kernel_rem_pio2+0x5d2>
 8011df0:	46a2      	mov	sl, r4
 8011df2:	46ab      	mov	fp, r5
 8011df4:	f1bb 0f01 	cmp.w	fp, #1
 8011df8:	f300 8086 	bgt.w	8011f08 <__kernel_rem_pio2+0x610>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	2d01      	cmp	r5, #1
 8011e02:	f300 80a0 	bgt.w	8011f46 <__kernel_rem_pio2+0x64e>
 8011e06:	9b02      	ldr	r3, [sp, #8]
 8011e08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011e0c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f040 809e 	bne.w	8011f52 <__kernel_rem_pio2+0x65a>
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	e9c3 7800 	strd	r7, r8, [r3]
 8011e1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011e20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011e24:	e033      	b.n	8011e8e <__kernel_rem_pio2+0x596>
 8011e26:	3408      	adds	r4, #8
 8011e28:	ab4a      	add	r3, sp, #296	; 0x128
 8011e2a:	441c      	add	r4, r3
 8011e2c:	462e      	mov	r6, r5
 8011e2e:	2000      	movs	r0, #0
 8011e30:	2100      	movs	r1, #0
 8011e32:	2e00      	cmp	r6, #0
 8011e34:	da3a      	bge.n	8011eac <__kernel_rem_pio2+0x5b4>
 8011e36:	9b02      	ldr	r3, [sp, #8]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d03d      	beq.n	8011eb8 <__kernel_rem_pio2+0x5c0>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e42:	9c01      	ldr	r4, [sp, #4]
 8011e44:	e9c4 2300 	strd	r2, r3, [r4]
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011e50:	f7ee fa32 	bl	80002b8 <__aeabi_dsub>
 8011e54:	ae4c      	add	r6, sp, #304	; 0x130
 8011e56:	2401      	movs	r4, #1
 8011e58:	42a5      	cmp	r5, r4
 8011e5a:	da30      	bge.n	8011ebe <__kernel_rem_pio2+0x5c6>
 8011e5c:	9b02      	ldr	r3, [sp, #8]
 8011e5e:	b113      	cbz	r3, 8011e66 <__kernel_rem_pio2+0x56e>
 8011e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e64:	4619      	mov	r1, r3
 8011e66:	9b01      	ldr	r3, [sp, #4]
 8011e68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011e6c:	e00f      	b.n	8011e8e <__kernel_rem_pio2+0x596>
 8011e6e:	ab9a      	add	r3, sp, #616	; 0x268
 8011e70:	441c      	add	r4, r3
 8011e72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011e76:	2000      	movs	r0, #0
 8011e78:	2100      	movs	r1, #0
 8011e7a:	2d00      	cmp	r5, #0
 8011e7c:	da10      	bge.n	8011ea0 <__kernel_rem_pio2+0x5a8>
 8011e7e:	9b02      	ldr	r3, [sp, #8]
 8011e80:	b113      	cbz	r3, 8011e88 <__kernel_rem_pio2+0x590>
 8011e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e86:	4619      	mov	r1, r3
 8011e88:	9b01      	ldr	r3, [sp, #4]
 8011e8a:	e9c3 0100 	strd	r0, r1, [r3]
 8011e8e:	9b06      	ldr	r3, [sp, #24]
 8011e90:	f003 0007 	and.w	r0, r3, #7
 8011e94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011e98:	ecbd 8b02 	vpop	{d8}
 8011e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011ea4:	f7ee fa0a 	bl	80002bc <__adddf3>
 8011ea8:	3d01      	subs	r5, #1
 8011eaa:	e7e6      	b.n	8011e7a <__kernel_rem_pio2+0x582>
 8011eac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011eb0:	f7ee fa04 	bl	80002bc <__adddf3>
 8011eb4:	3e01      	subs	r6, #1
 8011eb6:	e7bc      	b.n	8011e32 <__kernel_rem_pio2+0x53a>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	460b      	mov	r3, r1
 8011ebc:	e7c1      	b.n	8011e42 <__kernel_rem_pio2+0x54a>
 8011ebe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011ec2:	f7ee f9fb 	bl	80002bc <__adddf3>
 8011ec6:	3401      	adds	r4, #1
 8011ec8:	e7c6      	b.n	8011e58 <__kernel_rem_pio2+0x560>
 8011eca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011ece:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	ec53 2b17 	vmov	r2, r3, d7
 8011ed8:	4649      	mov	r1, r9
 8011eda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ede:	f7ee f9ed 	bl	80002bc <__adddf3>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	4606      	mov	r6, r0
 8011ee8:	460f      	mov	r7, r1
 8011eea:	4640      	mov	r0, r8
 8011eec:	4649      	mov	r1, r9
 8011eee:	f7ee f9e3 	bl	80002b8 <__aeabi_dsub>
 8011ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ef6:	f7ee f9e1 	bl	80002bc <__adddf3>
 8011efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011efe:	e9ca 0100 	strd	r0, r1, [sl]
 8011f02:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011f06:	e770      	b.n	8011dea <__kernel_rem_pio2+0x4f2>
 8011f08:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011f0c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011f10:	4630      	mov	r0, r6
 8011f12:	ec53 2b17 	vmov	r2, r3, d7
 8011f16:	4639      	mov	r1, r7
 8011f18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f1c:	f7ee f9ce 	bl	80002bc <__adddf3>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4680      	mov	r8, r0
 8011f26:	4689      	mov	r9, r1
 8011f28:	4630      	mov	r0, r6
 8011f2a:	4639      	mov	r1, r7
 8011f2c:	f7ee f9c4 	bl	80002b8 <__aeabi_dsub>
 8011f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f34:	f7ee f9c2 	bl	80002bc <__adddf3>
 8011f38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011f3c:	e9ca 0100 	strd	r0, r1, [sl]
 8011f40:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011f44:	e756      	b.n	8011df4 <__kernel_rem_pio2+0x4fc>
 8011f46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f4a:	f7ee f9b7 	bl	80002bc <__adddf3>
 8011f4e:	3d01      	subs	r5, #1
 8011f50:	e756      	b.n	8011e00 <__kernel_rem_pio2+0x508>
 8011f52:	9b01      	ldr	r3, [sp, #4]
 8011f54:	9a01      	ldr	r2, [sp, #4]
 8011f56:	601f      	str	r7, [r3, #0]
 8011f58:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011f5c:	605c      	str	r4, [r3, #4]
 8011f5e:	609d      	str	r5, [r3, #8]
 8011f60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011f64:	60d3      	str	r3, [r2, #12]
 8011f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f6a:	6110      	str	r0, [r2, #16]
 8011f6c:	6153      	str	r3, [r2, #20]
 8011f6e:	e78e      	b.n	8011e8e <__kernel_rem_pio2+0x596>
 8011f70:	41700000 	.word	0x41700000
 8011f74:	3e700000 	.word	0x3e700000

08011f78 <__kernel_sin>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	ec55 4b10 	vmov	r4, r5, d0
 8011f80:	b085      	sub	sp, #20
 8011f82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011f86:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011f8a:	ed8d 1b00 	vstr	d1, [sp]
 8011f8e:	9002      	str	r0, [sp, #8]
 8011f90:	da06      	bge.n	8011fa0 <__kernel_sin+0x28>
 8011f92:	ee10 0a10 	vmov	r0, s0
 8011f96:	4629      	mov	r1, r5
 8011f98:	f7ee fdf6 	bl	8000b88 <__aeabi_d2iz>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d051      	beq.n	8012044 <__kernel_sin+0xcc>
 8011fa0:	4622      	mov	r2, r4
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	f7ee fb3e 	bl	8000628 <__aeabi_dmul>
 8011fac:	4682      	mov	sl, r0
 8011fae:	468b      	mov	fp, r1
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	f7ee fb36 	bl	8000628 <__aeabi_dmul>
 8011fbc:	a341      	add	r3, pc, #260	; (adr r3, 80120c4 <__kernel_sin+0x14c>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	4680      	mov	r8, r0
 8011fc4:	4689      	mov	r9, r1
 8011fc6:	4650      	mov	r0, sl
 8011fc8:	4659      	mov	r1, fp
 8011fca:	f7ee fb2d 	bl	8000628 <__aeabi_dmul>
 8011fce:	a33f      	add	r3, pc, #252	; (adr r3, 80120cc <__kernel_sin+0x154>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	f7ee f970 	bl	80002b8 <__aeabi_dsub>
 8011fd8:	4652      	mov	r2, sl
 8011fda:	465b      	mov	r3, fp
 8011fdc:	f7ee fb24 	bl	8000628 <__aeabi_dmul>
 8011fe0:	a33c      	add	r3, pc, #240	; (adr r3, 80120d4 <__kernel_sin+0x15c>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	f7ee f969 	bl	80002bc <__adddf3>
 8011fea:	4652      	mov	r2, sl
 8011fec:	465b      	mov	r3, fp
 8011fee:	f7ee fb1b 	bl	8000628 <__aeabi_dmul>
 8011ff2:	a33a      	add	r3, pc, #232	; (adr r3, 80120dc <__kernel_sin+0x164>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee f95e 	bl	80002b8 <__aeabi_dsub>
 8011ffc:	4652      	mov	r2, sl
 8011ffe:	465b      	mov	r3, fp
 8012000:	f7ee fb12 	bl	8000628 <__aeabi_dmul>
 8012004:	a337      	add	r3, pc, #220	; (adr r3, 80120e4 <__kernel_sin+0x16c>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	f7ee f957 	bl	80002bc <__adddf3>
 801200e:	9b02      	ldr	r3, [sp, #8]
 8012010:	4606      	mov	r6, r0
 8012012:	460f      	mov	r7, r1
 8012014:	b9db      	cbnz	r3, 801204e <__kernel_sin+0xd6>
 8012016:	4602      	mov	r2, r0
 8012018:	460b      	mov	r3, r1
 801201a:	4650      	mov	r0, sl
 801201c:	4659      	mov	r1, fp
 801201e:	f7ee fb03 	bl	8000628 <__aeabi_dmul>
 8012022:	a325      	add	r3, pc, #148	; (adr r3, 80120b8 <__kernel_sin+0x140>)
 8012024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012028:	f7ee f946 	bl	80002b8 <__aeabi_dsub>
 801202c:	4642      	mov	r2, r8
 801202e:	464b      	mov	r3, r9
 8012030:	f7ee fafa 	bl	8000628 <__aeabi_dmul>
 8012034:	4602      	mov	r2, r0
 8012036:	460b      	mov	r3, r1
 8012038:	4620      	mov	r0, r4
 801203a:	4629      	mov	r1, r5
 801203c:	f7ee f93e 	bl	80002bc <__adddf3>
 8012040:	4604      	mov	r4, r0
 8012042:	460d      	mov	r5, r1
 8012044:	ec45 4b10 	vmov	d0, r4, r5
 8012048:	b005      	add	sp, #20
 801204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204e:	2200      	movs	r2, #0
 8012050:	4b1b      	ldr	r3, [pc, #108]	; (80120c0 <__kernel_sin+0x148>)
 8012052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012056:	f7ee fae7 	bl	8000628 <__aeabi_dmul>
 801205a:	4632      	mov	r2, r6
 801205c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012060:	463b      	mov	r3, r7
 8012062:	4640      	mov	r0, r8
 8012064:	4649      	mov	r1, r9
 8012066:	f7ee fadf 	bl	8000628 <__aeabi_dmul>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012072:	f7ee f921 	bl	80002b8 <__aeabi_dsub>
 8012076:	4652      	mov	r2, sl
 8012078:	465b      	mov	r3, fp
 801207a:	f7ee fad5 	bl	8000628 <__aeabi_dmul>
 801207e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012082:	f7ee f919 	bl	80002b8 <__aeabi_dsub>
 8012086:	a30c      	add	r3, pc, #48	; (adr r3, 80120b8 <__kernel_sin+0x140>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	4606      	mov	r6, r0
 801208e:	460f      	mov	r7, r1
 8012090:	4640      	mov	r0, r8
 8012092:	4649      	mov	r1, r9
 8012094:	f7ee fac8 	bl	8000628 <__aeabi_dmul>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4630      	mov	r0, r6
 801209e:	4639      	mov	r1, r7
 80120a0:	f7ee f90c 	bl	80002bc <__adddf3>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	4620      	mov	r0, r4
 80120aa:	4629      	mov	r1, r5
 80120ac:	f7ee f904 	bl	80002b8 <__aeabi_dsub>
 80120b0:	e7c6      	b.n	8012040 <__kernel_sin+0xc8>
 80120b2:	bf00      	nop
 80120b4:	f3af 8000 	nop.w
 80120b8:	55555549 	.word	0x55555549
 80120bc:	3fc55555 	.word	0x3fc55555
 80120c0:	3fe00000 	.word	0x3fe00000
 80120c4:	5acfd57c 	.word	0x5acfd57c
 80120c8:	3de5d93a 	.word	0x3de5d93a
 80120cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80120d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80120d4:	57b1fe7d 	.word	0x57b1fe7d
 80120d8:	3ec71de3 	.word	0x3ec71de3
 80120dc:	19c161d5 	.word	0x19c161d5
 80120e0:	3f2a01a0 	.word	0x3f2a01a0
 80120e4:	1110f8a6 	.word	0x1110f8a6
 80120e8:	3f811111 	.word	0x3f811111

080120ec <fabs>:
 80120ec:	ec51 0b10 	vmov	r0, r1, d0
 80120f0:	ee10 2a10 	vmov	r2, s0
 80120f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120f8:	ec43 2b10 	vmov	d0, r2, r3
 80120fc:	4770      	bx	lr
	...

08012100 <floor>:
 8012100:	ec51 0b10 	vmov	r0, r1, d0
 8012104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012108:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801210c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012110:	2e13      	cmp	r6, #19
 8012112:	460c      	mov	r4, r1
 8012114:	ee10 5a10 	vmov	r5, s0
 8012118:	4680      	mov	r8, r0
 801211a:	dc34      	bgt.n	8012186 <floor+0x86>
 801211c:	2e00      	cmp	r6, #0
 801211e:	da16      	bge.n	801214e <floor+0x4e>
 8012120:	a335      	add	r3, pc, #212	; (adr r3, 80121f8 <floor+0xf8>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	f7ee f8c9 	bl	80002bc <__adddf3>
 801212a:	2200      	movs	r2, #0
 801212c:	2300      	movs	r3, #0
 801212e:	f7ee fd0b 	bl	8000b48 <__aeabi_dcmpgt>
 8012132:	b148      	cbz	r0, 8012148 <floor+0x48>
 8012134:	2c00      	cmp	r4, #0
 8012136:	da59      	bge.n	80121ec <floor+0xec>
 8012138:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801213c:	4a30      	ldr	r2, [pc, #192]	; (8012200 <floor+0x100>)
 801213e:	432b      	orrs	r3, r5
 8012140:	2500      	movs	r5, #0
 8012142:	42ab      	cmp	r3, r5
 8012144:	bf18      	it	ne
 8012146:	4614      	movne	r4, r2
 8012148:	4621      	mov	r1, r4
 801214a:	4628      	mov	r0, r5
 801214c:	e025      	b.n	801219a <floor+0x9a>
 801214e:	4f2d      	ldr	r7, [pc, #180]	; (8012204 <floor+0x104>)
 8012150:	4137      	asrs	r7, r6
 8012152:	ea01 0307 	and.w	r3, r1, r7
 8012156:	4303      	orrs	r3, r0
 8012158:	d01f      	beq.n	801219a <floor+0x9a>
 801215a:	a327      	add	r3, pc, #156	; (adr r3, 80121f8 <floor+0xf8>)
 801215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012160:	f7ee f8ac 	bl	80002bc <__adddf3>
 8012164:	2200      	movs	r2, #0
 8012166:	2300      	movs	r3, #0
 8012168:	f7ee fcee 	bl	8000b48 <__aeabi_dcmpgt>
 801216c:	2800      	cmp	r0, #0
 801216e:	d0eb      	beq.n	8012148 <floor+0x48>
 8012170:	2c00      	cmp	r4, #0
 8012172:	bfbe      	ittt	lt
 8012174:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012178:	fa43 f606 	asrlt.w	r6, r3, r6
 801217c:	19a4      	addlt	r4, r4, r6
 801217e:	ea24 0407 	bic.w	r4, r4, r7
 8012182:	2500      	movs	r5, #0
 8012184:	e7e0      	b.n	8012148 <floor+0x48>
 8012186:	2e33      	cmp	r6, #51	; 0x33
 8012188:	dd0b      	ble.n	80121a2 <floor+0xa2>
 801218a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801218e:	d104      	bne.n	801219a <floor+0x9a>
 8012190:	ee10 2a10 	vmov	r2, s0
 8012194:	460b      	mov	r3, r1
 8012196:	f7ee f891 	bl	80002bc <__adddf3>
 801219a:	ec41 0b10 	vmov	d0, r0, r1
 801219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80121a6:	f04f 33ff 	mov.w	r3, #4294967295
 80121aa:	fa23 f707 	lsr.w	r7, r3, r7
 80121ae:	4207      	tst	r7, r0
 80121b0:	d0f3      	beq.n	801219a <floor+0x9a>
 80121b2:	a311      	add	r3, pc, #68	; (adr r3, 80121f8 <floor+0xf8>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	f7ee f880 	bl	80002bc <__adddf3>
 80121bc:	2200      	movs	r2, #0
 80121be:	2300      	movs	r3, #0
 80121c0:	f7ee fcc2 	bl	8000b48 <__aeabi_dcmpgt>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d0bf      	beq.n	8012148 <floor+0x48>
 80121c8:	2c00      	cmp	r4, #0
 80121ca:	da02      	bge.n	80121d2 <floor+0xd2>
 80121cc:	2e14      	cmp	r6, #20
 80121ce:	d103      	bne.n	80121d8 <floor+0xd8>
 80121d0:	3401      	adds	r4, #1
 80121d2:	ea25 0507 	bic.w	r5, r5, r7
 80121d6:	e7b7      	b.n	8012148 <floor+0x48>
 80121d8:	2301      	movs	r3, #1
 80121da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80121de:	fa03 f606 	lsl.w	r6, r3, r6
 80121e2:	4435      	add	r5, r6
 80121e4:	4545      	cmp	r5, r8
 80121e6:	bf38      	it	cc
 80121e8:	18e4      	addcc	r4, r4, r3
 80121ea:	e7f2      	b.n	80121d2 <floor+0xd2>
 80121ec:	2500      	movs	r5, #0
 80121ee:	462c      	mov	r4, r5
 80121f0:	e7aa      	b.n	8012148 <floor+0x48>
 80121f2:	bf00      	nop
 80121f4:	f3af 8000 	nop.w
 80121f8:	8800759c 	.word	0x8800759c
 80121fc:	7e37e43c 	.word	0x7e37e43c
 8012200:	bff00000 	.word	0xbff00000
 8012204:	000fffff 	.word	0x000fffff

08012208 <matherr>:
 8012208:	2000      	movs	r0, #0
 801220a:	4770      	bx	lr
 801220c:	0000      	movs	r0, r0
	...

08012210 <scalbn>:
 8012210:	b570      	push	{r4, r5, r6, lr}
 8012212:	ec55 4b10 	vmov	r4, r5, d0
 8012216:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801221a:	4606      	mov	r6, r0
 801221c:	462b      	mov	r3, r5
 801221e:	b9aa      	cbnz	r2, 801224c <scalbn+0x3c>
 8012220:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012224:	4323      	orrs	r3, r4
 8012226:	d03b      	beq.n	80122a0 <scalbn+0x90>
 8012228:	4b31      	ldr	r3, [pc, #196]	; (80122f0 <scalbn+0xe0>)
 801222a:	4629      	mov	r1, r5
 801222c:	2200      	movs	r2, #0
 801222e:	ee10 0a10 	vmov	r0, s0
 8012232:	f7ee f9f9 	bl	8000628 <__aeabi_dmul>
 8012236:	4b2f      	ldr	r3, [pc, #188]	; (80122f4 <scalbn+0xe4>)
 8012238:	429e      	cmp	r6, r3
 801223a:	4604      	mov	r4, r0
 801223c:	460d      	mov	r5, r1
 801223e:	da12      	bge.n	8012266 <scalbn+0x56>
 8012240:	a327      	add	r3, pc, #156	; (adr r3, 80122e0 <scalbn+0xd0>)
 8012242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012246:	f7ee f9ef 	bl	8000628 <__aeabi_dmul>
 801224a:	e009      	b.n	8012260 <scalbn+0x50>
 801224c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012250:	428a      	cmp	r2, r1
 8012252:	d10c      	bne.n	801226e <scalbn+0x5e>
 8012254:	ee10 2a10 	vmov	r2, s0
 8012258:	4620      	mov	r0, r4
 801225a:	4629      	mov	r1, r5
 801225c:	f7ee f82e 	bl	80002bc <__adddf3>
 8012260:	4604      	mov	r4, r0
 8012262:	460d      	mov	r5, r1
 8012264:	e01c      	b.n	80122a0 <scalbn+0x90>
 8012266:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801226a:	460b      	mov	r3, r1
 801226c:	3a36      	subs	r2, #54	; 0x36
 801226e:	4432      	add	r2, r6
 8012270:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012274:	428a      	cmp	r2, r1
 8012276:	dd0b      	ble.n	8012290 <scalbn+0x80>
 8012278:	ec45 4b11 	vmov	d1, r4, r5
 801227c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80122e8 <scalbn+0xd8>
 8012280:	f000 f83c 	bl	80122fc <copysign>
 8012284:	a318      	add	r3, pc, #96	; (adr r3, 80122e8 <scalbn+0xd8>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	ec51 0b10 	vmov	r0, r1, d0
 801228e:	e7da      	b.n	8012246 <scalbn+0x36>
 8012290:	2a00      	cmp	r2, #0
 8012292:	dd08      	ble.n	80122a6 <scalbn+0x96>
 8012294:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012298:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801229c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122a0:	ec45 4b10 	vmov	d0, r4, r5
 80122a4:	bd70      	pop	{r4, r5, r6, pc}
 80122a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80122aa:	da0d      	bge.n	80122c8 <scalbn+0xb8>
 80122ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80122b0:	429e      	cmp	r6, r3
 80122b2:	ec45 4b11 	vmov	d1, r4, r5
 80122b6:	dce1      	bgt.n	801227c <scalbn+0x6c>
 80122b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80122e0 <scalbn+0xd0>
 80122bc:	f000 f81e 	bl	80122fc <copysign>
 80122c0:	a307      	add	r3, pc, #28	; (adr r3, 80122e0 <scalbn+0xd0>)
 80122c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c6:	e7e0      	b.n	801228a <scalbn+0x7a>
 80122c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122cc:	3236      	adds	r2, #54	; 0x36
 80122ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80122d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122d6:	4620      	mov	r0, r4
 80122d8:	4629      	mov	r1, r5
 80122da:	2200      	movs	r2, #0
 80122dc:	4b06      	ldr	r3, [pc, #24]	; (80122f8 <scalbn+0xe8>)
 80122de:	e7b2      	b.n	8012246 <scalbn+0x36>
 80122e0:	c2f8f359 	.word	0xc2f8f359
 80122e4:	01a56e1f 	.word	0x01a56e1f
 80122e8:	8800759c 	.word	0x8800759c
 80122ec:	7e37e43c 	.word	0x7e37e43c
 80122f0:	43500000 	.word	0x43500000
 80122f4:	ffff3cb0 	.word	0xffff3cb0
 80122f8:	3c900000 	.word	0x3c900000

080122fc <copysign>:
 80122fc:	ec51 0b10 	vmov	r0, r1, d0
 8012300:	ee11 0a90 	vmov	r0, s3
 8012304:	ee10 2a10 	vmov	r2, s0
 8012308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801230c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012310:	ea41 0300 	orr.w	r3, r1, r0
 8012314:	ec43 2b10 	vmov	d0, r2, r3
 8012318:	4770      	bx	lr
	...

0801231c <__errno>:
 801231c:	4b01      	ldr	r3, [pc, #4]	; (8012324 <__errno+0x8>)
 801231e:	6818      	ldr	r0, [r3, #0]
 8012320:	4770      	bx	lr
 8012322:	bf00      	nop
 8012324:	2000000c 	.word	0x2000000c

08012328 <__libc_init_array>:
 8012328:	b570      	push	{r4, r5, r6, lr}
 801232a:	4e0d      	ldr	r6, [pc, #52]	; (8012360 <__libc_init_array+0x38>)
 801232c:	4c0d      	ldr	r4, [pc, #52]	; (8012364 <__libc_init_array+0x3c>)
 801232e:	1ba4      	subs	r4, r4, r6
 8012330:	10a4      	asrs	r4, r4, #2
 8012332:	2500      	movs	r5, #0
 8012334:	42a5      	cmp	r5, r4
 8012336:	d109      	bne.n	801234c <__libc_init_array+0x24>
 8012338:	4e0b      	ldr	r6, [pc, #44]	; (8012368 <__libc_init_array+0x40>)
 801233a:	4c0c      	ldr	r4, [pc, #48]	; (801236c <__libc_init_array+0x44>)
 801233c:	f004 feec 	bl	8017118 <_init>
 8012340:	1ba4      	subs	r4, r4, r6
 8012342:	10a4      	asrs	r4, r4, #2
 8012344:	2500      	movs	r5, #0
 8012346:	42a5      	cmp	r5, r4
 8012348:	d105      	bne.n	8012356 <__libc_init_array+0x2e>
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012350:	4798      	blx	r3
 8012352:	3501      	adds	r5, #1
 8012354:	e7ee      	b.n	8012334 <__libc_init_array+0xc>
 8012356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801235a:	4798      	blx	r3
 801235c:	3501      	adds	r5, #1
 801235e:	e7f2      	b.n	8012346 <__libc_init_array+0x1e>
 8012360:	08017904 	.word	0x08017904
 8012364:	08017904 	.word	0x08017904
 8012368:	08017904 	.word	0x08017904
 801236c:	0801790c 	.word	0x0801790c

08012370 <memset>:
 8012370:	4402      	add	r2, r0
 8012372:	4603      	mov	r3, r0
 8012374:	4293      	cmp	r3, r2
 8012376:	d100      	bne.n	801237a <memset+0xa>
 8012378:	4770      	bx	lr
 801237a:	f803 1b01 	strb.w	r1, [r3], #1
 801237e:	e7f9      	b.n	8012374 <memset+0x4>

08012380 <__cvt>:
 8012380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012384:	ec55 4b10 	vmov	r4, r5, d0
 8012388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801238a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801238e:	2d00      	cmp	r5, #0
 8012390:	460e      	mov	r6, r1
 8012392:	4691      	mov	r9, r2
 8012394:	4619      	mov	r1, r3
 8012396:	bfb8      	it	lt
 8012398:	4622      	movlt	r2, r4
 801239a:	462b      	mov	r3, r5
 801239c:	f027 0720 	bic.w	r7, r7, #32
 80123a0:	bfbb      	ittet	lt
 80123a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80123a6:	461d      	movlt	r5, r3
 80123a8:	2300      	movge	r3, #0
 80123aa:	232d      	movlt	r3, #45	; 0x2d
 80123ac:	bfb8      	it	lt
 80123ae:	4614      	movlt	r4, r2
 80123b0:	2f46      	cmp	r7, #70	; 0x46
 80123b2:	700b      	strb	r3, [r1, #0]
 80123b4:	d004      	beq.n	80123c0 <__cvt+0x40>
 80123b6:	2f45      	cmp	r7, #69	; 0x45
 80123b8:	d100      	bne.n	80123bc <__cvt+0x3c>
 80123ba:	3601      	adds	r6, #1
 80123bc:	2102      	movs	r1, #2
 80123be:	e000      	b.n	80123c2 <__cvt+0x42>
 80123c0:	2103      	movs	r1, #3
 80123c2:	ab03      	add	r3, sp, #12
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	ab02      	add	r3, sp, #8
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	4632      	mov	r2, r6
 80123cc:	4653      	mov	r3, sl
 80123ce:	ec45 4b10 	vmov	d0, r4, r5
 80123d2:	f001 ff9d 	bl	8014310 <_dtoa_r>
 80123d6:	2f47      	cmp	r7, #71	; 0x47
 80123d8:	4680      	mov	r8, r0
 80123da:	d102      	bne.n	80123e2 <__cvt+0x62>
 80123dc:	f019 0f01 	tst.w	r9, #1
 80123e0:	d026      	beq.n	8012430 <__cvt+0xb0>
 80123e2:	2f46      	cmp	r7, #70	; 0x46
 80123e4:	eb08 0906 	add.w	r9, r8, r6
 80123e8:	d111      	bne.n	801240e <__cvt+0x8e>
 80123ea:	f898 3000 	ldrb.w	r3, [r8]
 80123ee:	2b30      	cmp	r3, #48	; 0x30
 80123f0:	d10a      	bne.n	8012408 <__cvt+0x88>
 80123f2:	2200      	movs	r2, #0
 80123f4:	2300      	movs	r3, #0
 80123f6:	4620      	mov	r0, r4
 80123f8:	4629      	mov	r1, r5
 80123fa:	f7ee fb7d 	bl	8000af8 <__aeabi_dcmpeq>
 80123fe:	b918      	cbnz	r0, 8012408 <__cvt+0x88>
 8012400:	f1c6 0601 	rsb	r6, r6, #1
 8012404:	f8ca 6000 	str.w	r6, [sl]
 8012408:	f8da 3000 	ldr.w	r3, [sl]
 801240c:	4499      	add	r9, r3
 801240e:	2200      	movs	r2, #0
 8012410:	2300      	movs	r3, #0
 8012412:	4620      	mov	r0, r4
 8012414:	4629      	mov	r1, r5
 8012416:	f7ee fb6f 	bl	8000af8 <__aeabi_dcmpeq>
 801241a:	b938      	cbnz	r0, 801242c <__cvt+0xac>
 801241c:	2230      	movs	r2, #48	; 0x30
 801241e:	9b03      	ldr	r3, [sp, #12]
 8012420:	454b      	cmp	r3, r9
 8012422:	d205      	bcs.n	8012430 <__cvt+0xb0>
 8012424:	1c59      	adds	r1, r3, #1
 8012426:	9103      	str	r1, [sp, #12]
 8012428:	701a      	strb	r2, [r3, #0]
 801242a:	e7f8      	b.n	801241e <__cvt+0x9e>
 801242c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012430:	9b03      	ldr	r3, [sp, #12]
 8012432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012434:	eba3 0308 	sub.w	r3, r3, r8
 8012438:	4640      	mov	r0, r8
 801243a:	6013      	str	r3, [r2, #0]
 801243c:	b004      	add	sp, #16
 801243e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012442 <__exponent>:
 8012442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012444:	2900      	cmp	r1, #0
 8012446:	4604      	mov	r4, r0
 8012448:	bfba      	itte	lt
 801244a:	4249      	neglt	r1, r1
 801244c:	232d      	movlt	r3, #45	; 0x2d
 801244e:	232b      	movge	r3, #43	; 0x2b
 8012450:	2909      	cmp	r1, #9
 8012452:	f804 2b02 	strb.w	r2, [r4], #2
 8012456:	7043      	strb	r3, [r0, #1]
 8012458:	dd20      	ble.n	801249c <__exponent+0x5a>
 801245a:	f10d 0307 	add.w	r3, sp, #7
 801245e:	461f      	mov	r7, r3
 8012460:	260a      	movs	r6, #10
 8012462:	fb91 f5f6 	sdiv	r5, r1, r6
 8012466:	fb06 1115 	mls	r1, r6, r5, r1
 801246a:	3130      	adds	r1, #48	; 0x30
 801246c:	2d09      	cmp	r5, #9
 801246e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012472:	f103 32ff 	add.w	r2, r3, #4294967295
 8012476:	4629      	mov	r1, r5
 8012478:	dc09      	bgt.n	801248e <__exponent+0x4c>
 801247a:	3130      	adds	r1, #48	; 0x30
 801247c:	3b02      	subs	r3, #2
 801247e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012482:	42bb      	cmp	r3, r7
 8012484:	4622      	mov	r2, r4
 8012486:	d304      	bcc.n	8012492 <__exponent+0x50>
 8012488:	1a10      	subs	r0, r2, r0
 801248a:	b003      	add	sp, #12
 801248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801248e:	4613      	mov	r3, r2
 8012490:	e7e7      	b.n	8012462 <__exponent+0x20>
 8012492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012496:	f804 2b01 	strb.w	r2, [r4], #1
 801249a:	e7f2      	b.n	8012482 <__exponent+0x40>
 801249c:	2330      	movs	r3, #48	; 0x30
 801249e:	4419      	add	r1, r3
 80124a0:	7083      	strb	r3, [r0, #2]
 80124a2:	1d02      	adds	r2, r0, #4
 80124a4:	70c1      	strb	r1, [r0, #3]
 80124a6:	e7ef      	b.n	8012488 <__exponent+0x46>

080124a8 <_printf_float>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	b08d      	sub	sp, #52	; 0x34
 80124ae:	460c      	mov	r4, r1
 80124b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80124b4:	4616      	mov	r6, r2
 80124b6:	461f      	mov	r7, r3
 80124b8:	4605      	mov	r5, r0
 80124ba:	f003 f995 	bl	80157e8 <_localeconv_r>
 80124be:	6803      	ldr	r3, [r0, #0]
 80124c0:	9304      	str	r3, [sp, #16]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7ed fe9c 	bl	8000200 <strlen>
 80124c8:	2300      	movs	r3, #0
 80124ca:	930a      	str	r3, [sp, #40]	; 0x28
 80124cc:	f8d8 3000 	ldr.w	r3, [r8]
 80124d0:	9005      	str	r0, [sp, #20]
 80124d2:	3307      	adds	r3, #7
 80124d4:	f023 0307 	bic.w	r3, r3, #7
 80124d8:	f103 0208 	add.w	r2, r3, #8
 80124dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80124e0:	f8d4 b000 	ldr.w	fp, [r4]
 80124e4:	f8c8 2000 	str.w	r2, [r8]
 80124e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80124f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80124f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80124f8:	9307      	str	r3, [sp, #28]
 80124fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80124fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012502:	4ba7      	ldr	r3, [pc, #668]	; (80127a0 <_printf_float+0x2f8>)
 8012504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012508:	f7ee fb28 	bl	8000b5c <__aeabi_dcmpun>
 801250c:	bb70      	cbnz	r0, 801256c <_printf_float+0xc4>
 801250e:	f04f 32ff 	mov.w	r2, #4294967295
 8012512:	4ba3      	ldr	r3, [pc, #652]	; (80127a0 <_printf_float+0x2f8>)
 8012514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012518:	f7ee fb02 	bl	8000b20 <__aeabi_dcmple>
 801251c:	bb30      	cbnz	r0, 801256c <_printf_float+0xc4>
 801251e:	2200      	movs	r2, #0
 8012520:	2300      	movs	r3, #0
 8012522:	4640      	mov	r0, r8
 8012524:	4649      	mov	r1, r9
 8012526:	f7ee faf1 	bl	8000b0c <__aeabi_dcmplt>
 801252a:	b110      	cbz	r0, 8012532 <_printf_float+0x8a>
 801252c:	232d      	movs	r3, #45	; 0x2d
 801252e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012532:	4a9c      	ldr	r2, [pc, #624]	; (80127a4 <_printf_float+0x2fc>)
 8012534:	4b9c      	ldr	r3, [pc, #624]	; (80127a8 <_printf_float+0x300>)
 8012536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801253a:	bf8c      	ite	hi
 801253c:	4690      	movhi	r8, r2
 801253e:	4698      	movls	r8, r3
 8012540:	2303      	movs	r3, #3
 8012542:	f02b 0204 	bic.w	r2, fp, #4
 8012546:	6123      	str	r3, [r4, #16]
 8012548:	6022      	str	r2, [r4, #0]
 801254a:	f04f 0900 	mov.w	r9, #0
 801254e:	9700      	str	r7, [sp, #0]
 8012550:	4633      	mov	r3, r6
 8012552:	aa0b      	add	r2, sp, #44	; 0x2c
 8012554:	4621      	mov	r1, r4
 8012556:	4628      	mov	r0, r5
 8012558:	f000 f9e6 	bl	8012928 <_printf_common>
 801255c:	3001      	adds	r0, #1
 801255e:	f040 808d 	bne.w	801267c <_printf_float+0x1d4>
 8012562:	f04f 30ff 	mov.w	r0, #4294967295
 8012566:	b00d      	add	sp, #52	; 0x34
 8012568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256c:	4642      	mov	r2, r8
 801256e:	464b      	mov	r3, r9
 8012570:	4640      	mov	r0, r8
 8012572:	4649      	mov	r1, r9
 8012574:	f7ee faf2 	bl	8000b5c <__aeabi_dcmpun>
 8012578:	b110      	cbz	r0, 8012580 <_printf_float+0xd8>
 801257a:	4a8c      	ldr	r2, [pc, #560]	; (80127ac <_printf_float+0x304>)
 801257c:	4b8c      	ldr	r3, [pc, #560]	; (80127b0 <_printf_float+0x308>)
 801257e:	e7da      	b.n	8012536 <_printf_float+0x8e>
 8012580:	6861      	ldr	r1, [r4, #4]
 8012582:	1c4b      	adds	r3, r1, #1
 8012584:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012588:	a80a      	add	r0, sp, #40	; 0x28
 801258a:	d13e      	bne.n	801260a <_printf_float+0x162>
 801258c:	2306      	movs	r3, #6
 801258e:	6063      	str	r3, [r4, #4]
 8012590:	2300      	movs	r3, #0
 8012592:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012596:	ab09      	add	r3, sp, #36	; 0x24
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	ec49 8b10 	vmov	d0, r8, r9
 801259e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80125a2:	6022      	str	r2, [r4, #0]
 80125a4:	f8cd a004 	str.w	sl, [sp, #4]
 80125a8:	6861      	ldr	r1, [r4, #4]
 80125aa:	4628      	mov	r0, r5
 80125ac:	f7ff fee8 	bl	8012380 <__cvt>
 80125b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80125b4:	2b47      	cmp	r3, #71	; 0x47
 80125b6:	4680      	mov	r8, r0
 80125b8:	d109      	bne.n	80125ce <_printf_float+0x126>
 80125ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125bc:	1cd8      	adds	r0, r3, #3
 80125be:	db02      	blt.n	80125c6 <_printf_float+0x11e>
 80125c0:	6862      	ldr	r2, [r4, #4]
 80125c2:	4293      	cmp	r3, r2
 80125c4:	dd47      	ble.n	8012656 <_printf_float+0x1ae>
 80125c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80125ca:	fa5f fa8a 	uxtb.w	sl, sl
 80125ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80125d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125d4:	d824      	bhi.n	8012620 <_printf_float+0x178>
 80125d6:	3901      	subs	r1, #1
 80125d8:	4652      	mov	r2, sl
 80125da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80125de:	9109      	str	r1, [sp, #36]	; 0x24
 80125e0:	f7ff ff2f 	bl	8012442 <__exponent>
 80125e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125e6:	1813      	adds	r3, r2, r0
 80125e8:	2a01      	cmp	r2, #1
 80125ea:	4681      	mov	r9, r0
 80125ec:	6123      	str	r3, [r4, #16]
 80125ee:	dc02      	bgt.n	80125f6 <_printf_float+0x14e>
 80125f0:	6822      	ldr	r2, [r4, #0]
 80125f2:	07d1      	lsls	r1, r2, #31
 80125f4:	d501      	bpl.n	80125fa <_printf_float+0x152>
 80125f6:	3301      	adds	r3, #1
 80125f8:	6123      	str	r3, [r4, #16]
 80125fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d0a5      	beq.n	801254e <_printf_float+0xa6>
 8012602:	232d      	movs	r3, #45	; 0x2d
 8012604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012608:	e7a1      	b.n	801254e <_printf_float+0xa6>
 801260a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801260e:	f000 8177 	beq.w	8012900 <_printf_float+0x458>
 8012612:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012616:	d1bb      	bne.n	8012590 <_printf_float+0xe8>
 8012618:	2900      	cmp	r1, #0
 801261a:	d1b9      	bne.n	8012590 <_printf_float+0xe8>
 801261c:	2301      	movs	r3, #1
 801261e:	e7b6      	b.n	801258e <_printf_float+0xe6>
 8012620:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012624:	d119      	bne.n	801265a <_printf_float+0x1b2>
 8012626:	2900      	cmp	r1, #0
 8012628:	6863      	ldr	r3, [r4, #4]
 801262a:	dd0c      	ble.n	8012646 <_printf_float+0x19e>
 801262c:	6121      	str	r1, [r4, #16]
 801262e:	b913      	cbnz	r3, 8012636 <_printf_float+0x18e>
 8012630:	6822      	ldr	r2, [r4, #0]
 8012632:	07d2      	lsls	r2, r2, #31
 8012634:	d502      	bpl.n	801263c <_printf_float+0x194>
 8012636:	3301      	adds	r3, #1
 8012638:	440b      	add	r3, r1
 801263a:	6123      	str	r3, [r4, #16]
 801263c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801263e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012640:	f04f 0900 	mov.w	r9, #0
 8012644:	e7d9      	b.n	80125fa <_printf_float+0x152>
 8012646:	b913      	cbnz	r3, 801264e <_printf_float+0x1a6>
 8012648:	6822      	ldr	r2, [r4, #0]
 801264a:	07d0      	lsls	r0, r2, #31
 801264c:	d501      	bpl.n	8012652 <_printf_float+0x1aa>
 801264e:	3302      	adds	r3, #2
 8012650:	e7f3      	b.n	801263a <_printf_float+0x192>
 8012652:	2301      	movs	r3, #1
 8012654:	e7f1      	b.n	801263a <_printf_float+0x192>
 8012656:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801265a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801265e:	4293      	cmp	r3, r2
 8012660:	db05      	blt.n	801266e <_printf_float+0x1c6>
 8012662:	6822      	ldr	r2, [r4, #0]
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	07d1      	lsls	r1, r2, #31
 8012668:	d5e8      	bpl.n	801263c <_printf_float+0x194>
 801266a:	3301      	adds	r3, #1
 801266c:	e7e5      	b.n	801263a <_printf_float+0x192>
 801266e:	2b00      	cmp	r3, #0
 8012670:	bfd4      	ite	le
 8012672:	f1c3 0302 	rsble	r3, r3, #2
 8012676:	2301      	movgt	r3, #1
 8012678:	4413      	add	r3, r2
 801267a:	e7de      	b.n	801263a <_printf_float+0x192>
 801267c:	6823      	ldr	r3, [r4, #0]
 801267e:	055a      	lsls	r2, r3, #21
 8012680:	d407      	bmi.n	8012692 <_printf_float+0x1ea>
 8012682:	6923      	ldr	r3, [r4, #16]
 8012684:	4642      	mov	r2, r8
 8012686:	4631      	mov	r1, r6
 8012688:	4628      	mov	r0, r5
 801268a:	47b8      	blx	r7
 801268c:	3001      	adds	r0, #1
 801268e:	d12b      	bne.n	80126e8 <_printf_float+0x240>
 8012690:	e767      	b.n	8012562 <_printf_float+0xba>
 8012692:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012696:	f240 80dc 	bls.w	8012852 <_printf_float+0x3aa>
 801269a:	2200      	movs	r2, #0
 801269c:	2300      	movs	r3, #0
 801269e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80126a2:	f7ee fa29 	bl	8000af8 <__aeabi_dcmpeq>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d033      	beq.n	8012712 <_printf_float+0x26a>
 80126aa:	2301      	movs	r3, #1
 80126ac:	4a41      	ldr	r2, [pc, #260]	; (80127b4 <_printf_float+0x30c>)
 80126ae:	4631      	mov	r1, r6
 80126b0:	4628      	mov	r0, r5
 80126b2:	47b8      	blx	r7
 80126b4:	3001      	adds	r0, #1
 80126b6:	f43f af54 	beq.w	8012562 <_printf_float+0xba>
 80126ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126be:	429a      	cmp	r2, r3
 80126c0:	db02      	blt.n	80126c8 <_printf_float+0x220>
 80126c2:	6823      	ldr	r3, [r4, #0]
 80126c4:	07d8      	lsls	r0, r3, #31
 80126c6:	d50f      	bpl.n	80126e8 <_printf_float+0x240>
 80126c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126cc:	4631      	mov	r1, r6
 80126ce:	4628      	mov	r0, r5
 80126d0:	47b8      	blx	r7
 80126d2:	3001      	adds	r0, #1
 80126d4:	f43f af45 	beq.w	8012562 <_printf_float+0xba>
 80126d8:	f04f 0800 	mov.w	r8, #0
 80126dc:	f104 091a 	add.w	r9, r4, #26
 80126e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e2:	3b01      	subs	r3, #1
 80126e4:	4543      	cmp	r3, r8
 80126e6:	dc09      	bgt.n	80126fc <_printf_float+0x254>
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	079b      	lsls	r3, r3, #30
 80126ec:	f100 8103 	bmi.w	80128f6 <_printf_float+0x44e>
 80126f0:	68e0      	ldr	r0, [r4, #12]
 80126f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126f4:	4298      	cmp	r0, r3
 80126f6:	bfb8      	it	lt
 80126f8:	4618      	movlt	r0, r3
 80126fa:	e734      	b.n	8012566 <_printf_float+0xbe>
 80126fc:	2301      	movs	r3, #1
 80126fe:	464a      	mov	r2, r9
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f af2b 	beq.w	8012562 <_printf_float+0xba>
 801270c:	f108 0801 	add.w	r8, r8, #1
 8012710:	e7e6      	b.n	80126e0 <_printf_float+0x238>
 8012712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012714:	2b00      	cmp	r3, #0
 8012716:	dc2b      	bgt.n	8012770 <_printf_float+0x2c8>
 8012718:	2301      	movs	r3, #1
 801271a:	4a26      	ldr	r2, [pc, #152]	; (80127b4 <_printf_float+0x30c>)
 801271c:	4631      	mov	r1, r6
 801271e:	4628      	mov	r0, r5
 8012720:	47b8      	blx	r7
 8012722:	3001      	adds	r0, #1
 8012724:	f43f af1d 	beq.w	8012562 <_printf_float+0xba>
 8012728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801272a:	b923      	cbnz	r3, 8012736 <_printf_float+0x28e>
 801272c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801272e:	b913      	cbnz	r3, 8012736 <_printf_float+0x28e>
 8012730:	6823      	ldr	r3, [r4, #0]
 8012732:	07d9      	lsls	r1, r3, #31
 8012734:	d5d8      	bpl.n	80126e8 <_printf_float+0x240>
 8012736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801273a:	4631      	mov	r1, r6
 801273c:	4628      	mov	r0, r5
 801273e:	47b8      	blx	r7
 8012740:	3001      	adds	r0, #1
 8012742:	f43f af0e 	beq.w	8012562 <_printf_float+0xba>
 8012746:	f04f 0900 	mov.w	r9, #0
 801274a:	f104 0a1a 	add.w	sl, r4, #26
 801274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012750:	425b      	negs	r3, r3
 8012752:	454b      	cmp	r3, r9
 8012754:	dc01      	bgt.n	801275a <_printf_float+0x2b2>
 8012756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012758:	e794      	b.n	8012684 <_printf_float+0x1dc>
 801275a:	2301      	movs	r3, #1
 801275c:	4652      	mov	r2, sl
 801275e:	4631      	mov	r1, r6
 8012760:	4628      	mov	r0, r5
 8012762:	47b8      	blx	r7
 8012764:	3001      	adds	r0, #1
 8012766:	f43f aefc 	beq.w	8012562 <_printf_float+0xba>
 801276a:	f109 0901 	add.w	r9, r9, #1
 801276e:	e7ee      	b.n	801274e <_printf_float+0x2a6>
 8012770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012774:	429a      	cmp	r2, r3
 8012776:	bfa8      	it	ge
 8012778:	461a      	movge	r2, r3
 801277a:	2a00      	cmp	r2, #0
 801277c:	4691      	mov	r9, r2
 801277e:	dd07      	ble.n	8012790 <_printf_float+0x2e8>
 8012780:	4613      	mov	r3, r2
 8012782:	4631      	mov	r1, r6
 8012784:	4642      	mov	r2, r8
 8012786:	4628      	mov	r0, r5
 8012788:	47b8      	blx	r7
 801278a:	3001      	adds	r0, #1
 801278c:	f43f aee9 	beq.w	8012562 <_printf_float+0xba>
 8012790:	f104 031a 	add.w	r3, r4, #26
 8012794:	f04f 0b00 	mov.w	fp, #0
 8012798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801279c:	9306      	str	r3, [sp, #24]
 801279e:	e015      	b.n	80127cc <_printf_float+0x324>
 80127a0:	7fefffff 	.word	0x7fefffff
 80127a4:	080175c8 	.word	0x080175c8
 80127a8:	080175c4 	.word	0x080175c4
 80127ac:	080175d0 	.word	0x080175d0
 80127b0:	080175cc 	.word	0x080175cc
 80127b4:	080177f3 	.word	0x080177f3
 80127b8:	2301      	movs	r3, #1
 80127ba:	9a06      	ldr	r2, [sp, #24]
 80127bc:	4631      	mov	r1, r6
 80127be:	4628      	mov	r0, r5
 80127c0:	47b8      	blx	r7
 80127c2:	3001      	adds	r0, #1
 80127c4:	f43f aecd 	beq.w	8012562 <_printf_float+0xba>
 80127c8:	f10b 0b01 	add.w	fp, fp, #1
 80127cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80127d0:	ebaa 0309 	sub.w	r3, sl, r9
 80127d4:	455b      	cmp	r3, fp
 80127d6:	dcef      	bgt.n	80127b8 <_printf_float+0x310>
 80127d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80127dc:	429a      	cmp	r2, r3
 80127de:	44d0      	add	r8, sl
 80127e0:	db15      	blt.n	801280e <_printf_float+0x366>
 80127e2:	6823      	ldr	r3, [r4, #0]
 80127e4:	07da      	lsls	r2, r3, #31
 80127e6:	d412      	bmi.n	801280e <_printf_float+0x366>
 80127e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127ec:	eba3 020a 	sub.w	r2, r3, sl
 80127f0:	eba3 0a01 	sub.w	sl, r3, r1
 80127f4:	4592      	cmp	sl, r2
 80127f6:	bfa8      	it	ge
 80127f8:	4692      	movge	sl, r2
 80127fa:	f1ba 0f00 	cmp.w	sl, #0
 80127fe:	dc0e      	bgt.n	801281e <_printf_float+0x376>
 8012800:	f04f 0800 	mov.w	r8, #0
 8012804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012808:	f104 091a 	add.w	r9, r4, #26
 801280c:	e019      	b.n	8012842 <_printf_float+0x39a>
 801280e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012812:	4631      	mov	r1, r6
 8012814:	4628      	mov	r0, r5
 8012816:	47b8      	blx	r7
 8012818:	3001      	adds	r0, #1
 801281a:	d1e5      	bne.n	80127e8 <_printf_float+0x340>
 801281c:	e6a1      	b.n	8012562 <_printf_float+0xba>
 801281e:	4653      	mov	r3, sl
 8012820:	4642      	mov	r2, r8
 8012822:	4631      	mov	r1, r6
 8012824:	4628      	mov	r0, r5
 8012826:	47b8      	blx	r7
 8012828:	3001      	adds	r0, #1
 801282a:	d1e9      	bne.n	8012800 <_printf_float+0x358>
 801282c:	e699      	b.n	8012562 <_printf_float+0xba>
 801282e:	2301      	movs	r3, #1
 8012830:	464a      	mov	r2, r9
 8012832:	4631      	mov	r1, r6
 8012834:	4628      	mov	r0, r5
 8012836:	47b8      	blx	r7
 8012838:	3001      	adds	r0, #1
 801283a:	f43f ae92 	beq.w	8012562 <_printf_float+0xba>
 801283e:	f108 0801 	add.w	r8, r8, #1
 8012842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012846:	1a9b      	subs	r3, r3, r2
 8012848:	eba3 030a 	sub.w	r3, r3, sl
 801284c:	4543      	cmp	r3, r8
 801284e:	dcee      	bgt.n	801282e <_printf_float+0x386>
 8012850:	e74a      	b.n	80126e8 <_printf_float+0x240>
 8012852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012854:	2a01      	cmp	r2, #1
 8012856:	dc01      	bgt.n	801285c <_printf_float+0x3b4>
 8012858:	07db      	lsls	r3, r3, #31
 801285a:	d53a      	bpl.n	80128d2 <_printf_float+0x42a>
 801285c:	2301      	movs	r3, #1
 801285e:	4642      	mov	r2, r8
 8012860:	4631      	mov	r1, r6
 8012862:	4628      	mov	r0, r5
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f ae7b 	beq.w	8012562 <_printf_float+0xba>
 801286c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012870:	4631      	mov	r1, r6
 8012872:	4628      	mov	r0, r5
 8012874:	47b8      	blx	r7
 8012876:	3001      	adds	r0, #1
 8012878:	f108 0801 	add.w	r8, r8, #1
 801287c:	f43f ae71 	beq.w	8012562 <_printf_float+0xba>
 8012880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012882:	2200      	movs	r2, #0
 8012884:	f103 3aff 	add.w	sl, r3, #4294967295
 8012888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801288c:	2300      	movs	r3, #0
 801288e:	f7ee f933 	bl	8000af8 <__aeabi_dcmpeq>
 8012892:	b9c8      	cbnz	r0, 80128c8 <_printf_float+0x420>
 8012894:	4653      	mov	r3, sl
 8012896:	4642      	mov	r2, r8
 8012898:	4631      	mov	r1, r6
 801289a:	4628      	mov	r0, r5
 801289c:	47b8      	blx	r7
 801289e:	3001      	adds	r0, #1
 80128a0:	d10e      	bne.n	80128c0 <_printf_float+0x418>
 80128a2:	e65e      	b.n	8012562 <_printf_float+0xba>
 80128a4:	2301      	movs	r3, #1
 80128a6:	4652      	mov	r2, sl
 80128a8:	4631      	mov	r1, r6
 80128aa:	4628      	mov	r0, r5
 80128ac:	47b8      	blx	r7
 80128ae:	3001      	adds	r0, #1
 80128b0:	f43f ae57 	beq.w	8012562 <_printf_float+0xba>
 80128b4:	f108 0801 	add.w	r8, r8, #1
 80128b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ba:	3b01      	subs	r3, #1
 80128bc:	4543      	cmp	r3, r8
 80128be:	dcf1      	bgt.n	80128a4 <_printf_float+0x3fc>
 80128c0:	464b      	mov	r3, r9
 80128c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80128c6:	e6de      	b.n	8012686 <_printf_float+0x1de>
 80128c8:	f04f 0800 	mov.w	r8, #0
 80128cc:	f104 0a1a 	add.w	sl, r4, #26
 80128d0:	e7f2      	b.n	80128b8 <_printf_float+0x410>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e7df      	b.n	8012896 <_printf_float+0x3ee>
 80128d6:	2301      	movs	r3, #1
 80128d8:	464a      	mov	r2, r9
 80128da:	4631      	mov	r1, r6
 80128dc:	4628      	mov	r0, r5
 80128de:	47b8      	blx	r7
 80128e0:	3001      	adds	r0, #1
 80128e2:	f43f ae3e 	beq.w	8012562 <_printf_float+0xba>
 80128e6:	f108 0801 	add.w	r8, r8, #1
 80128ea:	68e3      	ldr	r3, [r4, #12]
 80128ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128ee:	1a9b      	subs	r3, r3, r2
 80128f0:	4543      	cmp	r3, r8
 80128f2:	dcf0      	bgt.n	80128d6 <_printf_float+0x42e>
 80128f4:	e6fc      	b.n	80126f0 <_printf_float+0x248>
 80128f6:	f04f 0800 	mov.w	r8, #0
 80128fa:	f104 0919 	add.w	r9, r4, #25
 80128fe:	e7f4      	b.n	80128ea <_printf_float+0x442>
 8012900:	2900      	cmp	r1, #0
 8012902:	f43f ae8b 	beq.w	801261c <_printf_float+0x174>
 8012906:	2300      	movs	r3, #0
 8012908:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801290c:	ab09      	add	r3, sp, #36	; 0x24
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	ec49 8b10 	vmov	d0, r8, r9
 8012914:	6022      	str	r2, [r4, #0]
 8012916:	f8cd a004 	str.w	sl, [sp, #4]
 801291a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801291e:	4628      	mov	r0, r5
 8012920:	f7ff fd2e 	bl	8012380 <__cvt>
 8012924:	4680      	mov	r8, r0
 8012926:	e648      	b.n	80125ba <_printf_float+0x112>

08012928 <_printf_common>:
 8012928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801292c:	4691      	mov	r9, r2
 801292e:	461f      	mov	r7, r3
 8012930:	688a      	ldr	r2, [r1, #8]
 8012932:	690b      	ldr	r3, [r1, #16]
 8012934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012938:	4293      	cmp	r3, r2
 801293a:	bfb8      	it	lt
 801293c:	4613      	movlt	r3, r2
 801293e:	f8c9 3000 	str.w	r3, [r9]
 8012942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012946:	4606      	mov	r6, r0
 8012948:	460c      	mov	r4, r1
 801294a:	b112      	cbz	r2, 8012952 <_printf_common+0x2a>
 801294c:	3301      	adds	r3, #1
 801294e:	f8c9 3000 	str.w	r3, [r9]
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	0699      	lsls	r1, r3, #26
 8012956:	bf42      	ittt	mi
 8012958:	f8d9 3000 	ldrmi.w	r3, [r9]
 801295c:	3302      	addmi	r3, #2
 801295e:	f8c9 3000 	strmi.w	r3, [r9]
 8012962:	6825      	ldr	r5, [r4, #0]
 8012964:	f015 0506 	ands.w	r5, r5, #6
 8012968:	d107      	bne.n	801297a <_printf_common+0x52>
 801296a:	f104 0a19 	add.w	sl, r4, #25
 801296e:	68e3      	ldr	r3, [r4, #12]
 8012970:	f8d9 2000 	ldr.w	r2, [r9]
 8012974:	1a9b      	subs	r3, r3, r2
 8012976:	42ab      	cmp	r3, r5
 8012978:	dc28      	bgt.n	80129cc <_printf_common+0xa4>
 801297a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801297e:	6822      	ldr	r2, [r4, #0]
 8012980:	3300      	adds	r3, #0
 8012982:	bf18      	it	ne
 8012984:	2301      	movne	r3, #1
 8012986:	0692      	lsls	r2, r2, #26
 8012988:	d42d      	bmi.n	80129e6 <_printf_common+0xbe>
 801298a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801298e:	4639      	mov	r1, r7
 8012990:	4630      	mov	r0, r6
 8012992:	47c0      	blx	r8
 8012994:	3001      	adds	r0, #1
 8012996:	d020      	beq.n	80129da <_printf_common+0xb2>
 8012998:	6823      	ldr	r3, [r4, #0]
 801299a:	68e5      	ldr	r5, [r4, #12]
 801299c:	f8d9 2000 	ldr.w	r2, [r9]
 80129a0:	f003 0306 	and.w	r3, r3, #6
 80129a4:	2b04      	cmp	r3, #4
 80129a6:	bf08      	it	eq
 80129a8:	1aad      	subeq	r5, r5, r2
 80129aa:	68a3      	ldr	r3, [r4, #8]
 80129ac:	6922      	ldr	r2, [r4, #16]
 80129ae:	bf0c      	ite	eq
 80129b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129b4:	2500      	movne	r5, #0
 80129b6:	4293      	cmp	r3, r2
 80129b8:	bfc4      	itt	gt
 80129ba:	1a9b      	subgt	r3, r3, r2
 80129bc:	18ed      	addgt	r5, r5, r3
 80129be:	f04f 0900 	mov.w	r9, #0
 80129c2:	341a      	adds	r4, #26
 80129c4:	454d      	cmp	r5, r9
 80129c6:	d11a      	bne.n	80129fe <_printf_common+0xd6>
 80129c8:	2000      	movs	r0, #0
 80129ca:	e008      	b.n	80129de <_printf_common+0xb6>
 80129cc:	2301      	movs	r3, #1
 80129ce:	4652      	mov	r2, sl
 80129d0:	4639      	mov	r1, r7
 80129d2:	4630      	mov	r0, r6
 80129d4:	47c0      	blx	r8
 80129d6:	3001      	adds	r0, #1
 80129d8:	d103      	bne.n	80129e2 <_printf_common+0xba>
 80129da:	f04f 30ff 	mov.w	r0, #4294967295
 80129de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129e2:	3501      	adds	r5, #1
 80129e4:	e7c3      	b.n	801296e <_printf_common+0x46>
 80129e6:	18e1      	adds	r1, r4, r3
 80129e8:	1c5a      	adds	r2, r3, #1
 80129ea:	2030      	movs	r0, #48	; 0x30
 80129ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129f0:	4422      	add	r2, r4
 80129f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129fa:	3302      	adds	r3, #2
 80129fc:	e7c5      	b.n	801298a <_printf_common+0x62>
 80129fe:	2301      	movs	r3, #1
 8012a00:	4622      	mov	r2, r4
 8012a02:	4639      	mov	r1, r7
 8012a04:	4630      	mov	r0, r6
 8012a06:	47c0      	blx	r8
 8012a08:	3001      	adds	r0, #1
 8012a0a:	d0e6      	beq.n	80129da <_printf_common+0xb2>
 8012a0c:	f109 0901 	add.w	r9, r9, #1
 8012a10:	e7d8      	b.n	80129c4 <_printf_common+0x9c>
	...

08012a14 <_printf_i>:
 8012a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	7e09      	ldrb	r1, [r1, #24]
 8012a20:	b085      	sub	sp, #20
 8012a22:	296e      	cmp	r1, #110	; 0x6e
 8012a24:	4617      	mov	r7, r2
 8012a26:	4606      	mov	r6, r0
 8012a28:	4698      	mov	r8, r3
 8012a2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a2c:	f000 80b3 	beq.w	8012b96 <_printf_i+0x182>
 8012a30:	d822      	bhi.n	8012a78 <_printf_i+0x64>
 8012a32:	2963      	cmp	r1, #99	; 0x63
 8012a34:	d036      	beq.n	8012aa4 <_printf_i+0x90>
 8012a36:	d80a      	bhi.n	8012a4e <_printf_i+0x3a>
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	f000 80b9 	beq.w	8012bb0 <_printf_i+0x19c>
 8012a3e:	2958      	cmp	r1, #88	; 0x58
 8012a40:	f000 8083 	beq.w	8012b4a <_printf_i+0x136>
 8012a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012a4c:	e032      	b.n	8012ab4 <_printf_i+0xa0>
 8012a4e:	2964      	cmp	r1, #100	; 0x64
 8012a50:	d001      	beq.n	8012a56 <_printf_i+0x42>
 8012a52:	2969      	cmp	r1, #105	; 0x69
 8012a54:	d1f6      	bne.n	8012a44 <_printf_i+0x30>
 8012a56:	6820      	ldr	r0, [r4, #0]
 8012a58:	6813      	ldr	r3, [r2, #0]
 8012a5a:	0605      	lsls	r5, r0, #24
 8012a5c:	f103 0104 	add.w	r1, r3, #4
 8012a60:	d52a      	bpl.n	8012ab8 <_printf_i+0xa4>
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	6011      	str	r1, [r2, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	da03      	bge.n	8012a72 <_printf_i+0x5e>
 8012a6a:	222d      	movs	r2, #45	; 0x2d
 8012a6c:	425b      	negs	r3, r3
 8012a6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012a72:	486f      	ldr	r0, [pc, #444]	; (8012c30 <_printf_i+0x21c>)
 8012a74:	220a      	movs	r2, #10
 8012a76:	e039      	b.n	8012aec <_printf_i+0xd8>
 8012a78:	2973      	cmp	r1, #115	; 0x73
 8012a7a:	f000 809d 	beq.w	8012bb8 <_printf_i+0x1a4>
 8012a7e:	d808      	bhi.n	8012a92 <_printf_i+0x7e>
 8012a80:	296f      	cmp	r1, #111	; 0x6f
 8012a82:	d020      	beq.n	8012ac6 <_printf_i+0xb2>
 8012a84:	2970      	cmp	r1, #112	; 0x70
 8012a86:	d1dd      	bne.n	8012a44 <_printf_i+0x30>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	f043 0320 	orr.w	r3, r3, #32
 8012a8e:	6023      	str	r3, [r4, #0]
 8012a90:	e003      	b.n	8012a9a <_printf_i+0x86>
 8012a92:	2975      	cmp	r1, #117	; 0x75
 8012a94:	d017      	beq.n	8012ac6 <_printf_i+0xb2>
 8012a96:	2978      	cmp	r1, #120	; 0x78
 8012a98:	d1d4      	bne.n	8012a44 <_printf_i+0x30>
 8012a9a:	2378      	movs	r3, #120	; 0x78
 8012a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012aa0:	4864      	ldr	r0, [pc, #400]	; (8012c34 <_printf_i+0x220>)
 8012aa2:	e055      	b.n	8012b50 <_printf_i+0x13c>
 8012aa4:	6813      	ldr	r3, [r2, #0]
 8012aa6:	1d19      	adds	r1, r3, #4
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	6011      	str	r1, [r2, #0]
 8012aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e08c      	b.n	8012bd2 <_printf_i+0x1be>
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	6011      	str	r1, [r2, #0]
 8012abc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ac0:	bf18      	it	ne
 8012ac2:	b21b      	sxthne	r3, r3
 8012ac4:	e7cf      	b.n	8012a66 <_printf_i+0x52>
 8012ac6:	6813      	ldr	r3, [r2, #0]
 8012ac8:	6825      	ldr	r5, [r4, #0]
 8012aca:	1d18      	adds	r0, r3, #4
 8012acc:	6010      	str	r0, [r2, #0]
 8012ace:	0628      	lsls	r0, r5, #24
 8012ad0:	d501      	bpl.n	8012ad6 <_printf_i+0xc2>
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	e002      	b.n	8012adc <_printf_i+0xc8>
 8012ad6:	0668      	lsls	r0, r5, #25
 8012ad8:	d5fb      	bpl.n	8012ad2 <_printf_i+0xbe>
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	4854      	ldr	r0, [pc, #336]	; (8012c30 <_printf_i+0x21c>)
 8012ade:	296f      	cmp	r1, #111	; 0x6f
 8012ae0:	bf14      	ite	ne
 8012ae2:	220a      	movne	r2, #10
 8012ae4:	2208      	moveq	r2, #8
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012aec:	6865      	ldr	r5, [r4, #4]
 8012aee:	60a5      	str	r5, [r4, #8]
 8012af0:	2d00      	cmp	r5, #0
 8012af2:	f2c0 8095 	blt.w	8012c20 <_printf_i+0x20c>
 8012af6:	6821      	ldr	r1, [r4, #0]
 8012af8:	f021 0104 	bic.w	r1, r1, #4
 8012afc:	6021      	str	r1, [r4, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d13d      	bne.n	8012b7e <_printf_i+0x16a>
 8012b02:	2d00      	cmp	r5, #0
 8012b04:	f040 808e 	bne.w	8012c24 <_printf_i+0x210>
 8012b08:	4665      	mov	r5, ip
 8012b0a:	2a08      	cmp	r2, #8
 8012b0c:	d10b      	bne.n	8012b26 <_printf_i+0x112>
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	07db      	lsls	r3, r3, #31
 8012b12:	d508      	bpl.n	8012b26 <_printf_i+0x112>
 8012b14:	6923      	ldr	r3, [r4, #16]
 8012b16:	6862      	ldr	r2, [r4, #4]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	bfde      	ittt	le
 8012b1c:	2330      	movle	r3, #48	; 0x30
 8012b1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b26:	ebac 0305 	sub.w	r3, ip, r5
 8012b2a:	6123      	str	r3, [r4, #16]
 8012b2c:	f8cd 8000 	str.w	r8, [sp]
 8012b30:	463b      	mov	r3, r7
 8012b32:	aa03      	add	r2, sp, #12
 8012b34:	4621      	mov	r1, r4
 8012b36:	4630      	mov	r0, r6
 8012b38:	f7ff fef6 	bl	8012928 <_printf_common>
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	d14d      	bne.n	8012bdc <_printf_i+0x1c8>
 8012b40:	f04f 30ff 	mov.w	r0, #4294967295
 8012b44:	b005      	add	sp, #20
 8012b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b4a:	4839      	ldr	r0, [pc, #228]	; (8012c30 <_printf_i+0x21c>)
 8012b4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012b50:	6813      	ldr	r3, [r2, #0]
 8012b52:	6821      	ldr	r1, [r4, #0]
 8012b54:	1d1d      	adds	r5, r3, #4
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	6015      	str	r5, [r2, #0]
 8012b5a:	060a      	lsls	r2, r1, #24
 8012b5c:	d50b      	bpl.n	8012b76 <_printf_i+0x162>
 8012b5e:	07ca      	lsls	r2, r1, #31
 8012b60:	bf44      	itt	mi
 8012b62:	f041 0120 	orrmi.w	r1, r1, #32
 8012b66:	6021      	strmi	r1, [r4, #0]
 8012b68:	b91b      	cbnz	r3, 8012b72 <_printf_i+0x15e>
 8012b6a:	6822      	ldr	r2, [r4, #0]
 8012b6c:	f022 0220 	bic.w	r2, r2, #32
 8012b70:	6022      	str	r2, [r4, #0]
 8012b72:	2210      	movs	r2, #16
 8012b74:	e7b7      	b.n	8012ae6 <_printf_i+0xd2>
 8012b76:	064d      	lsls	r5, r1, #25
 8012b78:	bf48      	it	mi
 8012b7a:	b29b      	uxthmi	r3, r3
 8012b7c:	e7ef      	b.n	8012b5e <_printf_i+0x14a>
 8012b7e:	4665      	mov	r5, ip
 8012b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b84:	fb02 3311 	mls	r3, r2, r1, r3
 8012b88:	5cc3      	ldrb	r3, [r0, r3]
 8012b8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012b8e:	460b      	mov	r3, r1
 8012b90:	2900      	cmp	r1, #0
 8012b92:	d1f5      	bne.n	8012b80 <_printf_i+0x16c>
 8012b94:	e7b9      	b.n	8012b0a <_printf_i+0xf6>
 8012b96:	6813      	ldr	r3, [r2, #0]
 8012b98:	6825      	ldr	r5, [r4, #0]
 8012b9a:	6961      	ldr	r1, [r4, #20]
 8012b9c:	1d18      	adds	r0, r3, #4
 8012b9e:	6010      	str	r0, [r2, #0]
 8012ba0:	0628      	lsls	r0, r5, #24
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	d501      	bpl.n	8012baa <_printf_i+0x196>
 8012ba6:	6019      	str	r1, [r3, #0]
 8012ba8:	e002      	b.n	8012bb0 <_printf_i+0x19c>
 8012baa:	066a      	lsls	r2, r5, #25
 8012bac:	d5fb      	bpl.n	8012ba6 <_printf_i+0x192>
 8012bae:	8019      	strh	r1, [r3, #0]
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	6123      	str	r3, [r4, #16]
 8012bb4:	4665      	mov	r5, ip
 8012bb6:	e7b9      	b.n	8012b2c <_printf_i+0x118>
 8012bb8:	6813      	ldr	r3, [r2, #0]
 8012bba:	1d19      	adds	r1, r3, #4
 8012bbc:	6011      	str	r1, [r2, #0]
 8012bbe:	681d      	ldr	r5, [r3, #0]
 8012bc0:	6862      	ldr	r2, [r4, #4]
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	4628      	mov	r0, r5
 8012bc6:	f7ed fb23 	bl	8000210 <memchr>
 8012bca:	b108      	cbz	r0, 8012bd0 <_printf_i+0x1bc>
 8012bcc:	1b40      	subs	r0, r0, r5
 8012bce:	6060      	str	r0, [r4, #4]
 8012bd0:	6863      	ldr	r3, [r4, #4]
 8012bd2:	6123      	str	r3, [r4, #16]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bda:	e7a7      	b.n	8012b2c <_printf_i+0x118>
 8012bdc:	6923      	ldr	r3, [r4, #16]
 8012bde:	462a      	mov	r2, r5
 8012be0:	4639      	mov	r1, r7
 8012be2:	4630      	mov	r0, r6
 8012be4:	47c0      	blx	r8
 8012be6:	3001      	adds	r0, #1
 8012be8:	d0aa      	beq.n	8012b40 <_printf_i+0x12c>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	079b      	lsls	r3, r3, #30
 8012bee:	d413      	bmi.n	8012c18 <_printf_i+0x204>
 8012bf0:	68e0      	ldr	r0, [r4, #12]
 8012bf2:	9b03      	ldr	r3, [sp, #12]
 8012bf4:	4298      	cmp	r0, r3
 8012bf6:	bfb8      	it	lt
 8012bf8:	4618      	movlt	r0, r3
 8012bfa:	e7a3      	b.n	8012b44 <_printf_i+0x130>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	464a      	mov	r2, r9
 8012c00:	4639      	mov	r1, r7
 8012c02:	4630      	mov	r0, r6
 8012c04:	47c0      	blx	r8
 8012c06:	3001      	adds	r0, #1
 8012c08:	d09a      	beq.n	8012b40 <_printf_i+0x12c>
 8012c0a:	3501      	adds	r5, #1
 8012c0c:	68e3      	ldr	r3, [r4, #12]
 8012c0e:	9a03      	ldr	r2, [sp, #12]
 8012c10:	1a9b      	subs	r3, r3, r2
 8012c12:	42ab      	cmp	r3, r5
 8012c14:	dcf2      	bgt.n	8012bfc <_printf_i+0x1e8>
 8012c16:	e7eb      	b.n	8012bf0 <_printf_i+0x1dc>
 8012c18:	2500      	movs	r5, #0
 8012c1a:	f104 0919 	add.w	r9, r4, #25
 8012c1e:	e7f5      	b.n	8012c0c <_printf_i+0x1f8>
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d1ac      	bne.n	8012b7e <_printf_i+0x16a>
 8012c24:	7803      	ldrb	r3, [r0, #0]
 8012c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c2e:	e76c      	b.n	8012b0a <_printf_i+0xf6>
 8012c30:	080175d4 	.word	0x080175d4
 8012c34:	080175e5 	.word	0x080175e5

08012c38 <_scanf_float>:
 8012c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	469a      	mov	sl, r3
 8012c3e:	688b      	ldr	r3, [r1, #8]
 8012c40:	4616      	mov	r6, r2
 8012c42:	1e5a      	subs	r2, r3, #1
 8012c44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012c48:	b087      	sub	sp, #28
 8012c4a:	bf83      	ittte	hi
 8012c4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012c50:	189b      	addhi	r3, r3, r2
 8012c52:	9301      	strhi	r3, [sp, #4]
 8012c54:	2300      	movls	r3, #0
 8012c56:	bf86      	itte	hi
 8012c58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012c5c:	608b      	strhi	r3, [r1, #8]
 8012c5e:	9301      	strls	r3, [sp, #4]
 8012c60:	680b      	ldr	r3, [r1, #0]
 8012c62:	4688      	mov	r8, r1
 8012c64:	f04f 0b00 	mov.w	fp, #0
 8012c68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012c6c:	f848 3b1c 	str.w	r3, [r8], #28
 8012c70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012c74:	4607      	mov	r7, r0
 8012c76:	460c      	mov	r4, r1
 8012c78:	4645      	mov	r5, r8
 8012c7a:	465a      	mov	r2, fp
 8012c7c:	46d9      	mov	r9, fp
 8012c7e:	f8cd b008 	str.w	fp, [sp, #8]
 8012c82:	68a1      	ldr	r1, [r4, #8]
 8012c84:	b181      	cbz	r1, 8012ca8 <_scanf_float+0x70>
 8012c86:	6833      	ldr	r3, [r6, #0]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b49      	cmp	r3, #73	; 0x49
 8012c8c:	d071      	beq.n	8012d72 <_scanf_float+0x13a>
 8012c8e:	d84d      	bhi.n	8012d2c <_scanf_float+0xf4>
 8012c90:	2b39      	cmp	r3, #57	; 0x39
 8012c92:	d840      	bhi.n	8012d16 <_scanf_float+0xde>
 8012c94:	2b31      	cmp	r3, #49	; 0x31
 8012c96:	f080 8088 	bcs.w	8012daa <_scanf_float+0x172>
 8012c9a:	2b2d      	cmp	r3, #45	; 0x2d
 8012c9c:	f000 8090 	beq.w	8012dc0 <_scanf_float+0x188>
 8012ca0:	d815      	bhi.n	8012cce <_scanf_float+0x96>
 8012ca2:	2b2b      	cmp	r3, #43	; 0x2b
 8012ca4:	f000 808c 	beq.w	8012dc0 <_scanf_float+0x188>
 8012ca8:	f1b9 0f00 	cmp.w	r9, #0
 8012cac:	d003      	beq.n	8012cb6 <_scanf_float+0x7e>
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cb4:	6023      	str	r3, [r4, #0]
 8012cb6:	3a01      	subs	r2, #1
 8012cb8:	2a01      	cmp	r2, #1
 8012cba:	f200 80ea 	bhi.w	8012e92 <_scanf_float+0x25a>
 8012cbe:	4545      	cmp	r5, r8
 8012cc0:	f200 80dc 	bhi.w	8012e7c <_scanf_float+0x244>
 8012cc4:	2601      	movs	r6, #1
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	b007      	add	sp, #28
 8012cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cce:	2b2e      	cmp	r3, #46	; 0x2e
 8012cd0:	f000 809f 	beq.w	8012e12 <_scanf_float+0x1da>
 8012cd4:	2b30      	cmp	r3, #48	; 0x30
 8012cd6:	d1e7      	bne.n	8012ca8 <_scanf_float+0x70>
 8012cd8:	6820      	ldr	r0, [r4, #0]
 8012cda:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012cde:	d064      	beq.n	8012daa <_scanf_float+0x172>
 8012ce0:	9b01      	ldr	r3, [sp, #4]
 8012ce2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012ce6:	6020      	str	r0, [r4, #0]
 8012ce8:	f109 0901 	add.w	r9, r9, #1
 8012cec:	b11b      	cbz	r3, 8012cf6 <_scanf_float+0xbe>
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	3101      	adds	r1, #1
 8012cf2:	9301      	str	r3, [sp, #4]
 8012cf4:	60a1      	str	r1, [r4, #8]
 8012cf6:	68a3      	ldr	r3, [r4, #8]
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	60a3      	str	r3, [r4, #8]
 8012cfc:	6923      	ldr	r3, [r4, #16]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	6123      	str	r3, [r4, #16]
 8012d02:	6873      	ldr	r3, [r6, #4]
 8012d04:	3b01      	subs	r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	6073      	str	r3, [r6, #4]
 8012d0a:	f340 80ac 	ble.w	8012e66 <_scanf_float+0x22e>
 8012d0e:	6833      	ldr	r3, [r6, #0]
 8012d10:	3301      	adds	r3, #1
 8012d12:	6033      	str	r3, [r6, #0]
 8012d14:	e7b5      	b.n	8012c82 <_scanf_float+0x4a>
 8012d16:	2b45      	cmp	r3, #69	; 0x45
 8012d18:	f000 8085 	beq.w	8012e26 <_scanf_float+0x1ee>
 8012d1c:	2b46      	cmp	r3, #70	; 0x46
 8012d1e:	d06a      	beq.n	8012df6 <_scanf_float+0x1be>
 8012d20:	2b41      	cmp	r3, #65	; 0x41
 8012d22:	d1c1      	bne.n	8012ca8 <_scanf_float+0x70>
 8012d24:	2a01      	cmp	r2, #1
 8012d26:	d1bf      	bne.n	8012ca8 <_scanf_float+0x70>
 8012d28:	2202      	movs	r2, #2
 8012d2a:	e046      	b.n	8012dba <_scanf_float+0x182>
 8012d2c:	2b65      	cmp	r3, #101	; 0x65
 8012d2e:	d07a      	beq.n	8012e26 <_scanf_float+0x1ee>
 8012d30:	d818      	bhi.n	8012d64 <_scanf_float+0x12c>
 8012d32:	2b54      	cmp	r3, #84	; 0x54
 8012d34:	d066      	beq.n	8012e04 <_scanf_float+0x1cc>
 8012d36:	d811      	bhi.n	8012d5c <_scanf_float+0x124>
 8012d38:	2b4e      	cmp	r3, #78	; 0x4e
 8012d3a:	d1b5      	bne.n	8012ca8 <_scanf_float+0x70>
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	d146      	bne.n	8012dce <_scanf_float+0x196>
 8012d40:	f1b9 0f00 	cmp.w	r9, #0
 8012d44:	d145      	bne.n	8012dd2 <_scanf_float+0x19a>
 8012d46:	6821      	ldr	r1, [r4, #0]
 8012d48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012d4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012d50:	d13f      	bne.n	8012dd2 <_scanf_float+0x19a>
 8012d52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d56:	6021      	str	r1, [r4, #0]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	e02e      	b.n	8012dba <_scanf_float+0x182>
 8012d5c:	2b59      	cmp	r3, #89	; 0x59
 8012d5e:	d01e      	beq.n	8012d9e <_scanf_float+0x166>
 8012d60:	2b61      	cmp	r3, #97	; 0x61
 8012d62:	e7de      	b.n	8012d22 <_scanf_float+0xea>
 8012d64:	2b6e      	cmp	r3, #110	; 0x6e
 8012d66:	d0e9      	beq.n	8012d3c <_scanf_float+0x104>
 8012d68:	d815      	bhi.n	8012d96 <_scanf_float+0x15e>
 8012d6a:	2b66      	cmp	r3, #102	; 0x66
 8012d6c:	d043      	beq.n	8012df6 <_scanf_float+0x1be>
 8012d6e:	2b69      	cmp	r3, #105	; 0x69
 8012d70:	d19a      	bne.n	8012ca8 <_scanf_float+0x70>
 8012d72:	f1bb 0f00 	cmp.w	fp, #0
 8012d76:	d138      	bne.n	8012dea <_scanf_float+0x1b2>
 8012d78:	f1b9 0f00 	cmp.w	r9, #0
 8012d7c:	d197      	bne.n	8012cae <_scanf_float+0x76>
 8012d7e:	6821      	ldr	r1, [r4, #0]
 8012d80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012d84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012d88:	d195      	bne.n	8012cb6 <_scanf_float+0x7e>
 8012d8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d8e:	6021      	str	r1, [r4, #0]
 8012d90:	f04f 0b01 	mov.w	fp, #1
 8012d94:	e011      	b.n	8012dba <_scanf_float+0x182>
 8012d96:	2b74      	cmp	r3, #116	; 0x74
 8012d98:	d034      	beq.n	8012e04 <_scanf_float+0x1cc>
 8012d9a:	2b79      	cmp	r3, #121	; 0x79
 8012d9c:	d184      	bne.n	8012ca8 <_scanf_float+0x70>
 8012d9e:	f1bb 0f07 	cmp.w	fp, #7
 8012da2:	d181      	bne.n	8012ca8 <_scanf_float+0x70>
 8012da4:	f04f 0b08 	mov.w	fp, #8
 8012da8:	e007      	b.n	8012dba <_scanf_float+0x182>
 8012daa:	eb12 0f0b 	cmn.w	r2, fp
 8012dae:	f47f af7b 	bne.w	8012ca8 <_scanf_float+0x70>
 8012db2:	6821      	ldr	r1, [r4, #0]
 8012db4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012db8:	6021      	str	r1, [r4, #0]
 8012dba:	702b      	strb	r3, [r5, #0]
 8012dbc:	3501      	adds	r5, #1
 8012dbe:	e79a      	b.n	8012cf6 <_scanf_float+0xbe>
 8012dc0:	6821      	ldr	r1, [r4, #0]
 8012dc2:	0608      	lsls	r0, r1, #24
 8012dc4:	f57f af70 	bpl.w	8012ca8 <_scanf_float+0x70>
 8012dc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012dcc:	e7f4      	b.n	8012db8 <_scanf_float+0x180>
 8012dce:	2a02      	cmp	r2, #2
 8012dd0:	d047      	beq.n	8012e62 <_scanf_float+0x22a>
 8012dd2:	f1bb 0f01 	cmp.w	fp, #1
 8012dd6:	d003      	beq.n	8012de0 <_scanf_float+0x1a8>
 8012dd8:	f1bb 0f04 	cmp.w	fp, #4
 8012ddc:	f47f af64 	bne.w	8012ca8 <_scanf_float+0x70>
 8012de0:	f10b 0b01 	add.w	fp, fp, #1
 8012de4:	fa5f fb8b 	uxtb.w	fp, fp
 8012de8:	e7e7      	b.n	8012dba <_scanf_float+0x182>
 8012dea:	f1bb 0f03 	cmp.w	fp, #3
 8012dee:	d0f7      	beq.n	8012de0 <_scanf_float+0x1a8>
 8012df0:	f1bb 0f05 	cmp.w	fp, #5
 8012df4:	e7f2      	b.n	8012ddc <_scanf_float+0x1a4>
 8012df6:	f1bb 0f02 	cmp.w	fp, #2
 8012dfa:	f47f af55 	bne.w	8012ca8 <_scanf_float+0x70>
 8012dfe:	f04f 0b03 	mov.w	fp, #3
 8012e02:	e7da      	b.n	8012dba <_scanf_float+0x182>
 8012e04:	f1bb 0f06 	cmp.w	fp, #6
 8012e08:	f47f af4e 	bne.w	8012ca8 <_scanf_float+0x70>
 8012e0c:	f04f 0b07 	mov.w	fp, #7
 8012e10:	e7d3      	b.n	8012dba <_scanf_float+0x182>
 8012e12:	6821      	ldr	r1, [r4, #0]
 8012e14:	0588      	lsls	r0, r1, #22
 8012e16:	f57f af47 	bpl.w	8012ca8 <_scanf_float+0x70>
 8012e1a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012e1e:	6021      	str	r1, [r4, #0]
 8012e20:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e24:	e7c9      	b.n	8012dba <_scanf_float+0x182>
 8012e26:	6821      	ldr	r1, [r4, #0]
 8012e28:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012e2c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012e30:	d006      	beq.n	8012e40 <_scanf_float+0x208>
 8012e32:	0548      	lsls	r0, r1, #21
 8012e34:	f57f af38 	bpl.w	8012ca8 <_scanf_float+0x70>
 8012e38:	f1b9 0f00 	cmp.w	r9, #0
 8012e3c:	f43f af3b 	beq.w	8012cb6 <_scanf_float+0x7e>
 8012e40:	0588      	lsls	r0, r1, #22
 8012e42:	bf58      	it	pl
 8012e44:	9802      	ldrpl	r0, [sp, #8]
 8012e46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e4a:	bf58      	it	pl
 8012e4c:	eba9 0000 	subpl.w	r0, r9, r0
 8012e50:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012e54:	bf58      	it	pl
 8012e56:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012e5a:	6021      	str	r1, [r4, #0]
 8012e5c:	f04f 0900 	mov.w	r9, #0
 8012e60:	e7ab      	b.n	8012dba <_scanf_float+0x182>
 8012e62:	2203      	movs	r2, #3
 8012e64:	e7a9      	b.n	8012dba <_scanf_float+0x182>
 8012e66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e6a:	9205      	str	r2, [sp, #20]
 8012e6c:	4631      	mov	r1, r6
 8012e6e:	4638      	mov	r0, r7
 8012e70:	4798      	blx	r3
 8012e72:	9a05      	ldr	r2, [sp, #20]
 8012e74:	2800      	cmp	r0, #0
 8012e76:	f43f af04 	beq.w	8012c82 <_scanf_float+0x4a>
 8012e7a:	e715      	b.n	8012ca8 <_scanf_float+0x70>
 8012e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e84:	4632      	mov	r2, r6
 8012e86:	4638      	mov	r0, r7
 8012e88:	4798      	blx	r3
 8012e8a:	6923      	ldr	r3, [r4, #16]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	6123      	str	r3, [r4, #16]
 8012e90:	e715      	b.n	8012cbe <_scanf_float+0x86>
 8012e92:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012e96:	2b06      	cmp	r3, #6
 8012e98:	d80a      	bhi.n	8012eb0 <_scanf_float+0x278>
 8012e9a:	f1bb 0f02 	cmp.w	fp, #2
 8012e9e:	d968      	bls.n	8012f72 <_scanf_float+0x33a>
 8012ea0:	f1ab 0b03 	sub.w	fp, fp, #3
 8012ea4:	fa5f fb8b 	uxtb.w	fp, fp
 8012ea8:	eba5 0b0b 	sub.w	fp, r5, fp
 8012eac:	455d      	cmp	r5, fp
 8012eae:	d14b      	bne.n	8012f48 <_scanf_float+0x310>
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	05da      	lsls	r2, r3, #23
 8012eb4:	d51f      	bpl.n	8012ef6 <_scanf_float+0x2be>
 8012eb6:	055b      	lsls	r3, r3, #21
 8012eb8:	d468      	bmi.n	8012f8c <_scanf_float+0x354>
 8012eba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012ebe:	6923      	ldr	r3, [r4, #16]
 8012ec0:	2965      	cmp	r1, #101	; 0x65
 8012ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ec6:	f105 3bff 	add.w	fp, r5, #4294967295
 8012eca:	6123      	str	r3, [r4, #16]
 8012ecc:	d00d      	beq.n	8012eea <_scanf_float+0x2b2>
 8012ece:	2945      	cmp	r1, #69	; 0x45
 8012ed0:	d00b      	beq.n	8012eea <_scanf_float+0x2b2>
 8012ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	4638      	mov	r0, r7
 8012eda:	4798      	blx	r3
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	f1a5 0b02 	sub.w	fp, r5, #2
 8012ee8:	6123      	str	r3, [r4, #16]
 8012eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012eee:	4632      	mov	r2, r6
 8012ef0:	4638      	mov	r0, r7
 8012ef2:	4798      	blx	r3
 8012ef4:	465d      	mov	r5, fp
 8012ef6:	6826      	ldr	r6, [r4, #0]
 8012ef8:	f016 0610 	ands.w	r6, r6, #16
 8012efc:	d17a      	bne.n	8012ff4 <_scanf_float+0x3bc>
 8012efe:	702e      	strb	r6, [r5, #0]
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f0a:	d142      	bne.n	8012f92 <_scanf_float+0x35a>
 8012f0c:	9b02      	ldr	r3, [sp, #8]
 8012f0e:	eba9 0303 	sub.w	r3, r9, r3
 8012f12:	425a      	negs	r2, r3
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d149      	bne.n	8012fac <_scanf_float+0x374>
 8012f18:	2200      	movs	r2, #0
 8012f1a:	4641      	mov	r1, r8
 8012f1c:	4638      	mov	r0, r7
 8012f1e:	f000 ffcb 	bl	8013eb8 <_strtod_r>
 8012f22:	6825      	ldr	r5, [r4, #0]
 8012f24:	f8da 3000 	ldr.w	r3, [sl]
 8012f28:	f015 0f02 	tst.w	r5, #2
 8012f2c:	f103 0204 	add.w	r2, r3, #4
 8012f30:	ec59 8b10 	vmov	r8, r9, d0
 8012f34:	f8ca 2000 	str.w	r2, [sl]
 8012f38:	d043      	beq.n	8012fc2 <_scanf_float+0x38a>
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	e9c3 8900 	strd	r8, r9, [r3]
 8012f40:	68e3      	ldr	r3, [r4, #12]
 8012f42:	3301      	adds	r3, #1
 8012f44:	60e3      	str	r3, [r4, #12]
 8012f46:	e6be      	b.n	8012cc6 <_scanf_float+0x8e>
 8012f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f50:	4632      	mov	r2, r6
 8012f52:	4638      	mov	r0, r7
 8012f54:	4798      	blx	r3
 8012f56:	6923      	ldr	r3, [r4, #16]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	6123      	str	r3, [r4, #16]
 8012f5c:	e7a6      	b.n	8012eac <_scanf_float+0x274>
 8012f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f66:	4632      	mov	r2, r6
 8012f68:	4638      	mov	r0, r7
 8012f6a:	4798      	blx	r3
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	6123      	str	r3, [r4, #16]
 8012f72:	4545      	cmp	r5, r8
 8012f74:	d8f3      	bhi.n	8012f5e <_scanf_float+0x326>
 8012f76:	e6a5      	b.n	8012cc4 <_scanf_float+0x8c>
 8012f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f80:	4632      	mov	r2, r6
 8012f82:	4638      	mov	r0, r7
 8012f84:	4798      	blx	r3
 8012f86:	6923      	ldr	r3, [r4, #16]
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	6123      	str	r3, [r4, #16]
 8012f8c:	4545      	cmp	r5, r8
 8012f8e:	d8f3      	bhi.n	8012f78 <_scanf_float+0x340>
 8012f90:	e698      	b.n	8012cc4 <_scanf_float+0x8c>
 8012f92:	9b03      	ldr	r3, [sp, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d0bf      	beq.n	8012f18 <_scanf_float+0x2e0>
 8012f98:	9904      	ldr	r1, [sp, #16]
 8012f9a:	230a      	movs	r3, #10
 8012f9c:	4632      	mov	r2, r6
 8012f9e:	3101      	adds	r1, #1
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f001 f815 	bl	8013fd0 <_strtol_r>
 8012fa6:	9b03      	ldr	r3, [sp, #12]
 8012fa8:	9d04      	ldr	r5, [sp, #16]
 8012faa:	1ac2      	subs	r2, r0, r3
 8012fac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012fb0:	429d      	cmp	r5, r3
 8012fb2:	bf28      	it	cs
 8012fb4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012fb8:	490f      	ldr	r1, [pc, #60]	; (8012ff8 <_scanf_float+0x3c0>)
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f000 f8d4 	bl	8013168 <siprintf>
 8012fc0:	e7aa      	b.n	8012f18 <_scanf_float+0x2e0>
 8012fc2:	f015 0504 	ands.w	r5, r5, #4
 8012fc6:	d1b8      	bne.n	8012f3a <_scanf_float+0x302>
 8012fc8:	681f      	ldr	r7, [r3, #0]
 8012fca:	ee10 2a10 	vmov	r2, s0
 8012fce:	464b      	mov	r3, r9
 8012fd0:	ee10 0a10 	vmov	r0, s0
 8012fd4:	4649      	mov	r1, r9
 8012fd6:	f7ed fdc1 	bl	8000b5c <__aeabi_dcmpun>
 8012fda:	b128      	cbz	r0, 8012fe8 <_scanf_float+0x3b0>
 8012fdc:	4628      	mov	r0, r5
 8012fde:	f000 f889 	bl	80130f4 <nanf>
 8012fe2:	ed87 0a00 	vstr	s0, [r7]
 8012fe6:	e7ab      	b.n	8012f40 <_scanf_float+0x308>
 8012fe8:	4640      	mov	r0, r8
 8012fea:	4649      	mov	r1, r9
 8012fec:	f7ed fe14 	bl	8000c18 <__aeabi_d2f>
 8012ff0:	6038      	str	r0, [r7, #0]
 8012ff2:	e7a5      	b.n	8012f40 <_scanf_float+0x308>
 8012ff4:	2600      	movs	r6, #0
 8012ff6:	e666      	b.n	8012cc6 <_scanf_float+0x8e>
 8012ff8:	080175f6 	.word	0x080175f6

08012ffc <iprintf>:
 8012ffc:	b40f      	push	{r0, r1, r2, r3}
 8012ffe:	4b0a      	ldr	r3, [pc, #40]	; (8013028 <iprintf+0x2c>)
 8013000:	b513      	push	{r0, r1, r4, lr}
 8013002:	681c      	ldr	r4, [r3, #0]
 8013004:	b124      	cbz	r4, 8013010 <iprintf+0x14>
 8013006:	69a3      	ldr	r3, [r4, #24]
 8013008:	b913      	cbnz	r3, 8013010 <iprintf+0x14>
 801300a:	4620      	mov	r0, r4
 801300c:	f002 f828 	bl	8015060 <__sinit>
 8013010:	ab05      	add	r3, sp, #20
 8013012:	9a04      	ldr	r2, [sp, #16]
 8013014:	68a1      	ldr	r1, [r4, #8]
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	4620      	mov	r0, r4
 801301a:	f003 fc69 	bl	80168f0 <_vfiprintf_r>
 801301e:	b002      	add	sp, #8
 8013020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013024:	b004      	add	sp, #16
 8013026:	4770      	bx	lr
 8013028:	2000000c 	.word	0x2000000c

0801302c <_puts_r>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	460e      	mov	r6, r1
 8013030:	4605      	mov	r5, r0
 8013032:	b118      	cbz	r0, 801303c <_puts_r+0x10>
 8013034:	6983      	ldr	r3, [r0, #24]
 8013036:	b90b      	cbnz	r3, 801303c <_puts_r+0x10>
 8013038:	f002 f812 	bl	8015060 <__sinit>
 801303c:	69ab      	ldr	r3, [r5, #24]
 801303e:	68ac      	ldr	r4, [r5, #8]
 8013040:	b913      	cbnz	r3, 8013048 <_puts_r+0x1c>
 8013042:	4628      	mov	r0, r5
 8013044:	f002 f80c 	bl	8015060 <__sinit>
 8013048:	4b23      	ldr	r3, [pc, #140]	; (80130d8 <_puts_r+0xac>)
 801304a:	429c      	cmp	r4, r3
 801304c:	d117      	bne.n	801307e <_puts_r+0x52>
 801304e:	686c      	ldr	r4, [r5, #4]
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	071b      	lsls	r3, r3, #28
 8013054:	d51d      	bpl.n	8013092 <_puts_r+0x66>
 8013056:	6923      	ldr	r3, [r4, #16]
 8013058:	b1db      	cbz	r3, 8013092 <_puts_r+0x66>
 801305a:	3e01      	subs	r6, #1
 801305c:	68a3      	ldr	r3, [r4, #8]
 801305e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013062:	3b01      	subs	r3, #1
 8013064:	60a3      	str	r3, [r4, #8]
 8013066:	b9e9      	cbnz	r1, 80130a4 <_puts_r+0x78>
 8013068:	2b00      	cmp	r3, #0
 801306a:	da2e      	bge.n	80130ca <_puts_r+0x9e>
 801306c:	4622      	mov	r2, r4
 801306e:	210a      	movs	r1, #10
 8013070:	4628      	mov	r0, r5
 8013072:	f000 ffdf 	bl	8014034 <__swbuf_r>
 8013076:	3001      	adds	r0, #1
 8013078:	d011      	beq.n	801309e <_puts_r+0x72>
 801307a:	200a      	movs	r0, #10
 801307c:	e011      	b.n	80130a2 <_puts_r+0x76>
 801307e:	4b17      	ldr	r3, [pc, #92]	; (80130dc <_puts_r+0xb0>)
 8013080:	429c      	cmp	r4, r3
 8013082:	d101      	bne.n	8013088 <_puts_r+0x5c>
 8013084:	68ac      	ldr	r4, [r5, #8]
 8013086:	e7e3      	b.n	8013050 <_puts_r+0x24>
 8013088:	4b15      	ldr	r3, [pc, #84]	; (80130e0 <_puts_r+0xb4>)
 801308a:	429c      	cmp	r4, r3
 801308c:	bf08      	it	eq
 801308e:	68ec      	ldreq	r4, [r5, #12]
 8013090:	e7de      	b.n	8013050 <_puts_r+0x24>
 8013092:	4621      	mov	r1, r4
 8013094:	4628      	mov	r0, r5
 8013096:	f001 f831 	bl	80140fc <__swsetup_r>
 801309a:	2800      	cmp	r0, #0
 801309c:	d0dd      	beq.n	801305a <_puts_r+0x2e>
 801309e:	f04f 30ff 	mov.w	r0, #4294967295
 80130a2:	bd70      	pop	{r4, r5, r6, pc}
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	da04      	bge.n	80130b2 <_puts_r+0x86>
 80130a8:	69a2      	ldr	r2, [r4, #24]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	dc06      	bgt.n	80130bc <_puts_r+0x90>
 80130ae:	290a      	cmp	r1, #10
 80130b0:	d004      	beq.n	80130bc <_puts_r+0x90>
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	1c5a      	adds	r2, r3, #1
 80130b6:	6022      	str	r2, [r4, #0]
 80130b8:	7019      	strb	r1, [r3, #0]
 80130ba:	e7cf      	b.n	801305c <_puts_r+0x30>
 80130bc:	4622      	mov	r2, r4
 80130be:	4628      	mov	r0, r5
 80130c0:	f000 ffb8 	bl	8014034 <__swbuf_r>
 80130c4:	3001      	adds	r0, #1
 80130c6:	d1c9      	bne.n	801305c <_puts_r+0x30>
 80130c8:	e7e9      	b.n	801309e <_puts_r+0x72>
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	200a      	movs	r0, #10
 80130ce:	1c5a      	adds	r2, r3, #1
 80130d0:	6022      	str	r2, [r4, #0]
 80130d2:	7018      	strb	r0, [r3, #0]
 80130d4:	e7e5      	b.n	80130a2 <_puts_r+0x76>
 80130d6:	bf00      	nop
 80130d8:	08017680 	.word	0x08017680
 80130dc:	080176a0 	.word	0x080176a0
 80130e0:	08017660 	.word	0x08017660

080130e4 <puts>:
 80130e4:	4b02      	ldr	r3, [pc, #8]	; (80130f0 <puts+0xc>)
 80130e6:	4601      	mov	r1, r0
 80130e8:	6818      	ldr	r0, [r3, #0]
 80130ea:	f7ff bf9f 	b.w	801302c <_puts_r>
 80130ee:	bf00      	nop
 80130f0:	2000000c 	.word	0x2000000c

080130f4 <nanf>:
 80130f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80130fc <nanf+0x8>
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	7fc00000 	.word	0x7fc00000

08013100 <sniprintf>:
 8013100:	b40c      	push	{r2, r3}
 8013102:	b530      	push	{r4, r5, lr}
 8013104:	4b17      	ldr	r3, [pc, #92]	; (8013164 <sniprintf+0x64>)
 8013106:	1e0c      	subs	r4, r1, #0
 8013108:	b09d      	sub	sp, #116	; 0x74
 801310a:	681d      	ldr	r5, [r3, #0]
 801310c:	da08      	bge.n	8013120 <sniprintf+0x20>
 801310e:	238b      	movs	r3, #139	; 0x8b
 8013110:	602b      	str	r3, [r5, #0]
 8013112:	f04f 30ff 	mov.w	r0, #4294967295
 8013116:	b01d      	add	sp, #116	; 0x74
 8013118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801311c:	b002      	add	sp, #8
 801311e:	4770      	bx	lr
 8013120:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013124:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013128:	bf14      	ite	ne
 801312a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801312e:	4623      	moveq	r3, r4
 8013130:	9304      	str	r3, [sp, #16]
 8013132:	9307      	str	r3, [sp, #28]
 8013134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013138:	9002      	str	r0, [sp, #8]
 801313a:	9006      	str	r0, [sp, #24]
 801313c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013140:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013142:	ab21      	add	r3, sp, #132	; 0x84
 8013144:	a902      	add	r1, sp, #8
 8013146:	4628      	mov	r0, r5
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	f003 f905 	bl	8016358 <_svfiprintf_r>
 801314e:	1c43      	adds	r3, r0, #1
 8013150:	bfbc      	itt	lt
 8013152:	238b      	movlt	r3, #139	; 0x8b
 8013154:	602b      	strlt	r3, [r5, #0]
 8013156:	2c00      	cmp	r4, #0
 8013158:	d0dd      	beq.n	8013116 <sniprintf+0x16>
 801315a:	9b02      	ldr	r3, [sp, #8]
 801315c:	2200      	movs	r2, #0
 801315e:	701a      	strb	r2, [r3, #0]
 8013160:	e7d9      	b.n	8013116 <sniprintf+0x16>
 8013162:	bf00      	nop
 8013164:	2000000c 	.word	0x2000000c

08013168 <siprintf>:
 8013168:	b40e      	push	{r1, r2, r3}
 801316a:	b500      	push	{lr}
 801316c:	b09c      	sub	sp, #112	; 0x70
 801316e:	ab1d      	add	r3, sp, #116	; 0x74
 8013170:	9002      	str	r0, [sp, #8]
 8013172:	9006      	str	r0, [sp, #24]
 8013174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013178:	4809      	ldr	r0, [pc, #36]	; (80131a0 <siprintf+0x38>)
 801317a:	9107      	str	r1, [sp, #28]
 801317c:	9104      	str	r1, [sp, #16]
 801317e:	4909      	ldr	r1, [pc, #36]	; (80131a4 <siprintf+0x3c>)
 8013180:	f853 2b04 	ldr.w	r2, [r3], #4
 8013184:	9105      	str	r1, [sp, #20]
 8013186:	6800      	ldr	r0, [r0, #0]
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	a902      	add	r1, sp, #8
 801318c:	f003 f8e4 	bl	8016358 <_svfiprintf_r>
 8013190:	9b02      	ldr	r3, [sp, #8]
 8013192:	2200      	movs	r2, #0
 8013194:	701a      	strb	r2, [r3, #0]
 8013196:	b01c      	add	sp, #112	; 0x70
 8013198:	f85d eb04 	ldr.w	lr, [sp], #4
 801319c:	b003      	add	sp, #12
 801319e:	4770      	bx	lr
 80131a0:	2000000c 	.word	0x2000000c
 80131a4:	ffff0208 	.word	0xffff0208

080131a8 <siscanf>:
 80131a8:	b40e      	push	{r1, r2, r3}
 80131aa:	b530      	push	{r4, r5, lr}
 80131ac:	b09c      	sub	sp, #112	; 0x70
 80131ae:	ac1f      	add	r4, sp, #124	; 0x7c
 80131b0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80131b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80131b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80131bc:	9002      	str	r0, [sp, #8]
 80131be:	9006      	str	r0, [sp, #24]
 80131c0:	f7ed f81e 	bl	8000200 <strlen>
 80131c4:	4b0b      	ldr	r3, [pc, #44]	; (80131f4 <siscanf+0x4c>)
 80131c6:	9003      	str	r0, [sp, #12]
 80131c8:	9007      	str	r0, [sp, #28]
 80131ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80131cc:	480a      	ldr	r0, [pc, #40]	; (80131f8 <siscanf+0x50>)
 80131ce:	9401      	str	r4, [sp, #4]
 80131d0:	2300      	movs	r3, #0
 80131d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80131d4:	9314      	str	r3, [sp, #80]	; 0x50
 80131d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80131de:	462a      	mov	r2, r5
 80131e0:	4623      	mov	r3, r4
 80131e2:	a902      	add	r1, sp, #8
 80131e4:	6800      	ldr	r0, [r0, #0]
 80131e6:	f003 fa09 	bl	80165fc <__ssvfiscanf_r>
 80131ea:	b01c      	add	sp, #112	; 0x70
 80131ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131f0:	b003      	add	sp, #12
 80131f2:	4770      	bx	lr
 80131f4:	0801321f 	.word	0x0801321f
 80131f8:	2000000c 	.word	0x2000000c

080131fc <__sread>:
 80131fc:	b510      	push	{r4, lr}
 80131fe:	460c      	mov	r4, r1
 8013200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013204:	f003 fde2 	bl	8016dcc <_read_r>
 8013208:	2800      	cmp	r0, #0
 801320a:	bfab      	itete	ge
 801320c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801320e:	89a3      	ldrhlt	r3, [r4, #12]
 8013210:	181b      	addge	r3, r3, r0
 8013212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013216:	bfac      	ite	ge
 8013218:	6563      	strge	r3, [r4, #84]	; 0x54
 801321a:	81a3      	strhlt	r3, [r4, #12]
 801321c:	bd10      	pop	{r4, pc}

0801321e <__seofread>:
 801321e:	2000      	movs	r0, #0
 8013220:	4770      	bx	lr

08013222 <__swrite>:
 8013222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013226:	461f      	mov	r7, r3
 8013228:	898b      	ldrh	r3, [r1, #12]
 801322a:	05db      	lsls	r3, r3, #23
 801322c:	4605      	mov	r5, r0
 801322e:	460c      	mov	r4, r1
 8013230:	4616      	mov	r6, r2
 8013232:	d505      	bpl.n	8013240 <__swrite+0x1e>
 8013234:	2302      	movs	r3, #2
 8013236:	2200      	movs	r2, #0
 8013238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801323c:	f002 fae2 	bl	8015804 <_lseek_r>
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801324a:	81a3      	strh	r3, [r4, #12]
 801324c:	4632      	mov	r2, r6
 801324e:	463b      	mov	r3, r7
 8013250:	4628      	mov	r0, r5
 8013252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013256:	f000 bf3f 	b.w	80140d8 <_write_r>

0801325a <__sseek>:
 801325a:	b510      	push	{r4, lr}
 801325c:	460c      	mov	r4, r1
 801325e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013262:	f002 facf 	bl	8015804 <_lseek_r>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	bf15      	itete	ne
 801326c:	6560      	strne	r0, [r4, #84]	; 0x54
 801326e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013276:	81a3      	strheq	r3, [r4, #12]
 8013278:	bf18      	it	ne
 801327a:	81a3      	strhne	r3, [r4, #12]
 801327c:	bd10      	pop	{r4, pc}

0801327e <__sclose>:
 801327e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013282:	f000 bfa9 	b.w	80141d8 <_close_r>

08013286 <strcpy>:
 8013286:	4603      	mov	r3, r0
 8013288:	f811 2b01 	ldrb.w	r2, [r1], #1
 801328c:	f803 2b01 	strb.w	r2, [r3], #1
 8013290:	2a00      	cmp	r2, #0
 8013292:	d1f9      	bne.n	8013288 <strcpy+0x2>
 8013294:	4770      	bx	lr

08013296 <sulp>:
 8013296:	b570      	push	{r4, r5, r6, lr}
 8013298:	4604      	mov	r4, r0
 801329a:	460d      	mov	r5, r1
 801329c:	ec45 4b10 	vmov	d0, r4, r5
 80132a0:	4616      	mov	r6, r2
 80132a2:	f002 fe15 	bl	8015ed0 <__ulp>
 80132a6:	ec51 0b10 	vmov	r0, r1, d0
 80132aa:	b17e      	cbz	r6, 80132cc <sulp+0x36>
 80132ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dd09      	ble.n	80132cc <sulp+0x36>
 80132b8:	051b      	lsls	r3, r3, #20
 80132ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80132be:	2400      	movs	r4, #0
 80132c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80132c4:	4622      	mov	r2, r4
 80132c6:	462b      	mov	r3, r5
 80132c8:	f7ed f9ae 	bl	8000628 <__aeabi_dmul>
 80132cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080132d0 <_strtod_l>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	461f      	mov	r7, r3
 80132d6:	b0a1      	sub	sp, #132	; 0x84
 80132d8:	2300      	movs	r3, #0
 80132da:	4681      	mov	r9, r0
 80132dc:	4638      	mov	r0, r7
 80132de:	460e      	mov	r6, r1
 80132e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80132e2:	931c      	str	r3, [sp, #112]	; 0x70
 80132e4:	f002 fa7e 	bl	80157e4 <__localeconv_l>
 80132e8:	4680      	mov	r8, r0
 80132ea:	6800      	ldr	r0, [r0, #0]
 80132ec:	f7ec ff88 	bl	8000200 <strlen>
 80132f0:	f04f 0a00 	mov.w	sl, #0
 80132f4:	4604      	mov	r4, r0
 80132f6:	f04f 0b00 	mov.w	fp, #0
 80132fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80132fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132fe:	781a      	ldrb	r2, [r3, #0]
 8013300:	2a0d      	cmp	r2, #13
 8013302:	d832      	bhi.n	801336a <_strtod_l+0x9a>
 8013304:	2a09      	cmp	r2, #9
 8013306:	d236      	bcs.n	8013376 <_strtod_l+0xa6>
 8013308:	2a00      	cmp	r2, #0
 801330a:	d03e      	beq.n	801338a <_strtod_l+0xba>
 801330c:	2300      	movs	r3, #0
 801330e:	930d      	str	r3, [sp, #52]	; 0x34
 8013310:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013312:	782b      	ldrb	r3, [r5, #0]
 8013314:	2b30      	cmp	r3, #48	; 0x30
 8013316:	f040 80ac 	bne.w	8013472 <_strtod_l+0x1a2>
 801331a:	786b      	ldrb	r3, [r5, #1]
 801331c:	2b58      	cmp	r3, #88	; 0x58
 801331e:	d001      	beq.n	8013324 <_strtod_l+0x54>
 8013320:	2b78      	cmp	r3, #120	; 0x78
 8013322:	d167      	bne.n	80133f4 <_strtod_l+0x124>
 8013324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	ab1c      	add	r3, sp, #112	; 0x70
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	9702      	str	r7, [sp, #8]
 801332e:	ab1d      	add	r3, sp, #116	; 0x74
 8013330:	4a88      	ldr	r2, [pc, #544]	; (8013554 <_strtod_l+0x284>)
 8013332:	a91b      	add	r1, sp, #108	; 0x6c
 8013334:	4648      	mov	r0, r9
 8013336:	f001 ff6c 	bl	8015212 <__gethex>
 801333a:	f010 0407 	ands.w	r4, r0, #7
 801333e:	4606      	mov	r6, r0
 8013340:	d005      	beq.n	801334e <_strtod_l+0x7e>
 8013342:	2c06      	cmp	r4, #6
 8013344:	d12b      	bne.n	801339e <_strtod_l+0xce>
 8013346:	3501      	adds	r5, #1
 8013348:	2300      	movs	r3, #0
 801334a:	951b      	str	r5, [sp, #108]	; 0x6c
 801334c:	930d      	str	r3, [sp, #52]	; 0x34
 801334e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013350:	2b00      	cmp	r3, #0
 8013352:	f040 859a 	bne.w	8013e8a <_strtod_l+0xbba>
 8013356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013358:	b1e3      	cbz	r3, 8013394 <_strtod_l+0xc4>
 801335a:	4652      	mov	r2, sl
 801335c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013360:	ec43 2b10 	vmov	d0, r2, r3
 8013364:	b021      	add	sp, #132	; 0x84
 8013366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336a:	2a2b      	cmp	r2, #43	; 0x2b
 801336c:	d015      	beq.n	801339a <_strtod_l+0xca>
 801336e:	2a2d      	cmp	r2, #45	; 0x2d
 8013370:	d004      	beq.n	801337c <_strtod_l+0xac>
 8013372:	2a20      	cmp	r2, #32
 8013374:	d1ca      	bne.n	801330c <_strtod_l+0x3c>
 8013376:	3301      	adds	r3, #1
 8013378:	931b      	str	r3, [sp, #108]	; 0x6c
 801337a:	e7bf      	b.n	80132fc <_strtod_l+0x2c>
 801337c:	2201      	movs	r2, #1
 801337e:	920d      	str	r2, [sp, #52]	; 0x34
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	921b      	str	r2, [sp, #108]	; 0x6c
 8013384:	785b      	ldrb	r3, [r3, #1]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1c2      	bne.n	8013310 <_strtod_l+0x40>
 801338a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801338c:	961b      	str	r6, [sp, #108]	; 0x6c
 801338e:	2b00      	cmp	r3, #0
 8013390:	f040 8579 	bne.w	8013e86 <_strtod_l+0xbb6>
 8013394:	4652      	mov	r2, sl
 8013396:	465b      	mov	r3, fp
 8013398:	e7e2      	b.n	8013360 <_strtod_l+0x90>
 801339a:	2200      	movs	r2, #0
 801339c:	e7ef      	b.n	801337e <_strtod_l+0xae>
 801339e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80133a0:	b13a      	cbz	r2, 80133b2 <_strtod_l+0xe2>
 80133a2:	2135      	movs	r1, #53	; 0x35
 80133a4:	a81e      	add	r0, sp, #120	; 0x78
 80133a6:	f002 fe8b 	bl	80160c0 <__copybits>
 80133aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80133ac:	4648      	mov	r0, r9
 80133ae:	f002 faf8 	bl	80159a2 <_Bfree>
 80133b2:	3c01      	subs	r4, #1
 80133b4:	2c04      	cmp	r4, #4
 80133b6:	d806      	bhi.n	80133c6 <_strtod_l+0xf6>
 80133b8:	e8df f004 	tbb	[pc, r4]
 80133bc:	1714030a 	.word	0x1714030a
 80133c0:	0a          	.byte	0x0a
 80133c1:	00          	.byte	0x00
 80133c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80133c6:	0730      	lsls	r0, r6, #28
 80133c8:	d5c1      	bpl.n	801334e <_strtod_l+0x7e>
 80133ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80133ce:	e7be      	b.n	801334e <_strtod_l+0x7e>
 80133d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80133d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80133d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80133da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80133e2:	e7f0      	b.n	80133c6 <_strtod_l+0xf6>
 80133e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013558 <_strtod_l+0x288>
 80133e8:	e7ed      	b.n	80133c6 <_strtod_l+0xf6>
 80133ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80133ee:	f04f 3aff 	mov.w	sl, #4294967295
 80133f2:	e7e8      	b.n	80133c6 <_strtod_l+0xf6>
 80133f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133f6:	1c5a      	adds	r2, r3, #1
 80133f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80133fa:	785b      	ldrb	r3, [r3, #1]
 80133fc:	2b30      	cmp	r3, #48	; 0x30
 80133fe:	d0f9      	beq.n	80133f4 <_strtod_l+0x124>
 8013400:	2b00      	cmp	r3, #0
 8013402:	d0a4      	beq.n	801334e <_strtod_l+0x7e>
 8013404:	2301      	movs	r3, #1
 8013406:	2500      	movs	r5, #0
 8013408:	9306      	str	r3, [sp, #24]
 801340a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801340c:	9308      	str	r3, [sp, #32]
 801340e:	9507      	str	r5, [sp, #28]
 8013410:	9505      	str	r5, [sp, #20]
 8013412:	220a      	movs	r2, #10
 8013414:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013416:	7807      	ldrb	r7, [r0, #0]
 8013418:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801341c:	b2d9      	uxtb	r1, r3
 801341e:	2909      	cmp	r1, #9
 8013420:	d929      	bls.n	8013476 <_strtod_l+0x1a6>
 8013422:	4622      	mov	r2, r4
 8013424:	f8d8 1000 	ldr.w	r1, [r8]
 8013428:	f003 fd24 	bl	8016e74 <strncmp>
 801342c:	2800      	cmp	r0, #0
 801342e:	d031      	beq.n	8013494 <_strtod_l+0x1c4>
 8013430:	2000      	movs	r0, #0
 8013432:	9c05      	ldr	r4, [sp, #20]
 8013434:	9004      	str	r0, [sp, #16]
 8013436:	463b      	mov	r3, r7
 8013438:	4602      	mov	r2, r0
 801343a:	2b65      	cmp	r3, #101	; 0x65
 801343c:	d001      	beq.n	8013442 <_strtod_l+0x172>
 801343e:	2b45      	cmp	r3, #69	; 0x45
 8013440:	d114      	bne.n	801346c <_strtod_l+0x19c>
 8013442:	b924      	cbnz	r4, 801344e <_strtod_l+0x17e>
 8013444:	b910      	cbnz	r0, 801344c <_strtod_l+0x17c>
 8013446:	9b06      	ldr	r3, [sp, #24]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d09e      	beq.n	801338a <_strtod_l+0xba>
 801344c:	2400      	movs	r4, #0
 801344e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013450:	1c73      	adds	r3, r6, #1
 8013452:	931b      	str	r3, [sp, #108]	; 0x6c
 8013454:	7873      	ldrb	r3, [r6, #1]
 8013456:	2b2b      	cmp	r3, #43	; 0x2b
 8013458:	d078      	beq.n	801354c <_strtod_l+0x27c>
 801345a:	2b2d      	cmp	r3, #45	; 0x2d
 801345c:	d070      	beq.n	8013540 <_strtod_l+0x270>
 801345e:	f04f 0c00 	mov.w	ip, #0
 8013462:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013466:	2f09      	cmp	r7, #9
 8013468:	d97c      	bls.n	8013564 <_strtod_l+0x294>
 801346a:	961b      	str	r6, [sp, #108]	; 0x6c
 801346c:	f04f 0e00 	mov.w	lr, #0
 8013470:	e09a      	b.n	80135a8 <_strtod_l+0x2d8>
 8013472:	2300      	movs	r3, #0
 8013474:	e7c7      	b.n	8013406 <_strtod_l+0x136>
 8013476:	9905      	ldr	r1, [sp, #20]
 8013478:	2908      	cmp	r1, #8
 801347a:	bfdd      	ittte	le
 801347c:	9907      	ldrle	r1, [sp, #28]
 801347e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013482:	9307      	strle	r3, [sp, #28]
 8013484:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013488:	9b05      	ldr	r3, [sp, #20]
 801348a:	3001      	adds	r0, #1
 801348c:	3301      	adds	r3, #1
 801348e:	9305      	str	r3, [sp, #20]
 8013490:	901b      	str	r0, [sp, #108]	; 0x6c
 8013492:	e7bf      	b.n	8013414 <_strtod_l+0x144>
 8013494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013496:	191a      	adds	r2, r3, r4
 8013498:	921b      	str	r2, [sp, #108]	; 0x6c
 801349a:	9a05      	ldr	r2, [sp, #20]
 801349c:	5d1b      	ldrb	r3, [r3, r4]
 801349e:	2a00      	cmp	r2, #0
 80134a0:	d037      	beq.n	8013512 <_strtod_l+0x242>
 80134a2:	9c05      	ldr	r4, [sp, #20]
 80134a4:	4602      	mov	r2, r0
 80134a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80134aa:	2909      	cmp	r1, #9
 80134ac:	d913      	bls.n	80134d6 <_strtod_l+0x206>
 80134ae:	2101      	movs	r1, #1
 80134b0:	9104      	str	r1, [sp, #16]
 80134b2:	e7c2      	b.n	801343a <_strtod_l+0x16a>
 80134b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134b6:	1c5a      	adds	r2, r3, #1
 80134b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80134ba:	785b      	ldrb	r3, [r3, #1]
 80134bc:	3001      	adds	r0, #1
 80134be:	2b30      	cmp	r3, #48	; 0x30
 80134c0:	d0f8      	beq.n	80134b4 <_strtod_l+0x1e4>
 80134c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80134c6:	2a08      	cmp	r2, #8
 80134c8:	f200 84e4 	bhi.w	8013e94 <_strtod_l+0xbc4>
 80134cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80134ce:	9208      	str	r2, [sp, #32]
 80134d0:	4602      	mov	r2, r0
 80134d2:	2000      	movs	r0, #0
 80134d4:	4604      	mov	r4, r0
 80134d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80134da:	f100 0101 	add.w	r1, r0, #1
 80134de:	d012      	beq.n	8013506 <_strtod_l+0x236>
 80134e0:	440a      	add	r2, r1
 80134e2:	eb00 0c04 	add.w	ip, r0, r4
 80134e6:	4621      	mov	r1, r4
 80134e8:	270a      	movs	r7, #10
 80134ea:	458c      	cmp	ip, r1
 80134ec:	d113      	bne.n	8013516 <_strtod_l+0x246>
 80134ee:	1821      	adds	r1, r4, r0
 80134f0:	2908      	cmp	r1, #8
 80134f2:	f104 0401 	add.w	r4, r4, #1
 80134f6:	4404      	add	r4, r0
 80134f8:	dc19      	bgt.n	801352e <_strtod_l+0x25e>
 80134fa:	9b07      	ldr	r3, [sp, #28]
 80134fc:	210a      	movs	r1, #10
 80134fe:	fb01 e303 	mla	r3, r1, r3, lr
 8013502:	9307      	str	r3, [sp, #28]
 8013504:	2100      	movs	r1, #0
 8013506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013508:	1c58      	adds	r0, r3, #1
 801350a:	901b      	str	r0, [sp, #108]	; 0x6c
 801350c:	785b      	ldrb	r3, [r3, #1]
 801350e:	4608      	mov	r0, r1
 8013510:	e7c9      	b.n	80134a6 <_strtod_l+0x1d6>
 8013512:	9805      	ldr	r0, [sp, #20]
 8013514:	e7d3      	b.n	80134be <_strtod_l+0x1ee>
 8013516:	2908      	cmp	r1, #8
 8013518:	f101 0101 	add.w	r1, r1, #1
 801351c:	dc03      	bgt.n	8013526 <_strtod_l+0x256>
 801351e:	9b07      	ldr	r3, [sp, #28]
 8013520:	437b      	muls	r3, r7
 8013522:	9307      	str	r3, [sp, #28]
 8013524:	e7e1      	b.n	80134ea <_strtod_l+0x21a>
 8013526:	2910      	cmp	r1, #16
 8013528:	bfd8      	it	le
 801352a:	437d      	mulle	r5, r7
 801352c:	e7dd      	b.n	80134ea <_strtod_l+0x21a>
 801352e:	2c10      	cmp	r4, #16
 8013530:	bfdc      	itt	le
 8013532:	210a      	movle	r1, #10
 8013534:	fb01 e505 	mlale	r5, r1, r5, lr
 8013538:	e7e4      	b.n	8013504 <_strtod_l+0x234>
 801353a:	2301      	movs	r3, #1
 801353c:	9304      	str	r3, [sp, #16]
 801353e:	e781      	b.n	8013444 <_strtod_l+0x174>
 8013540:	f04f 0c01 	mov.w	ip, #1
 8013544:	1cb3      	adds	r3, r6, #2
 8013546:	931b      	str	r3, [sp, #108]	; 0x6c
 8013548:	78b3      	ldrb	r3, [r6, #2]
 801354a:	e78a      	b.n	8013462 <_strtod_l+0x192>
 801354c:	f04f 0c00 	mov.w	ip, #0
 8013550:	e7f8      	b.n	8013544 <_strtod_l+0x274>
 8013552:	bf00      	nop
 8013554:	080175fc 	.word	0x080175fc
 8013558:	7ff00000 	.word	0x7ff00000
 801355c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801355e:	1c5f      	adds	r7, r3, #1
 8013560:	971b      	str	r7, [sp, #108]	; 0x6c
 8013562:	785b      	ldrb	r3, [r3, #1]
 8013564:	2b30      	cmp	r3, #48	; 0x30
 8013566:	d0f9      	beq.n	801355c <_strtod_l+0x28c>
 8013568:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801356c:	2f08      	cmp	r7, #8
 801356e:	f63f af7d 	bhi.w	801346c <_strtod_l+0x19c>
 8013572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013578:	930a      	str	r3, [sp, #40]	; 0x28
 801357a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801357c:	1c5f      	adds	r7, r3, #1
 801357e:	971b      	str	r7, [sp, #108]	; 0x6c
 8013580:	785b      	ldrb	r3, [r3, #1]
 8013582:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013586:	f1b8 0f09 	cmp.w	r8, #9
 801358a:	d937      	bls.n	80135fc <_strtod_l+0x32c>
 801358c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801358e:	1a7f      	subs	r7, r7, r1
 8013590:	2f08      	cmp	r7, #8
 8013592:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013596:	dc37      	bgt.n	8013608 <_strtod_l+0x338>
 8013598:	45be      	cmp	lr, r7
 801359a:	bfa8      	it	ge
 801359c:	46be      	movge	lr, r7
 801359e:	f1bc 0f00 	cmp.w	ip, #0
 80135a2:	d001      	beq.n	80135a8 <_strtod_l+0x2d8>
 80135a4:	f1ce 0e00 	rsb	lr, lr, #0
 80135a8:	2c00      	cmp	r4, #0
 80135aa:	d151      	bne.n	8013650 <_strtod_l+0x380>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	f47f aece 	bne.w	801334e <_strtod_l+0x7e>
 80135b2:	9a06      	ldr	r2, [sp, #24]
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	f47f aeca 	bne.w	801334e <_strtod_l+0x7e>
 80135ba:	9a04      	ldr	r2, [sp, #16]
 80135bc:	2a00      	cmp	r2, #0
 80135be:	f47f aee4 	bne.w	801338a <_strtod_l+0xba>
 80135c2:	2b4e      	cmp	r3, #78	; 0x4e
 80135c4:	d027      	beq.n	8013616 <_strtod_l+0x346>
 80135c6:	dc21      	bgt.n	801360c <_strtod_l+0x33c>
 80135c8:	2b49      	cmp	r3, #73	; 0x49
 80135ca:	f47f aede 	bne.w	801338a <_strtod_l+0xba>
 80135ce:	49a0      	ldr	r1, [pc, #640]	; (8013850 <_strtod_l+0x580>)
 80135d0:	a81b      	add	r0, sp, #108	; 0x6c
 80135d2:	f002 f851 	bl	8015678 <__match>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	f43f aed7 	beq.w	801338a <_strtod_l+0xba>
 80135dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135de:	499d      	ldr	r1, [pc, #628]	; (8013854 <_strtod_l+0x584>)
 80135e0:	3b01      	subs	r3, #1
 80135e2:	a81b      	add	r0, sp, #108	; 0x6c
 80135e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80135e6:	f002 f847 	bl	8015678 <__match>
 80135ea:	b910      	cbnz	r0, 80135f2 <_strtod_l+0x322>
 80135ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135ee:	3301      	adds	r3, #1
 80135f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80135f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013868 <_strtod_l+0x598>
 80135f6:	f04f 0a00 	mov.w	sl, #0
 80135fa:	e6a8      	b.n	801334e <_strtod_l+0x7e>
 80135fc:	210a      	movs	r1, #10
 80135fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013602:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013606:	e7b8      	b.n	801357a <_strtod_l+0x2aa>
 8013608:	46be      	mov	lr, r7
 801360a:	e7c8      	b.n	801359e <_strtod_l+0x2ce>
 801360c:	2b69      	cmp	r3, #105	; 0x69
 801360e:	d0de      	beq.n	80135ce <_strtod_l+0x2fe>
 8013610:	2b6e      	cmp	r3, #110	; 0x6e
 8013612:	f47f aeba 	bne.w	801338a <_strtod_l+0xba>
 8013616:	4990      	ldr	r1, [pc, #576]	; (8013858 <_strtod_l+0x588>)
 8013618:	a81b      	add	r0, sp, #108	; 0x6c
 801361a:	f002 f82d 	bl	8015678 <__match>
 801361e:	2800      	cmp	r0, #0
 8013620:	f43f aeb3 	beq.w	801338a <_strtod_l+0xba>
 8013624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	2b28      	cmp	r3, #40	; 0x28
 801362a:	d10e      	bne.n	801364a <_strtod_l+0x37a>
 801362c:	aa1e      	add	r2, sp, #120	; 0x78
 801362e:	498b      	ldr	r1, [pc, #556]	; (801385c <_strtod_l+0x58c>)
 8013630:	a81b      	add	r0, sp, #108	; 0x6c
 8013632:	f002 f835 	bl	80156a0 <__hexnan>
 8013636:	2805      	cmp	r0, #5
 8013638:	d107      	bne.n	801364a <_strtod_l+0x37a>
 801363a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801363c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013640:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013644:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013648:	e681      	b.n	801334e <_strtod_l+0x7e>
 801364a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013870 <_strtod_l+0x5a0>
 801364e:	e7d2      	b.n	80135f6 <_strtod_l+0x326>
 8013650:	ebae 0302 	sub.w	r3, lr, r2
 8013654:	9306      	str	r3, [sp, #24]
 8013656:	9b05      	ldr	r3, [sp, #20]
 8013658:	9807      	ldr	r0, [sp, #28]
 801365a:	2b00      	cmp	r3, #0
 801365c:	bf08      	it	eq
 801365e:	4623      	moveq	r3, r4
 8013660:	2c10      	cmp	r4, #16
 8013662:	9305      	str	r3, [sp, #20]
 8013664:	46a0      	mov	r8, r4
 8013666:	bfa8      	it	ge
 8013668:	f04f 0810 	movge.w	r8, #16
 801366c:	f7ec ff62 	bl	8000534 <__aeabi_ui2d>
 8013670:	2c09      	cmp	r4, #9
 8013672:	4682      	mov	sl, r0
 8013674:	468b      	mov	fp, r1
 8013676:	dc13      	bgt.n	80136a0 <_strtod_l+0x3d0>
 8013678:	9b06      	ldr	r3, [sp, #24]
 801367a:	2b00      	cmp	r3, #0
 801367c:	f43f ae67 	beq.w	801334e <_strtod_l+0x7e>
 8013680:	9b06      	ldr	r3, [sp, #24]
 8013682:	dd7a      	ble.n	801377a <_strtod_l+0x4aa>
 8013684:	2b16      	cmp	r3, #22
 8013686:	dc61      	bgt.n	801374c <_strtod_l+0x47c>
 8013688:	4a75      	ldr	r2, [pc, #468]	; (8013860 <_strtod_l+0x590>)
 801368a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801368e:	e9de 0100 	ldrd	r0, r1, [lr]
 8013692:	4652      	mov	r2, sl
 8013694:	465b      	mov	r3, fp
 8013696:	f7ec ffc7 	bl	8000628 <__aeabi_dmul>
 801369a:	4682      	mov	sl, r0
 801369c:	468b      	mov	fp, r1
 801369e:	e656      	b.n	801334e <_strtod_l+0x7e>
 80136a0:	4b6f      	ldr	r3, [pc, #444]	; (8013860 <_strtod_l+0x590>)
 80136a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80136a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80136aa:	f7ec ffbd 	bl	8000628 <__aeabi_dmul>
 80136ae:	4606      	mov	r6, r0
 80136b0:	4628      	mov	r0, r5
 80136b2:	460f      	mov	r7, r1
 80136b4:	f7ec ff3e 	bl	8000534 <__aeabi_ui2d>
 80136b8:	4602      	mov	r2, r0
 80136ba:	460b      	mov	r3, r1
 80136bc:	4630      	mov	r0, r6
 80136be:	4639      	mov	r1, r7
 80136c0:	f7ec fdfc 	bl	80002bc <__adddf3>
 80136c4:	2c0f      	cmp	r4, #15
 80136c6:	4682      	mov	sl, r0
 80136c8:	468b      	mov	fp, r1
 80136ca:	ddd5      	ble.n	8013678 <_strtod_l+0x3a8>
 80136cc:	9b06      	ldr	r3, [sp, #24]
 80136ce:	eba4 0808 	sub.w	r8, r4, r8
 80136d2:	4498      	add	r8, r3
 80136d4:	f1b8 0f00 	cmp.w	r8, #0
 80136d8:	f340 8096 	ble.w	8013808 <_strtod_l+0x538>
 80136dc:	f018 030f 	ands.w	r3, r8, #15
 80136e0:	d00a      	beq.n	80136f8 <_strtod_l+0x428>
 80136e2:	495f      	ldr	r1, [pc, #380]	; (8013860 <_strtod_l+0x590>)
 80136e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80136e8:	4652      	mov	r2, sl
 80136ea:	465b      	mov	r3, fp
 80136ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f0:	f7ec ff9a 	bl	8000628 <__aeabi_dmul>
 80136f4:	4682      	mov	sl, r0
 80136f6:	468b      	mov	fp, r1
 80136f8:	f038 080f 	bics.w	r8, r8, #15
 80136fc:	d073      	beq.n	80137e6 <_strtod_l+0x516>
 80136fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013702:	dd47      	ble.n	8013794 <_strtod_l+0x4c4>
 8013704:	2400      	movs	r4, #0
 8013706:	46a0      	mov	r8, r4
 8013708:	9407      	str	r4, [sp, #28]
 801370a:	9405      	str	r4, [sp, #20]
 801370c:	2322      	movs	r3, #34	; 0x22
 801370e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013868 <_strtod_l+0x598>
 8013712:	f8c9 3000 	str.w	r3, [r9]
 8013716:	f04f 0a00 	mov.w	sl, #0
 801371a:	9b07      	ldr	r3, [sp, #28]
 801371c:	2b00      	cmp	r3, #0
 801371e:	f43f ae16 	beq.w	801334e <_strtod_l+0x7e>
 8013722:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013724:	4648      	mov	r0, r9
 8013726:	f002 f93c 	bl	80159a2 <_Bfree>
 801372a:	9905      	ldr	r1, [sp, #20]
 801372c:	4648      	mov	r0, r9
 801372e:	f002 f938 	bl	80159a2 <_Bfree>
 8013732:	4641      	mov	r1, r8
 8013734:	4648      	mov	r0, r9
 8013736:	f002 f934 	bl	80159a2 <_Bfree>
 801373a:	9907      	ldr	r1, [sp, #28]
 801373c:	4648      	mov	r0, r9
 801373e:	f002 f930 	bl	80159a2 <_Bfree>
 8013742:	4621      	mov	r1, r4
 8013744:	4648      	mov	r0, r9
 8013746:	f002 f92c 	bl	80159a2 <_Bfree>
 801374a:	e600      	b.n	801334e <_strtod_l+0x7e>
 801374c:	9a06      	ldr	r2, [sp, #24]
 801374e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013752:	4293      	cmp	r3, r2
 8013754:	dbba      	blt.n	80136cc <_strtod_l+0x3fc>
 8013756:	4d42      	ldr	r5, [pc, #264]	; (8013860 <_strtod_l+0x590>)
 8013758:	f1c4 040f 	rsb	r4, r4, #15
 801375c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013760:	4652      	mov	r2, sl
 8013762:	465b      	mov	r3, fp
 8013764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013768:	f7ec ff5e 	bl	8000628 <__aeabi_dmul>
 801376c:	9b06      	ldr	r3, [sp, #24]
 801376e:	1b1c      	subs	r4, r3, r4
 8013770:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013778:	e78d      	b.n	8013696 <_strtod_l+0x3c6>
 801377a:	f113 0f16 	cmn.w	r3, #22
 801377e:	dba5      	blt.n	80136cc <_strtod_l+0x3fc>
 8013780:	4a37      	ldr	r2, [pc, #220]	; (8013860 <_strtod_l+0x590>)
 8013782:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013786:	e9d2 2300 	ldrd	r2, r3, [r2]
 801378a:	4650      	mov	r0, sl
 801378c:	4659      	mov	r1, fp
 801378e:	f7ed f875 	bl	800087c <__aeabi_ddiv>
 8013792:	e782      	b.n	801369a <_strtod_l+0x3ca>
 8013794:	2300      	movs	r3, #0
 8013796:	4e33      	ldr	r6, [pc, #204]	; (8013864 <_strtod_l+0x594>)
 8013798:	ea4f 1828 	mov.w	r8, r8, asr #4
 801379c:	4650      	mov	r0, sl
 801379e:	4659      	mov	r1, fp
 80137a0:	461d      	mov	r5, r3
 80137a2:	f1b8 0f01 	cmp.w	r8, #1
 80137a6:	dc21      	bgt.n	80137ec <_strtod_l+0x51c>
 80137a8:	b10b      	cbz	r3, 80137ae <_strtod_l+0x4de>
 80137aa:	4682      	mov	sl, r0
 80137ac:	468b      	mov	fp, r1
 80137ae:	4b2d      	ldr	r3, [pc, #180]	; (8013864 <_strtod_l+0x594>)
 80137b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80137b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80137b8:	4652      	mov	r2, sl
 80137ba:	465b      	mov	r3, fp
 80137bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80137c0:	f7ec ff32 	bl	8000628 <__aeabi_dmul>
 80137c4:	4b28      	ldr	r3, [pc, #160]	; (8013868 <_strtod_l+0x598>)
 80137c6:	460a      	mov	r2, r1
 80137c8:	400b      	ands	r3, r1
 80137ca:	4928      	ldr	r1, [pc, #160]	; (801386c <_strtod_l+0x59c>)
 80137cc:	428b      	cmp	r3, r1
 80137ce:	4682      	mov	sl, r0
 80137d0:	d898      	bhi.n	8013704 <_strtod_l+0x434>
 80137d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80137d6:	428b      	cmp	r3, r1
 80137d8:	bf86      	itte	hi
 80137da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013874 <_strtod_l+0x5a4>
 80137de:	f04f 3aff 	movhi.w	sl, #4294967295
 80137e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80137e6:	2300      	movs	r3, #0
 80137e8:	9304      	str	r3, [sp, #16]
 80137ea:	e077      	b.n	80138dc <_strtod_l+0x60c>
 80137ec:	f018 0f01 	tst.w	r8, #1
 80137f0:	d006      	beq.n	8013800 <_strtod_l+0x530>
 80137f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80137f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fa:	f7ec ff15 	bl	8000628 <__aeabi_dmul>
 80137fe:	2301      	movs	r3, #1
 8013800:	3501      	adds	r5, #1
 8013802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013806:	e7cc      	b.n	80137a2 <_strtod_l+0x4d2>
 8013808:	d0ed      	beq.n	80137e6 <_strtod_l+0x516>
 801380a:	f1c8 0800 	rsb	r8, r8, #0
 801380e:	f018 020f 	ands.w	r2, r8, #15
 8013812:	d00a      	beq.n	801382a <_strtod_l+0x55a>
 8013814:	4b12      	ldr	r3, [pc, #72]	; (8013860 <_strtod_l+0x590>)
 8013816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801381a:	4650      	mov	r0, sl
 801381c:	4659      	mov	r1, fp
 801381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013822:	f7ed f82b 	bl	800087c <__aeabi_ddiv>
 8013826:	4682      	mov	sl, r0
 8013828:	468b      	mov	fp, r1
 801382a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801382e:	d0da      	beq.n	80137e6 <_strtod_l+0x516>
 8013830:	f1b8 0f1f 	cmp.w	r8, #31
 8013834:	dd20      	ble.n	8013878 <_strtod_l+0x5a8>
 8013836:	2400      	movs	r4, #0
 8013838:	46a0      	mov	r8, r4
 801383a:	9407      	str	r4, [sp, #28]
 801383c:	9405      	str	r4, [sp, #20]
 801383e:	2322      	movs	r3, #34	; 0x22
 8013840:	f04f 0a00 	mov.w	sl, #0
 8013844:	f04f 0b00 	mov.w	fp, #0
 8013848:	f8c9 3000 	str.w	r3, [r9]
 801384c:	e765      	b.n	801371a <_strtod_l+0x44a>
 801384e:	bf00      	nop
 8013850:	080175c9 	.word	0x080175c9
 8013854:	08017653 	.word	0x08017653
 8013858:	080175d1 	.word	0x080175d1
 801385c:	08017610 	.word	0x08017610
 8013860:	080176f8 	.word	0x080176f8
 8013864:	080176d0 	.word	0x080176d0
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	7ca00000 	.word	0x7ca00000
 8013870:	fff80000 	.word	0xfff80000
 8013874:	7fefffff 	.word	0x7fefffff
 8013878:	f018 0310 	ands.w	r3, r8, #16
 801387c:	bf18      	it	ne
 801387e:	236a      	movne	r3, #106	; 0x6a
 8013880:	4da0      	ldr	r5, [pc, #640]	; (8013b04 <_strtod_l+0x834>)
 8013882:	9304      	str	r3, [sp, #16]
 8013884:	4650      	mov	r0, sl
 8013886:	4659      	mov	r1, fp
 8013888:	2300      	movs	r3, #0
 801388a:	f1b8 0f00 	cmp.w	r8, #0
 801388e:	f300 810a 	bgt.w	8013aa6 <_strtod_l+0x7d6>
 8013892:	b10b      	cbz	r3, 8013898 <_strtod_l+0x5c8>
 8013894:	4682      	mov	sl, r0
 8013896:	468b      	mov	fp, r1
 8013898:	9b04      	ldr	r3, [sp, #16]
 801389a:	b1bb      	cbz	r3, 80138cc <_strtod_l+0x5fc>
 801389c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80138a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	4659      	mov	r1, fp
 80138a8:	dd10      	ble.n	80138cc <_strtod_l+0x5fc>
 80138aa:	2b1f      	cmp	r3, #31
 80138ac:	f340 8107 	ble.w	8013abe <_strtod_l+0x7ee>
 80138b0:	2b34      	cmp	r3, #52	; 0x34
 80138b2:	bfde      	ittt	le
 80138b4:	3b20      	suble	r3, #32
 80138b6:	f04f 32ff 	movle.w	r2, #4294967295
 80138ba:	fa02 f303 	lslle.w	r3, r2, r3
 80138be:	f04f 0a00 	mov.w	sl, #0
 80138c2:	bfcc      	ite	gt
 80138c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80138c8:	ea03 0b01 	andle.w	fp, r3, r1
 80138cc:	2200      	movs	r2, #0
 80138ce:	2300      	movs	r3, #0
 80138d0:	4650      	mov	r0, sl
 80138d2:	4659      	mov	r1, fp
 80138d4:	f7ed f910 	bl	8000af8 <__aeabi_dcmpeq>
 80138d8:	2800      	cmp	r0, #0
 80138da:	d1ac      	bne.n	8013836 <_strtod_l+0x566>
 80138dc:	9b07      	ldr	r3, [sp, #28]
 80138de:	9300      	str	r3, [sp, #0]
 80138e0:	9a05      	ldr	r2, [sp, #20]
 80138e2:	9908      	ldr	r1, [sp, #32]
 80138e4:	4623      	mov	r3, r4
 80138e6:	4648      	mov	r0, r9
 80138e8:	f002 f8ad 	bl	8015a46 <__s2b>
 80138ec:	9007      	str	r0, [sp, #28]
 80138ee:	2800      	cmp	r0, #0
 80138f0:	f43f af08 	beq.w	8013704 <_strtod_l+0x434>
 80138f4:	9a06      	ldr	r2, [sp, #24]
 80138f6:	9b06      	ldr	r3, [sp, #24]
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	f1c3 0300 	rsb	r3, r3, #0
 80138fe:	bfa8      	it	ge
 8013900:	2300      	movge	r3, #0
 8013902:	930e      	str	r3, [sp, #56]	; 0x38
 8013904:	2400      	movs	r4, #0
 8013906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801390a:	9316      	str	r3, [sp, #88]	; 0x58
 801390c:	46a0      	mov	r8, r4
 801390e:	9b07      	ldr	r3, [sp, #28]
 8013910:	4648      	mov	r0, r9
 8013912:	6859      	ldr	r1, [r3, #4]
 8013914:	f002 f811 	bl	801593a <_Balloc>
 8013918:	9005      	str	r0, [sp, #20]
 801391a:	2800      	cmp	r0, #0
 801391c:	f43f aef6 	beq.w	801370c <_strtod_l+0x43c>
 8013920:	9b07      	ldr	r3, [sp, #28]
 8013922:	691a      	ldr	r2, [r3, #16]
 8013924:	3202      	adds	r2, #2
 8013926:	f103 010c 	add.w	r1, r3, #12
 801392a:	0092      	lsls	r2, r2, #2
 801392c:	300c      	adds	r0, #12
 801392e:	f001 fff9 	bl	8015924 <memcpy>
 8013932:	aa1e      	add	r2, sp, #120	; 0x78
 8013934:	a91d      	add	r1, sp, #116	; 0x74
 8013936:	ec4b ab10 	vmov	d0, sl, fp
 801393a:	4648      	mov	r0, r9
 801393c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013940:	f002 fb3c 	bl	8015fbc <__d2b>
 8013944:	901c      	str	r0, [sp, #112]	; 0x70
 8013946:	2800      	cmp	r0, #0
 8013948:	f43f aee0 	beq.w	801370c <_strtod_l+0x43c>
 801394c:	2101      	movs	r1, #1
 801394e:	4648      	mov	r0, r9
 8013950:	f002 f905 	bl	8015b5e <__i2b>
 8013954:	4680      	mov	r8, r0
 8013956:	2800      	cmp	r0, #0
 8013958:	f43f aed8 	beq.w	801370c <_strtod_l+0x43c>
 801395c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801395e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013960:	2e00      	cmp	r6, #0
 8013962:	bfab      	itete	ge
 8013964:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013966:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013968:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801396a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801396c:	bfac      	ite	ge
 801396e:	18f7      	addge	r7, r6, r3
 8013970:	1b9d      	sublt	r5, r3, r6
 8013972:	9b04      	ldr	r3, [sp, #16]
 8013974:	1af6      	subs	r6, r6, r3
 8013976:	4416      	add	r6, r2
 8013978:	4b63      	ldr	r3, [pc, #396]	; (8013b08 <_strtod_l+0x838>)
 801397a:	3e01      	subs	r6, #1
 801397c:	429e      	cmp	r6, r3
 801397e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013982:	f280 80af 	bge.w	8013ae4 <_strtod_l+0x814>
 8013986:	1b9b      	subs	r3, r3, r6
 8013988:	2b1f      	cmp	r3, #31
 801398a:	eba2 0203 	sub.w	r2, r2, r3
 801398e:	f04f 0101 	mov.w	r1, #1
 8013992:	f300 809b 	bgt.w	8013acc <_strtod_l+0x7fc>
 8013996:	fa01 f303 	lsl.w	r3, r1, r3
 801399a:	930f      	str	r3, [sp, #60]	; 0x3c
 801399c:	2300      	movs	r3, #0
 801399e:	930a      	str	r3, [sp, #40]	; 0x28
 80139a0:	18be      	adds	r6, r7, r2
 80139a2:	9b04      	ldr	r3, [sp, #16]
 80139a4:	42b7      	cmp	r7, r6
 80139a6:	4415      	add	r5, r2
 80139a8:	441d      	add	r5, r3
 80139aa:	463b      	mov	r3, r7
 80139ac:	bfa8      	it	ge
 80139ae:	4633      	movge	r3, r6
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	bfa8      	it	ge
 80139b4:	462b      	movge	r3, r5
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	bfc2      	ittt	gt
 80139ba:	1af6      	subgt	r6, r6, r3
 80139bc:	1aed      	subgt	r5, r5, r3
 80139be:	1aff      	subgt	r7, r7, r3
 80139c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139c2:	b1bb      	cbz	r3, 80139f4 <_strtod_l+0x724>
 80139c4:	4641      	mov	r1, r8
 80139c6:	461a      	mov	r2, r3
 80139c8:	4648      	mov	r0, r9
 80139ca:	f002 f967 	bl	8015c9c <__pow5mult>
 80139ce:	4680      	mov	r8, r0
 80139d0:	2800      	cmp	r0, #0
 80139d2:	f43f ae9b 	beq.w	801370c <_strtod_l+0x43c>
 80139d6:	4601      	mov	r1, r0
 80139d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80139da:	4648      	mov	r0, r9
 80139dc:	f002 f8c8 	bl	8015b70 <__multiply>
 80139e0:	900c      	str	r0, [sp, #48]	; 0x30
 80139e2:	2800      	cmp	r0, #0
 80139e4:	f43f ae92 	beq.w	801370c <_strtod_l+0x43c>
 80139e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80139ea:	4648      	mov	r0, r9
 80139ec:	f001 ffd9 	bl	80159a2 <_Bfree>
 80139f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f2:	931c      	str	r3, [sp, #112]	; 0x70
 80139f4:	2e00      	cmp	r6, #0
 80139f6:	dc7a      	bgt.n	8013aee <_strtod_l+0x81e>
 80139f8:	9b06      	ldr	r3, [sp, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	dd08      	ble.n	8013a10 <_strtod_l+0x740>
 80139fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013a00:	9905      	ldr	r1, [sp, #20]
 8013a02:	4648      	mov	r0, r9
 8013a04:	f002 f94a 	bl	8015c9c <__pow5mult>
 8013a08:	9005      	str	r0, [sp, #20]
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	f43f ae7e 	beq.w	801370c <_strtod_l+0x43c>
 8013a10:	2d00      	cmp	r5, #0
 8013a12:	dd08      	ble.n	8013a26 <_strtod_l+0x756>
 8013a14:	462a      	mov	r2, r5
 8013a16:	9905      	ldr	r1, [sp, #20]
 8013a18:	4648      	mov	r0, r9
 8013a1a:	f002 f98d 	bl	8015d38 <__lshift>
 8013a1e:	9005      	str	r0, [sp, #20]
 8013a20:	2800      	cmp	r0, #0
 8013a22:	f43f ae73 	beq.w	801370c <_strtod_l+0x43c>
 8013a26:	2f00      	cmp	r7, #0
 8013a28:	dd08      	ble.n	8013a3c <_strtod_l+0x76c>
 8013a2a:	4641      	mov	r1, r8
 8013a2c:	463a      	mov	r2, r7
 8013a2e:	4648      	mov	r0, r9
 8013a30:	f002 f982 	bl	8015d38 <__lshift>
 8013a34:	4680      	mov	r8, r0
 8013a36:	2800      	cmp	r0, #0
 8013a38:	f43f ae68 	beq.w	801370c <_strtod_l+0x43c>
 8013a3c:	9a05      	ldr	r2, [sp, #20]
 8013a3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a40:	4648      	mov	r0, r9
 8013a42:	f002 f9e7 	bl	8015e14 <__mdiff>
 8013a46:	4604      	mov	r4, r0
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	f43f ae5f 	beq.w	801370c <_strtod_l+0x43c>
 8013a4e:	68c3      	ldr	r3, [r0, #12]
 8013a50:	930c      	str	r3, [sp, #48]	; 0x30
 8013a52:	2300      	movs	r3, #0
 8013a54:	60c3      	str	r3, [r0, #12]
 8013a56:	4641      	mov	r1, r8
 8013a58:	f002 f9c2 	bl	8015de0 <__mcmp>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	da55      	bge.n	8013b0c <_strtod_l+0x83c>
 8013a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a62:	b9e3      	cbnz	r3, 8013a9e <_strtod_l+0x7ce>
 8013a64:	f1ba 0f00 	cmp.w	sl, #0
 8013a68:	d119      	bne.n	8013a9e <_strtod_l+0x7ce>
 8013a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a6e:	b9b3      	cbnz	r3, 8013a9e <_strtod_l+0x7ce>
 8013a70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013a74:	0d1b      	lsrs	r3, r3, #20
 8013a76:	051b      	lsls	r3, r3, #20
 8013a78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013a7c:	d90f      	bls.n	8013a9e <_strtod_l+0x7ce>
 8013a7e:	6963      	ldr	r3, [r4, #20]
 8013a80:	b913      	cbnz	r3, 8013a88 <_strtod_l+0x7b8>
 8013a82:	6923      	ldr	r3, [r4, #16]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	dd0a      	ble.n	8013a9e <_strtod_l+0x7ce>
 8013a88:	4621      	mov	r1, r4
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	4648      	mov	r0, r9
 8013a8e:	f002 f953 	bl	8015d38 <__lshift>
 8013a92:	4641      	mov	r1, r8
 8013a94:	4604      	mov	r4, r0
 8013a96:	f002 f9a3 	bl	8015de0 <__mcmp>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	dc67      	bgt.n	8013b6e <_strtod_l+0x89e>
 8013a9e:	9b04      	ldr	r3, [sp, #16]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d171      	bne.n	8013b88 <_strtod_l+0x8b8>
 8013aa4:	e63d      	b.n	8013722 <_strtod_l+0x452>
 8013aa6:	f018 0f01 	tst.w	r8, #1
 8013aaa:	d004      	beq.n	8013ab6 <_strtod_l+0x7e6>
 8013aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ab0:	f7ec fdba 	bl	8000628 <__aeabi_dmul>
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013aba:	3508      	adds	r5, #8
 8013abc:	e6e5      	b.n	801388a <_strtod_l+0x5ba>
 8013abe:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ac6:	ea03 0a0a 	and.w	sl, r3, sl
 8013aca:	e6ff      	b.n	80138cc <_strtod_l+0x5fc>
 8013acc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ad0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013ad4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013ad8:	36e2      	adds	r6, #226	; 0xe2
 8013ada:	fa01 f306 	lsl.w	r3, r1, r6
 8013ade:	930a      	str	r3, [sp, #40]	; 0x28
 8013ae0:	910f      	str	r1, [sp, #60]	; 0x3c
 8013ae2:	e75d      	b.n	80139a0 <_strtod_l+0x6d0>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ae8:	2301      	movs	r3, #1
 8013aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8013aec:	e758      	b.n	80139a0 <_strtod_l+0x6d0>
 8013aee:	4632      	mov	r2, r6
 8013af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013af2:	4648      	mov	r0, r9
 8013af4:	f002 f920 	bl	8015d38 <__lshift>
 8013af8:	901c      	str	r0, [sp, #112]	; 0x70
 8013afa:	2800      	cmp	r0, #0
 8013afc:	f47f af7c 	bne.w	80139f8 <_strtod_l+0x728>
 8013b00:	e604      	b.n	801370c <_strtod_l+0x43c>
 8013b02:	bf00      	nop
 8013b04:	08017628 	.word	0x08017628
 8013b08:	fffffc02 	.word	0xfffffc02
 8013b0c:	465d      	mov	r5, fp
 8013b0e:	f040 8086 	bne.w	8013c1e <_strtod_l+0x94e>
 8013b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b18:	b32a      	cbz	r2, 8013b66 <_strtod_l+0x896>
 8013b1a:	4aaf      	ldr	r2, [pc, #700]	; (8013dd8 <_strtod_l+0xb08>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d153      	bne.n	8013bc8 <_strtod_l+0x8f8>
 8013b20:	9b04      	ldr	r3, [sp, #16]
 8013b22:	4650      	mov	r0, sl
 8013b24:	b1d3      	cbz	r3, 8013b5c <_strtod_l+0x88c>
 8013b26:	4aad      	ldr	r2, [pc, #692]	; (8013ddc <_strtod_l+0xb0c>)
 8013b28:	402a      	ands	r2, r5
 8013b2a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8013b32:	d816      	bhi.n	8013b62 <_strtod_l+0x892>
 8013b34:	0d12      	lsrs	r2, r2, #20
 8013b36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8013b3e:	4298      	cmp	r0, r3
 8013b40:	d142      	bne.n	8013bc8 <_strtod_l+0x8f8>
 8013b42:	4ba7      	ldr	r3, [pc, #668]	; (8013de0 <_strtod_l+0xb10>)
 8013b44:	429d      	cmp	r5, r3
 8013b46:	d102      	bne.n	8013b4e <_strtod_l+0x87e>
 8013b48:	3001      	adds	r0, #1
 8013b4a:	f43f addf 	beq.w	801370c <_strtod_l+0x43c>
 8013b4e:	4ba3      	ldr	r3, [pc, #652]	; (8013ddc <_strtod_l+0xb0c>)
 8013b50:	402b      	ands	r3, r5
 8013b52:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013b56:	f04f 0a00 	mov.w	sl, #0
 8013b5a:	e7a0      	b.n	8013a9e <_strtod_l+0x7ce>
 8013b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b60:	e7ed      	b.n	8013b3e <_strtod_l+0x86e>
 8013b62:	460b      	mov	r3, r1
 8013b64:	e7eb      	b.n	8013b3e <_strtod_l+0x86e>
 8013b66:	bb7b      	cbnz	r3, 8013bc8 <_strtod_l+0x8f8>
 8013b68:	f1ba 0f00 	cmp.w	sl, #0
 8013b6c:	d12c      	bne.n	8013bc8 <_strtod_l+0x8f8>
 8013b6e:	9904      	ldr	r1, [sp, #16]
 8013b70:	4a9a      	ldr	r2, [pc, #616]	; (8013ddc <_strtod_l+0xb0c>)
 8013b72:	465b      	mov	r3, fp
 8013b74:	b1f1      	cbz	r1, 8013bb4 <_strtod_l+0x8e4>
 8013b76:	ea02 010b 	and.w	r1, r2, fp
 8013b7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b7e:	dc19      	bgt.n	8013bb4 <_strtod_l+0x8e4>
 8013b80:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b84:	f77f ae5b 	ble.w	801383e <_strtod_l+0x56e>
 8013b88:	4a96      	ldr	r2, [pc, #600]	; (8013de4 <_strtod_l+0xb14>)
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013b90:	4650      	mov	r0, sl
 8013b92:	4659      	mov	r1, fp
 8013b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013b98:	f7ec fd46 	bl	8000628 <__aeabi_dmul>
 8013b9c:	4682      	mov	sl, r0
 8013b9e:	468b      	mov	fp, r1
 8013ba0:	2900      	cmp	r1, #0
 8013ba2:	f47f adbe 	bne.w	8013722 <_strtod_l+0x452>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f47f adbb 	bne.w	8013722 <_strtod_l+0x452>
 8013bac:	2322      	movs	r3, #34	; 0x22
 8013bae:	f8c9 3000 	str.w	r3, [r9]
 8013bb2:	e5b6      	b.n	8013722 <_strtod_l+0x452>
 8013bb4:	4013      	ands	r3, r2
 8013bb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013bba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013bbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8013bc6:	e76a      	b.n	8013a9e <_strtod_l+0x7ce>
 8013bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bca:	b193      	cbz	r3, 8013bf2 <_strtod_l+0x922>
 8013bcc:	422b      	tst	r3, r5
 8013bce:	f43f af66 	beq.w	8013a9e <_strtod_l+0x7ce>
 8013bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bd4:	9a04      	ldr	r2, [sp, #16]
 8013bd6:	4650      	mov	r0, sl
 8013bd8:	4659      	mov	r1, fp
 8013bda:	b173      	cbz	r3, 8013bfa <_strtod_l+0x92a>
 8013bdc:	f7ff fb5b 	bl	8013296 <sulp>
 8013be0:	4602      	mov	r2, r0
 8013be2:	460b      	mov	r3, r1
 8013be4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013be8:	f7ec fb68 	bl	80002bc <__adddf3>
 8013bec:	4682      	mov	sl, r0
 8013bee:	468b      	mov	fp, r1
 8013bf0:	e755      	b.n	8013a9e <_strtod_l+0x7ce>
 8013bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bf4:	ea13 0f0a 	tst.w	r3, sl
 8013bf8:	e7e9      	b.n	8013bce <_strtod_l+0x8fe>
 8013bfa:	f7ff fb4c 	bl	8013296 <sulp>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013c06:	f7ec fb57 	bl	80002b8 <__aeabi_dsub>
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	4682      	mov	sl, r0
 8013c10:	468b      	mov	fp, r1
 8013c12:	f7ec ff71 	bl	8000af8 <__aeabi_dcmpeq>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	f47f ae11 	bne.w	801383e <_strtod_l+0x56e>
 8013c1c:	e73f      	b.n	8013a9e <_strtod_l+0x7ce>
 8013c1e:	4641      	mov	r1, r8
 8013c20:	4620      	mov	r0, r4
 8013c22:	f002 fa1a 	bl	801605a <__ratio>
 8013c26:	ec57 6b10 	vmov	r6, r7, d0
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c30:	ee10 0a10 	vmov	r0, s0
 8013c34:	4639      	mov	r1, r7
 8013c36:	f7ec ff73 	bl	8000b20 <__aeabi_dcmple>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d077      	beq.n	8013d2e <_strtod_l+0xa5e>
 8013c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d04a      	beq.n	8013cda <_strtod_l+0xa0a>
 8013c44:	4b68      	ldr	r3, [pc, #416]	; (8013de8 <_strtod_l+0xb18>)
 8013c46:	2200      	movs	r2, #0
 8013c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013c4c:	4f66      	ldr	r7, [pc, #408]	; (8013de8 <_strtod_l+0xb18>)
 8013c4e:	2600      	movs	r6, #0
 8013c50:	4b62      	ldr	r3, [pc, #392]	; (8013ddc <_strtod_l+0xb0c>)
 8013c52:	402b      	ands	r3, r5
 8013c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c58:	4b64      	ldr	r3, [pc, #400]	; (8013dec <_strtod_l+0xb1c>)
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	f040 80ce 	bne.w	8013dfc <_strtod_l+0xb2c>
 8013c60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c68:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013c6c:	ec4b ab10 	vmov	d0, sl, fp
 8013c70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013c78:	f002 f92a 	bl	8015ed0 <__ulp>
 8013c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c80:	ec53 2b10 	vmov	r2, r3, d0
 8013c84:	f7ec fcd0 	bl	8000628 <__aeabi_dmul>
 8013c88:	4652      	mov	r2, sl
 8013c8a:	465b      	mov	r3, fp
 8013c8c:	f7ec fb16 	bl	80002bc <__adddf3>
 8013c90:	460b      	mov	r3, r1
 8013c92:	4952      	ldr	r1, [pc, #328]	; (8013ddc <_strtod_l+0xb0c>)
 8013c94:	4a56      	ldr	r2, [pc, #344]	; (8013df0 <_strtod_l+0xb20>)
 8013c96:	4019      	ands	r1, r3
 8013c98:	4291      	cmp	r1, r2
 8013c9a:	4682      	mov	sl, r0
 8013c9c:	d95b      	bls.n	8013d56 <_strtod_l+0xa86>
 8013c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ca0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d103      	bne.n	8013cb0 <_strtod_l+0x9e0>
 8013ca8:	9b08      	ldr	r3, [sp, #32]
 8013caa:	3301      	adds	r3, #1
 8013cac:	f43f ad2e 	beq.w	801370c <_strtod_l+0x43c>
 8013cb0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013de0 <_strtod_l+0xb10>
 8013cb4:	f04f 3aff 	mov.w	sl, #4294967295
 8013cb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013cba:	4648      	mov	r0, r9
 8013cbc:	f001 fe71 	bl	80159a2 <_Bfree>
 8013cc0:	9905      	ldr	r1, [sp, #20]
 8013cc2:	4648      	mov	r0, r9
 8013cc4:	f001 fe6d 	bl	80159a2 <_Bfree>
 8013cc8:	4641      	mov	r1, r8
 8013cca:	4648      	mov	r0, r9
 8013ccc:	f001 fe69 	bl	80159a2 <_Bfree>
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	4648      	mov	r0, r9
 8013cd4:	f001 fe65 	bl	80159a2 <_Bfree>
 8013cd8:	e619      	b.n	801390e <_strtod_l+0x63e>
 8013cda:	f1ba 0f00 	cmp.w	sl, #0
 8013cde:	d11a      	bne.n	8013d16 <_strtod_l+0xa46>
 8013ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ce4:	b9eb      	cbnz	r3, 8013d22 <_strtod_l+0xa52>
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4b3f      	ldr	r3, [pc, #252]	; (8013de8 <_strtod_l+0xb18>)
 8013cea:	4630      	mov	r0, r6
 8013cec:	4639      	mov	r1, r7
 8013cee:	f7ec ff0d 	bl	8000b0c <__aeabi_dcmplt>
 8013cf2:	b9c8      	cbnz	r0, 8013d28 <_strtod_l+0xa58>
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	4639      	mov	r1, r7
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	4b3e      	ldr	r3, [pc, #248]	; (8013df4 <_strtod_l+0xb24>)
 8013cfc:	f7ec fc94 	bl	8000628 <__aeabi_dmul>
 8013d00:	4606      	mov	r6, r0
 8013d02:	460f      	mov	r7, r1
 8013d04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013d08:	9618      	str	r6, [sp, #96]	; 0x60
 8013d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8013d0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013d14:	e79c      	b.n	8013c50 <_strtod_l+0x980>
 8013d16:	f1ba 0f01 	cmp.w	sl, #1
 8013d1a:	d102      	bne.n	8013d22 <_strtod_l+0xa52>
 8013d1c:	2d00      	cmp	r5, #0
 8013d1e:	f43f ad8e 	beq.w	801383e <_strtod_l+0x56e>
 8013d22:	2200      	movs	r2, #0
 8013d24:	4b34      	ldr	r3, [pc, #208]	; (8013df8 <_strtod_l+0xb28>)
 8013d26:	e78f      	b.n	8013c48 <_strtod_l+0x978>
 8013d28:	2600      	movs	r6, #0
 8013d2a:	4f32      	ldr	r7, [pc, #200]	; (8013df4 <_strtod_l+0xb24>)
 8013d2c:	e7ea      	b.n	8013d04 <_strtod_l+0xa34>
 8013d2e:	4b31      	ldr	r3, [pc, #196]	; (8013df4 <_strtod_l+0xb24>)
 8013d30:	4630      	mov	r0, r6
 8013d32:	4639      	mov	r1, r7
 8013d34:	2200      	movs	r2, #0
 8013d36:	f7ec fc77 	bl	8000628 <__aeabi_dmul>
 8013d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d3c:	4606      	mov	r6, r0
 8013d3e:	460f      	mov	r7, r1
 8013d40:	b933      	cbnz	r3, 8013d50 <_strtod_l+0xa80>
 8013d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d46:	9010      	str	r0, [sp, #64]	; 0x40
 8013d48:	9311      	str	r3, [sp, #68]	; 0x44
 8013d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013d4e:	e7df      	b.n	8013d10 <_strtod_l+0xa40>
 8013d50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013d54:	e7f9      	b.n	8013d4a <_strtod_l+0xa7a>
 8013d56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013d5a:	9b04      	ldr	r3, [sp, #16]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d1ab      	bne.n	8013cb8 <_strtod_l+0x9e8>
 8013d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013d64:	0d1b      	lsrs	r3, r3, #20
 8013d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d68:	051b      	lsls	r3, r3, #20
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	465d      	mov	r5, fp
 8013d6e:	d1a3      	bne.n	8013cb8 <_strtod_l+0x9e8>
 8013d70:	4639      	mov	r1, r7
 8013d72:	4630      	mov	r0, r6
 8013d74:	f7ec ff08 	bl	8000b88 <__aeabi_d2iz>
 8013d78:	f7ec fbec 	bl	8000554 <__aeabi_i2d>
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	4602      	mov	r2, r0
 8013d80:	4639      	mov	r1, r7
 8013d82:	4630      	mov	r0, r6
 8013d84:	f7ec fa98 	bl	80002b8 <__aeabi_dsub>
 8013d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	b933      	cbnz	r3, 8013d9e <_strtod_l+0xace>
 8013d90:	f1ba 0f00 	cmp.w	sl, #0
 8013d94:	d103      	bne.n	8013d9e <_strtod_l+0xace>
 8013d96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013d9a:	2d00      	cmp	r5, #0
 8013d9c:	d06d      	beq.n	8013e7a <_strtod_l+0xbaa>
 8013d9e:	a30a      	add	r3, pc, #40	; (adr r3, 8013dc8 <_strtod_l+0xaf8>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	4630      	mov	r0, r6
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec feb0 	bl	8000b0c <__aeabi_dcmplt>
 8013dac:	2800      	cmp	r0, #0
 8013dae:	f47f acb8 	bne.w	8013722 <_strtod_l+0x452>
 8013db2:	a307      	add	r3, pc, #28	; (adr r3, 8013dd0 <_strtod_l+0xb00>)
 8013db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db8:	4630      	mov	r0, r6
 8013dba:	4639      	mov	r1, r7
 8013dbc:	f7ec fec4 	bl	8000b48 <__aeabi_dcmpgt>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f43f af79 	beq.w	8013cb8 <_strtod_l+0x9e8>
 8013dc6:	e4ac      	b.n	8013722 <_strtod_l+0x452>
 8013dc8:	94a03595 	.word	0x94a03595
 8013dcc:	3fdfffff 	.word	0x3fdfffff
 8013dd0:	35afe535 	.word	0x35afe535
 8013dd4:	3fe00000 	.word	0x3fe00000
 8013dd8:	000fffff 	.word	0x000fffff
 8013ddc:	7ff00000 	.word	0x7ff00000
 8013de0:	7fefffff 	.word	0x7fefffff
 8013de4:	39500000 	.word	0x39500000
 8013de8:	3ff00000 	.word	0x3ff00000
 8013dec:	7fe00000 	.word	0x7fe00000
 8013df0:	7c9fffff 	.word	0x7c9fffff
 8013df4:	3fe00000 	.word	0x3fe00000
 8013df8:	bff00000 	.word	0xbff00000
 8013dfc:	9b04      	ldr	r3, [sp, #16]
 8013dfe:	b333      	cbz	r3, 8013e4e <_strtod_l+0xb7e>
 8013e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e06:	d822      	bhi.n	8013e4e <_strtod_l+0xb7e>
 8013e08:	a327      	add	r3, pc, #156	; (adr r3, 8013ea8 <_strtod_l+0xbd8>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	4630      	mov	r0, r6
 8013e10:	4639      	mov	r1, r7
 8013e12:	f7ec fe85 	bl	8000b20 <__aeabi_dcmple>
 8013e16:	b1a0      	cbz	r0, 8013e42 <_strtod_l+0xb72>
 8013e18:	4639      	mov	r1, r7
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	f7ec fedc 	bl	8000bd8 <__aeabi_d2uiz>
 8013e20:	2800      	cmp	r0, #0
 8013e22:	bf08      	it	eq
 8013e24:	2001      	moveq	r0, #1
 8013e26:	f7ec fb85 	bl	8000534 <__aeabi_ui2d>
 8013e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	460f      	mov	r7, r1
 8013e30:	bb03      	cbnz	r3, 8013e74 <_strtod_l+0xba4>
 8013e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e36:	9012      	str	r0, [sp, #72]	; 0x48
 8013e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8013e3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e4a:	1a9b      	subs	r3, r3, r2
 8013e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013e52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013e56:	f002 f83b 	bl	8015ed0 <__ulp>
 8013e5a:	4650      	mov	r0, sl
 8013e5c:	ec53 2b10 	vmov	r2, r3, d0
 8013e60:	4659      	mov	r1, fp
 8013e62:	f7ec fbe1 	bl	8000628 <__aeabi_dmul>
 8013e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e6a:	f7ec fa27 	bl	80002bc <__adddf3>
 8013e6e:	4682      	mov	sl, r0
 8013e70:	468b      	mov	fp, r1
 8013e72:	e772      	b.n	8013d5a <_strtod_l+0xa8a>
 8013e74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013e78:	e7df      	b.n	8013e3a <_strtod_l+0xb6a>
 8013e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8013eb0 <_strtod_l+0xbe0>)
 8013e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e80:	f7ec fe44 	bl	8000b0c <__aeabi_dcmplt>
 8013e84:	e79c      	b.n	8013dc0 <_strtod_l+0xaf0>
 8013e86:	2300      	movs	r3, #0
 8013e88:	930d      	str	r3, [sp, #52]	; 0x34
 8013e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e8e:	6013      	str	r3, [r2, #0]
 8013e90:	f7ff ba61 	b.w	8013356 <_strtod_l+0x86>
 8013e94:	2b65      	cmp	r3, #101	; 0x65
 8013e96:	f04f 0200 	mov.w	r2, #0
 8013e9a:	f43f ab4e 	beq.w	801353a <_strtod_l+0x26a>
 8013e9e:	2101      	movs	r1, #1
 8013ea0:	4614      	mov	r4, r2
 8013ea2:	9104      	str	r1, [sp, #16]
 8013ea4:	f7ff bacb 	b.w	801343e <_strtod_l+0x16e>
 8013ea8:	ffc00000 	.word	0xffc00000
 8013eac:	41dfffff 	.word	0x41dfffff
 8013eb0:	94a03595 	.word	0x94a03595
 8013eb4:	3fcfffff 	.word	0x3fcfffff

08013eb8 <_strtod_r>:
 8013eb8:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <_strtod_r+0x18>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	b410      	push	{r4}
 8013ebe:	6a1b      	ldr	r3, [r3, #32]
 8013ec0:	4c04      	ldr	r4, [pc, #16]	; (8013ed4 <_strtod_r+0x1c>)
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	bf08      	it	eq
 8013ec6:	4623      	moveq	r3, r4
 8013ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ecc:	f7ff ba00 	b.w	80132d0 <_strtod_l>
 8013ed0:	2000000c 	.word	0x2000000c
 8013ed4:	20000070 	.word	0x20000070

08013ed8 <_strtol_l.isra.0>:
 8013ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013edc:	4680      	mov	r8, r0
 8013ede:	4689      	mov	r9, r1
 8013ee0:	4692      	mov	sl, r2
 8013ee2:	461e      	mov	r6, r3
 8013ee4:	460f      	mov	r7, r1
 8013ee6:	463d      	mov	r5, r7
 8013ee8:	9808      	ldr	r0, [sp, #32]
 8013eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013eee:	f001 fc67 	bl	80157c0 <__locale_ctype_ptr_l>
 8013ef2:	4420      	add	r0, r4
 8013ef4:	7843      	ldrb	r3, [r0, #1]
 8013ef6:	f013 0308 	ands.w	r3, r3, #8
 8013efa:	d132      	bne.n	8013f62 <_strtol_l.isra.0+0x8a>
 8013efc:	2c2d      	cmp	r4, #45	; 0x2d
 8013efe:	d132      	bne.n	8013f66 <_strtol_l.isra.0+0x8e>
 8013f00:	787c      	ldrb	r4, [r7, #1]
 8013f02:	1cbd      	adds	r5, r7, #2
 8013f04:	2201      	movs	r2, #1
 8013f06:	2e00      	cmp	r6, #0
 8013f08:	d05d      	beq.n	8013fc6 <_strtol_l.isra.0+0xee>
 8013f0a:	2e10      	cmp	r6, #16
 8013f0c:	d109      	bne.n	8013f22 <_strtol_l.isra.0+0x4a>
 8013f0e:	2c30      	cmp	r4, #48	; 0x30
 8013f10:	d107      	bne.n	8013f22 <_strtol_l.isra.0+0x4a>
 8013f12:	782b      	ldrb	r3, [r5, #0]
 8013f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013f18:	2b58      	cmp	r3, #88	; 0x58
 8013f1a:	d14f      	bne.n	8013fbc <_strtol_l.isra.0+0xe4>
 8013f1c:	786c      	ldrb	r4, [r5, #1]
 8013f1e:	2610      	movs	r6, #16
 8013f20:	3502      	adds	r5, #2
 8013f22:	2a00      	cmp	r2, #0
 8013f24:	bf14      	ite	ne
 8013f26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013f2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013f2e:	2700      	movs	r7, #0
 8013f30:	fbb1 fcf6 	udiv	ip, r1, r6
 8013f34:	4638      	mov	r0, r7
 8013f36:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013f3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013f3e:	2b09      	cmp	r3, #9
 8013f40:	d817      	bhi.n	8013f72 <_strtol_l.isra.0+0x9a>
 8013f42:	461c      	mov	r4, r3
 8013f44:	42a6      	cmp	r6, r4
 8013f46:	dd23      	ble.n	8013f90 <_strtol_l.isra.0+0xb8>
 8013f48:	1c7b      	adds	r3, r7, #1
 8013f4a:	d007      	beq.n	8013f5c <_strtol_l.isra.0+0x84>
 8013f4c:	4584      	cmp	ip, r0
 8013f4e:	d31c      	bcc.n	8013f8a <_strtol_l.isra.0+0xb2>
 8013f50:	d101      	bne.n	8013f56 <_strtol_l.isra.0+0x7e>
 8013f52:	45a6      	cmp	lr, r4
 8013f54:	db19      	blt.n	8013f8a <_strtol_l.isra.0+0xb2>
 8013f56:	fb00 4006 	mla	r0, r0, r6, r4
 8013f5a:	2701      	movs	r7, #1
 8013f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f60:	e7eb      	b.n	8013f3a <_strtol_l.isra.0+0x62>
 8013f62:	462f      	mov	r7, r5
 8013f64:	e7bf      	b.n	8013ee6 <_strtol_l.isra.0+0xe>
 8013f66:	2c2b      	cmp	r4, #43	; 0x2b
 8013f68:	bf04      	itt	eq
 8013f6a:	1cbd      	addeq	r5, r7, #2
 8013f6c:	787c      	ldrbeq	r4, [r7, #1]
 8013f6e:	461a      	mov	r2, r3
 8013f70:	e7c9      	b.n	8013f06 <_strtol_l.isra.0+0x2e>
 8013f72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013f76:	2b19      	cmp	r3, #25
 8013f78:	d801      	bhi.n	8013f7e <_strtol_l.isra.0+0xa6>
 8013f7a:	3c37      	subs	r4, #55	; 0x37
 8013f7c:	e7e2      	b.n	8013f44 <_strtol_l.isra.0+0x6c>
 8013f7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013f82:	2b19      	cmp	r3, #25
 8013f84:	d804      	bhi.n	8013f90 <_strtol_l.isra.0+0xb8>
 8013f86:	3c57      	subs	r4, #87	; 0x57
 8013f88:	e7dc      	b.n	8013f44 <_strtol_l.isra.0+0x6c>
 8013f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8013f8e:	e7e5      	b.n	8013f5c <_strtol_l.isra.0+0x84>
 8013f90:	1c7b      	adds	r3, r7, #1
 8013f92:	d108      	bne.n	8013fa6 <_strtol_l.isra.0+0xce>
 8013f94:	2322      	movs	r3, #34	; 0x22
 8013f96:	f8c8 3000 	str.w	r3, [r8]
 8013f9a:	4608      	mov	r0, r1
 8013f9c:	f1ba 0f00 	cmp.w	sl, #0
 8013fa0:	d107      	bne.n	8013fb2 <_strtol_l.isra.0+0xda>
 8013fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa6:	b102      	cbz	r2, 8013faa <_strtol_l.isra.0+0xd2>
 8013fa8:	4240      	negs	r0, r0
 8013faa:	f1ba 0f00 	cmp.w	sl, #0
 8013fae:	d0f8      	beq.n	8013fa2 <_strtol_l.isra.0+0xca>
 8013fb0:	b10f      	cbz	r7, 8013fb6 <_strtol_l.isra.0+0xde>
 8013fb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013fb6:	f8ca 9000 	str.w	r9, [sl]
 8013fba:	e7f2      	b.n	8013fa2 <_strtol_l.isra.0+0xca>
 8013fbc:	2430      	movs	r4, #48	; 0x30
 8013fbe:	2e00      	cmp	r6, #0
 8013fc0:	d1af      	bne.n	8013f22 <_strtol_l.isra.0+0x4a>
 8013fc2:	2608      	movs	r6, #8
 8013fc4:	e7ad      	b.n	8013f22 <_strtol_l.isra.0+0x4a>
 8013fc6:	2c30      	cmp	r4, #48	; 0x30
 8013fc8:	d0a3      	beq.n	8013f12 <_strtol_l.isra.0+0x3a>
 8013fca:	260a      	movs	r6, #10
 8013fcc:	e7a9      	b.n	8013f22 <_strtol_l.isra.0+0x4a>
	...

08013fd0 <_strtol_r>:
 8013fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fd2:	4c06      	ldr	r4, [pc, #24]	; (8013fec <_strtol_r+0x1c>)
 8013fd4:	4d06      	ldr	r5, [pc, #24]	; (8013ff0 <_strtol_r+0x20>)
 8013fd6:	6824      	ldr	r4, [r4, #0]
 8013fd8:	6a24      	ldr	r4, [r4, #32]
 8013fda:	2c00      	cmp	r4, #0
 8013fdc:	bf08      	it	eq
 8013fde:	462c      	moveq	r4, r5
 8013fe0:	9400      	str	r4, [sp, #0]
 8013fe2:	f7ff ff79 	bl	8013ed8 <_strtol_l.isra.0>
 8013fe6:	b003      	add	sp, #12
 8013fe8:	bd30      	pop	{r4, r5, pc}
 8013fea:	bf00      	nop
 8013fec:	2000000c 	.word	0x2000000c
 8013ff0:	20000070 	.word	0x20000070

08013ff4 <_vsiprintf_r>:
 8013ff4:	b500      	push	{lr}
 8013ff6:	b09b      	sub	sp, #108	; 0x6c
 8013ff8:	9100      	str	r1, [sp, #0]
 8013ffa:	9104      	str	r1, [sp, #16]
 8013ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014000:	9105      	str	r1, [sp, #20]
 8014002:	9102      	str	r1, [sp, #8]
 8014004:	4905      	ldr	r1, [pc, #20]	; (801401c <_vsiprintf_r+0x28>)
 8014006:	9103      	str	r1, [sp, #12]
 8014008:	4669      	mov	r1, sp
 801400a:	f002 f9a5 	bl	8016358 <_svfiprintf_r>
 801400e:	9b00      	ldr	r3, [sp, #0]
 8014010:	2200      	movs	r2, #0
 8014012:	701a      	strb	r2, [r3, #0]
 8014014:	b01b      	add	sp, #108	; 0x6c
 8014016:	f85d fb04 	ldr.w	pc, [sp], #4
 801401a:	bf00      	nop
 801401c:	ffff0208 	.word	0xffff0208

08014020 <vsiprintf>:
 8014020:	4613      	mov	r3, r2
 8014022:	460a      	mov	r2, r1
 8014024:	4601      	mov	r1, r0
 8014026:	4802      	ldr	r0, [pc, #8]	; (8014030 <vsiprintf+0x10>)
 8014028:	6800      	ldr	r0, [r0, #0]
 801402a:	f7ff bfe3 	b.w	8013ff4 <_vsiprintf_r>
 801402e:	bf00      	nop
 8014030:	2000000c 	.word	0x2000000c

08014034 <__swbuf_r>:
 8014034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014036:	460e      	mov	r6, r1
 8014038:	4614      	mov	r4, r2
 801403a:	4605      	mov	r5, r0
 801403c:	b118      	cbz	r0, 8014046 <__swbuf_r+0x12>
 801403e:	6983      	ldr	r3, [r0, #24]
 8014040:	b90b      	cbnz	r3, 8014046 <__swbuf_r+0x12>
 8014042:	f001 f80d 	bl	8015060 <__sinit>
 8014046:	4b21      	ldr	r3, [pc, #132]	; (80140cc <__swbuf_r+0x98>)
 8014048:	429c      	cmp	r4, r3
 801404a:	d12a      	bne.n	80140a2 <__swbuf_r+0x6e>
 801404c:	686c      	ldr	r4, [r5, #4]
 801404e:	69a3      	ldr	r3, [r4, #24]
 8014050:	60a3      	str	r3, [r4, #8]
 8014052:	89a3      	ldrh	r3, [r4, #12]
 8014054:	071a      	lsls	r2, r3, #28
 8014056:	d52e      	bpl.n	80140b6 <__swbuf_r+0x82>
 8014058:	6923      	ldr	r3, [r4, #16]
 801405a:	b363      	cbz	r3, 80140b6 <__swbuf_r+0x82>
 801405c:	6923      	ldr	r3, [r4, #16]
 801405e:	6820      	ldr	r0, [r4, #0]
 8014060:	1ac0      	subs	r0, r0, r3
 8014062:	6963      	ldr	r3, [r4, #20]
 8014064:	b2f6      	uxtb	r6, r6
 8014066:	4283      	cmp	r3, r0
 8014068:	4637      	mov	r7, r6
 801406a:	dc04      	bgt.n	8014076 <__swbuf_r+0x42>
 801406c:	4621      	mov	r1, r4
 801406e:	4628      	mov	r0, r5
 8014070:	f000 ff8c 	bl	8014f8c <_fflush_r>
 8014074:	bb28      	cbnz	r0, 80140c2 <__swbuf_r+0x8e>
 8014076:	68a3      	ldr	r3, [r4, #8]
 8014078:	3b01      	subs	r3, #1
 801407a:	60a3      	str	r3, [r4, #8]
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	6022      	str	r2, [r4, #0]
 8014082:	701e      	strb	r6, [r3, #0]
 8014084:	6963      	ldr	r3, [r4, #20]
 8014086:	3001      	adds	r0, #1
 8014088:	4283      	cmp	r3, r0
 801408a:	d004      	beq.n	8014096 <__swbuf_r+0x62>
 801408c:	89a3      	ldrh	r3, [r4, #12]
 801408e:	07db      	lsls	r3, r3, #31
 8014090:	d519      	bpl.n	80140c6 <__swbuf_r+0x92>
 8014092:	2e0a      	cmp	r6, #10
 8014094:	d117      	bne.n	80140c6 <__swbuf_r+0x92>
 8014096:	4621      	mov	r1, r4
 8014098:	4628      	mov	r0, r5
 801409a:	f000 ff77 	bl	8014f8c <_fflush_r>
 801409e:	b190      	cbz	r0, 80140c6 <__swbuf_r+0x92>
 80140a0:	e00f      	b.n	80140c2 <__swbuf_r+0x8e>
 80140a2:	4b0b      	ldr	r3, [pc, #44]	; (80140d0 <__swbuf_r+0x9c>)
 80140a4:	429c      	cmp	r4, r3
 80140a6:	d101      	bne.n	80140ac <__swbuf_r+0x78>
 80140a8:	68ac      	ldr	r4, [r5, #8]
 80140aa:	e7d0      	b.n	801404e <__swbuf_r+0x1a>
 80140ac:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <__swbuf_r+0xa0>)
 80140ae:	429c      	cmp	r4, r3
 80140b0:	bf08      	it	eq
 80140b2:	68ec      	ldreq	r4, [r5, #12]
 80140b4:	e7cb      	b.n	801404e <__swbuf_r+0x1a>
 80140b6:	4621      	mov	r1, r4
 80140b8:	4628      	mov	r0, r5
 80140ba:	f000 f81f 	bl	80140fc <__swsetup_r>
 80140be:	2800      	cmp	r0, #0
 80140c0:	d0cc      	beq.n	801405c <__swbuf_r+0x28>
 80140c2:	f04f 37ff 	mov.w	r7, #4294967295
 80140c6:	4638      	mov	r0, r7
 80140c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ca:	bf00      	nop
 80140cc:	08017680 	.word	0x08017680
 80140d0:	080176a0 	.word	0x080176a0
 80140d4:	08017660 	.word	0x08017660

080140d8 <_write_r>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4c07      	ldr	r4, [pc, #28]	; (80140f8 <_write_r+0x20>)
 80140dc:	4605      	mov	r5, r0
 80140de:	4608      	mov	r0, r1
 80140e0:	4611      	mov	r1, r2
 80140e2:	2200      	movs	r2, #0
 80140e4:	6022      	str	r2, [r4, #0]
 80140e6:	461a      	mov	r2, r3
 80140e8:	f7ef fce1 	bl	8003aae <_write>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_write_r+0x1e>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_write_r+0x1e>
 80140f4:	602b      	str	r3, [r5, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	2003b41c 	.word	0x2003b41c

080140fc <__swsetup_r>:
 80140fc:	4b32      	ldr	r3, [pc, #200]	; (80141c8 <__swsetup_r+0xcc>)
 80140fe:	b570      	push	{r4, r5, r6, lr}
 8014100:	681d      	ldr	r5, [r3, #0]
 8014102:	4606      	mov	r6, r0
 8014104:	460c      	mov	r4, r1
 8014106:	b125      	cbz	r5, 8014112 <__swsetup_r+0x16>
 8014108:	69ab      	ldr	r3, [r5, #24]
 801410a:	b913      	cbnz	r3, 8014112 <__swsetup_r+0x16>
 801410c:	4628      	mov	r0, r5
 801410e:	f000 ffa7 	bl	8015060 <__sinit>
 8014112:	4b2e      	ldr	r3, [pc, #184]	; (80141cc <__swsetup_r+0xd0>)
 8014114:	429c      	cmp	r4, r3
 8014116:	d10f      	bne.n	8014138 <__swsetup_r+0x3c>
 8014118:	686c      	ldr	r4, [r5, #4]
 801411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801411e:	b29a      	uxth	r2, r3
 8014120:	0715      	lsls	r5, r2, #28
 8014122:	d42c      	bmi.n	801417e <__swsetup_r+0x82>
 8014124:	06d0      	lsls	r0, r2, #27
 8014126:	d411      	bmi.n	801414c <__swsetup_r+0x50>
 8014128:	2209      	movs	r2, #9
 801412a:	6032      	str	r2, [r6, #0]
 801412c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014130:	81a3      	strh	r3, [r4, #12]
 8014132:	f04f 30ff 	mov.w	r0, #4294967295
 8014136:	e03e      	b.n	80141b6 <__swsetup_r+0xba>
 8014138:	4b25      	ldr	r3, [pc, #148]	; (80141d0 <__swsetup_r+0xd4>)
 801413a:	429c      	cmp	r4, r3
 801413c:	d101      	bne.n	8014142 <__swsetup_r+0x46>
 801413e:	68ac      	ldr	r4, [r5, #8]
 8014140:	e7eb      	b.n	801411a <__swsetup_r+0x1e>
 8014142:	4b24      	ldr	r3, [pc, #144]	; (80141d4 <__swsetup_r+0xd8>)
 8014144:	429c      	cmp	r4, r3
 8014146:	bf08      	it	eq
 8014148:	68ec      	ldreq	r4, [r5, #12]
 801414a:	e7e6      	b.n	801411a <__swsetup_r+0x1e>
 801414c:	0751      	lsls	r1, r2, #29
 801414e:	d512      	bpl.n	8014176 <__swsetup_r+0x7a>
 8014150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014152:	b141      	cbz	r1, 8014166 <__swsetup_r+0x6a>
 8014154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014158:	4299      	cmp	r1, r3
 801415a:	d002      	beq.n	8014162 <__swsetup_r+0x66>
 801415c:	4630      	mov	r0, r6
 801415e:	f001 fff9 	bl	8016154 <_free_r>
 8014162:	2300      	movs	r3, #0
 8014164:	6363      	str	r3, [r4, #52]	; 0x34
 8014166:	89a3      	ldrh	r3, [r4, #12]
 8014168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801416c:	81a3      	strh	r3, [r4, #12]
 801416e:	2300      	movs	r3, #0
 8014170:	6063      	str	r3, [r4, #4]
 8014172:	6923      	ldr	r3, [r4, #16]
 8014174:	6023      	str	r3, [r4, #0]
 8014176:	89a3      	ldrh	r3, [r4, #12]
 8014178:	f043 0308 	orr.w	r3, r3, #8
 801417c:	81a3      	strh	r3, [r4, #12]
 801417e:	6923      	ldr	r3, [r4, #16]
 8014180:	b94b      	cbnz	r3, 8014196 <__swsetup_r+0x9a>
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801418c:	d003      	beq.n	8014196 <__swsetup_r+0x9a>
 801418e:	4621      	mov	r1, r4
 8014190:	4630      	mov	r0, r6
 8014192:	f001 fb6d 	bl	8015870 <__smakebuf_r>
 8014196:	89a2      	ldrh	r2, [r4, #12]
 8014198:	f012 0301 	ands.w	r3, r2, #1
 801419c:	d00c      	beq.n	80141b8 <__swsetup_r+0xbc>
 801419e:	2300      	movs	r3, #0
 80141a0:	60a3      	str	r3, [r4, #8]
 80141a2:	6963      	ldr	r3, [r4, #20]
 80141a4:	425b      	negs	r3, r3
 80141a6:	61a3      	str	r3, [r4, #24]
 80141a8:	6923      	ldr	r3, [r4, #16]
 80141aa:	b953      	cbnz	r3, 80141c2 <__swsetup_r+0xc6>
 80141ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80141b4:	d1ba      	bne.n	801412c <__swsetup_r+0x30>
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	0792      	lsls	r2, r2, #30
 80141ba:	bf58      	it	pl
 80141bc:	6963      	ldrpl	r3, [r4, #20]
 80141be:	60a3      	str	r3, [r4, #8]
 80141c0:	e7f2      	b.n	80141a8 <__swsetup_r+0xac>
 80141c2:	2000      	movs	r0, #0
 80141c4:	e7f7      	b.n	80141b6 <__swsetup_r+0xba>
 80141c6:	bf00      	nop
 80141c8:	2000000c 	.word	0x2000000c
 80141cc:	08017680 	.word	0x08017680
 80141d0:	080176a0 	.word	0x080176a0
 80141d4:	08017660 	.word	0x08017660

080141d8 <_close_r>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4c06      	ldr	r4, [pc, #24]	; (80141f4 <_close_r+0x1c>)
 80141dc:	2300      	movs	r3, #0
 80141de:	4605      	mov	r5, r0
 80141e0:	4608      	mov	r0, r1
 80141e2:	6023      	str	r3, [r4, #0]
 80141e4:	f7f1 fb55 	bl	8005892 <_close>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d102      	bne.n	80141f2 <_close_r+0x1a>
 80141ec:	6823      	ldr	r3, [r4, #0]
 80141ee:	b103      	cbz	r3, 80141f2 <_close_r+0x1a>
 80141f0:	602b      	str	r3, [r5, #0]
 80141f2:	bd38      	pop	{r3, r4, r5, pc}
 80141f4:	2003b41c 	.word	0x2003b41c

080141f8 <quorem>:
 80141f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fc:	6903      	ldr	r3, [r0, #16]
 80141fe:	690c      	ldr	r4, [r1, #16]
 8014200:	42a3      	cmp	r3, r4
 8014202:	4680      	mov	r8, r0
 8014204:	f2c0 8082 	blt.w	801430c <quorem+0x114>
 8014208:	3c01      	subs	r4, #1
 801420a:	f101 0714 	add.w	r7, r1, #20
 801420e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014212:	f100 0614 	add.w	r6, r0, #20
 8014216:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801421a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801421e:	eb06 030c 	add.w	r3, r6, ip
 8014222:	3501      	adds	r5, #1
 8014224:	eb07 090c 	add.w	r9, r7, ip
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	fbb0 f5f5 	udiv	r5, r0, r5
 801422e:	b395      	cbz	r5, 8014296 <quorem+0x9e>
 8014230:	f04f 0a00 	mov.w	sl, #0
 8014234:	4638      	mov	r0, r7
 8014236:	46b6      	mov	lr, r6
 8014238:	46d3      	mov	fp, sl
 801423a:	f850 2b04 	ldr.w	r2, [r0], #4
 801423e:	b293      	uxth	r3, r2
 8014240:	fb05 a303 	mla	r3, r5, r3, sl
 8014244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014248:	b29b      	uxth	r3, r3
 801424a:	ebab 0303 	sub.w	r3, fp, r3
 801424e:	0c12      	lsrs	r2, r2, #16
 8014250:	f8de b000 	ldr.w	fp, [lr]
 8014254:	fb05 a202 	mla	r2, r5, r2, sl
 8014258:	fa13 f38b 	uxtah	r3, r3, fp
 801425c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014260:	fa1f fb82 	uxth.w	fp, r2
 8014264:	f8de 2000 	ldr.w	r2, [lr]
 8014268:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801426c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014270:	b29b      	uxth	r3, r3
 8014272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014276:	4581      	cmp	r9, r0
 8014278:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801427c:	f84e 3b04 	str.w	r3, [lr], #4
 8014280:	d2db      	bcs.n	801423a <quorem+0x42>
 8014282:	f856 300c 	ldr.w	r3, [r6, ip]
 8014286:	b933      	cbnz	r3, 8014296 <quorem+0x9e>
 8014288:	9b01      	ldr	r3, [sp, #4]
 801428a:	3b04      	subs	r3, #4
 801428c:	429e      	cmp	r6, r3
 801428e:	461a      	mov	r2, r3
 8014290:	d330      	bcc.n	80142f4 <quorem+0xfc>
 8014292:	f8c8 4010 	str.w	r4, [r8, #16]
 8014296:	4640      	mov	r0, r8
 8014298:	f001 fda2 	bl	8015de0 <__mcmp>
 801429c:	2800      	cmp	r0, #0
 801429e:	db25      	blt.n	80142ec <quorem+0xf4>
 80142a0:	3501      	adds	r5, #1
 80142a2:	4630      	mov	r0, r6
 80142a4:	f04f 0c00 	mov.w	ip, #0
 80142a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80142ac:	f8d0 e000 	ldr.w	lr, [r0]
 80142b0:	b293      	uxth	r3, r2
 80142b2:	ebac 0303 	sub.w	r3, ip, r3
 80142b6:	0c12      	lsrs	r2, r2, #16
 80142b8:	fa13 f38e 	uxtah	r3, r3, lr
 80142bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80142c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142ca:	45b9      	cmp	r9, r7
 80142cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80142d0:	f840 3b04 	str.w	r3, [r0], #4
 80142d4:	d2e8      	bcs.n	80142a8 <quorem+0xb0>
 80142d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80142da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80142de:	b92a      	cbnz	r2, 80142ec <quorem+0xf4>
 80142e0:	3b04      	subs	r3, #4
 80142e2:	429e      	cmp	r6, r3
 80142e4:	461a      	mov	r2, r3
 80142e6:	d30b      	bcc.n	8014300 <quorem+0x108>
 80142e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80142ec:	4628      	mov	r0, r5
 80142ee:	b003      	add	sp, #12
 80142f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f4:	6812      	ldr	r2, [r2, #0]
 80142f6:	3b04      	subs	r3, #4
 80142f8:	2a00      	cmp	r2, #0
 80142fa:	d1ca      	bne.n	8014292 <quorem+0x9a>
 80142fc:	3c01      	subs	r4, #1
 80142fe:	e7c5      	b.n	801428c <quorem+0x94>
 8014300:	6812      	ldr	r2, [r2, #0]
 8014302:	3b04      	subs	r3, #4
 8014304:	2a00      	cmp	r2, #0
 8014306:	d1ef      	bne.n	80142e8 <quorem+0xf0>
 8014308:	3c01      	subs	r4, #1
 801430a:	e7ea      	b.n	80142e2 <quorem+0xea>
 801430c:	2000      	movs	r0, #0
 801430e:	e7ee      	b.n	80142ee <quorem+0xf6>

08014310 <_dtoa_r>:
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	ec57 6b10 	vmov	r6, r7, d0
 8014318:	b097      	sub	sp, #92	; 0x5c
 801431a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801431c:	9106      	str	r1, [sp, #24]
 801431e:	4604      	mov	r4, r0
 8014320:	920b      	str	r2, [sp, #44]	; 0x2c
 8014322:	9312      	str	r3, [sp, #72]	; 0x48
 8014324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014328:	e9cd 6700 	strd	r6, r7, [sp]
 801432c:	b93d      	cbnz	r5, 801433e <_dtoa_r+0x2e>
 801432e:	2010      	movs	r0, #16
 8014330:	f001 fade 	bl	80158f0 <malloc>
 8014334:	6260      	str	r0, [r4, #36]	; 0x24
 8014336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801433a:	6005      	str	r5, [r0, #0]
 801433c:	60c5      	str	r5, [r0, #12]
 801433e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014340:	6819      	ldr	r1, [r3, #0]
 8014342:	b151      	cbz	r1, 801435a <_dtoa_r+0x4a>
 8014344:	685a      	ldr	r2, [r3, #4]
 8014346:	604a      	str	r2, [r1, #4]
 8014348:	2301      	movs	r3, #1
 801434a:	4093      	lsls	r3, r2
 801434c:	608b      	str	r3, [r1, #8]
 801434e:	4620      	mov	r0, r4
 8014350:	f001 fb27 	bl	80159a2 <_Bfree>
 8014354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014356:	2200      	movs	r2, #0
 8014358:	601a      	str	r2, [r3, #0]
 801435a:	1e3b      	subs	r3, r7, #0
 801435c:	bfbb      	ittet	lt
 801435e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014362:	9301      	strlt	r3, [sp, #4]
 8014364:	2300      	movge	r3, #0
 8014366:	2201      	movlt	r2, #1
 8014368:	bfac      	ite	ge
 801436a:	f8c8 3000 	strge.w	r3, [r8]
 801436e:	f8c8 2000 	strlt.w	r2, [r8]
 8014372:	4baf      	ldr	r3, [pc, #700]	; (8014630 <_dtoa_r+0x320>)
 8014374:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014378:	ea33 0308 	bics.w	r3, r3, r8
 801437c:	d114      	bne.n	80143a8 <_dtoa_r+0x98>
 801437e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014380:	f242 730f 	movw	r3, #9999	; 0x270f
 8014384:	6013      	str	r3, [r2, #0]
 8014386:	9b00      	ldr	r3, [sp, #0]
 8014388:	b923      	cbnz	r3, 8014394 <_dtoa_r+0x84>
 801438a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801438e:	2800      	cmp	r0, #0
 8014390:	f000 8542 	beq.w	8014e18 <_dtoa_r+0xb08>
 8014394:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014396:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014644 <_dtoa_r+0x334>
 801439a:	2b00      	cmp	r3, #0
 801439c:	f000 8544 	beq.w	8014e28 <_dtoa_r+0xb18>
 80143a0:	f10b 0303 	add.w	r3, fp, #3
 80143a4:	f000 bd3e 	b.w	8014e24 <_dtoa_r+0xb14>
 80143a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80143ac:	2200      	movs	r2, #0
 80143ae:	2300      	movs	r3, #0
 80143b0:	4630      	mov	r0, r6
 80143b2:	4639      	mov	r1, r7
 80143b4:	f7ec fba0 	bl	8000af8 <__aeabi_dcmpeq>
 80143b8:	4681      	mov	r9, r0
 80143ba:	b168      	cbz	r0, 80143d8 <_dtoa_r+0xc8>
 80143bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143be:	2301      	movs	r3, #1
 80143c0:	6013      	str	r3, [r2, #0]
 80143c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	f000 8524 	beq.w	8014e12 <_dtoa_r+0xb02>
 80143ca:	4b9a      	ldr	r3, [pc, #616]	; (8014634 <_dtoa_r+0x324>)
 80143cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80143ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80143d2:	6013      	str	r3, [r2, #0]
 80143d4:	f000 bd28 	b.w	8014e28 <_dtoa_r+0xb18>
 80143d8:	aa14      	add	r2, sp, #80	; 0x50
 80143da:	a915      	add	r1, sp, #84	; 0x54
 80143dc:	ec47 6b10 	vmov	d0, r6, r7
 80143e0:	4620      	mov	r0, r4
 80143e2:	f001 fdeb 	bl	8015fbc <__d2b>
 80143e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80143ea:	9004      	str	r0, [sp, #16]
 80143ec:	2d00      	cmp	r5, #0
 80143ee:	d07c      	beq.n	80144ea <_dtoa_r+0x1da>
 80143f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80143f8:	46b2      	mov	sl, r6
 80143fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80143fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014402:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014406:	2200      	movs	r2, #0
 8014408:	4b8b      	ldr	r3, [pc, #556]	; (8014638 <_dtoa_r+0x328>)
 801440a:	4650      	mov	r0, sl
 801440c:	4659      	mov	r1, fp
 801440e:	f7eb ff53 	bl	80002b8 <__aeabi_dsub>
 8014412:	a381      	add	r3, pc, #516	; (adr r3, 8014618 <_dtoa_r+0x308>)
 8014414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014418:	f7ec f906 	bl	8000628 <__aeabi_dmul>
 801441c:	a380      	add	r3, pc, #512	; (adr r3, 8014620 <_dtoa_r+0x310>)
 801441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014422:	f7eb ff4b 	bl	80002bc <__adddf3>
 8014426:	4606      	mov	r6, r0
 8014428:	4628      	mov	r0, r5
 801442a:	460f      	mov	r7, r1
 801442c:	f7ec f892 	bl	8000554 <__aeabi_i2d>
 8014430:	a37d      	add	r3, pc, #500	; (adr r3, 8014628 <_dtoa_r+0x318>)
 8014432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014436:	f7ec f8f7 	bl	8000628 <__aeabi_dmul>
 801443a:	4602      	mov	r2, r0
 801443c:	460b      	mov	r3, r1
 801443e:	4630      	mov	r0, r6
 8014440:	4639      	mov	r1, r7
 8014442:	f7eb ff3b 	bl	80002bc <__adddf3>
 8014446:	4606      	mov	r6, r0
 8014448:	460f      	mov	r7, r1
 801444a:	f7ec fb9d 	bl	8000b88 <__aeabi_d2iz>
 801444e:	2200      	movs	r2, #0
 8014450:	4682      	mov	sl, r0
 8014452:	2300      	movs	r3, #0
 8014454:	4630      	mov	r0, r6
 8014456:	4639      	mov	r1, r7
 8014458:	f7ec fb58 	bl	8000b0c <__aeabi_dcmplt>
 801445c:	b148      	cbz	r0, 8014472 <_dtoa_r+0x162>
 801445e:	4650      	mov	r0, sl
 8014460:	f7ec f878 	bl	8000554 <__aeabi_i2d>
 8014464:	4632      	mov	r2, r6
 8014466:	463b      	mov	r3, r7
 8014468:	f7ec fb46 	bl	8000af8 <__aeabi_dcmpeq>
 801446c:	b908      	cbnz	r0, 8014472 <_dtoa_r+0x162>
 801446e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014472:	f1ba 0f16 	cmp.w	sl, #22
 8014476:	d859      	bhi.n	801452c <_dtoa_r+0x21c>
 8014478:	4970      	ldr	r1, [pc, #448]	; (801463c <_dtoa_r+0x32c>)
 801447a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801447e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014486:	f7ec fb5f 	bl	8000b48 <__aeabi_dcmpgt>
 801448a:	2800      	cmp	r0, #0
 801448c:	d050      	beq.n	8014530 <_dtoa_r+0x220>
 801448e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014492:	2300      	movs	r3, #0
 8014494:	930f      	str	r3, [sp, #60]	; 0x3c
 8014496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014498:	1b5d      	subs	r5, r3, r5
 801449a:	f1b5 0801 	subs.w	r8, r5, #1
 801449e:	bf49      	itett	mi
 80144a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80144a4:	2300      	movpl	r3, #0
 80144a6:	9305      	strmi	r3, [sp, #20]
 80144a8:	f04f 0800 	movmi.w	r8, #0
 80144ac:	bf58      	it	pl
 80144ae:	9305      	strpl	r3, [sp, #20]
 80144b0:	f1ba 0f00 	cmp.w	sl, #0
 80144b4:	db3e      	blt.n	8014534 <_dtoa_r+0x224>
 80144b6:	2300      	movs	r3, #0
 80144b8:	44d0      	add	r8, sl
 80144ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80144be:	9307      	str	r3, [sp, #28]
 80144c0:	9b06      	ldr	r3, [sp, #24]
 80144c2:	2b09      	cmp	r3, #9
 80144c4:	f200 8090 	bhi.w	80145e8 <_dtoa_r+0x2d8>
 80144c8:	2b05      	cmp	r3, #5
 80144ca:	bfc4      	itt	gt
 80144cc:	3b04      	subgt	r3, #4
 80144ce:	9306      	strgt	r3, [sp, #24]
 80144d0:	9b06      	ldr	r3, [sp, #24]
 80144d2:	f1a3 0302 	sub.w	r3, r3, #2
 80144d6:	bfcc      	ite	gt
 80144d8:	2500      	movgt	r5, #0
 80144da:	2501      	movle	r5, #1
 80144dc:	2b03      	cmp	r3, #3
 80144de:	f200 808f 	bhi.w	8014600 <_dtoa_r+0x2f0>
 80144e2:	e8df f003 	tbb	[pc, r3]
 80144e6:	7f7d      	.short	0x7f7d
 80144e8:	7131      	.short	0x7131
 80144ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80144ee:	441d      	add	r5, r3
 80144f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80144f4:	2820      	cmp	r0, #32
 80144f6:	dd13      	ble.n	8014520 <_dtoa_r+0x210>
 80144f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80144fc:	9b00      	ldr	r3, [sp, #0]
 80144fe:	fa08 f800 	lsl.w	r8, r8, r0
 8014502:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014506:	fa23 f000 	lsr.w	r0, r3, r0
 801450a:	ea48 0000 	orr.w	r0, r8, r0
 801450e:	f7ec f811 	bl	8000534 <__aeabi_ui2d>
 8014512:	2301      	movs	r3, #1
 8014514:	4682      	mov	sl, r0
 8014516:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801451a:	3d01      	subs	r5, #1
 801451c:	9313      	str	r3, [sp, #76]	; 0x4c
 801451e:	e772      	b.n	8014406 <_dtoa_r+0xf6>
 8014520:	9b00      	ldr	r3, [sp, #0]
 8014522:	f1c0 0020 	rsb	r0, r0, #32
 8014526:	fa03 f000 	lsl.w	r0, r3, r0
 801452a:	e7f0      	b.n	801450e <_dtoa_r+0x1fe>
 801452c:	2301      	movs	r3, #1
 801452e:	e7b1      	b.n	8014494 <_dtoa_r+0x184>
 8014530:	900f      	str	r0, [sp, #60]	; 0x3c
 8014532:	e7b0      	b.n	8014496 <_dtoa_r+0x186>
 8014534:	9b05      	ldr	r3, [sp, #20]
 8014536:	eba3 030a 	sub.w	r3, r3, sl
 801453a:	9305      	str	r3, [sp, #20]
 801453c:	f1ca 0300 	rsb	r3, sl, #0
 8014540:	9307      	str	r3, [sp, #28]
 8014542:	2300      	movs	r3, #0
 8014544:	930e      	str	r3, [sp, #56]	; 0x38
 8014546:	e7bb      	b.n	80144c0 <_dtoa_r+0x1b0>
 8014548:	2301      	movs	r3, #1
 801454a:	930a      	str	r3, [sp, #40]	; 0x28
 801454c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801454e:	2b00      	cmp	r3, #0
 8014550:	dd59      	ble.n	8014606 <_dtoa_r+0x2f6>
 8014552:	9302      	str	r3, [sp, #8]
 8014554:	4699      	mov	r9, r3
 8014556:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014558:	2200      	movs	r2, #0
 801455a:	6072      	str	r2, [r6, #4]
 801455c:	2204      	movs	r2, #4
 801455e:	f102 0014 	add.w	r0, r2, #20
 8014562:	4298      	cmp	r0, r3
 8014564:	6871      	ldr	r1, [r6, #4]
 8014566:	d953      	bls.n	8014610 <_dtoa_r+0x300>
 8014568:	4620      	mov	r0, r4
 801456a:	f001 f9e6 	bl	801593a <_Balloc>
 801456e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014570:	6030      	str	r0, [r6, #0]
 8014572:	f1b9 0f0e 	cmp.w	r9, #14
 8014576:	f8d3 b000 	ldr.w	fp, [r3]
 801457a:	f200 80e6 	bhi.w	801474a <_dtoa_r+0x43a>
 801457e:	2d00      	cmp	r5, #0
 8014580:	f000 80e3 	beq.w	801474a <_dtoa_r+0x43a>
 8014584:	ed9d 7b00 	vldr	d7, [sp]
 8014588:	f1ba 0f00 	cmp.w	sl, #0
 801458c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014590:	dd74      	ble.n	801467c <_dtoa_r+0x36c>
 8014592:	4a2a      	ldr	r2, [pc, #168]	; (801463c <_dtoa_r+0x32c>)
 8014594:	f00a 030f 	and.w	r3, sl, #15
 8014598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801459c:	ed93 7b00 	vldr	d7, [r3]
 80145a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80145a4:	06f0      	lsls	r0, r6, #27
 80145a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80145aa:	d565      	bpl.n	8014678 <_dtoa_r+0x368>
 80145ac:	4b24      	ldr	r3, [pc, #144]	; (8014640 <_dtoa_r+0x330>)
 80145ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80145b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145b6:	f7ec f961 	bl	800087c <__aeabi_ddiv>
 80145ba:	e9cd 0100 	strd	r0, r1, [sp]
 80145be:	f006 060f 	and.w	r6, r6, #15
 80145c2:	2503      	movs	r5, #3
 80145c4:	4f1e      	ldr	r7, [pc, #120]	; (8014640 <_dtoa_r+0x330>)
 80145c6:	e04c      	b.n	8014662 <_dtoa_r+0x352>
 80145c8:	2301      	movs	r3, #1
 80145ca:	930a      	str	r3, [sp, #40]	; 0x28
 80145cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145ce:	4453      	add	r3, sl
 80145d0:	f103 0901 	add.w	r9, r3, #1
 80145d4:	9302      	str	r3, [sp, #8]
 80145d6:	464b      	mov	r3, r9
 80145d8:	2b01      	cmp	r3, #1
 80145da:	bfb8      	it	lt
 80145dc:	2301      	movlt	r3, #1
 80145de:	e7ba      	b.n	8014556 <_dtoa_r+0x246>
 80145e0:	2300      	movs	r3, #0
 80145e2:	e7b2      	b.n	801454a <_dtoa_r+0x23a>
 80145e4:	2300      	movs	r3, #0
 80145e6:	e7f0      	b.n	80145ca <_dtoa_r+0x2ba>
 80145e8:	2501      	movs	r5, #1
 80145ea:	2300      	movs	r3, #0
 80145ec:	9306      	str	r3, [sp, #24]
 80145ee:	950a      	str	r5, [sp, #40]	; 0x28
 80145f0:	f04f 33ff 	mov.w	r3, #4294967295
 80145f4:	9302      	str	r3, [sp, #8]
 80145f6:	4699      	mov	r9, r3
 80145f8:	2200      	movs	r2, #0
 80145fa:	2312      	movs	r3, #18
 80145fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80145fe:	e7aa      	b.n	8014556 <_dtoa_r+0x246>
 8014600:	2301      	movs	r3, #1
 8014602:	930a      	str	r3, [sp, #40]	; 0x28
 8014604:	e7f4      	b.n	80145f0 <_dtoa_r+0x2e0>
 8014606:	2301      	movs	r3, #1
 8014608:	9302      	str	r3, [sp, #8]
 801460a:	4699      	mov	r9, r3
 801460c:	461a      	mov	r2, r3
 801460e:	e7f5      	b.n	80145fc <_dtoa_r+0x2ec>
 8014610:	3101      	adds	r1, #1
 8014612:	6071      	str	r1, [r6, #4]
 8014614:	0052      	lsls	r2, r2, #1
 8014616:	e7a2      	b.n	801455e <_dtoa_r+0x24e>
 8014618:	636f4361 	.word	0x636f4361
 801461c:	3fd287a7 	.word	0x3fd287a7
 8014620:	8b60c8b3 	.word	0x8b60c8b3
 8014624:	3fc68a28 	.word	0x3fc68a28
 8014628:	509f79fb 	.word	0x509f79fb
 801462c:	3fd34413 	.word	0x3fd34413
 8014630:	7ff00000 	.word	0x7ff00000
 8014634:	080177f4 	.word	0x080177f4
 8014638:	3ff80000 	.word	0x3ff80000
 801463c:	080176f8 	.word	0x080176f8
 8014640:	080176d0 	.word	0x080176d0
 8014644:	08017659 	.word	0x08017659
 8014648:	07f1      	lsls	r1, r6, #31
 801464a:	d508      	bpl.n	801465e <_dtoa_r+0x34e>
 801464c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014654:	f7eb ffe8 	bl	8000628 <__aeabi_dmul>
 8014658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801465c:	3501      	adds	r5, #1
 801465e:	1076      	asrs	r6, r6, #1
 8014660:	3708      	adds	r7, #8
 8014662:	2e00      	cmp	r6, #0
 8014664:	d1f0      	bne.n	8014648 <_dtoa_r+0x338>
 8014666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801466a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801466e:	f7ec f905 	bl	800087c <__aeabi_ddiv>
 8014672:	e9cd 0100 	strd	r0, r1, [sp]
 8014676:	e01a      	b.n	80146ae <_dtoa_r+0x39e>
 8014678:	2502      	movs	r5, #2
 801467a:	e7a3      	b.n	80145c4 <_dtoa_r+0x2b4>
 801467c:	f000 80a0 	beq.w	80147c0 <_dtoa_r+0x4b0>
 8014680:	f1ca 0600 	rsb	r6, sl, #0
 8014684:	4b9f      	ldr	r3, [pc, #636]	; (8014904 <_dtoa_r+0x5f4>)
 8014686:	4fa0      	ldr	r7, [pc, #640]	; (8014908 <_dtoa_r+0x5f8>)
 8014688:	f006 020f 	and.w	r2, r6, #15
 801468c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014698:	f7eb ffc6 	bl	8000628 <__aeabi_dmul>
 801469c:	e9cd 0100 	strd	r0, r1, [sp]
 80146a0:	1136      	asrs	r6, r6, #4
 80146a2:	2300      	movs	r3, #0
 80146a4:	2502      	movs	r5, #2
 80146a6:	2e00      	cmp	r6, #0
 80146a8:	d17f      	bne.n	80147aa <_dtoa_r+0x49a>
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d1e1      	bne.n	8014672 <_dtoa_r+0x362>
 80146ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	f000 8087 	beq.w	80147c4 <_dtoa_r+0x4b4>
 80146b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80146ba:	2200      	movs	r2, #0
 80146bc:	4b93      	ldr	r3, [pc, #588]	; (801490c <_dtoa_r+0x5fc>)
 80146be:	4630      	mov	r0, r6
 80146c0:	4639      	mov	r1, r7
 80146c2:	f7ec fa23 	bl	8000b0c <__aeabi_dcmplt>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d07c      	beq.n	80147c4 <_dtoa_r+0x4b4>
 80146ca:	f1b9 0f00 	cmp.w	r9, #0
 80146ce:	d079      	beq.n	80147c4 <_dtoa_r+0x4b4>
 80146d0:	9b02      	ldr	r3, [sp, #8]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	dd35      	ble.n	8014742 <_dtoa_r+0x432>
 80146d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80146da:	9308      	str	r3, [sp, #32]
 80146dc:	4639      	mov	r1, r7
 80146de:	2200      	movs	r2, #0
 80146e0:	4b8b      	ldr	r3, [pc, #556]	; (8014910 <_dtoa_r+0x600>)
 80146e2:	4630      	mov	r0, r6
 80146e4:	f7eb ffa0 	bl	8000628 <__aeabi_dmul>
 80146e8:	e9cd 0100 	strd	r0, r1, [sp]
 80146ec:	9f02      	ldr	r7, [sp, #8]
 80146ee:	3501      	adds	r5, #1
 80146f0:	4628      	mov	r0, r5
 80146f2:	f7eb ff2f 	bl	8000554 <__aeabi_i2d>
 80146f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146fa:	f7eb ff95 	bl	8000628 <__aeabi_dmul>
 80146fe:	2200      	movs	r2, #0
 8014700:	4b84      	ldr	r3, [pc, #528]	; (8014914 <_dtoa_r+0x604>)
 8014702:	f7eb fddb 	bl	80002bc <__adddf3>
 8014706:	4605      	mov	r5, r0
 8014708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801470c:	2f00      	cmp	r7, #0
 801470e:	d15d      	bne.n	80147cc <_dtoa_r+0x4bc>
 8014710:	2200      	movs	r2, #0
 8014712:	4b81      	ldr	r3, [pc, #516]	; (8014918 <_dtoa_r+0x608>)
 8014714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014718:	f7eb fdce 	bl	80002b8 <__aeabi_dsub>
 801471c:	462a      	mov	r2, r5
 801471e:	4633      	mov	r3, r6
 8014720:	e9cd 0100 	strd	r0, r1, [sp]
 8014724:	f7ec fa10 	bl	8000b48 <__aeabi_dcmpgt>
 8014728:	2800      	cmp	r0, #0
 801472a:	f040 8288 	bne.w	8014c3e <_dtoa_r+0x92e>
 801472e:	462a      	mov	r2, r5
 8014730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014738:	f7ec f9e8 	bl	8000b0c <__aeabi_dcmplt>
 801473c:	2800      	cmp	r0, #0
 801473e:	f040 827c 	bne.w	8014c3a <_dtoa_r+0x92a>
 8014742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014746:	e9cd 2300 	strd	r2, r3, [sp]
 801474a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801474c:	2b00      	cmp	r3, #0
 801474e:	f2c0 8150 	blt.w	80149f2 <_dtoa_r+0x6e2>
 8014752:	f1ba 0f0e 	cmp.w	sl, #14
 8014756:	f300 814c 	bgt.w	80149f2 <_dtoa_r+0x6e2>
 801475a:	4b6a      	ldr	r3, [pc, #424]	; (8014904 <_dtoa_r+0x5f4>)
 801475c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014760:	ed93 7b00 	vldr	d7, [r3]
 8014764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014766:	2b00      	cmp	r3, #0
 8014768:	ed8d 7b02 	vstr	d7, [sp, #8]
 801476c:	f280 80d8 	bge.w	8014920 <_dtoa_r+0x610>
 8014770:	f1b9 0f00 	cmp.w	r9, #0
 8014774:	f300 80d4 	bgt.w	8014920 <_dtoa_r+0x610>
 8014778:	f040 825e 	bne.w	8014c38 <_dtoa_r+0x928>
 801477c:	2200      	movs	r2, #0
 801477e:	4b66      	ldr	r3, [pc, #408]	; (8014918 <_dtoa_r+0x608>)
 8014780:	ec51 0b17 	vmov	r0, r1, d7
 8014784:	f7eb ff50 	bl	8000628 <__aeabi_dmul>
 8014788:	e9dd 2300 	ldrd	r2, r3, [sp]
 801478c:	f7ec f9d2 	bl	8000b34 <__aeabi_dcmpge>
 8014790:	464f      	mov	r7, r9
 8014792:	464e      	mov	r6, r9
 8014794:	2800      	cmp	r0, #0
 8014796:	f040 8234 	bne.w	8014c02 <_dtoa_r+0x8f2>
 801479a:	2331      	movs	r3, #49	; 0x31
 801479c:	f10b 0501 	add.w	r5, fp, #1
 80147a0:	f88b 3000 	strb.w	r3, [fp]
 80147a4:	f10a 0a01 	add.w	sl, sl, #1
 80147a8:	e22f      	b.n	8014c0a <_dtoa_r+0x8fa>
 80147aa:	07f2      	lsls	r2, r6, #31
 80147ac:	d505      	bpl.n	80147ba <_dtoa_r+0x4aa>
 80147ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80147b2:	f7eb ff39 	bl	8000628 <__aeabi_dmul>
 80147b6:	3501      	adds	r5, #1
 80147b8:	2301      	movs	r3, #1
 80147ba:	1076      	asrs	r6, r6, #1
 80147bc:	3708      	adds	r7, #8
 80147be:	e772      	b.n	80146a6 <_dtoa_r+0x396>
 80147c0:	2502      	movs	r5, #2
 80147c2:	e774      	b.n	80146ae <_dtoa_r+0x39e>
 80147c4:	f8cd a020 	str.w	sl, [sp, #32]
 80147c8:	464f      	mov	r7, r9
 80147ca:	e791      	b.n	80146f0 <_dtoa_r+0x3e0>
 80147cc:	4b4d      	ldr	r3, [pc, #308]	; (8014904 <_dtoa_r+0x5f4>)
 80147ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80147d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80147d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d047      	beq.n	801486c <_dtoa_r+0x55c>
 80147dc:	4602      	mov	r2, r0
 80147de:	460b      	mov	r3, r1
 80147e0:	2000      	movs	r0, #0
 80147e2:	494e      	ldr	r1, [pc, #312]	; (801491c <_dtoa_r+0x60c>)
 80147e4:	f7ec f84a 	bl	800087c <__aeabi_ddiv>
 80147e8:	462a      	mov	r2, r5
 80147ea:	4633      	mov	r3, r6
 80147ec:	f7eb fd64 	bl	80002b8 <__aeabi_dsub>
 80147f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147f4:	465d      	mov	r5, fp
 80147f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147fa:	f7ec f9c5 	bl	8000b88 <__aeabi_d2iz>
 80147fe:	4606      	mov	r6, r0
 8014800:	f7eb fea8 	bl	8000554 <__aeabi_i2d>
 8014804:	4602      	mov	r2, r0
 8014806:	460b      	mov	r3, r1
 8014808:	e9dd 0100 	ldrd	r0, r1, [sp]
 801480c:	f7eb fd54 	bl	80002b8 <__aeabi_dsub>
 8014810:	3630      	adds	r6, #48	; 0x30
 8014812:	f805 6b01 	strb.w	r6, [r5], #1
 8014816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801481a:	e9cd 0100 	strd	r0, r1, [sp]
 801481e:	f7ec f975 	bl	8000b0c <__aeabi_dcmplt>
 8014822:	2800      	cmp	r0, #0
 8014824:	d163      	bne.n	80148ee <_dtoa_r+0x5de>
 8014826:	e9dd 2300 	ldrd	r2, r3, [sp]
 801482a:	2000      	movs	r0, #0
 801482c:	4937      	ldr	r1, [pc, #220]	; (801490c <_dtoa_r+0x5fc>)
 801482e:	f7eb fd43 	bl	80002b8 <__aeabi_dsub>
 8014832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014836:	f7ec f969 	bl	8000b0c <__aeabi_dcmplt>
 801483a:	2800      	cmp	r0, #0
 801483c:	f040 80b7 	bne.w	80149ae <_dtoa_r+0x69e>
 8014840:	eba5 030b 	sub.w	r3, r5, fp
 8014844:	429f      	cmp	r7, r3
 8014846:	f77f af7c 	ble.w	8014742 <_dtoa_r+0x432>
 801484a:	2200      	movs	r2, #0
 801484c:	4b30      	ldr	r3, [pc, #192]	; (8014910 <_dtoa_r+0x600>)
 801484e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014852:	f7eb fee9 	bl	8000628 <__aeabi_dmul>
 8014856:	2200      	movs	r2, #0
 8014858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801485c:	4b2c      	ldr	r3, [pc, #176]	; (8014910 <_dtoa_r+0x600>)
 801485e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014862:	f7eb fee1 	bl	8000628 <__aeabi_dmul>
 8014866:	e9cd 0100 	strd	r0, r1, [sp]
 801486a:	e7c4      	b.n	80147f6 <_dtoa_r+0x4e6>
 801486c:	462a      	mov	r2, r5
 801486e:	4633      	mov	r3, r6
 8014870:	f7eb feda 	bl	8000628 <__aeabi_dmul>
 8014874:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014878:	eb0b 0507 	add.w	r5, fp, r7
 801487c:	465e      	mov	r6, fp
 801487e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014882:	f7ec f981 	bl	8000b88 <__aeabi_d2iz>
 8014886:	4607      	mov	r7, r0
 8014888:	f7eb fe64 	bl	8000554 <__aeabi_i2d>
 801488c:	3730      	adds	r7, #48	; 0x30
 801488e:	4602      	mov	r2, r0
 8014890:	460b      	mov	r3, r1
 8014892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014896:	f7eb fd0f 	bl	80002b8 <__aeabi_dsub>
 801489a:	f806 7b01 	strb.w	r7, [r6], #1
 801489e:	42ae      	cmp	r6, r5
 80148a0:	e9cd 0100 	strd	r0, r1, [sp]
 80148a4:	f04f 0200 	mov.w	r2, #0
 80148a8:	d126      	bne.n	80148f8 <_dtoa_r+0x5e8>
 80148aa:	4b1c      	ldr	r3, [pc, #112]	; (801491c <_dtoa_r+0x60c>)
 80148ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148b0:	f7eb fd04 	bl	80002bc <__adddf3>
 80148b4:	4602      	mov	r2, r0
 80148b6:	460b      	mov	r3, r1
 80148b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148bc:	f7ec f944 	bl	8000b48 <__aeabi_dcmpgt>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d174      	bne.n	80149ae <_dtoa_r+0x69e>
 80148c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80148c8:	2000      	movs	r0, #0
 80148ca:	4914      	ldr	r1, [pc, #80]	; (801491c <_dtoa_r+0x60c>)
 80148cc:	f7eb fcf4 	bl	80002b8 <__aeabi_dsub>
 80148d0:	4602      	mov	r2, r0
 80148d2:	460b      	mov	r3, r1
 80148d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148d8:	f7ec f918 	bl	8000b0c <__aeabi_dcmplt>
 80148dc:	2800      	cmp	r0, #0
 80148de:	f43f af30 	beq.w	8014742 <_dtoa_r+0x432>
 80148e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148e6:	2b30      	cmp	r3, #48	; 0x30
 80148e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80148ec:	d002      	beq.n	80148f4 <_dtoa_r+0x5e4>
 80148ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80148f2:	e04a      	b.n	801498a <_dtoa_r+0x67a>
 80148f4:	4615      	mov	r5, r2
 80148f6:	e7f4      	b.n	80148e2 <_dtoa_r+0x5d2>
 80148f8:	4b05      	ldr	r3, [pc, #20]	; (8014910 <_dtoa_r+0x600>)
 80148fa:	f7eb fe95 	bl	8000628 <__aeabi_dmul>
 80148fe:	e9cd 0100 	strd	r0, r1, [sp]
 8014902:	e7bc      	b.n	801487e <_dtoa_r+0x56e>
 8014904:	080176f8 	.word	0x080176f8
 8014908:	080176d0 	.word	0x080176d0
 801490c:	3ff00000 	.word	0x3ff00000
 8014910:	40240000 	.word	0x40240000
 8014914:	401c0000 	.word	0x401c0000
 8014918:	40140000 	.word	0x40140000
 801491c:	3fe00000 	.word	0x3fe00000
 8014920:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014924:	465d      	mov	r5, fp
 8014926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801492a:	4630      	mov	r0, r6
 801492c:	4639      	mov	r1, r7
 801492e:	f7eb ffa5 	bl	800087c <__aeabi_ddiv>
 8014932:	f7ec f929 	bl	8000b88 <__aeabi_d2iz>
 8014936:	4680      	mov	r8, r0
 8014938:	f7eb fe0c 	bl	8000554 <__aeabi_i2d>
 801493c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014940:	f7eb fe72 	bl	8000628 <__aeabi_dmul>
 8014944:	4602      	mov	r2, r0
 8014946:	460b      	mov	r3, r1
 8014948:	4630      	mov	r0, r6
 801494a:	4639      	mov	r1, r7
 801494c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014950:	f7eb fcb2 	bl	80002b8 <__aeabi_dsub>
 8014954:	f805 6b01 	strb.w	r6, [r5], #1
 8014958:	eba5 060b 	sub.w	r6, r5, fp
 801495c:	45b1      	cmp	r9, r6
 801495e:	4602      	mov	r2, r0
 8014960:	460b      	mov	r3, r1
 8014962:	d139      	bne.n	80149d8 <_dtoa_r+0x6c8>
 8014964:	f7eb fcaa 	bl	80002bc <__adddf3>
 8014968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801496c:	4606      	mov	r6, r0
 801496e:	460f      	mov	r7, r1
 8014970:	f7ec f8ea 	bl	8000b48 <__aeabi_dcmpgt>
 8014974:	b9c8      	cbnz	r0, 80149aa <_dtoa_r+0x69a>
 8014976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801497a:	4630      	mov	r0, r6
 801497c:	4639      	mov	r1, r7
 801497e:	f7ec f8bb 	bl	8000af8 <__aeabi_dcmpeq>
 8014982:	b110      	cbz	r0, 801498a <_dtoa_r+0x67a>
 8014984:	f018 0f01 	tst.w	r8, #1
 8014988:	d10f      	bne.n	80149aa <_dtoa_r+0x69a>
 801498a:	9904      	ldr	r1, [sp, #16]
 801498c:	4620      	mov	r0, r4
 801498e:	f001 f808 	bl	80159a2 <_Bfree>
 8014992:	2300      	movs	r3, #0
 8014994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014996:	702b      	strb	r3, [r5, #0]
 8014998:	f10a 0301 	add.w	r3, sl, #1
 801499c:	6013      	str	r3, [r2, #0]
 801499e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f000 8241 	beq.w	8014e28 <_dtoa_r+0xb18>
 80149a6:	601d      	str	r5, [r3, #0]
 80149a8:	e23e      	b.n	8014e28 <_dtoa_r+0xb18>
 80149aa:	f8cd a020 	str.w	sl, [sp, #32]
 80149ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80149b2:	2a39      	cmp	r2, #57	; 0x39
 80149b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80149b8:	d108      	bne.n	80149cc <_dtoa_r+0x6bc>
 80149ba:	459b      	cmp	fp, r3
 80149bc:	d10a      	bne.n	80149d4 <_dtoa_r+0x6c4>
 80149be:	9b08      	ldr	r3, [sp, #32]
 80149c0:	3301      	adds	r3, #1
 80149c2:	9308      	str	r3, [sp, #32]
 80149c4:	2330      	movs	r3, #48	; 0x30
 80149c6:	f88b 3000 	strb.w	r3, [fp]
 80149ca:	465b      	mov	r3, fp
 80149cc:	781a      	ldrb	r2, [r3, #0]
 80149ce:	3201      	adds	r2, #1
 80149d0:	701a      	strb	r2, [r3, #0]
 80149d2:	e78c      	b.n	80148ee <_dtoa_r+0x5de>
 80149d4:	461d      	mov	r5, r3
 80149d6:	e7ea      	b.n	80149ae <_dtoa_r+0x69e>
 80149d8:	2200      	movs	r2, #0
 80149da:	4b9b      	ldr	r3, [pc, #620]	; (8014c48 <_dtoa_r+0x938>)
 80149dc:	f7eb fe24 	bl	8000628 <__aeabi_dmul>
 80149e0:	2200      	movs	r2, #0
 80149e2:	2300      	movs	r3, #0
 80149e4:	4606      	mov	r6, r0
 80149e6:	460f      	mov	r7, r1
 80149e8:	f7ec f886 	bl	8000af8 <__aeabi_dcmpeq>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d09a      	beq.n	8014926 <_dtoa_r+0x616>
 80149f0:	e7cb      	b.n	801498a <_dtoa_r+0x67a>
 80149f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149f4:	2a00      	cmp	r2, #0
 80149f6:	f000 808b 	beq.w	8014b10 <_dtoa_r+0x800>
 80149fa:	9a06      	ldr	r2, [sp, #24]
 80149fc:	2a01      	cmp	r2, #1
 80149fe:	dc6e      	bgt.n	8014ade <_dtoa_r+0x7ce>
 8014a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014a02:	2a00      	cmp	r2, #0
 8014a04:	d067      	beq.n	8014ad6 <_dtoa_r+0x7c6>
 8014a06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014a0a:	9f07      	ldr	r7, [sp, #28]
 8014a0c:	9d05      	ldr	r5, [sp, #20]
 8014a0e:	9a05      	ldr	r2, [sp, #20]
 8014a10:	2101      	movs	r1, #1
 8014a12:	441a      	add	r2, r3
 8014a14:	4620      	mov	r0, r4
 8014a16:	9205      	str	r2, [sp, #20]
 8014a18:	4498      	add	r8, r3
 8014a1a:	f001 f8a0 	bl	8015b5e <__i2b>
 8014a1e:	4606      	mov	r6, r0
 8014a20:	2d00      	cmp	r5, #0
 8014a22:	dd0c      	ble.n	8014a3e <_dtoa_r+0x72e>
 8014a24:	f1b8 0f00 	cmp.w	r8, #0
 8014a28:	dd09      	ble.n	8014a3e <_dtoa_r+0x72e>
 8014a2a:	4545      	cmp	r5, r8
 8014a2c:	9a05      	ldr	r2, [sp, #20]
 8014a2e:	462b      	mov	r3, r5
 8014a30:	bfa8      	it	ge
 8014a32:	4643      	movge	r3, r8
 8014a34:	1ad2      	subs	r2, r2, r3
 8014a36:	9205      	str	r2, [sp, #20]
 8014a38:	1aed      	subs	r5, r5, r3
 8014a3a:	eba8 0803 	sub.w	r8, r8, r3
 8014a3e:	9b07      	ldr	r3, [sp, #28]
 8014a40:	b1eb      	cbz	r3, 8014a7e <_dtoa_r+0x76e>
 8014a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d067      	beq.n	8014b18 <_dtoa_r+0x808>
 8014a48:	b18f      	cbz	r7, 8014a6e <_dtoa_r+0x75e>
 8014a4a:	4631      	mov	r1, r6
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	4620      	mov	r0, r4
 8014a50:	f001 f924 	bl	8015c9c <__pow5mult>
 8014a54:	9a04      	ldr	r2, [sp, #16]
 8014a56:	4601      	mov	r1, r0
 8014a58:	4606      	mov	r6, r0
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f001 f888 	bl	8015b70 <__multiply>
 8014a60:	9904      	ldr	r1, [sp, #16]
 8014a62:	9008      	str	r0, [sp, #32]
 8014a64:	4620      	mov	r0, r4
 8014a66:	f000 ff9c 	bl	80159a2 <_Bfree>
 8014a6a:	9b08      	ldr	r3, [sp, #32]
 8014a6c:	9304      	str	r3, [sp, #16]
 8014a6e:	9b07      	ldr	r3, [sp, #28]
 8014a70:	1bda      	subs	r2, r3, r7
 8014a72:	d004      	beq.n	8014a7e <_dtoa_r+0x76e>
 8014a74:	9904      	ldr	r1, [sp, #16]
 8014a76:	4620      	mov	r0, r4
 8014a78:	f001 f910 	bl	8015c9c <__pow5mult>
 8014a7c:	9004      	str	r0, [sp, #16]
 8014a7e:	2101      	movs	r1, #1
 8014a80:	4620      	mov	r0, r4
 8014a82:	f001 f86c 	bl	8015b5e <__i2b>
 8014a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a88:	4607      	mov	r7, r0
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f000 81d0 	beq.w	8014e30 <_dtoa_r+0xb20>
 8014a90:	461a      	mov	r2, r3
 8014a92:	4601      	mov	r1, r0
 8014a94:	4620      	mov	r0, r4
 8014a96:	f001 f901 	bl	8015c9c <__pow5mult>
 8014a9a:	9b06      	ldr	r3, [sp, #24]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	4607      	mov	r7, r0
 8014aa0:	dc40      	bgt.n	8014b24 <_dtoa_r+0x814>
 8014aa2:	9b00      	ldr	r3, [sp, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d139      	bne.n	8014b1c <_dtoa_r+0x80c>
 8014aa8:	9b01      	ldr	r3, [sp, #4]
 8014aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d136      	bne.n	8014b20 <_dtoa_r+0x810>
 8014ab2:	9b01      	ldr	r3, [sp, #4]
 8014ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ab8:	0d1b      	lsrs	r3, r3, #20
 8014aba:	051b      	lsls	r3, r3, #20
 8014abc:	b12b      	cbz	r3, 8014aca <_dtoa_r+0x7ba>
 8014abe:	9b05      	ldr	r3, [sp, #20]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	9305      	str	r3, [sp, #20]
 8014ac4:	f108 0801 	add.w	r8, r8, #1
 8014ac8:	2301      	movs	r3, #1
 8014aca:	9307      	str	r3, [sp, #28]
 8014acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d12a      	bne.n	8014b28 <_dtoa_r+0x818>
 8014ad2:	2001      	movs	r0, #1
 8014ad4:	e030      	b.n	8014b38 <_dtoa_r+0x828>
 8014ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ad8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014adc:	e795      	b.n	8014a0a <_dtoa_r+0x6fa>
 8014ade:	9b07      	ldr	r3, [sp, #28]
 8014ae0:	f109 37ff 	add.w	r7, r9, #4294967295
 8014ae4:	42bb      	cmp	r3, r7
 8014ae6:	bfbf      	itttt	lt
 8014ae8:	9b07      	ldrlt	r3, [sp, #28]
 8014aea:	9707      	strlt	r7, [sp, #28]
 8014aec:	1afa      	sublt	r2, r7, r3
 8014aee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014af0:	bfbb      	ittet	lt
 8014af2:	189b      	addlt	r3, r3, r2
 8014af4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014af6:	1bdf      	subge	r7, r3, r7
 8014af8:	2700      	movlt	r7, #0
 8014afa:	f1b9 0f00 	cmp.w	r9, #0
 8014afe:	bfb5      	itete	lt
 8014b00:	9b05      	ldrlt	r3, [sp, #20]
 8014b02:	9d05      	ldrge	r5, [sp, #20]
 8014b04:	eba3 0509 	sublt.w	r5, r3, r9
 8014b08:	464b      	movge	r3, r9
 8014b0a:	bfb8      	it	lt
 8014b0c:	2300      	movlt	r3, #0
 8014b0e:	e77e      	b.n	8014a0e <_dtoa_r+0x6fe>
 8014b10:	9f07      	ldr	r7, [sp, #28]
 8014b12:	9d05      	ldr	r5, [sp, #20]
 8014b14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014b16:	e783      	b.n	8014a20 <_dtoa_r+0x710>
 8014b18:	9a07      	ldr	r2, [sp, #28]
 8014b1a:	e7ab      	b.n	8014a74 <_dtoa_r+0x764>
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	e7d4      	b.n	8014aca <_dtoa_r+0x7ba>
 8014b20:	9b00      	ldr	r3, [sp, #0]
 8014b22:	e7d2      	b.n	8014aca <_dtoa_r+0x7ba>
 8014b24:	2300      	movs	r3, #0
 8014b26:	9307      	str	r3, [sp, #28]
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014b2e:	6918      	ldr	r0, [r3, #16]
 8014b30:	f000 ffc7 	bl	8015ac2 <__hi0bits>
 8014b34:	f1c0 0020 	rsb	r0, r0, #32
 8014b38:	4440      	add	r0, r8
 8014b3a:	f010 001f 	ands.w	r0, r0, #31
 8014b3e:	d047      	beq.n	8014bd0 <_dtoa_r+0x8c0>
 8014b40:	f1c0 0320 	rsb	r3, r0, #32
 8014b44:	2b04      	cmp	r3, #4
 8014b46:	dd3b      	ble.n	8014bc0 <_dtoa_r+0x8b0>
 8014b48:	9b05      	ldr	r3, [sp, #20]
 8014b4a:	f1c0 001c 	rsb	r0, r0, #28
 8014b4e:	4403      	add	r3, r0
 8014b50:	9305      	str	r3, [sp, #20]
 8014b52:	4405      	add	r5, r0
 8014b54:	4480      	add	r8, r0
 8014b56:	9b05      	ldr	r3, [sp, #20]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	dd05      	ble.n	8014b68 <_dtoa_r+0x858>
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	9904      	ldr	r1, [sp, #16]
 8014b60:	4620      	mov	r0, r4
 8014b62:	f001 f8e9 	bl	8015d38 <__lshift>
 8014b66:	9004      	str	r0, [sp, #16]
 8014b68:	f1b8 0f00 	cmp.w	r8, #0
 8014b6c:	dd05      	ble.n	8014b7a <_dtoa_r+0x86a>
 8014b6e:	4639      	mov	r1, r7
 8014b70:	4642      	mov	r2, r8
 8014b72:	4620      	mov	r0, r4
 8014b74:	f001 f8e0 	bl	8015d38 <__lshift>
 8014b78:	4607      	mov	r7, r0
 8014b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b7c:	b353      	cbz	r3, 8014bd4 <_dtoa_r+0x8c4>
 8014b7e:	4639      	mov	r1, r7
 8014b80:	9804      	ldr	r0, [sp, #16]
 8014b82:	f001 f92d 	bl	8015de0 <__mcmp>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	da24      	bge.n	8014bd4 <_dtoa_r+0x8c4>
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	220a      	movs	r2, #10
 8014b8e:	9904      	ldr	r1, [sp, #16]
 8014b90:	4620      	mov	r0, r4
 8014b92:	f000 ff1d 	bl	80159d0 <__multadd>
 8014b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b98:	9004      	str	r0, [sp, #16]
 8014b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 814d 	beq.w	8014e3e <_dtoa_r+0xb2e>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	220a      	movs	r2, #10
 8014baa:	4620      	mov	r0, r4
 8014bac:	f000 ff10 	bl	80159d0 <__multadd>
 8014bb0:	9b02      	ldr	r3, [sp, #8]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	4606      	mov	r6, r0
 8014bb6:	dc4f      	bgt.n	8014c58 <_dtoa_r+0x948>
 8014bb8:	9b06      	ldr	r3, [sp, #24]
 8014bba:	2b02      	cmp	r3, #2
 8014bbc:	dd4c      	ble.n	8014c58 <_dtoa_r+0x948>
 8014bbe:	e011      	b.n	8014be4 <_dtoa_r+0x8d4>
 8014bc0:	d0c9      	beq.n	8014b56 <_dtoa_r+0x846>
 8014bc2:	9a05      	ldr	r2, [sp, #20]
 8014bc4:	331c      	adds	r3, #28
 8014bc6:	441a      	add	r2, r3
 8014bc8:	9205      	str	r2, [sp, #20]
 8014bca:	441d      	add	r5, r3
 8014bcc:	4498      	add	r8, r3
 8014bce:	e7c2      	b.n	8014b56 <_dtoa_r+0x846>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	e7f6      	b.n	8014bc2 <_dtoa_r+0x8b2>
 8014bd4:	f1b9 0f00 	cmp.w	r9, #0
 8014bd8:	dc38      	bgt.n	8014c4c <_dtoa_r+0x93c>
 8014bda:	9b06      	ldr	r3, [sp, #24]
 8014bdc:	2b02      	cmp	r3, #2
 8014bde:	dd35      	ble.n	8014c4c <_dtoa_r+0x93c>
 8014be0:	f8cd 9008 	str.w	r9, [sp, #8]
 8014be4:	9b02      	ldr	r3, [sp, #8]
 8014be6:	b963      	cbnz	r3, 8014c02 <_dtoa_r+0x8f2>
 8014be8:	4639      	mov	r1, r7
 8014bea:	2205      	movs	r2, #5
 8014bec:	4620      	mov	r0, r4
 8014bee:	f000 feef 	bl	80159d0 <__multadd>
 8014bf2:	4601      	mov	r1, r0
 8014bf4:	4607      	mov	r7, r0
 8014bf6:	9804      	ldr	r0, [sp, #16]
 8014bf8:	f001 f8f2 	bl	8015de0 <__mcmp>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	f73f adcc 	bgt.w	801479a <_dtoa_r+0x48a>
 8014c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c04:	465d      	mov	r5, fp
 8014c06:	ea6f 0a03 	mvn.w	sl, r3
 8014c0a:	f04f 0900 	mov.w	r9, #0
 8014c0e:	4639      	mov	r1, r7
 8014c10:	4620      	mov	r0, r4
 8014c12:	f000 fec6 	bl	80159a2 <_Bfree>
 8014c16:	2e00      	cmp	r6, #0
 8014c18:	f43f aeb7 	beq.w	801498a <_dtoa_r+0x67a>
 8014c1c:	f1b9 0f00 	cmp.w	r9, #0
 8014c20:	d005      	beq.n	8014c2e <_dtoa_r+0x91e>
 8014c22:	45b1      	cmp	r9, r6
 8014c24:	d003      	beq.n	8014c2e <_dtoa_r+0x91e>
 8014c26:	4649      	mov	r1, r9
 8014c28:	4620      	mov	r0, r4
 8014c2a:	f000 feba 	bl	80159a2 <_Bfree>
 8014c2e:	4631      	mov	r1, r6
 8014c30:	4620      	mov	r0, r4
 8014c32:	f000 feb6 	bl	80159a2 <_Bfree>
 8014c36:	e6a8      	b.n	801498a <_dtoa_r+0x67a>
 8014c38:	2700      	movs	r7, #0
 8014c3a:	463e      	mov	r6, r7
 8014c3c:	e7e1      	b.n	8014c02 <_dtoa_r+0x8f2>
 8014c3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014c42:	463e      	mov	r6, r7
 8014c44:	e5a9      	b.n	801479a <_dtoa_r+0x48a>
 8014c46:	bf00      	nop
 8014c48:	40240000 	.word	0x40240000
 8014c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f000 80fa 	beq.w	8014e4c <_dtoa_r+0xb3c>
 8014c58:	2d00      	cmp	r5, #0
 8014c5a:	dd05      	ble.n	8014c68 <_dtoa_r+0x958>
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	462a      	mov	r2, r5
 8014c60:	4620      	mov	r0, r4
 8014c62:	f001 f869 	bl	8015d38 <__lshift>
 8014c66:	4606      	mov	r6, r0
 8014c68:	9b07      	ldr	r3, [sp, #28]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d04c      	beq.n	8014d08 <_dtoa_r+0x9f8>
 8014c6e:	6871      	ldr	r1, [r6, #4]
 8014c70:	4620      	mov	r0, r4
 8014c72:	f000 fe62 	bl	801593a <_Balloc>
 8014c76:	6932      	ldr	r2, [r6, #16]
 8014c78:	3202      	adds	r2, #2
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	0092      	lsls	r2, r2, #2
 8014c7e:	f106 010c 	add.w	r1, r6, #12
 8014c82:	300c      	adds	r0, #12
 8014c84:	f000 fe4e 	bl	8015924 <memcpy>
 8014c88:	2201      	movs	r2, #1
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f001 f853 	bl	8015d38 <__lshift>
 8014c92:	9b00      	ldr	r3, [sp, #0]
 8014c94:	f8cd b014 	str.w	fp, [sp, #20]
 8014c98:	f003 0301 	and.w	r3, r3, #1
 8014c9c:	46b1      	mov	r9, r6
 8014c9e:	9307      	str	r3, [sp, #28]
 8014ca0:	4606      	mov	r6, r0
 8014ca2:	4639      	mov	r1, r7
 8014ca4:	9804      	ldr	r0, [sp, #16]
 8014ca6:	f7ff faa7 	bl	80141f8 <quorem>
 8014caa:	4649      	mov	r1, r9
 8014cac:	4605      	mov	r5, r0
 8014cae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014cb2:	9804      	ldr	r0, [sp, #16]
 8014cb4:	f001 f894 	bl	8015de0 <__mcmp>
 8014cb8:	4632      	mov	r2, r6
 8014cba:	9000      	str	r0, [sp, #0]
 8014cbc:	4639      	mov	r1, r7
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f001 f8a8 	bl	8015e14 <__mdiff>
 8014cc4:	68c3      	ldr	r3, [r0, #12]
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	bb03      	cbnz	r3, 8014d0c <_dtoa_r+0x9fc>
 8014cca:	4601      	mov	r1, r0
 8014ccc:	9008      	str	r0, [sp, #32]
 8014cce:	9804      	ldr	r0, [sp, #16]
 8014cd0:	f001 f886 	bl	8015de0 <__mcmp>
 8014cd4:	9a08      	ldr	r2, [sp, #32]
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	4611      	mov	r1, r2
 8014cda:	4620      	mov	r0, r4
 8014cdc:	9308      	str	r3, [sp, #32]
 8014cde:	f000 fe60 	bl	80159a2 <_Bfree>
 8014ce2:	9b08      	ldr	r3, [sp, #32]
 8014ce4:	b9a3      	cbnz	r3, 8014d10 <_dtoa_r+0xa00>
 8014ce6:	9a06      	ldr	r2, [sp, #24]
 8014ce8:	b992      	cbnz	r2, 8014d10 <_dtoa_r+0xa00>
 8014cea:	9a07      	ldr	r2, [sp, #28]
 8014cec:	b982      	cbnz	r2, 8014d10 <_dtoa_r+0xa00>
 8014cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014cf2:	d029      	beq.n	8014d48 <_dtoa_r+0xa38>
 8014cf4:	9b00      	ldr	r3, [sp, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	dd01      	ble.n	8014cfe <_dtoa_r+0x9ee>
 8014cfa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014cfe:	9b05      	ldr	r3, [sp, #20]
 8014d00:	1c5d      	adds	r5, r3, #1
 8014d02:	f883 8000 	strb.w	r8, [r3]
 8014d06:	e782      	b.n	8014c0e <_dtoa_r+0x8fe>
 8014d08:	4630      	mov	r0, r6
 8014d0a:	e7c2      	b.n	8014c92 <_dtoa_r+0x982>
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	e7e3      	b.n	8014cd8 <_dtoa_r+0x9c8>
 8014d10:	9a00      	ldr	r2, [sp, #0]
 8014d12:	2a00      	cmp	r2, #0
 8014d14:	db04      	blt.n	8014d20 <_dtoa_r+0xa10>
 8014d16:	d125      	bne.n	8014d64 <_dtoa_r+0xa54>
 8014d18:	9a06      	ldr	r2, [sp, #24]
 8014d1a:	bb1a      	cbnz	r2, 8014d64 <_dtoa_r+0xa54>
 8014d1c:	9a07      	ldr	r2, [sp, #28]
 8014d1e:	bb0a      	cbnz	r2, 8014d64 <_dtoa_r+0xa54>
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	ddec      	ble.n	8014cfe <_dtoa_r+0x9ee>
 8014d24:	2201      	movs	r2, #1
 8014d26:	9904      	ldr	r1, [sp, #16]
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f001 f805 	bl	8015d38 <__lshift>
 8014d2e:	4639      	mov	r1, r7
 8014d30:	9004      	str	r0, [sp, #16]
 8014d32:	f001 f855 	bl	8015de0 <__mcmp>
 8014d36:	2800      	cmp	r0, #0
 8014d38:	dc03      	bgt.n	8014d42 <_dtoa_r+0xa32>
 8014d3a:	d1e0      	bne.n	8014cfe <_dtoa_r+0x9ee>
 8014d3c:	f018 0f01 	tst.w	r8, #1
 8014d40:	d0dd      	beq.n	8014cfe <_dtoa_r+0x9ee>
 8014d42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d46:	d1d8      	bne.n	8014cfa <_dtoa_r+0x9ea>
 8014d48:	9b05      	ldr	r3, [sp, #20]
 8014d4a:	9a05      	ldr	r2, [sp, #20]
 8014d4c:	1c5d      	adds	r5, r3, #1
 8014d4e:	2339      	movs	r3, #57	; 0x39
 8014d50:	7013      	strb	r3, [r2, #0]
 8014d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d56:	2b39      	cmp	r3, #57	; 0x39
 8014d58:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d5c:	d04f      	beq.n	8014dfe <_dtoa_r+0xaee>
 8014d5e:	3301      	adds	r3, #1
 8014d60:	7013      	strb	r3, [r2, #0]
 8014d62:	e754      	b.n	8014c0e <_dtoa_r+0x8fe>
 8014d64:	9a05      	ldr	r2, [sp, #20]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f102 0501 	add.w	r5, r2, #1
 8014d6c:	dd06      	ble.n	8014d7c <_dtoa_r+0xa6c>
 8014d6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d72:	d0e9      	beq.n	8014d48 <_dtoa_r+0xa38>
 8014d74:	f108 0801 	add.w	r8, r8, #1
 8014d78:	9b05      	ldr	r3, [sp, #20]
 8014d7a:	e7c2      	b.n	8014d02 <_dtoa_r+0x9f2>
 8014d7c:	9a02      	ldr	r2, [sp, #8]
 8014d7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014d82:	eba5 030b 	sub.w	r3, r5, fp
 8014d86:	4293      	cmp	r3, r2
 8014d88:	d021      	beq.n	8014dce <_dtoa_r+0xabe>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	220a      	movs	r2, #10
 8014d8e:	9904      	ldr	r1, [sp, #16]
 8014d90:	4620      	mov	r0, r4
 8014d92:	f000 fe1d 	bl	80159d0 <__multadd>
 8014d96:	45b1      	cmp	r9, r6
 8014d98:	9004      	str	r0, [sp, #16]
 8014d9a:	f04f 0300 	mov.w	r3, #0
 8014d9e:	f04f 020a 	mov.w	r2, #10
 8014da2:	4649      	mov	r1, r9
 8014da4:	4620      	mov	r0, r4
 8014da6:	d105      	bne.n	8014db4 <_dtoa_r+0xaa4>
 8014da8:	f000 fe12 	bl	80159d0 <__multadd>
 8014dac:	4681      	mov	r9, r0
 8014dae:	4606      	mov	r6, r0
 8014db0:	9505      	str	r5, [sp, #20]
 8014db2:	e776      	b.n	8014ca2 <_dtoa_r+0x992>
 8014db4:	f000 fe0c 	bl	80159d0 <__multadd>
 8014db8:	4631      	mov	r1, r6
 8014dba:	4681      	mov	r9, r0
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	220a      	movs	r2, #10
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f000 fe05 	bl	80159d0 <__multadd>
 8014dc6:	4606      	mov	r6, r0
 8014dc8:	e7f2      	b.n	8014db0 <_dtoa_r+0xaa0>
 8014dca:	f04f 0900 	mov.w	r9, #0
 8014dce:	2201      	movs	r2, #1
 8014dd0:	9904      	ldr	r1, [sp, #16]
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f000 ffb0 	bl	8015d38 <__lshift>
 8014dd8:	4639      	mov	r1, r7
 8014dda:	9004      	str	r0, [sp, #16]
 8014ddc:	f001 f800 	bl	8015de0 <__mcmp>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	dcb6      	bgt.n	8014d52 <_dtoa_r+0xa42>
 8014de4:	d102      	bne.n	8014dec <_dtoa_r+0xadc>
 8014de6:	f018 0f01 	tst.w	r8, #1
 8014dea:	d1b2      	bne.n	8014d52 <_dtoa_r+0xa42>
 8014dec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014df0:	2b30      	cmp	r3, #48	; 0x30
 8014df2:	f105 32ff 	add.w	r2, r5, #4294967295
 8014df6:	f47f af0a 	bne.w	8014c0e <_dtoa_r+0x8fe>
 8014dfa:	4615      	mov	r5, r2
 8014dfc:	e7f6      	b.n	8014dec <_dtoa_r+0xadc>
 8014dfe:	4593      	cmp	fp, r2
 8014e00:	d105      	bne.n	8014e0e <_dtoa_r+0xafe>
 8014e02:	2331      	movs	r3, #49	; 0x31
 8014e04:	f10a 0a01 	add.w	sl, sl, #1
 8014e08:	f88b 3000 	strb.w	r3, [fp]
 8014e0c:	e6ff      	b.n	8014c0e <_dtoa_r+0x8fe>
 8014e0e:	4615      	mov	r5, r2
 8014e10:	e79f      	b.n	8014d52 <_dtoa_r+0xa42>
 8014e12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014e78 <_dtoa_r+0xb68>
 8014e16:	e007      	b.n	8014e28 <_dtoa_r+0xb18>
 8014e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014e7c <_dtoa_r+0xb6c>
 8014e1e:	b11b      	cbz	r3, 8014e28 <_dtoa_r+0xb18>
 8014e20:	f10b 0308 	add.w	r3, fp, #8
 8014e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e26:	6013      	str	r3, [r2, #0]
 8014e28:	4658      	mov	r0, fp
 8014e2a:	b017      	add	sp, #92	; 0x5c
 8014e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e30:	9b06      	ldr	r3, [sp, #24]
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	f77f ae35 	ble.w	8014aa2 <_dtoa_r+0x792>
 8014e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e3a:	9307      	str	r3, [sp, #28]
 8014e3c:	e649      	b.n	8014ad2 <_dtoa_r+0x7c2>
 8014e3e:	9b02      	ldr	r3, [sp, #8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	dc03      	bgt.n	8014e4c <_dtoa_r+0xb3c>
 8014e44:	9b06      	ldr	r3, [sp, #24]
 8014e46:	2b02      	cmp	r3, #2
 8014e48:	f73f aecc 	bgt.w	8014be4 <_dtoa_r+0x8d4>
 8014e4c:	465d      	mov	r5, fp
 8014e4e:	4639      	mov	r1, r7
 8014e50:	9804      	ldr	r0, [sp, #16]
 8014e52:	f7ff f9d1 	bl	80141f8 <quorem>
 8014e56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014e5a:	f805 8b01 	strb.w	r8, [r5], #1
 8014e5e:	9a02      	ldr	r2, [sp, #8]
 8014e60:	eba5 030b 	sub.w	r3, r5, fp
 8014e64:	429a      	cmp	r2, r3
 8014e66:	ddb0      	ble.n	8014dca <_dtoa_r+0xaba>
 8014e68:	2300      	movs	r3, #0
 8014e6a:	220a      	movs	r2, #10
 8014e6c:	9904      	ldr	r1, [sp, #16]
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f000 fdae 	bl	80159d0 <__multadd>
 8014e74:	9004      	str	r0, [sp, #16]
 8014e76:	e7ea      	b.n	8014e4e <_dtoa_r+0xb3e>
 8014e78:	080177f3 	.word	0x080177f3
 8014e7c:	08017650 	.word	0x08017650

08014e80 <__sflush_r>:
 8014e80:	898a      	ldrh	r2, [r1, #12]
 8014e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e86:	4605      	mov	r5, r0
 8014e88:	0710      	lsls	r0, r2, #28
 8014e8a:	460c      	mov	r4, r1
 8014e8c:	d458      	bmi.n	8014f40 <__sflush_r+0xc0>
 8014e8e:	684b      	ldr	r3, [r1, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	dc05      	bgt.n	8014ea0 <__sflush_r+0x20>
 8014e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	dc02      	bgt.n	8014ea0 <__sflush_r+0x20>
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ea2:	2e00      	cmp	r6, #0
 8014ea4:	d0f9      	beq.n	8014e9a <__sflush_r+0x1a>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014eac:	682f      	ldr	r7, [r5, #0]
 8014eae:	6a21      	ldr	r1, [r4, #32]
 8014eb0:	602b      	str	r3, [r5, #0]
 8014eb2:	d032      	beq.n	8014f1a <__sflush_r+0x9a>
 8014eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014eb6:	89a3      	ldrh	r3, [r4, #12]
 8014eb8:	075a      	lsls	r2, r3, #29
 8014eba:	d505      	bpl.n	8014ec8 <__sflush_r+0x48>
 8014ebc:	6863      	ldr	r3, [r4, #4]
 8014ebe:	1ac0      	subs	r0, r0, r3
 8014ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ec2:	b10b      	cbz	r3, 8014ec8 <__sflush_r+0x48>
 8014ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ec6:	1ac0      	subs	r0, r0, r3
 8014ec8:	2300      	movs	r3, #0
 8014eca:	4602      	mov	r2, r0
 8014ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ece:	6a21      	ldr	r1, [r4, #32]
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	47b0      	blx	r6
 8014ed4:	1c43      	adds	r3, r0, #1
 8014ed6:	89a3      	ldrh	r3, [r4, #12]
 8014ed8:	d106      	bne.n	8014ee8 <__sflush_r+0x68>
 8014eda:	6829      	ldr	r1, [r5, #0]
 8014edc:	291d      	cmp	r1, #29
 8014ede:	d848      	bhi.n	8014f72 <__sflush_r+0xf2>
 8014ee0:	4a29      	ldr	r2, [pc, #164]	; (8014f88 <__sflush_r+0x108>)
 8014ee2:	40ca      	lsrs	r2, r1
 8014ee4:	07d6      	lsls	r6, r2, #31
 8014ee6:	d544      	bpl.n	8014f72 <__sflush_r+0xf2>
 8014ee8:	2200      	movs	r2, #0
 8014eea:	6062      	str	r2, [r4, #4]
 8014eec:	04d9      	lsls	r1, r3, #19
 8014eee:	6922      	ldr	r2, [r4, #16]
 8014ef0:	6022      	str	r2, [r4, #0]
 8014ef2:	d504      	bpl.n	8014efe <__sflush_r+0x7e>
 8014ef4:	1c42      	adds	r2, r0, #1
 8014ef6:	d101      	bne.n	8014efc <__sflush_r+0x7c>
 8014ef8:	682b      	ldr	r3, [r5, #0]
 8014efa:	b903      	cbnz	r3, 8014efe <__sflush_r+0x7e>
 8014efc:	6560      	str	r0, [r4, #84]	; 0x54
 8014efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f00:	602f      	str	r7, [r5, #0]
 8014f02:	2900      	cmp	r1, #0
 8014f04:	d0c9      	beq.n	8014e9a <__sflush_r+0x1a>
 8014f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f0a:	4299      	cmp	r1, r3
 8014f0c:	d002      	beq.n	8014f14 <__sflush_r+0x94>
 8014f0e:	4628      	mov	r0, r5
 8014f10:	f001 f920 	bl	8016154 <_free_r>
 8014f14:	2000      	movs	r0, #0
 8014f16:	6360      	str	r0, [r4, #52]	; 0x34
 8014f18:	e7c0      	b.n	8014e9c <__sflush_r+0x1c>
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	47b0      	blx	r6
 8014f20:	1c41      	adds	r1, r0, #1
 8014f22:	d1c8      	bne.n	8014eb6 <__sflush_r+0x36>
 8014f24:	682b      	ldr	r3, [r5, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d0c5      	beq.n	8014eb6 <__sflush_r+0x36>
 8014f2a:	2b1d      	cmp	r3, #29
 8014f2c:	d001      	beq.n	8014f32 <__sflush_r+0xb2>
 8014f2e:	2b16      	cmp	r3, #22
 8014f30:	d101      	bne.n	8014f36 <__sflush_r+0xb6>
 8014f32:	602f      	str	r7, [r5, #0]
 8014f34:	e7b1      	b.n	8014e9a <__sflush_r+0x1a>
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f3c:	81a3      	strh	r3, [r4, #12]
 8014f3e:	e7ad      	b.n	8014e9c <__sflush_r+0x1c>
 8014f40:	690f      	ldr	r7, [r1, #16]
 8014f42:	2f00      	cmp	r7, #0
 8014f44:	d0a9      	beq.n	8014e9a <__sflush_r+0x1a>
 8014f46:	0793      	lsls	r3, r2, #30
 8014f48:	680e      	ldr	r6, [r1, #0]
 8014f4a:	bf08      	it	eq
 8014f4c:	694b      	ldreq	r3, [r1, #20]
 8014f4e:	600f      	str	r7, [r1, #0]
 8014f50:	bf18      	it	ne
 8014f52:	2300      	movne	r3, #0
 8014f54:	eba6 0807 	sub.w	r8, r6, r7
 8014f58:	608b      	str	r3, [r1, #8]
 8014f5a:	f1b8 0f00 	cmp.w	r8, #0
 8014f5e:	dd9c      	ble.n	8014e9a <__sflush_r+0x1a>
 8014f60:	4643      	mov	r3, r8
 8014f62:	463a      	mov	r2, r7
 8014f64:	6a21      	ldr	r1, [r4, #32]
 8014f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f68:	4628      	mov	r0, r5
 8014f6a:	47b0      	blx	r6
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	dc06      	bgt.n	8014f7e <__sflush_r+0xfe>
 8014f70:	89a3      	ldrh	r3, [r4, #12]
 8014f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f76:	81a3      	strh	r3, [r4, #12]
 8014f78:	f04f 30ff 	mov.w	r0, #4294967295
 8014f7c:	e78e      	b.n	8014e9c <__sflush_r+0x1c>
 8014f7e:	4407      	add	r7, r0
 8014f80:	eba8 0800 	sub.w	r8, r8, r0
 8014f84:	e7e9      	b.n	8014f5a <__sflush_r+0xda>
 8014f86:	bf00      	nop
 8014f88:	20400001 	.word	0x20400001

08014f8c <_fflush_r>:
 8014f8c:	b538      	push	{r3, r4, r5, lr}
 8014f8e:	690b      	ldr	r3, [r1, #16]
 8014f90:	4605      	mov	r5, r0
 8014f92:	460c      	mov	r4, r1
 8014f94:	b1db      	cbz	r3, 8014fce <_fflush_r+0x42>
 8014f96:	b118      	cbz	r0, 8014fa0 <_fflush_r+0x14>
 8014f98:	6983      	ldr	r3, [r0, #24]
 8014f9a:	b90b      	cbnz	r3, 8014fa0 <_fflush_r+0x14>
 8014f9c:	f000 f860 	bl	8015060 <__sinit>
 8014fa0:	4b0c      	ldr	r3, [pc, #48]	; (8014fd4 <_fflush_r+0x48>)
 8014fa2:	429c      	cmp	r4, r3
 8014fa4:	d109      	bne.n	8014fba <_fflush_r+0x2e>
 8014fa6:	686c      	ldr	r4, [r5, #4]
 8014fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fac:	b17b      	cbz	r3, 8014fce <_fflush_r+0x42>
 8014fae:	4621      	mov	r1, r4
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fb6:	f7ff bf63 	b.w	8014e80 <__sflush_r>
 8014fba:	4b07      	ldr	r3, [pc, #28]	; (8014fd8 <_fflush_r+0x4c>)
 8014fbc:	429c      	cmp	r4, r3
 8014fbe:	d101      	bne.n	8014fc4 <_fflush_r+0x38>
 8014fc0:	68ac      	ldr	r4, [r5, #8]
 8014fc2:	e7f1      	b.n	8014fa8 <_fflush_r+0x1c>
 8014fc4:	4b05      	ldr	r3, [pc, #20]	; (8014fdc <_fflush_r+0x50>)
 8014fc6:	429c      	cmp	r4, r3
 8014fc8:	bf08      	it	eq
 8014fca:	68ec      	ldreq	r4, [r5, #12]
 8014fcc:	e7ec      	b.n	8014fa8 <_fflush_r+0x1c>
 8014fce:	2000      	movs	r0, #0
 8014fd0:	bd38      	pop	{r3, r4, r5, pc}
 8014fd2:	bf00      	nop
 8014fd4:	08017680 	.word	0x08017680
 8014fd8:	080176a0 	.word	0x080176a0
 8014fdc:	08017660 	.word	0x08017660

08014fe0 <std>:
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8014fea:	6083      	str	r3, [r0, #8]
 8014fec:	8181      	strh	r1, [r0, #12]
 8014fee:	6643      	str	r3, [r0, #100]	; 0x64
 8014ff0:	81c2      	strh	r2, [r0, #14]
 8014ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ff6:	6183      	str	r3, [r0, #24]
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	2208      	movs	r2, #8
 8014ffc:	305c      	adds	r0, #92	; 0x5c
 8014ffe:	f7fd f9b7 	bl	8012370 <memset>
 8015002:	4b05      	ldr	r3, [pc, #20]	; (8015018 <std+0x38>)
 8015004:	6263      	str	r3, [r4, #36]	; 0x24
 8015006:	4b05      	ldr	r3, [pc, #20]	; (801501c <std+0x3c>)
 8015008:	62a3      	str	r3, [r4, #40]	; 0x28
 801500a:	4b05      	ldr	r3, [pc, #20]	; (8015020 <std+0x40>)
 801500c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801500e:	4b05      	ldr	r3, [pc, #20]	; (8015024 <std+0x44>)
 8015010:	6224      	str	r4, [r4, #32]
 8015012:	6323      	str	r3, [r4, #48]	; 0x30
 8015014:	bd10      	pop	{r4, pc}
 8015016:	bf00      	nop
 8015018:	080131fd 	.word	0x080131fd
 801501c:	08013223 	.word	0x08013223
 8015020:	0801325b 	.word	0x0801325b
 8015024:	0801327f 	.word	0x0801327f

08015028 <_cleanup_r>:
 8015028:	4901      	ldr	r1, [pc, #4]	; (8015030 <_cleanup_r+0x8>)
 801502a:	f000 b885 	b.w	8015138 <_fwalk_reent>
 801502e:	bf00      	nop
 8015030:	08014f8d 	.word	0x08014f8d

08015034 <__sfmoreglue>:
 8015034:	b570      	push	{r4, r5, r6, lr}
 8015036:	1e4a      	subs	r2, r1, #1
 8015038:	2568      	movs	r5, #104	; 0x68
 801503a:	4355      	muls	r5, r2
 801503c:	460e      	mov	r6, r1
 801503e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015042:	f001 f8d5 	bl	80161f0 <_malloc_r>
 8015046:	4604      	mov	r4, r0
 8015048:	b140      	cbz	r0, 801505c <__sfmoreglue+0x28>
 801504a:	2100      	movs	r1, #0
 801504c:	e9c0 1600 	strd	r1, r6, [r0]
 8015050:	300c      	adds	r0, #12
 8015052:	60a0      	str	r0, [r4, #8]
 8015054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015058:	f7fd f98a 	bl	8012370 <memset>
 801505c:	4620      	mov	r0, r4
 801505e:	bd70      	pop	{r4, r5, r6, pc}

08015060 <__sinit>:
 8015060:	6983      	ldr	r3, [r0, #24]
 8015062:	b510      	push	{r4, lr}
 8015064:	4604      	mov	r4, r0
 8015066:	bb33      	cbnz	r3, 80150b6 <__sinit+0x56>
 8015068:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801506c:	6503      	str	r3, [r0, #80]	; 0x50
 801506e:	4b12      	ldr	r3, [pc, #72]	; (80150b8 <__sinit+0x58>)
 8015070:	4a12      	ldr	r2, [pc, #72]	; (80150bc <__sinit+0x5c>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	6282      	str	r2, [r0, #40]	; 0x28
 8015076:	4298      	cmp	r0, r3
 8015078:	bf04      	itt	eq
 801507a:	2301      	moveq	r3, #1
 801507c:	6183      	streq	r3, [r0, #24]
 801507e:	f000 f81f 	bl	80150c0 <__sfp>
 8015082:	6060      	str	r0, [r4, #4]
 8015084:	4620      	mov	r0, r4
 8015086:	f000 f81b 	bl	80150c0 <__sfp>
 801508a:	60a0      	str	r0, [r4, #8]
 801508c:	4620      	mov	r0, r4
 801508e:	f000 f817 	bl	80150c0 <__sfp>
 8015092:	2200      	movs	r2, #0
 8015094:	60e0      	str	r0, [r4, #12]
 8015096:	2104      	movs	r1, #4
 8015098:	6860      	ldr	r0, [r4, #4]
 801509a:	f7ff ffa1 	bl	8014fe0 <std>
 801509e:	2201      	movs	r2, #1
 80150a0:	2109      	movs	r1, #9
 80150a2:	68a0      	ldr	r0, [r4, #8]
 80150a4:	f7ff ff9c 	bl	8014fe0 <std>
 80150a8:	2202      	movs	r2, #2
 80150aa:	2112      	movs	r1, #18
 80150ac:	68e0      	ldr	r0, [r4, #12]
 80150ae:	f7ff ff97 	bl	8014fe0 <std>
 80150b2:	2301      	movs	r3, #1
 80150b4:	61a3      	str	r3, [r4, #24]
 80150b6:	bd10      	pop	{r4, pc}
 80150b8:	080175c0 	.word	0x080175c0
 80150bc:	08015029 	.word	0x08015029

080150c0 <__sfp>:
 80150c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c2:	4b1b      	ldr	r3, [pc, #108]	; (8015130 <__sfp+0x70>)
 80150c4:	681e      	ldr	r6, [r3, #0]
 80150c6:	69b3      	ldr	r3, [r6, #24]
 80150c8:	4607      	mov	r7, r0
 80150ca:	b913      	cbnz	r3, 80150d2 <__sfp+0x12>
 80150cc:	4630      	mov	r0, r6
 80150ce:	f7ff ffc7 	bl	8015060 <__sinit>
 80150d2:	3648      	adds	r6, #72	; 0x48
 80150d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150d8:	3b01      	subs	r3, #1
 80150da:	d503      	bpl.n	80150e4 <__sfp+0x24>
 80150dc:	6833      	ldr	r3, [r6, #0]
 80150de:	b133      	cbz	r3, 80150ee <__sfp+0x2e>
 80150e0:	6836      	ldr	r6, [r6, #0]
 80150e2:	e7f7      	b.n	80150d4 <__sfp+0x14>
 80150e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80150e8:	b16d      	cbz	r5, 8015106 <__sfp+0x46>
 80150ea:	3468      	adds	r4, #104	; 0x68
 80150ec:	e7f4      	b.n	80150d8 <__sfp+0x18>
 80150ee:	2104      	movs	r1, #4
 80150f0:	4638      	mov	r0, r7
 80150f2:	f7ff ff9f 	bl	8015034 <__sfmoreglue>
 80150f6:	6030      	str	r0, [r6, #0]
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d1f1      	bne.n	80150e0 <__sfp+0x20>
 80150fc:	230c      	movs	r3, #12
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	4604      	mov	r4, r0
 8015102:	4620      	mov	r0, r4
 8015104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015106:	4b0b      	ldr	r3, [pc, #44]	; (8015134 <__sfp+0x74>)
 8015108:	6665      	str	r5, [r4, #100]	; 0x64
 801510a:	e9c4 5500 	strd	r5, r5, [r4]
 801510e:	60a5      	str	r5, [r4, #8]
 8015110:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015114:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015118:	2208      	movs	r2, #8
 801511a:	4629      	mov	r1, r5
 801511c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015120:	f7fd f926 	bl	8012370 <memset>
 8015124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801512c:	e7e9      	b.n	8015102 <__sfp+0x42>
 801512e:	bf00      	nop
 8015130:	080175c0 	.word	0x080175c0
 8015134:	ffff0001 	.word	0xffff0001

08015138 <_fwalk_reent>:
 8015138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801513c:	4680      	mov	r8, r0
 801513e:	4689      	mov	r9, r1
 8015140:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015144:	2600      	movs	r6, #0
 8015146:	b914      	cbnz	r4, 801514e <_fwalk_reent+0x16>
 8015148:	4630      	mov	r0, r6
 801514a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801514e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015152:	3f01      	subs	r7, #1
 8015154:	d501      	bpl.n	801515a <_fwalk_reent+0x22>
 8015156:	6824      	ldr	r4, [r4, #0]
 8015158:	e7f5      	b.n	8015146 <_fwalk_reent+0xe>
 801515a:	89ab      	ldrh	r3, [r5, #12]
 801515c:	2b01      	cmp	r3, #1
 801515e:	d907      	bls.n	8015170 <_fwalk_reent+0x38>
 8015160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015164:	3301      	adds	r3, #1
 8015166:	d003      	beq.n	8015170 <_fwalk_reent+0x38>
 8015168:	4629      	mov	r1, r5
 801516a:	4640      	mov	r0, r8
 801516c:	47c8      	blx	r9
 801516e:	4306      	orrs	r6, r0
 8015170:	3568      	adds	r5, #104	; 0x68
 8015172:	e7ee      	b.n	8015152 <_fwalk_reent+0x1a>

08015174 <rshift>:
 8015174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015176:	6906      	ldr	r6, [r0, #16]
 8015178:	114b      	asrs	r3, r1, #5
 801517a:	429e      	cmp	r6, r3
 801517c:	f100 0414 	add.w	r4, r0, #20
 8015180:	dd30      	ble.n	80151e4 <rshift+0x70>
 8015182:	f011 011f 	ands.w	r1, r1, #31
 8015186:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801518a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801518e:	d108      	bne.n	80151a2 <rshift+0x2e>
 8015190:	4621      	mov	r1, r4
 8015192:	42b2      	cmp	r2, r6
 8015194:	460b      	mov	r3, r1
 8015196:	d211      	bcs.n	80151bc <rshift+0x48>
 8015198:	f852 3b04 	ldr.w	r3, [r2], #4
 801519c:	f841 3b04 	str.w	r3, [r1], #4
 80151a0:	e7f7      	b.n	8015192 <rshift+0x1e>
 80151a2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80151a6:	f1c1 0c20 	rsb	ip, r1, #32
 80151aa:	40cd      	lsrs	r5, r1
 80151ac:	3204      	adds	r2, #4
 80151ae:	4623      	mov	r3, r4
 80151b0:	42b2      	cmp	r2, r6
 80151b2:	4617      	mov	r7, r2
 80151b4:	d30c      	bcc.n	80151d0 <rshift+0x5c>
 80151b6:	601d      	str	r5, [r3, #0]
 80151b8:	b105      	cbz	r5, 80151bc <rshift+0x48>
 80151ba:	3304      	adds	r3, #4
 80151bc:	1b1a      	subs	r2, r3, r4
 80151be:	42a3      	cmp	r3, r4
 80151c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80151c4:	bf08      	it	eq
 80151c6:	2300      	moveq	r3, #0
 80151c8:	6102      	str	r2, [r0, #16]
 80151ca:	bf08      	it	eq
 80151cc:	6143      	streq	r3, [r0, #20]
 80151ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151d0:	683f      	ldr	r7, [r7, #0]
 80151d2:	fa07 f70c 	lsl.w	r7, r7, ip
 80151d6:	433d      	orrs	r5, r7
 80151d8:	f843 5b04 	str.w	r5, [r3], #4
 80151dc:	f852 5b04 	ldr.w	r5, [r2], #4
 80151e0:	40cd      	lsrs	r5, r1
 80151e2:	e7e5      	b.n	80151b0 <rshift+0x3c>
 80151e4:	4623      	mov	r3, r4
 80151e6:	e7e9      	b.n	80151bc <rshift+0x48>

080151e8 <__hexdig_fun>:
 80151e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80151ec:	2b09      	cmp	r3, #9
 80151ee:	d802      	bhi.n	80151f6 <__hexdig_fun+0xe>
 80151f0:	3820      	subs	r0, #32
 80151f2:	b2c0      	uxtb	r0, r0
 80151f4:	4770      	bx	lr
 80151f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80151fa:	2b05      	cmp	r3, #5
 80151fc:	d801      	bhi.n	8015202 <__hexdig_fun+0x1a>
 80151fe:	3847      	subs	r0, #71	; 0x47
 8015200:	e7f7      	b.n	80151f2 <__hexdig_fun+0xa>
 8015202:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015206:	2b05      	cmp	r3, #5
 8015208:	d801      	bhi.n	801520e <__hexdig_fun+0x26>
 801520a:	3827      	subs	r0, #39	; 0x27
 801520c:	e7f1      	b.n	80151f2 <__hexdig_fun+0xa>
 801520e:	2000      	movs	r0, #0
 8015210:	4770      	bx	lr

08015212 <__gethex>:
 8015212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015216:	b08b      	sub	sp, #44	; 0x2c
 8015218:	468a      	mov	sl, r1
 801521a:	9002      	str	r0, [sp, #8]
 801521c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801521e:	9306      	str	r3, [sp, #24]
 8015220:	4690      	mov	r8, r2
 8015222:	f000 fadf 	bl	80157e4 <__localeconv_l>
 8015226:	6803      	ldr	r3, [r0, #0]
 8015228:	9303      	str	r3, [sp, #12]
 801522a:	4618      	mov	r0, r3
 801522c:	f7ea ffe8 	bl	8000200 <strlen>
 8015230:	9b03      	ldr	r3, [sp, #12]
 8015232:	9001      	str	r0, [sp, #4]
 8015234:	4403      	add	r3, r0
 8015236:	f04f 0b00 	mov.w	fp, #0
 801523a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801523e:	9307      	str	r3, [sp, #28]
 8015240:	f8da 3000 	ldr.w	r3, [sl]
 8015244:	3302      	adds	r3, #2
 8015246:	461f      	mov	r7, r3
 8015248:	f813 0b01 	ldrb.w	r0, [r3], #1
 801524c:	2830      	cmp	r0, #48	; 0x30
 801524e:	d06c      	beq.n	801532a <__gethex+0x118>
 8015250:	f7ff ffca 	bl	80151e8 <__hexdig_fun>
 8015254:	4604      	mov	r4, r0
 8015256:	2800      	cmp	r0, #0
 8015258:	d16a      	bne.n	8015330 <__gethex+0x11e>
 801525a:	9a01      	ldr	r2, [sp, #4]
 801525c:	9903      	ldr	r1, [sp, #12]
 801525e:	4638      	mov	r0, r7
 8015260:	f001 fe08 	bl	8016e74 <strncmp>
 8015264:	2800      	cmp	r0, #0
 8015266:	d166      	bne.n	8015336 <__gethex+0x124>
 8015268:	9b01      	ldr	r3, [sp, #4]
 801526a:	5cf8      	ldrb	r0, [r7, r3]
 801526c:	18fe      	adds	r6, r7, r3
 801526e:	f7ff ffbb 	bl	80151e8 <__hexdig_fun>
 8015272:	2800      	cmp	r0, #0
 8015274:	d062      	beq.n	801533c <__gethex+0x12a>
 8015276:	4633      	mov	r3, r6
 8015278:	7818      	ldrb	r0, [r3, #0]
 801527a:	2830      	cmp	r0, #48	; 0x30
 801527c:	461f      	mov	r7, r3
 801527e:	f103 0301 	add.w	r3, r3, #1
 8015282:	d0f9      	beq.n	8015278 <__gethex+0x66>
 8015284:	f7ff ffb0 	bl	80151e8 <__hexdig_fun>
 8015288:	fab0 f580 	clz	r5, r0
 801528c:	096d      	lsrs	r5, r5, #5
 801528e:	4634      	mov	r4, r6
 8015290:	f04f 0b01 	mov.w	fp, #1
 8015294:	463a      	mov	r2, r7
 8015296:	4616      	mov	r6, r2
 8015298:	3201      	adds	r2, #1
 801529a:	7830      	ldrb	r0, [r6, #0]
 801529c:	f7ff ffa4 	bl	80151e8 <__hexdig_fun>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d1f8      	bne.n	8015296 <__gethex+0x84>
 80152a4:	9a01      	ldr	r2, [sp, #4]
 80152a6:	9903      	ldr	r1, [sp, #12]
 80152a8:	4630      	mov	r0, r6
 80152aa:	f001 fde3 	bl	8016e74 <strncmp>
 80152ae:	b950      	cbnz	r0, 80152c6 <__gethex+0xb4>
 80152b0:	b954      	cbnz	r4, 80152c8 <__gethex+0xb6>
 80152b2:	9b01      	ldr	r3, [sp, #4]
 80152b4:	18f4      	adds	r4, r6, r3
 80152b6:	4622      	mov	r2, r4
 80152b8:	4616      	mov	r6, r2
 80152ba:	3201      	adds	r2, #1
 80152bc:	7830      	ldrb	r0, [r6, #0]
 80152be:	f7ff ff93 	bl	80151e8 <__hexdig_fun>
 80152c2:	2800      	cmp	r0, #0
 80152c4:	d1f8      	bne.n	80152b8 <__gethex+0xa6>
 80152c6:	b10c      	cbz	r4, 80152cc <__gethex+0xba>
 80152c8:	1ba4      	subs	r4, r4, r6
 80152ca:	00a4      	lsls	r4, r4, #2
 80152cc:	7833      	ldrb	r3, [r6, #0]
 80152ce:	2b50      	cmp	r3, #80	; 0x50
 80152d0:	d001      	beq.n	80152d6 <__gethex+0xc4>
 80152d2:	2b70      	cmp	r3, #112	; 0x70
 80152d4:	d140      	bne.n	8015358 <__gethex+0x146>
 80152d6:	7873      	ldrb	r3, [r6, #1]
 80152d8:	2b2b      	cmp	r3, #43	; 0x2b
 80152da:	d031      	beq.n	8015340 <__gethex+0x12e>
 80152dc:	2b2d      	cmp	r3, #45	; 0x2d
 80152de:	d033      	beq.n	8015348 <__gethex+0x136>
 80152e0:	1c71      	adds	r1, r6, #1
 80152e2:	f04f 0900 	mov.w	r9, #0
 80152e6:	7808      	ldrb	r0, [r1, #0]
 80152e8:	f7ff ff7e 	bl	80151e8 <__hexdig_fun>
 80152ec:	1e43      	subs	r3, r0, #1
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b18      	cmp	r3, #24
 80152f2:	d831      	bhi.n	8015358 <__gethex+0x146>
 80152f4:	f1a0 0210 	sub.w	r2, r0, #16
 80152f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152fc:	f7ff ff74 	bl	80151e8 <__hexdig_fun>
 8015300:	1e43      	subs	r3, r0, #1
 8015302:	b2db      	uxtb	r3, r3
 8015304:	2b18      	cmp	r3, #24
 8015306:	d922      	bls.n	801534e <__gethex+0x13c>
 8015308:	f1b9 0f00 	cmp.w	r9, #0
 801530c:	d000      	beq.n	8015310 <__gethex+0xfe>
 801530e:	4252      	negs	r2, r2
 8015310:	4414      	add	r4, r2
 8015312:	f8ca 1000 	str.w	r1, [sl]
 8015316:	b30d      	cbz	r5, 801535c <__gethex+0x14a>
 8015318:	f1bb 0f00 	cmp.w	fp, #0
 801531c:	bf0c      	ite	eq
 801531e:	2706      	moveq	r7, #6
 8015320:	2700      	movne	r7, #0
 8015322:	4638      	mov	r0, r7
 8015324:	b00b      	add	sp, #44	; 0x2c
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532a:	f10b 0b01 	add.w	fp, fp, #1
 801532e:	e78a      	b.n	8015246 <__gethex+0x34>
 8015330:	2500      	movs	r5, #0
 8015332:	462c      	mov	r4, r5
 8015334:	e7ae      	b.n	8015294 <__gethex+0x82>
 8015336:	463e      	mov	r6, r7
 8015338:	2501      	movs	r5, #1
 801533a:	e7c7      	b.n	80152cc <__gethex+0xba>
 801533c:	4604      	mov	r4, r0
 801533e:	e7fb      	b.n	8015338 <__gethex+0x126>
 8015340:	f04f 0900 	mov.w	r9, #0
 8015344:	1cb1      	adds	r1, r6, #2
 8015346:	e7ce      	b.n	80152e6 <__gethex+0xd4>
 8015348:	f04f 0901 	mov.w	r9, #1
 801534c:	e7fa      	b.n	8015344 <__gethex+0x132>
 801534e:	230a      	movs	r3, #10
 8015350:	fb03 0202 	mla	r2, r3, r2, r0
 8015354:	3a10      	subs	r2, #16
 8015356:	e7cf      	b.n	80152f8 <__gethex+0xe6>
 8015358:	4631      	mov	r1, r6
 801535a:	e7da      	b.n	8015312 <__gethex+0x100>
 801535c:	1bf3      	subs	r3, r6, r7
 801535e:	3b01      	subs	r3, #1
 8015360:	4629      	mov	r1, r5
 8015362:	2b07      	cmp	r3, #7
 8015364:	dc49      	bgt.n	80153fa <__gethex+0x1e8>
 8015366:	9802      	ldr	r0, [sp, #8]
 8015368:	f000 fae7 	bl	801593a <_Balloc>
 801536c:	9b01      	ldr	r3, [sp, #4]
 801536e:	f100 0914 	add.w	r9, r0, #20
 8015372:	f04f 0b00 	mov.w	fp, #0
 8015376:	f1c3 0301 	rsb	r3, r3, #1
 801537a:	4605      	mov	r5, r0
 801537c:	f8cd 9010 	str.w	r9, [sp, #16]
 8015380:	46da      	mov	sl, fp
 8015382:	9308      	str	r3, [sp, #32]
 8015384:	42b7      	cmp	r7, r6
 8015386:	d33b      	bcc.n	8015400 <__gethex+0x1ee>
 8015388:	9804      	ldr	r0, [sp, #16]
 801538a:	f840 ab04 	str.w	sl, [r0], #4
 801538e:	eba0 0009 	sub.w	r0, r0, r9
 8015392:	1080      	asrs	r0, r0, #2
 8015394:	6128      	str	r0, [r5, #16]
 8015396:	0147      	lsls	r7, r0, #5
 8015398:	4650      	mov	r0, sl
 801539a:	f000 fb92 	bl	8015ac2 <__hi0bits>
 801539e:	f8d8 6000 	ldr.w	r6, [r8]
 80153a2:	1a3f      	subs	r7, r7, r0
 80153a4:	42b7      	cmp	r7, r6
 80153a6:	dd64      	ble.n	8015472 <__gethex+0x260>
 80153a8:	1bbf      	subs	r7, r7, r6
 80153aa:	4639      	mov	r1, r7
 80153ac:	4628      	mov	r0, r5
 80153ae:	f000 fea1 	bl	80160f4 <__any_on>
 80153b2:	4682      	mov	sl, r0
 80153b4:	b178      	cbz	r0, 80153d6 <__gethex+0x1c4>
 80153b6:	1e7b      	subs	r3, r7, #1
 80153b8:	1159      	asrs	r1, r3, #5
 80153ba:	f003 021f 	and.w	r2, r3, #31
 80153be:	f04f 0a01 	mov.w	sl, #1
 80153c2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80153c6:	fa0a f202 	lsl.w	r2, sl, r2
 80153ca:	420a      	tst	r2, r1
 80153cc:	d003      	beq.n	80153d6 <__gethex+0x1c4>
 80153ce:	4553      	cmp	r3, sl
 80153d0:	dc46      	bgt.n	8015460 <__gethex+0x24e>
 80153d2:	f04f 0a02 	mov.w	sl, #2
 80153d6:	4639      	mov	r1, r7
 80153d8:	4628      	mov	r0, r5
 80153da:	f7ff fecb 	bl	8015174 <rshift>
 80153de:	443c      	add	r4, r7
 80153e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153e4:	42a3      	cmp	r3, r4
 80153e6:	da52      	bge.n	801548e <__gethex+0x27c>
 80153e8:	4629      	mov	r1, r5
 80153ea:	9802      	ldr	r0, [sp, #8]
 80153ec:	f000 fad9 	bl	80159a2 <_Bfree>
 80153f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153f2:	2300      	movs	r3, #0
 80153f4:	6013      	str	r3, [r2, #0]
 80153f6:	27a3      	movs	r7, #163	; 0xa3
 80153f8:	e793      	b.n	8015322 <__gethex+0x110>
 80153fa:	3101      	adds	r1, #1
 80153fc:	105b      	asrs	r3, r3, #1
 80153fe:	e7b0      	b.n	8015362 <__gethex+0x150>
 8015400:	1e73      	subs	r3, r6, #1
 8015402:	9305      	str	r3, [sp, #20]
 8015404:	9a07      	ldr	r2, [sp, #28]
 8015406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801540a:	4293      	cmp	r3, r2
 801540c:	d018      	beq.n	8015440 <__gethex+0x22e>
 801540e:	f1bb 0f20 	cmp.w	fp, #32
 8015412:	d107      	bne.n	8015424 <__gethex+0x212>
 8015414:	9b04      	ldr	r3, [sp, #16]
 8015416:	f8c3 a000 	str.w	sl, [r3]
 801541a:	3304      	adds	r3, #4
 801541c:	f04f 0a00 	mov.w	sl, #0
 8015420:	9304      	str	r3, [sp, #16]
 8015422:	46d3      	mov	fp, sl
 8015424:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015428:	f7ff fede 	bl	80151e8 <__hexdig_fun>
 801542c:	f000 000f 	and.w	r0, r0, #15
 8015430:	fa00 f00b 	lsl.w	r0, r0, fp
 8015434:	ea4a 0a00 	orr.w	sl, sl, r0
 8015438:	f10b 0b04 	add.w	fp, fp, #4
 801543c:	9b05      	ldr	r3, [sp, #20]
 801543e:	e00d      	b.n	801545c <__gethex+0x24a>
 8015440:	9b05      	ldr	r3, [sp, #20]
 8015442:	9a08      	ldr	r2, [sp, #32]
 8015444:	4413      	add	r3, r2
 8015446:	42bb      	cmp	r3, r7
 8015448:	d3e1      	bcc.n	801540e <__gethex+0x1fc>
 801544a:	4618      	mov	r0, r3
 801544c:	9a01      	ldr	r2, [sp, #4]
 801544e:	9903      	ldr	r1, [sp, #12]
 8015450:	9309      	str	r3, [sp, #36]	; 0x24
 8015452:	f001 fd0f 	bl	8016e74 <strncmp>
 8015456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015458:	2800      	cmp	r0, #0
 801545a:	d1d8      	bne.n	801540e <__gethex+0x1fc>
 801545c:	461e      	mov	r6, r3
 801545e:	e791      	b.n	8015384 <__gethex+0x172>
 8015460:	1eb9      	subs	r1, r7, #2
 8015462:	4628      	mov	r0, r5
 8015464:	f000 fe46 	bl	80160f4 <__any_on>
 8015468:	2800      	cmp	r0, #0
 801546a:	d0b2      	beq.n	80153d2 <__gethex+0x1c0>
 801546c:	f04f 0a03 	mov.w	sl, #3
 8015470:	e7b1      	b.n	80153d6 <__gethex+0x1c4>
 8015472:	da09      	bge.n	8015488 <__gethex+0x276>
 8015474:	1bf7      	subs	r7, r6, r7
 8015476:	4629      	mov	r1, r5
 8015478:	463a      	mov	r2, r7
 801547a:	9802      	ldr	r0, [sp, #8]
 801547c:	f000 fc5c 	bl	8015d38 <__lshift>
 8015480:	1be4      	subs	r4, r4, r7
 8015482:	4605      	mov	r5, r0
 8015484:	f100 0914 	add.w	r9, r0, #20
 8015488:	f04f 0a00 	mov.w	sl, #0
 801548c:	e7a8      	b.n	80153e0 <__gethex+0x1ce>
 801548e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015492:	42a0      	cmp	r0, r4
 8015494:	dd6a      	ble.n	801556c <__gethex+0x35a>
 8015496:	1b04      	subs	r4, r0, r4
 8015498:	42a6      	cmp	r6, r4
 801549a:	dc2e      	bgt.n	80154fa <__gethex+0x2e8>
 801549c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154a0:	2b02      	cmp	r3, #2
 80154a2:	d022      	beq.n	80154ea <__gethex+0x2d8>
 80154a4:	2b03      	cmp	r3, #3
 80154a6:	d024      	beq.n	80154f2 <__gethex+0x2e0>
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d115      	bne.n	80154d8 <__gethex+0x2c6>
 80154ac:	42a6      	cmp	r6, r4
 80154ae:	d113      	bne.n	80154d8 <__gethex+0x2c6>
 80154b0:	2e01      	cmp	r6, #1
 80154b2:	dc0b      	bgt.n	80154cc <__gethex+0x2ba>
 80154b4:	9a06      	ldr	r2, [sp, #24]
 80154b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154ba:	6013      	str	r3, [r2, #0]
 80154bc:	2301      	movs	r3, #1
 80154be:	612b      	str	r3, [r5, #16]
 80154c0:	f8c9 3000 	str.w	r3, [r9]
 80154c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154c6:	2762      	movs	r7, #98	; 0x62
 80154c8:	601d      	str	r5, [r3, #0]
 80154ca:	e72a      	b.n	8015322 <__gethex+0x110>
 80154cc:	1e71      	subs	r1, r6, #1
 80154ce:	4628      	mov	r0, r5
 80154d0:	f000 fe10 	bl	80160f4 <__any_on>
 80154d4:	2800      	cmp	r0, #0
 80154d6:	d1ed      	bne.n	80154b4 <__gethex+0x2a2>
 80154d8:	4629      	mov	r1, r5
 80154da:	9802      	ldr	r0, [sp, #8]
 80154dc:	f000 fa61 	bl	80159a2 <_Bfree>
 80154e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154e2:	2300      	movs	r3, #0
 80154e4:	6013      	str	r3, [r2, #0]
 80154e6:	2750      	movs	r7, #80	; 0x50
 80154e8:	e71b      	b.n	8015322 <__gethex+0x110>
 80154ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d0e1      	beq.n	80154b4 <__gethex+0x2a2>
 80154f0:	e7f2      	b.n	80154d8 <__gethex+0x2c6>
 80154f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1dd      	bne.n	80154b4 <__gethex+0x2a2>
 80154f8:	e7ee      	b.n	80154d8 <__gethex+0x2c6>
 80154fa:	1e67      	subs	r7, r4, #1
 80154fc:	f1ba 0f00 	cmp.w	sl, #0
 8015500:	d131      	bne.n	8015566 <__gethex+0x354>
 8015502:	b127      	cbz	r7, 801550e <__gethex+0x2fc>
 8015504:	4639      	mov	r1, r7
 8015506:	4628      	mov	r0, r5
 8015508:	f000 fdf4 	bl	80160f4 <__any_on>
 801550c:	4682      	mov	sl, r0
 801550e:	117a      	asrs	r2, r7, #5
 8015510:	2301      	movs	r3, #1
 8015512:	f007 071f 	and.w	r7, r7, #31
 8015516:	fa03 f707 	lsl.w	r7, r3, r7
 801551a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801551e:	4621      	mov	r1, r4
 8015520:	421f      	tst	r7, r3
 8015522:	4628      	mov	r0, r5
 8015524:	bf18      	it	ne
 8015526:	f04a 0a02 	orrne.w	sl, sl, #2
 801552a:	1b36      	subs	r6, r6, r4
 801552c:	f7ff fe22 	bl	8015174 <rshift>
 8015530:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015534:	2702      	movs	r7, #2
 8015536:	f1ba 0f00 	cmp.w	sl, #0
 801553a:	d048      	beq.n	80155ce <__gethex+0x3bc>
 801553c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015540:	2b02      	cmp	r3, #2
 8015542:	d015      	beq.n	8015570 <__gethex+0x35e>
 8015544:	2b03      	cmp	r3, #3
 8015546:	d017      	beq.n	8015578 <__gethex+0x366>
 8015548:	2b01      	cmp	r3, #1
 801554a:	d109      	bne.n	8015560 <__gethex+0x34e>
 801554c:	f01a 0f02 	tst.w	sl, #2
 8015550:	d006      	beq.n	8015560 <__gethex+0x34e>
 8015552:	f8d9 3000 	ldr.w	r3, [r9]
 8015556:	ea4a 0a03 	orr.w	sl, sl, r3
 801555a:	f01a 0f01 	tst.w	sl, #1
 801555e:	d10e      	bne.n	801557e <__gethex+0x36c>
 8015560:	f047 0710 	orr.w	r7, r7, #16
 8015564:	e033      	b.n	80155ce <__gethex+0x3bc>
 8015566:	f04f 0a01 	mov.w	sl, #1
 801556a:	e7d0      	b.n	801550e <__gethex+0x2fc>
 801556c:	2701      	movs	r7, #1
 801556e:	e7e2      	b.n	8015536 <__gethex+0x324>
 8015570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015572:	f1c3 0301 	rsb	r3, r3, #1
 8015576:	9315      	str	r3, [sp, #84]	; 0x54
 8015578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801557a:	2b00      	cmp	r3, #0
 801557c:	d0f0      	beq.n	8015560 <__gethex+0x34e>
 801557e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015582:	f105 0314 	add.w	r3, r5, #20
 8015586:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801558a:	eb03 010a 	add.w	r1, r3, sl
 801558e:	f04f 0c00 	mov.w	ip, #0
 8015592:	4618      	mov	r0, r3
 8015594:	f853 2b04 	ldr.w	r2, [r3], #4
 8015598:	f1b2 3fff 	cmp.w	r2, #4294967295
 801559c:	d01c      	beq.n	80155d8 <__gethex+0x3c6>
 801559e:	3201      	adds	r2, #1
 80155a0:	6002      	str	r2, [r0, #0]
 80155a2:	2f02      	cmp	r7, #2
 80155a4:	f105 0314 	add.w	r3, r5, #20
 80155a8:	d138      	bne.n	801561c <__gethex+0x40a>
 80155aa:	f8d8 2000 	ldr.w	r2, [r8]
 80155ae:	3a01      	subs	r2, #1
 80155b0:	42b2      	cmp	r2, r6
 80155b2:	d10a      	bne.n	80155ca <__gethex+0x3b8>
 80155b4:	1171      	asrs	r1, r6, #5
 80155b6:	2201      	movs	r2, #1
 80155b8:	f006 061f 	and.w	r6, r6, #31
 80155bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155c0:	fa02 f606 	lsl.w	r6, r2, r6
 80155c4:	421e      	tst	r6, r3
 80155c6:	bf18      	it	ne
 80155c8:	4617      	movne	r7, r2
 80155ca:	f047 0720 	orr.w	r7, r7, #32
 80155ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155d0:	601d      	str	r5, [r3, #0]
 80155d2:	9b06      	ldr	r3, [sp, #24]
 80155d4:	601c      	str	r4, [r3, #0]
 80155d6:	e6a4      	b.n	8015322 <__gethex+0x110>
 80155d8:	4299      	cmp	r1, r3
 80155da:	f843 cc04 	str.w	ip, [r3, #-4]
 80155de:	d8d8      	bhi.n	8015592 <__gethex+0x380>
 80155e0:	68ab      	ldr	r3, [r5, #8]
 80155e2:	4599      	cmp	r9, r3
 80155e4:	db12      	blt.n	801560c <__gethex+0x3fa>
 80155e6:	6869      	ldr	r1, [r5, #4]
 80155e8:	9802      	ldr	r0, [sp, #8]
 80155ea:	3101      	adds	r1, #1
 80155ec:	f000 f9a5 	bl	801593a <_Balloc>
 80155f0:	692a      	ldr	r2, [r5, #16]
 80155f2:	3202      	adds	r2, #2
 80155f4:	f105 010c 	add.w	r1, r5, #12
 80155f8:	4683      	mov	fp, r0
 80155fa:	0092      	lsls	r2, r2, #2
 80155fc:	300c      	adds	r0, #12
 80155fe:	f000 f991 	bl	8015924 <memcpy>
 8015602:	4629      	mov	r1, r5
 8015604:	9802      	ldr	r0, [sp, #8]
 8015606:	f000 f9cc 	bl	80159a2 <_Bfree>
 801560a:	465d      	mov	r5, fp
 801560c:	692b      	ldr	r3, [r5, #16]
 801560e:	1c5a      	adds	r2, r3, #1
 8015610:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015614:	612a      	str	r2, [r5, #16]
 8015616:	2201      	movs	r2, #1
 8015618:	615a      	str	r2, [r3, #20]
 801561a:	e7c2      	b.n	80155a2 <__gethex+0x390>
 801561c:	692a      	ldr	r2, [r5, #16]
 801561e:	454a      	cmp	r2, r9
 8015620:	dd0b      	ble.n	801563a <__gethex+0x428>
 8015622:	2101      	movs	r1, #1
 8015624:	4628      	mov	r0, r5
 8015626:	f7ff fda5 	bl	8015174 <rshift>
 801562a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801562e:	3401      	adds	r4, #1
 8015630:	42a3      	cmp	r3, r4
 8015632:	f6ff aed9 	blt.w	80153e8 <__gethex+0x1d6>
 8015636:	2701      	movs	r7, #1
 8015638:	e7c7      	b.n	80155ca <__gethex+0x3b8>
 801563a:	f016 061f 	ands.w	r6, r6, #31
 801563e:	d0fa      	beq.n	8015636 <__gethex+0x424>
 8015640:	449a      	add	sl, r3
 8015642:	f1c6 0620 	rsb	r6, r6, #32
 8015646:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801564a:	f000 fa3a 	bl	8015ac2 <__hi0bits>
 801564e:	42b0      	cmp	r0, r6
 8015650:	dbe7      	blt.n	8015622 <__gethex+0x410>
 8015652:	e7f0      	b.n	8015636 <__gethex+0x424>

08015654 <L_shift>:
 8015654:	f1c2 0208 	rsb	r2, r2, #8
 8015658:	0092      	lsls	r2, r2, #2
 801565a:	b570      	push	{r4, r5, r6, lr}
 801565c:	f1c2 0620 	rsb	r6, r2, #32
 8015660:	6843      	ldr	r3, [r0, #4]
 8015662:	6804      	ldr	r4, [r0, #0]
 8015664:	fa03 f506 	lsl.w	r5, r3, r6
 8015668:	432c      	orrs	r4, r5
 801566a:	40d3      	lsrs	r3, r2
 801566c:	6004      	str	r4, [r0, #0]
 801566e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015672:	4288      	cmp	r0, r1
 8015674:	d3f4      	bcc.n	8015660 <L_shift+0xc>
 8015676:	bd70      	pop	{r4, r5, r6, pc}

08015678 <__match>:
 8015678:	b530      	push	{r4, r5, lr}
 801567a:	6803      	ldr	r3, [r0, #0]
 801567c:	3301      	adds	r3, #1
 801567e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015682:	b914      	cbnz	r4, 801568a <__match+0x12>
 8015684:	6003      	str	r3, [r0, #0]
 8015686:	2001      	movs	r0, #1
 8015688:	bd30      	pop	{r4, r5, pc}
 801568a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801568e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015692:	2d19      	cmp	r5, #25
 8015694:	bf98      	it	ls
 8015696:	3220      	addls	r2, #32
 8015698:	42a2      	cmp	r2, r4
 801569a:	d0f0      	beq.n	801567e <__match+0x6>
 801569c:	2000      	movs	r0, #0
 801569e:	e7f3      	b.n	8015688 <__match+0x10>

080156a0 <__hexnan>:
 80156a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a4:	680b      	ldr	r3, [r1, #0]
 80156a6:	6801      	ldr	r1, [r0, #0]
 80156a8:	115f      	asrs	r7, r3, #5
 80156aa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80156ae:	f013 031f 	ands.w	r3, r3, #31
 80156b2:	b087      	sub	sp, #28
 80156b4:	bf18      	it	ne
 80156b6:	3704      	addne	r7, #4
 80156b8:	2500      	movs	r5, #0
 80156ba:	1f3e      	subs	r6, r7, #4
 80156bc:	4682      	mov	sl, r0
 80156be:	4690      	mov	r8, r2
 80156c0:	9301      	str	r3, [sp, #4]
 80156c2:	f847 5c04 	str.w	r5, [r7, #-4]
 80156c6:	46b1      	mov	r9, r6
 80156c8:	4634      	mov	r4, r6
 80156ca:	9502      	str	r5, [sp, #8]
 80156cc:	46ab      	mov	fp, r5
 80156ce:	784a      	ldrb	r2, [r1, #1]
 80156d0:	1c4b      	adds	r3, r1, #1
 80156d2:	9303      	str	r3, [sp, #12]
 80156d4:	b342      	cbz	r2, 8015728 <__hexnan+0x88>
 80156d6:	4610      	mov	r0, r2
 80156d8:	9105      	str	r1, [sp, #20]
 80156da:	9204      	str	r2, [sp, #16]
 80156dc:	f7ff fd84 	bl	80151e8 <__hexdig_fun>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d143      	bne.n	801576c <__hexnan+0xcc>
 80156e4:	9a04      	ldr	r2, [sp, #16]
 80156e6:	9905      	ldr	r1, [sp, #20]
 80156e8:	2a20      	cmp	r2, #32
 80156ea:	d818      	bhi.n	801571e <__hexnan+0x7e>
 80156ec:	9b02      	ldr	r3, [sp, #8]
 80156ee:	459b      	cmp	fp, r3
 80156f0:	dd13      	ble.n	801571a <__hexnan+0x7a>
 80156f2:	454c      	cmp	r4, r9
 80156f4:	d206      	bcs.n	8015704 <__hexnan+0x64>
 80156f6:	2d07      	cmp	r5, #7
 80156f8:	dc04      	bgt.n	8015704 <__hexnan+0x64>
 80156fa:	462a      	mov	r2, r5
 80156fc:	4649      	mov	r1, r9
 80156fe:	4620      	mov	r0, r4
 8015700:	f7ff ffa8 	bl	8015654 <L_shift>
 8015704:	4544      	cmp	r4, r8
 8015706:	d944      	bls.n	8015792 <__hexnan+0xf2>
 8015708:	2300      	movs	r3, #0
 801570a:	f1a4 0904 	sub.w	r9, r4, #4
 801570e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015712:	f8cd b008 	str.w	fp, [sp, #8]
 8015716:	464c      	mov	r4, r9
 8015718:	461d      	mov	r5, r3
 801571a:	9903      	ldr	r1, [sp, #12]
 801571c:	e7d7      	b.n	80156ce <__hexnan+0x2e>
 801571e:	2a29      	cmp	r2, #41	; 0x29
 8015720:	d14a      	bne.n	80157b8 <__hexnan+0x118>
 8015722:	3102      	adds	r1, #2
 8015724:	f8ca 1000 	str.w	r1, [sl]
 8015728:	f1bb 0f00 	cmp.w	fp, #0
 801572c:	d044      	beq.n	80157b8 <__hexnan+0x118>
 801572e:	454c      	cmp	r4, r9
 8015730:	d206      	bcs.n	8015740 <__hexnan+0xa0>
 8015732:	2d07      	cmp	r5, #7
 8015734:	dc04      	bgt.n	8015740 <__hexnan+0xa0>
 8015736:	462a      	mov	r2, r5
 8015738:	4649      	mov	r1, r9
 801573a:	4620      	mov	r0, r4
 801573c:	f7ff ff8a 	bl	8015654 <L_shift>
 8015740:	4544      	cmp	r4, r8
 8015742:	d928      	bls.n	8015796 <__hexnan+0xf6>
 8015744:	4643      	mov	r3, r8
 8015746:	f854 2b04 	ldr.w	r2, [r4], #4
 801574a:	f843 2b04 	str.w	r2, [r3], #4
 801574e:	42a6      	cmp	r6, r4
 8015750:	d2f9      	bcs.n	8015746 <__hexnan+0xa6>
 8015752:	2200      	movs	r2, #0
 8015754:	f843 2b04 	str.w	r2, [r3], #4
 8015758:	429e      	cmp	r6, r3
 801575a:	d2fb      	bcs.n	8015754 <__hexnan+0xb4>
 801575c:	6833      	ldr	r3, [r6, #0]
 801575e:	b91b      	cbnz	r3, 8015768 <__hexnan+0xc8>
 8015760:	4546      	cmp	r6, r8
 8015762:	d127      	bne.n	80157b4 <__hexnan+0x114>
 8015764:	2301      	movs	r3, #1
 8015766:	6033      	str	r3, [r6, #0]
 8015768:	2005      	movs	r0, #5
 801576a:	e026      	b.n	80157ba <__hexnan+0x11a>
 801576c:	3501      	adds	r5, #1
 801576e:	2d08      	cmp	r5, #8
 8015770:	f10b 0b01 	add.w	fp, fp, #1
 8015774:	dd06      	ble.n	8015784 <__hexnan+0xe4>
 8015776:	4544      	cmp	r4, r8
 8015778:	d9cf      	bls.n	801571a <__hexnan+0x7a>
 801577a:	2300      	movs	r3, #0
 801577c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015780:	2501      	movs	r5, #1
 8015782:	3c04      	subs	r4, #4
 8015784:	6822      	ldr	r2, [r4, #0]
 8015786:	f000 000f 	and.w	r0, r0, #15
 801578a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801578e:	6020      	str	r0, [r4, #0]
 8015790:	e7c3      	b.n	801571a <__hexnan+0x7a>
 8015792:	2508      	movs	r5, #8
 8015794:	e7c1      	b.n	801571a <__hexnan+0x7a>
 8015796:	9b01      	ldr	r3, [sp, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d0df      	beq.n	801575c <__hexnan+0xbc>
 801579c:	f04f 32ff 	mov.w	r2, #4294967295
 80157a0:	f1c3 0320 	rsb	r3, r3, #32
 80157a4:	fa22 f303 	lsr.w	r3, r2, r3
 80157a8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80157ac:	401a      	ands	r2, r3
 80157ae:	f847 2c04 	str.w	r2, [r7, #-4]
 80157b2:	e7d3      	b.n	801575c <__hexnan+0xbc>
 80157b4:	3e04      	subs	r6, #4
 80157b6:	e7d1      	b.n	801575c <__hexnan+0xbc>
 80157b8:	2004      	movs	r0, #4
 80157ba:	b007      	add	sp, #28
 80157bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157c0 <__locale_ctype_ptr_l>:
 80157c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80157c4:	4770      	bx	lr
	...

080157c8 <__locale_ctype_ptr>:
 80157c8:	4b04      	ldr	r3, [pc, #16]	; (80157dc <__locale_ctype_ptr+0x14>)
 80157ca:	4a05      	ldr	r2, [pc, #20]	; (80157e0 <__locale_ctype_ptr+0x18>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	6a1b      	ldr	r3, [r3, #32]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	bf08      	it	eq
 80157d4:	4613      	moveq	r3, r2
 80157d6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80157da:	4770      	bx	lr
 80157dc:	2000000c 	.word	0x2000000c
 80157e0:	20000070 	.word	0x20000070

080157e4 <__localeconv_l>:
 80157e4:	30f0      	adds	r0, #240	; 0xf0
 80157e6:	4770      	bx	lr

080157e8 <_localeconv_r>:
 80157e8:	4b04      	ldr	r3, [pc, #16]	; (80157fc <_localeconv_r+0x14>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	6a18      	ldr	r0, [r3, #32]
 80157ee:	4b04      	ldr	r3, [pc, #16]	; (8015800 <_localeconv_r+0x18>)
 80157f0:	2800      	cmp	r0, #0
 80157f2:	bf08      	it	eq
 80157f4:	4618      	moveq	r0, r3
 80157f6:	30f0      	adds	r0, #240	; 0xf0
 80157f8:	4770      	bx	lr
 80157fa:	bf00      	nop
 80157fc:	2000000c 	.word	0x2000000c
 8015800:	20000070 	.word	0x20000070

08015804 <_lseek_r>:
 8015804:	b538      	push	{r3, r4, r5, lr}
 8015806:	4c07      	ldr	r4, [pc, #28]	; (8015824 <_lseek_r+0x20>)
 8015808:	4605      	mov	r5, r0
 801580a:	4608      	mov	r0, r1
 801580c:	4611      	mov	r1, r2
 801580e:	2200      	movs	r2, #0
 8015810:	6022      	str	r2, [r4, #0]
 8015812:	461a      	mov	r2, r3
 8015814:	f7f0 f864 	bl	80058e0 <_lseek>
 8015818:	1c43      	adds	r3, r0, #1
 801581a:	d102      	bne.n	8015822 <_lseek_r+0x1e>
 801581c:	6823      	ldr	r3, [r4, #0]
 801581e:	b103      	cbz	r3, 8015822 <_lseek_r+0x1e>
 8015820:	602b      	str	r3, [r5, #0]
 8015822:	bd38      	pop	{r3, r4, r5, pc}
 8015824:	2003b41c 	.word	0x2003b41c

08015828 <__swhatbuf_r>:
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	460e      	mov	r6, r1
 801582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015830:	2900      	cmp	r1, #0
 8015832:	b096      	sub	sp, #88	; 0x58
 8015834:	4614      	mov	r4, r2
 8015836:	461d      	mov	r5, r3
 8015838:	da07      	bge.n	801584a <__swhatbuf_r+0x22>
 801583a:	2300      	movs	r3, #0
 801583c:	602b      	str	r3, [r5, #0]
 801583e:	89b3      	ldrh	r3, [r6, #12]
 8015840:	061a      	lsls	r2, r3, #24
 8015842:	d410      	bmi.n	8015866 <__swhatbuf_r+0x3e>
 8015844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015848:	e00e      	b.n	8015868 <__swhatbuf_r+0x40>
 801584a:	466a      	mov	r2, sp
 801584c:	f001 fbf8 	bl	8017040 <_fstat_r>
 8015850:	2800      	cmp	r0, #0
 8015852:	dbf2      	blt.n	801583a <__swhatbuf_r+0x12>
 8015854:	9a01      	ldr	r2, [sp, #4]
 8015856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801585a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801585e:	425a      	negs	r2, r3
 8015860:	415a      	adcs	r2, r3
 8015862:	602a      	str	r2, [r5, #0]
 8015864:	e7ee      	b.n	8015844 <__swhatbuf_r+0x1c>
 8015866:	2340      	movs	r3, #64	; 0x40
 8015868:	2000      	movs	r0, #0
 801586a:	6023      	str	r3, [r4, #0]
 801586c:	b016      	add	sp, #88	; 0x58
 801586e:	bd70      	pop	{r4, r5, r6, pc}

08015870 <__smakebuf_r>:
 8015870:	898b      	ldrh	r3, [r1, #12]
 8015872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015874:	079d      	lsls	r5, r3, #30
 8015876:	4606      	mov	r6, r0
 8015878:	460c      	mov	r4, r1
 801587a:	d507      	bpl.n	801588c <__smakebuf_r+0x1c>
 801587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015880:	6023      	str	r3, [r4, #0]
 8015882:	6123      	str	r3, [r4, #16]
 8015884:	2301      	movs	r3, #1
 8015886:	6163      	str	r3, [r4, #20]
 8015888:	b002      	add	sp, #8
 801588a:	bd70      	pop	{r4, r5, r6, pc}
 801588c:	ab01      	add	r3, sp, #4
 801588e:	466a      	mov	r2, sp
 8015890:	f7ff ffca 	bl	8015828 <__swhatbuf_r>
 8015894:	9900      	ldr	r1, [sp, #0]
 8015896:	4605      	mov	r5, r0
 8015898:	4630      	mov	r0, r6
 801589a:	f000 fca9 	bl	80161f0 <_malloc_r>
 801589e:	b948      	cbnz	r0, 80158b4 <__smakebuf_r+0x44>
 80158a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158a4:	059a      	lsls	r2, r3, #22
 80158a6:	d4ef      	bmi.n	8015888 <__smakebuf_r+0x18>
 80158a8:	f023 0303 	bic.w	r3, r3, #3
 80158ac:	f043 0302 	orr.w	r3, r3, #2
 80158b0:	81a3      	strh	r3, [r4, #12]
 80158b2:	e7e3      	b.n	801587c <__smakebuf_r+0xc>
 80158b4:	4b0d      	ldr	r3, [pc, #52]	; (80158ec <__smakebuf_r+0x7c>)
 80158b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80158b8:	89a3      	ldrh	r3, [r4, #12]
 80158ba:	6020      	str	r0, [r4, #0]
 80158bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158c0:	81a3      	strh	r3, [r4, #12]
 80158c2:	9b00      	ldr	r3, [sp, #0]
 80158c4:	6163      	str	r3, [r4, #20]
 80158c6:	9b01      	ldr	r3, [sp, #4]
 80158c8:	6120      	str	r0, [r4, #16]
 80158ca:	b15b      	cbz	r3, 80158e4 <__smakebuf_r+0x74>
 80158cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158d0:	4630      	mov	r0, r6
 80158d2:	f001 fbc7 	bl	8017064 <_isatty_r>
 80158d6:	b128      	cbz	r0, 80158e4 <__smakebuf_r+0x74>
 80158d8:	89a3      	ldrh	r3, [r4, #12]
 80158da:	f023 0303 	bic.w	r3, r3, #3
 80158de:	f043 0301 	orr.w	r3, r3, #1
 80158e2:	81a3      	strh	r3, [r4, #12]
 80158e4:	89a3      	ldrh	r3, [r4, #12]
 80158e6:	431d      	orrs	r5, r3
 80158e8:	81a5      	strh	r5, [r4, #12]
 80158ea:	e7cd      	b.n	8015888 <__smakebuf_r+0x18>
 80158ec:	08015029 	.word	0x08015029

080158f0 <malloc>:
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <malloc+0xc>)
 80158f2:	4601      	mov	r1, r0
 80158f4:	6818      	ldr	r0, [r3, #0]
 80158f6:	f000 bc7b 	b.w	80161f0 <_malloc_r>
 80158fa:	bf00      	nop
 80158fc:	2000000c 	.word	0x2000000c

08015900 <__ascii_mbtowc>:
 8015900:	b082      	sub	sp, #8
 8015902:	b901      	cbnz	r1, 8015906 <__ascii_mbtowc+0x6>
 8015904:	a901      	add	r1, sp, #4
 8015906:	b142      	cbz	r2, 801591a <__ascii_mbtowc+0x1a>
 8015908:	b14b      	cbz	r3, 801591e <__ascii_mbtowc+0x1e>
 801590a:	7813      	ldrb	r3, [r2, #0]
 801590c:	600b      	str	r3, [r1, #0]
 801590e:	7812      	ldrb	r2, [r2, #0]
 8015910:	1c10      	adds	r0, r2, #0
 8015912:	bf18      	it	ne
 8015914:	2001      	movne	r0, #1
 8015916:	b002      	add	sp, #8
 8015918:	4770      	bx	lr
 801591a:	4610      	mov	r0, r2
 801591c:	e7fb      	b.n	8015916 <__ascii_mbtowc+0x16>
 801591e:	f06f 0001 	mvn.w	r0, #1
 8015922:	e7f8      	b.n	8015916 <__ascii_mbtowc+0x16>

08015924 <memcpy>:
 8015924:	b510      	push	{r4, lr}
 8015926:	1e43      	subs	r3, r0, #1
 8015928:	440a      	add	r2, r1
 801592a:	4291      	cmp	r1, r2
 801592c:	d100      	bne.n	8015930 <memcpy+0xc>
 801592e:	bd10      	pop	{r4, pc}
 8015930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015938:	e7f7      	b.n	801592a <memcpy+0x6>

0801593a <_Balloc>:
 801593a:	b570      	push	{r4, r5, r6, lr}
 801593c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801593e:	4604      	mov	r4, r0
 8015940:	460e      	mov	r6, r1
 8015942:	b93d      	cbnz	r5, 8015954 <_Balloc+0x1a>
 8015944:	2010      	movs	r0, #16
 8015946:	f7ff ffd3 	bl	80158f0 <malloc>
 801594a:	6260      	str	r0, [r4, #36]	; 0x24
 801594c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015950:	6005      	str	r5, [r0, #0]
 8015952:	60c5      	str	r5, [r0, #12]
 8015954:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015956:	68eb      	ldr	r3, [r5, #12]
 8015958:	b183      	cbz	r3, 801597c <_Balloc+0x42>
 801595a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015962:	b9b8      	cbnz	r0, 8015994 <_Balloc+0x5a>
 8015964:	2101      	movs	r1, #1
 8015966:	fa01 f506 	lsl.w	r5, r1, r6
 801596a:	1d6a      	adds	r2, r5, #5
 801596c:	0092      	lsls	r2, r2, #2
 801596e:	4620      	mov	r0, r4
 8015970:	f000 fbe1 	bl	8016136 <_calloc_r>
 8015974:	b160      	cbz	r0, 8015990 <_Balloc+0x56>
 8015976:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801597a:	e00e      	b.n	801599a <_Balloc+0x60>
 801597c:	2221      	movs	r2, #33	; 0x21
 801597e:	2104      	movs	r1, #4
 8015980:	4620      	mov	r0, r4
 8015982:	f000 fbd8 	bl	8016136 <_calloc_r>
 8015986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015988:	60e8      	str	r0, [r5, #12]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1e4      	bne.n	801595a <_Balloc+0x20>
 8015990:	2000      	movs	r0, #0
 8015992:	bd70      	pop	{r4, r5, r6, pc}
 8015994:	6802      	ldr	r2, [r0, #0]
 8015996:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801599a:	2300      	movs	r3, #0
 801599c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80159a0:	e7f7      	b.n	8015992 <_Balloc+0x58>

080159a2 <_Bfree>:
 80159a2:	b570      	push	{r4, r5, r6, lr}
 80159a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80159a6:	4606      	mov	r6, r0
 80159a8:	460d      	mov	r5, r1
 80159aa:	b93c      	cbnz	r4, 80159bc <_Bfree+0x1a>
 80159ac:	2010      	movs	r0, #16
 80159ae:	f7ff ff9f 	bl	80158f0 <malloc>
 80159b2:	6270      	str	r0, [r6, #36]	; 0x24
 80159b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159b8:	6004      	str	r4, [r0, #0]
 80159ba:	60c4      	str	r4, [r0, #12]
 80159bc:	b13d      	cbz	r5, 80159ce <_Bfree+0x2c>
 80159be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80159c0:	686a      	ldr	r2, [r5, #4]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80159c8:	6029      	str	r1, [r5, #0]
 80159ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80159ce:	bd70      	pop	{r4, r5, r6, pc}

080159d0 <__multadd>:
 80159d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d4:	690d      	ldr	r5, [r1, #16]
 80159d6:	461f      	mov	r7, r3
 80159d8:	4606      	mov	r6, r0
 80159da:	460c      	mov	r4, r1
 80159dc:	f101 0c14 	add.w	ip, r1, #20
 80159e0:	2300      	movs	r3, #0
 80159e2:	f8dc 0000 	ldr.w	r0, [ip]
 80159e6:	b281      	uxth	r1, r0
 80159e8:	fb02 7101 	mla	r1, r2, r1, r7
 80159ec:	0c0f      	lsrs	r7, r1, #16
 80159ee:	0c00      	lsrs	r0, r0, #16
 80159f0:	fb02 7000 	mla	r0, r2, r0, r7
 80159f4:	b289      	uxth	r1, r1
 80159f6:	3301      	adds	r3, #1
 80159f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80159fc:	429d      	cmp	r5, r3
 80159fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015a02:	f84c 1b04 	str.w	r1, [ip], #4
 8015a06:	dcec      	bgt.n	80159e2 <__multadd+0x12>
 8015a08:	b1d7      	cbz	r7, 8015a40 <__multadd+0x70>
 8015a0a:	68a3      	ldr	r3, [r4, #8]
 8015a0c:	42ab      	cmp	r3, r5
 8015a0e:	dc12      	bgt.n	8015a36 <__multadd+0x66>
 8015a10:	6861      	ldr	r1, [r4, #4]
 8015a12:	4630      	mov	r0, r6
 8015a14:	3101      	adds	r1, #1
 8015a16:	f7ff ff90 	bl	801593a <_Balloc>
 8015a1a:	6922      	ldr	r2, [r4, #16]
 8015a1c:	3202      	adds	r2, #2
 8015a1e:	f104 010c 	add.w	r1, r4, #12
 8015a22:	4680      	mov	r8, r0
 8015a24:	0092      	lsls	r2, r2, #2
 8015a26:	300c      	adds	r0, #12
 8015a28:	f7ff ff7c 	bl	8015924 <memcpy>
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	4630      	mov	r0, r6
 8015a30:	f7ff ffb7 	bl	80159a2 <_Bfree>
 8015a34:	4644      	mov	r4, r8
 8015a36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a3a:	3501      	adds	r5, #1
 8015a3c:	615f      	str	r7, [r3, #20]
 8015a3e:	6125      	str	r5, [r4, #16]
 8015a40:	4620      	mov	r0, r4
 8015a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a46 <__s2b>:
 8015a46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a4a:	460c      	mov	r4, r1
 8015a4c:	4615      	mov	r5, r2
 8015a4e:	461f      	mov	r7, r3
 8015a50:	2209      	movs	r2, #9
 8015a52:	3308      	adds	r3, #8
 8015a54:	4606      	mov	r6, r0
 8015a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	db20      	blt.n	8015aa4 <__s2b+0x5e>
 8015a62:	4630      	mov	r0, r6
 8015a64:	f7ff ff69 	bl	801593a <_Balloc>
 8015a68:	9b08      	ldr	r3, [sp, #32]
 8015a6a:	6143      	str	r3, [r0, #20]
 8015a6c:	2d09      	cmp	r5, #9
 8015a6e:	f04f 0301 	mov.w	r3, #1
 8015a72:	6103      	str	r3, [r0, #16]
 8015a74:	dd19      	ble.n	8015aaa <__s2b+0x64>
 8015a76:	f104 0809 	add.w	r8, r4, #9
 8015a7a:	46c1      	mov	r9, r8
 8015a7c:	442c      	add	r4, r5
 8015a7e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015a82:	4601      	mov	r1, r0
 8015a84:	3b30      	subs	r3, #48	; 0x30
 8015a86:	220a      	movs	r2, #10
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f7ff ffa1 	bl	80159d0 <__multadd>
 8015a8e:	45a1      	cmp	r9, r4
 8015a90:	d1f5      	bne.n	8015a7e <__s2b+0x38>
 8015a92:	eb08 0405 	add.w	r4, r8, r5
 8015a96:	3c08      	subs	r4, #8
 8015a98:	1b2d      	subs	r5, r5, r4
 8015a9a:	1963      	adds	r3, r4, r5
 8015a9c:	42bb      	cmp	r3, r7
 8015a9e:	db07      	blt.n	8015ab0 <__s2b+0x6a>
 8015aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aa4:	0052      	lsls	r2, r2, #1
 8015aa6:	3101      	adds	r1, #1
 8015aa8:	e7d9      	b.n	8015a5e <__s2b+0x18>
 8015aaa:	340a      	adds	r4, #10
 8015aac:	2509      	movs	r5, #9
 8015aae:	e7f3      	b.n	8015a98 <__s2b+0x52>
 8015ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ab4:	4601      	mov	r1, r0
 8015ab6:	3b30      	subs	r3, #48	; 0x30
 8015ab8:	220a      	movs	r2, #10
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ff ff88 	bl	80159d0 <__multadd>
 8015ac0:	e7eb      	b.n	8015a9a <__s2b+0x54>

08015ac2 <__hi0bits>:
 8015ac2:	0c02      	lsrs	r2, r0, #16
 8015ac4:	0412      	lsls	r2, r2, #16
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	b9b2      	cbnz	r2, 8015af8 <__hi0bits+0x36>
 8015aca:	0403      	lsls	r3, r0, #16
 8015acc:	2010      	movs	r0, #16
 8015ace:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015ad2:	bf04      	itt	eq
 8015ad4:	021b      	lsleq	r3, r3, #8
 8015ad6:	3008      	addeq	r0, #8
 8015ad8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015adc:	bf04      	itt	eq
 8015ade:	011b      	lsleq	r3, r3, #4
 8015ae0:	3004      	addeq	r0, #4
 8015ae2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015ae6:	bf04      	itt	eq
 8015ae8:	009b      	lsleq	r3, r3, #2
 8015aea:	3002      	addeq	r0, #2
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	db06      	blt.n	8015afe <__hi0bits+0x3c>
 8015af0:	005b      	lsls	r3, r3, #1
 8015af2:	d503      	bpl.n	8015afc <__hi0bits+0x3a>
 8015af4:	3001      	adds	r0, #1
 8015af6:	4770      	bx	lr
 8015af8:	2000      	movs	r0, #0
 8015afa:	e7e8      	b.n	8015ace <__hi0bits+0xc>
 8015afc:	2020      	movs	r0, #32
 8015afe:	4770      	bx	lr

08015b00 <__lo0bits>:
 8015b00:	6803      	ldr	r3, [r0, #0]
 8015b02:	f013 0207 	ands.w	r2, r3, #7
 8015b06:	4601      	mov	r1, r0
 8015b08:	d00b      	beq.n	8015b22 <__lo0bits+0x22>
 8015b0a:	07da      	lsls	r2, r3, #31
 8015b0c:	d423      	bmi.n	8015b56 <__lo0bits+0x56>
 8015b0e:	0798      	lsls	r0, r3, #30
 8015b10:	bf49      	itett	mi
 8015b12:	085b      	lsrmi	r3, r3, #1
 8015b14:	089b      	lsrpl	r3, r3, #2
 8015b16:	2001      	movmi	r0, #1
 8015b18:	600b      	strmi	r3, [r1, #0]
 8015b1a:	bf5c      	itt	pl
 8015b1c:	600b      	strpl	r3, [r1, #0]
 8015b1e:	2002      	movpl	r0, #2
 8015b20:	4770      	bx	lr
 8015b22:	b298      	uxth	r0, r3
 8015b24:	b9a8      	cbnz	r0, 8015b52 <__lo0bits+0x52>
 8015b26:	0c1b      	lsrs	r3, r3, #16
 8015b28:	2010      	movs	r0, #16
 8015b2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015b2e:	bf04      	itt	eq
 8015b30:	0a1b      	lsreq	r3, r3, #8
 8015b32:	3008      	addeq	r0, #8
 8015b34:	071a      	lsls	r2, r3, #28
 8015b36:	bf04      	itt	eq
 8015b38:	091b      	lsreq	r3, r3, #4
 8015b3a:	3004      	addeq	r0, #4
 8015b3c:	079a      	lsls	r2, r3, #30
 8015b3e:	bf04      	itt	eq
 8015b40:	089b      	lsreq	r3, r3, #2
 8015b42:	3002      	addeq	r0, #2
 8015b44:	07da      	lsls	r2, r3, #31
 8015b46:	d402      	bmi.n	8015b4e <__lo0bits+0x4e>
 8015b48:	085b      	lsrs	r3, r3, #1
 8015b4a:	d006      	beq.n	8015b5a <__lo0bits+0x5a>
 8015b4c:	3001      	adds	r0, #1
 8015b4e:	600b      	str	r3, [r1, #0]
 8015b50:	4770      	bx	lr
 8015b52:	4610      	mov	r0, r2
 8015b54:	e7e9      	b.n	8015b2a <__lo0bits+0x2a>
 8015b56:	2000      	movs	r0, #0
 8015b58:	4770      	bx	lr
 8015b5a:	2020      	movs	r0, #32
 8015b5c:	4770      	bx	lr

08015b5e <__i2b>:
 8015b5e:	b510      	push	{r4, lr}
 8015b60:	460c      	mov	r4, r1
 8015b62:	2101      	movs	r1, #1
 8015b64:	f7ff fee9 	bl	801593a <_Balloc>
 8015b68:	2201      	movs	r2, #1
 8015b6a:	6144      	str	r4, [r0, #20]
 8015b6c:	6102      	str	r2, [r0, #16]
 8015b6e:	bd10      	pop	{r4, pc}

08015b70 <__multiply>:
 8015b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b74:	4614      	mov	r4, r2
 8015b76:	690a      	ldr	r2, [r1, #16]
 8015b78:	6923      	ldr	r3, [r4, #16]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	bfb8      	it	lt
 8015b7e:	460b      	movlt	r3, r1
 8015b80:	4688      	mov	r8, r1
 8015b82:	bfbc      	itt	lt
 8015b84:	46a0      	movlt	r8, r4
 8015b86:	461c      	movlt	r4, r3
 8015b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015b8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b98:	eb07 0609 	add.w	r6, r7, r9
 8015b9c:	42b3      	cmp	r3, r6
 8015b9e:	bfb8      	it	lt
 8015ba0:	3101      	addlt	r1, #1
 8015ba2:	f7ff feca 	bl	801593a <_Balloc>
 8015ba6:	f100 0514 	add.w	r5, r0, #20
 8015baa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015bae:	462b      	mov	r3, r5
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	4573      	cmp	r3, lr
 8015bb4:	d316      	bcc.n	8015be4 <__multiply+0x74>
 8015bb6:	f104 0214 	add.w	r2, r4, #20
 8015bba:	f108 0114 	add.w	r1, r8, #20
 8015bbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015bc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	9b00      	ldr	r3, [sp, #0]
 8015bca:	9201      	str	r2, [sp, #4]
 8015bcc:	4293      	cmp	r3, r2
 8015bce:	d80c      	bhi.n	8015bea <__multiply+0x7a>
 8015bd0:	2e00      	cmp	r6, #0
 8015bd2:	dd03      	ble.n	8015bdc <__multiply+0x6c>
 8015bd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d05d      	beq.n	8015c98 <__multiply+0x128>
 8015bdc:	6106      	str	r6, [r0, #16]
 8015bde:	b003      	add	sp, #12
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be4:	f843 2b04 	str.w	r2, [r3], #4
 8015be8:	e7e3      	b.n	8015bb2 <__multiply+0x42>
 8015bea:	f8b2 b000 	ldrh.w	fp, [r2]
 8015bee:	f1bb 0f00 	cmp.w	fp, #0
 8015bf2:	d023      	beq.n	8015c3c <__multiply+0xcc>
 8015bf4:	4689      	mov	r9, r1
 8015bf6:	46ac      	mov	ip, r5
 8015bf8:	f04f 0800 	mov.w	r8, #0
 8015bfc:	f859 4b04 	ldr.w	r4, [r9], #4
 8015c00:	f8dc a000 	ldr.w	sl, [ip]
 8015c04:	b2a3      	uxth	r3, r4
 8015c06:	fa1f fa8a 	uxth.w	sl, sl
 8015c0a:	fb0b a303 	mla	r3, fp, r3, sl
 8015c0e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015c12:	f8dc 4000 	ldr.w	r4, [ip]
 8015c16:	4443      	add	r3, r8
 8015c18:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015c1c:	fb0b 840a 	mla	r4, fp, sl, r8
 8015c20:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015c24:	46e2      	mov	sl, ip
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015c2c:	454f      	cmp	r7, r9
 8015c2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015c32:	f84a 3b04 	str.w	r3, [sl], #4
 8015c36:	d82b      	bhi.n	8015c90 <__multiply+0x120>
 8015c38:	f8cc 8004 	str.w	r8, [ip, #4]
 8015c3c:	9b01      	ldr	r3, [sp, #4]
 8015c3e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015c42:	3204      	adds	r2, #4
 8015c44:	f1ba 0f00 	cmp.w	sl, #0
 8015c48:	d020      	beq.n	8015c8c <__multiply+0x11c>
 8015c4a:	682b      	ldr	r3, [r5, #0]
 8015c4c:	4689      	mov	r9, r1
 8015c4e:	46a8      	mov	r8, r5
 8015c50:	f04f 0b00 	mov.w	fp, #0
 8015c54:	f8b9 c000 	ldrh.w	ip, [r9]
 8015c58:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015c5c:	fb0a 440c 	mla	r4, sl, ip, r4
 8015c60:	445c      	add	r4, fp
 8015c62:	46c4      	mov	ip, r8
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8015c6e:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c72:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015c76:	0c1b      	lsrs	r3, r3, #16
 8015c78:	fb0a b303 	mla	r3, sl, r3, fp
 8015c7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015c80:	454f      	cmp	r7, r9
 8015c82:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015c86:	d805      	bhi.n	8015c94 <__multiply+0x124>
 8015c88:	f8c8 3004 	str.w	r3, [r8, #4]
 8015c8c:	3504      	adds	r5, #4
 8015c8e:	e79b      	b.n	8015bc8 <__multiply+0x58>
 8015c90:	46d4      	mov	ip, sl
 8015c92:	e7b3      	b.n	8015bfc <__multiply+0x8c>
 8015c94:	46e0      	mov	r8, ip
 8015c96:	e7dd      	b.n	8015c54 <__multiply+0xe4>
 8015c98:	3e01      	subs	r6, #1
 8015c9a:	e799      	b.n	8015bd0 <__multiply+0x60>

08015c9c <__pow5mult>:
 8015c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca0:	4615      	mov	r5, r2
 8015ca2:	f012 0203 	ands.w	r2, r2, #3
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	460f      	mov	r7, r1
 8015caa:	d007      	beq.n	8015cbc <__pow5mult+0x20>
 8015cac:	3a01      	subs	r2, #1
 8015cae:	4c21      	ldr	r4, [pc, #132]	; (8015d34 <__pow5mult+0x98>)
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015cb6:	f7ff fe8b 	bl	80159d0 <__multadd>
 8015cba:	4607      	mov	r7, r0
 8015cbc:	10ad      	asrs	r5, r5, #2
 8015cbe:	d035      	beq.n	8015d2c <__pow5mult+0x90>
 8015cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015cc2:	b93c      	cbnz	r4, 8015cd4 <__pow5mult+0x38>
 8015cc4:	2010      	movs	r0, #16
 8015cc6:	f7ff fe13 	bl	80158f0 <malloc>
 8015cca:	6270      	str	r0, [r6, #36]	; 0x24
 8015ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cd0:	6004      	str	r4, [r0, #0]
 8015cd2:	60c4      	str	r4, [r0, #12]
 8015cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cdc:	b94c      	cbnz	r4, 8015cf2 <__pow5mult+0x56>
 8015cde:	f240 2171 	movw	r1, #625	; 0x271
 8015ce2:	4630      	mov	r0, r6
 8015ce4:	f7ff ff3b 	bl	8015b5e <__i2b>
 8015ce8:	2300      	movs	r3, #0
 8015cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cee:	4604      	mov	r4, r0
 8015cf0:	6003      	str	r3, [r0, #0]
 8015cf2:	f04f 0800 	mov.w	r8, #0
 8015cf6:	07eb      	lsls	r3, r5, #31
 8015cf8:	d50a      	bpl.n	8015d10 <__pow5mult+0x74>
 8015cfa:	4639      	mov	r1, r7
 8015cfc:	4622      	mov	r2, r4
 8015cfe:	4630      	mov	r0, r6
 8015d00:	f7ff ff36 	bl	8015b70 <__multiply>
 8015d04:	4639      	mov	r1, r7
 8015d06:	4681      	mov	r9, r0
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f7ff fe4a 	bl	80159a2 <_Bfree>
 8015d0e:	464f      	mov	r7, r9
 8015d10:	106d      	asrs	r5, r5, #1
 8015d12:	d00b      	beq.n	8015d2c <__pow5mult+0x90>
 8015d14:	6820      	ldr	r0, [r4, #0]
 8015d16:	b938      	cbnz	r0, 8015d28 <__pow5mult+0x8c>
 8015d18:	4622      	mov	r2, r4
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	4630      	mov	r0, r6
 8015d1e:	f7ff ff27 	bl	8015b70 <__multiply>
 8015d22:	6020      	str	r0, [r4, #0]
 8015d24:	f8c0 8000 	str.w	r8, [r0]
 8015d28:	4604      	mov	r4, r0
 8015d2a:	e7e4      	b.n	8015cf6 <__pow5mult+0x5a>
 8015d2c:	4638      	mov	r0, r7
 8015d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d32:	bf00      	nop
 8015d34:	080177c0 	.word	0x080177c0

08015d38 <__lshift>:
 8015d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d3c:	460c      	mov	r4, r1
 8015d3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d42:	6923      	ldr	r3, [r4, #16]
 8015d44:	6849      	ldr	r1, [r1, #4]
 8015d46:	eb0a 0903 	add.w	r9, sl, r3
 8015d4a:	68a3      	ldr	r3, [r4, #8]
 8015d4c:	4607      	mov	r7, r0
 8015d4e:	4616      	mov	r6, r2
 8015d50:	f109 0501 	add.w	r5, r9, #1
 8015d54:	42ab      	cmp	r3, r5
 8015d56:	db32      	blt.n	8015dbe <__lshift+0x86>
 8015d58:	4638      	mov	r0, r7
 8015d5a:	f7ff fdee 	bl	801593a <_Balloc>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	4680      	mov	r8, r0
 8015d62:	f100 0114 	add.w	r1, r0, #20
 8015d66:	461a      	mov	r2, r3
 8015d68:	4553      	cmp	r3, sl
 8015d6a:	db2b      	blt.n	8015dc4 <__lshift+0x8c>
 8015d6c:	6920      	ldr	r0, [r4, #16]
 8015d6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d72:	f104 0314 	add.w	r3, r4, #20
 8015d76:	f016 021f 	ands.w	r2, r6, #31
 8015d7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d82:	d025      	beq.n	8015dd0 <__lshift+0x98>
 8015d84:	f1c2 0e20 	rsb	lr, r2, #32
 8015d88:	2000      	movs	r0, #0
 8015d8a:	681e      	ldr	r6, [r3, #0]
 8015d8c:	468a      	mov	sl, r1
 8015d8e:	4096      	lsls	r6, r2
 8015d90:	4330      	orrs	r0, r6
 8015d92:	f84a 0b04 	str.w	r0, [sl], #4
 8015d96:	f853 0b04 	ldr.w	r0, [r3], #4
 8015d9a:	459c      	cmp	ip, r3
 8015d9c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015da0:	d814      	bhi.n	8015dcc <__lshift+0x94>
 8015da2:	6048      	str	r0, [r1, #4]
 8015da4:	b108      	cbz	r0, 8015daa <__lshift+0x72>
 8015da6:	f109 0502 	add.w	r5, r9, #2
 8015daa:	3d01      	subs	r5, #1
 8015dac:	4638      	mov	r0, r7
 8015dae:	f8c8 5010 	str.w	r5, [r8, #16]
 8015db2:	4621      	mov	r1, r4
 8015db4:	f7ff fdf5 	bl	80159a2 <_Bfree>
 8015db8:	4640      	mov	r0, r8
 8015dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dbe:	3101      	adds	r1, #1
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	e7c7      	b.n	8015d54 <__lshift+0x1c>
 8015dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	e7cd      	b.n	8015d68 <__lshift+0x30>
 8015dcc:	4651      	mov	r1, sl
 8015dce:	e7dc      	b.n	8015d8a <__lshift+0x52>
 8015dd0:	3904      	subs	r1, #4
 8015dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8015dda:	459c      	cmp	ip, r3
 8015ddc:	d8f9      	bhi.n	8015dd2 <__lshift+0x9a>
 8015dde:	e7e4      	b.n	8015daa <__lshift+0x72>

08015de0 <__mcmp>:
 8015de0:	6903      	ldr	r3, [r0, #16]
 8015de2:	690a      	ldr	r2, [r1, #16]
 8015de4:	1a9b      	subs	r3, r3, r2
 8015de6:	b530      	push	{r4, r5, lr}
 8015de8:	d10c      	bne.n	8015e04 <__mcmp+0x24>
 8015dea:	0092      	lsls	r2, r2, #2
 8015dec:	3014      	adds	r0, #20
 8015dee:	3114      	adds	r1, #20
 8015df0:	1884      	adds	r4, r0, r2
 8015df2:	4411      	add	r1, r2
 8015df4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015df8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015dfc:	4295      	cmp	r5, r2
 8015dfe:	d003      	beq.n	8015e08 <__mcmp+0x28>
 8015e00:	d305      	bcc.n	8015e0e <__mcmp+0x2e>
 8015e02:	2301      	movs	r3, #1
 8015e04:	4618      	mov	r0, r3
 8015e06:	bd30      	pop	{r4, r5, pc}
 8015e08:	42a0      	cmp	r0, r4
 8015e0a:	d3f3      	bcc.n	8015df4 <__mcmp+0x14>
 8015e0c:	e7fa      	b.n	8015e04 <__mcmp+0x24>
 8015e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e12:	e7f7      	b.n	8015e04 <__mcmp+0x24>

08015e14 <__mdiff>:
 8015e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e18:	460d      	mov	r5, r1
 8015e1a:	4607      	mov	r7, r0
 8015e1c:	4611      	mov	r1, r2
 8015e1e:	4628      	mov	r0, r5
 8015e20:	4614      	mov	r4, r2
 8015e22:	f7ff ffdd 	bl	8015de0 <__mcmp>
 8015e26:	1e06      	subs	r6, r0, #0
 8015e28:	d108      	bne.n	8015e3c <__mdiff+0x28>
 8015e2a:	4631      	mov	r1, r6
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	f7ff fd84 	bl	801593a <_Balloc>
 8015e32:	2301      	movs	r3, #1
 8015e34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e3c:	bfa4      	itt	ge
 8015e3e:	4623      	movge	r3, r4
 8015e40:	462c      	movge	r4, r5
 8015e42:	4638      	mov	r0, r7
 8015e44:	6861      	ldr	r1, [r4, #4]
 8015e46:	bfa6      	itte	ge
 8015e48:	461d      	movge	r5, r3
 8015e4a:	2600      	movge	r6, #0
 8015e4c:	2601      	movlt	r6, #1
 8015e4e:	f7ff fd74 	bl	801593a <_Balloc>
 8015e52:	692b      	ldr	r3, [r5, #16]
 8015e54:	60c6      	str	r6, [r0, #12]
 8015e56:	6926      	ldr	r6, [r4, #16]
 8015e58:	f105 0914 	add.w	r9, r5, #20
 8015e5c:	f104 0214 	add.w	r2, r4, #20
 8015e60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015e64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015e68:	f100 0514 	add.w	r5, r0, #20
 8015e6c:	f04f 0e00 	mov.w	lr, #0
 8015e70:	f852 ab04 	ldr.w	sl, [r2], #4
 8015e74:	f859 4b04 	ldr.w	r4, [r9], #4
 8015e78:	fa1e f18a 	uxtah	r1, lr, sl
 8015e7c:	b2a3      	uxth	r3, r4
 8015e7e:	1ac9      	subs	r1, r1, r3
 8015e80:	0c23      	lsrs	r3, r4, #16
 8015e82:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015e86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015e8a:	b289      	uxth	r1, r1
 8015e8c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015e90:	45c8      	cmp	r8, r9
 8015e92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015e96:	4694      	mov	ip, r2
 8015e98:	f845 3b04 	str.w	r3, [r5], #4
 8015e9c:	d8e8      	bhi.n	8015e70 <__mdiff+0x5c>
 8015e9e:	45bc      	cmp	ip, r7
 8015ea0:	d304      	bcc.n	8015eac <__mdiff+0x98>
 8015ea2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015ea6:	b183      	cbz	r3, 8015eca <__mdiff+0xb6>
 8015ea8:	6106      	str	r6, [r0, #16]
 8015eaa:	e7c5      	b.n	8015e38 <__mdiff+0x24>
 8015eac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015eb0:	fa1e f381 	uxtah	r3, lr, r1
 8015eb4:	141a      	asrs	r2, r3, #16
 8015eb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015ec0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015ec4:	f845 3b04 	str.w	r3, [r5], #4
 8015ec8:	e7e9      	b.n	8015e9e <__mdiff+0x8a>
 8015eca:	3e01      	subs	r6, #1
 8015ecc:	e7e9      	b.n	8015ea2 <__mdiff+0x8e>
	...

08015ed0 <__ulp>:
 8015ed0:	4b12      	ldr	r3, [pc, #72]	; (8015f1c <__ulp+0x4c>)
 8015ed2:	ee10 2a90 	vmov	r2, s1
 8015ed6:	401a      	ands	r2, r3
 8015ed8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	dd04      	ble.n	8015eea <__ulp+0x1a>
 8015ee0:	2000      	movs	r0, #0
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	ec41 0b10 	vmov	d0, r0, r1
 8015ee8:	4770      	bx	lr
 8015eea:	425b      	negs	r3, r3
 8015eec:	151b      	asrs	r3, r3, #20
 8015eee:	2b13      	cmp	r3, #19
 8015ef0:	f04f 0000 	mov.w	r0, #0
 8015ef4:	f04f 0100 	mov.w	r1, #0
 8015ef8:	dc04      	bgt.n	8015f04 <__ulp+0x34>
 8015efa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015efe:	fa42 f103 	asr.w	r1, r2, r3
 8015f02:	e7ef      	b.n	8015ee4 <__ulp+0x14>
 8015f04:	3b14      	subs	r3, #20
 8015f06:	2b1e      	cmp	r3, #30
 8015f08:	f04f 0201 	mov.w	r2, #1
 8015f0c:	bfda      	itte	le
 8015f0e:	f1c3 031f 	rsble	r3, r3, #31
 8015f12:	fa02 f303 	lslle.w	r3, r2, r3
 8015f16:	4613      	movgt	r3, r2
 8015f18:	4618      	mov	r0, r3
 8015f1a:	e7e3      	b.n	8015ee4 <__ulp+0x14>
 8015f1c:	7ff00000 	.word	0x7ff00000

08015f20 <__b2d>:
 8015f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f22:	6905      	ldr	r5, [r0, #16]
 8015f24:	f100 0714 	add.w	r7, r0, #20
 8015f28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015f2c:	1f2e      	subs	r6, r5, #4
 8015f2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015f32:	4620      	mov	r0, r4
 8015f34:	f7ff fdc5 	bl	8015ac2 <__hi0bits>
 8015f38:	f1c0 0320 	rsb	r3, r0, #32
 8015f3c:	280a      	cmp	r0, #10
 8015f3e:	600b      	str	r3, [r1, #0]
 8015f40:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015fb8 <__b2d+0x98>
 8015f44:	dc14      	bgt.n	8015f70 <__b2d+0x50>
 8015f46:	f1c0 0e0b 	rsb	lr, r0, #11
 8015f4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8015f4e:	42b7      	cmp	r7, r6
 8015f50:	ea41 030c 	orr.w	r3, r1, ip
 8015f54:	bf34      	ite	cc
 8015f56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f5a:	2100      	movcs	r1, #0
 8015f5c:	3015      	adds	r0, #21
 8015f5e:	fa04 f000 	lsl.w	r0, r4, r0
 8015f62:	fa21 f10e 	lsr.w	r1, r1, lr
 8015f66:	ea40 0201 	orr.w	r2, r0, r1
 8015f6a:	ec43 2b10 	vmov	d0, r2, r3
 8015f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f70:	42b7      	cmp	r7, r6
 8015f72:	bf3a      	itte	cc
 8015f74:	f1a5 0608 	subcc.w	r6, r5, #8
 8015f78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f7c:	2100      	movcs	r1, #0
 8015f7e:	380b      	subs	r0, #11
 8015f80:	d015      	beq.n	8015fae <__b2d+0x8e>
 8015f82:	4084      	lsls	r4, r0
 8015f84:	f1c0 0520 	rsb	r5, r0, #32
 8015f88:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015f8c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015f90:	42be      	cmp	r6, r7
 8015f92:	fa21 fc05 	lsr.w	ip, r1, r5
 8015f96:	ea44 030c 	orr.w	r3, r4, ip
 8015f9a:	bf8c      	ite	hi
 8015f9c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015fa0:	2400      	movls	r4, #0
 8015fa2:	fa01 f000 	lsl.w	r0, r1, r0
 8015fa6:	40ec      	lsrs	r4, r5
 8015fa8:	ea40 0204 	orr.w	r2, r0, r4
 8015fac:	e7dd      	b.n	8015f6a <__b2d+0x4a>
 8015fae:	ea44 030c 	orr.w	r3, r4, ip
 8015fb2:	460a      	mov	r2, r1
 8015fb4:	e7d9      	b.n	8015f6a <__b2d+0x4a>
 8015fb6:	bf00      	nop
 8015fb8:	3ff00000 	.word	0x3ff00000

08015fbc <__d2b>:
 8015fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015fc0:	460e      	mov	r6, r1
 8015fc2:	2101      	movs	r1, #1
 8015fc4:	ec59 8b10 	vmov	r8, r9, d0
 8015fc8:	4615      	mov	r5, r2
 8015fca:	f7ff fcb6 	bl	801593a <_Balloc>
 8015fce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015fd2:	4607      	mov	r7, r0
 8015fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015fd8:	bb34      	cbnz	r4, 8016028 <__d2b+0x6c>
 8015fda:	9301      	str	r3, [sp, #4]
 8015fdc:	f1b8 0300 	subs.w	r3, r8, #0
 8015fe0:	d027      	beq.n	8016032 <__d2b+0x76>
 8015fe2:	a802      	add	r0, sp, #8
 8015fe4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015fe8:	f7ff fd8a 	bl	8015b00 <__lo0bits>
 8015fec:	9900      	ldr	r1, [sp, #0]
 8015fee:	b1f0      	cbz	r0, 801602e <__d2b+0x72>
 8015ff0:	9a01      	ldr	r2, [sp, #4]
 8015ff2:	f1c0 0320 	rsb	r3, r0, #32
 8015ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8015ffa:	430b      	orrs	r3, r1
 8015ffc:	40c2      	lsrs	r2, r0
 8015ffe:	617b      	str	r3, [r7, #20]
 8016000:	9201      	str	r2, [sp, #4]
 8016002:	9b01      	ldr	r3, [sp, #4]
 8016004:	61bb      	str	r3, [r7, #24]
 8016006:	2b00      	cmp	r3, #0
 8016008:	bf14      	ite	ne
 801600a:	2102      	movne	r1, #2
 801600c:	2101      	moveq	r1, #1
 801600e:	6139      	str	r1, [r7, #16]
 8016010:	b1c4      	cbz	r4, 8016044 <__d2b+0x88>
 8016012:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016016:	4404      	add	r4, r0
 8016018:	6034      	str	r4, [r6, #0]
 801601a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801601e:	6028      	str	r0, [r5, #0]
 8016020:	4638      	mov	r0, r7
 8016022:	b003      	add	sp, #12
 8016024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801602c:	e7d5      	b.n	8015fda <__d2b+0x1e>
 801602e:	6179      	str	r1, [r7, #20]
 8016030:	e7e7      	b.n	8016002 <__d2b+0x46>
 8016032:	a801      	add	r0, sp, #4
 8016034:	f7ff fd64 	bl	8015b00 <__lo0bits>
 8016038:	9b01      	ldr	r3, [sp, #4]
 801603a:	617b      	str	r3, [r7, #20]
 801603c:	2101      	movs	r1, #1
 801603e:	6139      	str	r1, [r7, #16]
 8016040:	3020      	adds	r0, #32
 8016042:	e7e5      	b.n	8016010 <__d2b+0x54>
 8016044:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801604c:	6030      	str	r0, [r6, #0]
 801604e:	6918      	ldr	r0, [r3, #16]
 8016050:	f7ff fd37 	bl	8015ac2 <__hi0bits>
 8016054:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016058:	e7e1      	b.n	801601e <__d2b+0x62>

0801605a <__ratio>:
 801605a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605e:	4688      	mov	r8, r1
 8016060:	4669      	mov	r1, sp
 8016062:	4681      	mov	r9, r0
 8016064:	f7ff ff5c 	bl	8015f20 <__b2d>
 8016068:	a901      	add	r1, sp, #4
 801606a:	4640      	mov	r0, r8
 801606c:	ec57 6b10 	vmov	r6, r7, d0
 8016070:	f7ff ff56 	bl	8015f20 <__b2d>
 8016074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016078:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801607c:	eba3 0c02 	sub.w	ip, r3, r2
 8016080:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016084:	1a9b      	subs	r3, r3, r2
 8016086:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801608a:	ec5b ab10 	vmov	sl, fp, d0
 801608e:	2b00      	cmp	r3, #0
 8016090:	bfce      	itee	gt
 8016092:	463a      	movgt	r2, r7
 8016094:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016098:	465a      	movle	r2, fp
 801609a:	4659      	mov	r1, fp
 801609c:	463d      	mov	r5, r7
 801609e:	bfd4      	ite	le
 80160a0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80160a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80160a8:	4630      	mov	r0, r6
 80160aa:	ee10 2a10 	vmov	r2, s0
 80160ae:	460b      	mov	r3, r1
 80160b0:	4629      	mov	r1, r5
 80160b2:	f7ea fbe3 	bl	800087c <__aeabi_ddiv>
 80160b6:	ec41 0b10 	vmov	d0, r0, r1
 80160ba:	b003      	add	sp, #12
 80160bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160c0 <__copybits>:
 80160c0:	3901      	subs	r1, #1
 80160c2:	b510      	push	{r4, lr}
 80160c4:	1149      	asrs	r1, r1, #5
 80160c6:	6914      	ldr	r4, [r2, #16]
 80160c8:	3101      	adds	r1, #1
 80160ca:	f102 0314 	add.w	r3, r2, #20
 80160ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80160d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80160d6:	42a3      	cmp	r3, r4
 80160d8:	4602      	mov	r2, r0
 80160da:	d303      	bcc.n	80160e4 <__copybits+0x24>
 80160dc:	2300      	movs	r3, #0
 80160de:	428a      	cmp	r2, r1
 80160e0:	d305      	bcc.n	80160ee <__copybits+0x2e>
 80160e2:	bd10      	pop	{r4, pc}
 80160e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80160e8:	f840 2b04 	str.w	r2, [r0], #4
 80160ec:	e7f3      	b.n	80160d6 <__copybits+0x16>
 80160ee:	f842 3b04 	str.w	r3, [r2], #4
 80160f2:	e7f4      	b.n	80160de <__copybits+0x1e>

080160f4 <__any_on>:
 80160f4:	f100 0214 	add.w	r2, r0, #20
 80160f8:	6900      	ldr	r0, [r0, #16]
 80160fa:	114b      	asrs	r3, r1, #5
 80160fc:	4298      	cmp	r0, r3
 80160fe:	b510      	push	{r4, lr}
 8016100:	db11      	blt.n	8016126 <__any_on+0x32>
 8016102:	dd0a      	ble.n	801611a <__any_on+0x26>
 8016104:	f011 011f 	ands.w	r1, r1, #31
 8016108:	d007      	beq.n	801611a <__any_on+0x26>
 801610a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801610e:	fa24 f001 	lsr.w	r0, r4, r1
 8016112:	fa00 f101 	lsl.w	r1, r0, r1
 8016116:	428c      	cmp	r4, r1
 8016118:	d10b      	bne.n	8016132 <__any_on+0x3e>
 801611a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801611e:	4293      	cmp	r3, r2
 8016120:	d803      	bhi.n	801612a <__any_on+0x36>
 8016122:	2000      	movs	r0, #0
 8016124:	bd10      	pop	{r4, pc}
 8016126:	4603      	mov	r3, r0
 8016128:	e7f7      	b.n	801611a <__any_on+0x26>
 801612a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801612e:	2900      	cmp	r1, #0
 8016130:	d0f5      	beq.n	801611e <__any_on+0x2a>
 8016132:	2001      	movs	r0, #1
 8016134:	e7f6      	b.n	8016124 <__any_on+0x30>

08016136 <_calloc_r>:
 8016136:	b538      	push	{r3, r4, r5, lr}
 8016138:	fb02 f401 	mul.w	r4, r2, r1
 801613c:	4621      	mov	r1, r4
 801613e:	f000 f857 	bl	80161f0 <_malloc_r>
 8016142:	4605      	mov	r5, r0
 8016144:	b118      	cbz	r0, 801614e <_calloc_r+0x18>
 8016146:	4622      	mov	r2, r4
 8016148:	2100      	movs	r1, #0
 801614a:	f7fc f911 	bl	8012370 <memset>
 801614e:	4628      	mov	r0, r5
 8016150:	bd38      	pop	{r3, r4, r5, pc}
	...

08016154 <_free_r>:
 8016154:	b538      	push	{r3, r4, r5, lr}
 8016156:	4605      	mov	r5, r0
 8016158:	2900      	cmp	r1, #0
 801615a:	d045      	beq.n	80161e8 <_free_r+0x94>
 801615c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016160:	1f0c      	subs	r4, r1, #4
 8016162:	2b00      	cmp	r3, #0
 8016164:	bfb8      	it	lt
 8016166:	18e4      	addlt	r4, r4, r3
 8016168:	f000 ffa5 	bl	80170b6 <__malloc_lock>
 801616c:	4a1f      	ldr	r2, [pc, #124]	; (80161ec <_free_r+0x98>)
 801616e:	6813      	ldr	r3, [r2, #0]
 8016170:	4610      	mov	r0, r2
 8016172:	b933      	cbnz	r3, 8016182 <_free_r+0x2e>
 8016174:	6063      	str	r3, [r4, #4]
 8016176:	6014      	str	r4, [r2, #0]
 8016178:	4628      	mov	r0, r5
 801617a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801617e:	f000 bf9b 	b.w	80170b8 <__malloc_unlock>
 8016182:	42a3      	cmp	r3, r4
 8016184:	d90c      	bls.n	80161a0 <_free_r+0x4c>
 8016186:	6821      	ldr	r1, [r4, #0]
 8016188:	1862      	adds	r2, r4, r1
 801618a:	4293      	cmp	r3, r2
 801618c:	bf04      	itt	eq
 801618e:	681a      	ldreq	r2, [r3, #0]
 8016190:	685b      	ldreq	r3, [r3, #4]
 8016192:	6063      	str	r3, [r4, #4]
 8016194:	bf04      	itt	eq
 8016196:	1852      	addeq	r2, r2, r1
 8016198:	6022      	streq	r2, [r4, #0]
 801619a:	6004      	str	r4, [r0, #0]
 801619c:	e7ec      	b.n	8016178 <_free_r+0x24>
 801619e:	4613      	mov	r3, r2
 80161a0:	685a      	ldr	r2, [r3, #4]
 80161a2:	b10a      	cbz	r2, 80161a8 <_free_r+0x54>
 80161a4:	42a2      	cmp	r2, r4
 80161a6:	d9fa      	bls.n	801619e <_free_r+0x4a>
 80161a8:	6819      	ldr	r1, [r3, #0]
 80161aa:	1858      	adds	r0, r3, r1
 80161ac:	42a0      	cmp	r0, r4
 80161ae:	d10b      	bne.n	80161c8 <_free_r+0x74>
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	4401      	add	r1, r0
 80161b4:	1858      	adds	r0, r3, r1
 80161b6:	4282      	cmp	r2, r0
 80161b8:	6019      	str	r1, [r3, #0]
 80161ba:	d1dd      	bne.n	8016178 <_free_r+0x24>
 80161bc:	6810      	ldr	r0, [r2, #0]
 80161be:	6852      	ldr	r2, [r2, #4]
 80161c0:	605a      	str	r2, [r3, #4]
 80161c2:	4401      	add	r1, r0
 80161c4:	6019      	str	r1, [r3, #0]
 80161c6:	e7d7      	b.n	8016178 <_free_r+0x24>
 80161c8:	d902      	bls.n	80161d0 <_free_r+0x7c>
 80161ca:	230c      	movs	r3, #12
 80161cc:	602b      	str	r3, [r5, #0]
 80161ce:	e7d3      	b.n	8016178 <_free_r+0x24>
 80161d0:	6820      	ldr	r0, [r4, #0]
 80161d2:	1821      	adds	r1, r4, r0
 80161d4:	428a      	cmp	r2, r1
 80161d6:	bf04      	itt	eq
 80161d8:	6811      	ldreq	r1, [r2, #0]
 80161da:	6852      	ldreq	r2, [r2, #4]
 80161dc:	6062      	str	r2, [r4, #4]
 80161de:	bf04      	itt	eq
 80161e0:	1809      	addeq	r1, r1, r0
 80161e2:	6021      	streq	r1, [r4, #0]
 80161e4:	605c      	str	r4, [r3, #4]
 80161e6:	e7c7      	b.n	8016178 <_free_r+0x24>
 80161e8:	bd38      	pop	{r3, r4, r5, pc}
 80161ea:	bf00      	nop
 80161ec:	20036a7c 	.word	0x20036a7c

080161f0 <_malloc_r>:
 80161f0:	b570      	push	{r4, r5, r6, lr}
 80161f2:	1ccd      	adds	r5, r1, #3
 80161f4:	f025 0503 	bic.w	r5, r5, #3
 80161f8:	3508      	adds	r5, #8
 80161fa:	2d0c      	cmp	r5, #12
 80161fc:	bf38      	it	cc
 80161fe:	250c      	movcc	r5, #12
 8016200:	2d00      	cmp	r5, #0
 8016202:	4606      	mov	r6, r0
 8016204:	db01      	blt.n	801620a <_malloc_r+0x1a>
 8016206:	42a9      	cmp	r1, r5
 8016208:	d903      	bls.n	8016212 <_malloc_r+0x22>
 801620a:	230c      	movs	r3, #12
 801620c:	6033      	str	r3, [r6, #0]
 801620e:	2000      	movs	r0, #0
 8016210:	bd70      	pop	{r4, r5, r6, pc}
 8016212:	f000 ff50 	bl	80170b6 <__malloc_lock>
 8016216:	4a21      	ldr	r2, [pc, #132]	; (801629c <_malloc_r+0xac>)
 8016218:	6814      	ldr	r4, [r2, #0]
 801621a:	4621      	mov	r1, r4
 801621c:	b991      	cbnz	r1, 8016244 <_malloc_r+0x54>
 801621e:	4c20      	ldr	r4, [pc, #128]	; (80162a0 <_malloc_r+0xb0>)
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	b91b      	cbnz	r3, 801622c <_malloc_r+0x3c>
 8016224:	4630      	mov	r0, r6
 8016226:	f000 fde3 	bl	8016df0 <_sbrk_r>
 801622a:	6020      	str	r0, [r4, #0]
 801622c:	4629      	mov	r1, r5
 801622e:	4630      	mov	r0, r6
 8016230:	f000 fdde 	bl	8016df0 <_sbrk_r>
 8016234:	1c43      	adds	r3, r0, #1
 8016236:	d124      	bne.n	8016282 <_malloc_r+0x92>
 8016238:	230c      	movs	r3, #12
 801623a:	6033      	str	r3, [r6, #0]
 801623c:	4630      	mov	r0, r6
 801623e:	f000 ff3b 	bl	80170b8 <__malloc_unlock>
 8016242:	e7e4      	b.n	801620e <_malloc_r+0x1e>
 8016244:	680b      	ldr	r3, [r1, #0]
 8016246:	1b5b      	subs	r3, r3, r5
 8016248:	d418      	bmi.n	801627c <_malloc_r+0x8c>
 801624a:	2b0b      	cmp	r3, #11
 801624c:	d90f      	bls.n	801626e <_malloc_r+0x7e>
 801624e:	600b      	str	r3, [r1, #0]
 8016250:	50cd      	str	r5, [r1, r3]
 8016252:	18cc      	adds	r4, r1, r3
 8016254:	4630      	mov	r0, r6
 8016256:	f000 ff2f 	bl	80170b8 <__malloc_unlock>
 801625a:	f104 000b 	add.w	r0, r4, #11
 801625e:	1d23      	adds	r3, r4, #4
 8016260:	f020 0007 	bic.w	r0, r0, #7
 8016264:	1ac3      	subs	r3, r0, r3
 8016266:	d0d3      	beq.n	8016210 <_malloc_r+0x20>
 8016268:	425a      	negs	r2, r3
 801626a:	50e2      	str	r2, [r4, r3]
 801626c:	e7d0      	b.n	8016210 <_malloc_r+0x20>
 801626e:	428c      	cmp	r4, r1
 8016270:	684b      	ldr	r3, [r1, #4]
 8016272:	bf16      	itet	ne
 8016274:	6063      	strne	r3, [r4, #4]
 8016276:	6013      	streq	r3, [r2, #0]
 8016278:	460c      	movne	r4, r1
 801627a:	e7eb      	b.n	8016254 <_malloc_r+0x64>
 801627c:	460c      	mov	r4, r1
 801627e:	6849      	ldr	r1, [r1, #4]
 8016280:	e7cc      	b.n	801621c <_malloc_r+0x2c>
 8016282:	1cc4      	adds	r4, r0, #3
 8016284:	f024 0403 	bic.w	r4, r4, #3
 8016288:	42a0      	cmp	r0, r4
 801628a:	d005      	beq.n	8016298 <_malloc_r+0xa8>
 801628c:	1a21      	subs	r1, r4, r0
 801628e:	4630      	mov	r0, r6
 8016290:	f000 fdae 	bl	8016df0 <_sbrk_r>
 8016294:	3001      	adds	r0, #1
 8016296:	d0cf      	beq.n	8016238 <_malloc_r+0x48>
 8016298:	6025      	str	r5, [r4, #0]
 801629a:	e7db      	b.n	8016254 <_malloc_r+0x64>
 801629c:	20036a7c 	.word	0x20036a7c
 80162a0:	20036a80 	.word	0x20036a80

080162a4 <__ssputs_r>:
 80162a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162a8:	688e      	ldr	r6, [r1, #8]
 80162aa:	429e      	cmp	r6, r3
 80162ac:	4682      	mov	sl, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	4690      	mov	r8, r2
 80162b2:	4699      	mov	r9, r3
 80162b4:	d837      	bhi.n	8016326 <__ssputs_r+0x82>
 80162b6:	898a      	ldrh	r2, [r1, #12]
 80162b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80162bc:	d031      	beq.n	8016322 <__ssputs_r+0x7e>
 80162be:	6825      	ldr	r5, [r4, #0]
 80162c0:	6909      	ldr	r1, [r1, #16]
 80162c2:	1a6f      	subs	r7, r5, r1
 80162c4:	6965      	ldr	r5, [r4, #20]
 80162c6:	2302      	movs	r3, #2
 80162c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80162d0:	f109 0301 	add.w	r3, r9, #1
 80162d4:	443b      	add	r3, r7
 80162d6:	429d      	cmp	r5, r3
 80162d8:	bf38      	it	cc
 80162da:	461d      	movcc	r5, r3
 80162dc:	0553      	lsls	r3, r2, #21
 80162de:	d530      	bpl.n	8016342 <__ssputs_r+0x9e>
 80162e0:	4629      	mov	r1, r5
 80162e2:	f7ff ff85 	bl	80161f0 <_malloc_r>
 80162e6:	4606      	mov	r6, r0
 80162e8:	b950      	cbnz	r0, 8016300 <__ssputs_r+0x5c>
 80162ea:	230c      	movs	r3, #12
 80162ec:	f8ca 3000 	str.w	r3, [sl]
 80162f0:	89a3      	ldrh	r3, [r4, #12]
 80162f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162f6:	81a3      	strh	r3, [r4, #12]
 80162f8:	f04f 30ff 	mov.w	r0, #4294967295
 80162fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016300:	463a      	mov	r2, r7
 8016302:	6921      	ldr	r1, [r4, #16]
 8016304:	f7ff fb0e 	bl	8015924 <memcpy>
 8016308:	89a3      	ldrh	r3, [r4, #12]
 801630a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801630e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016312:	81a3      	strh	r3, [r4, #12]
 8016314:	6126      	str	r6, [r4, #16]
 8016316:	6165      	str	r5, [r4, #20]
 8016318:	443e      	add	r6, r7
 801631a:	1bed      	subs	r5, r5, r7
 801631c:	6026      	str	r6, [r4, #0]
 801631e:	60a5      	str	r5, [r4, #8]
 8016320:	464e      	mov	r6, r9
 8016322:	454e      	cmp	r6, r9
 8016324:	d900      	bls.n	8016328 <__ssputs_r+0x84>
 8016326:	464e      	mov	r6, r9
 8016328:	4632      	mov	r2, r6
 801632a:	4641      	mov	r1, r8
 801632c:	6820      	ldr	r0, [r4, #0]
 801632e:	f000 fea9 	bl	8017084 <memmove>
 8016332:	68a3      	ldr	r3, [r4, #8]
 8016334:	1b9b      	subs	r3, r3, r6
 8016336:	60a3      	str	r3, [r4, #8]
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	441e      	add	r6, r3
 801633c:	6026      	str	r6, [r4, #0]
 801633e:	2000      	movs	r0, #0
 8016340:	e7dc      	b.n	80162fc <__ssputs_r+0x58>
 8016342:	462a      	mov	r2, r5
 8016344:	f000 feb9 	bl	80170ba <_realloc_r>
 8016348:	4606      	mov	r6, r0
 801634a:	2800      	cmp	r0, #0
 801634c:	d1e2      	bne.n	8016314 <__ssputs_r+0x70>
 801634e:	6921      	ldr	r1, [r4, #16]
 8016350:	4650      	mov	r0, sl
 8016352:	f7ff feff 	bl	8016154 <_free_r>
 8016356:	e7c8      	b.n	80162ea <__ssputs_r+0x46>

08016358 <_svfiprintf_r>:
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	461d      	mov	r5, r3
 801635e:	898b      	ldrh	r3, [r1, #12]
 8016360:	061f      	lsls	r7, r3, #24
 8016362:	b09d      	sub	sp, #116	; 0x74
 8016364:	4680      	mov	r8, r0
 8016366:	460c      	mov	r4, r1
 8016368:	4616      	mov	r6, r2
 801636a:	d50f      	bpl.n	801638c <_svfiprintf_r+0x34>
 801636c:	690b      	ldr	r3, [r1, #16]
 801636e:	b96b      	cbnz	r3, 801638c <_svfiprintf_r+0x34>
 8016370:	2140      	movs	r1, #64	; 0x40
 8016372:	f7ff ff3d 	bl	80161f0 <_malloc_r>
 8016376:	6020      	str	r0, [r4, #0]
 8016378:	6120      	str	r0, [r4, #16]
 801637a:	b928      	cbnz	r0, 8016388 <_svfiprintf_r+0x30>
 801637c:	230c      	movs	r3, #12
 801637e:	f8c8 3000 	str.w	r3, [r8]
 8016382:	f04f 30ff 	mov.w	r0, #4294967295
 8016386:	e0c8      	b.n	801651a <_svfiprintf_r+0x1c2>
 8016388:	2340      	movs	r3, #64	; 0x40
 801638a:	6163      	str	r3, [r4, #20]
 801638c:	2300      	movs	r3, #0
 801638e:	9309      	str	r3, [sp, #36]	; 0x24
 8016390:	2320      	movs	r3, #32
 8016392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016396:	2330      	movs	r3, #48	; 0x30
 8016398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801639c:	9503      	str	r5, [sp, #12]
 801639e:	f04f 0b01 	mov.w	fp, #1
 80163a2:	4637      	mov	r7, r6
 80163a4:	463d      	mov	r5, r7
 80163a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80163aa:	b10b      	cbz	r3, 80163b0 <_svfiprintf_r+0x58>
 80163ac:	2b25      	cmp	r3, #37	; 0x25
 80163ae:	d13e      	bne.n	801642e <_svfiprintf_r+0xd6>
 80163b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80163b4:	d00b      	beq.n	80163ce <_svfiprintf_r+0x76>
 80163b6:	4653      	mov	r3, sl
 80163b8:	4632      	mov	r2, r6
 80163ba:	4621      	mov	r1, r4
 80163bc:	4640      	mov	r0, r8
 80163be:	f7ff ff71 	bl	80162a4 <__ssputs_r>
 80163c2:	3001      	adds	r0, #1
 80163c4:	f000 80a4 	beq.w	8016510 <_svfiprintf_r+0x1b8>
 80163c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ca:	4453      	add	r3, sl
 80163cc:	9309      	str	r3, [sp, #36]	; 0x24
 80163ce:	783b      	ldrb	r3, [r7, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 809d 	beq.w	8016510 <_svfiprintf_r+0x1b8>
 80163d6:	2300      	movs	r3, #0
 80163d8:	f04f 32ff 	mov.w	r2, #4294967295
 80163dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163e0:	9304      	str	r3, [sp, #16]
 80163e2:	9307      	str	r3, [sp, #28]
 80163e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163e8:	931a      	str	r3, [sp, #104]	; 0x68
 80163ea:	462f      	mov	r7, r5
 80163ec:	2205      	movs	r2, #5
 80163ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80163f2:	4850      	ldr	r0, [pc, #320]	; (8016534 <_svfiprintf_r+0x1dc>)
 80163f4:	f7e9 ff0c 	bl	8000210 <memchr>
 80163f8:	9b04      	ldr	r3, [sp, #16]
 80163fa:	b9d0      	cbnz	r0, 8016432 <_svfiprintf_r+0xda>
 80163fc:	06d9      	lsls	r1, r3, #27
 80163fe:	bf44      	itt	mi
 8016400:	2220      	movmi	r2, #32
 8016402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016406:	071a      	lsls	r2, r3, #28
 8016408:	bf44      	itt	mi
 801640a:	222b      	movmi	r2, #43	; 0x2b
 801640c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016410:	782a      	ldrb	r2, [r5, #0]
 8016412:	2a2a      	cmp	r2, #42	; 0x2a
 8016414:	d015      	beq.n	8016442 <_svfiprintf_r+0xea>
 8016416:	9a07      	ldr	r2, [sp, #28]
 8016418:	462f      	mov	r7, r5
 801641a:	2000      	movs	r0, #0
 801641c:	250a      	movs	r5, #10
 801641e:	4639      	mov	r1, r7
 8016420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016424:	3b30      	subs	r3, #48	; 0x30
 8016426:	2b09      	cmp	r3, #9
 8016428:	d94d      	bls.n	80164c6 <_svfiprintf_r+0x16e>
 801642a:	b1b8      	cbz	r0, 801645c <_svfiprintf_r+0x104>
 801642c:	e00f      	b.n	801644e <_svfiprintf_r+0xf6>
 801642e:	462f      	mov	r7, r5
 8016430:	e7b8      	b.n	80163a4 <_svfiprintf_r+0x4c>
 8016432:	4a40      	ldr	r2, [pc, #256]	; (8016534 <_svfiprintf_r+0x1dc>)
 8016434:	1a80      	subs	r0, r0, r2
 8016436:	fa0b f000 	lsl.w	r0, fp, r0
 801643a:	4318      	orrs	r0, r3
 801643c:	9004      	str	r0, [sp, #16]
 801643e:	463d      	mov	r5, r7
 8016440:	e7d3      	b.n	80163ea <_svfiprintf_r+0x92>
 8016442:	9a03      	ldr	r2, [sp, #12]
 8016444:	1d11      	adds	r1, r2, #4
 8016446:	6812      	ldr	r2, [r2, #0]
 8016448:	9103      	str	r1, [sp, #12]
 801644a:	2a00      	cmp	r2, #0
 801644c:	db01      	blt.n	8016452 <_svfiprintf_r+0xfa>
 801644e:	9207      	str	r2, [sp, #28]
 8016450:	e004      	b.n	801645c <_svfiprintf_r+0x104>
 8016452:	4252      	negs	r2, r2
 8016454:	f043 0302 	orr.w	r3, r3, #2
 8016458:	9207      	str	r2, [sp, #28]
 801645a:	9304      	str	r3, [sp, #16]
 801645c:	783b      	ldrb	r3, [r7, #0]
 801645e:	2b2e      	cmp	r3, #46	; 0x2e
 8016460:	d10c      	bne.n	801647c <_svfiprintf_r+0x124>
 8016462:	787b      	ldrb	r3, [r7, #1]
 8016464:	2b2a      	cmp	r3, #42	; 0x2a
 8016466:	d133      	bne.n	80164d0 <_svfiprintf_r+0x178>
 8016468:	9b03      	ldr	r3, [sp, #12]
 801646a:	1d1a      	adds	r2, r3, #4
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	9203      	str	r2, [sp, #12]
 8016470:	2b00      	cmp	r3, #0
 8016472:	bfb8      	it	lt
 8016474:	f04f 33ff 	movlt.w	r3, #4294967295
 8016478:	3702      	adds	r7, #2
 801647a:	9305      	str	r3, [sp, #20]
 801647c:	4d2e      	ldr	r5, [pc, #184]	; (8016538 <_svfiprintf_r+0x1e0>)
 801647e:	7839      	ldrb	r1, [r7, #0]
 8016480:	2203      	movs	r2, #3
 8016482:	4628      	mov	r0, r5
 8016484:	f7e9 fec4 	bl	8000210 <memchr>
 8016488:	b138      	cbz	r0, 801649a <_svfiprintf_r+0x142>
 801648a:	2340      	movs	r3, #64	; 0x40
 801648c:	1b40      	subs	r0, r0, r5
 801648e:	fa03 f000 	lsl.w	r0, r3, r0
 8016492:	9b04      	ldr	r3, [sp, #16]
 8016494:	4303      	orrs	r3, r0
 8016496:	3701      	adds	r7, #1
 8016498:	9304      	str	r3, [sp, #16]
 801649a:	7839      	ldrb	r1, [r7, #0]
 801649c:	4827      	ldr	r0, [pc, #156]	; (801653c <_svfiprintf_r+0x1e4>)
 801649e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164a2:	2206      	movs	r2, #6
 80164a4:	1c7e      	adds	r6, r7, #1
 80164a6:	f7e9 feb3 	bl	8000210 <memchr>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	d038      	beq.n	8016520 <_svfiprintf_r+0x1c8>
 80164ae:	4b24      	ldr	r3, [pc, #144]	; (8016540 <_svfiprintf_r+0x1e8>)
 80164b0:	bb13      	cbnz	r3, 80164f8 <_svfiprintf_r+0x1a0>
 80164b2:	9b03      	ldr	r3, [sp, #12]
 80164b4:	3307      	adds	r3, #7
 80164b6:	f023 0307 	bic.w	r3, r3, #7
 80164ba:	3308      	adds	r3, #8
 80164bc:	9303      	str	r3, [sp, #12]
 80164be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c0:	444b      	add	r3, r9
 80164c2:	9309      	str	r3, [sp, #36]	; 0x24
 80164c4:	e76d      	b.n	80163a2 <_svfiprintf_r+0x4a>
 80164c6:	fb05 3202 	mla	r2, r5, r2, r3
 80164ca:	2001      	movs	r0, #1
 80164cc:	460f      	mov	r7, r1
 80164ce:	e7a6      	b.n	801641e <_svfiprintf_r+0xc6>
 80164d0:	2300      	movs	r3, #0
 80164d2:	3701      	adds	r7, #1
 80164d4:	9305      	str	r3, [sp, #20]
 80164d6:	4619      	mov	r1, r3
 80164d8:	250a      	movs	r5, #10
 80164da:	4638      	mov	r0, r7
 80164dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164e0:	3a30      	subs	r2, #48	; 0x30
 80164e2:	2a09      	cmp	r2, #9
 80164e4:	d903      	bls.n	80164ee <_svfiprintf_r+0x196>
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d0c8      	beq.n	801647c <_svfiprintf_r+0x124>
 80164ea:	9105      	str	r1, [sp, #20]
 80164ec:	e7c6      	b.n	801647c <_svfiprintf_r+0x124>
 80164ee:	fb05 2101 	mla	r1, r5, r1, r2
 80164f2:	2301      	movs	r3, #1
 80164f4:	4607      	mov	r7, r0
 80164f6:	e7f0      	b.n	80164da <_svfiprintf_r+0x182>
 80164f8:	ab03      	add	r3, sp, #12
 80164fa:	9300      	str	r3, [sp, #0]
 80164fc:	4622      	mov	r2, r4
 80164fe:	4b11      	ldr	r3, [pc, #68]	; (8016544 <_svfiprintf_r+0x1ec>)
 8016500:	a904      	add	r1, sp, #16
 8016502:	4640      	mov	r0, r8
 8016504:	f7fb ffd0 	bl	80124a8 <_printf_float>
 8016508:	f1b0 3fff 	cmp.w	r0, #4294967295
 801650c:	4681      	mov	r9, r0
 801650e:	d1d6      	bne.n	80164be <_svfiprintf_r+0x166>
 8016510:	89a3      	ldrh	r3, [r4, #12]
 8016512:	065b      	lsls	r3, r3, #25
 8016514:	f53f af35 	bmi.w	8016382 <_svfiprintf_r+0x2a>
 8016518:	9809      	ldr	r0, [sp, #36]	; 0x24
 801651a:	b01d      	add	sp, #116	; 0x74
 801651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016520:	ab03      	add	r3, sp, #12
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	4622      	mov	r2, r4
 8016526:	4b07      	ldr	r3, [pc, #28]	; (8016544 <_svfiprintf_r+0x1ec>)
 8016528:	a904      	add	r1, sp, #16
 801652a:	4640      	mov	r0, r8
 801652c:	f7fc fa72 	bl	8012a14 <_printf_i>
 8016530:	e7ea      	b.n	8016508 <_svfiprintf_r+0x1b0>
 8016532:	bf00      	nop
 8016534:	080177cc 	.word	0x080177cc
 8016538:	080177d2 	.word	0x080177d2
 801653c:	080177d6 	.word	0x080177d6
 8016540:	080124a9 	.word	0x080124a9
 8016544:	080162a5 	.word	0x080162a5

08016548 <_sungetc_r>:
 8016548:	b538      	push	{r3, r4, r5, lr}
 801654a:	1c4b      	adds	r3, r1, #1
 801654c:	4614      	mov	r4, r2
 801654e:	d103      	bne.n	8016558 <_sungetc_r+0x10>
 8016550:	f04f 35ff 	mov.w	r5, #4294967295
 8016554:	4628      	mov	r0, r5
 8016556:	bd38      	pop	{r3, r4, r5, pc}
 8016558:	8993      	ldrh	r3, [r2, #12]
 801655a:	f023 0320 	bic.w	r3, r3, #32
 801655e:	8193      	strh	r3, [r2, #12]
 8016560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016562:	6852      	ldr	r2, [r2, #4]
 8016564:	b2cd      	uxtb	r5, r1
 8016566:	b18b      	cbz	r3, 801658c <_sungetc_r+0x44>
 8016568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801656a:	4293      	cmp	r3, r2
 801656c:	dd08      	ble.n	8016580 <_sungetc_r+0x38>
 801656e:	6823      	ldr	r3, [r4, #0]
 8016570:	1e5a      	subs	r2, r3, #1
 8016572:	6022      	str	r2, [r4, #0]
 8016574:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016578:	6863      	ldr	r3, [r4, #4]
 801657a:	3301      	adds	r3, #1
 801657c:	6063      	str	r3, [r4, #4]
 801657e:	e7e9      	b.n	8016554 <_sungetc_r+0xc>
 8016580:	4621      	mov	r1, r4
 8016582:	f000 fd15 	bl	8016fb0 <__submore>
 8016586:	2800      	cmp	r0, #0
 8016588:	d0f1      	beq.n	801656e <_sungetc_r+0x26>
 801658a:	e7e1      	b.n	8016550 <_sungetc_r+0x8>
 801658c:	6921      	ldr	r1, [r4, #16]
 801658e:	6823      	ldr	r3, [r4, #0]
 8016590:	b151      	cbz	r1, 80165a8 <_sungetc_r+0x60>
 8016592:	4299      	cmp	r1, r3
 8016594:	d208      	bcs.n	80165a8 <_sungetc_r+0x60>
 8016596:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801659a:	42a9      	cmp	r1, r5
 801659c:	d104      	bne.n	80165a8 <_sungetc_r+0x60>
 801659e:	3b01      	subs	r3, #1
 80165a0:	3201      	adds	r2, #1
 80165a2:	6023      	str	r3, [r4, #0]
 80165a4:	6062      	str	r2, [r4, #4]
 80165a6:	e7d5      	b.n	8016554 <_sungetc_r+0xc>
 80165a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80165ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165b0:	6363      	str	r3, [r4, #52]	; 0x34
 80165b2:	2303      	movs	r3, #3
 80165b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80165b6:	4623      	mov	r3, r4
 80165b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80165bc:	6023      	str	r3, [r4, #0]
 80165be:	2301      	movs	r3, #1
 80165c0:	e7dc      	b.n	801657c <_sungetc_r+0x34>

080165c2 <__ssrefill_r>:
 80165c2:	b510      	push	{r4, lr}
 80165c4:	460c      	mov	r4, r1
 80165c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80165c8:	b169      	cbz	r1, 80165e6 <__ssrefill_r+0x24>
 80165ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165ce:	4299      	cmp	r1, r3
 80165d0:	d001      	beq.n	80165d6 <__ssrefill_r+0x14>
 80165d2:	f7ff fdbf 	bl	8016154 <_free_r>
 80165d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80165d8:	6063      	str	r3, [r4, #4]
 80165da:	2000      	movs	r0, #0
 80165dc:	6360      	str	r0, [r4, #52]	; 0x34
 80165de:	b113      	cbz	r3, 80165e6 <__ssrefill_r+0x24>
 80165e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80165e2:	6023      	str	r3, [r4, #0]
 80165e4:	bd10      	pop	{r4, pc}
 80165e6:	6923      	ldr	r3, [r4, #16]
 80165e8:	6023      	str	r3, [r4, #0]
 80165ea:	2300      	movs	r3, #0
 80165ec:	6063      	str	r3, [r4, #4]
 80165ee:	89a3      	ldrh	r3, [r4, #12]
 80165f0:	f043 0320 	orr.w	r3, r3, #32
 80165f4:	81a3      	strh	r3, [r4, #12]
 80165f6:	f04f 30ff 	mov.w	r0, #4294967295
 80165fa:	e7f3      	b.n	80165e4 <__ssrefill_r+0x22>

080165fc <__ssvfiscanf_r>:
 80165fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016600:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016604:	460c      	mov	r4, r1
 8016606:	2100      	movs	r1, #0
 8016608:	9144      	str	r1, [sp, #272]	; 0x110
 801660a:	9145      	str	r1, [sp, #276]	; 0x114
 801660c:	499f      	ldr	r1, [pc, #636]	; (801688c <__ssvfiscanf_r+0x290>)
 801660e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016610:	f10d 0804 	add.w	r8, sp, #4
 8016614:	499e      	ldr	r1, [pc, #632]	; (8016890 <__ssvfiscanf_r+0x294>)
 8016616:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016894 <__ssvfiscanf_r+0x298>
 801661a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801661e:	4606      	mov	r6, r0
 8016620:	4692      	mov	sl, r2
 8016622:	91a1      	str	r1, [sp, #644]	; 0x284
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	270a      	movs	r7, #10
 8016628:	f89a 3000 	ldrb.w	r3, [sl]
 801662c:	2b00      	cmp	r3, #0
 801662e:	f000 812a 	beq.w	8016886 <__ssvfiscanf_r+0x28a>
 8016632:	4655      	mov	r5, sl
 8016634:	f7ff f8c8 	bl	80157c8 <__locale_ctype_ptr>
 8016638:	f815 bb01 	ldrb.w	fp, [r5], #1
 801663c:	4458      	add	r0, fp
 801663e:	7843      	ldrb	r3, [r0, #1]
 8016640:	f013 0308 	ands.w	r3, r3, #8
 8016644:	d01c      	beq.n	8016680 <__ssvfiscanf_r+0x84>
 8016646:	6863      	ldr	r3, [r4, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	dd12      	ble.n	8016672 <__ssvfiscanf_r+0x76>
 801664c:	f7ff f8bc 	bl	80157c8 <__locale_ctype_ptr>
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	781a      	ldrb	r2, [r3, #0]
 8016654:	4410      	add	r0, r2
 8016656:	7842      	ldrb	r2, [r0, #1]
 8016658:	0712      	lsls	r2, r2, #28
 801665a:	d401      	bmi.n	8016660 <__ssvfiscanf_r+0x64>
 801665c:	46aa      	mov	sl, r5
 801665e:	e7e3      	b.n	8016628 <__ssvfiscanf_r+0x2c>
 8016660:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016662:	3201      	adds	r2, #1
 8016664:	9245      	str	r2, [sp, #276]	; 0x114
 8016666:	6862      	ldr	r2, [r4, #4]
 8016668:	3301      	adds	r3, #1
 801666a:	3a01      	subs	r2, #1
 801666c:	6062      	str	r2, [r4, #4]
 801666e:	6023      	str	r3, [r4, #0]
 8016670:	e7e9      	b.n	8016646 <__ssvfiscanf_r+0x4a>
 8016672:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016674:	4621      	mov	r1, r4
 8016676:	4630      	mov	r0, r6
 8016678:	4798      	blx	r3
 801667a:	2800      	cmp	r0, #0
 801667c:	d0e6      	beq.n	801664c <__ssvfiscanf_r+0x50>
 801667e:	e7ed      	b.n	801665c <__ssvfiscanf_r+0x60>
 8016680:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016684:	f040 8082 	bne.w	801678c <__ssvfiscanf_r+0x190>
 8016688:	9343      	str	r3, [sp, #268]	; 0x10c
 801668a:	9341      	str	r3, [sp, #260]	; 0x104
 801668c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016690:	2b2a      	cmp	r3, #42	; 0x2a
 8016692:	d103      	bne.n	801669c <__ssvfiscanf_r+0xa0>
 8016694:	2310      	movs	r3, #16
 8016696:	9341      	str	r3, [sp, #260]	; 0x104
 8016698:	f10a 0502 	add.w	r5, sl, #2
 801669c:	46aa      	mov	sl, r5
 801669e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80166a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80166a6:	2a09      	cmp	r2, #9
 80166a8:	d922      	bls.n	80166f0 <__ssvfiscanf_r+0xf4>
 80166aa:	2203      	movs	r2, #3
 80166ac:	4879      	ldr	r0, [pc, #484]	; (8016894 <__ssvfiscanf_r+0x298>)
 80166ae:	f7e9 fdaf 	bl	8000210 <memchr>
 80166b2:	b138      	cbz	r0, 80166c4 <__ssvfiscanf_r+0xc8>
 80166b4:	eba0 0309 	sub.w	r3, r0, r9
 80166b8:	2001      	movs	r0, #1
 80166ba:	4098      	lsls	r0, r3
 80166bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166be:	4318      	orrs	r0, r3
 80166c0:	9041      	str	r0, [sp, #260]	; 0x104
 80166c2:	46aa      	mov	sl, r5
 80166c4:	f89a 3000 	ldrb.w	r3, [sl]
 80166c8:	2b67      	cmp	r3, #103	; 0x67
 80166ca:	f10a 0501 	add.w	r5, sl, #1
 80166ce:	d82b      	bhi.n	8016728 <__ssvfiscanf_r+0x12c>
 80166d0:	2b65      	cmp	r3, #101	; 0x65
 80166d2:	f080 809f 	bcs.w	8016814 <__ssvfiscanf_r+0x218>
 80166d6:	2b47      	cmp	r3, #71	; 0x47
 80166d8:	d810      	bhi.n	80166fc <__ssvfiscanf_r+0x100>
 80166da:	2b45      	cmp	r3, #69	; 0x45
 80166dc:	f080 809a 	bcs.w	8016814 <__ssvfiscanf_r+0x218>
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d06c      	beq.n	80167be <__ssvfiscanf_r+0x1c2>
 80166e4:	2b25      	cmp	r3, #37	; 0x25
 80166e6:	d051      	beq.n	801678c <__ssvfiscanf_r+0x190>
 80166e8:	2303      	movs	r3, #3
 80166ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80166ec:	9742      	str	r7, [sp, #264]	; 0x108
 80166ee:	e027      	b.n	8016740 <__ssvfiscanf_r+0x144>
 80166f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80166f2:	fb07 1303 	mla	r3, r7, r3, r1
 80166f6:	3b30      	subs	r3, #48	; 0x30
 80166f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80166fa:	e7cf      	b.n	801669c <__ssvfiscanf_r+0xa0>
 80166fc:	2b5b      	cmp	r3, #91	; 0x5b
 80166fe:	d06a      	beq.n	80167d6 <__ssvfiscanf_r+0x1da>
 8016700:	d80c      	bhi.n	801671c <__ssvfiscanf_r+0x120>
 8016702:	2b58      	cmp	r3, #88	; 0x58
 8016704:	d1f0      	bne.n	80166e8 <__ssvfiscanf_r+0xec>
 8016706:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801670c:	9241      	str	r2, [sp, #260]	; 0x104
 801670e:	2210      	movs	r2, #16
 8016710:	9242      	str	r2, [sp, #264]	; 0x108
 8016712:	2b6e      	cmp	r3, #110	; 0x6e
 8016714:	bf8c      	ite	hi
 8016716:	2304      	movhi	r3, #4
 8016718:	2303      	movls	r3, #3
 801671a:	e010      	b.n	801673e <__ssvfiscanf_r+0x142>
 801671c:	2b63      	cmp	r3, #99	; 0x63
 801671e:	d065      	beq.n	80167ec <__ssvfiscanf_r+0x1f0>
 8016720:	2b64      	cmp	r3, #100	; 0x64
 8016722:	d1e1      	bne.n	80166e8 <__ssvfiscanf_r+0xec>
 8016724:	9742      	str	r7, [sp, #264]	; 0x108
 8016726:	e7f4      	b.n	8016712 <__ssvfiscanf_r+0x116>
 8016728:	2b70      	cmp	r3, #112	; 0x70
 801672a:	d04b      	beq.n	80167c4 <__ssvfiscanf_r+0x1c8>
 801672c:	d826      	bhi.n	801677c <__ssvfiscanf_r+0x180>
 801672e:	2b6e      	cmp	r3, #110	; 0x6e
 8016730:	d062      	beq.n	80167f8 <__ssvfiscanf_r+0x1fc>
 8016732:	d84c      	bhi.n	80167ce <__ssvfiscanf_r+0x1d2>
 8016734:	2b69      	cmp	r3, #105	; 0x69
 8016736:	d1d7      	bne.n	80166e8 <__ssvfiscanf_r+0xec>
 8016738:	2300      	movs	r3, #0
 801673a:	9342      	str	r3, [sp, #264]	; 0x108
 801673c:	2303      	movs	r3, #3
 801673e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016740:	6863      	ldr	r3, [r4, #4]
 8016742:	2b00      	cmp	r3, #0
 8016744:	dd68      	ble.n	8016818 <__ssvfiscanf_r+0x21c>
 8016746:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016748:	0659      	lsls	r1, r3, #25
 801674a:	d407      	bmi.n	801675c <__ssvfiscanf_r+0x160>
 801674c:	f7ff f83c 	bl	80157c8 <__locale_ctype_ptr>
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	781a      	ldrb	r2, [r3, #0]
 8016754:	4410      	add	r0, r2
 8016756:	7842      	ldrb	r2, [r0, #1]
 8016758:	0712      	lsls	r2, r2, #28
 801675a:	d464      	bmi.n	8016826 <__ssvfiscanf_r+0x22a>
 801675c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801675e:	2b02      	cmp	r3, #2
 8016760:	dc73      	bgt.n	801684a <__ssvfiscanf_r+0x24e>
 8016762:	466b      	mov	r3, sp
 8016764:	4622      	mov	r2, r4
 8016766:	a941      	add	r1, sp, #260	; 0x104
 8016768:	4630      	mov	r0, r6
 801676a:	f000 f9d7 	bl	8016b1c <_scanf_chars>
 801676e:	2801      	cmp	r0, #1
 8016770:	f000 8089 	beq.w	8016886 <__ssvfiscanf_r+0x28a>
 8016774:	2802      	cmp	r0, #2
 8016776:	f47f af71 	bne.w	801665c <__ssvfiscanf_r+0x60>
 801677a:	e01d      	b.n	80167b8 <__ssvfiscanf_r+0x1bc>
 801677c:	2b75      	cmp	r3, #117	; 0x75
 801677e:	d0d1      	beq.n	8016724 <__ssvfiscanf_r+0x128>
 8016780:	2b78      	cmp	r3, #120	; 0x78
 8016782:	d0c0      	beq.n	8016706 <__ssvfiscanf_r+0x10a>
 8016784:	2b73      	cmp	r3, #115	; 0x73
 8016786:	d1af      	bne.n	80166e8 <__ssvfiscanf_r+0xec>
 8016788:	2302      	movs	r3, #2
 801678a:	e7d8      	b.n	801673e <__ssvfiscanf_r+0x142>
 801678c:	6863      	ldr	r3, [r4, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	dd0c      	ble.n	80167ac <__ssvfiscanf_r+0x1b0>
 8016792:	6823      	ldr	r3, [r4, #0]
 8016794:	781a      	ldrb	r2, [r3, #0]
 8016796:	455a      	cmp	r2, fp
 8016798:	d175      	bne.n	8016886 <__ssvfiscanf_r+0x28a>
 801679a:	3301      	adds	r3, #1
 801679c:	6862      	ldr	r2, [r4, #4]
 801679e:	6023      	str	r3, [r4, #0]
 80167a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80167a2:	3a01      	subs	r2, #1
 80167a4:	3301      	adds	r3, #1
 80167a6:	6062      	str	r2, [r4, #4]
 80167a8:	9345      	str	r3, [sp, #276]	; 0x114
 80167aa:	e757      	b.n	801665c <__ssvfiscanf_r+0x60>
 80167ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167ae:	4621      	mov	r1, r4
 80167b0:	4630      	mov	r0, r6
 80167b2:	4798      	blx	r3
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d0ec      	beq.n	8016792 <__ssvfiscanf_r+0x196>
 80167b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80167ba:	2800      	cmp	r0, #0
 80167bc:	d159      	bne.n	8016872 <__ssvfiscanf_r+0x276>
 80167be:	f04f 30ff 	mov.w	r0, #4294967295
 80167c2:	e05c      	b.n	801687e <__ssvfiscanf_r+0x282>
 80167c4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80167c6:	f042 0220 	orr.w	r2, r2, #32
 80167ca:	9241      	str	r2, [sp, #260]	; 0x104
 80167cc:	e79b      	b.n	8016706 <__ssvfiscanf_r+0x10a>
 80167ce:	2308      	movs	r3, #8
 80167d0:	9342      	str	r3, [sp, #264]	; 0x108
 80167d2:	2304      	movs	r3, #4
 80167d4:	e7b3      	b.n	801673e <__ssvfiscanf_r+0x142>
 80167d6:	4629      	mov	r1, r5
 80167d8:	4640      	mov	r0, r8
 80167da:	f000 fb19 	bl	8016e10 <__sccl>
 80167de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167e4:	9341      	str	r3, [sp, #260]	; 0x104
 80167e6:	4605      	mov	r5, r0
 80167e8:	2301      	movs	r3, #1
 80167ea:	e7a8      	b.n	801673e <__ssvfiscanf_r+0x142>
 80167ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167f2:	9341      	str	r3, [sp, #260]	; 0x104
 80167f4:	2300      	movs	r3, #0
 80167f6:	e7a2      	b.n	801673e <__ssvfiscanf_r+0x142>
 80167f8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80167fa:	06c3      	lsls	r3, r0, #27
 80167fc:	f53f af2e 	bmi.w	801665c <__ssvfiscanf_r+0x60>
 8016800:	9b00      	ldr	r3, [sp, #0]
 8016802:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016804:	1d19      	adds	r1, r3, #4
 8016806:	9100      	str	r1, [sp, #0]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	07c0      	lsls	r0, r0, #31
 801680c:	bf4c      	ite	mi
 801680e:	801a      	strhmi	r2, [r3, #0]
 8016810:	601a      	strpl	r2, [r3, #0]
 8016812:	e723      	b.n	801665c <__ssvfiscanf_r+0x60>
 8016814:	2305      	movs	r3, #5
 8016816:	e792      	b.n	801673e <__ssvfiscanf_r+0x142>
 8016818:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801681a:	4621      	mov	r1, r4
 801681c:	4630      	mov	r0, r6
 801681e:	4798      	blx	r3
 8016820:	2800      	cmp	r0, #0
 8016822:	d090      	beq.n	8016746 <__ssvfiscanf_r+0x14a>
 8016824:	e7c8      	b.n	80167b8 <__ssvfiscanf_r+0x1bc>
 8016826:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016828:	3201      	adds	r2, #1
 801682a:	9245      	str	r2, [sp, #276]	; 0x114
 801682c:	6862      	ldr	r2, [r4, #4]
 801682e:	3a01      	subs	r2, #1
 8016830:	2a00      	cmp	r2, #0
 8016832:	6062      	str	r2, [r4, #4]
 8016834:	dd02      	ble.n	801683c <__ssvfiscanf_r+0x240>
 8016836:	3301      	adds	r3, #1
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	e787      	b.n	801674c <__ssvfiscanf_r+0x150>
 801683c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801683e:	4621      	mov	r1, r4
 8016840:	4630      	mov	r0, r6
 8016842:	4798      	blx	r3
 8016844:	2800      	cmp	r0, #0
 8016846:	d081      	beq.n	801674c <__ssvfiscanf_r+0x150>
 8016848:	e7b6      	b.n	80167b8 <__ssvfiscanf_r+0x1bc>
 801684a:	2b04      	cmp	r3, #4
 801684c:	dc06      	bgt.n	801685c <__ssvfiscanf_r+0x260>
 801684e:	466b      	mov	r3, sp
 8016850:	4622      	mov	r2, r4
 8016852:	a941      	add	r1, sp, #260	; 0x104
 8016854:	4630      	mov	r0, r6
 8016856:	f000 f9c5 	bl	8016be4 <_scanf_i>
 801685a:	e788      	b.n	801676e <__ssvfiscanf_r+0x172>
 801685c:	4b0e      	ldr	r3, [pc, #56]	; (8016898 <__ssvfiscanf_r+0x29c>)
 801685e:	2b00      	cmp	r3, #0
 8016860:	f43f aefc 	beq.w	801665c <__ssvfiscanf_r+0x60>
 8016864:	466b      	mov	r3, sp
 8016866:	4622      	mov	r2, r4
 8016868:	a941      	add	r1, sp, #260	; 0x104
 801686a:	4630      	mov	r0, r6
 801686c:	f7fc f9e4 	bl	8012c38 <_scanf_float>
 8016870:	e77d      	b.n	801676e <__ssvfiscanf_r+0x172>
 8016872:	89a3      	ldrh	r3, [r4, #12]
 8016874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016878:	bf18      	it	ne
 801687a:	f04f 30ff 	movne.w	r0, #4294967295
 801687e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016886:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016888:	e7f9      	b.n	801687e <__ssvfiscanf_r+0x282>
 801688a:	bf00      	nop
 801688c:	08016549 	.word	0x08016549
 8016890:	080165c3 	.word	0x080165c3
 8016894:	080177d2 	.word	0x080177d2
 8016898:	08012c39 	.word	0x08012c39

0801689c <__sfputc_r>:
 801689c:	6893      	ldr	r3, [r2, #8]
 801689e:	3b01      	subs	r3, #1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	b410      	push	{r4}
 80168a4:	6093      	str	r3, [r2, #8]
 80168a6:	da08      	bge.n	80168ba <__sfputc_r+0x1e>
 80168a8:	6994      	ldr	r4, [r2, #24]
 80168aa:	42a3      	cmp	r3, r4
 80168ac:	db01      	blt.n	80168b2 <__sfputc_r+0x16>
 80168ae:	290a      	cmp	r1, #10
 80168b0:	d103      	bne.n	80168ba <__sfputc_r+0x1e>
 80168b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168b6:	f7fd bbbd 	b.w	8014034 <__swbuf_r>
 80168ba:	6813      	ldr	r3, [r2, #0]
 80168bc:	1c58      	adds	r0, r3, #1
 80168be:	6010      	str	r0, [r2, #0]
 80168c0:	7019      	strb	r1, [r3, #0]
 80168c2:	4608      	mov	r0, r1
 80168c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168c8:	4770      	bx	lr

080168ca <__sfputs_r>:
 80168ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168cc:	4606      	mov	r6, r0
 80168ce:	460f      	mov	r7, r1
 80168d0:	4614      	mov	r4, r2
 80168d2:	18d5      	adds	r5, r2, r3
 80168d4:	42ac      	cmp	r4, r5
 80168d6:	d101      	bne.n	80168dc <__sfputs_r+0x12>
 80168d8:	2000      	movs	r0, #0
 80168da:	e007      	b.n	80168ec <__sfputs_r+0x22>
 80168dc:	463a      	mov	r2, r7
 80168de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ff ffda 	bl	801689c <__sfputc_r>
 80168e8:	1c43      	adds	r3, r0, #1
 80168ea:	d1f3      	bne.n	80168d4 <__sfputs_r+0xa>
 80168ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080168f0 <_vfiprintf_r>:
 80168f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	460c      	mov	r4, r1
 80168f6:	b09d      	sub	sp, #116	; 0x74
 80168f8:	4617      	mov	r7, r2
 80168fa:	461d      	mov	r5, r3
 80168fc:	4606      	mov	r6, r0
 80168fe:	b118      	cbz	r0, 8016908 <_vfiprintf_r+0x18>
 8016900:	6983      	ldr	r3, [r0, #24]
 8016902:	b90b      	cbnz	r3, 8016908 <_vfiprintf_r+0x18>
 8016904:	f7fe fbac 	bl	8015060 <__sinit>
 8016908:	4b7c      	ldr	r3, [pc, #496]	; (8016afc <_vfiprintf_r+0x20c>)
 801690a:	429c      	cmp	r4, r3
 801690c:	d158      	bne.n	80169c0 <_vfiprintf_r+0xd0>
 801690e:	6874      	ldr	r4, [r6, #4]
 8016910:	89a3      	ldrh	r3, [r4, #12]
 8016912:	0718      	lsls	r0, r3, #28
 8016914:	d55e      	bpl.n	80169d4 <_vfiprintf_r+0xe4>
 8016916:	6923      	ldr	r3, [r4, #16]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d05b      	beq.n	80169d4 <_vfiprintf_r+0xe4>
 801691c:	2300      	movs	r3, #0
 801691e:	9309      	str	r3, [sp, #36]	; 0x24
 8016920:	2320      	movs	r3, #32
 8016922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016926:	2330      	movs	r3, #48	; 0x30
 8016928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801692c:	9503      	str	r5, [sp, #12]
 801692e:	f04f 0b01 	mov.w	fp, #1
 8016932:	46b8      	mov	r8, r7
 8016934:	4645      	mov	r5, r8
 8016936:	f815 3b01 	ldrb.w	r3, [r5], #1
 801693a:	b10b      	cbz	r3, 8016940 <_vfiprintf_r+0x50>
 801693c:	2b25      	cmp	r3, #37	; 0x25
 801693e:	d154      	bne.n	80169ea <_vfiprintf_r+0xfa>
 8016940:	ebb8 0a07 	subs.w	sl, r8, r7
 8016944:	d00b      	beq.n	801695e <_vfiprintf_r+0x6e>
 8016946:	4653      	mov	r3, sl
 8016948:	463a      	mov	r2, r7
 801694a:	4621      	mov	r1, r4
 801694c:	4630      	mov	r0, r6
 801694e:	f7ff ffbc 	bl	80168ca <__sfputs_r>
 8016952:	3001      	adds	r0, #1
 8016954:	f000 80c2 	beq.w	8016adc <_vfiprintf_r+0x1ec>
 8016958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801695a:	4453      	add	r3, sl
 801695c:	9309      	str	r3, [sp, #36]	; 0x24
 801695e:	f898 3000 	ldrb.w	r3, [r8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	f000 80ba 	beq.w	8016adc <_vfiprintf_r+0x1ec>
 8016968:	2300      	movs	r3, #0
 801696a:	f04f 32ff 	mov.w	r2, #4294967295
 801696e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016972:	9304      	str	r3, [sp, #16]
 8016974:	9307      	str	r3, [sp, #28]
 8016976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801697a:	931a      	str	r3, [sp, #104]	; 0x68
 801697c:	46a8      	mov	r8, r5
 801697e:	2205      	movs	r2, #5
 8016980:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016984:	485e      	ldr	r0, [pc, #376]	; (8016b00 <_vfiprintf_r+0x210>)
 8016986:	f7e9 fc43 	bl	8000210 <memchr>
 801698a:	9b04      	ldr	r3, [sp, #16]
 801698c:	bb78      	cbnz	r0, 80169ee <_vfiprintf_r+0xfe>
 801698e:	06d9      	lsls	r1, r3, #27
 8016990:	bf44      	itt	mi
 8016992:	2220      	movmi	r2, #32
 8016994:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016998:	071a      	lsls	r2, r3, #28
 801699a:	bf44      	itt	mi
 801699c:	222b      	movmi	r2, #43	; 0x2b
 801699e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80169a2:	782a      	ldrb	r2, [r5, #0]
 80169a4:	2a2a      	cmp	r2, #42	; 0x2a
 80169a6:	d02a      	beq.n	80169fe <_vfiprintf_r+0x10e>
 80169a8:	9a07      	ldr	r2, [sp, #28]
 80169aa:	46a8      	mov	r8, r5
 80169ac:	2000      	movs	r0, #0
 80169ae:	250a      	movs	r5, #10
 80169b0:	4641      	mov	r1, r8
 80169b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169b6:	3b30      	subs	r3, #48	; 0x30
 80169b8:	2b09      	cmp	r3, #9
 80169ba:	d969      	bls.n	8016a90 <_vfiprintf_r+0x1a0>
 80169bc:	b360      	cbz	r0, 8016a18 <_vfiprintf_r+0x128>
 80169be:	e024      	b.n	8016a0a <_vfiprintf_r+0x11a>
 80169c0:	4b50      	ldr	r3, [pc, #320]	; (8016b04 <_vfiprintf_r+0x214>)
 80169c2:	429c      	cmp	r4, r3
 80169c4:	d101      	bne.n	80169ca <_vfiprintf_r+0xda>
 80169c6:	68b4      	ldr	r4, [r6, #8]
 80169c8:	e7a2      	b.n	8016910 <_vfiprintf_r+0x20>
 80169ca:	4b4f      	ldr	r3, [pc, #316]	; (8016b08 <_vfiprintf_r+0x218>)
 80169cc:	429c      	cmp	r4, r3
 80169ce:	bf08      	it	eq
 80169d0:	68f4      	ldreq	r4, [r6, #12]
 80169d2:	e79d      	b.n	8016910 <_vfiprintf_r+0x20>
 80169d4:	4621      	mov	r1, r4
 80169d6:	4630      	mov	r0, r6
 80169d8:	f7fd fb90 	bl	80140fc <__swsetup_r>
 80169dc:	2800      	cmp	r0, #0
 80169de:	d09d      	beq.n	801691c <_vfiprintf_r+0x2c>
 80169e0:	f04f 30ff 	mov.w	r0, #4294967295
 80169e4:	b01d      	add	sp, #116	; 0x74
 80169e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ea:	46a8      	mov	r8, r5
 80169ec:	e7a2      	b.n	8016934 <_vfiprintf_r+0x44>
 80169ee:	4a44      	ldr	r2, [pc, #272]	; (8016b00 <_vfiprintf_r+0x210>)
 80169f0:	1a80      	subs	r0, r0, r2
 80169f2:	fa0b f000 	lsl.w	r0, fp, r0
 80169f6:	4318      	orrs	r0, r3
 80169f8:	9004      	str	r0, [sp, #16]
 80169fa:	4645      	mov	r5, r8
 80169fc:	e7be      	b.n	801697c <_vfiprintf_r+0x8c>
 80169fe:	9a03      	ldr	r2, [sp, #12]
 8016a00:	1d11      	adds	r1, r2, #4
 8016a02:	6812      	ldr	r2, [r2, #0]
 8016a04:	9103      	str	r1, [sp, #12]
 8016a06:	2a00      	cmp	r2, #0
 8016a08:	db01      	blt.n	8016a0e <_vfiprintf_r+0x11e>
 8016a0a:	9207      	str	r2, [sp, #28]
 8016a0c:	e004      	b.n	8016a18 <_vfiprintf_r+0x128>
 8016a0e:	4252      	negs	r2, r2
 8016a10:	f043 0302 	orr.w	r3, r3, #2
 8016a14:	9207      	str	r2, [sp, #28]
 8016a16:	9304      	str	r3, [sp, #16]
 8016a18:	f898 3000 	ldrb.w	r3, [r8]
 8016a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a1e:	d10e      	bne.n	8016a3e <_vfiprintf_r+0x14e>
 8016a20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016a24:	2b2a      	cmp	r3, #42	; 0x2a
 8016a26:	d138      	bne.n	8016a9a <_vfiprintf_r+0x1aa>
 8016a28:	9b03      	ldr	r3, [sp, #12]
 8016a2a:	1d1a      	adds	r2, r3, #4
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	9203      	str	r2, [sp, #12]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	bfb8      	it	lt
 8016a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a38:	f108 0802 	add.w	r8, r8, #2
 8016a3c:	9305      	str	r3, [sp, #20]
 8016a3e:	4d33      	ldr	r5, [pc, #204]	; (8016b0c <_vfiprintf_r+0x21c>)
 8016a40:	f898 1000 	ldrb.w	r1, [r8]
 8016a44:	2203      	movs	r2, #3
 8016a46:	4628      	mov	r0, r5
 8016a48:	f7e9 fbe2 	bl	8000210 <memchr>
 8016a4c:	b140      	cbz	r0, 8016a60 <_vfiprintf_r+0x170>
 8016a4e:	2340      	movs	r3, #64	; 0x40
 8016a50:	1b40      	subs	r0, r0, r5
 8016a52:	fa03 f000 	lsl.w	r0, r3, r0
 8016a56:	9b04      	ldr	r3, [sp, #16]
 8016a58:	4303      	orrs	r3, r0
 8016a5a:	f108 0801 	add.w	r8, r8, #1
 8016a5e:	9304      	str	r3, [sp, #16]
 8016a60:	f898 1000 	ldrb.w	r1, [r8]
 8016a64:	482a      	ldr	r0, [pc, #168]	; (8016b10 <_vfiprintf_r+0x220>)
 8016a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a6a:	2206      	movs	r2, #6
 8016a6c:	f108 0701 	add.w	r7, r8, #1
 8016a70:	f7e9 fbce 	bl	8000210 <memchr>
 8016a74:	2800      	cmp	r0, #0
 8016a76:	d037      	beq.n	8016ae8 <_vfiprintf_r+0x1f8>
 8016a78:	4b26      	ldr	r3, [pc, #152]	; (8016b14 <_vfiprintf_r+0x224>)
 8016a7a:	bb1b      	cbnz	r3, 8016ac4 <_vfiprintf_r+0x1d4>
 8016a7c:	9b03      	ldr	r3, [sp, #12]
 8016a7e:	3307      	adds	r3, #7
 8016a80:	f023 0307 	bic.w	r3, r3, #7
 8016a84:	3308      	adds	r3, #8
 8016a86:	9303      	str	r3, [sp, #12]
 8016a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a8a:	444b      	add	r3, r9
 8016a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8e:	e750      	b.n	8016932 <_vfiprintf_r+0x42>
 8016a90:	fb05 3202 	mla	r2, r5, r2, r3
 8016a94:	2001      	movs	r0, #1
 8016a96:	4688      	mov	r8, r1
 8016a98:	e78a      	b.n	80169b0 <_vfiprintf_r+0xc0>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	f108 0801 	add.w	r8, r8, #1
 8016aa0:	9305      	str	r3, [sp, #20]
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	250a      	movs	r5, #10
 8016aa6:	4640      	mov	r0, r8
 8016aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aac:	3a30      	subs	r2, #48	; 0x30
 8016aae:	2a09      	cmp	r2, #9
 8016ab0:	d903      	bls.n	8016aba <_vfiprintf_r+0x1ca>
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d0c3      	beq.n	8016a3e <_vfiprintf_r+0x14e>
 8016ab6:	9105      	str	r1, [sp, #20]
 8016ab8:	e7c1      	b.n	8016a3e <_vfiprintf_r+0x14e>
 8016aba:	fb05 2101 	mla	r1, r5, r1, r2
 8016abe:	2301      	movs	r3, #1
 8016ac0:	4680      	mov	r8, r0
 8016ac2:	e7f0      	b.n	8016aa6 <_vfiprintf_r+0x1b6>
 8016ac4:	ab03      	add	r3, sp, #12
 8016ac6:	9300      	str	r3, [sp, #0]
 8016ac8:	4622      	mov	r2, r4
 8016aca:	4b13      	ldr	r3, [pc, #76]	; (8016b18 <_vfiprintf_r+0x228>)
 8016acc:	a904      	add	r1, sp, #16
 8016ace:	4630      	mov	r0, r6
 8016ad0:	f7fb fcea 	bl	80124a8 <_printf_float>
 8016ad4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016ad8:	4681      	mov	r9, r0
 8016ada:	d1d5      	bne.n	8016a88 <_vfiprintf_r+0x198>
 8016adc:	89a3      	ldrh	r3, [r4, #12]
 8016ade:	065b      	lsls	r3, r3, #25
 8016ae0:	f53f af7e 	bmi.w	80169e0 <_vfiprintf_r+0xf0>
 8016ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ae6:	e77d      	b.n	80169e4 <_vfiprintf_r+0xf4>
 8016ae8:	ab03      	add	r3, sp, #12
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	4622      	mov	r2, r4
 8016aee:	4b0a      	ldr	r3, [pc, #40]	; (8016b18 <_vfiprintf_r+0x228>)
 8016af0:	a904      	add	r1, sp, #16
 8016af2:	4630      	mov	r0, r6
 8016af4:	f7fb ff8e 	bl	8012a14 <_printf_i>
 8016af8:	e7ec      	b.n	8016ad4 <_vfiprintf_r+0x1e4>
 8016afa:	bf00      	nop
 8016afc:	08017680 	.word	0x08017680
 8016b00:	080177cc 	.word	0x080177cc
 8016b04:	080176a0 	.word	0x080176a0
 8016b08:	08017660 	.word	0x08017660
 8016b0c:	080177d2 	.word	0x080177d2
 8016b10:	080177d6 	.word	0x080177d6
 8016b14:	080124a9 	.word	0x080124a9
 8016b18:	080168cb 	.word	0x080168cb

08016b1c <_scanf_chars>:
 8016b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b20:	4615      	mov	r5, r2
 8016b22:	688a      	ldr	r2, [r1, #8]
 8016b24:	4680      	mov	r8, r0
 8016b26:	460c      	mov	r4, r1
 8016b28:	b932      	cbnz	r2, 8016b38 <_scanf_chars+0x1c>
 8016b2a:	698a      	ldr	r2, [r1, #24]
 8016b2c:	2a00      	cmp	r2, #0
 8016b2e:	bf14      	ite	ne
 8016b30:	f04f 32ff 	movne.w	r2, #4294967295
 8016b34:	2201      	moveq	r2, #1
 8016b36:	608a      	str	r2, [r1, #8]
 8016b38:	6822      	ldr	r2, [r4, #0]
 8016b3a:	06d1      	lsls	r1, r2, #27
 8016b3c:	bf5f      	itttt	pl
 8016b3e:	681a      	ldrpl	r2, [r3, #0]
 8016b40:	1d11      	addpl	r1, r2, #4
 8016b42:	6019      	strpl	r1, [r3, #0]
 8016b44:	6817      	ldrpl	r7, [r2, #0]
 8016b46:	2600      	movs	r6, #0
 8016b48:	69a3      	ldr	r3, [r4, #24]
 8016b4a:	b1db      	cbz	r3, 8016b84 <_scanf_chars+0x68>
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d107      	bne.n	8016b60 <_scanf_chars+0x44>
 8016b50:	682b      	ldr	r3, [r5, #0]
 8016b52:	6962      	ldr	r2, [r4, #20]
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	5cd3      	ldrb	r3, [r2, r3]
 8016b58:	b9a3      	cbnz	r3, 8016b84 <_scanf_chars+0x68>
 8016b5a:	2e00      	cmp	r6, #0
 8016b5c:	d132      	bne.n	8016bc4 <_scanf_chars+0xa8>
 8016b5e:	e006      	b.n	8016b6e <_scanf_chars+0x52>
 8016b60:	2b02      	cmp	r3, #2
 8016b62:	d007      	beq.n	8016b74 <_scanf_chars+0x58>
 8016b64:	2e00      	cmp	r6, #0
 8016b66:	d12d      	bne.n	8016bc4 <_scanf_chars+0xa8>
 8016b68:	69a3      	ldr	r3, [r4, #24]
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d12a      	bne.n	8016bc4 <_scanf_chars+0xa8>
 8016b6e:	2001      	movs	r0, #1
 8016b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b74:	f7fe fe28 	bl	80157c8 <__locale_ctype_ptr>
 8016b78:	682b      	ldr	r3, [r5, #0]
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	4418      	add	r0, r3
 8016b7e:	7843      	ldrb	r3, [r0, #1]
 8016b80:	071b      	lsls	r3, r3, #28
 8016b82:	d4ef      	bmi.n	8016b64 <_scanf_chars+0x48>
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	06da      	lsls	r2, r3, #27
 8016b88:	bf5e      	ittt	pl
 8016b8a:	682b      	ldrpl	r3, [r5, #0]
 8016b8c:	781b      	ldrbpl	r3, [r3, #0]
 8016b8e:	703b      	strbpl	r3, [r7, #0]
 8016b90:	682a      	ldr	r2, [r5, #0]
 8016b92:	686b      	ldr	r3, [r5, #4]
 8016b94:	f102 0201 	add.w	r2, r2, #1
 8016b98:	602a      	str	r2, [r5, #0]
 8016b9a:	68a2      	ldr	r2, [r4, #8]
 8016b9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ba0:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ba4:	606b      	str	r3, [r5, #4]
 8016ba6:	f106 0601 	add.w	r6, r6, #1
 8016baa:	bf58      	it	pl
 8016bac:	3701      	addpl	r7, #1
 8016bae:	60a2      	str	r2, [r4, #8]
 8016bb0:	b142      	cbz	r2, 8016bc4 <_scanf_chars+0xa8>
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	dcc8      	bgt.n	8016b48 <_scanf_chars+0x2c>
 8016bb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016bba:	4629      	mov	r1, r5
 8016bbc:	4640      	mov	r0, r8
 8016bbe:	4798      	blx	r3
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d0c1      	beq.n	8016b48 <_scanf_chars+0x2c>
 8016bc4:	6823      	ldr	r3, [r4, #0]
 8016bc6:	f013 0310 	ands.w	r3, r3, #16
 8016bca:	d105      	bne.n	8016bd8 <_scanf_chars+0xbc>
 8016bcc:	68e2      	ldr	r2, [r4, #12]
 8016bce:	3201      	adds	r2, #1
 8016bd0:	60e2      	str	r2, [r4, #12]
 8016bd2:	69a2      	ldr	r2, [r4, #24]
 8016bd4:	b102      	cbz	r2, 8016bd8 <_scanf_chars+0xbc>
 8016bd6:	703b      	strb	r3, [r7, #0]
 8016bd8:	6923      	ldr	r3, [r4, #16]
 8016bda:	441e      	add	r6, r3
 8016bdc:	6126      	str	r6, [r4, #16]
 8016bde:	2000      	movs	r0, #0
 8016be0:	e7c6      	b.n	8016b70 <_scanf_chars+0x54>
	...

08016be4 <_scanf_i>:
 8016be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be8:	469a      	mov	sl, r3
 8016bea:	4b74      	ldr	r3, [pc, #464]	; (8016dbc <_scanf_i+0x1d8>)
 8016bec:	460c      	mov	r4, r1
 8016bee:	4683      	mov	fp, r0
 8016bf0:	4616      	mov	r6, r2
 8016bf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016bf6:	b087      	sub	sp, #28
 8016bf8:	ab03      	add	r3, sp, #12
 8016bfa:	68a7      	ldr	r7, [r4, #8]
 8016bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c00:	4b6f      	ldr	r3, [pc, #444]	; (8016dc0 <_scanf_i+0x1dc>)
 8016c02:	69a1      	ldr	r1, [r4, #24]
 8016c04:	4a6f      	ldr	r2, [pc, #444]	; (8016dc4 <_scanf_i+0x1e0>)
 8016c06:	2903      	cmp	r1, #3
 8016c08:	bf08      	it	eq
 8016c0a:	461a      	moveq	r2, r3
 8016c0c:	1e7b      	subs	r3, r7, #1
 8016c0e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016c12:	bf84      	itt	hi
 8016c14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c18:	60a3      	strhi	r3, [r4, #8]
 8016c1a:	6823      	ldr	r3, [r4, #0]
 8016c1c:	9200      	str	r2, [sp, #0]
 8016c1e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016c22:	bf88      	it	hi
 8016c24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016c28:	f104 091c 	add.w	r9, r4, #28
 8016c2c:	6023      	str	r3, [r4, #0]
 8016c2e:	bf8c      	ite	hi
 8016c30:	197f      	addhi	r7, r7, r5
 8016c32:	2700      	movls	r7, #0
 8016c34:	464b      	mov	r3, r9
 8016c36:	f04f 0800 	mov.w	r8, #0
 8016c3a:	9301      	str	r3, [sp, #4]
 8016c3c:	6831      	ldr	r1, [r6, #0]
 8016c3e:	ab03      	add	r3, sp, #12
 8016c40:	2202      	movs	r2, #2
 8016c42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016c46:	7809      	ldrb	r1, [r1, #0]
 8016c48:	f7e9 fae2 	bl	8000210 <memchr>
 8016c4c:	9b01      	ldr	r3, [sp, #4]
 8016c4e:	b330      	cbz	r0, 8016c9e <_scanf_i+0xba>
 8016c50:	f1b8 0f01 	cmp.w	r8, #1
 8016c54:	d15a      	bne.n	8016d0c <_scanf_i+0x128>
 8016c56:	6862      	ldr	r2, [r4, #4]
 8016c58:	b92a      	cbnz	r2, 8016c66 <_scanf_i+0x82>
 8016c5a:	6822      	ldr	r2, [r4, #0]
 8016c5c:	2108      	movs	r1, #8
 8016c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016c62:	6061      	str	r1, [r4, #4]
 8016c64:	6022      	str	r2, [r4, #0]
 8016c66:	6822      	ldr	r2, [r4, #0]
 8016c68:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016c6c:	6022      	str	r2, [r4, #0]
 8016c6e:	68a2      	ldr	r2, [r4, #8]
 8016c70:	1e51      	subs	r1, r2, #1
 8016c72:	60a1      	str	r1, [r4, #8]
 8016c74:	b19a      	cbz	r2, 8016c9e <_scanf_i+0xba>
 8016c76:	6832      	ldr	r2, [r6, #0]
 8016c78:	1c51      	adds	r1, r2, #1
 8016c7a:	6031      	str	r1, [r6, #0]
 8016c7c:	7812      	ldrb	r2, [r2, #0]
 8016c7e:	701a      	strb	r2, [r3, #0]
 8016c80:	1c5d      	adds	r5, r3, #1
 8016c82:	6873      	ldr	r3, [r6, #4]
 8016c84:	3b01      	subs	r3, #1
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	6073      	str	r3, [r6, #4]
 8016c8a:	dc07      	bgt.n	8016c9c <_scanf_i+0xb8>
 8016c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c90:	4631      	mov	r1, r6
 8016c92:	4658      	mov	r0, fp
 8016c94:	4798      	blx	r3
 8016c96:	2800      	cmp	r0, #0
 8016c98:	f040 8086 	bne.w	8016da8 <_scanf_i+0x1c4>
 8016c9c:	462b      	mov	r3, r5
 8016c9e:	f108 0801 	add.w	r8, r8, #1
 8016ca2:	f1b8 0f03 	cmp.w	r8, #3
 8016ca6:	d1c8      	bne.n	8016c3a <_scanf_i+0x56>
 8016ca8:	6862      	ldr	r2, [r4, #4]
 8016caa:	b90a      	cbnz	r2, 8016cb0 <_scanf_i+0xcc>
 8016cac:	220a      	movs	r2, #10
 8016cae:	6062      	str	r2, [r4, #4]
 8016cb0:	6862      	ldr	r2, [r4, #4]
 8016cb2:	4945      	ldr	r1, [pc, #276]	; (8016dc8 <_scanf_i+0x1e4>)
 8016cb4:	6960      	ldr	r0, [r4, #20]
 8016cb6:	9301      	str	r3, [sp, #4]
 8016cb8:	1a89      	subs	r1, r1, r2
 8016cba:	f000 f8a9 	bl	8016e10 <__sccl>
 8016cbe:	9b01      	ldr	r3, [sp, #4]
 8016cc0:	f04f 0800 	mov.w	r8, #0
 8016cc4:	461d      	mov	r5, r3
 8016cc6:	68a3      	ldr	r3, [r4, #8]
 8016cc8:	6822      	ldr	r2, [r4, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d03a      	beq.n	8016d44 <_scanf_i+0x160>
 8016cce:	6831      	ldr	r1, [r6, #0]
 8016cd0:	6960      	ldr	r0, [r4, #20]
 8016cd2:	f891 c000 	ldrb.w	ip, [r1]
 8016cd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	d032      	beq.n	8016d44 <_scanf_i+0x160>
 8016cde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016ce2:	d121      	bne.n	8016d28 <_scanf_i+0x144>
 8016ce4:	0510      	lsls	r0, r2, #20
 8016ce6:	d51f      	bpl.n	8016d28 <_scanf_i+0x144>
 8016ce8:	f108 0801 	add.w	r8, r8, #1
 8016cec:	b117      	cbz	r7, 8016cf4 <_scanf_i+0x110>
 8016cee:	3301      	adds	r3, #1
 8016cf0:	3f01      	subs	r7, #1
 8016cf2:	60a3      	str	r3, [r4, #8]
 8016cf4:	6873      	ldr	r3, [r6, #4]
 8016cf6:	3b01      	subs	r3, #1
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	6073      	str	r3, [r6, #4]
 8016cfc:	dd1b      	ble.n	8016d36 <_scanf_i+0x152>
 8016cfe:	6833      	ldr	r3, [r6, #0]
 8016d00:	3301      	adds	r3, #1
 8016d02:	6033      	str	r3, [r6, #0]
 8016d04:	68a3      	ldr	r3, [r4, #8]
 8016d06:	3b01      	subs	r3, #1
 8016d08:	60a3      	str	r3, [r4, #8]
 8016d0a:	e7dc      	b.n	8016cc6 <_scanf_i+0xe2>
 8016d0c:	f1b8 0f02 	cmp.w	r8, #2
 8016d10:	d1ad      	bne.n	8016c6e <_scanf_i+0x8a>
 8016d12:	6822      	ldr	r2, [r4, #0]
 8016d14:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016d18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016d1c:	d1bf      	bne.n	8016c9e <_scanf_i+0xba>
 8016d1e:	2110      	movs	r1, #16
 8016d20:	6061      	str	r1, [r4, #4]
 8016d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016d26:	e7a1      	b.n	8016c6c <_scanf_i+0x88>
 8016d28:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016d2c:	6022      	str	r2, [r4, #0]
 8016d2e:	780b      	ldrb	r3, [r1, #0]
 8016d30:	702b      	strb	r3, [r5, #0]
 8016d32:	3501      	adds	r5, #1
 8016d34:	e7de      	b.n	8016cf4 <_scanf_i+0x110>
 8016d36:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d3a:	4631      	mov	r1, r6
 8016d3c:	4658      	mov	r0, fp
 8016d3e:	4798      	blx	r3
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d0df      	beq.n	8016d04 <_scanf_i+0x120>
 8016d44:	6823      	ldr	r3, [r4, #0]
 8016d46:	05d9      	lsls	r1, r3, #23
 8016d48:	d50c      	bpl.n	8016d64 <_scanf_i+0x180>
 8016d4a:	454d      	cmp	r5, r9
 8016d4c:	d908      	bls.n	8016d60 <_scanf_i+0x17c>
 8016d4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d56:	4632      	mov	r2, r6
 8016d58:	4658      	mov	r0, fp
 8016d5a:	4798      	blx	r3
 8016d5c:	1e6f      	subs	r7, r5, #1
 8016d5e:	463d      	mov	r5, r7
 8016d60:	454d      	cmp	r5, r9
 8016d62:	d029      	beq.n	8016db8 <_scanf_i+0x1d4>
 8016d64:	6822      	ldr	r2, [r4, #0]
 8016d66:	f012 0210 	ands.w	r2, r2, #16
 8016d6a:	d113      	bne.n	8016d94 <_scanf_i+0x1b0>
 8016d6c:	702a      	strb	r2, [r5, #0]
 8016d6e:	6863      	ldr	r3, [r4, #4]
 8016d70:	9e00      	ldr	r6, [sp, #0]
 8016d72:	4649      	mov	r1, r9
 8016d74:	4658      	mov	r0, fp
 8016d76:	47b0      	blx	r6
 8016d78:	f8da 3000 	ldr.w	r3, [sl]
 8016d7c:	6821      	ldr	r1, [r4, #0]
 8016d7e:	1d1a      	adds	r2, r3, #4
 8016d80:	f8ca 2000 	str.w	r2, [sl]
 8016d84:	f011 0f20 	tst.w	r1, #32
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	d010      	beq.n	8016dae <_scanf_i+0x1ca>
 8016d8c:	6018      	str	r0, [r3, #0]
 8016d8e:	68e3      	ldr	r3, [r4, #12]
 8016d90:	3301      	adds	r3, #1
 8016d92:	60e3      	str	r3, [r4, #12]
 8016d94:	eba5 0509 	sub.w	r5, r5, r9
 8016d98:	44a8      	add	r8, r5
 8016d9a:	6925      	ldr	r5, [r4, #16]
 8016d9c:	4445      	add	r5, r8
 8016d9e:	6125      	str	r5, [r4, #16]
 8016da0:	2000      	movs	r0, #0
 8016da2:	b007      	add	sp, #28
 8016da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da8:	f04f 0800 	mov.w	r8, #0
 8016dac:	e7ca      	b.n	8016d44 <_scanf_i+0x160>
 8016dae:	07ca      	lsls	r2, r1, #31
 8016db0:	bf4c      	ite	mi
 8016db2:	8018      	strhmi	r0, [r3, #0]
 8016db4:	6018      	strpl	r0, [r3, #0]
 8016db6:	e7ea      	b.n	8016d8e <_scanf_i+0x1aa>
 8016db8:	2001      	movs	r0, #1
 8016dba:	e7f2      	b.n	8016da2 <_scanf_i+0x1be>
 8016dbc:	0801731c 	.word	0x0801731c
 8016dc0:	08013fd1 	.word	0x08013fd1
 8016dc4:	08016f8d 	.word	0x08016f8d
 8016dc8:	080177ed 	.word	0x080177ed

08016dcc <_read_r>:
 8016dcc:	b538      	push	{r3, r4, r5, lr}
 8016dce:	4c07      	ldr	r4, [pc, #28]	; (8016dec <_read_r+0x20>)
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	4608      	mov	r0, r1
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	6022      	str	r2, [r4, #0]
 8016dda:	461a      	mov	r2, r3
 8016ddc:	f7ee fd3c 	bl	8005858 <_read>
 8016de0:	1c43      	adds	r3, r0, #1
 8016de2:	d102      	bne.n	8016dea <_read_r+0x1e>
 8016de4:	6823      	ldr	r3, [r4, #0]
 8016de6:	b103      	cbz	r3, 8016dea <_read_r+0x1e>
 8016de8:	602b      	str	r3, [r5, #0]
 8016dea:	bd38      	pop	{r3, r4, r5, pc}
 8016dec:	2003b41c 	.word	0x2003b41c

08016df0 <_sbrk_r>:
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	4c06      	ldr	r4, [pc, #24]	; (8016e0c <_sbrk_r+0x1c>)
 8016df4:	2300      	movs	r3, #0
 8016df6:	4605      	mov	r5, r0
 8016df8:	4608      	mov	r0, r1
 8016dfa:	6023      	str	r3, [r4, #0]
 8016dfc:	f7ee fd7e 	bl	80058fc <_sbrk>
 8016e00:	1c43      	adds	r3, r0, #1
 8016e02:	d102      	bne.n	8016e0a <_sbrk_r+0x1a>
 8016e04:	6823      	ldr	r3, [r4, #0]
 8016e06:	b103      	cbz	r3, 8016e0a <_sbrk_r+0x1a>
 8016e08:	602b      	str	r3, [r5, #0]
 8016e0a:	bd38      	pop	{r3, r4, r5, pc}
 8016e0c:	2003b41c 	.word	0x2003b41c

08016e10 <__sccl>:
 8016e10:	b570      	push	{r4, r5, r6, lr}
 8016e12:	780b      	ldrb	r3, [r1, #0]
 8016e14:	2b5e      	cmp	r3, #94	; 0x5e
 8016e16:	bf13      	iteet	ne
 8016e18:	1c4a      	addne	r2, r1, #1
 8016e1a:	1c8a      	addeq	r2, r1, #2
 8016e1c:	784b      	ldrbeq	r3, [r1, #1]
 8016e1e:	2100      	movne	r1, #0
 8016e20:	bf08      	it	eq
 8016e22:	2101      	moveq	r1, #1
 8016e24:	1e44      	subs	r4, r0, #1
 8016e26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016e2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016e2e:	42ac      	cmp	r4, r5
 8016e30:	d1fb      	bne.n	8016e2a <__sccl+0x1a>
 8016e32:	b913      	cbnz	r3, 8016e3a <__sccl+0x2a>
 8016e34:	3a01      	subs	r2, #1
 8016e36:	4610      	mov	r0, r2
 8016e38:	bd70      	pop	{r4, r5, r6, pc}
 8016e3a:	f081 0401 	eor.w	r4, r1, #1
 8016e3e:	54c4      	strb	r4, [r0, r3]
 8016e40:	1c51      	adds	r1, r2, #1
 8016e42:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016e46:	2d2d      	cmp	r5, #45	; 0x2d
 8016e48:	f101 36ff 	add.w	r6, r1, #4294967295
 8016e4c:	460a      	mov	r2, r1
 8016e4e:	d006      	beq.n	8016e5e <__sccl+0x4e>
 8016e50:	2d5d      	cmp	r5, #93	; 0x5d
 8016e52:	d0f0      	beq.n	8016e36 <__sccl+0x26>
 8016e54:	b90d      	cbnz	r5, 8016e5a <__sccl+0x4a>
 8016e56:	4632      	mov	r2, r6
 8016e58:	e7ed      	b.n	8016e36 <__sccl+0x26>
 8016e5a:	462b      	mov	r3, r5
 8016e5c:	e7ef      	b.n	8016e3e <__sccl+0x2e>
 8016e5e:	780e      	ldrb	r6, [r1, #0]
 8016e60:	2e5d      	cmp	r6, #93	; 0x5d
 8016e62:	d0fa      	beq.n	8016e5a <__sccl+0x4a>
 8016e64:	42b3      	cmp	r3, r6
 8016e66:	dcf8      	bgt.n	8016e5a <__sccl+0x4a>
 8016e68:	3301      	adds	r3, #1
 8016e6a:	429e      	cmp	r6, r3
 8016e6c:	54c4      	strb	r4, [r0, r3]
 8016e6e:	dcfb      	bgt.n	8016e68 <__sccl+0x58>
 8016e70:	3102      	adds	r1, #2
 8016e72:	e7e6      	b.n	8016e42 <__sccl+0x32>

08016e74 <strncmp>:
 8016e74:	b510      	push	{r4, lr}
 8016e76:	b16a      	cbz	r2, 8016e94 <strncmp+0x20>
 8016e78:	3901      	subs	r1, #1
 8016e7a:	1884      	adds	r4, r0, r2
 8016e7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016e80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016e84:	4293      	cmp	r3, r2
 8016e86:	d103      	bne.n	8016e90 <strncmp+0x1c>
 8016e88:	42a0      	cmp	r0, r4
 8016e8a:	d001      	beq.n	8016e90 <strncmp+0x1c>
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d1f5      	bne.n	8016e7c <strncmp+0x8>
 8016e90:	1a98      	subs	r0, r3, r2
 8016e92:	bd10      	pop	{r4, pc}
 8016e94:	4610      	mov	r0, r2
 8016e96:	e7fc      	b.n	8016e92 <strncmp+0x1e>

08016e98 <_strtoul_l.isra.0>:
 8016e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e9c:	4680      	mov	r8, r0
 8016e9e:	4689      	mov	r9, r1
 8016ea0:	4692      	mov	sl, r2
 8016ea2:	461e      	mov	r6, r3
 8016ea4:	460f      	mov	r7, r1
 8016ea6:	463d      	mov	r5, r7
 8016ea8:	9808      	ldr	r0, [sp, #32]
 8016eaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016eae:	f7fe fc87 	bl	80157c0 <__locale_ctype_ptr_l>
 8016eb2:	4420      	add	r0, r4
 8016eb4:	7843      	ldrb	r3, [r0, #1]
 8016eb6:	f013 0308 	ands.w	r3, r3, #8
 8016eba:	d130      	bne.n	8016f1e <_strtoul_l.isra.0+0x86>
 8016ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8016ebe:	d130      	bne.n	8016f22 <_strtoul_l.isra.0+0x8a>
 8016ec0:	787c      	ldrb	r4, [r7, #1]
 8016ec2:	1cbd      	adds	r5, r7, #2
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	2e00      	cmp	r6, #0
 8016ec8:	d05c      	beq.n	8016f84 <_strtoul_l.isra.0+0xec>
 8016eca:	2e10      	cmp	r6, #16
 8016ecc:	d109      	bne.n	8016ee2 <_strtoul_l.isra.0+0x4a>
 8016ece:	2c30      	cmp	r4, #48	; 0x30
 8016ed0:	d107      	bne.n	8016ee2 <_strtoul_l.isra.0+0x4a>
 8016ed2:	782b      	ldrb	r3, [r5, #0]
 8016ed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ed8:	2b58      	cmp	r3, #88	; 0x58
 8016eda:	d14e      	bne.n	8016f7a <_strtoul_l.isra.0+0xe2>
 8016edc:	786c      	ldrb	r4, [r5, #1]
 8016ede:	2610      	movs	r6, #16
 8016ee0:	3502      	adds	r5, #2
 8016ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	fbb2 f2f6 	udiv	r2, r2, r6
 8016eec:	fb06 fc02 	mul.w	ip, r6, r2
 8016ef0:	ea6f 0c0c 	mvn.w	ip, ip
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016efa:	2f09      	cmp	r7, #9
 8016efc:	d817      	bhi.n	8016f2e <_strtoul_l.isra.0+0x96>
 8016efe:	463c      	mov	r4, r7
 8016f00:	42a6      	cmp	r6, r4
 8016f02:	dd23      	ble.n	8016f4c <_strtoul_l.isra.0+0xb4>
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	db1e      	blt.n	8016f46 <_strtoul_l.isra.0+0xae>
 8016f08:	4282      	cmp	r2, r0
 8016f0a:	d31c      	bcc.n	8016f46 <_strtoul_l.isra.0+0xae>
 8016f0c:	d101      	bne.n	8016f12 <_strtoul_l.isra.0+0x7a>
 8016f0e:	45a4      	cmp	ip, r4
 8016f10:	db19      	blt.n	8016f46 <_strtoul_l.isra.0+0xae>
 8016f12:	fb00 4006 	mla	r0, r0, r6, r4
 8016f16:	2301      	movs	r3, #1
 8016f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f1c:	e7eb      	b.n	8016ef6 <_strtoul_l.isra.0+0x5e>
 8016f1e:	462f      	mov	r7, r5
 8016f20:	e7c1      	b.n	8016ea6 <_strtoul_l.isra.0+0xe>
 8016f22:	2c2b      	cmp	r4, #43	; 0x2b
 8016f24:	bf04      	itt	eq
 8016f26:	1cbd      	addeq	r5, r7, #2
 8016f28:	787c      	ldrbeq	r4, [r7, #1]
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	e7cb      	b.n	8016ec6 <_strtoul_l.isra.0+0x2e>
 8016f2e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016f32:	2f19      	cmp	r7, #25
 8016f34:	d801      	bhi.n	8016f3a <_strtoul_l.isra.0+0xa2>
 8016f36:	3c37      	subs	r4, #55	; 0x37
 8016f38:	e7e2      	b.n	8016f00 <_strtoul_l.isra.0+0x68>
 8016f3a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016f3e:	2f19      	cmp	r7, #25
 8016f40:	d804      	bhi.n	8016f4c <_strtoul_l.isra.0+0xb4>
 8016f42:	3c57      	subs	r4, #87	; 0x57
 8016f44:	e7dc      	b.n	8016f00 <_strtoul_l.isra.0+0x68>
 8016f46:	f04f 33ff 	mov.w	r3, #4294967295
 8016f4a:	e7e5      	b.n	8016f18 <_strtoul_l.isra.0+0x80>
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	da09      	bge.n	8016f64 <_strtoul_l.isra.0+0xcc>
 8016f50:	2322      	movs	r3, #34	; 0x22
 8016f52:	f8c8 3000 	str.w	r3, [r8]
 8016f56:	f04f 30ff 	mov.w	r0, #4294967295
 8016f5a:	f1ba 0f00 	cmp.w	sl, #0
 8016f5e:	d107      	bne.n	8016f70 <_strtoul_l.isra.0+0xd8>
 8016f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f64:	b101      	cbz	r1, 8016f68 <_strtoul_l.isra.0+0xd0>
 8016f66:	4240      	negs	r0, r0
 8016f68:	f1ba 0f00 	cmp.w	sl, #0
 8016f6c:	d0f8      	beq.n	8016f60 <_strtoul_l.isra.0+0xc8>
 8016f6e:	b10b      	cbz	r3, 8016f74 <_strtoul_l.isra.0+0xdc>
 8016f70:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f74:	f8ca 9000 	str.w	r9, [sl]
 8016f78:	e7f2      	b.n	8016f60 <_strtoul_l.isra.0+0xc8>
 8016f7a:	2430      	movs	r4, #48	; 0x30
 8016f7c:	2e00      	cmp	r6, #0
 8016f7e:	d1b0      	bne.n	8016ee2 <_strtoul_l.isra.0+0x4a>
 8016f80:	2608      	movs	r6, #8
 8016f82:	e7ae      	b.n	8016ee2 <_strtoul_l.isra.0+0x4a>
 8016f84:	2c30      	cmp	r4, #48	; 0x30
 8016f86:	d0a4      	beq.n	8016ed2 <_strtoul_l.isra.0+0x3a>
 8016f88:	260a      	movs	r6, #10
 8016f8a:	e7aa      	b.n	8016ee2 <_strtoul_l.isra.0+0x4a>

08016f8c <_strtoul_r>:
 8016f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f8e:	4c06      	ldr	r4, [pc, #24]	; (8016fa8 <_strtoul_r+0x1c>)
 8016f90:	4d06      	ldr	r5, [pc, #24]	; (8016fac <_strtoul_r+0x20>)
 8016f92:	6824      	ldr	r4, [r4, #0]
 8016f94:	6a24      	ldr	r4, [r4, #32]
 8016f96:	2c00      	cmp	r4, #0
 8016f98:	bf08      	it	eq
 8016f9a:	462c      	moveq	r4, r5
 8016f9c:	9400      	str	r4, [sp, #0]
 8016f9e:	f7ff ff7b 	bl	8016e98 <_strtoul_l.isra.0>
 8016fa2:	b003      	add	sp, #12
 8016fa4:	bd30      	pop	{r4, r5, pc}
 8016fa6:	bf00      	nop
 8016fa8:	2000000c 	.word	0x2000000c
 8016fac:	20000070 	.word	0x20000070

08016fb0 <__submore>:
 8016fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb4:	460c      	mov	r4, r1
 8016fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fbc:	4299      	cmp	r1, r3
 8016fbe:	d11d      	bne.n	8016ffc <__submore+0x4c>
 8016fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016fc4:	f7ff f914 	bl	80161f0 <_malloc_r>
 8016fc8:	b918      	cbnz	r0, 8016fd2 <__submore+0x22>
 8016fca:	f04f 30ff 	mov.w	r0, #4294967295
 8016fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016fd6:	63a3      	str	r3, [r4, #56]	; 0x38
 8016fd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8016fde:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016fe2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016fe6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016fea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016fee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016ff2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016ff6:	6020      	str	r0, [r4, #0]
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	e7e8      	b.n	8016fce <__submore+0x1e>
 8016ffc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016ffe:	0077      	lsls	r7, r6, #1
 8017000:	463a      	mov	r2, r7
 8017002:	f000 f85a 	bl	80170ba <_realloc_r>
 8017006:	4605      	mov	r5, r0
 8017008:	2800      	cmp	r0, #0
 801700a:	d0de      	beq.n	8016fca <__submore+0x1a>
 801700c:	eb00 0806 	add.w	r8, r0, r6
 8017010:	4601      	mov	r1, r0
 8017012:	4632      	mov	r2, r6
 8017014:	4640      	mov	r0, r8
 8017016:	f7fe fc85 	bl	8015924 <memcpy>
 801701a:	f8c4 8000 	str.w	r8, [r4]
 801701e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017022:	e7e9      	b.n	8016ff8 <__submore+0x48>

08017024 <__ascii_wctomb>:
 8017024:	b149      	cbz	r1, 801703a <__ascii_wctomb+0x16>
 8017026:	2aff      	cmp	r2, #255	; 0xff
 8017028:	bf85      	ittet	hi
 801702a:	238a      	movhi	r3, #138	; 0x8a
 801702c:	6003      	strhi	r3, [r0, #0]
 801702e:	700a      	strbls	r2, [r1, #0]
 8017030:	f04f 30ff 	movhi.w	r0, #4294967295
 8017034:	bf98      	it	ls
 8017036:	2001      	movls	r0, #1
 8017038:	4770      	bx	lr
 801703a:	4608      	mov	r0, r1
 801703c:	4770      	bx	lr
	...

08017040 <_fstat_r>:
 8017040:	b538      	push	{r3, r4, r5, lr}
 8017042:	4c07      	ldr	r4, [pc, #28]	; (8017060 <_fstat_r+0x20>)
 8017044:	2300      	movs	r3, #0
 8017046:	4605      	mov	r5, r0
 8017048:	4608      	mov	r0, r1
 801704a:	4611      	mov	r1, r2
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	f7ee fc2c 	bl	80058aa <_fstat>
 8017052:	1c43      	adds	r3, r0, #1
 8017054:	d102      	bne.n	801705c <_fstat_r+0x1c>
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	b103      	cbz	r3, 801705c <_fstat_r+0x1c>
 801705a:	602b      	str	r3, [r5, #0]
 801705c:	bd38      	pop	{r3, r4, r5, pc}
 801705e:	bf00      	nop
 8017060:	2003b41c 	.word	0x2003b41c

08017064 <_isatty_r>:
 8017064:	b538      	push	{r3, r4, r5, lr}
 8017066:	4c06      	ldr	r4, [pc, #24]	; (8017080 <_isatty_r+0x1c>)
 8017068:	2300      	movs	r3, #0
 801706a:	4605      	mov	r5, r0
 801706c:	4608      	mov	r0, r1
 801706e:	6023      	str	r3, [r4, #0]
 8017070:	f7ee fc2b 	bl	80058ca <_isatty>
 8017074:	1c43      	adds	r3, r0, #1
 8017076:	d102      	bne.n	801707e <_isatty_r+0x1a>
 8017078:	6823      	ldr	r3, [r4, #0]
 801707a:	b103      	cbz	r3, 801707e <_isatty_r+0x1a>
 801707c:	602b      	str	r3, [r5, #0]
 801707e:	bd38      	pop	{r3, r4, r5, pc}
 8017080:	2003b41c 	.word	0x2003b41c

08017084 <memmove>:
 8017084:	4288      	cmp	r0, r1
 8017086:	b510      	push	{r4, lr}
 8017088:	eb01 0302 	add.w	r3, r1, r2
 801708c:	d807      	bhi.n	801709e <memmove+0x1a>
 801708e:	1e42      	subs	r2, r0, #1
 8017090:	4299      	cmp	r1, r3
 8017092:	d00a      	beq.n	80170aa <memmove+0x26>
 8017094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017098:	f802 4f01 	strb.w	r4, [r2, #1]!
 801709c:	e7f8      	b.n	8017090 <memmove+0xc>
 801709e:	4283      	cmp	r3, r0
 80170a0:	d9f5      	bls.n	801708e <memmove+0xa>
 80170a2:	1881      	adds	r1, r0, r2
 80170a4:	1ad2      	subs	r2, r2, r3
 80170a6:	42d3      	cmn	r3, r2
 80170a8:	d100      	bne.n	80170ac <memmove+0x28>
 80170aa:	bd10      	pop	{r4, pc}
 80170ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80170b4:	e7f7      	b.n	80170a6 <memmove+0x22>

080170b6 <__malloc_lock>:
 80170b6:	4770      	bx	lr

080170b8 <__malloc_unlock>:
 80170b8:	4770      	bx	lr

080170ba <_realloc_r>:
 80170ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170bc:	4607      	mov	r7, r0
 80170be:	4614      	mov	r4, r2
 80170c0:	460e      	mov	r6, r1
 80170c2:	b921      	cbnz	r1, 80170ce <_realloc_r+0x14>
 80170c4:	4611      	mov	r1, r2
 80170c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80170ca:	f7ff b891 	b.w	80161f0 <_malloc_r>
 80170ce:	b922      	cbnz	r2, 80170da <_realloc_r+0x20>
 80170d0:	f7ff f840 	bl	8016154 <_free_r>
 80170d4:	4625      	mov	r5, r4
 80170d6:	4628      	mov	r0, r5
 80170d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170da:	f000 f814 	bl	8017106 <_malloc_usable_size_r>
 80170de:	42a0      	cmp	r0, r4
 80170e0:	d20f      	bcs.n	8017102 <_realloc_r+0x48>
 80170e2:	4621      	mov	r1, r4
 80170e4:	4638      	mov	r0, r7
 80170e6:	f7ff f883 	bl	80161f0 <_malloc_r>
 80170ea:	4605      	mov	r5, r0
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d0f2      	beq.n	80170d6 <_realloc_r+0x1c>
 80170f0:	4631      	mov	r1, r6
 80170f2:	4622      	mov	r2, r4
 80170f4:	f7fe fc16 	bl	8015924 <memcpy>
 80170f8:	4631      	mov	r1, r6
 80170fa:	4638      	mov	r0, r7
 80170fc:	f7ff f82a 	bl	8016154 <_free_r>
 8017100:	e7e9      	b.n	80170d6 <_realloc_r+0x1c>
 8017102:	4635      	mov	r5, r6
 8017104:	e7e7      	b.n	80170d6 <_realloc_r+0x1c>

08017106 <_malloc_usable_size_r>:
 8017106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801710a:	1f18      	subs	r0, r3, #4
 801710c:	2b00      	cmp	r3, #0
 801710e:	bfbc      	itt	lt
 8017110:	580b      	ldrlt	r3, [r1, r0]
 8017112:	18c0      	addlt	r0, r0, r3
 8017114:	4770      	bx	lr
	...

08017118 <_init>:
 8017118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711a:	bf00      	nop
 801711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801711e:	bc08      	pop	{r3}
 8017120:	469e      	mov	lr, r3
 8017122:	4770      	bx	lr

08017124 <_fini>:
 8017124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017126:	bf00      	nop
 8017128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801712a:	bc08      	pop	{r3}
 801712c:	469e      	mov	lr, r3
 801712e:	4770      	bx	lr
