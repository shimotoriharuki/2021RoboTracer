
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017bb8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08017d78  08017d78  00027d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801889c  0801889c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801889c  0801889c  0002889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188a4  080188a4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080188a4  080188a4  000288a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188ac  080188ac  000288ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080188b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c58  200001e0  08018a8c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e38  08018a8c  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038acf  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  00068cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002270  00000000  00000000  00070620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  00072890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f44  00000000  00000000  00074840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025964  00000000  00000000  000ab784  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011085b  00000000  00000000  000d10e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3c4  00000000  00000000  001e19c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017d60 	.word	0x08017d60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017d60 	.word	0x08017d60

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 fb64 	bl	80096a4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e92c 	.word	0x2003e92c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 fb4c 	bl	80096a4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e92c 	.word	0x2003e92c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 f9ed 	bl	8009400 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 ff54 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 ff4e 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 ff48 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 ff42 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 ff3c 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 ff36 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 ff30 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 ff2a 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 ff24 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 ff1e 	bl	8007ed4 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 ff12 	bl	8007ed4 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 ff0c 	bl	8007ed4 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 f9ed 	bl	8015508 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
		cross_line_ignore_distance_(0), stable_distance_(0){}
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <_ZN7Encoder4initEv+0x30>)
 80011c0:	f00c f908 	bl	800d3d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <_ZN7Encoder4initEv+0x34>)
 80011c8:	f00c f904 	bl	800d3d4 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_ZN7Encoder4initEv+0x38>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <_ZN7Encoder4initEv+0x3c>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2003eb80 	.word	0x2003eb80
 80011e8:	2003e864 	.word	0x2003e864
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010400 	.word	0x40010400
 80011f4:	00000000 	.word	0x00000000

080011f8 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001200:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <_ZN7Encoder6updateEv+0x1c8>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013c4 <_ZN7Encoder6updateEv+0x1cc>
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013c8 <_ZN7Encoder6updateEv+0x1d0>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <_ZN7Encoder6updateEv+0x1d4>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013c4 <_ZN7Encoder6updateEv+0x1cc>
 8001230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001234:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013c8 <_ZN7Encoder6updateEv+0x1d0>
 8001238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a63      	ldr	r2, [pc, #396]	; (80013d0 <_ZN7Encoder6updateEv+0x1d8>)
 8001244:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f995 	bl	8000578 <__aeabi_f2d>
 800124e:	a356      	add	r3, pc, #344	; (adr r3, 80013a8 <_ZN7Encoder6updateEv+0x1b0>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9e8 	bl	8000628 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4625      	mov	r5, r4
 800125e:	461c      	mov	r4, r3
 8001260:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <_ZN7Encoder6updateEv+0x1dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f987 	bl	8000578 <__aeabi_f2d>
 800126a:	a351      	add	r3, pc, #324	; (adr r3, 80013b0 <_ZN7Encoder6updateEv+0x1b8>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9da 	bl	8000628 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f81e 	bl	80002bc <__adddf3>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fcc6 	bl	8000c18 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f96f 	bl	8000578 <__aeabi_f2d>
 800129a:	a343      	add	r3, pc, #268	; (adr r3, 80013a8 <_ZN7Encoder6updateEv+0x1b0>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f9c2 	bl	8000628 <__aeabi_dmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4625      	mov	r5, r4
 80012aa:	461c      	mov	r4, r3
 80012ac:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <_ZN7Encoder6updateEv+0x1e0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f961 	bl	8000578 <__aeabi_f2d>
 80012b6:	a33e      	add	r3, pc, #248	; (adr r3, 80013b0 <_ZN7Encoder6updateEv+0x1b8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f9b4 	bl	8000628 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7fe fff8 	bl	80002bc <__adddf3>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fca0 	bl	8000c18 <__aeabi_d2f>
 80012d8:	4602      	mov	r2, r0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a3e      	ldr	r2, [pc, #248]	; (80013dc <_ZN7Encoder6updateEv+0x1e4>)
 80012e4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <_ZN7Encoder6updateEv+0x1dc>)
 80012ec:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <_ZN7Encoder6updateEv+0x1e0>)
 80012f4:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	ee17 0a90 	vmov	r0, s15
 800130a:	f7ff f935 	bl	8000578 <__aeabi_f2d>
 800130e:	a32a      	add	r3, pc, #168	; (adr r3, 80013b8 <_ZN7Encoder6updateEv+0x1c0>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f988 	bl	8000628 <__aeabi_dmul>
 8001318:	4603      	mov	r3, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4618      	mov	r0, r3
 800131e:	4621      	mov	r1, r4
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001328:	f7ff faa8 	bl	800087c <__aeabi_ddiv>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f7ff fc70 	bl	8000c18 <__aeabi_d2f>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	ed93 7a05 	vldr	s14, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a02 	vldr	s15, [r3, #8]
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	ed93 7a06 	vldr	s14, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	edd3 7a02 	vldr	s15, [r3, #8]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edc3 7a07 	vstr	s15, [r3, #28]
	stable_distance_ += distance_;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	ed93 7a08 	vldr	s14, [r3, #32]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a02 	vldr	s15, [r3, #8]
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a08 	vstr	s15, [r3, #32]

	monitor_distance = distance_10mm_;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <_ZN7Encoder6updateEv+0x1e8>)
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3fa99999 	.word	0x3fa99999
 80013b0:	66666666 	.word	0x66666666
 80013b4:	3fee6666 	.word	0x3fee6666
 80013b8:	ce73a049 	.word	0xce73a049
 80013bc:	3f77a3f6 	.word	0x3f77a3f6
 80013c0:	40010000 	.word	0x40010000
 80013c4:	47000000 	.word	0x47000000
 80013c8:	3f912547 	.word	0x3f912547
 80013cc:	40010400 	.word	0x40010400
 80013d0:	20000200 	.word	0x20000200
 80013d4:	20000208 	.word	0x20000208
 80013d8:	2000020c 	.word	0x2000020c
 80013dc:	20000204 	.word	0x20000204
 80013e0:	200001fc 	.word	0x200001fc

080013e4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_ZN7Encoder5clearEv+0x3c>)
 80013fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_ZN7Encoder5clearEv+0x40>)
 8001406:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40010000 	.word	0x40010000
 8001424:	40010400 	.word	0x40010400

08001428 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	return distance_;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	ee07 3a90 	vmov	s15, r3
}
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	ee07 3a90 	vmov	s15, r3
}
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	ee07 3a90 	vmov	s15, r3
}
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	619a      	str	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_ZN7Encoder19clearStableDistanceEv>:
{
	return stable_distance_;
}

void Encoder::clearStableDistance()
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	stable_distance_ = 0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f978 	bl	800185c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800156c:	f000 f98c 	bl	8001888 <fopen_folder_and_file>

	return ret;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <user_fclose+0x1c>)
 8001588:	f010 fc7e 	bl	8011e88 <f_close>

	return ret;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2003d770 	.word	0x2003d770

0800159c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b087      	sub	sp, #28
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	e030      	b.n	8001618 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffd8 	bl	8000578 <__aeabi_f2d>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	e9cd 3400 	strd	r3, r4, [sp]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <sd_write_float+0x94>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	4817      	ldr	r0, [pc, #92]	; (8001634 <sd_write_float+0x98>)
 80015d6:	f013 f84b 	bl	8014670 <sniprintf>

		if(state == ADD_WRITE){
 80015da:	797b      	ldrb	r3, [r7, #5]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <sd_write_float+0x9c>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <sd_write_float+0x9c>)
 80015e8:	f010 fcc2 	bl	8011f70 <f_lseek>
 80015ec:	e003      	b.n	80015f6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015ee:	2100      	movs	r1, #0
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <sd_write_float+0x9c>)
 80015f2:	f010 fcbd 	bl	8011f70 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <sd_write_float+0x98>)
 80015f8:	f7fe fe02 	bl	8000200 <strlen>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <sd_write_float+0xa0>)
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <sd_write_float+0x98>)
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <sd_write_float+0x9c>)
 8001604:	f010 fa2b 	bl	8011a5e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001608:	f000 f958 	bl	80018bc <bufclear>
	for(short i = 0 ; i < size; i++){
 800160c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001610:	b29b      	uxth	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	81fb      	strh	r3, [r7, #14]
 8001618:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800161c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbc8      	blt.n	80015b6 <sd_write_float+0x1a>
	}
	return ret;
 8001624:	7b7b      	ldrb	r3, [r7, #13]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	08017d78 	.word	0x08017d78
 8001634:	2003d6e0 	.word	0x2003d6e0
 8001638:	2003d770 	.word	0x2003d770
 800163c:	2003d760 	.word	0x2003d760

08001640 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f900 	bl	800185c <create_path>

	if(state == OVER_WRITE){
 800165c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d108      	bne.n	8001676 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001664:	4822      	ldr	r0, [pc, #136]	; (80016f0 <sd_write_array_float+0xb0>)
 8001666:	f010 fc39 	bl	8011edc <f_chdir>
		f_unlink(filepath);	//	一回消す
 800166a:	4822      	ldr	r0, [pc, #136]	; (80016f4 <sd_write_array_float+0xb4>)
 800166c:	f010 fea4 	bl	80123b8 <f_unlink>
		f_chdir("..");
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <sd_write_array_float+0xb8>)
 8001672:	f010 fc33 	bl	8011edc <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001676:	f000 f907 	bl	8001888 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800167a:	2300      	movs	r3, #0
 800167c:	82fb      	strh	r3, [r7, #22]
 800167e:	e028      	b.n	80016d2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001680:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff73 	bl	8000578 <__aeabi_f2d>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	e9cd 3400 	strd	r3, r4, [sp]
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <sd_write_array_float+0xbc>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <sd_write_array_float+0xc0>)
 80016a0:	f012 ffe6 	bl	8014670 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <sd_write_array_float+0xc4>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4816      	ldr	r0, [pc, #88]	; (8001704 <sd_write_array_float+0xc4>)
 80016ac:	f010 fc60 	bl	8011f70 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <sd_write_array_float+0xc0>)
 80016b2:	f7fe fda5 	bl	8000200 <strlen>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <sd_write_array_float+0xc8>)
 80016ba:	4911      	ldr	r1, [pc, #68]	; (8001700 <sd_write_array_float+0xc0>)
 80016bc:	4811      	ldr	r0, [pc, #68]	; (8001704 <sd_write_array_float+0xc4>)
 80016be:	f010 f9ce 	bl	8011a5e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80016c2:	f000 f8fb 	bl	80018bc <bufclear>
	for(short i = 0 ; i < size; i++){
 80016c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	82fb      	strh	r3, [r7, #22]
 80016d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbd0      	blt.n	8001680 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016de:	4809      	ldr	r0, [pc, #36]	; (8001704 <sd_write_array_float+0xc4>)
 80016e0:	f010 fbd2 	bl	8011e88 <f_close>

	return ret;
 80016e4:	7d7b      	ldrb	r3, [r7, #21]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2003d5e0 	.word	0x2003d5e0
 80016f4:	2003c4a0 	.word	0x2003c4a0
 80016f8:	08017d94 	.word	0x08017d94
 80016fc:	08017d78 	.word	0x08017d78
 8001700:	2003d6e0 	.word	0x2003d6e0
 8001704:	2003d770 	.word	0x2003d770
 8001708:	2003d760 	.word	0x2003d760

0800170c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f898 	bl	800185c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800172c:	f000 f8ac 	bl	8001888 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001730:	e019      	b.n	8001766 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001732:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4913      	ldr	r1, [pc, #76]	; (800178c <sd_read_array_float+0x80>)
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <sd_read_array_float+0x84>)
 8001742:	f012 ffe9 	bl	8014718 <siscanf>
		i++;
 8001746:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800174a:	b29b      	uxth	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	429a      	cmp	r2, r3
 800175c:	db03      	blt.n	8001766 <sd_read_array_float+0x5a>
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	3b01      	subs	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <sd_read_array_float+0x88>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <sd_read_array_float+0x84>)
 800176c:	f011 f802 	bl	8012774 <f_gets>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1dd      	bne.n	8001732 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001776:	f000 f8a1 	bl	80018bc <bufclear>

	f_close(&fil);	//ファイル閉じる
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <sd_read_array_float+0x88>)
 800177c:	f010 fb84 	bl	8011e88 <f_close>

	return ret;
 8001780:	7d7b      	ldrb	r3, [r7, #21]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	08017d84 	.word	0x08017d84
 8001790:	2003d6e0 	.word	0x2003d6e0
 8001794:	2003d770 	.word	0x2003d770

08001798 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f852 	bl	800185c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80017b8:	f000 f866 	bl	8001888 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017bc:	e019      	b.n	80017f2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <sd_read_array_double+0x80>)
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <sd_read_array_double+0x84>)
 80017ce:	f012 ffa3 	bl	8014718 <siscanf>
		i++;
 80017d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	db03      	blt.n	80017f2 <sd_read_array_double+0x5a>
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <sd_read_array_double+0x88>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_read_array_double+0x84>)
 80017f8:	f010 ffbc 	bl	8012774 <f_gets>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1dd      	bne.n	80017be <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001802:	f000 f85b 	bl	80018bc <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <sd_read_array_double+0x88>)
 8001808:	f010 fb3e 	bl	8011e88 <f_close>

	return ret;
 800180c:	7d7b      	ldrb	r3, [r7, #21]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08017d90 	.word	0x08017d90
 800181c:	2003d6e0 	.word	0x2003d6e0
 8001820:	2003d770 	.word	0x2003d770

08001824 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800182e:	2201      	movs	r2, #1
 8001830:	4908      	ldr	r1, [pc, #32]	; (8001854 <sd_mount+0x30>)
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <sd_mount+0x34>)
 8001834:	f00f fda0 	bl	8011378 <f_mount>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <sd_mount+0x20>
 800183e:	2301      	movs	r3, #1
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e001      	b.n	8001848 <sd_mount+0x24>
	else ret = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001848:	79fb      	ldrb	r3, [r7, #7]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	08017da0 	.word	0x08017da0
 8001858:	2003c5a0 	.word	0x2003c5a0

0800185c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <create_path+0x24>)
 800186a:	f012 ff81 	bl	8014770 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <create_path+0x28>)
 8001872:	f012 ff7d 	bl	8014770 <strcpy>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2003d5e0 	.word	0x2003d5e0
 8001884:	2003c4a0 	.word	0x2003c4a0

08001888 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <fopen_folder_and_file+0x24>)
 800188e:	f010 fe55 	bl	801253c <f_mkdir>

	f_chdir(dirpath);
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <fopen_folder_and_file+0x24>)
 8001894:	f010 fb22 	bl	8011edc <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001898:	2213      	movs	r2, #19
 800189a:	4905      	ldr	r1, [pc, #20]	; (80018b0 <fopen_folder_and_file+0x28>)
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <fopen_folder_and_file+0x2c>)
 800189e:	f00f fdb1 	bl	8011404 <f_open>

	f_chdir("..");
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <fopen_folder_and_file+0x30>)
 80018a4:	f010 fb1a 	bl	8011edc <f_chdir>


}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2003d5e0 	.word	0x2003d5e0
 80018b0:	2003c4a0 	.word	0x2003c4a0
 80018b4:	2003d770 	.word	0x2003d770
 80018b8:	08017d94 	.word	0x08017d94

080018bc <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e007      	b.n	80018d8 <bufclear+0x1c>
		buffer[i] = '\0';
 80018c8:	4a08      	ldr	r2, [pc, #32]	; (80018ec <bufclear+0x30>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	ddf4      	ble.n	80018c8 <bufclear+0xc>
	}
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	2003d6e0 	.word	0x2003d6e0

080018f0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001900:	b2db      	uxtb	r3, r3
 8001902:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190a:	480e      	ldr	r0, [pc, #56]	; (8001944 <read_byte+0x54>)
 800190c:	f007 fd78 	bl	8009400 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001910:	f107 010f 	add.w	r1, r7, #15
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2201      	movs	r2, #1
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <read_byte+0x58>)
 800191a:	f00a ff21 	bl	800c760 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800191e:	f107 010e 	add.w	r1, r7, #14
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	2201      	movs	r2, #1
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <read_byte+0x58>)
 8001928:	f00b f84e 	bl	800c9c8 <HAL_SPI_Receive>
	CS_SET;
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <read_byte+0x54>)
 8001934:	f007 fd64 	bl	8009400 <HAL_GPIO_WritePin>

	return val;
 8001938:	7bbb      	ldrb	r3, [r7, #14]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020400 	.word	0x40020400
 8001948:	2003e80c 	.word	0x2003e80c

0800194c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001962:	b2db      	uxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <write_byte+0x54>)
 800196e:	f007 fd47 	bl	8009400 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001972:	f107 010f 	add.w	r1, r7, #15
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	2201      	movs	r2, #1
 800197a:	480a      	ldr	r0, [pc, #40]	; (80019a4 <write_byte+0x58>)
 800197c:	f00a fef0 	bl	800c760 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001980:	1db9      	adds	r1, r7, #6
 8001982:	2364      	movs	r3, #100	; 0x64
 8001984:	2201      	movs	r2, #1
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <write_byte+0x58>)
 8001988:	f00a feea 	bl	800c760 <HAL_SPI_Transmit>
	CS_SET;
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <write_byte+0x54>)
 8001994:	f007 fd34 	bl	8009400 <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020400 	.word	0x40020400
 80019a4:	2003e80c 	.word	0x2003e80c

080019a8 <IMU_init>:

uint16_t IMU_init() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff ff9c 	bl	80018f0 <read_byte>
 80019b8:	4603      	mov	r3, r0
 80019ba:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019bc:	797b      	ldrb	r3, [r7, #5]
 80019be:	2be0      	cmp	r3, #224	; 0xe0
 80019c0:	d119      	bne.n	80019f6 <IMU_init+0x4e>
		ret = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019c6:	2101      	movs	r1, #1
 80019c8:	2006      	movs	r0, #6
 80019ca:	f7ff ffbf 	bl	800194c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019ce:	2110      	movs	r1, #16
 80019d0:	2003      	movs	r0, #3
 80019d2:	f7ff ffbb 	bl	800194c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019d6:	2120      	movs	r1, #32
 80019d8:	207f      	movs	r0, #127	; 0x7f
 80019da:	f7ff ffb7 	bl	800194c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019de:	2106      	movs	r1, #6
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff ffb3 	bl	800194c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019e6:	2106      	movs	r1, #6
 80019e8:	2014      	movs	r0, #20
 80019ea:	f7ff ffaf 	bl	800194c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019ee:	2100      	movs	r1, #0
 80019f0:	207f      	movs	r0, #127	; 0x7f
 80019f2:	f7ff ffab 	bl	800194c <write_byte>
	}
	return ret;
 80019f6:	88fb      	ldrh	r3, [r7, #6]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <read_gyro_data>:

void read_gyro_data() {
 8001a00:	b598      	push	{r3, r4, r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a04:	2033      	movs	r0, #51	; 0x33
 8001a06:	f7ff ff73 	bl	80018f0 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2034      	movs	r0, #52	; 0x34
 8001a12:	f7ff ff6d 	bl	80018f0 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <read_gyro_data+0x64>)
 8001a20:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a22:	2035      	movs	r0, #53	; 0x35
 8001a24:	f7ff ff64 	bl	80018f0 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21c      	sxth	r4, r3
 8001a2e:	2036      	movs	r0, #54	; 0x36
 8001a30:	f7ff ff5e 	bl	80018f0 <read_byte>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4323      	orrs	r3, r4
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <read_gyro_data+0x68>)
 8001a3e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a40:	2037      	movs	r0, #55	; 0x37
 8001a42:	f7ff ff55 	bl	80018f0 <read_byte>
 8001a46:	4603      	mov	r3, r0
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b21c      	sxth	r4, r3
 8001a4c:	2038      	movs	r0, #56	; 0x38
 8001a4e:	f7ff ff4f 	bl	80018f0 <read_byte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4323      	orrs	r3, r4
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <read_gyro_data+0x6c>)
 8001a5c:	801a      	strh	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	bd98      	pop	{r3, r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2003e7a8 	.word	0x2003e7a8
 8001a68:	2003e7a6 	.word	0x2003e7a6
 8001a6c:	2003e7a0 	.word	0x2003e7a0

08001a70 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	805a      	strh	r2, [r3, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	809a      	strh	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	80da      	strh	r2, [r3, #6]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	811a      	strh	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	815a      	strh	r2, [r3, #10]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
{

}
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001abc:	f7ff ff74 	bl	80019a8 <IMU_init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ac4:	f7ff faec 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff faf8 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <_ZN3IMU4initEv+0x44>)
 8001ad2:	f7ff fb1f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff faf1 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <_ZN3IMU4initEv+0x48>)
 8001ae4:	f7ff fb16 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aec:	f006 f9f2 	bl	8007ed4 <HAL_Delay>

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08017da4 	.word	0x08017da4
 8001afc:	08017db0 	.word	0x08017db0

08001b00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b08:	f7ff ff7a 	bl	8001a00 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd0f 	bl	8000554 <__aeabi_i2d>
 8001b36:	a316      	add	r3, pc, #88	; (adr r3, 8001b90 <_ZN3IMU12updateValuesEv+0x90>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd74 	bl	8000628 <__aeabi_dmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	4625      	mov	r5, r4
 8001b46:	461c      	mov	r4, r3
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <_ZN3IMU12updateValuesEv+0xac>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd00 	bl	8000554 <__aeabi_i2d>
 8001b54:	a310      	add	r3, pc, #64	; (adr r3, 8001b98 <_ZN3IMU12updateValuesEv+0x98>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd65 	bl	8000628 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fba9 	bl	80002bc <__adddf3>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4621      	mov	r1, r4
 8001b72:	f7ff f809 	bl	8000b88 <__aeabi_d2iz>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <_ZN3IMU12updateValuesEv+0xac>)
 8001b86:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b90:	eb851eb8 	.word	0xeb851eb8
 8001b94:	3f9eb851 	.word	0x3f9eb851
 8001b98:	70a3d70a 	.word	0x70a3d70a
 8001b9c:	3fef0a3d 	.word	0x3fef0a3d
 8001ba0:	2003e7a8 	.word	0x2003e7a8
 8001ba4:	2003e7a6 	.word	0x2003e7a6
 8001ba8:	2003e7a0 	.word	0x2003e7a0
 8001bac:	20000210 	.word	0x20000210

08001bb0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7fe fccf 	bl	8000578 <__aeabi_f2d>
 8001bda:	a316      	add	r3, pc, #88	; (adr r3, 8001c34 <_ZN3IMU8getOmegaEv+0x84>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fe4c 	bl	800087c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4614      	mov	r4, r2
 8001bea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bee:	a313      	add	r3, pc, #76	; (adr r3, 8001c3c <_ZN3IMU8getOmegaEv+0x8c>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fd16 	bl	8000628 <__aeabi_dmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <_ZN3IMU8getOmegaEv+0x80>)
 8001c0a:	f7fe fe37 	bl	800087c <__aeabi_ddiv>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	4618      	mov	r0, r3
 8001c14:	4621      	mov	r1, r4
 8001c16:	f7fe ffff 	bl	8000c18 <__aeabi_d2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	ee07 3a90 	vmov	s15, r3
}
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	40668000 	.word	0x40668000
 8001c34:	66666666 	.word	0x66666666
 8001c38:	40306666 	.word	0x40306666
 8001c3c:	54411744 	.word	0x54411744
 8001c40:	400921fb 	.word	0x400921fb

08001c44 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	b08b      	sub	sp, #44	; 0x2c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c4c:	466b      	mov	r3, sp
 8001c4e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c54:	f006 f93e 	bl	8007ed4 <HAL_Delay>
	lcd_clear();
 8001c58:	f7ff fa22 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fa2e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c64:	4840      	ldr	r0, [pc, #256]	; (8001d68 <_ZN3IMU11calibrationEv+0x124>)
 8001c66:	f7ff fa55 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fa27 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c72:	483e      	ldr	r0, [pc, #248]	; (8001d6c <_ZN3IMU11calibrationEv+0x128>)
 8001c74:	f7ff fa4e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c7c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c82:	1e5d      	subs	r5, r3, #1
 8001c84:	61bd      	str	r5, [r7, #24]
 8001c86:	462b      	mov	r3, r5
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	0154      	lsls	r4, r2, #5
 8001c9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c9e:	014b      	lsls	r3, r1, #5
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	0154      	lsls	r4, r2, #5
 8001cb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cb8:	014b      	lsls	r3, r1, #5
 8001cba:	462b      	mov	r3, r5
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001ccc:	466b      	mov	r3, sp
 8001cce:	3303      	adds	r3, #3
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	83fb      	strh	r3, [r7, #30]
 8001cda:	8bfa      	ldrh	r2, [r7, #30]
 8001cdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	da13      	bge.n	8001d0c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	ee07 2a90 	vmov	s15, r2
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f006 f8e8 	bl	8007ed4 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001d04:	8bfb      	ldrh	r3, [r7, #30]
 8001d06:	3301      	adds	r3, #1
 8001d08:	83fb      	strh	r3, [r7, #30]
 8001d0a:	e7e6      	b.n	8001cda <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	462b      	mov	r3, r5
 8001d14:	3301      	adds	r3, #1
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d00e      	beq.n	8001d42 <_ZN3IMU11calibrationEv+0xfe>
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e7ec      	b.n	8001d1c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d5c:	46b5      	mov	sp, r6
}
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08017db4 	.word	0x08017db4
 8001d6c:	08017dc0 	.word	0x08017dc0

08001d70 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	b299      	uxth	r1, r3
 8001d84:	1dfa      	adds	r2, r7, #7
 8001d86:	2364      	movs	r3, #100	; 0x64
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <INA260_read+0x50>)
 8001d8e:	f007 fc89 	bl	80096a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	b299      	uxth	r1, r3
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <INA260_read+0x50>)
 8001da2:	f007 fd7d 	bl	80098a0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001da6:	7b3b      	ldrb	r3, [r7, #12]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	7b7b      	ldrb	r3, [r7, #13]
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001db6:	89fb      	ldrh	r3, [r7, #14]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2003e9c0 	.word	0x2003e9c0

08001dc4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71bb      	strb	r3, [r7, #6]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	717b      	strb	r3, [r7, #5]
 8001dde:	4613      	mov	r3, r2
 8001de0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	733b      	strb	r3, [r7, #12]
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	737b      	strb	r3, [r7, #13]
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <INA260_write+0x48>)
 8001dfe:	f007 fc51 	bl	80096a4 <HAL_I2C_Master_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2003e9c0 	.word	0x2003e9c0

08001e10 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	71bb      	strb	r3, [r7, #6]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	79f9      	ldrb	r1, [r7, #7]
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff ffcb 	bl	8001dc4 <INA260_write>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	461a      	mov	r2, r3
 8001e44:	21df      	movs	r1, #223	; 0xdf
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff ffe2 	bl	8001e10 <setConfig>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
{

}
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e7c:	482a      	ldr	r0, [pc, #168]	; (8001f28 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e7e:	f007 faa7 	bl	80093d0 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <_ZN8JoyStick8getValueEv+0x2e>
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4823      	ldr	r0, [pc, #140]	; (8001f2c <_ZN8JoyStick8getValueEv+0xc0>)
 8001e9e:	f007 fa97 	bl	80093d0 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <_ZN8JoyStick8getValueEv+0x4e>
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebe:	481a      	ldr	r0, [pc, #104]	; (8001f28 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec0:	f007 fa86 	bl	80093d0 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <_ZN8JoyStick8getValueEv+0x70>
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001edc:	2104      	movs	r1, #4
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ee0:	f007 fa76 	bl	80093d0 <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <_ZN8JoyStick8getValueEv+0x90>
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	480a      	ldr	r0, [pc, #40]	; (8001f28 <_ZN8JoyStick8getValueEv+0xbc>)
 8001f00:	f007 fa66 	bl	80093d0 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <_ZN8JoyStick8getValueEv+0xb0>
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40020400 	.word	0x40020400

08001f34 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b52      	cmp	r3, #82	; 0x52
 8001f44:	d112      	bne.n	8001f6c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	4856      	ldr	r0, [pc, #344]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 fa57 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f58:	4853      	ldr	r0, [pc, #332]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 fa51 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	4850      	ldr	r0, [pc, #320]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f007 fa4b 	bl	8009400 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f6a:	e098      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b47      	cmp	r3, #71	; 0x47
 8001f70:	d112      	bne.n	8001f98 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	484b      	ldr	r0, [pc, #300]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 fa41 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f84:	4848      	ldr	r0, [pc, #288]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 fa3b 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f90:	4845      	ldr	r0, [pc, #276]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f007 fa35 	bl	8009400 <HAL_GPIO_WritePin>
}
 8001f96:	e082      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b42      	cmp	r3, #66	; 0x42
 8001f9c:	d112      	bne.n	8001fc4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	4840      	ldr	r0, [pc, #256]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 fa2b 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	483d      	ldr	r0, [pc, #244]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 fa25 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbc:	483a      	ldr	r0, [pc, #232]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f007 fa1f 	bl	8009400 <HAL_GPIO_WritePin>
}
 8001fc2:	e06c      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b43      	cmp	r3, #67	; 0x43
 8001fc8:	d112      	bne.n	8001ff0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	4835      	ldr	r0, [pc, #212]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 fa15 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	4832      	ldr	r0, [pc, #200]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 fa0f 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	482f      	ldr	r0, [pc, #188]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f007 fa09 	bl	8009400 <HAL_GPIO_WritePin>
}
 8001fee:	e056      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b4d      	cmp	r3, #77	; 0x4d
 8001ff4:	d112      	bne.n	800201c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffc:	482a      	ldr	r0, [pc, #168]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 f9ff 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002008:	4827      	ldr	r0, [pc, #156]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 f9f9 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	4824      	ldr	r0, [pc, #144]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002016:	f007 f9f3 	bl	8009400 <HAL_GPIO_WritePin>
}
 800201a:	e040      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b59      	cmp	r3, #89	; 0x59
 8002020:	d112      	bne.n	8002048 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	481f      	ldr	r0, [pc, #124]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 f9e9 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	481c      	ldr	r0, [pc, #112]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 f9e3 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	4819      	ldr	r0, [pc, #100]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002042:	f007 f9dd 	bl	8009400 <HAL_GPIO_WritePin>
}
 8002046:	e02a      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2b57      	cmp	r3, #87	; 0x57
 800204c:	d112      	bne.n	8002074 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002054:	4814      	ldr	r0, [pc, #80]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 f9d3 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002060:	4811      	ldr	r0, [pc, #68]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 f9cd 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206c:	480e      	ldr	r0, [pc, #56]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 800206e:	f007 f9c7 	bl	8009400 <HAL_GPIO_WritePin>
}
 8002072:	e014      	b.n	800209e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	2b7e      	cmp	r3, #126	; 0x7e
 8002078:	d111      	bne.n	800209e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 8002082:	f007 f9bd 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 800208e:	f007 f9b7 	bl	8009400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <_ZN3LED9fullColorEc+0x174>)
 800209a:	f007 f9b1 	bl	8009400 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020000 	.word	0x40020000

080020ac <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	4613      	mov	r3, r2
 80020ba:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ca:	4813      	ldr	r0, [pc, #76]	; (8002118 <_ZN3LED2LREaa+0x6c>)
 80020cc:	f007 f998 	bl	8009400 <HAL_GPIO_WritePin>
 80020d0:	e009      	b.n	80020e6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <_ZN3LED2LREaa+0x6c>)
 80020e2:	f007 f98d 	bl	8009400 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <_ZN3LED2LREaa+0x6c>)
 80020f6:	f007 f983 	bl	8009400 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020fa:	e009      	b.n	8002110 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <_ZN3LED2LREaa+0x6c>)
 800210c:	f007 f978 	bl	8009400 <HAL_GPIO_WritePin>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40020000 	.word	0x40020000

0800211c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800211c:	b580      	push	{r7, lr}
 800211e:	b092      	sub	sp, #72	; 0x48
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe92 	bl	8001e54 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	331c      	adds	r3, #28
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	429a      	cmp	r2, r3
 8002144:	d008      	beq.n	8002158 <_ZN10LineSensorC1Ev+0x3c>
 8002146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2200      	movs	r2, #0
 800214e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002152:	3302      	adds	r3, #2
 8002154:	647b      	str	r3, [r7, #68]	; 0x44
 8002156:	e7f2      	b.n	800213e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	3338      	adds	r3, #56	; 0x38
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	429a      	cmp	r2, r3
 8002170:	d009      	beq.n	8002186 <_ZN10LineSensorC1Ev+0x6a>
 8002172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002174:	623b      	str	r3, [r7, #32]
		s = 0;
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800217e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002180:	3304      	adds	r3, #4
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
 8002184:	e7f1      	b.n	800216a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3338      	adds	r3, #56	; 0x38
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	429a      	cmp	r2, r3
 800219e:	d009      	beq.n	80021b4 <_ZN10LineSensorC1Ev+0x98>
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	617b      	str	r3, [r7, #20]
		m = 0;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	3304      	adds	r3, #4
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b2:	e7f1      	b.n	8002198 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3338      	adds	r3, #56	; 0x38
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d009      	beq.n	80021e2 <_ZN10LineSensorC1Ev+0xc6>
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021d8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	3304      	adds	r3, #4
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e0:	e7f1      	b.n	80021c6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	3748      	adds	r7, #72	; 0x48
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	220e      	movs	r2, #14
 80021f8:	4619      	mov	r1, r3
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021fc:	f005 fed0 	bl	8007fa0 <HAL_ADC_Start_DMA>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2003e8e4 	.word	0x2003e8e4

0800220c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b0d      	cmp	r3, #13
 800221c:	dc2f      	bgt.n	800227e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3392      	adds	r3, #146	; 0x92
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	33a0      	adds	r3, #160	; 0xa0
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	1a5b      	subs	r3, r3, r1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	440b      	add	r3, r1
 800226a:	3306      	adds	r3, #6
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e7cc      	b.n	8002218 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002288:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b09      	cmp	r3, #9
 8002290:	d902      	bls.n	8002298 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]


}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	2000021c 	.word	0x2000021c

080022a8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022ba:	2b0d      	cmp	r3, #13
 80022bc:	f200 80b8 	bhi.w	8002430 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d81c      	bhi.n	8002308 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022d2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022d6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4423      	add	r3, r4
 80022e6:	3306      	adds	r3, #6
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4403      	add	r3, r0
 80022ec:	3304      	adds	r3, #4
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	008b      	lsls	r3, r1, #2
 80022f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022f6:	440b      	add	r3, r1
 80022f8:	3b30      	subs	r3, #48	; 0x30
 80022fa:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002300:	3301      	adds	r3, #1
 8002302:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002306:	e7de      	b.n	80022c6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800230e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002312:	2b09      	cmp	r3, #9
 8002314:	d84d      	bhi.n	80023b2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002316:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800231a:	3301      	adds	r3, #1
 800231c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002320:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002324:	2b09      	cmp	r3, #9
 8002326:	d83e      	bhi.n	80023a6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002328:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002332:	4413      	add	r3, r2
 8002334:	3b30      	subs	r3, #48	; 0x30
 8002336:	ed93 7a00 	vldr	s14, [r3]
 800233a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002344:	4413      	add	r3, r2
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d521      	bpl.n	800239a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002356:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002360:	4413      	add	r3, r2
 8002362:	3b30      	subs	r3, #48	; 0x30
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002368:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800236c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002376:	440a      	add	r2, r1
 8002378:	3a30      	subs	r2, #48	; 0x30
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002382:	440b      	add	r3, r1
 8002384:	3b30      	subs	r3, #48	; 0x30
 8002386:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002388:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002392:	4413      	add	r3, r2
 8002394:	3b30      	subs	r3, #48	; 0x30
 8002396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002398:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800239a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80023a4:	e7bc      	b.n	8002320 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80023a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023aa:	3301      	adds	r3, #1
 80023ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023b0:	e7ad      	b.n	800230e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8df 	bl	8000578 <__aeabi_f2d>
 80023ba:	a32a      	add	r3, pc, #168	; (adr r3, 8002464 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f932 	bl	8000628 <__aeabi_dmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	4625      	mov	r5, r4
 80023ca:	461c      	mov	r4, r3
 80023cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8cd 	bl	8000578 <__aeabi_f2d>
 80023de:	a31c      	add	r3, pc, #112	; (adr r3, 8002450 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f920 	bl	8000628 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd ff64 	bl	80002bc <__adddf3>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fc08 	bl	8000c18 <__aeabi_d2f>
 8002408:	4601      	mov	r1, r0
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	490e      	ldr	r1, [pc, #56]	; (8002458 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002428:	3301      	adds	r3, #1
 800242a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800242e:	e742      	b.n	80022b6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002438:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	3738      	adds	r7, #56	; 0x38
 8002448:	46bd      	mov	sp, r7
 800244a:	bdb0      	pop	{r4, r5, r7, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	66666666 	.word	0x66666666
 8002454:	3fee6666 	.word	0x3fee6666
 8002458:	20000220 	.word	0x20000220
 800245c:	20000214 	.word	0x20000214
 8002460:	20000218 	.word	0x20000218
 8002464:	9999999a 	.word	0x9999999a
 8002468:	3fa99999 	.word	0x3fa99999

0800246c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0a0      	sub	sp, #128	; 0x80
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	f005 fd2d 	bl	8007ed4 <HAL_Delay>

	lcd_clear();
 800247a:	f7fe fe11 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800247e:	2100      	movs	r1, #0
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fe1d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002486:	4886      	ldr	r0, [pc, #536]	; (80026a0 <_ZN10LineSensor11calibrationEv+0x234>)
 8002488:	f7fe fe44 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800248c:	2101      	movs	r1, #1
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fe16 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002494:	4883      	ldr	r0, [pc, #524]	; (80026a4 <_ZN10LineSensor11calibrationEv+0x238>)
 8002496:	f7fe fe3d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800249a:	2300      	movs	r3, #0
 800249c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024a0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024a4:	2b0d      	cmp	r3, #13
 80024a6:	d823      	bhi.n	80024f0 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80024a8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	32b0      	adds	r2, #176	; 0xb0
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	440a      	add	r2, r1
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024c0:	440b      	add	r3, r1
 80024c2:	3b40      	subs	r3, #64	; 0x40
 80024c4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80024c6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80024ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	32b0      	adds	r2, #176	; 0xb0
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	440a      	add	r2, r1
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024de:	440b      	add	r3, r1
 80024e0:	3b78      	subs	r3, #120	; 0x78
 80024e2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024e8:	3301      	adds	r3, #1
 80024ea:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024ee:	e7d7      	b.n	80024a0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fcb8 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b02      	cmp	r3, #2
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d079      	beq.n	8002600 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800250c:	2300      	movs	r3, #0
 800250e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	2b0d      	cmp	r3, #13
 8002518:	d850      	bhi.n	80025bc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800251a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002524:	4413      	add	r3, r2
 8002526:	3b40      	subs	r3, #64	; 0x40
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	33b0      	adds	r3, #176	; 0xb0
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	d50f      	bpl.n	8002566 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002546:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800254a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	32b0      	adds	r2, #176	; 0xb0
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	440a      	add	r2, r1
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800255e:	440b      	add	r3, r1
 8002560:	3b40      	subs	r3, #64	; 0x40
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e024      	b.n	80025b0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002566:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002570:	4413      	add	r3, r2
 8002572:	3b78      	subs	r3, #120	; 0x78
 8002574:	ed93 7a00 	vldr	s14, [r3]
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	33b0      	adds	r3, #176	; 0xb0
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	dd0e      	ble.n	80025b0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002592:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002596:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	32b0      	adds	r2, #176	; 0xb0
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	440a      	add	r2, r1
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025aa:	440b      	add	r3, r1
 80025ac:	3b78      	subs	r3, #120	; 0x78
 80025ae:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80025ba:	e7aa      	b.n	8002512 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 ffb6 	bl	8004534 <_ZN12RotarySwitch8getValueEv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025de:	2201      	movs	r2, #1
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fd61 	bl	80020ac <_ZN3LED2LREaa>
 80025ea:	e781      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fd57 	bl	80020ac <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025fe:	e777      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002600:	2300      	movs	r3, #0
 8002602:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002606:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800260a:	2b0d      	cmp	r3, #13
 800260c:	d826      	bhi.n	800265c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800260e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002618:	4413      	add	r3, r2
 800261a:	3b40      	subs	r3, #64	; 0x40
 800261c:	ed93 7a00 	vldr	s14, [r3]
 8002620:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800262a:	4413      	add	r3, r2
 800262c:	3b78      	subs	r3, #120	; 0x78
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002636:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800263a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80026a8 <_ZN10LineSensor11calibrationEv+0x23c>
 800263e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	3392      	adds	r3, #146	; 0x92
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002650:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002654:	3301      	adds	r3, #1
 8002656:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800265a:	e7d4      	b.n	8002606 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800265c:	2300      	movs	r3, #0
 800265e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002662:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002666:	2b0d      	cmp	r3, #13
 8002668:	d815      	bhi.n	8002696 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800266a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800266e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002678:	440a      	add	r2, r1
 800267a:	3a78      	subs	r2, #120	; 0x78
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	33a0      	adds	r3, #160	; 0xa0
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3304      	adds	r3, #4
 8002688:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800268a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800268e:	3301      	adds	r3, #1
 8002690:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002694:	e7e5      	b.n	8002662 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002696:	bf00      	nop
 8002698:	3780      	adds	r7, #128	; 0x80
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	08017dcc 	.word	0x08017dcc
 80026a4:	08017dd8 	.word	0x08017dd8
 80026a8:	447a0000 	.word	0x447a0000

080026ac <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3338      	adds	r3, #56	; 0x38
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d012      	beq.n	80026f8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800274c <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	db02      	blt.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026ea:	8bfb      	ldrh	r3, [r7, #30]
 80026ec:	3301      	adds	r3, #1
 80026ee:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	3304      	adds	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e7e8      	b.n	80026ca <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026f8:	8bfb      	ldrh	r3, [r7, #30]
 80026fa:	2b0d      	cmp	r3, #13
 80026fc:	d906      	bls.n	800270c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	e002      	b.n	8002712 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	2b31      	cmp	r3, #49	; 0x31
 8002718:	d903      	bls.n	8002722 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e002      	b.n	8002728 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002730:	4293      	cmp	r3, r2
 8002732:	d903      	bls.n	800273c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002736:	f242 7210 	movw	r2, #10000	; 0x2710
 800273a:	801a      	strh	r2, [r3, #0]

	return flag;
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800273e:	781b      	ldrb	r3, [r3, #0]

}
 8002740:	4618      	mov	r0, r3
 8002742:	3724      	adds	r7, #36	; 0x24
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	442f0000 	.word	0x442f0000
 8002750:	20000258 	.word	0x20000258
 8002754:	2000025a 	.word	0x2000025a

08002758 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002762:	edd7 7a01 	vldr	s15, [r7, #4]
 8002766:	eef0 7ae7 	vabs.f32	s15, s15
 800276a:	eeb0 0a67 	vmov.f32	s0, s15
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	635a      	str	r2, [r3, #52]	; 0x34
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	679a      	str	r2, [r3, #120]	; 0x78
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027f6:	3348      	adds	r3, #72	; 0x48
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002804:	330c      	adds	r3, #12
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002810:	330e      	adds	r3, #14
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800281c:	3310      	adds	r3, #16
 800281e:	2200      	movs	r2, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3344      	adds	r3, #68	; 0x44
 800282a:	2200      	movs	r2, #0
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3346      	adds	r3, #70	; 0x46
 8002836:	2200      	movs	r2, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3348      	adds	r3, #72	; 0x48
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
{
	motor_ = motor;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002868:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002876:	2300      	movs	r3, #0
 8002878:	82fb      	strh	r3, [r7, #22]
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	f241 726f 	movw	r2, #5999	; 0x176f
 8002880:	4293      	cmp	r3, r2
 8002882:	d80e      	bhi.n	80028a2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x12a>
		velocity_table_[i] = 0;
 8002884:	8afb      	ldrh	r3, [r7, #22]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800288c:	3312      	adds	r3, #18
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800289a:	8afb      	ldrh	r3, [r7, #22]
 800289c:	3301      	adds	r3, #1
 800289e:	82fb      	strh	r3, [r7, #22]
 80028a0:	e7eb      	b.n	800287a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x102>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028a2:	2300      	movs	r3, #0
 80028a4:	82bb      	strh	r3, [r7, #20]
 80028a6:	8abb      	ldrh	r3, [r7, #20]
 80028a8:	2b63      	cmp	r3, #99	; 0x63
 80028aa:	d80e      	bhi.n	80028ca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x152>
		crossline_distance_[i] = 0;
 80028ac:	8abb      	ldrh	r3, [r7, #20]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028b4:	3304      	adds	r3, #4
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	82bb      	strh	r3, [r7, #20]
 80028c8:	e7ed      	b.n	80028a6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x12e>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028ca:	2300      	movs	r3, #0
 80028cc:	827b      	strh	r3, [r7, #18]
 80028ce:	8a7b      	ldrh	r3, [r7, #18]
 80028d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d4:	d20e      	bcs.n	80028f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17c>
		sideline_distance_[i] = 0;
 80028d6:	8a7b      	ldrh	r3, [r7, #18]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028de:	3328      	adds	r3, #40	; 0x28
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028ec:	8a7b      	ldrh	r3, [r7, #18]
 80028ee:	3301      	adds	r3, #1
 80028f0:	827b      	strh	r3, [r7, #18]
 80028f2:	e7ec      	b.n	80028ce <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
}
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	0000      	movs	r0, r0
 8002904:	0000      	movs	r0, r0
	...

08002908 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002970:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800297c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029b4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029bc:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdd9 	bl	8000578 <__aeabi_f2d>
 80029c6:	a318      	add	r3, pc, #96	; (adr r3, 8002a28 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe2c 	bl	8000628 <__aeabi_dmul>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	4625      	mov	r5, r4
 80029d6:	461c      	mov	r4, r3
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdcb 	bl	8000578 <__aeabi_f2d>
 80029e2:	a313      	add	r3, pc, #76	; (adr r3, 8002a30 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fe1e 	bl	8000628 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fc62 	bl	80002bc <__adddf3>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	4618      	mov	r0, r3
 80029fe:	4621      	mov	r1, r4
 8002a00:	f7fe f90a 	bl	8000c18 <__aeabi_d2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a0c:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a12:	6013      	str	r3, [r2, #0]

	return diff;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	ee07 3a90 	vmov	s15, r3

}
 8002a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdb0      	pop	{r4, r5, r7, pc}
 8002a24:	f3af 8000 	nop.w
 8002a28:	47ae147b 	.word	0x47ae147b
 8002a2c:	3fb47ae1 	.word	0x3fb47ae1
 8002a30:	d70a3d71 	.word	0xd70a3d71
 8002a34:	3fed70a3 	.word	0x3fed70a3
 8002a38:	2000025c 	.word	0x2000025c
 8002a3c:	20000280 	.word	0x20000280
 8002a40:	20000260 	.word	0x20000260
 8002a44:	00000000 	.word	0x00000000

08002a48 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff59 	bl	8002908 <_ZN9LineTrace9calcErrorEv>
 8002a56:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a8c:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	ee17 0a90 	vmov	r0, s15
 8002aa2:	f7fd fd69 	bl	8000578 <__aeabi_f2d>
 8002aa6:	a32a      	add	r3, pc, #168	; (adr r3, 8002b50 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fee6 	bl	800087c <__aeabi_ddiv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	f7fe f8ae 	bl	8000c18 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd57 	bl	8000578 <__aeabi_f2d>
 8002aca:	4604      	mov	r4, r0
 8002acc:	460d      	mov	r5, r1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd4a 	bl	8000578 <__aeabi_f2d>
 8002ae4:	a31a      	add	r3, pc, #104	; (adr r3, 8002b50 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd9d 	bl	8000628 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7fd fbe1 	bl	80002bc <__adddf3>
 8002afa:	4603      	mov	r3, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7fe f889 	bl	8000c18 <__aeabi_d2f>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b0a:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b22:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b30:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b34:	eeb0 0a67 	vmov.f32	s0, s15
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f002 f8d1 	bl	8004ce0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	6013      	str	r3, [r2, #0]

}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4c:	f3af 8000 	nop.w
 8002b50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b54:	3f50624d 	.word	0x3f50624d
 8002b58:	20000288 	.word	0x20000288
 8002b5c:	20000284 	.word	0x20000284

08002b60 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fcab 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fb9e 	bl	80042b8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f8c9 	bl	8003d18 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f92e 	bl	8003e04 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c14:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c18:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c1e:	4a42      	ldr	r2, [pc, #264]	; (8002d28 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d040      	beq.n	8002cb4 <_ZN9LineTrace11isCrossLineEv+0xfc>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c36:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002d30 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d50f      	bpl.n	8002c64 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c48:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002d30 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	d506      	bpl.n	8002c64 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	e002      	b.n	8002c6a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d951      	bls.n	8002d16 <_ZN9LineTrace11isCrossLineEv+0x15e>
			flag = true;
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x180>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <_ZN9LineTrace11isCrossLineEv+0xe4>
				storeCrossLineDistance();
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fdb5 	bl	8003804 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002c9a:	e002      	b.n	8002ca2 <_ZN9LineTrace11isCrossLineEv+0xea>
			}
			else{
				correctionTotalDistance();
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fde8 	bl	8003872 <_ZN9LineTrace23correctionTotalDistanceEv>
			}

			led_.LR(-1, 1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff f9fd 	bl	80020ac <_ZN3LED2LREaa>
 8002cb2:	e030      	b.n	8002d16 <_ZN9LineTrace11isCrossLineEv+0x15e>
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002d3c <_ZN9LineTrace11isCrossLineEv+0x184>
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	dd0f      	ble.n	8002ce6 <_ZN9LineTrace11isCrossLineEv+0x12e>
 8002cc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d3c <_ZN9LineTrace11isCrossLineEv+0x184>
 8002cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	dd06      	ble.n	8002ce6 <_ZN9LineTrace11isCrossLineEv+0x12e>
			cnt++;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e002      	b.n	8002cec <_ZN9LineTrace11isCrossLineEv+0x134>
		}
		else{
			cnt = 0;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d910      	bls.n	8002d16 <_ZN9LineTrace11isCrossLineEv+0x15e>
			flag = false;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x180>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	801a      	strh	r2, [r3, #0]
			}
			else{
				correctionTotalDistance();
			}
			*/
			led_.LR(-1, 0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f9cb 	bl	80020ac <_ZN3LED2LREaa>
		}

	}

	return flag;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x180>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000268 	.word	0x20000268
 8002d28:	2000026c 	.word	0x2000026c
 8002d2c:	2000028f 	.word	0x2000028f
 8002d30:	44160000 	.word	0x44160000
 8002d34:	2000028c 	.word	0x2000028c
 8002d38:	2000028e 	.word	0x2000028e
 8002d3c:	43fa0000 	.word	0x43fa0000

08002d40 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d52:	3310      	adds	r3, #16
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d11b      	bne.n	8002d94 <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.4;
 8002d5c:	edd7 7a00 	vldr	s15, [r7]
 8002d60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002df8 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8002d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	d502      	bpl.n	8002d74 <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <_ZN9LineTrace15radius2VelocityEf+0xbc>)
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e036      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else if(radius < 500) velocity = 1.4;
 8002d74:	edd7 7a00 	vldr	s15, [r7]
 8002d78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002e00 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d84:	d502      	bpl.n	8002d8c <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <_ZN9LineTrace15radius2VelocityEf+0xbc>)
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e02a      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else velocity = max_velocity_;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e026      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d11c      	bne.n	8002dde <_ZN9LineTrace15radius2VelocityEf+0x9e>
		if(radius < 130) velocity = 1.3;
 8002da4:	edd7 7a00 	vldr	s15, [r7]
 8002da8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002df8 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8002dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d502      	bpl.n	8002dbc <_ZN9LineTrace15radius2VelocityEf+0x7c>
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e012      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else if(radius < 500) velocity = 1.3;
 8002dbc:	edd7 7a00 	vldr	s15, [r7]
 8002dc0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002e00 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	d502      	bpl.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x94>
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e006      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else velocity = max_velocity2_;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e001      	b.n	8002de2 <_ZN9LineTrace15radius2VelocityEf+0xa2>
	}
	else velocity = 1.3;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002de0:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	ee07 3a90 	vmov	s15, r3
}
 8002de8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	43020000 	.word	0x43020000
 8002dfc:	3fb33333 	.word	0x3fb33333
 8002e00:	43fa0000 	.word	0x43fa0000
 8002e04:	3fa66666 	.word	0x3fa66666

08002e08 <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b08b      	sub	sp, #44	; 0x2c
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 feda 	bl	8003bce <_ZN6Logger23getDistanceArrayPointerEv>
 8002e1a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fee0 	bl	8003be6 <_ZN6Logger20getThetaArrayPointerEv>
 8002e26:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e28:	2300      	movs	r3, #0
 8002e2a:	837b      	strh	r3, [r7, #26]
 8002e2c:	8b7b      	ldrh	r3, [r7, #26]
 8002e2e:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d84b      	bhi.n	8002ece <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e36:	8b7b      	ldrh	r3, [r7, #26]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e42:	8b7b      	ldrh	r3, [r7, #26]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d101      	bne.n	8002e60 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002e5e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e60:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e6c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e70:	f7ff fc72 	bl	8002758 <_ZSt3absf>
 8002e74:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e7c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002ef4 <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e88:	db01      	blt.n	8002e8e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002e8c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002e8e:	8b7c      	ldrh	r4, [r7, #26]
 8002e90:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff53 	bl	8002d40 <_ZN9LineTrace15radius2VelocityEf>
 8002e9a:	eef0 7a40 	vmov.f32	s15, s0
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002ea4:	3312      	adds	r3, #18
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002eb0:	8b7b      	ldrh	r3, [r7, #26]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	8b7b      	ldrh	r3, [r7, #26]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	3322      	adds	r3, #34	; 0x22
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ec6:	8b7b      	ldrh	r3, [r7, #26]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	837b      	strh	r3, [r7, #26]
 8002ecc:	e7ae      	b.n	8002e2c <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ed4:	334c      	adds	r3, #76	; 0x4c
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	f241 7270 	movw	r2, #6000	; 0x1770
 8002ede:	4907      	ldr	r1, [pc, #28]	; (8002efc <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002ee0:	4807      	ldr	r0, [pc, #28]	; (8002f00 <_ZN9LineTrace20createVelocityTabeleEv+0xf8>)
 8002ee2:	f7fe fbad 	bl	8001640 <sd_write_array_float>

}
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	3727c5ac 	.word	0x3727c5ac
 8002ef4:	459c4000 	.word	0x459c4000
 8002ef8:	459c4000 	.word	0x459c4000
 8002efc:	08017e1c 	.word	0x08017e1c
 8002f00:	08017e2c 	.word	0x08017e2c

08002f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:
void LineTrace::createVelocityTabeleFromSD()
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b08b      	sub	sp, #44	; 0x2c
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69d8      	ldr	r0, [r3, #28]
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf4>)
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>)
 8002f14:	493a      	ldr	r1, [pc, #232]	; (8003000 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfc>)
 8002f16:	f000 fee2 	bl	8003cde <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fe55 	bl	8003bce <_ZN6Logger23getDistanceArrayPointerEv>
 8002f24:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fe5b 	bl	8003be6 <_ZN6Logger20getThetaArrayPointerEv>
 8002f30:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f32:	2300      	movs	r3, #0
 8002f34:	837b      	strh	r3, [r7, #26]
 8002f36:	8b7b      	ldrh	r3, [r7, #26]
 8002f38:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d84b      	bhi.n	8002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xd4>
		temp_distance = p_distance[i];
 8002f40:	8b7b      	ldrh	r3, [r7, #26]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f4c:	8b7b      	ldrh	r3, [r7, #26]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d101      	bne.n	8002f6a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x66>
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x100>)
 8002f68:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f76:	eeb0 0a66 	vmov.f32	s0, s13
 8002f7a:	f7ff fbed 	bl	8002758 <_ZSt3absf>
 8002f7e:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f86:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003008 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x104>
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	db01      	blt.n	8002f98 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x94>
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x108>)
 8002f96:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f98:	8b7c      	ldrh	r4, [r7, #26]
 8002f9a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fece 	bl	8002d40 <_ZN9LineTrace15radius2VelocityEf>
 8002fa4:	eef0 7a40 	vmov.f32	s15, s0
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fae:	3312      	adds	r3, #18
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	441a      	add	r2, r3
 8002fc2:	8b7b      	ldrh	r3, [r7, #26]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	3322      	adds	r3, #34	; 0x22
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fd0:	8b7b      	ldrh	r3, [r7, #26]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	837b      	strh	r3, [r7, #26]
 8002fd6:	e7ae      	b.n	8002f36 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x32>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002fde:	334c      	adds	r3, #76	; 0x4c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9200      	str	r2, [sp, #0]
 8002fe4:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fe8:	4909      	ldr	r1, [pc, #36]	; (8003010 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x10c>)
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfc>)
 8002fec:	f7fe fb28 	bl	8001640 <sd_write_array_float>

}
 8002ff0:	bf00      	nop
 8002ff2:	3724      	adds	r7, #36	; 0x24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	08017e38 	.word	0x08017e38
 8002ffc:	08017e44 	.word	0x08017e44
 8003000:	08017e2c 	.word	0x08017e2c
 8003004:	3727c5ac 	.word	0x3727c5ac
 8003008:	459c4000 	.word	0x459c4000
 800300c:	459c4000 	.word	0x459c4000
 8003010:	08017e1c 	.word	0x08017e1c

08003014 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003022:	330c      	adds	r3, #12
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8087 	beq.w	800313a <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fa2b 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003036:	eeb0 7a40 	vmov.f32	s14, s0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003040:	3348      	adds	r3, #72	; 0x48
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	bfac      	ite	ge
 8003050:	2301      	movge	r3, #1
 8003052:	2300      	movlt	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d025      	beq.n	80030a6 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003060:	3348      	adds	r3, #72	; 0x48
 8003062:	ed93 7a00 	vldr	s14, [r3]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800306c:	330e      	adds	r3, #14
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	3322      	adds	r3, #34	; 0x22
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003086:	3348      	adds	r3, #72	; 0x48
 8003088:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003092:	330e      	adds	r3, #14
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030a0:	330e      	adds	r3, #14
 80030a2:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80030a4:	e7c2      	b.n	800302c <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030ac:	330e      	adds	r3, #14
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f241 726f 	movw	r2, #5999	; 0x176f
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d906      	bls.n	80030c6 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030be:	330e      	adds	r3, #14
 80030c0:	f241 726f 	movw	r2, #5999	; 0x176f
 80030c4:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030cc:	3348      	adds	r3, #72	; 0x48
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80030d2:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe f9d7 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 80030de:	eef0 7a40 	vmov.f32	s15, s0
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030ee:	330e      	adds	r3, #14
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80030f4:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030fc:	330e      	adds	r3, #14
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003106:	3312      	adds	r3, #18
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	eeb0 0a67 	vmov.f32	s0, s15
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8d5 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003122:	330e      	adds	r3, #14
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800312c:	3312      	adds	r3, #18
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a06      	ldr	r2, [pc, #24]	; (8003150 <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003138:	6013      	str	r3, [r2, #0]

	}
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000270 	.word	0x20000270
 8003148:	20000274 	.word	0x20000274
 800314c:	20000278 	.word	0x20000278
 8003150:	2000027c 	.word	0x2000027c

08003154 <_ZN9LineTrace4initEv>:
	if(1){}
}

// -------public---------- //
void LineTrace::init()
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	2201      	movs	r2, #1
 8003162:	4927      	ldr	r1, [pc, #156]	; (8003200 <_ZN9LineTrace4initEv+0xac>)
 8003164:	4827      	ldr	r0, [pc, #156]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 8003166:	f7fe fad1 	bl	800170c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800316a:	f107 0318 	add.w	r3, r7, #24
 800316e:	2201      	movs	r2, #1
 8003170:	4925      	ldr	r1, [pc, #148]	; (8003208 <_ZN9LineTrace4initEv+0xb4>)
 8003172:	4824      	ldr	r0, [pc, #144]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 8003174:	f7fe faca 	bl	800170c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2201      	movs	r2, #1
 800317e:	4923      	ldr	r1, [pc, #140]	; (800320c <_ZN9LineTrace4initEv+0xb8>)
 8003180:	4820      	ldr	r0, [pc, #128]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 8003182:	f7fe fac3 	bl	800170c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003186:	edd7 7a07 	vldr	s15, [r7, #28]
 800318a:	ed97 7a06 	vldr	s14, [r7, #24]
 800318e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003192:	eeb0 1a66 	vmov.f32	s2, s13
 8003196:	eef0 0a47 	vmov.f32	s1, s14
 800319a:	eeb0 0a67 	vmov.f32	s0, s15
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f83c 	bl	800321c <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	2201      	movs	r2, #1
 80031aa:	4919      	ldr	r1, [pc, #100]	; (8003210 <_ZN9LineTrace4initEv+0xbc>)
 80031ac:	4815      	ldr	r0, [pc, #84]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 80031ae:	f7fe faad 	bl	800170c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	2201      	movs	r2, #1
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <_ZN9LineTrace4initEv+0xc0>)
 80031ba:	4812      	ldr	r0, [pc, #72]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 80031bc:	f7fe faa6 	bl	800170c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	2201      	movs	r2, #1
 80031c6:	4914      	ldr	r1, [pc, #80]	; (8003218 <_ZN9LineTrace4initEv+0xc4>)
 80031c8:	480e      	ldr	r0, [pc, #56]	; (8003204 <_ZN9LineTrace4initEv+0xb0>)
 80031ca:	f7fe fa9f 	bl	800170c <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80031ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f875 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80031dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e0:	eeb0 0a67 	vmov.f32	s0, s15
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f87d 	bl	80032e4 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80031ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ee:	eeb0 0a67 	vmov.f32	s0, s15
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f885 	bl	8003302 <_ZN9LineTrace15setMaxVelocity2Ef>
}
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	08017e54 	.word	0x08017e54
 8003204:	08017e5c 	.word	0x08017e5c
 8003208:	08017e64 	.word	0x08017e64
 800320c:	08017e6c 	.word	0x08017e6c
 8003210:	08017e74 	.word	0x08017e74
 8003214:	08017e80 	.word	0x08017e80
 8003218:	08017e8c 	.word	0x08017e8c

0800321c <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	ed87 0a02 	vstr	s0, [r7, #8]
 8003228:	edc7 0a01 	vstr	s1, [r7, #4]
 800322c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
	return kp_;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	ee07 3a90 	vmov	s15, r3
}
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	return ki_;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	ee07 3a90 	vmov	s15, r3
}
 800327c:	eeb0 0a67 	vmov.f32	s0, s15
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
	return kd_;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	ee07 3a90 	vmov	s15, r3
}
 800329a:	eeb0 0a67 	vmov.f32	s0, s15
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	ee07 3a90 	vmov	s15, r3
}
 8003332:	eeb0 0a67 	vmov.f32	s0, s15
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334c:	ee07 3a90 	vmov	s15, r3
}
 8003350:	eeb0 0a67 	vmov.f32	s0, s15
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336c:	ee07 3a90 	vmov	s15, r3
}
 8003370:	eeb0 0a67 	vmov.f32	s0, s15
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d06b      	beq.n	800346a <_ZN9LineTrace4flipEv+0xea>
		// ---- line following processing -----//
		pidTrace();
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fb58 	bl	8002a48 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003398:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fa0f 	bl	80037c0 <_ZN9LineTrace16isTargetDistanceEf>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <_ZN9LineTrace4flipEv+0x42>
			// ---- Store Logs ------//
			storeLogs();
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f96d 	bl	8003688 <_ZN9LineTrace9storeLogsEv>

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe f888 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 ff7b 	bl	80042b8 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe26 	bl	8003014 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fbf5 	bl	8002bb8 <_ZN9LineTrace11isCrossLineEv>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <_ZN9LineTrace4flipEv+0x78>
			led_.LR(1, -1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	330c      	adds	r3, #12
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fe64 	bl	80020ac <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fa0f 	bl	800480c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f893 	bl	800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fa1f 	bl	8004840 <_ZN10SideSensor13getIgnoreFlagEv>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00f      	beq.n	8003428 <_ZN9LineTrace4flipEv+0xa8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe f877 	bl	8001500 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003412:	eeb0 7a40 	vmov.f32	s14, s0
 8003416:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003474 <_ZN9LineTrace4flipEv+0xf4>
 800341a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	db01      	blt.n	8003428 <_ZN9LineTrace4flipEv+0xa8>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <_ZN9LineTrace4flipEv+0xaa>
 8003428:	2300      	movs	r3, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <_ZN9LineTrace4flipEv+0xc8>
			side_sensor_->disableIgnore();
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f9f7 	bl	8004826 <_ZN10SideSensor13disableIgnoreEv>
			}
			else{
				correctionTotalDistance();
			}
			*/
			led_.LR(0, -1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	330c      	adds	r3, #12
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fe32 	bl	80020ac <_ZN3LED2LREaa>




		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f92d 	bl	80026ac <_ZN10LineSensor13emergencyStopEv>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <_ZN9LineTrace4flipEv+0xea>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8003478 <_ZN9LineTrace4flipEv+0xf8>
 8003460:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003478 <_ZN9LineTrace4flipEv+0xf8>
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fc3b 	bl	8004ce0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	43480000 	.word	0x43480000
 8003478:	00000000 	.word	0x00000000

0800347c <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fc7a 	bl	8004d92 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f9a2 	bl	80047ec <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034ae:	3344      	adds	r3, #68	; 0x44
 80034b0:	2200      	movs	r2, #0
 80034b2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034ba:	3346      	adds	r3, #70	; 0x46
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fc6b 	bl	8004db8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	330c      	adds	r3, #12
 80034e6:	2201      	movs	r2, #1
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fddd 	bl	80020ac <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034f8:	3310      	adds	r3, #16
 80034fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69d8      	ldr	r0, [r3, #28]
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <_ZN9LineTrace4stopEv+0xb4>)
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <_ZN9LineTrace4stopEv+0xb8>)
 800350a:	491e      	ldr	r1, [pc, #120]	; (8003584 <_ZN9LineTrace4stopEv+0xbc>)
 800350c:	f000 fba0 	bl	8003c50 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003510:	e006      	b.n	8003520 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69d8      	ldr	r0, [r3, #28]
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <_ZN9LineTrace4stopEv+0xc0>)
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <_ZN9LineTrace4stopEv+0xc4>)
 800351a:	491a      	ldr	r1, [pc, #104]	; (8003584 <_ZN9LineTrace4stopEv+0xbc>)
 800351c:	f000 fbbb 	bl	8003c96 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003526:	3314      	adds	r3, #20
 8003528:	2200      	movs	r2, #0
 800352a:	9200      	str	r2, [sp, #0]
 800352c:	2264      	movs	r2, #100	; 0x64
 800352e:	4918      	ldr	r1, [pc, #96]	; (8003590 <_ZN9LineTrace4stopEv+0xc8>)
 8003530:	4814      	ldr	r0, [pc, #80]	; (8003584 <_ZN9LineTrace4stopEv+0xbc>)
 8003532:	f7fe f885 	bl	8001640 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800353c:	33a4      	adds	r3, #164	; 0xa4
 800353e:	2200      	movs	r2, #0
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003546:	4913      	ldr	r1, [pc, #76]	; (8003594 <_ZN9LineTrace4stopEv+0xcc>)
 8003548:	480e      	ldr	r0, [pc, #56]	; (8003584 <_ZN9LineTrace4stopEv+0xbc>)
 800354a:	f7fe f879 	bl	8001640 <sd_write_array_float>

	led_.LR(-1, 0);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	330c      	adds	r3, #12
 8003552:	2200      	movs	r2, #0
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fda7 	bl	80020ac <_ZN3LED2LREaa>

	logger_->resetIdx();
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fc25 	bl	8003db2 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fbd3 	bl	8003d18 <_ZN6Logger10resetLogs2Ev>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	08017e38 	.word	0x08017e38
 8003580:	08017e44 	.word	0x08017e44
 8003584:	08017e2c 	.word	0x08017e2c
 8003588:	08017e98 	.word	0x08017e98
 800358c:	08017ea4 	.word	0x08017ea4
 8003590:	08017eb4 	.word	0x08017eb4
 8003594:	08017ec4 	.word	0x08017ec4

08003598 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80035a4:	2300      	movs	r3, #0
 80035a6:	737b      	strb	r3, [r7, #13]
	start();
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff67 	bl	800347c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80035ae:	7b7b      	ldrb	r3, [r7, #13]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d160      	bne.n	8003676 <_ZN9LineTrace7runningEv+0xde>
		switch(stage){
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <_ZN9LineTrace7runningEv+0x28>
 80035ba:	2b0a      	cmp	r3, #10
 80035bc:	d035      	beq.n	800362a <_ZN9LineTrace7runningEv+0x92>
 80035be:	e059      	b.n	8003674 <_ZN9LineTrace7runningEv+0xdc>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 f905 	bl	80047d4 <_ZN10SideSensor16getWhiteLineCntREv>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d049      	beq.n	800366e <_ZN9LineTrace7runningEv+0xd6>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fac0 	bl	8002b60 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e6:	3310      	adds	r3, #16
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8a3 	bl	800373c <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd ff8f 	bl	800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd ff6d 	bl	80014e4 <_ZN7Encoder18clearTotalDistanceEv>
				encoder_->clearStableDistance();
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd ff93 	bl	800153a <_ZN7Encoder19clearStableDistanceEv>
				led_.LR(1, -1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	330c      	adds	r3, #12
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fd44 	bl	80020ac <_ZN3LED2LREaa>
				stage = 10;
 8003624:	230a      	movs	r3, #10
 8003626:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003628:	e021      	b.n	800366e <_ZN9LineTrace7runningEv+0xd6>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f8d0 	bl	80047d4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003634:	4603      	mov	r3, r0
 8003636:	2b02      	cmp	r3, #2
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <_ZN9LineTrace7runningEv+0xda>
				loggerStop();
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff faa6 	bl	8002b96 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f889 	bl	8003762 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	f004 fc3f 	bl	8007ed4 <HAL_Delay>

				setTargetVelocity(0);
 8003656:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003684 <_ZN9LineTrace7runningEv+0xec>
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe33 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003664:	f004 fc36 	bl	8007ed4 <HAL_Delay>

				goal_flag = true;
 8003668:	2301      	movs	r3, #1
 800366a:	737b      	strb	r3, [r7, #13]

			}

			break;
 800366c:	e001      	b.n	8003672 <_ZN9LineTrace7runningEv+0xda>
			break;
 800366e:	bf00      	nop
 8003670:	e79d      	b.n	80035ae <_ZN9LineTrace7runningEv+0x16>
			break;
 8003672:	bf00      	nop
	while(goal_flag == false){
 8003674:	e79b      	b.n	80035ae <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff26 	bl	80034c8 <_ZN9LineTrace4stopEv>
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00000000 	.word	0x00000000

08003688 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	ed2d 8b02 	vpush	{d8}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800369a:	2b00      	cmp	r3, #0
 800369c:	d046      	beq.n	800372c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a4:	3310      	adds	r3, #16
 80036a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11c      	bne.n	80036e8 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69dc      	ldr	r4, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fed9 	bl	800146e <_ZN7Encoder15getDistance10mmEv>
 80036bc:	eeb0 8a40 	vmov.f32	s16, s0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fde6 	bl	8004296 <_ZN8Odometry8getThetaEv>
 80036ca:	ec53 2b10 	vmov	r2, r3, d0
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f7fd faa1 	bl	8000c18 <__aeabi_d2f>
 80036d6:	4603      	mov	r3, r0
 80036d8:	ee00 3a90 	vmov	s1, r3
 80036dc:	eeb0 0a48 	vmov.f32	s0, s16
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 f9e4 	bl	8003aae <_ZN6Logger21storeDistanceAndThetaEff>
 80036e6:	e01b      	b.n	8003720 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69dc      	ldr	r4, [r3, #28]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fecb 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 80036f6:	eeb0 8a40 	vmov.f32	s16, s0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fdc9 	bl	8004296 <_ZN8Odometry8getThetaEv>
 8003704:	ec53 2b10 	vmov	r2, r3, d0
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f7fd fa84 	bl	8000c18 <__aeabi_d2f>
 8003710:	4603      	mov	r3, r0
 8003712:	ee00 3a90 	vmov	s1, r3
 8003716:	eeb0 0a48 	vmov.f32	s0, s16
 800371a:	4620      	mov	r0, r4
 800371c:	f000 fa0e 	bl	8003b3c <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(getTargetVelocity(), odometry_->getTheta());

		mon_store_cnt++;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800372a:	801a      	strh	r2, [r3, #0]
	}
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	ecbd 8b02 	vpop	{d8}
 8003736:	bd90      	pop	{r4, r7, pc}
 8003738:	20000264 	.word	0x20000264

0800373c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fecb 	bl	80014e4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003754:	330c      	adds	r3, #12
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003770:	330c      	adds	r3, #12
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800377c:	330e      	adds	r3, #14
 800377e:	2200      	movs	r2, #0
 8003780:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003788:	3348      	adds	r3, #72	; 0x48
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ae:	3310      	adds	r3, #16
 80037b0:	887a      	ldrh	r2, [r7, #2]
 80037b2:	801a      	strh	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fe4a 	bl	800146e <_ZN7Encoder15getDistance10mmEv>
 80037da:	eeb0 7a40 	vmov.f32	s14, s0
 80037de:	edd7 7a00 	vldr	s15, [r7]
 80037e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003816:	3344      	adds	r3, #68	; 0x44
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	461c      	mov	r4, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fd fe35 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003822:	eef0 7a40 	vmov.f32	s15, s0
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 800382c:	3304      	adds	r3, #4
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3304      	adds	r3, #4
 8003834:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800383e:	3344      	adds	r3, #68	; 0x44
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800384c:	3344      	adds	r3, #68	; 0x44
 800384e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003856:	3344      	adds	r3, #68	; 0x44
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	2b63      	cmp	r3, #99	; 0x63
 800385c:	d905      	bls.n	800386a <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003864:	3344      	adds	r3, #68	; 0x44
 8003866:	2263      	movs	r2, #99	; 0x63
 8003868:	801a      	strh	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}

08003872 <_ZN9LineTrace23correctionTotalDistanceEv>:
	sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
}
void LineTrace::correctionTotalDistance()
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003884:	3344      	adds	r3, #68	; 0x44
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800388e:	3304      	adds	r3, #4
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3304      	adds	r3, #4
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	4608      	mov	r0, r1
 80038a0:	f7fd fe03 	bl	80014aa <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038aa:	3344      	adds	r3, #68	; 0x44
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038b8:	3344      	adds	r3, #68	; 0x44
 80038ba:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038c2:	3344      	adds	r3, #68	; 0x44
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	2b63      	cmp	r3, #99	; 0x63
 80038c8:	d905      	bls.n	80038d6 <_ZN9LineTrace23correctionTotalDistanceEv+0x64>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038d0:	3344      	adds	r3, #68	; 0x44
 80038d2:	2263      	movs	r2, #99	; 0x63
 80038d4:	801a      	strh	r2, [r3, #0]

}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80038ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80038fa:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80038fe:	2200      	movs	r2, #0
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003908:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800390c:	2200      	movs	r2, #0
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003916:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800391a:	2200      	movs	r2, #0
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003938:	f7fd ff74 	bl	8001824 <sd_mount>
 800393c:	4603      	mov	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800394c:	f7fd fba8 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003950:	2100      	movs	r1, #0
 8003952:	2000      	movs	r0, #0
 8003954:	f7fd fbb4 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003958:	4815      	ldr	r0, [pc, #84]	; (80039b0 <_ZN6Logger10sdCardInitEv+0x84>)
 800395a:	f7fd fbdb 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800395e:	2101      	movs	r1, #1
 8003960:	2000      	movs	r0, #0
 8003962:	f7fd fbad 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003966:	4813      	ldr	r0, [pc, #76]	; (80039b4 <_ZN6Logger10sdCardInitEv+0x88>)
 8003968:	f7fd fbd4 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800396c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003970:	f004 fab0 	bl	8007ed4 <HAL_Delay>

	  ret = true;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e015      	b.n	80039a6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800397a:	f7fd fb91 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800397e:	2100      	movs	r1, #0
 8003980:	2000      	movs	r0, #0
 8003982:	f7fd fb9d 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003986:	480a      	ldr	r0, [pc, #40]	; (80039b0 <_ZN6Logger10sdCardInitEv+0x84>)
 8003988:	f7fd fbc4 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800398c:	2101      	movs	r1, #1
 800398e:	2000      	movs	r0, #0
 8003990:	f7fd fb96 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003994:	4808      	ldr	r0, [pc, #32]	; (80039b8 <_ZN6Logger10sdCardInitEv+0x8c>)
 8003996:	f7fd fbbd 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800399a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800399e:	f004 fa99 	bl	8007ed4 <HAL_Delay>

	  ret = false;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	08017ed0 	.word	0x08017ed0
 80039b4:	08017edc 	.word	0x08017edc
 80039b8:	08017ee4 	.word	0x08017ee4

080039bc <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80039ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d027      	beq.n	8003a28 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80039de:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80039f4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a04:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a08:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a10:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <_ZN6Logger8storeLogEf+0x6c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a20:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a24:	2200      	movs	r2, #0
 8003a26:	801a      	strh	r2, [r3, #0]
	}
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d028      	beq.n	8003aa2 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a56:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a6e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a7e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a82:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a8a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <_ZN6Logger9storeLog2Ef+0x6e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a9a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
	}
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003aba:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ac4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	3302      	adds	r3, #2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003adc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003ae8:	3312      	adds	r3, #18
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003af8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b08:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b0c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b14:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f241 726f 	movw	r2, #5999	; 0x176f
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d906      	bls.n	8003b30 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b28:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	801a      	strh	r2, [r3, #0]
	//}
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b48:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b52:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003b5e:	3322      	adds	r3, #34	; 0x22
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b6e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8003b7a:	3352      	adds	r3, #82	; 0x52
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b8a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b9a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b9e:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ba6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f241 726f 	movw	r2, #5999	; 0x176f
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d906      	bls.n	8003bc2 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003bba:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
	//}
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3308      	adds	r3, #8
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003bf4:	3348      	adds	r3, #72	; 0x48
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	2300      	movs	r3, #0
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	2201      	movs	r2, #1
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	f7fd fd10 	bl	8001640 <sd_write_array_float>
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	2201      	movs	r2, #1
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f7fd fcfc 	bl	8001640 <sd_write_array_float>
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f103 0208 	add.w	r2, r3, #8
 8003c64:	2300      	movs	r3, #0
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	68b8      	ldr	r0, [r7, #8]
 8003c72:	f7fd fce5 	bl	8001640 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003c7c:	3348      	adds	r3, #72	; 0x48
 8003c7e:	2200      	movs	r2, #0
 8003c80:	9200      	str	r2, [sp, #0]
 8003c82:	f241 7270 	movw	r2, #6000	; 0x1770
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	f7fd fcd9 	bl	8001640 <sd_write_array_float>
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af02      	add	r7, sp, #8
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003caa:	3388      	adds	r3, #136	; 0x88
 8003cac:	2200      	movs	r2, #0
 8003cae:	9200      	str	r2, [sp, #0]
 8003cb0:	f241 7270 	movw	r2, #6000	; 0x1770
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	68b8      	ldr	r0, [r7, #8]
 8003cb8:	f7fd fcc2 	bl	8001640 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003cc2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	9200      	str	r2, [sp, #0]
 8003cca:	f241 7270 	movw	r2, #6000	; 0x1770
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f7fd fcb5 	bl	8001640 <sd_write_array_float>
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	f241 7270 	movw	r2, #6000	; 0x1770
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	68b8      	ldr	r0, [r7, #8]
 8003cf8:	f7fd fd08 	bl	800170c <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003d02:	3348      	adds	r3, #72	; 0x48
 8003d04:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	68b8      	ldr	r0, [r7, #8]
 8003d0c:	f7fd fcfe 	bl	800170c <sd_read_array_float>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b08b      	sub	sp, #44	; 0x2c
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003d26:	3388      	adds	r3, #136	; 0x88
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003d34:	3340      	adds	r3, #64	; 0x40
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d009      	beq.n	8003d54 <_ZN6Logger10resetLogs2Ev+0x3c>
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	617b      	str	r3, [r7, #20]
		log = 0;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	3304      	adds	r3, #4
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	e7f1      	b.n	8003d38 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003d5a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003d6a:	3340      	adds	r3, #64	; 0x40
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d009      	beq.n	8003d8a <_ZN6Logger10resetLogs2Ev+0x72>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	60bb      	str	r3, [r7, #8]
		log = 0;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	3304      	adds	r3, #4
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	e7f1      	b.n	8003d6e <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d90:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003d94:	2200      	movs	r2, #0
 8003d96:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d9e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003da2:	2200      	movs	r2, #0
 8003da4:	801a      	strh	r2, [r3, #0]
}
 8003da6:	bf00      	nop
 8003da8:	372c      	adds	r7, #44	; 0x2c
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003dc0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003dce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	801a      	strh	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_ZN6Logger5startEv>:

void Logger::start()
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003df0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e12:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	805a      	strh	r2, [r3, #2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003e50:	2108      	movs	r1, #8
 8003e52:	4805      	ldr	r0, [pc, #20]	; (8003e68 <_ZN5Motor4initEv+0x20>)
 8003e54:	f009 f9ee 	bl	800d234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003e58:	210c      	movs	r1, #12
 8003e5a:	4803      	ldr	r0, [pc, #12]	; (8003e68 <_ZN5Motor4initEv+0x20>)
 8003e5c:	f009 f9ea 	bl	800d234 <HAL_TIM_PWM_Start>

}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	2003e8a4 	.word	0x2003e8a4

08003e6c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da0d      	bge.n	8003e9a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e84:	481f      	ldr	r0, [pc, #124]	; (8003f04 <_ZN5Motor9motorCtrlEv+0x98>)
 8003e86:	f005 fabb 	bl	8009400 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	425b      	negs	r3, r3
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	81fb      	strh	r3, [r7, #14]
 8003e98:	e00a      	b.n	8003eb0 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea0:	4818      	ldr	r0, [pc, #96]	; (8003f04 <_ZN5Motor9motorCtrlEv+0x98>)
 8003ea2:	f005 faad 	bl	8009400 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0d      	bge.n	8003ed6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ec0:	4810      	ldr	r0, [pc, #64]	; (8003f04 <_ZN5Motor9motorCtrlEv+0x98>)
 8003ec2:	f005 fa9d 	bl	8009400 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	425b      	negs	r3, r3
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	81bb      	strh	r3, [r7, #12]
 8003ed4:	e00a      	b.n	8003eec <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003edc:	4809      	ldr	r0, [pc, #36]	; (8003f04 <_ZN5Motor9motorCtrlEv+0x98>)
 8003ede:	f005 fa8f 	bl	8009400 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003eec:	89fa      	ldrh	r2, [r7, #14]
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8003ef4:	89ba      	ldrh	r2, [r7, #12]
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	2003e8a4 	.word	0x2003e8a4

08003f0c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6178      	str	r0, [r7, #20]
 8003f14:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f18:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f26:	f7fc fe0f 	bl	8000b48 <__aeabi_dcmpgt>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <_ZN5Motor8setRatioEdd+0x30>
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	4c2b      	ldr	r4, [pc, #172]	; (8003fe4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003f36:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003f3a:	e00e      	b.n	8003f5a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f46:	f7fc fde1 	bl	8000b0c <__aeabi_dcmplt>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <_ZN5Motor8setRatioEdd+0x4e>
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	4c24      	ldr	r4, [pc, #144]	; (8003fe8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003f56:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f64:	f7fc fdf0 	bl	8000b48 <__aeabi_dcmpgt>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <_ZN5Motor8setRatioEdd+0x6e>
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	4c1c      	ldr	r4, [pc, #112]	; (8003fe4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003f74:	e9c7 3400 	strd	r3, r4, [r7]
 8003f78:	e00e      	b.n	8003f98 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f84:	f7fc fdc2 	bl	8000b0c <__aeabi_dcmplt>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <_ZN5Motor8setRatioEdd+0x8c>
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	4c15      	ldr	r4, [pc, #84]	; (8003fe8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003f94:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <_ZN5Motor8setRatioEdd+0xe0>)
 8003f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fa2:	f7fc fb41 	bl	8000628 <__aeabi_dmul>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	4618      	mov	r0, r3
 8003fac:	4621      	mov	r1, r4
 8003fae:	f7fc fdeb 	bl	8000b88 <__aeabi_d2iz>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <_ZN5Motor8setRatioEdd+0xe0>)
 8003fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc4:	f7fc fb30 	bl	8000628 <__aeabi_dmul>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f7fc fdda 	bl	8000b88 <__aeabi_d2iz>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	b21a      	sxth	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	805a      	strh	r2, [r3, #2]

}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd90      	pop	{r4, r7, pc}
 8003fe4:	3ff00000 	.word	0x3ff00000
 8003fe8:	bff00000 	.word	0xbff00000
 8003fec:	409c2000 	.word	0x409c2000

08003ff0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8003ff0:	b490      	push	{r4, r7}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	f04f 0400 	mov.w	r4, #0
 8004024:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bc90      	pop	{r4, r7}
 8004060:	4770      	bx	lr
 8004062:	0000      	movs	r0, r0
 8004064:	0000      	movs	r0, r0
	...

08004068 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fd9a 	bl	8001bb0 <_ZN3IMU8getOmegaEv>
 800407c:	ee10 3a10 	vmov	r3, s0
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fa79 	bl	8000578 <__aeabi_f2d>
 8004086:	4603      	mov	r3, r0
 8004088:	460c      	mov	r4, r1
 800408a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd f9dc 	bl	8001450 <_ZN7Encoder11getDistanceEv>
 8004098:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800409c:	a376      	add	r3, pc, #472	; (adr r3, 8004278 <_ZN8Odometry12calcPotitionEv+0x210>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040a6:	f7fc fabf 	bl	8000628 <__aeabi_dmul>
 80040aa:	4603      	mov	r3, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fc fa5c 	bl	8000578 <__aeabi_f2d>
 80040c0:	4682      	mov	sl, r0
 80040c2:	468b      	mov	fp, r1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040d8:	f7fc fbd0 	bl	800087c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4640      	mov	r0, r8
 80040e2:	4649      	mov	r1, r9
 80040e4:	f7fc f8ea 	bl	80002bc <__adddf3>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	ec43 2b17 	vmov	d7, r2, r3
 80040f0:	eeb0 0a47 	vmov.f32	s0, s14
 80040f4:	eef0 0a67 	vmov.f32	s1, s15
 80040f8:	f00e fbe2 	bl	80128c0 <cos>
 80040fc:	ec53 2b10 	vmov	r2, r3, d0
 8004100:	4650      	mov	r0, sl
 8004102:	4659      	mov	r1, fp
 8004104:	f7fc fa90 	bl	8000628 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4620      	mov	r0, r4
 800410e:	4629      	mov	r1, r5
 8004110:	f7fc f8d4 	bl	80002bc <__adddf3>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7fc fa27 	bl	8000578 <__aeabi_f2d>
 800412a:	4682      	mov	sl, r0
 800412c:	468b      	mov	fp, r1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004142:	f7fc fb9b 	bl	800087c <__aeabi_ddiv>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f7fc f8b5 	bl	80002bc <__adddf3>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	ec43 2b17 	vmov	d7, r2, r3
 800415a:	eeb0 0a47 	vmov.f32	s0, s14
 800415e:	eef0 0a67 	vmov.f32	s1, s15
 8004162:	f00e fbf1 	bl	8012948 <sin>
 8004166:	ec53 2b10 	vmov	r2, r3, d0
 800416a:	4650      	mov	r0, sl
 800416c:	4659      	mov	r1, fp
 800416e:	f7fc fa5b 	bl	8000628 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc f89f 	bl	80002bc <__adddf3>
 800417e:	4603      	mov	r3, r0
 8004180:	460c      	mov	r4, r1
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	f7fc f890 	bl	80002bc <__adddf3>
 800419c:	4603      	mov	r3, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	ed93 7b08 	vldr	d7, [r3, #32]
 80041b2:	eeb0 0a47 	vmov.f32	s0, s14
 80041b6:	eef0 0a67 	vmov.f32	s1, s15
 80041ba:	f00e fb81 	bl	80128c0 <cos>
 80041be:	ec51 0b10 	vmov	r0, r1, d0
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <_ZN8Odometry12calcPotitionEv+0x200>)
 80041c8:	f7fc fa2e 	bl	8000628 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fc f872 	bl	80002bc <__adddf3>
 80041d8:	4603      	mov	r3, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	ed93 7b08 	vldr	d7, [r3, #32]
 80041ee:	eeb0 0a47 	vmov.f32	s0, s14
 80041f2:	eef0 0a67 	vmov.f32	s1, s15
 80041f6:	f00e fba7 	bl	8012948 <sin>
 80041fa:	ec51 0b10 	vmov	r0, r1, d0
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004204:	f7fc fa10 	bl	8000628 <__aeabi_dmul>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4620      	mov	r0, r4
 800420e:	4629      	mov	r1, r5
 8004210:	f7fc f854 	bl	80002bc <__adddf3>
 8004214:	4603      	mov	r3, r0
 8004216:	460c      	mov	r4, r1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004224:	4618      	mov	r0, r3
 8004226:	4621      	mov	r1, r4
 8004228:	f7fc fcf6 	bl	8000c18 <__aeabi_d2f>
 800422c:	4602      	mov	r2, r0
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <_ZN8Odometry12calcPotitionEv+0x204>)
 8004230:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	4621      	mov	r1, r4
 800423c:	f7fc fcec 	bl	8000c18 <__aeabi_d2f>
 8004240:	4602      	mov	r2, r0
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004244:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800424c:	4618      	mov	r0, r3
 800424e:	4621      	mov	r1, r4
 8004250:	f7fc fce2 	bl	8000c18 <__aeabi_d2f>
 8004254:	4602      	mov	r2, r0
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004264:	f3af 8000 	nop.w
 8004268:	405b8000 	.word	0x405b8000
 800426c:	20000290 	.word	0x20000290
 8004270:	20000294 	.word	0x20000294
 8004274:	20000298 	.word	0x20000298
 8004278:	d2f1a9fc 	.word	0xd2f1a9fc
 800427c:	3f50624d 	.word	0x3f50624d

08004280 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff feed 	bl	8004068 <_ZN8Odometry12calcPotitionEv>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004296:	b490      	push	{r4, r7}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
	return theta_;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80042a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80042a8:	eeb0 0a47 	vmov.f32	s0, s14
 80042ac:	eef0 0a67 	vmov.f32	s1, s15
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc90      	pop	{r4, r7}
 80042b6:	4770      	bx	lr

080042b8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80042b8:	b490      	push	{r4, r7}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	f04f 0400 	mov.w	r4, #0
 80042ca:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	f04f 0400 	mov.w	r4, #0
 80042d8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f04f 0400 	mov.w	r4, #0
 80042e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc90      	pop	{r4, r7}
 80042f2:	4770      	bx	lr

080042f4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80042f4:	b490      	push	{r4, r7}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f04f 0400 	mov.w	r4, #0
 800430c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	f04f 0400 	mov.w	r4, #0
 800431a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	f04f 0400 	mov.w	r4, #0
 8004328:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004332:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004336:	2200      	movs	r2, #0
 8004338:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800433a:	4a29      	ldr	r2, [pc, #164]	; (80043e0 <_ZN13PathFollowingC1Ev+0xec>)
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f04f 0400 	mov.w	r4, #0
 8004344:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004348:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <_ZN13PathFollowingC1Ev+0xec>)
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <_ZN13PathFollowingC1Ev+0xec>)
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	f04f 0400 	mov.w	r4, #0
 8004360:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	f04f 0400 	mov.w	r4, #0
 800436e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004372:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	f04f 0400 	mov.w	r4, #0
 800438a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80043aa:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <_ZN13PathFollowingC1Ev+0xf0>)
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f04f 0400 	mov.w	r4, #0
 80043d0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc90      	pop	{r4, r7}
 80043de:	4770      	bx	lr
 80043e0:	2003eda8 	.word	0x2003eda8
 80043e4:	2003ed38 	.word	0x2003ed38
 80043e8:	2003ed98 	.word	0x2003ed98

080043ec <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80043f4:	f001 fc76 	bl	8005ce4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	2201      	movs	r2, #1
 80043fe:	4915      	ldr	r1, [pc, #84]	; (8004454 <_ZN13PathFollowing4initEv+0x68>)
 8004400:	4815      	ldr	r0, [pc, #84]	; (8004458 <_ZN13PathFollowing4initEv+0x6c>)
 8004402:	f7fd f9c9 	bl	8001798 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004406:	f107 0310 	add.w	r3, r7, #16
 800440a:	2201      	movs	r2, #1
 800440c:	4913      	ldr	r1, [pc, #76]	; (800445c <_ZN13PathFollowing4initEv+0x70>)
 800440e:	4812      	ldr	r0, [pc, #72]	; (8004458 <_ZN13PathFollowing4initEv+0x6c>)
 8004410:	f7fd f9c2 	bl	8001798 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	2201      	movs	r2, #1
 800441a:	4911      	ldr	r1, [pc, #68]	; (8004460 <_ZN13PathFollowing4initEv+0x74>)
 800441c:	480e      	ldr	r0, [pc, #56]	; (8004458 <_ZN13PathFollowing4initEv+0x6c>)
 800441e:	f7fd f9bb 	bl	8001798 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004422:	ed97 7b06 	vldr	d7, [r7, #24]
 8004426:	ed97 6b04 	vldr	d6, [r7, #16]
 800442a:	ed97 5b02 	vldr	d5, [r7, #8]
 800442e:	eeb0 2a45 	vmov.f32	s4, s10
 8004432:	eef0 2a65 	vmov.f32	s5, s11
 8004436:	eeb0 1a46 	vmov.f32	s2, s12
 800443a:	eef0 1a66 	vmov.f32	s3, s13
 800443e:	eeb0 0a47 	vmov.f32	s0, s14
 8004442:	eef0 0a67 	vmov.f32	s1, s15
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f80c 	bl	8004464 <_ZN13PathFollowing7setGainEddd>
}
 800444c:	bf00      	nop
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	08017eec 	.word	0x08017eec
 8004458:	08017ef4 	.word	0x08017ef4
 800445c:	08017efc 	.word	0x08017efc
 8004460:	08017f04 	.word	0x08017f04

08004464 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	61f8      	str	r0, [r7, #28]
 800446c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004470:	ed87 1b02 	vstr	d1, [r7, #8]
 8004474:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800447a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800447e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004484:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004488:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800448e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004492:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bc90      	pop	{r4, r7}
 800449e:	4770      	bx	lr
 80044a0:	2003eda8 	.word	0x2003eda8

080044a4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80044ac:	2088      	movs	r0, #136	; 0x88
 80044ae:	f7fd fcc2 	bl	8001e36 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80044b2:	2080      	movs	r0, #128	; 0x80
 80044b4:	f7fd fcbf 	bl	8001e36 <INA260_init>
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80044c8:	2188      	movs	r1, #136	; 0x88
 80044ca:	2002      	movs	r0, #2
 80044cc:	f7fd fc50 	bl	8001d70 <INA260_read>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc f83e 	bl	8000554 <__aeabi_i2d>
 80044d8:	a30c      	add	r3, pc, #48	; (adr r3, 800450c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f7fc f8a3 	bl	8000628 <__aeabi_dmul>
 80044e2:	4603      	mov	r3, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	4618      	mov	r0, r3
 80044e8:	4621      	mov	r1, r4
 80044ea:	f7fc fb95 	bl	8000c18 <__aeabi_d2f>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a03      	ldr	r2, [pc, #12]	; (8004508 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80044fa:	6013      	str	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bd90      	pop	{r4, r7, pc}
 8004504:	f3af 8000 	nop.w
 8004508:	2000029c 	.word	0x2000029c
 800450c:	47ae147b 	.word	0x47ae147b
 8004510:	3f547ae1 	.word	0x3f547ae1

08004514 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	ee07 3a90 	vmov	s15, r3

}
 8004524:	eeb0 0a67 	vmov.f32	s0, s15
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004540:	2102      	movs	r1, #2
 8004542:	4822      	ldr	r0, [pc, #136]	; (80045cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8004544:	f004 ff44 	bl	80093d0 <HAL_GPIO_ReadPin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004558:	89fb      	ldrh	r3, [r7, #14]
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004560:	2108      	movs	r1, #8
 8004562:	481a      	ldr	r0, [pc, #104]	; (80045cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8004564:	f004 ff34 	bl	80093d0 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	f043 0302 	orr.w	r3, r3, #2
 800457e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004580:	2110      	movs	r1, #16
 8004582:	4812      	ldr	r0, [pc, #72]	; (80045cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8004584:	f004 ff24 	bl	80093d0 <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	f043 0304 	orr.w	r3, r3, #4
 800459e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80045a0:	2180      	movs	r1, #128	; 0x80
 80045a2:	480a      	ldr	r0, [pc, #40]	; (80045cc <_ZN12RotarySwitch8getValueEv+0x98>)
 80045a4:	f004 ff14 	bl	80093d0 <HAL_GPIO_ReadPin>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80045b8:	89fb      	ldrh	r3, [r7, #14]
 80045ba:	f043 0308 	orr.w	r3, r3, #8
 80045be:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80045c0:	89fb      	ldrh	r3, [r7, #14]

}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40020c00 	.word	0x40020c00

080045d0 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	805a      	strh	r2, [r3, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	809a      	strh	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	719a      	strb	r2, [r3, #6]
{

}
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	799b      	ldrb	r3, [r3, #6]
 800460c:	f083 0301 	eor.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80c7 	beq.w	80047a6 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004618:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d027      	beq.n	8004676 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004626:	2104      	movs	r1, #4
 8004628:	4862      	ldr	r0, [pc, #392]	; (80047b4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800462a:	f004 fed1 	bl	80093d0 <HAL_GPIO_ReadPin>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800463e:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	4b5c      	ldr	r3, [pc, #368]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e002      	b.n	8004652 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 800464c:	4b5a      	ldr	r3, [pc, #360]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004652:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d93f      	bls.n	80046da <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004668:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800466e:	4b52      	ldr	r3, [pc, #328]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004670:	2200      	movs	r2, #0
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e031      	b.n	80046da <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02d      	beq.n	80046da <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800467e:	2104      	movs	r1, #4
 8004680:	484c      	ldr	r0, [pc, #304]	; (80047b4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004682:	f004 fea5 	bl	80093d0 <HAL_GPIO_ReadPin>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004696:	4b48      	ldr	r3, [pc, #288]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046a0:	801a      	strh	r2, [r3, #0]
 80046a2:	e002      	b.n	80046aa <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80046a4:	4b44      	ldr	r3, [pc, #272]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80046aa:	4b43      	ldr	r3, [pc, #268]	; (80047b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d913      	bls.n	80046da <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	889b      	ldrh	r3, [r3, #4]
 80046ca:	3301      	adds	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	889a      	ldrh	r2, [r3, #4]
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80046d8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	f083 0301 	eor.w	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d027      	beq.n	8004738 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80046e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046ec:	4835      	ldr	r0, [pc, #212]	; (80047c4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80046ee:	f004 fe6f 	bl	80093d0 <HAL_GPIO_ReadPin>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	e002      	b.n	8004716 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004712:	2200      	movs	r2, #0
 8004714:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d90c      	bls.n	8004738 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800472c:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004732:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004734:	2200      	movs	r2, #0
 8004736:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004738:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02e      	beq.n	800479e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004744:	481f      	ldr	r0, [pc, #124]	; (80047c4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004746:	f004 fe43 	bl	80093d0 <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	e002      	b.n	800476e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d913      	bls.n	800479e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	f083 0302 	eor.w	r3, r3, #2
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	885b      	ldrh	r3, [r3, #2]
 800478e:	3301      	adds	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	885a      	ldrh	r2, [r3, #2]
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <_ZN10SideSensor12updateStatusEv+0x1cc>)
 800479c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80047a4:	801a      	strh	r2, [r3, #0]
	}

}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200002a6 	.word	0x200002a6
 80047b4:	40021000 	.word	0x40021000
 80047b8:	200002aa 	.word	0x200002aa
 80047bc:	200002a4 	.word	0x200002a4
 80047c0:	200002a7 	.word	0x200002a7
 80047c4:	40020c00 	.word	0x40020c00
 80047c8:	200002a8 	.word	0x200002a8
 80047cc:	200002a2 	.word	0x200002a2
 80047d0:	200002a0 	.word	0x200002a0

080047d4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	889b      	ldrh	r3, [r3, #4]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	809a      	strh	r2, [r3, #4]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	719a      	strb	r2, [r3, #6]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	719a      	strb	r2, [r3, #6]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	799b      	ldrb	r3, [r3, #6]
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004868:	3308      	adds	r3, #8
 800486a:	4611      	mov	r1, r2
 800486c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004870:	4618      	mov	r0, r3
 8004872:	f00f f8a5 	bl	80139c0 <memcpy>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	08017f28 	.word	0x08017f28

080048ac <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	ed97 0a00 	vldr	s0, [r7]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f876 	bl	80039bc <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80048da:	eeb0 0a67 	vmov.f32	s0, s15
 80048de:	4610      	mov	r0, r2
 80048e0:	f7ff f8a8 	bl	8003a34 <_ZN6Logger9storeLog2Ef>
	}

}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a07      	ldr	r2, [pc, #28]	; (8004918 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80048fa:	4908      	ldr	r1, [pc, #32]	; (800491c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff f980 	bl	8003c02 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a06      	ldr	r2, [pc, #24]	; (8004920 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004908:	4904      	ldr	r1, [pc, #16]	; (800491c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f98c 	bl	8003c28 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	0801811c 	.word	0x0801811c
 800491c:	08018128 	.word	0x08018128
 8004920:	08018134 	.word	0x08018134

08004924 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004932:	2b00      	cmp	r3, #0
 8004934:	d046      	beq.n	80049c4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3204      	adds	r2, #4
 8004948:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004964:	3301      	adds	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8004976:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800497e:	2bf9      	cmp	r3, #249	; 0xf9
 8004980:	d903      	bls.n	800498a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	22fa      	movs	r2, #250	; 0xfa
 8004986:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685c      	ldr	r4, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004994:	4618      	mov	r0, r3
 8004996:	f7fb fdef 	bl	8000578 <__aeabi_f2d>
 800499a:	4605      	mov	r5, r0
 800499c:	460e      	mov	r6, r1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80049a4:	eef1 7a67 	vneg.f32	s15, s15
 80049a8:	ee17 3a90 	vmov	r3, s15
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb fde3 	bl	8000578 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	ec43 2b11 	vmov	d1, r2, r3
 80049ba:	ec46 5b10 	vmov	d0, r5, r6
 80049be:	4620      	mov	r0, r4
 80049c0:	f7ff faa4 	bl	8003f0c <_ZN5Motor8setRatioEdd>

	}

}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	200002ac 	.word	0x200002ac

080049d0 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f9f0 	bl	8003de2 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	0000      	movs	r0, r0
 8004a14:	0000      	movs	r0, r0
	...

08004a18 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f9ed 	bl	8003e04 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004a58 <_ZN20SystemIdentification4stopEv+0x40>
 8004a42:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004a58 <_ZN20SystemIdentification4stopEv+0x40>
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fa60 	bl	8003f0c <_ZN5Motor8setRatioEdd>
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	f3af 8000 	nop.w
	...

08004a60 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	615a      	str	r2, [r3, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	f107 020c 	add.w	r2, r7, #12
 8004b08:	f107 0110 	add.w	r1, r7, #16
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc fc8b 	bl	8001428 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004b12:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b26:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7fb fd24 	bl	8000578 <__aeabi_f2d>
 8004b30:	a30b      	add	r3, pc, #44	; (adr r3, 8004b60 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fd77 	bl	8000628 <__aeabi_dmul>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	4621      	mov	r1, r4
 8004b42:	f7fc f869 	bl	8000c18 <__aeabi_d2f>
 8004b46:	4602      	mov	r2, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	ee07 3a90 	vmov	s15, r3
}
 8004b54:	eeb0 0a67 	vmov.f32	s0, s15
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	1ab1d998 	.word	0x1ab1d998
 8004b64:	3f7830b5 	.word	0x3f7830b5

08004b68 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	ed93 7a00 	vldr	s14, [r3]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b80:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8004b8e:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ba4:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004bb0:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fb fcdf 	bl	8000578 <__aeabi_f2d>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8004bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bcc:	ee17 0a90 	vmov	r0, s15
 8004bd0:	f7fb fcd2 	bl	8000578 <__aeabi_f2d>
 8004bd4:	a334      	add	r3, pc, #208	; (adr r3, 8004ca8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f7fb fd25 	bl	8000628 <__aeabi_dmul>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4620      	mov	r0, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	f7fb fb69 	bl	80002bc <__adddf3>
 8004bea:	4603      	mov	r3, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7fc f811 	bl	8000c18 <__aeabi_d2f>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004bfa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c14:	ee17 0a90 	vmov	r0, s15
 8004c18:	f7fb fcae 	bl	8000578 <__aeabi_f2d>
 8004c1c:	a322      	add	r3, pc, #136	; (adr r3, 8004ca8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f7fb fe2b 	bl	800087c <__aeabi_ddiv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f7fb fff3 	bl	8000c18 <__aeabi_d2f>
 8004c32:	4603      	mov	r3, r0
 8004c34:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8004c36:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c42:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004c44:	edd3 7a00 	vldr	s15, [r3]
 8004c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c62:	ee17 0a90 	vmov	r0, s15
 8004c66:	f7fb fc87 	bl	8000578 <__aeabi_f2d>
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c7c:	ee17 0a90 	vmov	r0, s15
 8004c80:	f7fb fc7a 	bl	8000578 <__aeabi_f2d>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	ec43 2b11 	vmov	d1, r2, r3
 8004c8c:	ec46 5b10 	vmov	d0, r5, r6
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff f93b 	bl	8003f0c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6013      	str	r3, [r2, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca4:	f3af 8000 	nop.w
 8004ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004cac:	3f50624d 	.word	0x3f50624d
 8004cb0:	200002b4 	.word	0x200002b4
 8004cb4:	200002b0 	.word	0x200002b0

08004cb8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cc4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	605a      	str	r2, [r3, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cec:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d14:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d18:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d46:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d4a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff febf 	bl	8004af8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff feef 	bl	8004b68 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004de8 <_ZN12VelocityCtrl4stopEv+0x30>
 8004dd0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004de8 <_ZN12VelocityCtrl4stopEv+0x30>
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f899 	bl	8003f0c <_ZN5Motor8setRatioEdd>

}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
	...

08004df0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8004e02:	f001 fe27 	bl	8006a54 <cppFlip100ns>

		tim7_timer++;
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e0e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d902      	bls.n	8004e20 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10e      	bne.n	8004e48 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8004e2a:	f001 fdc9 	bl	80069c0 <cppFlip1ms>

		tim6_timer++;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004e36:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d902      	bls.n	8004e48 <HAL_TIM_PeriodElapsedCallback+0x58>
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8004e52:	f001 fe09 	bl	8006a68 <cppFlip10ms>

		tim13_timer++;
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004e5e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a06      	ldr	r2, [pc, #24]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d902      	bls.n	8004e70 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
	}

}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40001400 	.word	0x40001400
 8004e7c:	2003ea58 	.word	0x2003ea58
 8004e80:	0001869f 	.word	0x0001869f
 8004e84:	40001000 	.word	0x40001000
 8004e88:	2003ea14 	.word	0x2003ea14
 8004e8c:	40001c00 	.word	0x40001c00
 8004e90:	2003ea5c 	.word	0x2003ea5c

08004e94 <init>:

void init()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e9e:	4808      	ldr	r0, [pc, #32]	; (8004ec0 <init+0x2c>)
 8004ea0:	f004 faae 	bl	8009400 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8004ea4:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <init+0x30>)
 8004ea6:	f008 f976 	bl	800d196 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004eaa:	4807      	ldr	r0, [pc, #28]	; (8004ec8 <init+0x34>)
 8004eac:	f008 f973 	bl	800d196 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004eb0:	4806      	ldr	r0, [pc, #24]	; (8004ecc <init+0x38>)
 8004eb2:	f008 f970 	bl	800d196 <HAL_TIM_Base_Start_IT>

	cppInit();
 8004eb6:	f001 fce3 	bl	8006880 <cppInit>

	//path_following_initialize();

}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	2003eb40 	.word	0x2003eb40
 8004ec8:	2003ece4 	.word	0x2003ece4
 8004ecc:	2003ea60 	.word	0x2003ea60

08004ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ed4:	f002 ff8c 	bl	8007df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ed8:	f000 f82a 	bl	8004f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004edc:	f000 fdbc 	bl	8005a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ee0:	f000 fd8a 	bl	80059f8 <MX_DMA_Init>
  MX_I2C2_Init();
 8004ee4:	f000 f9e8 	bl	80052b8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004ee8:	f000 fa14 	bl	8005314 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8004eec:	f000 fa32 	bl	8005354 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004ef0:	f000 fa66 	bl	80053c0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004ef4:	f000 fb70 	bl	80055d8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004ef8:	f000 fc3c 	bl	8005774 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004efc:	f000 fd52 	bl	80059a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004f00:	f00a f91c 	bl	800f13c <MX_FATFS_Init>
  MX_TIM6_Init();
 8004f04:	f000 fbcc 	bl	80056a0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004f08:	f000 f9a8 	bl	800525c <MX_I2C1_Init>
  MX_TIM3_Init();
 8004f0c:	f000 fb00 	bl	8005510 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004f10:	f000 fc88 	bl	8005824 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004f14:	f000 fcd4 	bl	80058c0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004f18:	f000 f898 	bl	800504c <MX_ADC2_Init>
  MX_TIM7_Init();
 8004f1c:	f000 fbf6 	bl	800570c <MX_TIM7_Init>
  MX_TIM13_Init();
 8004f20:	f000 fd1c 	bl	800595c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004f24:	f7ff ffb6 	bl	8004e94 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004f28:	f001 fdbe 	bl	8006aa8 <cppLoop>
 8004f2c:	e7fc      	b.n	8004f28 <main+0x58>
	...

08004f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b0a4      	sub	sp, #144	; 0x90
 8004f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f3a:	2234      	movs	r2, #52	; 0x34
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00e fd49 	bl	80139d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	223c      	movs	r2, #60	; 0x3c
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f00e fd3a 	bl	80139d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	4b37      	ldr	r3, [pc, #220]	; (8005044 <SystemClock_Config+0x114>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a36      	ldr	r2, [pc, #216]	; (8005044 <SystemClock_Config+0x114>)
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6413      	str	r3, [r2, #64]	; 0x40
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <SystemClock_Config+0x114>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	4b31      	ldr	r3, [pc, #196]	; (8005048 <SystemClock_Config+0x118>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a30      	ldr	r2, [pc, #192]	; (8005048 <SystemClock_Config+0x118>)
 8004f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <SystemClock_Config+0x118>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fa2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004fa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fac:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004fae:	2308      	movs	r3, #8
 8004fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004fb2:	23b4      	movs	r3, #180	; 0xb4
 8004fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 fe38 	bl	800ac44 <HAL_RCC_OscConfig>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004fda:	f000 fe7f 	bl	8005cdc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004fde:	f005 f9b3 	bl	800a348 <HAL_PWREx_EnableOverDrive>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004fe8:	f000 fe78 	bl	8005cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fec:	230f      	movs	r3, #15
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ffc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005002:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005008:	2105      	movs	r1, #5
 800500a:	4618      	mov	r0, r3
 800500c:	f005 f9ec 	bl	800a3e8 <HAL_RCC_ClockConfig>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005016:	f000 fe61 	bl	8005cdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800501a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800501e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005020:	2300      	movs	r3, #0
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005024:	2300      	movs	r3, #0
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	4618      	mov	r0, r3
 800502e:	f005 fbcb 	bl	800a7c8 <HAL_RCCEx_PeriphCLKConfig>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005038:	f000 fe50 	bl	8005cdc <Error_Handler>
  }
}
 800503c:	bf00      	nop
 800503e:	3790      	adds	r7, #144	; 0x90
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	40007000 	.word	0x40007000

0800504c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005052:	463b      	mov	r3, r7
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800505e:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <MX_ADC2_Init+0x204>)
 8005060:	4a7c      	ldr	r2, [pc, #496]	; (8005254 <MX_ADC2_Init+0x208>)
 8005062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005064:	4b7a      	ldr	r3, [pc, #488]	; (8005250 <MX_ADC2_Init+0x204>)
 8005066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800506a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800506c:	4b78      	ldr	r3, [pc, #480]	; (8005250 <MX_ADC2_Init+0x204>)
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005072:	4b77      	ldr	r3, [pc, #476]	; (8005250 <MX_ADC2_Init+0x204>)
 8005074:	2201      	movs	r2, #1
 8005076:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005078:	4b75      	ldr	r3, [pc, #468]	; (8005250 <MX_ADC2_Init+0x204>)
 800507a:	2201      	movs	r2, #1
 800507c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800507e:	4b74      	ldr	r3, [pc, #464]	; (8005250 <MX_ADC2_Init+0x204>)
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005086:	4b72      	ldr	r3, [pc, #456]	; (8005250 <MX_ADC2_Init+0x204>)
 8005088:	2200      	movs	r2, #0
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800508c:	4b70      	ldr	r3, [pc, #448]	; (8005250 <MX_ADC2_Init+0x204>)
 800508e:	4a72      	ldr	r2, [pc, #456]	; (8005258 <MX_ADC2_Init+0x20c>)
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005092:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <MX_ADC2_Init+0x204>)
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005098:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <MX_ADC2_Init+0x204>)
 800509a:	220e      	movs	r2, #14
 800509c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800509e:	4b6c      	ldr	r3, [pc, #432]	; (8005250 <MX_ADC2_Init+0x204>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <MX_ADC2_Init+0x204>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80050ac:	4868      	ldr	r0, [pc, #416]	; (8005250 <MX_ADC2_Init+0x204>)
 80050ae:	f002 ff33 	bl	8007f18 <HAL_ADC_Init>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80050b8:	f000 fe10 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80050bc:	230a      	movs	r3, #10
 80050be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80050c0:	2301      	movs	r3, #1
 80050c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80050c4:	2306      	movs	r3, #6
 80050c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050c8:	463b      	mov	r3, r7
 80050ca:	4619      	mov	r1, r3
 80050cc:	4860      	ldr	r0, [pc, #384]	; (8005250 <MX_ADC2_Init+0x204>)
 80050ce:	f003 f877 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80050d8:	f000 fe00 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80050dc:	230b      	movs	r3, #11
 80050de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80050e0:	2302      	movs	r3, #2
 80050e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050e4:	463b      	mov	r3, r7
 80050e6:	4619      	mov	r1, r3
 80050e8:	4859      	ldr	r0, [pc, #356]	; (8005250 <MX_ADC2_Init+0x204>)
 80050ea:	f003 f869 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80050f4:	f000 fdf2 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80050fc:	2303      	movs	r3, #3
 80050fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005100:	463b      	mov	r3, r7
 8005102:	4619      	mov	r1, r3
 8005104:	4852      	ldr	r0, [pc, #328]	; (8005250 <MX_ADC2_Init+0x204>)
 8005106:	f003 f85b 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005110:	f000 fde4 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005114:	230d      	movs	r3, #13
 8005116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005118:	2304      	movs	r3, #4
 800511a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800511c:	463b      	mov	r3, r7
 800511e:	4619      	mov	r1, r3
 8005120:	484b      	ldr	r0, [pc, #300]	; (8005250 <MX_ADC2_Init+0x204>)
 8005122:	f003 f84d 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800512c:	f000 fdd6 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005130:	2300      	movs	r3, #0
 8005132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005134:	2305      	movs	r3, #5
 8005136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005138:	463b      	mov	r3, r7
 800513a:	4619      	mov	r1, r3
 800513c:	4844      	ldr	r0, [pc, #272]	; (8005250 <MX_ADC2_Init+0x204>)
 800513e:	f003 f83f 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005148:	f000 fdc8 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800514c:	2301      	movs	r3, #1
 800514e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005150:	2306      	movs	r3, #6
 8005152:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005154:	463b      	mov	r3, r7
 8005156:	4619      	mov	r1, r3
 8005158:	483d      	ldr	r0, [pc, #244]	; (8005250 <MX_ADC2_Init+0x204>)
 800515a:	f003 f831 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005164:	f000 fdba 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005168:	2302      	movs	r3, #2
 800516a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800516c:	2307      	movs	r3, #7
 800516e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005170:	463b      	mov	r3, r7
 8005172:	4619      	mov	r1, r3
 8005174:	4836      	ldr	r0, [pc, #216]	; (8005250 <MX_ADC2_Init+0x204>)
 8005176:	f003 f823 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005180:	f000 fdac 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005184:	2303      	movs	r3, #3
 8005186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005188:	2308      	movs	r3, #8
 800518a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800518c:	463b      	mov	r3, r7
 800518e:	4619      	mov	r1, r3
 8005190:	482f      	ldr	r0, [pc, #188]	; (8005250 <MX_ADC2_Init+0x204>)
 8005192:	f003 f815 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800519c:	f000 fd9e 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80051a0:	2304      	movs	r3, #4
 80051a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80051a4:	2309      	movs	r3, #9
 80051a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051a8:	463b      	mov	r3, r7
 80051aa:	4619      	mov	r1, r3
 80051ac:	4828      	ldr	r0, [pc, #160]	; (8005250 <MX_ADC2_Init+0x204>)
 80051ae:	f003 f807 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80051b8:	f000 fd90 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80051bc:	2305      	movs	r3, #5
 80051be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80051c0:	230a      	movs	r3, #10
 80051c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051c4:	463b      	mov	r3, r7
 80051c6:	4619      	mov	r1, r3
 80051c8:	4821      	ldr	r0, [pc, #132]	; (8005250 <MX_ADC2_Init+0x204>)
 80051ca:	f002 fff9 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80051d4:	f000 fd82 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80051d8:	2306      	movs	r3, #6
 80051da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80051dc:	230b      	movs	r3, #11
 80051de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051e0:	463b      	mov	r3, r7
 80051e2:	4619      	mov	r1, r3
 80051e4:	481a      	ldr	r0, [pc, #104]	; (8005250 <MX_ADC2_Init+0x204>)
 80051e6:	f002 ffeb 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80051f0:	f000 fd74 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80051f4:	2307      	movs	r3, #7
 80051f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80051f8:	230c      	movs	r3, #12
 80051fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051fc:	463b      	mov	r3, r7
 80051fe:	4619      	mov	r1, r3
 8005200:	4813      	ldr	r0, [pc, #76]	; (8005250 <MX_ADC2_Init+0x204>)
 8005202:	f002 ffdd 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800520c:	f000 fd66 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005210:	2308      	movs	r3, #8
 8005212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005214:	230d      	movs	r3, #13
 8005216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005218:	463b      	mov	r3, r7
 800521a:	4619      	mov	r1, r3
 800521c:	480c      	ldr	r0, [pc, #48]	; (8005250 <MX_ADC2_Init+0x204>)
 800521e:	f002 ffcf 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005228:	f000 fd58 	bl	8005cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800522c:	2309      	movs	r3, #9
 800522e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005230:	230e      	movs	r3, #14
 8005232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005234:	463b      	mov	r3, r7
 8005236:	4619      	mov	r1, r3
 8005238:	4805      	ldr	r0, [pc, #20]	; (8005250 <MX_ADC2_Init+0x204>)
 800523a:	f002 ffc1 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005244:	f000 fd4a 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	2003e8e4 	.word	0x2003e8e4
 8005254:	40012100 	.word	0x40012100
 8005258:	0f000001 	.word	0x0f000001

0800525c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <MX_I2C1_Init+0x50>)
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <MX_I2C1_Init+0x54>)
 8005264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <MX_I2C1_Init+0x50>)
 8005268:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <MX_I2C1_Init+0x58>)
 800526a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <MX_I2C1_Init+0x50>)
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <MX_I2C1_Init+0x50>)
 8005274:	2200      	movs	r2, #0
 8005276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <MX_I2C1_Init+0x50>)
 800527a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800527e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <MX_I2C1_Init+0x50>)
 8005282:	2200      	movs	r2, #0
 8005284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <MX_I2C1_Init+0x50>)
 8005288:	2200      	movs	r2, #0
 800528a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800528c:	4b07      	ldr	r3, [pc, #28]	; (80052ac <MX_I2C1_Init+0x50>)
 800528e:	2200      	movs	r2, #0
 8005290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <MX_I2C1_Init+0x50>)
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005298:	4804      	ldr	r0, [pc, #16]	; (80052ac <MX_I2C1_Init+0x50>)
 800529a:	f004 f8cb 	bl	8009434 <HAL_I2C_Init>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052a4:	f000 fd1a 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2003e92c 	.word	0x2003e92c
 80052b0:	40005400 	.word	0x40005400
 80052b4:	000186a0 	.word	0x000186a0

080052b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <MX_I2C2_Init+0x50>)
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <MX_I2C2_Init+0x54>)
 80052c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <MX_I2C2_Init+0x50>)
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <MX_I2C2_Init+0x58>)
 80052c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052c8:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <MX_I2C2_Init+0x50>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <MX_I2C2_Init+0x50>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <MX_I2C2_Init+0x50>)
 80052d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <MX_I2C2_Init+0x50>)
 80052de:	2200      	movs	r2, #0
 80052e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <MX_I2C2_Init+0x50>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <MX_I2C2_Init+0x50>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <MX_I2C2_Init+0x50>)
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80052f4:	4804      	ldr	r0, [pc, #16]	; (8005308 <MX_I2C2_Init+0x50>)
 80052f6:	f004 f89d 	bl	8009434 <HAL_I2C_Init>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005300:	f000 fcec 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	2003e9c0 	.word	0x2003e9c0
 800530c:	40005800 	.word	0x40005800
 8005310:	000186a0 	.word	0x000186a0

08005314 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <MX_SDIO_SD_Init+0x38>)
 800531a:	4a0d      	ldr	r2, [pc, #52]	; (8005350 <MX_SDIO_SD_Init+0x3c>)
 800531c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <MX_SDIO_SD_Init+0x38>)
 8005320:	2200      	movs	r2, #0
 8005322:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <MX_SDIO_SD_Init+0x38>)
 8005326:	2200      	movs	r2, #0
 8005328:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <MX_SDIO_SD_Init+0x38>)
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <MX_SDIO_SD_Init+0x38>)
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <MX_SDIO_SD_Init+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <MX_SDIO_SD_Init+0x38>)
 800533e:	2202      	movs	r2, #2
 8005340:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	2003ebc0 	.word	0x2003ebc0
 8005350:	40012c00 	.word	0x40012c00

08005354 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <MX_SPI2_Init+0x64>)
 800535a:	4a18      	ldr	r2, [pc, #96]	; (80053bc <MX_SPI2_Init+0x68>)
 800535c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <MX_SPI2_Init+0x64>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005372:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005374:	2202      	movs	r2, #2
 8005376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <MX_SPI2_Init+0x64>)
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005388:	2228      	movs	r2, #40	; 0x28
 800538a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <MX_SPI2_Init+0x64>)
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <MX_SPI2_Init+0x64>)
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <MX_SPI2_Init+0x64>)
 800539a:	2200      	movs	r2, #0
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <MX_SPI2_Init+0x64>)
 80053a0:	220a      	movs	r2, #10
 80053a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80053a4:	4804      	ldr	r0, [pc, #16]	; (80053b8 <MX_SPI2_Init+0x64>)
 80053a6:	f007 f977 	bl	800c698 <HAL_SPI_Init>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80053b0:	f000 fc94 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2003e80c 	.word	0x2003e80c
 80053bc:	40003800 	.word	0x40003800

080053c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b09a      	sub	sp, #104	; 0x68
 80053c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f00e fb01 	bl	80139d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053de:	f107 0320 	add.w	r3, r7, #32
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	611a      	str	r2, [r3, #16]
 80053ee:	615a      	str	r2, [r3, #20]
 80053f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053f2:	463b      	mov	r3, r7
 80053f4:	2220      	movs	r2, #32
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f00e faec 	bl	80139d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053fe:	4b42      	ldr	r3, [pc, #264]	; (8005508 <MX_TIM1_Init+0x148>)
 8005400:	4a42      	ldr	r2, [pc, #264]	; (800550c <MX_TIM1_Init+0x14c>)
 8005402:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005404:	4b40      	ldr	r3, [pc, #256]	; (8005508 <MX_TIM1_Init+0x148>)
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <MX_TIM1_Init+0x148>)
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005410:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <MX_TIM1_Init+0x148>)
 8005412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005418:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <MX_TIM1_Init+0x148>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <MX_TIM1_Init+0x148>)
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005424:	4b38      	ldr	r3, [pc, #224]	; (8005508 <MX_TIM1_Init+0x148>)
 8005426:	2200      	movs	r2, #0
 8005428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800542a:	4837      	ldr	r0, [pc, #220]	; (8005508 <MX_TIM1_Init+0x148>)
 800542c:	f007 fed7 	bl	800d1de <HAL_TIM_PWM_Init>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005436:	f000 fc51 	bl	8005cdc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800543a:	2303      	movs	r3, #3
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800543e:	2300      	movs	r3, #0
 8005440:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005442:	2301      	movs	r3, #1
 8005444:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005446:	2300      	movs	r3, #0
 8005448:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800544e:	2300      	movs	r3, #0
 8005450:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005452:	2301      	movs	r3, #1
 8005454:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005456:	2300      	movs	r3, #0
 8005458:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800545e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005462:	4619      	mov	r1, r3
 8005464:	4828      	ldr	r0, [pc, #160]	; (8005508 <MX_TIM1_Init+0x148>)
 8005466:	f007 ff23 	bl	800d2b0 <HAL_TIM_Encoder_Init>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005470:	f000 fc34 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005474:	2300      	movs	r3, #0
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800547c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005480:	4619      	mov	r1, r3
 8005482:	4821      	ldr	r0, [pc, #132]	; (8005508 <MX_TIM1_Init+0x148>)
 8005484:	f008 fc4a 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800548e:	f000 fc25 	bl	8005cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005492:	2360      	movs	r3, #96	; 0x60
 8005494:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800549a:	2300      	movs	r3, #0
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800549e:	2300      	movs	r3, #0
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054ae:	f107 0320 	add.w	r3, r7, #32
 80054b2:	2208      	movs	r2, #8
 80054b4:	4619      	mov	r1, r3
 80054b6:	4814      	ldr	r0, [pc, #80]	; (8005508 <MX_TIM1_Init+0x148>)
 80054b8:	f008 f8cc 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80054c2:	f000 fc0b 	bl	8005cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80054e4:	463b      	mov	r3, r7
 80054e6:	4619      	mov	r1, r3
 80054e8:	4807      	ldr	r0, [pc, #28]	; (8005508 <MX_TIM1_Init+0x148>)
 80054ea:	f008 fc93 	bl	800de14 <HAL_TIMEx_ConfigBreakDeadTime>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80054f4:	f000 fbf2 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80054f8:	4803      	ldr	r0, [pc, #12]	; (8005508 <MX_TIM1_Init+0x148>)
 80054fa:	f000 ffdf 	bl	80064bc <HAL_TIM_MspPostInit>

}
 80054fe:	bf00      	nop
 8005500:	3768      	adds	r7, #104	; 0x68
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2003eb80 	.word	0x2003eb80
 800550c:	40010000 	.word	0x40010000

08005510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005516:	f107 0320 	add.w	r3, r7, #32
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	609a      	str	r2, [r3, #8]
 800552a:	60da      	str	r2, [r3, #12]
 800552c:	611a      	str	r2, [r3, #16]
 800552e:	615a      	str	r2, [r3, #20]
 8005530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005532:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <MX_TIM3_Init+0xc0>)
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <MX_TIM3_Init+0xc4>)
 8005536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <MX_TIM3_Init+0xc0>)
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <MX_TIM3_Init+0xc0>)
 8005540:	2200      	movs	r2, #0
 8005542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <MX_TIM3_Init+0xc0>)
 8005546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800554a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <MX_TIM3_Init+0xc0>)
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005552:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <MX_TIM3_Init+0xc0>)
 8005554:	2200      	movs	r2, #0
 8005556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005558:	481d      	ldr	r0, [pc, #116]	; (80055d0 <MX_TIM3_Init+0xc0>)
 800555a:	f007 fe40 	bl	800d1de <HAL_TIM_PWM_Init>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005564:	f000 fbba 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005570:	f107 0320 	add.w	r3, r7, #32
 8005574:	4619      	mov	r1, r3
 8005576:	4816      	ldr	r0, [pc, #88]	; (80055d0 <MX_TIM3_Init+0xc0>)
 8005578:	f008 fbd0 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005582:	f000 fbab 	bl	8005cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005586:	2360      	movs	r3, #96	; 0x60
 8005588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	2200      	movs	r2, #0
 800559a:	4619      	mov	r1, r3
 800559c:	480c      	ldr	r0, [pc, #48]	; (80055d0 <MX_TIM3_Init+0xc0>)
 800559e:	f008 f859 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80055a8:	f000 fb98 	bl	8005cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	2204      	movs	r2, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4807      	ldr	r0, [pc, #28]	; (80055d0 <MX_TIM3_Init+0xc0>)
 80055b4:	f008 f84e 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80055be:	f000 fb8d 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80055c2:	4803      	ldr	r0, [pc, #12]	; (80055d0 <MX_TIM3_Init+0xc0>)
 80055c4:	f000 ff7a 	bl	80064bc <HAL_TIM_MspPostInit>

}
 80055c8:	bf00      	nop
 80055ca:	3728      	adds	r7, #40	; 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	2003ea18 	.word	0x2003ea18
 80055d4:	40000400 	.word	0x40000400

080055d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055de:	f107 0320 	add.w	r3, r7, #32
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	609a      	str	r2, [r3, #8]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	615a      	str	r2, [r3, #20]
 80055f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80055fa:	4b27      	ldr	r3, [pc, #156]	; (8005698 <MX_TIM4_Init+0xc0>)
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <MX_TIM4_Init+0xc4>)
 80055fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005602:	2200      	movs	r2, #0
 8005604:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005608:	2200      	movs	r2, #0
 800560a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <MX_TIM4_Init+0xc0>)
 800560e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005612:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <MX_TIM4_Init+0xc0>)
 800561c:	2200      	movs	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005620:	481d      	ldr	r0, [pc, #116]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005622:	f007 fddc 	bl	800d1de <HAL_TIM_PWM_Init>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800562c:	f000 fb56 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005638:	f107 0320 	add.w	r3, r7, #32
 800563c:	4619      	mov	r1, r3
 800563e:	4816      	ldr	r0, [pc, #88]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005640:	f008 fb6c 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800564a:	f000 fb47 	bl	8005cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800564e:	2360      	movs	r3, #96	; 0x60
 8005650:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	2208      	movs	r2, #8
 8005662:	4619      	mov	r1, r3
 8005664:	480c      	ldr	r0, [pc, #48]	; (8005698 <MX_TIM4_Init+0xc0>)
 8005666:	f007 fff5 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005670:	f000 fb34 	bl	8005cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005674:	1d3b      	adds	r3, r7, #4
 8005676:	220c      	movs	r2, #12
 8005678:	4619      	mov	r1, r3
 800567a:	4807      	ldr	r0, [pc, #28]	; (8005698 <MX_TIM4_Init+0xc0>)
 800567c:	f007 ffea 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005686:	f000 fb29 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800568a:	4803      	ldr	r0, [pc, #12]	; (8005698 <MX_TIM4_Init+0xc0>)
 800568c:	f000 ff16 	bl	80064bc <HAL_TIM_MspPostInit>

}
 8005690:	bf00      	nop
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	2003e8a4 	.word	0x2003e8a4
 800569c:	40000800 	.word	0x40000800

080056a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056a6:	463b      	mov	r3, r7
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80056ae:	4b15      	ldr	r3, [pc, #84]	; (8005704 <MX_TIM6_Init+0x64>)
 80056b0:	4a15      	ldr	r2, [pc, #84]	; (8005708 <MX_TIM6_Init+0x68>)
 80056b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80056b4:	4b13      	ldr	r3, [pc, #76]	; (8005704 <MX_TIM6_Init+0x64>)
 80056b6:	2259      	movs	r2, #89	; 0x59
 80056b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <MX_TIM6_Init+0x64>)
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80056c0:	4b10      	ldr	r3, [pc, #64]	; (8005704 <MX_TIM6_Init+0x64>)
 80056c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <MX_TIM6_Init+0x64>)
 80056ca:	2280      	movs	r2, #128	; 0x80
 80056cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80056ce:	480d      	ldr	r0, [pc, #52]	; (8005704 <MX_TIM6_Init+0x64>)
 80056d0:	f007 fd36 	bl	800d140 <HAL_TIM_Base_Init>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80056da:	f000 faff 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80056e6:	463b      	mov	r3, r7
 80056e8:	4619      	mov	r1, r3
 80056ea:	4806      	ldr	r0, [pc, #24]	; (8005704 <MX_TIM6_Init+0x64>)
 80056ec:	f008 fb16 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80056f6:	f000 faf1 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	2003eb40 	.word	0x2003eb40
 8005708:	40001000 	.word	0x40001000

0800570c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005712:	463b      	mov	r3, r7
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <MX_TIM7_Init+0x60>)
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <MX_TIM7_Init+0x64>)
 800571e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <MX_TIM7_Init+0x60>)
 8005722:	22b3      	movs	r2, #179	; 0xb3
 8005724:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <MX_TIM7_Init+0x60>)
 8005728:	2200      	movs	r2, #0
 800572a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <MX_TIM7_Init+0x60>)
 800572e:	2231      	movs	r2, #49	; 0x31
 8005730:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <MX_TIM7_Init+0x60>)
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005738:	480c      	ldr	r0, [pc, #48]	; (800576c <MX_TIM7_Init+0x60>)
 800573a:	f007 fd01 	bl	800d140 <HAL_TIM_Base_Init>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005744:	f000 faca 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005748:	2300      	movs	r3, #0
 800574a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005750:	463b      	mov	r3, r7
 8005752:	4619      	mov	r1, r3
 8005754:	4805      	ldr	r0, [pc, #20]	; (800576c <MX_TIM7_Init+0x60>)
 8005756:	f008 fae1 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005760:	f000 fabc 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	2003ece4 	.word	0x2003ece4
 8005770:	40001400 	.word	0x40001400

08005774 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f00e f927 	bl	80139d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <MX_TIM8_Init+0xa8>)
 8005792:	4a23      	ldr	r2, [pc, #140]	; (8005820 <MX_TIM8_Init+0xac>)
 8005794:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005796:	4b21      	ldr	r3, [pc, #132]	; (800581c <MX_TIM8_Init+0xa8>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800579c:	4b1f      	ldr	r3, [pc, #124]	; (800581c <MX_TIM8_Init+0xa8>)
 800579e:	2210      	movs	r2, #16
 80057a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <MX_TIM8_Init+0xa8>)
 80057a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057aa:	4b1c      	ldr	r3, [pc, #112]	; (800581c <MX_TIM8_Init+0xa8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <MX_TIM8_Init+0xa8>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <MX_TIM8_Init+0xa8>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057bc:	2303      	movs	r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057d4:	2301      	movs	r3, #1
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057d8:	2300      	movs	r3, #0
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4619      	mov	r1, r3
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <MX_TIM8_Init+0xa8>)
 80057e8:	f007 fd62 	bl	800d2b0 <HAL_TIM_Encoder_Init>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80057f2:	f000 fa73 	bl	8005cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4806      	ldr	r0, [pc, #24]	; (800581c <MX_TIM8_Init+0xa8>)
 8005804:	f008 fa8a 	bl	800dd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800580e:	f000 fa65 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005812:	bf00      	nop
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2003e864 	.word	0x2003e864
 8005820:	40010400 	.word	0x40010400

08005824 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
 8005838:	615a      	str	r2, [r3, #20]
 800583a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <MX_TIM10_Init+0x94>)
 800583e:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <MX_TIM10_Init+0x98>)
 8005840:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <MX_TIM10_Init+0x94>)
 8005844:	2200      	movs	r2, #0
 8005846:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <MX_TIM10_Init+0x94>)
 800584a:	2200      	movs	r2, #0
 800584c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800584e:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <MX_TIM10_Init+0x94>)
 8005850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005854:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <MX_TIM10_Init+0x94>)
 8005858:	2200      	movs	r2, #0
 800585a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <MX_TIM10_Init+0x94>)
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005862:	4815      	ldr	r0, [pc, #84]	; (80058b8 <MX_TIM10_Init+0x94>)
 8005864:	f007 fc6c 	bl	800d140 <HAL_TIM_Base_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800586e:	f000 fa35 	bl	8005cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005872:	4811      	ldr	r0, [pc, #68]	; (80058b8 <MX_TIM10_Init+0x94>)
 8005874:	f007 fcb3 	bl	800d1de <HAL_TIM_PWM_Init>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800587e:	f000 fa2d 	bl	8005cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005882:	2360      	movs	r3, #96	; 0x60
 8005884:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	2200      	movs	r2, #0
 8005896:	4619      	mov	r1, r3
 8005898:	4807      	ldr	r0, [pc, #28]	; (80058b8 <MX_TIM10_Init+0x94>)
 800589a:	f007 fedb 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80058a4:	f000 fa1a 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80058a8:	4803      	ldr	r0, [pc, #12]	; (80058b8 <MX_TIM10_Init+0x94>)
 80058aa:	f000 fe07 	bl	80064bc <HAL_TIM_MspPostInit>

}
 80058ae:	bf00      	nop
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	2003e980 	.word	0x2003e980
 80058bc:	40014400 	.word	0x40014400

080058c0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	611a      	str	r2, [r3, #16]
 80058d4:	615a      	str	r2, [r3, #20]
 80058d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <MX_TIM11_Init+0x94>)
 80058da:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <MX_TIM11_Init+0x98>)
 80058dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80058de:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <MX_TIM11_Init+0x94>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e4:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <MX_TIM11_Init+0x94>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80058ea:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <MX_TIM11_Init+0x94>)
 80058ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <MX_TIM11_Init+0x94>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058f8:	4b16      	ldr	r3, [pc, #88]	; (8005954 <MX_TIM11_Init+0x94>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80058fe:	4815      	ldr	r0, [pc, #84]	; (8005954 <MX_TIM11_Init+0x94>)
 8005900:	f007 fc1e 	bl	800d140 <HAL_TIM_Base_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800590a:	f000 f9e7 	bl	8005cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800590e:	4811      	ldr	r0, [pc, #68]	; (8005954 <MX_TIM11_Init+0x94>)
 8005910:	f007 fc65 	bl	800d1de <HAL_TIM_PWM_Init>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800591a:	f000 f9df 	bl	8005cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800591e:	2360      	movs	r3, #96	; 0x60
 8005920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	2200      	movs	r2, #0
 8005932:	4619      	mov	r1, r3
 8005934:	4807      	ldr	r0, [pc, #28]	; (8005954 <MX_TIM11_Init+0x94>)
 8005936:	f007 fe8d 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005940:	f000 f9cc 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005944:	4803      	ldr	r0, [pc, #12]	; (8005954 <MX_TIM11_Init+0x94>)
 8005946:	f000 fdb9 	bl	80064bc <HAL_TIM_MspPostInit>

}
 800594a:	bf00      	nop
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2003eaa0 	.word	0x2003eaa0
 8005958:	40014800 	.word	0x40014800

0800595c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <MX_TIM13_Init+0x40>)
 8005962:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <MX_TIM13_Init+0x44>)
 8005964:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <MX_TIM13_Init+0x40>)
 8005968:	2259      	movs	r2, #89	; 0x59
 800596a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <MX_TIM13_Init+0x40>)
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <MX_TIM13_Init+0x40>)
 8005974:	f242 720f 	movw	r2, #9999	; 0x270f
 8005978:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <MX_TIM13_Init+0x40>)
 800597c:	2200      	movs	r2, #0
 800597e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <MX_TIM13_Init+0x40>)
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <MX_TIM13_Init+0x40>)
 8005988:	f007 fbda 	bl	800d140 <HAL_TIM_Base_Init>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005992:	f000 f9a3 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2003ea60 	.word	0x2003ea60
 80059a0:	40001c00 	.word	0x40001c00

080059a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059a8:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059aa:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <MX_USART2_UART_Init+0x50>)
 80059ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059ca:	220c      	movs	r2, #12
 80059cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059da:	4805      	ldr	r0, [pc, #20]	; (80059f0 <MX_USART2_UART_Init+0x4c>)
 80059dc:	f008 fa80 	bl	800dee0 <HAL_UART_Init>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80059e6:	f000 f979 	bl	8005cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	2003ec44 	.word	0x2003ec44
 80059f4:	40004400 	.word	0x40004400

080059f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <MX_DMA_Init+0x5c>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <MX_DMA_Init+0x5c>)
 8005a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <MX_DMA_Init+0x5c>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	607b      	str	r3, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	203a      	movs	r0, #58	; 0x3a
 8005a20:	f002 ff59 	bl	80088d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005a24:	203a      	movs	r0, #58	; 0x3a
 8005a26:	f002 ff72 	bl	800890e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	203b      	movs	r0, #59	; 0x3b
 8005a30:	f002 ff51 	bl	80088d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005a34:	203b      	movs	r0, #59	; 0x3b
 8005a36:	f002 ff6a 	bl	800890e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	2045      	movs	r0, #69	; 0x45
 8005a40:	f002 ff49 	bl	80088d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005a44:	2045      	movs	r0, #69	; 0x45
 8005a46:	f002 ff62 	bl	800890e <HAL_NVIC_EnableIRQ>

}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40023800 	.word	0x40023800

08005a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a5e:	f107 031c 	add.w	r3, r7, #28
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	4b94      	ldr	r3, [pc, #592]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	4a93      	ldr	r2, [pc, #588]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a78:	f043 0310 	orr.w	r3, r3, #16
 8005a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7e:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	4b8d      	ldr	r3, [pc, #564]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4a8c      	ldr	r2, [pc, #560]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9a:	4b8a      	ldr	r3, [pc, #552]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a85      	ldr	r2, [pc, #532]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ab0:	f043 0304 	orr.w	r3, r3, #4
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b83      	ldr	r3, [pc, #524]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	4a7e      	ldr	r2, [pc, #504]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad2:	4b7c      	ldr	r3, [pc, #496]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	4b78      	ldr	r3, [pc, #480]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	4a77      	ldr	r2, [pc, #476]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	6313      	str	r3, [r2, #48]	; 0x30
 8005aee:	4b75      	ldr	r3, [pc, #468]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	4b71      	ldr	r3, [pc, #452]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	4a70      	ldr	r2, [pc, #448]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005b04:	f043 0308 	orr.w	r3, r3, #8
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0a:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <MX_GPIO_Init+0x26c>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005b16:	2200      	movs	r2, #0
 8005b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b1c:	486a      	ldr	r0, [pc, #424]	; (8005cc8 <MX_GPIO_Init+0x270>)
 8005b1e:	f003 fc6f 	bl	8009400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005b22:	2200      	movs	r2, #0
 8005b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b28:	4868      	ldr	r0, [pc, #416]	; (8005ccc <MX_GPIO_Init+0x274>)
 8005b2a:	f003 fc69 	bl	8009400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b34:	4866      	ldr	r0, [pc, #408]	; (8005cd0 <MX_GPIO_Init+0x278>)
 8005b36:	f003 fc63 	bl	8009400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005b40:	4864      	ldr	r0, [pc, #400]	; (8005cd4 <MX_GPIO_Init+0x27c>)
 8005b42:	f003 fc5d 	bl	8009400 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005b46:	2304      	movs	r3, #4
 8005b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b52:	f107 031c 	add.w	r3, r7, #28
 8005b56:	4619      	mov	r1, r3
 8005b58:	485b      	ldr	r0, [pc, #364]	; (8005cc8 <MX_GPIO_Init+0x270>)
 8005b5a:	f003 fa8f 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005b5e:	230f      	movs	r3, #15
 8005b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b62:	2303      	movs	r3, #3
 8005b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b6a:	f107 031c 	add.w	r3, r7, #28
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4859      	ldr	r0, [pc, #356]	; (8005cd8 <MX_GPIO_Init+0x280>)
 8005b72:	f003 fa83 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005b76:	23e1      	movs	r3, #225	; 0xe1
 8005b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b82:	f107 031c 	add.w	r3, r7, #28
 8005b86:	4619      	mov	r1, r3
 8005b88:	4852      	ldr	r0, [pc, #328]	; (8005cd4 <MX_GPIO_Init+0x27c>)
 8005b8a:	f003 fa77 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b92:	2303      	movs	r3, #3
 8005b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b9a:	f107 031c 	add.w	r3, r7, #28
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	484a      	ldr	r0, [pc, #296]	; (8005ccc <MX_GPIO_Init+0x274>)
 8005ba2:	f003 fa6b 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005baa:	2300      	movs	r3, #0
 8005bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb2:	f107 031c 	add.w	r3, r7, #28
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4844      	ldr	r0, [pc, #272]	; (8005ccc <MX_GPIO_Init+0x274>)
 8005bba:	f003 fa5f 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8005bbe:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8005bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bcc:	f107 031c 	add.w	r3, r7, #28
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	483d      	ldr	r0, [pc, #244]	; (8005cc8 <MX_GPIO_Init+0x270>)
 8005bd4:	f003 fa52 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005bd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bde:	2301      	movs	r3, #1
 8005be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be6:	2300      	movs	r3, #0
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bea:	f107 031c 	add.w	r3, r7, #28
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4835      	ldr	r0, [pc, #212]	; (8005cc8 <MX_GPIO_Init+0x270>)
 8005bf2:	f003 fa43 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c08:	f107 031c 	add.w	r3, r7, #28
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	482f      	ldr	r0, [pc, #188]	; (8005ccc <MX_GPIO_Init+0x274>)
 8005c10:	f003 fa34 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	4619      	mov	r1, r3
 8005c28:	4829      	ldr	r0, [pc, #164]	; (8005cd0 <MX_GPIO_Init+0x278>)
 8005c2a:	f003 fa27 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c34:	2301      	movs	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	4619      	mov	r1, r3
 8005c46:	4822      	ldr	r0, [pc, #136]	; (8005cd0 <MX_GPIO_Init+0x278>)
 8005c48:	f003 fa18 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c52:	2301      	movs	r3, #1
 8005c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c56:	2301      	movs	r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c5e:	f107 031c 	add.w	r3, r7, #28
 8005c62:	4619      	mov	r1, r3
 8005c64:	481a      	ldr	r0, [pc, #104]	; (8005cd0 <MX_GPIO_Init+0x278>)
 8005c66:	f003 fa09 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005c6a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005c6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c70:	2301      	movs	r3, #1
 8005c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c7c:	f107 031c 	add.w	r3, r7, #28
 8005c80:	4619      	mov	r1, r3
 8005c82:	4814      	ldr	r0, [pc, #80]	; (8005cd4 <MX_GPIO_Init+0x27c>)
 8005c84:	f003 f9fa 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c96:	f107 031c 	add.w	r3, r7, #28
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <MX_GPIO_Init+0x27c>)
 8005c9e:	f003 f9ed 	bl	800907c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8005ca2:	239b      	movs	r3, #155	; 0x9b
 8005ca4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005caa:	2301      	movs	r3, #1
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cae:	f107 031c 	add.w	r3, r7, #28
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4806      	ldr	r0, [pc, #24]	; (8005cd0 <MX_GPIO_Init+0x278>)
 8005cb6:	f003 f9e1 	bl	800907c <HAL_GPIO_Init>

}
 8005cba:	bf00      	nop
 8005cbc:	3730      	adds	r7, #48	; 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40020400 	.word	0x40020400
 8005cd0:	40020c00 	.word	0x40020c00
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	40020800 	.word	0x40020800

08005cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ce0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ce2:	e7fe      	b.n	8005ce2 <Error_Handler+0x6>

08005ce4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d08:	6453      	str	r3, [r2, #68]	; 0x44
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_MspInit+0x4c>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800

08005d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	; 0x30
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d4c:	f107 031c 	add.w	r3, r7, #28
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_ADC_MspInit+0x148>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	f040 808e 	bne.w	8005e84 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	4a47      	ldr	r2, [pc, #284]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d76:	6453      	str	r3, [r2, #68]	; 0x44
 8005d78:	4b45      	ldr	r3, [pc, #276]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	4b41      	ldr	r3, [pc, #260]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	4a40      	ldr	r2, [pc, #256]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6313      	str	r3, [r2, #48]	; 0x30
 8005d94:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	4b3a      	ldr	r3, [pc, #232]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	4a39      	ldr	r2, [pc, #228]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	6313      	str	r3, [r2, #48]	; 0x30
 8005db0:	4b37      	ldr	r3, [pc, #220]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	4a32      	ldr	r2, [pc, #200]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	6313      	str	r3, [r2, #48]	; 0x30
 8005dcc:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <HAL_ADC_MspInit+0x14c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005dd8:	230f      	movs	r3, #15
 8005dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005de4:	f107 031c 	add.w	r3, r7, #28
 8005de8:	4619      	mov	r1, r3
 8005dea:	482a      	ldr	r0, [pc, #168]	; (8005e94 <HAL_ADC_MspInit+0x150>)
 8005dec:	f003 f946 	bl	800907c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005df0:	23ff      	movs	r3, #255	; 0xff
 8005df2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005df4:	2303      	movs	r3, #3
 8005df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfc:	f107 031c 	add.w	r3, r7, #28
 8005e00:	4619      	mov	r1, r3
 8005e02:	4825      	ldr	r0, [pc, #148]	; (8005e98 <HAL_ADC_MspInit+0x154>)
 8005e04:	f003 f93a 	bl	800907c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e14:	f107 031c 	add.w	r3, r7, #28
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4820      	ldr	r0, [pc, #128]	; (8005e9c <HAL_ADC_MspInit+0x158>)
 8005e1c:	f003 f92e 	bl	800907c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e22:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <HAL_ADC_MspInit+0x160>)
 8005e24:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e26:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e2c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e3a:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e40:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e48:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e50:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e58:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e60:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e68:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e6a:	f002 fd6b 	bl	8008944 <HAL_DMA_Init>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005e74:	f7ff ff32 	bl	8005cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e7e:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <HAL_ADC_MspInit+0x15c>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e84:	bf00      	nop
 8005e86:	3730      	adds	r7, #48	; 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40012100 	.word	0x40012100
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40020800 	.word	0x40020800
 8005e98:	40020000 	.word	0x40020000
 8005e9c:	40020400 	.word	0x40020400
 8005ea0:	2003ec84 	.word	0x2003ec84
 8005ea4:	40026440 	.word	0x40026440

08005ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08c      	sub	sp, #48	; 0x30
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 031c 	add.w	r3, r7, #28
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a32      	ldr	r2, [pc, #200]	; (8005f90 <HAL_I2C_MspInit+0xe8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12c      	bne.n	8005f24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eda:	4b2e      	ldr	r3, [pc, #184]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ee6:	23c0      	movs	r3, #192	; 0xc0
 8005ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eea:	2312      	movs	r3, #18
 8005eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005efa:	f107 031c 	add.w	r3, r7, #28
 8005efe:	4619      	mov	r1, r3
 8005f00:	4825      	ldr	r0, [pc, #148]	; (8005f98 <HAL_I2C_MspInit+0xf0>)
 8005f02:	f003 f8bb 	bl	800907c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f22:	e031      	b.n	8005f88 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_I2C_MspInit+0xf4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d12c      	bne.n	8005f88 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f50:	2312      	movs	r3, #18
 8005f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f60:	f107 031c 	add.w	r3, r7, #28
 8005f64:	4619      	mov	r1, r3
 8005f66:	480c      	ldr	r0, [pc, #48]	; (8005f98 <HAL_I2C_MspInit+0xf0>)
 8005f68:	f003 f888 	bl	800907c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	4a07      	ldr	r2, [pc, #28]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_I2C_MspInit+0xec>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40005400 	.word	0x40005400
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40020400 	.word	0x40020400
 8005f9c:	40005800 	.word	0x40005800

08005fa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a69      	ldr	r2, [pc, #420]	; (8006164 <HAL_SD_MspInit+0x1c4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 80cb 	bne.w	800615a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	4b67      	ldr	r3, [pc, #412]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	4a66      	ldr	r2, [pc, #408]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005fce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd4:	4b64      	ldr	r3, [pc, #400]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	4b60      	ldr	r3, [pc, #384]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	4a5f      	ldr	r2, [pc, #380]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005fea:	f043 0304 	orr.w	r3, r3, #4
 8005fee:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff0:	4b5d      	ldr	r3, [pc, #372]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	4b59      	ldr	r3, [pc, #356]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	4a58      	ldr	r2, [pc, #352]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 8006006:	f043 0308 	orr.w	r3, r3, #8
 800600a:	6313      	str	r3, [r2, #48]	; 0x30
 800600c:	4b56      	ldr	r3, [pc, #344]	; (8006168 <HAL_SD_MspInit+0x1c8>)
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006018:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800601c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601e:	2302      	movs	r3, #2
 8006020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006026:	2303      	movs	r3, #3
 8006028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800602a:	230c      	movs	r3, #12
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800602e:	f107 0314 	add.w	r3, r7, #20
 8006032:	4619      	mov	r1, r3
 8006034:	484d      	ldr	r0, [pc, #308]	; (800616c <HAL_SD_MspInit+0x1cc>)
 8006036:	f003 f821 	bl	800907c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800603a:	2304      	movs	r3, #4
 800603c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603e:	2302      	movs	r3, #2
 8006040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006046:	2303      	movs	r3, #3
 8006048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800604a:	230c      	movs	r3, #12
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800604e:	f107 0314 	add.w	r3, r7, #20
 8006052:	4619      	mov	r1, r3
 8006054:	4846      	ldr	r0, [pc, #280]	; (8006170 <HAL_SD_MspInit+0x1d0>)
 8006056:	f003 f811 	bl	800907c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800605a:	4b46      	ldr	r3, [pc, #280]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 800605c:	4a46      	ldr	r2, [pc, #280]	; (8006178 <HAL_SD_MspInit+0x1d8>)
 800605e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006060:	4b44      	ldr	r3, [pc, #272]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 8006062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006066:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006068:	4b42      	ldr	r3, [pc, #264]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800606e:	4b41      	ldr	r3, [pc, #260]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 8006070:	2200      	movs	r2, #0
 8006072:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006074:	4b3f      	ldr	r3, [pc, #252]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 8006076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800607a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800607c:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 800607e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006082:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006084:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 8006086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800608a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800608c:	4b39      	ldr	r3, [pc, #228]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 800608e:	2220      	movs	r2, #32
 8006090:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006092:	4b38      	ldr	r3, [pc, #224]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 8006094:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006098:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800609a:	4b36      	ldr	r3, [pc, #216]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 800609c:	2204      	movs	r2, #4
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80060a0:	4b34      	ldr	r3, [pc, #208]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060a2:	2203      	movs	r2, #3
 80060a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80060a6:	4b33      	ldr	r3, [pc, #204]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80060ae:	4b31      	ldr	r3, [pc, #196]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80060b6:	482f      	ldr	r0, [pc, #188]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060b8:	f002 fc44 	bl	8008944 <HAL_DMA_Init>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80060c2:	f7ff fe0b 	bl	8005cdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40
 80060cc:	4a29      	ldr	r2, [pc, #164]	; (8006174 <HAL_SD_MspInit+0x1d4>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80060d2:	4b2a      	ldr	r3, [pc, #168]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060d4:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <HAL_SD_MspInit+0x1e0>)
 80060d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80060d8:	4b28      	ldr	r3, [pc, #160]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060de:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060e0:	4b26      	ldr	r3, [pc, #152]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060e6:	4b25      	ldr	r3, [pc, #148]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060ec:	4b23      	ldr	r3, [pc, #140]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060f4:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060fc:	4b1f      	ldr	r3, [pc, #124]	; (800617c <HAL_SD_MspInit+0x1dc>)
 80060fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006102:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006104:	4b1d      	ldr	r3, [pc, #116]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006106:	2220      	movs	r2, #32
 8006108:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800610a:	4b1c      	ldr	r3, [pc, #112]	; (800617c <HAL_SD_MspInit+0x1dc>)
 800610c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006110:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006112:	4b1a      	ldr	r3, [pc, #104]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006114:	2204      	movs	r2, #4
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006118:	4b18      	ldr	r3, [pc, #96]	; (800617c <HAL_SD_MspInit+0x1dc>)
 800611a:	2203      	movs	r2, #3
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800611e:	4b17      	ldr	r3, [pc, #92]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006120:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006128:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800612c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800612e:	4813      	ldr	r0, [pc, #76]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006130:	f002 fc08 	bl	8008944 <HAL_DMA_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800613a:	f7ff fdcf 	bl	8005cdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a0e      	ldr	r2, [pc, #56]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006142:	63da      	str	r2, [r3, #60]	; 0x3c
 8006144:	4a0d      	ldr	r2, [pc, #52]	; (800617c <HAL_SD_MspInit+0x1dc>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	2100      	movs	r1, #0
 800614e:	2031      	movs	r0, #49	; 0x31
 8006150:	f002 fbc1 	bl	80088d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006154:	2031      	movs	r0, #49	; 0x31
 8006156:	f002 fbda 	bl	800890e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800615a:	bf00      	nop
 800615c:	3728      	adds	r7, #40	; 0x28
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40023800 	.word	0x40023800
 800616c:	40020800 	.word	0x40020800
 8006170:	40020c00 	.word	0x40020c00
 8006174:	2003e7ac 	.word	0x2003e7ac
 8006178:	40026458 	.word	0x40026458
 800617c:	2003eae0 	.word	0x2003eae0
 8006180:	400264a0 	.word	0x400264a0

08006184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <HAL_SPI_MspInit+0x84>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d12c      	bne.n	8006200 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a17      	ldr	r2, [pc, #92]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061b4:	6413      	str	r3, [r2, #64]	; 0x40
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	4a10      	ldr	r2, [pc, #64]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	6313      	str	r3, [r2, #48]	; 0x30
 80061d2:	4b0e      	ldr	r3, [pc, #56]	; (800620c <HAL_SPI_MspInit+0x88>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80061de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80061e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ec:	2303      	movs	r3, #3
 80061ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061f0:	2305      	movs	r3, #5
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	4619      	mov	r1, r3
 80061fa:	4805      	ldr	r0, [pc, #20]	; (8006210 <HAL_SPI_MspInit+0x8c>)
 80061fc:	f002 ff3e 	bl	800907c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006200:	bf00      	nop
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40003800 	.word	0x40003800
 800620c:	40023800 	.word	0x40023800
 8006210:	40020400 	.word	0x40020400

08006214 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	; 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800621c:	f107 031c 	add.w	r3, r7, #28
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <HAL_TIM_PWM_MspInit+0xd4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d12d      	bne.n	8006292 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	4b2c      	ldr	r3, [pc, #176]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	6453      	str	r3, [r2, #68]	; 0x44
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	4b25      	ldr	r3, [pc, #148]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	4a24      	ldr	r2, [pc, #144]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 800625c:	f043 0310 	orr.w	r3, r3, #16
 8006260:	6313      	str	r3, [r2, #48]	; 0x30
 8006262:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800626e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006274:	2302      	movs	r3, #2
 8006276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006278:	2300      	movs	r3, #0
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627c:	2300      	movs	r3, #0
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006280:	2301      	movs	r3, #1
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006284:	f107 031c 	add.w	r3, r7, #28
 8006288:	4619      	mov	r1, r3
 800628a:	4819      	ldr	r0, [pc, #100]	; (80062f0 <HAL_TIM_PWM_MspInit+0xdc>)
 800628c:	f002 fef6 	bl	800907c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006290:	e026      	b.n	80062e0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_TIM_PWM_MspInit+0xe0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10e      	bne.n	80062ba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	4a11      	ldr	r2, [pc, #68]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062a6:	f043 0302 	orr.w	r3, r3, #2
 80062aa:	6413      	str	r3, [r2, #64]	; 0x40
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
}
 80062b8:	e012      	b.n	80062e0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <HAL_TIM_PWM_MspInit+0xe4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10d      	bne.n	80062e0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	4a07      	ldr	r2, [pc, #28]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	6413      	str	r3, [r2, #64]	; 0x40
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_TIM_PWM_MspInit+0xd8>)
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	3730      	adds	r7, #48	; 0x30
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800

080062fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a3e      	ldr	r2, [pc, #248]	; (8006404 <HAL_TIM_Base_MspInit+0x108>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d116      	bne.n	800633c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006318:	f043 0310 	orr.w	r3, r3, #16
 800631c:	6413      	str	r3, [r2, #64]	; 0x40
 800631e:	4b3a      	ldr	r3, [pc, #232]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800632a:	2200      	movs	r2, #0
 800632c:	2101      	movs	r1, #1
 800632e:	2036      	movs	r0, #54	; 0x36
 8006330:	f002 fad1 	bl	80088d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006334:	2036      	movs	r0, #54	; 0x36
 8006336:	f002 faea 	bl	800890e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800633a:	e05e      	b.n	80063fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a32      	ldr	r2, [pc, #200]	; (800640c <HAL_TIM_Base_MspInit+0x110>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d116      	bne.n	8006374 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a2e      	ldr	r2, [pc, #184]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
 8006356:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006362:	2200      	movs	r2, #0
 8006364:	2100      	movs	r1, #0
 8006366:	2037      	movs	r0, #55	; 0x37
 8006368:	f002 fab5 	bl	80088d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800636c:	2037      	movs	r0, #55	; 0x37
 800636e:	f002 face 	bl	800890e <HAL_NVIC_EnableIRQ>
}
 8006372:	e042      	b.n	80063fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a25      	ldr	r2, [pc, #148]	; (8006410 <HAL_TIM_Base_MspInit+0x114>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d10e      	bne.n	800639c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	4b21      	ldr	r3, [pc, #132]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	4a20      	ldr	r2, [pc, #128]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638c:	6453      	str	r3, [r2, #68]	; 0x44
 800638e:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	697b      	ldr	r3, [r7, #20]
}
 800639a:	e02e      	b.n	80063fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_TIM_Base_MspInit+0x118>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d10e      	bne.n	80063c4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	4b17      	ldr	r3, [pc, #92]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b4:	6453      	str	r3, [r2, #68]	; 0x44
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]
}
 80063c2:	e01a      	b.n	80063fa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a13      	ldr	r2, [pc, #76]	; (8006418 <HAL_TIM_Base_MspInit+0x11c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d115      	bne.n	80063fa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	6413      	str	r3, [r2, #64]	; 0x40
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <HAL_TIM_Base_MspInit+0x10c>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80063ea:	2200      	movs	r2, #0
 80063ec:	2100      	movs	r1, #0
 80063ee:	202c      	movs	r0, #44	; 0x2c
 80063f0:	f002 fa71 	bl	80088d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80063f4:	202c      	movs	r0, #44	; 0x2c
 80063f6:	f002 fa8a 	bl	800890e <HAL_NVIC_EnableIRQ>
}
 80063fa:	bf00      	nop
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40001000 	.word	0x40001000
 8006408:	40023800 	.word	0x40023800
 800640c:	40001400 	.word	0x40001400
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	40001c00 	.word	0x40001c00

0800641c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <HAL_TIM_Encoder_MspInit+0x94>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d133      	bne.n	80064a6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	6453      	str	r3, [r2, #68]	; 0x44
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006464:	f043 0304 	orr.w	r3, r3, #4
 8006468:	6313      	str	r3, [r2, #48]	; 0x30
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006476:	23c0      	movs	r3, #192	; 0xc0
 8006478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647a:	2302      	movs	r3, #2
 800647c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2300      	movs	r3, #0
 8006484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006486:	2303      	movs	r3, #3
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	4619      	mov	r1, r3
 8006490:	4809      	ldr	r0, [pc, #36]	; (80064b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006492:	f002 fdf3 	bl	800907c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006496:	2200      	movs	r2, #0
 8006498:	2100      	movs	r1, #0
 800649a:	202c      	movs	r0, #44	; 0x2c
 800649c:	f002 fa1b 	bl	80088d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80064a0:	202c      	movs	r0, #44	; 0x2c
 80064a2:	f002 fa34 	bl	800890e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80064a6:	bf00      	nop
 80064a8:	3728      	adds	r7, #40	; 0x28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40023800 	.word	0x40023800
 80064b8:	40020800 	.word	0x40020800

080064bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 031c 	add.w	r3, r7, #28
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5c      	ldr	r2, [pc, #368]	; (800664c <HAL_TIM_MspPostInit+0x190>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d11f      	bne.n	800651e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	4b5b      	ldr	r3, [pc, #364]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	4a5a      	ldr	r2, [pc, #360]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80064e8:	f043 0310 	orr.w	r3, r3, #16
 80064ec:	6313      	str	r3, [r2, #48]	; 0x30
 80064ee:	4b58      	ldr	r3, [pc, #352]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80064fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006500:	2302      	movs	r3, #2
 8006502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006508:	2300      	movs	r3, #0
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800650c:	2301      	movs	r3, #1
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006510:	f107 031c 	add.w	r3, r7, #28
 8006514:	4619      	mov	r1, r3
 8006516:	484f      	ldr	r0, [pc, #316]	; (8006654 <HAL_TIM_MspPostInit+0x198>)
 8006518:	f002 fdb0 	bl	800907c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800651c:	e091      	b.n	8006642 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a4d      	ldr	r2, [pc, #308]	; (8006658 <HAL_TIM_MspPostInit+0x19c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d11e      	bne.n	8006566 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	4b48      	ldr	r3, [pc, #288]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	4a47      	ldr	r2, [pc, #284]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 8006532:	f043 0302 	orr.w	r3, r3, #2
 8006536:	6313      	str	r3, [r2, #48]	; 0x30
 8006538:	4b45      	ldr	r3, [pc, #276]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006544:	2330      	movs	r3, #48	; 0x30
 8006546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006548:	2302      	movs	r3, #2
 800654a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654c:	2300      	movs	r3, #0
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006550:	2300      	movs	r3, #0
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006554:	2302      	movs	r3, #2
 8006556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006558:	f107 031c 	add.w	r3, r7, #28
 800655c:	4619      	mov	r1, r3
 800655e:	483f      	ldr	r0, [pc, #252]	; (800665c <HAL_TIM_MspPostInit+0x1a0>)
 8006560:	f002 fd8c 	bl	800907c <HAL_GPIO_Init>
}
 8006564:	e06d      	b.n	8006642 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a3d      	ldr	r2, [pc, #244]	; (8006660 <HAL_TIM_MspPostInit+0x1a4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d11f      	bne.n	80065b0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	4b36      	ldr	r3, [pc, #216]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	4a35      	ldr	r2, [pc, #212]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 800657a:	f043 0308 	orr.w	r3, r3, #8
 800657e:	6313      	str	r3, [r2, #48]	; 0x30
 8006580:	4b33      	ldr	r3, [pc, #204]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800658c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006592:	2302      	movs	r3, #2
 8006594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659a:	2300      	movs	r3, #0
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800659e:	2302      	movs	r3, #2
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	4619      	mov	r1, r3
 80065a8:	482e      	ldr	r0, [pc, #184]	; (8006664 <HAL_TIM_MspPostInit+0x1a8>)
 80065aa:	f002 fd67 	bl	800907c <HAL_GPIO_Init>
}
 80065ae:	e048      	b.n	8006642 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <HAL_TIM_MspPostInit+0x1ac>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d11f      	bne.n	80065fa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	4a23      	ldr	r2, [pc, #140]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	6313      	str	r3, [r2, #48]	; 0x30
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80065d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065dc:	2302      	movs	r3, #2
 80065de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80065e8:	2303      	movs	r3, #3
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ec:	f107 031c 	add.w	r3, r7, #28
 80065f0:	4619      	mov	r1, r3
 80065f2:	481a      	ldr	r0, [pc, #104]	; (800665c <HAL_TIM_MspPostInit+0x1a0>)
 80065f4:	f002 fd42 	bl	800907c <HAL_GPIO_Init>
}
 80065f8:	e023      	b.n	8006642 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <HAL_TIM_MspPostInit+0x1b0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d11e      	bne.n	8006642 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006604:	2300      	movs	r3, #0
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	4a10      	ldr	r2, [pc, #64]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	6313      	str	r3, [r2, #48]	; 0x30
 8006614:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <HAL_TIM_MspPostInit+0x194>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006626:	2302      	movs	r3, #2
 8006628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662e:	2300      	movs	r3, #0
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006632:	2303      	movs	r3, #3
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006636:	f107 031c 	add.w	r3, r7, #28
 800663a:	4619      	mov	r1, r3
 800663c:	4807      	ldr	r0, [pc, #28]	; (800665c <HAL_TIM_MspPostInit+0x1a0>)
 800663e:	f002 fd1d 	bl	800907c <HAL_GPIO_Init>
}
 8006642:	bf00      	nop
 8006644:	3730      	adds	r7, #48	; 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40023800 	.word	0x40023800
 8006654:	40021000 	.word	0x40021000
 8006658:	40000400 	.word	0x40000400
 800665c:	40020400 	.word	0x40020400
 8006660:	40000800 	.word	0x40000800
 8006664:	40020c00 	.word	0x40020c00
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006678:	f107 0314 	add.w	r3, r7, #20
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_UART_MspInit+0x84>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d12b      	bne.n	80066ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <HAL_UART_MspInit+0x88>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_UART_MspInit+0x88>)
 800669c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a0:	6413      	str	r3, [r2, #64]	; 0x40
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <HAL_UART_MspInit+0x88>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <HAL_UART_MspInit+0x88>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <HAL_UART_MspInit+0x88>)
 80066b8:	f043 0308 	orr.w	r3, r3, #8
 80066bc:	6313      	str	r3, [r2, #48]	; 0x30
 80066be:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <HAL_UART_MspInit+0x88>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80066ca:	2360      	movs	r3, #96	; 0x60
 80066cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ce:	2302      	movs	r3, #2
 80066d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d6:	2303      	movs	r3, #3
 80066d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066da:	2307      	movs	r3, #7
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	4619      	mov	r1, r3
 80066e4:	4805      	ldr	r0, [pc, #20]	; (80066fc <HAL_UART_MspInit+0x8c>)
 80066e6:	f002 fcc9 	bl	800907c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80066ea:	bf00      	nop
 80066ec:	3728      	adds	r7, #40	; 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40004400 	.word	0x40004400
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40020c00 	.word	0x40020c00

08006700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006704:	e7fe      	b.n	8006704 <NMI_Handler+0x4>

08006706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800670a:	e7fe      	b.n	800670a <HardFault_Handler+0x4>

0800670c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <MemManage_Handler+0x4>

08006712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006716:	e7fe      	b.n	8006716 <BusFault_Handler+0x4>

08006718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800671c:	e7fe      	b.n	800671c <UsageFault_Handler+0x4>

0800671e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800673a:	b480      	push	{r7}
 800673c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800673e:	bf00      	nop
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800674c:	f001 fba2 	bl	8007e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006750:	bf00      	nop
 8006752:	bd80      	pop	{r7, pc}

08006754 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006758:	4803      	ldr	r0, [pc, #12]	; (8006768 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800675a:	f006 fe72 	bl	800d442 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800675e:	4803      	ldr	r0, [pc, #12]	; (800676c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006760:	f006 fe6f 	bl	800d442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}
 8006768:	2003e864 	.word	0x2003e864
 800676c:	2003ea60 	.word	0x2003ea60

08006770 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006774:	4802      	ldr	r0, [pc, #8]	; (8006780 <SDIO_IRQHandler+0x10>)
 8006776:	f004 ff0b 	bl	800b590 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2003ebc0 	.word	0x2003ebc0

08006784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <TIM6_DAC_IRQHandler+0x10>)
 800678a:	f006 fe5a 	bl	800d442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	2003eb40 	.word	0x2003eb40

08006798 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800679c:	4802      	ldr	r0, [pc, #8]	; (80067a8 <TIM7_IRQHandler+0x10>)
 800679e:	f006 fe50 	bl	800d442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2003ece4 	.word	0x2003ece4

080067ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80067b0:	4802      	ldr	r0, [pc, #8]	; (80067bc <DMA2_Stream2_IRQHandler+0x10>)
 80067b2:	f002 f9ef 	bl	8008b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2003ec84 	.word	0x2003ec84

080067c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80067c4:	4802      	ldr	r0, [pc, #8]	; (80067d0 <DMA2_Stream3_IRQHandler+0x10>)
 80067c6:	f002 f9e5 	bl	8008b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	2003e7ac 	.word	0x2003e7ac

080067d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80067d8:	4802      	ldr	r0, [pc, #8]	; (80067e4 <DMA2_Stream6_IRQHandler+0x10>)
 80067da:	f002 f9db 	bl	8008b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	2003eae0 	.word	0x2003eae0

080067e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067f0:	4a14      	ldr	r2, [pc, #80]	; (8006844 <_sbrk+0x5c>)
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <_sbrk+0x60>)
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067fc:	4b13      	ldr	r3, [pc, #76]	; (800684c <_sbrk+0x64>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <_sbrk+0x64>)
 8006806:	4a12      	ldr	r2, [pc, #72]	; (8006850 <_sbrk+0x68>)
 8006808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <_sbrk+0x64>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4413      	add	r3, r2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	429a      	cmp	r2, r3
 8006816:	d207      	bcs.n	8006828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006818:	f00d f8a8 	bl	801396c <__errno>
 800681c:	4602      	mov	r2, r0
 800681e:	230c      	movs	r3, #12
 8006820:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006822:	f04f 33ff 	mov.w	r3, #4294967295
 8006826:	e009      	b.n	800683c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <_sbrk+0x64>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <_sbrk+0x64>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	4a05      	ldr	r2, [pc, #20]	; (800684c <_sbrk+0x64>)
 8006838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20050000 	.word	0x20050000
 8006848:	00000800 	.word	0x00000800
 800684c:	200002b8 	.word	0x200002b8
 8006850:	20040e38 	.word	0x20040e38

08006854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <SystemInit+0x28>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	4a07      	ldr	r2, [pc, #28]	; (800687c <SystemInit+0x28>)
 8006860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <SystemInit+0x28>)
 800686a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800686e:	609a      	str	r2, [r3, #8]
#endif
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	e000ed00 	.word	0xe000ed00

08006880 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8006880:	b598      	push	{r3, r4, r7, lr}
 8006882:	af00      	add	r7, sp, #0
	lcd_init();
 8006884:	f7fa fbc8 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006888:	483a      	ldr	r0, [pc, #232]	; (8006974 <cppInit+0xf4>)
 800688a:	f7fd fe0b 	bl	80044a4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800688e:	2064      	movs	r0, #100	; 0x64
 8006890:	f001 fb20 	bl	8007ed4 <HAL_Delay>
	power_sensor.updateValues();
 8006894:	4837      	ldr	r0, [pc, #220]	; (8006974 <cppInit+0xf4>)
 8006896:	f7fd fe13 	bl	80044c0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800689a:	f7fa fc01 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800689e:	2100      	movs	r1, #0
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7fa fc0d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80068a6:	4834      	ldr	r0, [pc, #208]	; (8006978 <cppInit+0xf8>)
 80068a8:	f7fa fc34 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80068ac:	2101      	movs	r1, #1
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7fa fc06 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80068b4:	482f      	ldr	r0, [pc, #188]	; (8006974 <cppInit+0xf4>)
 80068b6:	f7fd fe2d 	bl	8004514 <_ZN11PowerSensor17getButteryVoltageEv>
 80068ba:	ee10 3a10 	vmov	r3, s0
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 fe5a 	bl	8000578 <__aeabi_f2d>
 80068c4:	4603      	mov	r3, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	461a      	mov	r2, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	482b      	ldr	r0, [pc, #172]	; (800697c <cppInit+0xfc>)
 80068ce:	f7fa fc21 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80068d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068d6:	f001 fafd 	bl	8007ed4 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80068da:	4829      	ldr	r0, [pc, #164]	; (8006980 <cppInit+0x100>)
 80068dc:	f7fd f826 	bl	800392c <_ZN6Logger10sdCardInitEv>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <cppInit+0x76>
		led.fullColor('G');
 80068e6:	2147      	movs	r1, #71	; 0x47
 80068e8:	4826      	ldr	r0, [pc, #152]	; (8006984 <cppInit+0x104>)
 80068ea:	f7fb fb23 	bl	8001f34 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80068ee:	2064      	movs	r0, #100	; 0x64
 80068f0:	f001 faf0 	bl	8007ed4 <HAL_Delay>
 80068f4:	e006      	b.n	8006904 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80068f6:	2152      	movs	r1, #82	; 0x52
 80068f8:	4822      	ldr	r0, [pc, #136]	; (8006984 <cppInit+0x104>)
 80068fa:	f7fb fb1b 	bl	8001f34 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80068fe:	2064      	movs	r0, #100	; 0x64
 8006900:	f001 fae8 	bl	8007ed4 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006904:	4820      	ldr	r0, [pc, #128]	; (8006988 <cppInit+0x108>)
 8006906:	f7fb fc71 	bl	80021ec <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800690a:	4820      	ldr	r0, [pc, #128]	; (800698c <cppInit+0x10c>)
 800690c:	f7fd fa9c 	bl	8003e48 <_ZN5Motor4initEv>
	encoder.init();
 8006910:	481f      	ldr	r0, [pc, #124]	; (8006990 <cppInit+0x110>)
 8006912:	f7fa fc4f 	bl	80011b4 <_ZN7Encoder4initEv>
	imu.init();
 8006916:	481f      	ldr	r0, [pc, #124]	; (8006994 <cppInit+0x114>)
 8006918:	f7fb f8cc 	bl	8001ab4 <_ZN3IMU4initEv>
	line_trace.init();
 800691c:	481e      	ldr	r0, [pc, #120]	; (8006998 <cppInit+0x118>)
 800691e:	f7fc fc19 	bl	8003154 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006922:	4819      	ldr	r0, [pc, #100]	; (8006988 <cppInit+0x108>)
 8006924:	f7fb fda2 	bl	800246c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800692c:	f001 fad2 	bl	8007ed4 <HAL_Delay>

	led.fullColor('M');
 8006930:	214d      	movs	r1, #77	; 0x4d
 8006932:	4814      	ldr	r0, [pc, #80]	; (8006984 <cppInit+0x104>)
 8006934:	f7fb fafe 	bl	8001f34 <_ZN3LED9fullColorEc>
	imu.calibration();
 8006938:	4816      	ldr	r0, [pc, #88]	; (8006994 <cppInit+0x114>)
 800693a:	f7fb f983 	bl	8001c44 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800693e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800699c <cppInit+0x11c>
 8006942:	eddf 0a17 	vldr	s1, [pc, #92]	; 80069a0 <cppInit+0x120>
 8006946:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80069a4 <cppInit+0x124>
 800694a:	4817      	ldr	r0, [pc, #92]	; (80069a8 <cppInit+0x128>)
 800694c:	f7fe f9dc 	bl	8004d08 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006950:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80069ac <cppInit+0x12c>
 8006954:	eddf 0a16 	vldr	s1, [pc, #88]	; 80069b0 <cppInit+0x130>
 8006958:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80069b4 <cppInit+0x134>
 800695c:	4812      	ldr	r0, [pc, #72]	; (80069a8 <cppInit+0x128>)
 800695e:	f7fe f9ec 	bl	8004d3a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8006962:	4815      	ldr	r0, [pc, #84]	; (80069b8 <cppInit+0x138>)
 8006964:	f7fd fca8 	bl	80042b8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8006968:	4814      	ldr	r0, [pc, #80]	; (80069bc <cppInit+0x13c>)
 800696a:	f7fd fd3f 	bl	80043ec <_ZN13PathFollowing4initEv>

}
 800696e:	bf00      	nop
 8006970:	bd98      	pop	{r3, r4, r7, pc}
 8006972:	bf00      	nop
 8006974:	200005cc 	.word	0x200005cc
 8006978:	0801814c 	.word	0x0801814c
 800697c:	08018154 	.word	0x08018154
 8006980:	200005ec 	.word	0x200005ec
 8006984:	200005c8 	.word	0x200005c8
 8006988:	200002bc 	.word	0x200002bc
 800698c:	200005c4 	.word	0x200005c4
 8006990:	20017cfc 	.word	0x20017cfc
 8006994:	200005d8 	.word	0x200005d8
 8006998:	20017da0 	.word	0x20017da0
 800699c:	3cceca68 	.word	0x3cceca68
 80069a0:	4180f06f 	.word	0x4180f06f
 80069a4:	3fea2d0e 	.word	0x3fea2d0e
 80069a8:	20017d20 	.word	0x20017d20
 80069ac:	3ab7dacd 	.word	0x3ab7dacd
 80069b0:	3f5e3fbc 	.word	0x3f5e3fbc
 80069b4:	3d8eefa2 	.word	0x3d8eefa2
 80069b8:	20017d60 	.word	0x20017d60
 80069bc:	20024cf8 	.word	0x20024cf8

080069c0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80069c4:	4819      	ldr	r0, [pc, #100]	; (8006a2c <cppFlip1ms+0x6c>)
 80069c6:	f7fb fc6f 	bl	80022a8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80069ca:	4819      	ldr	r0, [pc, #100]	; (8006a30 <cppFlip1ms+0x70>)
 80069cc:	f7fb f898 	bl	8001b00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80069d0:	4818      	ldr	r0, [pc, #96]	; (8006a34 <cppFlip1ms+0x74>)
 80069d2:	f7fa fc11 	bl	80011f8 <_ZN7Encoder6updateEv>

	line_trace.flip();
 80069d6:	4818      	ldr	r0, [pc, #96]	; (8006a38 <cppFlip1ms+0x78>)
 80069d8:	f7fc fcd2 	bl	8003380 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80069dc:	4817      	ldr	r0, [pc, #92]	; (8006a3c <cppFlip1ms+0x7c>)
 80069de:	f7fe f9c5 	bl	8004d6c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80069e2:	4817      	ldr	r0, [pc, #92]	; (8006a40 <cppFlip1ms+0x80>)
 80069e4:	f7fd fc4c 	bl	8004280 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80069e8:	4816      	ldr	r0, [pc, #88]	; (8006a44 <cppFlip1ms+0x84>)
 80069ea:	f7fd fe09 	bl	8004600 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80069ee:	4816      	ldr	r0, [pc, #88]	; (8006a48 <cppFlip1ms+0x88>)
 80069f0:	f7fd fa3c 	bl	8003e6c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <cppFlip1ms+0x8c>)
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <cppFlip1ms+0x8c>)
 80069fe:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <cppFlip1ms+0x8c>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d90c      	bls.n	8006a22 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <cppFlip1ms+0x70>)
 8006a0a:	f7fb f8d1 	bl	8001bb0 <_ZN3IMU8getOmegaEv>
 8006a0e:	eef0 7a40 	vmov.f32	s15, s0
 8006a12:	eeb0 0a67 	vmov.f32	s0, s15
 8006a16:	480e      	ldr	r0, [pc, #56]	; (8006a50 <cppFlip1ms+0x90>)
 8006a18:	f7fd ff48 	bl	80048ac <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <cppFlip1ms+0x8c>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006a22:	4804      	ldr	r0, [pc, #16]	; (8006a34 <cppFlip1ms+0x74>)
 8006a24:	f7fa fcde 	bl	80013e4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200002bc 	.word	0x200002bc
 8006a30:	200005d8 	.word	0x200005d8
 8006a34:	20017cfc 	.word	0x20017cfc
 8006a38:	20017da0 	.word	0x20017da0
 8006a3c:	20017d20 	.word	0x20017d20
 8006a40:	20017d60 	.word	0x20017d60
 8006a44:	200005b4 	.word	0x200005b4
 8006a48:	200005c4 	.word	0x200005c4
 8006a4c:	2003c422 	.word	0x2003c422
 8006a50:	20024aec 	.word	0x20024aec

08006a54 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8006a58:	4802      	ldr	r0, [pc, #8]	; (8006a64 <cppFlip100ns+0x10>)
 8006a5a:	f7fb fbd7 	bl	800220c <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8006a5e:	bf00      	nop
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200002bc 	.word	0x200002bc

08006a68 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <cppFlip10ms+0x30>)
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <cppFlip10ms+0x30>)
 8006a76:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <cppFlip10ms+0x30>)
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d905      	bls.n	8006a8c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006a80:	4806      	ldr	r0, [pc, #24]	; (8006a9c <cppFlip10ms+0x34>)
 8006a82:	f7fd ff4f 	bl	8004924 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <cppFlip10ms+0x30>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <cppFlip10ms+0x30>)
 8006a8e:	881a      	ldrh	r2, [r3, #0]
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <cppFlip10ms+0x38>)
 8006a92:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	2003c424 	.word	0x2003c424
 8006a9c:	20024aec 	.word	0x20024aec
 8006aa0:	2003c420 	.word	0x2003c420
 8006aa4:	00000000 	.word	0x00000000

08006aa8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af02      	add	r7, sp, #8
	static int16_t selector;

	static float adj_kp = line_trace.getKp();
 8006aae:	4bbc      	ldr	r3, [pc, #752]	; (8006da0 <cppLoop+0x2f8>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f3bf 8f5b 	dmb	ish
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d015      	beq.n	8006af6 <cppLoop+0x4e>
 8006aca:	48b5      	ldr	r0, [pc, #724]	; (8006da0 <cppLoop+0x2f8>)
 8006acc:	f00b fee7 	bl	801289e <__cxa_guard_acquire>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bf14      	ite	ne
 8006ad6:	2301      	movne	r3, #1
 8006ad8:	2300      	moveq	r3, #0
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <cppLoop+0x4e>
 8006ae0:	48b0      	ldr	r0, [pc, #704]	; (8006da4 <cppLoop+0x2fc>)
 8006ae2:	f7fc fbb4 	bl	800324e <_ZN9LineTrace5getKpEv>
 8006ae6:	eef0 7a40 	vmov.f32	s15, s0
 8006aea:	4baf      	ldr	r3, [pc, #700]	; (8006da8 <cppLoop+0x300>)
 8006aec:	edc3 7a00 	vstr	s15, [r3]
 8006af0:	48ab      	ldr	r0, [pc, #684]	; (8006da0 <cppLoop+0x2f8>)
 8006af2:	f00b fee0 	bl	80128b6 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8006af6:	4bad      	ldr	r3, [pc, #692]	; (8006dac <cppLoop+0x304>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f3bf 8f5b 	dmb	ish
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d015      	beq.n	8006b3e <cppLoop+0x96>
 8006b12:	48a6      	ldr	r0, [pc, #664]	; (8006dac <cppLoop+0x304>)
 8006b14:	f00b fec3 	bl	801289e <__cxa_guard_acquire>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf14      	ite	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	2300      	moveq	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <cppLoop+0x96>
 8006b28:	489e      	ldr	r0, [pc, #632]	; (8006da4 <cppLoop+0x2fc>)
 8006b2a:	f7fc fb9f 	bl	800326c <_ZN9LineTrace5getKiEv>
 8006b2e:	eef0 7a40 	vmov.f32	s15, s0
 8006b32:	4b9f      	ldr	r3, [pc, #636]	; (8006db0 <cppLoop+0x308>)
 8006b34:	edc3 7a00 	vstr	s15, [r3]
 8006b38:	489c      	ldr	r0, [pc, #624]	; (8006dac <cppLoop+0x304>)
 8006b3a:	f00b febc 	bl	80128b6 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8006b3e:	4b9d      	ldr	r3, [pc, #628]	; (8006db4 <cppLoop+0x30c>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f3bf 8f5b 	dmb	ish
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bf0c      	ite	eq
 8006b50:	2301      	moveq	r3, #1
 8006b52:	2300      	movne	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <cppLoop+0xde>
 8006b5a:	4896      	ldr	r0, [pc, #600]	; (8006db4 <cppLoop+0x30c>)
 8006b5c:	f00b fe9f 	bl	801289e <__cxa_guard_acquire>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <cppLoop+0xde>
 8006b70:	488c      	ldr	r0, [pc, #560]	; (8006da4 <cppLoop+0x2fc>)
 8006b72:	f7fc fb8a 	bl	800328a <_ZN9LineTrace5getKdEv>
 8006b76:	eef0 7a40 	vmov.f32	s15, s0
 8006b7a:	4b8f      	ldr	r3, [pc, #572]	; (8006db8 <cppLoop+0x310>)
 8006b7c:	edc3 7a00 	vstr	s15, [r3]
 8006b80:	488c      	ldr	r0, [pc, #560]	; (8006db4 <cppLoop+0x30c>)
 8006b82:	f00b fe98 	bl	80128b6 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8006b86:	4b8d      	ldr	r3, [pc, #564]	; (8006dbc <cppLoop+0x314>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f3bf 8f5b 	dmb	ish
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bf0c      	ite	eq
 8006b98:	2301      	moveq	r3, #1
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <cppLoop+0x126>
 8006ba2:	4886      	ldr	r0, [pc, #536]	; (8006dbc <cppLoop+0x314>)
 8006ba4:	f00b fe7b 	bl	801289e <__cxa_guard_acquire>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <cppLoop+0x126>
 8006bb8:	487a      	ldr	r0, [pc, #488]	; (8006da4 <cppLoop+0x2fc>)
 8006bba:	f7fc fbb2 	bl	8003322 <_ZN9LineTrace17getTargetVelocityEv>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
 8006bc2:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <cppLoop+0x318>)
 8006bc4:	edc3 7a00 	vstr	s15, [r3]
 8006bc8:	487c      	ldr	r0, [pc, #496]	; (8006dbc <cppLoop+0x314>)
 8006bca:	f00b fe74 	bl	80128b6 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8006bce:	4b7d      	ldr	r3, [pc, #500]	; (8006dc4 <cppLoop+0x31c>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f3bf 8f5b 	dmb	ish
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d015      	beq.n	8006c16 <cppLoop+0x16e>
 8006bea:	4876      	ldr	r0, [pc, #472]	; (8006dc4 <cppLoop+0x31c>)
 8006bec:	f00b fe57 	bl	801289e <__cxa_guard_acquire>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf14      	ite	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	2300      	moveq	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <cppLoop+0x16e>
 8006c00:	4868      	ldr	r0, [pc, #416]	; (8006da4 <cppLoop+0x2fc>)
 8006c02:	f7fc fb9d 	bl	8003340 <_ZN9LineTrace14getMaxVelocityEv>
 8006c06:	eef0 7a40 	vmov.f32	s15, s0
 8006c0a:	4b6f      	ldr	r3, [pc, #444]	; (8006dc8 <cppLoop+0x320>)
 8006c0c:	edc3 7a00 	vstr	s15, [r3]
 8006c10:	486c      	ldr	r0, [pc, #432]	; (8006dc4 <cppLoop+0x31c>)
 8006c12:	f00b fe50 	bl	80128b6 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8006c16:	4b6d      	ldr	r3, [pc, #436]	; (8006dcc <cppLoop+0x324>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f3bf 8f5b 	dmb	ish
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf0c      	ite	eq
 8006c28:	2301      	moveq	r3, #1
 8006c2a:	2300      	movne	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d015      	beq.n	8006c5e <cppLoop+0x1b6>
 8006c32:	4866      	ldr	r0, [pc, #408]	; (8006dcc <cppLoop+0x324>)
 8006c34:	f00b fe33 	bl	801289e <__cxa_guard_acquire>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bf14      	ite	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	2300      	moveq	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <cppLoop+0x1b6>
 8006c48:	4856      	ldr	r0, [pc, #344]	; (8006da4 <cppLoop+0x2fc>)
 8006c4a:	f7fc fb88 	bl	800335e <_ZN9LineTrace15getMaxVelocity2Ev>
 8006c4e:	eef0 7a40 	vmov.f32	s15, s0
 8006c52:	4b5f      	ldr	r3, [pc, #380]	; (8006dd0 <cppLoop+0x328>)
 8006c54:	edc3 7a00 	vstr	s15, [r3]
 8006c58:	485c      	ldr	r0, [pc, #368]	; (8006dcc <cppLoop+0x324>)
 8006c5a:	f00b fe2c 	bl	80128b6 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8006c5e:	485d      	ldr	r0, [pc, #372]	; (8006dd4 <cppLoop+0x32c>)
 8006c60:	f7fd fc68 	bl	8004534 <_ZN12RotarySwitch8getValueEv>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	f200 87f2 	bhi.w	8007c50 <cppLoop+0x11a8>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <cppLoop+0x1cc>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	080070f5 	.word	0x080070f5
 8006c7c:	08007189 	.word	0x08007189
 8006c80:	080072db 	.word	0x080072db
 8006c84:	080073bd 	.word	0x080073bd
 8006c88:	08007511 	.word	0x08007511
 8006c8c:	080075b9 	.word	0x080075b9
 8006c90:	0800773f 	.word	0x0800773f
 8006c94:	08007769 	.word	0x08007769
 8006c98:	08007793 	.word	0x08007793
 8006c9c:	0800784f 	.word	0x0800784f
 8006ca0:	080078bf 	.word	0x080078bf
 8006ca4:	0800795b 	.word	0x0800795b
 8006ca8:	08007a7d 	.word	0x08007a7d
 8006cac:	08007b03 	.word	0x08007b03
 8006cb0:	08007bab 	.word	0x08007bab
	case 0:
		led.fullColor('W');
 8006cb4:	2157      	movs	r1, #87	; 0x57
 8006cb6:	4848      	ldr	r0, [pc, #288]	; (8006dd8 <cppLoop+0x330>)
 8006cb8:	f7fb f93c 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006cbc:	f7fa f9f0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f7fa f9fc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006cc8:	4836      	ldr	r0, [pc, #216]	; (8006da4 <cppLoop+0x2fc>)
 8006cca:	f7fc fac0 	bl	800324e <_ZN9LineTrace5getKpEv>
 8006cce:	eeb0 7a40 	vmov.f32	s14, s0
 8006cd2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8006ddc <cppLoop+0x334>
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	ee17 0a90 	vmov	r0, s15
 8006cde:	f7f9 fc4b 	bl	8000578 <__aeabi_f2d>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4623      	mov	r3, r4
 8006cea:	483d      	ldr	r0, [pc, #244]	; (8006de0 <cppLoop+0x338>)
 8006cec:	f7fa fa12 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f7fa f9e4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006cf8:	482a      	ldr	r0, [pc, #168]	; (8006da4 <cppLoop+0x2fc>)
 8006cfa:	f7fc fab7 	bl	800326c <_ZN9LineTrace5getKiEv>
 8006cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8006d02:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006de4 <cppLoop+0x33c>
 8006d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0a:	ee17 0a90 	vmov	r0, s15
 8006d0e:	f7f9 fc33 	bl	8000578 <__aeabi_f2d>
 8006d12:	4605      	mov	r5, r0
 8006d14:	460e      	mov	r6, r1
 8006d16:	4823      	ldr	r0, [pc, #140]	; (8006da4 <cppLoop+0x2fc>)
 8006d18:	f7fc fab7 	bl	800328a <_ZN9LineTrace5getKdEv>
 8006d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8006d20:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006de8 <cppLoop+0x340>
 8006d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d28:	ee17 0a90 	vmov	r0, s15
 8006d2c:	f7f9 fc24 	bl	8000578 <__aeabi_f2d>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	e9cd 3400 	strd	r3, r4, [sp]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4633      	mov	r3, r6
 8006d3c:	482b      	ldr	r0, [pc, #172]	; (8006dec <cppLoop+0x344>)
 8006d3e:	f7fa f9e9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8006d42:	482b      	ldr	r0, [pc, #172]	; (8006df0 <cppLoop+0x348>)
 8006d44:	f7fb f892 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d04f      	beq.n	8006df8 <cppLoop+0x350>
			led.LR(-1, 1);
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d5e:	481e      	ldr	r0, [pc, #120]	; (8006dd8 <cppLoop+0x330>)
 8006d60:	f7fb f9a4 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006d64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d68:	f001 f8b4 	bl	8007ed4 <HAL_Delay>

			selector++;
 8006d6c:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <cppLoop+0x34c>)
 8006d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3301      	adds	r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	b21a      	sxth	r2, r3
 8006d7a:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <cppLoop+0x34c>)
 8006d7c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <cppLoop+0x34c>)
 8006d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	dd02      	ble.n	8006d8e <cppLoop+0x2e6>
 8006d88:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <cppLoop+0x34c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f04f 31ff 	mov.w	r1, #4294967295
 8006d94:	4810      	ldr	r0, [pc, #64]	; (8006dd8 <cppLoop+0x330>)
 8006d96:	f7fb f989 	bl	80020ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006d9a:	f000 bf5b 	b.w	8007c54 <cppLoop+0x11ac>
 8006d9e:	bf00      	nop
 8006da0:	2003c42c 	.word	0x2003c42c
 8006da4:	20017da0 	.word	0x20017da0
 8006da8:	2003c428 	.word	0x2003c428
 8006dac:	2003c434 	.word	0x2003c434
 8006db0:	2003c430 	.word	0x2003c430
 8006db4:	2003c43c 	.word	0x2003c43c
 8006db8:	2003c438 	.word	0x2003c438
 8006dbc:	2003c444 	.word	0x2003c444
 8006dc0:	2003c440 	.word	0x2003c440
 8006dc4:	2003c44c 	.word	0x2003c44c
 8006dc8:	2003c448 	.word	0x2003c448
 8006dcc:	2003c454 	.word	0x2003c454
 8006dd0:	2003c450 	.word	0x2003c450
 8006dd4:	200005c0 	.word	0x200005c0
 8006dd8:	200005c8 	.word	0x200005c8
 8006ddc:	447a0000 	.word	0x447a0000
 8006de0:	08018158 	.word	0x08018158
 8006de4:	42c80000 	.word	0x42c80000
 8006de8:	461c4000 	.word	0x461c4000
 8006dec:	08018164 	.word	0x08018164
 8006df0:	200005bc 	.word	0x200005bc
 8006df4:	2003c426 	.word	0x2003c426
		else if(joy_stick.getValue() == JOY_R){
 8006df8:	48b3      	ldr	r0, [pc, #716]	; (80070c8 <cppLoop+0x620>)
 8006dfa:	f7fb f837 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d059      	beq.n	8006ec2 <cppLoop+0x41a>
			led.LR(-1, 1);
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f04f 31ff 	mov.w	r1, #4294967295
 8006e14:	48ad      	ldr	r0, [pc, #692]	; (80070cc <cppLoop+0x624>)
 8006e16:	f7fb f949 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006e1a:	2064      	movs	r0, #100	; 0x64
 8006e1c:	f001 f85a 	bl	8007ed4 <HAL_Delay>
			if(selector == 0){
 8006e20:	4bab      	ldr	r3, [pc, #684]	; (80070d0 <cppLoop+0x628>)
 8006e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d113      	bne.n	8006e52 <cppLoop+0x3aa>
				adj_kp = adj_kp + 0.00001;
 8006e2a:	4baa      	ldr	r3, [pc, #680]	; (80070d4 <cppLoop+0x62c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7f9 fba2 	bl	8000578 <__aeabi_f2d>
 8006e34:	a39e      	add	r3, pc, #632	; (adr r3, 80070b0 <cppLoop+0x608>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f7f9 fa3f 	bl	80002bc <__adddf3>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	4618      	mov	r0, r3
 8006e44:	4621      	mov	r1, r4
 8006e46:	f7f9 fee7 	bl	8000c18 <__aeabi_d2f>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4ba1      	ldr	r3, [pc, #644]	; (80070d4 <cppLoop+0x62c>)
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e02b      	b.n	8006eaa <cppLoop+0x402>
			else if(selector == 1){
 8006e52:	4b9f      	ldr	r3, [pc, #636]	; (80070d0 <cppLoop+0x628>)
 8006e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d113      	bne.n	8006e84 <cppLoop+0x3dc>
				adj_ki = adj_ki + 0.0001;
 8006e5c:	4b9e      	ldr	r3, [pc, #632]	; (80070d8 <cppLoop+0x630>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7f9 fb89 	bl	8000578 <__aeabi_f2d>
 8006e66:	a394      	add	r3, pc, #592	; (adr r3, 80070b8 <cppLoop+0x610>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f7f9 fa26 	bl	80002bc <__adddf3>
 8006e70:	4603      	mov	r3, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4618      	mov	r0, r3
 8006e76:	4621      	mov	r1, r4
 8006e78:	f7f9 fece 	bl	8000c18 <__aeabi_d2f>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b96      	ldr	r3, [pc, #600]	; (80070d8 <cppLoop+0x630>)
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e012      	b.n	8006eaa <cppLoop+0x402>
				adj_kd = adj_kd + 0.000001;
 8006e84:	4b95      	ldr	r3, [pc, #596]	; (80070dc <cppLoop+0x634>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7f9 fb75 	bl	8000578 <__aeabi_f2d>
 8006e8e:	a38c      	add	r3, pc, #560	; (adr r3, 80070c0 <cppLoop+0x618>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 fa12 	bl	80002bc <__adddf3>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f7f9 feba 	bl	8000c18 <__aeabi_d2f>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b8d      	ldr	r3, [pc, #564]	; (80070dc <cppLoop+0x634>)
 8006ea8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006eaa:	2152      	movs	r1, #82	; 0x52
 8006eac:	4887      	ldr	r0, [pc, #540]	; (80070cc <cppLoop+0x624>)
 8006eae:	f7fb f841 	bl	8001f34 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006eb8:	4884      	ldr	r0, [pc, #528]	; (80070cc <cppLoop+0x624>)
 8006eba:	f7fb f8f7 	bl	80020ac <_ZN3LED2LREaa>
		break;
 8006ebe:	f000 bec9 	b.w	8007c54 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_L){
 8006ec2:	4881      	ldr	r0, [pc, #516]	; (80070c8 <cppLoop+0x620>)
 8006ec4:	f7fa ffd2 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d059      	beq.n	8006f8c <cppLoop+0x4e4>
			led.LR(-1, 1);
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f04f 31ff 	mov.w	r1, #4294967295
 8006ede:	487b      	ldr	r0, [pc, #492]	; (80070cc <cppLoop+0x624>)
 8006ee0:	f7fb f8e4 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006ee4:	2064      	movs	r0, #100	; 0x64
 8006ee6:	f000 fff5 	bl	8007ed4 <HAL_Delay>
			if(selector == 0){
 8006eea:	4b79      	ldr	r3, [pc, #484]	; (80070d0 <cppLoop+0x628>)
 8006eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d113      	bne.n	8006f1c <cppLoop+0x474>
				adj_kp = adj_kp - 0.00001;
 8006ef4:	4b77      	ldr	r3, [pc, #476]	; (80070d4 <cppLoop+0x62c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7f9 fb3d 	bl	8000578 <__aeabi_f2d>
 8006efe:	a36c      	add	r3, pc, #432	; (adr r3, 80070b0 <cppLoop+0x608>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 f9d8 	bl	80002b8 <__aeabi_dsub>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f7f9 fe82 	bl	8000c18 <__aeabi_d2f>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b6f      	ldr	r3, [pc, #444]	; (80070d4 <cppLoop+0x62c>)
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e02b      	b.n	8006f74 <cppLoop+0x4cc>
			else if(selector == 1){
 8006f1c:	4b6c      	ldr	r3, [pc, #432]	; (80070d0 <cppLoop+0x628>)
 8006f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d113      	bne.n	8006f4e <cppLoop+0x4a6>
				adj_ki = adj_ki - 0.0001;
 8006f26:	4b6c      	ldr	r3, [pc, #432]	; (80070d8 <cppLoop+0x630>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7f9 fb24 	bl	8000578 <__aeabi_f2d>
 8006f30:	a361      	add	r3, pc, #388	; (adr r3, 80070b8 <cppLoop+0x610>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f9bf 	bl	80002b8 <__aeabi_dsub>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	4618      	mov	r0, r3
 8006f40:	4621      	mov	r1, r4
 8006f42:	f7f9 fe69 	bl	8000c18 <__aeabi_d2f>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b63      	ldr	r3, [pc, #396]	; (80070d8 <cppLoop+0x630>)
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e012      	b.n	8006f74 <cppLoop+0x4cc>
				adj_kd = adj_kd - 0.000001;
 8006f4e:	4b63      	ldr	r3, [pc, #396]	; (80070dc <cppLoop+0x634>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 fb10 	bl	8000578 <__aeabi_f2d>
 8006f58:	a359      	add	r3, pc, #356	; (adr r3, 80070c0 <cppLoop+0x618>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f9ab 	bl	80002b8 <__aeabi_dsub>
 8006f62:	4603      	mov	r3, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	4618      	mov	r0, r3
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f7f9 fe55 	bl	8000c18 <__aeabi_d2f>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b5a      	ldr	r3, [pc, #360]	; (80070dc <cppLoop+0x634>)
 8006f72:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006f74:	2152      	movs	r1, #82	; 0x52
 8006f76:	4855      	ldr	r0, [pc, #340]	; (80070cc <cppLoop+0x624>)
 8006f78:	f7fa ffdc 	bl	8001f34 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f82:	4852      	ldr	r0, [pc, #328]	; (80070cc <cppLoop+0x624>)
 8006f84:	f7fb f892 	bl	80020ac <_ZN3LED2LREaa>
		break;
 8006f88:	f000 be64 	b.w	8007c54 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_D){
 8006f8c:	484e      	ldr	r0, [pc, #312]	; (80070c8 <cppLoop+0x620>)
 8006f8e:	f7fa ff6d 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d03d      	beq.n	800701e <cppLoop+0x576>
			led.LR(-1, 1);
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fa8:	4848      	ldr	r0, [pc, #288]	; (80070cc <cppLoop+0x624>)
 8006faa:	f7fb f87f 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006fae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006fb2:	f000 ff8f 	bl	8007ed4 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4948      	ldr	r1, [pc, #288]	; (80070e0 <cppLoop+0x638>)
 8006fbe:	4849      	ldr	r0, [pc, #292]	; (80070e4 <cppLoop+0x63c>)
 8006fc0:	f7fa fba4 	bl	800170c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006fc4:	f107 0308 	add.w	r3, r7, #8
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4947      	ldr	r1, [pc, #284]	; (80070e8 <cppLoop+0x640>)
 8006fcc:	4845      	ldr	r0, [pc, #276]	; (80070e4 <cppLoop+0x63c>)
 8006fce:	f7fa fb9d 	bl	800170c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006fd2:	1d3b      	adds	r3, r7, #4
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4945      	ldr	r1, [pc, #276]	; (80070ec <cppLoop+0x644>)
 8006fd8:	4842      	ldr	r0, [pc, #264]	; (80070e4 <cppLoop+0x63c>)
 8006fda:	f7fa fb97 	bl	800170c <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8006fde:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fe6:	edd7 6a01 	vldr	s13, [r7, #4]
 8006fea:	eeb0 1a66 	vmov.f32	s2, s13
 8006fee:	eef0 0a47 	vmov.f32	s1, s14
 8006ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff6:	483e      	ldr	r0, [pc, #248]	; (80070f0 <cppLoop+0x648>)
 8006ff8:	f7fc f910 	bl	800321c <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a35      	ldr	r2, [pc, #212]	; (80070d4 <cppLoop+0x62c>)
 8007000:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a34      	ldr	r2, [pc, #208]	; (80070d8 <cppLoop+0x630>)
 8007006:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a34      	ldr	r2, [pc, #208]	; (80070dc <cppLoop+0x634>)
 800700c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800700e:	2200      	movs	r2, #0
 8007010:	f04f 31ff 	mov.w	r1, #4294967295
 8007014:	482d      	ldr	r0, [pc, #180]	; (80070cc <cppLoop+0x624>)
 8007016:	f7fb f849 	bl	80020ac <_ZN3LED2LREaa>
		break;
 800701a:	f000 be1b 	b.w	8007c54 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_C){
 800701e:	482a      	ldr	r0, [pc, #168]	; (80070c8 <cppLoop+0x620>)
 8007020:	f7fa ff24 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007024:	4603      	mov	r3, r0
 8007026:	2b02      	cmp	r3, #2
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 860f 	beq.w	8007c54 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8007036:	2201      	movs	r2, #1
 8007038:	f04f 31ff 	mov.w	r1, #4294967295
 800703c:	4823      	ldr	r0, [pc, #140]	; (80070cc <cppLoop+0x624>)
 800703e:	f7fb f835 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007042:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007046:	f000 ff45 	bl	8007ed4 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800704a:	2300      	movs	r3, #0
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <cppLoop+0x62c>)
 8007050:	2201      	movs	r2, #1
 8007052:	4923      	ldr	r1, [pc, #140]	; (80070e0 <cppLoop+0x638>)
 8007054:	4823      	ldr	r0, [pc, #140]	; (80070e4 <cppLoop+0x63c>)
 8007056:	f7fa faf3 	bl	8001640 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800705a:	2300      	movs	r3, #0
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	4b1e      	ldr	r3, [pc, #120]	; (80070d8 <cppLoop+0x630>)
 8007060:	2201      	movs	r2, #1
 8007062:	4921      	ldr	r1, [pc, #132]	; (80070e8 <cppLoop+0x640>)
 8007064:	481f      	ldr	r0, [pc, #124]	; (80070e4 <cppLoop+0x63c>)
 8007066:	f7fa faeb 	bl	8001640 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800706a:	2300      	movs	r3, #0
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <cppLoop+0x634>)
 8007070:	2201      	movs	r2, #1
 8007072:	491e      	ldr	r1, [pc, #120]	; (80070ec <cppLoop+0x644>)
 8007074:	481b      	ldr	r0, [pc, #108]	; (80070e4 <cppLoop+0x63c>)
 8007076:	f7fa fae3 	bl	8001640 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800707a:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <cppLoop+0x62c>)
 800707c:	edd3 7a00 	vldr	s15, [r3]
 8007080:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <cppLoop+0x630>)
 8007082:	ed93 7a00 	vldr	s14, [r3]
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <cppLoop+0x634>)
 8007088:	edd3 6a00 	vldr	s13, [r3]
 800708c:	eeb0 1a66 	vmov.f32	s2, s13
 8007090:	eef0 0a47 	vmov.f32	s1, s14
 8007094:	eeb0 0a67 	vmov.f32	s0, s15
 8007098:	4815      	ldr	r0, [pc, #84]	; (80070f0 <cppLoop+0x648>)
 800709a:	f7fc f8bf 	bl	800321c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800709e:	2200      	movs	r2, #0
 80070a0:	f04f 31ff 	mov.w	r1, #4294967295
 80070a4:	4809      	ldr	r0, [pc, #36]	; (80070cc <cppLoop+0x624>)
 80070a6:	f7fb f801 	bl	80020ac <_ZN3LED2LREaa>
		break;
 80070aa:	f000 bdd3 	b.w	8007c54 <cppLoop+0x11ac>
 80070ae:	bf00      	nop
 80070b0:	88e368f1 	.word	0x88e368f1
 80070b4:	3ee4f8b5 	.word	0x3ee4f8b5
 80070b8:	eb1c432d 	.word	0xeb1c432d
 80070bc:	3f1a36e2 	.word	0x3f1a36e2
 80070c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80070c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80070c8:	200005bc 	.word	0x200005bc
 80070cc:	200005c8 	.word	0x200005c8
 80070d0:	2003c426 	.word	0x2003c426
 80070d4:	2003c428 	.word	0x2003c428
 80070d8:	2003c430 	.word	0x2003c430
 80070dc:	2003c438 	.word	0x2003c438
 80070e0:	08018174 	.word	0x08018174
 80070e4:	0801817c 	.word	0x0801817c
 80070e8:	08018184 	.word	0x08018184
 80070ec:	0801818c 	.word	0x0801818c
 80070f0:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 80070f4:	2143      	movs	r1, #67	; 0x43
 80070f6:	48a6      	ldr	r0, [pc, #664]	; (8007390 <cppLoop+0x8e8>)
 80070f8:	f7fa ff1c 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 80070fc:	f7f9 ffd0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007100:	2100      	movs	r1, #0
 8007102:	2000      	movs	r0, #0
 8007104:	f7f9 ffdc 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007108:	48a2      	ldr	r0, [pc, #648]	; (8007394 <cppLoop+0x8ec>)
 800710a:	f7fa f803 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800710e:	2101      	movs	r1, #1
 8007110:	2000      	movs	r0, #0
 8007112:	f7f9 ffd5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007116:	4ba0      	ldr	r3, [pc, #640]	; (8007398 <cppLoop+0x8f0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7f9 fa2c 	bl	8000578 <__aeabi_f2d>
 8007120:	4603      	mov	r3, r0
 8007122:	460c      	mov	r4, r1
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	489c      	ldr	r0, [pc, #624]	; (800739c <cppLoop+0x8f4>)
 800712a:	f7f9 fff3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800712e:	489c      	ldr	r0, [pc, #624]	; (80073a0 <cppLoop+0x8f8>)
 8007130:	f7fa fe9c 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007134:	4603      	mov	r3, r0
 8007136:	2b02      	cmp	r3, #2
 8007138:	bf0c      	ite	eq
 800713a:	2301      	moveq	r3, #1
 800713c:	2300      	movne	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8589 	beq.w	8007c58 <cppLoop+0x11b0>
			HAL_Delay(500);
 8007146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800714a:	f000 fec3 	bl	8007ed4 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800714e:	4b92      	ldr	r3, [pc, #584]	; (8007398 <cppLoop+0x8f0>)
 8007150:	edd3 7a00 	vldr	s15, [r3]
 8007154:	eeb0 0a67 	vmov.f32	s0, s15
 8007158:	4892      	ldr	r0, [pc, #584]	; (80073a4 <cppLoop+0x8fc>)
 800715a:	f7fc f8b4 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	2101      	movs	r1, #1
 8007164:	488a      	ldr	r0, [pc, #552]	; (8007390 <cppLoop+0x8e8>)
 8007166:	f7fa ffa1 	bl	80020ac <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800716a:	2100      	movs	r1, #0
 800716c:	488d      	ldr	r0, [pc, #564]	; (80073a4 <cppLoop+0x8fc>)
 800716e:	f7fc fb15 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007172:	488c      	ldr	r0, [pc, #560]	; (80073a4 <cppLoop+0x8fc>)
 8007174:	f7fc fa10 	bl	8003598 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007178:	f04f 32ff 	mov.w	r2, #4294967295
 800717c:	2100      	movs	r1, #0
 800717e:	4884      	ldr	r0, [pc, #528]	; (8007390 <cppLoop+0x8e8>)
 8007180:	f7fa ff94 	bl	80020ac <_ZN3LED2LREaa>
		}

		break;
 8007184:	f000 bd68 	b.w	8007c58 <cppLoop+0x11b0>

	case 2:
		led.fullColor('B');
 8007188:	2142      	movs	r1, #66	; 0x42
 800718a:	4881      	ldr	r0, [pc, #516]	; (8007390 <cppLoop+0x8e8>)
 800718c:	f7fa fed2 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007190:	f7f9 ff86 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007194:	2100      	movs	r1, #0
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 ff92 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800719c:	487d      	ldr	r0, [pc, #500]	; (8007394 <cppLoop+0x8ec>)
 800719e:	f7f9 ffb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80071a2:	2101      	movs	r1, #1
 80071a4:	2000      	movs	r0, #0
 80071a6:	f7f9 ff8b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80071aa:	4b7b      	ldr	r3, [pc, #492]	; (8007398 <cppLoop+0x8f0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 f9e2 	bl	8000578 <__aeabi_f2d>
 80071b4:	4603      	mov	r3, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	461a      	mov	r2, r3
 80071ba:	4623      	mov	r3, r4
 80071bc:	487a      	ldr	r0, [pc, #488]	; (80073a8 <cppLoop+0x900>)
 80071be:	f7f9 ffa9 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80071c2:	4877      	ldr	r0, [pc, #476]	; (80073a0 <cppLoop+0x8f8>)
 80071c4:	f7fa fe52 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	bf0c      	ite	eq
 80071ce:	2301      	moveq	r3, #1
 80071d0:	2300      	movne	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d023      	beq.n	8007220 <cppLoop+0x778>
			led.LR(-1, 1);
 80071d8:	2201      	movs	r2, #1
 80071da:	f04f 31ff 	mov.w	r1, #4294967295
 80071de:	486c      	ldr	r0, [pc, #432]	; (8007390 <cppLoop+0x8e8>)
 80071e0:	f7fa ff64 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80071e4:	2064      	movs	r0, #100	; 0x64
 80071e6:	f000 fe75 	bl	8007ed4 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80071ea:	4b6b      	ldr	r3, [pc, #428]	; (8007398 <cppLoop+0x8f0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 f9c2 	bl	8000578 <__aeabi_f2d>
 80071f4:	a364      	add	r3, pc, #400	; (adr r3, 8007388 <cppLoop+0x8e0>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f85f 	bl	80002bc <__adddf3>
 80071fe:	4603      	mov	r3, r0
 8007200:	460c      	mov	r4, r1
 8007202:	4618      	mov	r0, r3
 8007204:	4621      	mov	r1, r4
 8007206:	f7f9 fd07 	bl	8000c18 <__aeabi_d2f>
 800720a:	4602      	mov	r2, r0
 800720c:	4b62      	ldr	r3, [pc, #392]	; (8007398 <cppLoop+0x8f0>)
 800720e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007210:	2200      	movs	r2, #0
 8007212:	f04f 31ff 	mov.w	r1, #4294967295
 8007216:	485e      	ldr	r0, [pc, #376]	; (8007390 <cppLoop+0x8e8>)
 8007218:	f7fa ff48 	bl	80020ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800721c:	f000 bd1e 	b.w	8007c5c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_L){
 8007220:	485f      	ldr	r0, [pc, #380]	; (80073a0 <cppLoop+0x8f8>)
 8007222:	f7fa fe23 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	bf0c      	ite	eq
 800722c:	2301      	moveq	r3, #1
 800722e:	2300      	movne	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d023      	beq.n	800727e <cppLoop+0x7d6>
			led.LR(-1, 1);
 8007236:	2201      	movs	r2, #1
 8007238:	f04f 31ff 	mov.w	r1, #4294967295
 800723c:	4854      	ldr	r0, [pc, #336]	; (8007390 <cppLoop+0x8e8>)
 800723e:	f7fa ff35 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007242:	2064      	movs	r0, #100	; 0x64
 8007244:	f000 fe46 	bl	8007ed4 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007248:	4b53      	ldr	r3, [pc, #332]	; (8007398 <cppLoop+0x8f0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f7f9 f993 	bl	8000578 <__aeabi_f2d>
 8007252:	a34d      	add	r3, pc, #308	; (adr r3, 8007388 <cppLoop+0x8e0>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f82e 	bl	80002b8 <__aeabi_dsub>
 800725c:	4603      	mov	r3, r0
 800725e:	460c      	mov	r4, r1
 8007260:	4618      	mov	r0, r3
 8007262:	4621      	mov	r1, r4
 8007264:	f7f9 fcd8 	bl	8000c18 <__aeabi_d2f>
 8007268:	4602      	mov	r2, r0
 800726a:	4b4b      	ldr	r3, [pc, #300]	; (8007398 <cppLoop+0x8f0>)
 800726c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800726e:	2200      	movs	r2, #0
 8007270:	f04f 31ff 	mov.w	r1, #4294967295
 8007274:	4846      	ldr	r0, [pc, #280]	; (8007390 <cppLoop+0x8e8>)
 8007276:	f7fa ff19 	bl	80020ac <_ZN3LED2LREaa>
		break;
 800727a:	f000 bcef 	b.w	8007c5c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_C){
 800727e:	4848      	ldr	r0, [pc, #288]	; (80073a0 <cppLoop+0x8f8>)
 8007280:	f7fa fdf4 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007284:	4603      	mov	r3, r0
 8007286:	2b02      	cmp	r3, #2
 8007288:	bf0c      	ite	eq
 800728a:	2301      	moveq	r3, #1
 800728c:	2300      	movne	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 84e3 	beq.w	8007c5c <cppLoop+0x11b4>
			led.LR(-1, 1);
 8007296:	2201      	movs	r2, #1
 8007298:	f04f 31ff 	mov.w	r1, #4294967295
 800729c:	483c      	ldr	r0, [pc, #240]	; (8007390 <cppLoop+0x8e8>)
 800729e:	f7fa ff05 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80072a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072a6:	f000 fe15 	bl	8007ed4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80072aa:	2300      	movs	r3, #0
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4b3a      	ldr	r3, [pc, #232]	; (8007398 <cppLoop+0x8f0>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	493e      	ldr	r1, [pc, #248]	; (80073ac <cppLoop+0x904>)
 80072b4:	483e      	ldr	r0, [pc, #248]	; (80073b0 <cppLoop+0x908>)
 80072b6:	f7fa f9c3 	bl	8001640 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80072ba:	4b37      	ldr	r3, [pc, #220]	; (8007398 <cppLoop+0x8f0>)
 80072bc:	edd3 7a00 	vldr	s15, [r3]
 80072c0:	eeb0 0a67 	vmov.f32	s0, s15
 80072c4:	4837      	ldr	r0, [pc, #220]	; (80073a4 <cppLoop+0x8fc>)
 80072c6:	f7fb fffe 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80072ca:	2200      	movs	r2, #0
 80072cc:	f04f 31ff 	mov.w	r1, #4294967295
 80072d0:	482f      	ldr	r0, [pc, #188]	; (8007390 <cppLoop+0x8e8>)
 80072d2:	f7fa feeb 	bl	80020ac <_ZN3LED2LREaa>
		break;
 80072d6:	f000 bcc1 	b.w	8007c5c <cppLoop+0x11b4>

	case 3:
		led.fullColor('Y');
 80072da:	2159      	movs	r1, #89	; 0x59
 80072dc:	482c      	ldr	r0, [pc, #176]	; (8007390 <cppLoop+0x8e8>)
 80072de:	f7fa fe29 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 80072e2:	f7f9 fedd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80072e6:	2100      	movs	r1, #0
 80072e8:	2000      	movs	r0, #0
 80072ea:	f7f9 fee9 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 80072ee:	4831      	ldr	r0, [pc, #196]	; (80073b4 <cppLoop+0x90c>)
 80072f0:	f7f9 ff10 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80072f4:	2101      	movs	r1, #1
 80072f6:	2000      	movs	r0, #0
 80072f8:	f7f9 fee2 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80072fc:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <cppLoop+0x910>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f7f9 f939 	bl	8000578 <__aeabi_f2d>
 8007306:	4603      	mov	r3, r0
 8007308:	460c      	mov	r4, r1
 800730a:	461a      	mov	r2, r3
 800730c:	4623      	mov	r3, r4
 800730e:	4823      	ldr	r0, [pc, #140]	; (800739c <cppLoop+0x8f4>)
 8007310:	f7f9 ff00 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007314:	4822      	ldr	r0, [pc, #136]	; (80073a0 <cppLoop+0x8f8>)
 8007316:	f7fa fda9 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 800731a:	4603      	mov	r3, r0
 800731c:	2b02      	cmp	r3, #2
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 849a 	beq.w	8007c60 <cppLoop+0x11b8>
			HAL_Delay(500);
 800732c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007330:	f000 fdd0 	bl	8007ed4 <HAL_Delay>

			led.LR(1, -1);
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	2101      	movs	r1, #1
 800733a:	4815      	ldr	r0, [pc, #84]	; (8007390 <cppLoop+0x8e8>)
 800733c:	f7fa feb6 	bl	80020ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007340:	2101      	movs	r1, #1
 8007342:	4818      	ldr	r0, [pc, #96]	; (80073a4 <cppLoop+0x8fc>)
 8007344:	f7fc fa2a 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <cppLoop+0x910>)
 800734a:	edd3 7a00 	vldr	s15, [r3]
 800734e:	eeb0 0a67 	vmov.f32	s0, s15
 8007352:	4814      	ldr	r0, [pc, #80]	; (80073a4 <cppLoop+0x8fc>)
 8007354:	f7fb ffb7 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <cppLoop+0x910>)
 800735a:	edd3 7a00 	vldr	s15, [r3]
 800735e:	eeb0 0a67 	vmov.f32	s0, s15
 8007362:	4810      	ldr	r0, [pc, #64]	; (80073a4 <cppLoop+0x8fc>)
 8007364:	f7fb ffbe 	bl	80032e4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 8007368:	480e      	ldr	r0, [pc, #56]	; (80073a4 <cppLoop+0x8fc>)
 800736a:	f7fb fd4d 	bl	8002e08 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800736e:	480d      	ldr	r0, [pc, #52]	; (80073a4 <cppLoop+0x8fc>)
 8007370:	f7fc f912 	bl	8003598 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	2100      	movs	r1, #0
 800737a:	4805      	ldr	r0, [pc, #20]	; (8007390 <cppLoop+0x8e8>)
 800737c:	f7fa fe96 	bl	80020ac <_ZN3LED2LREaa>
		}

		break;
 8007380:	f000 bc6e 	b.w	8007c60 <cppLoop+0x11b8>
 8007384:	f3af 8000 	nop.w
 8007388:	9999999a 	.word	0x9999999a
 800738c:	3fb99999 	.word	0x3fb99999
 8007390:	200005c8 	.word	0x200005c8
 8007394:	08018194 	.word	0x08018194
 8007398:	2003c440 	.word	0x2003c440
 800739c:	080181a0 	.word	0x080181a0
 80073a0:	200005bc 	.word	0x200005bc
 80073a4:	20017da0 	.word	0x20017da0
 80073a8:	080181ac 	.word	0x080181ac
 80073ac:	080181b8 	.word	0x080181b8
 80073b0:	0801817c 	.word	0x0801817c
 80073b4:	080181c4 	.word	0x080181c4
 80073b8:	2003c448 	.word	0x2003c448

	case 4:
		led.fullColor('G');
 80073bc:	2147      	movs	r1, #71	; 0x47
 80073be:	48be      	ldr	r0, [pc, #760]	; (80076b8 <cppLoop+0xc10>)
 80073c0:	f7fa fdb8 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 80073c4:	f7f9 fe6c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80073c8:	2100      	movs	r1, #0
 80073ca:	2000      	movs	r0, #0
 80073cc:	f7f9 fe78 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 80073d0:	48ba      	ldr	r0, [pc, #744]	; (80076bc <cppLoop+0xc14>)
 80073d2:	f7f9 fe9f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80073d6:	2101      	movs	r1, #1
 80073d8:	2000      	movs	r0, #0
 80073da:	f7f9 fe71 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 80073de:	48b8      	ldr	r0, [pc, #736]	; (80076c0 <cppLoop+0xc18>)
 80073e0:	f7fb ffae 	bl	8003340 <_ZN9LineTrace14getMaxVelocityEv>
 80073e4:	ee10 3a10 	vmov	r3, s0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7f9 f8c5 	bl	8000578 <__aeabi_f2d>
 80073ee:	4603      	mov	r3, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	461a      	mov	r2, r3
 80073f4:	4623      	mov	r3, r4
 80073f6:	48b3      	ldr	r0, [pc, #716]	; (80076c4 <cppLoop+0xc1c>)
 80073f8:	f7f9 fe8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 80073fc:	48b2      	ldr	r0, [pc, #712]	; (80076c8 <cppLoop+0xc20>)
 80073fe:	f7fa fd35 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007402:	4603      	mov	r3, r0
 8007404:	2b10      	cmp	r3, #16
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d023      	beq.n	800745a <cppLoop+0x9b2>
			led.LR(-1, 1);
 8007412:	2201      	movs	r2, #1
 8007414:	f04f 31ff 	mov.w	r1, #4294967295
 8007418:	48a7      	ldr	r0, [pc, #668]	; (80076b8 <cppLoop+0xc10>)
 800741a:	f7fa fe47 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800741e:	2064      	movs	r0, #100	; 0x64
 8007420:	f000 fd58 	bl	8007ed4 <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 8007424:	4ba9      	ldr	r3, [pc, #676]	; (80076cc <cppLoop+0xc24>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7f9 f8a5 	bl	8000578 <__aeabi_f2d>
 800742e:	a3a0      	add	r3, pc, #640	; (adr r3, 80076b0 <cppLoop+0xc08>)
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f7f8 ff42 	bl	80002bc <__adddf3>
 8007438:	4603      	mov	r3, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4618      	mov	r0, r3
 800743e:	4621      	mov	r1, r4
 8007440:	f7f9 fbea 	bl	8000c18 <__aeabi_d2f>
 8007444:	4602      	mov	r2, r0
 8007446:	4ba1      	ldr	r3, [pc, #644]	; (80076cc <cppLoop+0xc24>)
 8007448:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	f04f 31ff 	mov.w	r1, #4294967295
 8007450:	4899      	ldr	r0, [pc, #612]	; (80076b8 <cppLoop+0xc10>)
 8007452:	f7fa fe2b 	bl	80020ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 8007456:	f000 bc05 	b.w	8007c64 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_L){
 800745a:	489b      	ldr	r0, [pc, #620]	; (80076c8 <cppLoop+0xc20>)
 800745c:	f7fa fd06 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	bf0c      	ite	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	2300      	movne	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d022      	beq.n	80074b6 <cppLoop+0xa0e>
			led.LR(-1, 1);
 8007470:	2201      	movs	r2, #1
 8007472:	f04f 31ff 	mov.w	r1, #4294967295
 8007476:	4890      	ldr	r0, [pc, #576]	; (80076b8 <cppLoop+0xc10>)
 8007478:	f7fa fe18 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800747c:	2064      	movs	r0, #100	; 0x64
 800747e:	f000 fd29 	bl	8007ed4 <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 8007482:	4b92      	ldr	r3, [pc, #584]	; (80076cc <cppLoop+0xc24>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7f9 f876 	bl	8000578 <__aeabi_f2d>
 800748c:	a388      	add	r3, pc, #544	; (adr r3, 80076b0 <cppLoop+0xc08>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f7f8 ff11 	bl	80002b8 <__aeabi_dsub>
 8007496:	4603      	mov	r3, r0
 8007498:	460c      	mov	r4, r1
 800749a:	4618      	mov	r0, r3
 800749c:	4621      	mov	r1, r4
 800749e:	f7f9 fbbb 	bl	8000c18 <__aeabi_d2f>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b89      	ldr	r3, [pc, #548]	; (80076cc <cppLoop+0xc24>)
 80074a6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80074a8:	2200      	movs	r2, #0
 80074aa:	f04f 31ff 	mov.w	r1, #4294967295
 80074ae:	4882      	ldr	r0, [pc, #520]	; (80076b8 <cppLoop+0xc10>)
 80074b0:	f7fa fdfc 	bl	80020ac <_ZN3LED2LREaa>
		break;
 80074b4:	e3d6      	b.n	8007c64 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_C){
 80074b6:	4884      	ldr	r0, [pc, #528]	; (80076c8 <cppLoop+0xc20>)
 80074b8:	f7fa fcd8 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b02      	cmp	r3, #2
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 83cb 	beq.w	8007c64 <cppLoop+0x11bc>
			led.LR(-1, 1);
 80074ce:	2201      	movs	r2, #1
 80074d0:	f04f 31ff 	mov.w	r1, #4294967295
 80074d4:	4878      	ldr	r0, [pc, #480]	; (80076b8 <cppLoop+0xc10>)
 80074d6:	f7fa fde9 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80074da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074de:	f000 fcf9 	bl	8007ed4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	4b79      	ldr	r3, [pc, #484]	; (80076cc <cppLoop+0xc24>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	4979      	ldr	r1, [pc, #484]	; (80076d0 <cppLoop+0xc28>)
 80074ec:	4879      	ldr	r0, [pc, #484]	; (80076d4 <cppLoop+0xc2c>)
 80074ee:	f7fa f8a7 	bl	8001640 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80074f2:	4b76      	ldr	r3, [pc, #472]	; (80076cc <cppLoop+0xc24>)
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	eeb0 0a67 	vmov.f32	s0, s15
 80074fc:	4870      	ldr	r0, [pc, #448]	; (80076c0 <cppLoop+0xc18>)
 80074fe:	f7fb fef1 	bl	80032e4 <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 8007502:	2200      	movs	r2, #0
 8007504:	f04f 31ff 	mov.w	r1, #4294967295
 8007508:	486b      	ldr	r0, [pc, #428]	; (80076b8 <cppLoop+0xc10>)
 800750a:	f7fa fdcf 	bl	80020ac <_ZN3LED2LREaa>
		break;
 800750e:	e3a9      	b.n	8007c64 <cppLoop+0x11bc>

	case 5:
		led.fullColor('M');
 8007510:	214d      	movs	r1, #77	; 0x4d
 8007512:	4869      	ldr	r0, [pc, #420]	; (80076b8 <cppLoop+0xc10>)
 8007514:	f7fa fd0e 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007518:	f7f9 fdc2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800751c:	2100      	movs	r1, #0
 800751e:	2000      	movs	r0, #0
 8007520:	f7f9 fdce 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007524:	486c      	ldr	r0, [pc, #432]	; (80076d8 <cppLoop+0xc30>)
 8007526:	f7f9 fdf5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800752a:	2101      	movs	r1, #1
 800752c:	2000      	movs	r0, #0
 800752e:	f7f9 fdc7 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007532:	4b6a      	ldr	r3, [pc, #424]	; (80076dc <cppLoop+0xc34>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f7f9 f81e 	bl	8000578 <__aeabi_f2d>
 800753c:	4603      	mov	r3, r0
 800753e:	460c      	mov	r4, r1
 8007540:	461a      	mov	r2, r3
 8007542:	4623      	mov	r3, r4
 8007544:	4866      	ldr	r0, [pc, #408]	; (80076e0 <cppLoop+0xc38>)
 8007546:	f7f9 fde5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800754a:	485f      	ldr	r0, [pc, #380]	; (80076c8 <cppLoop+0xc20>)
 800754c:	f7fa fc8e 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007550:	4603      	mov	r3, r0
 8007552:	2b02      	cmp	r3, #2
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8383 	beq.w	8007c68 <cppLoop+0x11c0>
			HAL_Delay(500);
 8007562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007566:	f000 fcb5 	bl	8007ed4 <HAL_Delay>

			led.LR(1, -1);
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	2101      	movs	r1, #1
 8007570:	4851      	ldr	r0, [pc, #324]	; (80076b8 <cppLoop+0xc10>)
 8007572:	f7fa fd9b 	bl	80020ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007576:	2102      	movs	r1, #2
 8007578:	4851      	ldr	r0, [pc, #324]	; (80076c0 <cppLoop+0xc18>)
 800757a:	f7fc f90f 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800757e:	4b57      	ldr	r3, [pc, #348]	; (80076dc <cppLoop+0xc34>)
 8007580:	edd3 7a00 	vldr	s15, [r3]
 8007584:	eeb0 0a67 	vmov.f32	s0, s15
 8007588:	484d      	ldr	r0, [pc, #308]	; (80076c0 <cppLoop+0xc18>)
 800758a:	f7fb fe9c 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800758e:	4b53      	ldr	r3, [pc, #332]	; (80076dc <cppLoop+0xc34>)
 8007590:	edd3 7a00 	vldr	s15, [r3]
 8007594:	eeb0 0a67 	vmov.f32	s0, s15
 8007598:	4849      	ldr	r0, [pc, #292]	; (80076c0 <cppLoop+0xc18>)
 800759a:	f7fb feb2 	bl	8003302 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 800759e:	4848      	ldr	r0, [pc, #288]	; (80076c0 <cppLoop+0xc18>)
 80075a0:	f7fb fc32 	bl	8002e08 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80075a4:	4846      	ldr	r0, [pc, #280]	; (80076c0 <cppLoop+0xc18>)
 80075a6:	f7fb fff7 	bl	8003598 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	2100      	movs	r1, #0
 80075b0:	4841      	ldr	r0, [pc, #260]	; (80076b8 <cppLoop+0xc10>)
 80075b2:	f7fa fd7b 	bl	80020ac <_ZN3LED2LREaa>
		}

		break;
 80075b6:	e357      	b.n	8007c68 <cppLoop+0x11c0>

	case 6:
		led.fullColor('R');
 80075b8:	2152      	movs	r1, #82	; 0x52
 80075ba:	483f      	ldr	r0, [pc, #252]	; (80076b8 <cppLoop+0xc10>)
 80075bc:	f7fa fcba 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 80075c0:	f7f9 fd6e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075c4:	2100      	movs	r1, #0
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7f9 fd7a 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 80075cc:	4842      	ldr	r0, [pc, #264]	; (80076d8 <cppLoop+0xc30>)
 80075ce:	f7f9 fda1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075d2:	2101      	movs	r1, #1
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f9 fd73 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 80075da:	4839      	ldr	r0, [pc, #228]	; (80076c0 <cppLoop+0xc18>)
 80075dc:	f7fb febf 	bl	800335e <_ZN9LineTrace15getMaxVelocity2Ev>
 80075e0:	ee10 3a10 	vmov	r3, s0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7f8 ffc7 	bl	8000578 <__aeabi_f2d>
 80075ea:	4603      	mov	r3, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	461a      	mov	r2, r3
 80075f0:	4623      	mov	r3, r4
 80075f2:	4834      	ldr	r0, [pc, #208]	; (80076c4 <cppLoop+0xc1c>)
 80075f4:	f7f9 fd8e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 80075f8:	4833      	ldr	r0, [pc, #204]	; (80076c8 <cppLoop+0xc20>)
 80075fa:	f7fa fc37 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b10      	cmp	r3, #16
 8007602:	bf0c      	ite	eq
 8007604:	2301      	moveq	r3, #1
 8007606:	2300      	movne	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d022      	beq.n	8007654 <cppLoop+0xbac>
			led.LR(-1, 1);
 800760e:	2201      	movs	r2, #1
 8007610:	f04f 31ff 	mov.w	r1, #4294967295
 8007614:	4828      	ldr	r0, [pc, #160]	; (80076b8 <cppLoop+0xc10>)
 8007616:	f7fa fd49 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800761a:	2064      	movs	r0, #100	; 0x64
 800761c:	f000 fc5a 	bl	8007ed4 <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8007620:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <cppLoop+0xc34>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 ffa7 	bl	8000578 <__aeabi_f2d>
 800762a:	a321      	add	r3, pc, #132	; (adr r3, 80076b0 <cppLoop+0xc08>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fe44 	bl	80002bc <__adddf3>
 8007634:	4603      	mov	r3, r0
 8007636:	460c      	mov	r4, r1
 8007638:	4618      	mov	r0, r3
 800763a:	4621      	mov	r1, r4
 800763c:	f7f9 faec 	bl	8000c18 <__aeabi_d2f>
 8007640:	4602      	mov	r2, r0
 8007642:	4b26      	ldr	r3, [pc, #152]	; (80076dc <cppLoop+0xc34>)
 8007644:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007646:	2200      	movs	r2, #0
 8007648:	f04f 31ff 	mov.w	r1, #4294967295
 800764c:	481a      	ldr	r0, [pc, #104]	; (80076b8 <cppLoop+0xc10>)
 800764e:	f7fa fd2d 	bl	80020ac <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 8007652:	e30b      	b.n	8007c6c <cppLoop+0x11c4>
		else if(joy_stick.getValue() == JOY_L){
 8007654:	481c      	ldr	r0, [pc, #112]	; (80076c8 <cppLoop+0xc20>)
 8007656:	f7fa fc09 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 800765a:	4603      	mov	r3, r0
 800765c:	2b01      	cmp	r3, #1
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03c      	beq.n	80076e4 <cppLoop+0xc3c>
			led.LR(-1, 1);
 800766a:	2201      	movs	r2, #1
 800766c:	f04f 31ff 	mov.w	r1, #4294967295
 8007670:	4811      	ldr	r0, [pc, #68]	; (80076b8 <cppLoop+0xc10>)
 8007672:	f7fa fd1b 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007676:	2064      	movs	r0, #100	; 0x64
 8007678:	f000 fc2c 	bl	8007ed4 <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800767c:	4b17      	ldr	r3, [pc, #92]	; (80076dc <cppLoop+0xc34>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f7f8 ff79 	bl	8000578 <__aeabi_f2d>
 8007686:	a30a      	add	r3, pc, #40	; (adr r3, 80076b0 <cppLoop+0xc08>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 fe14 	bl	80002b8 <__aeabi_dsub>
 8007690:	4603      	mov	r3, r0
 8007692:	460c      	mov	r4, r1
 8007694:	4618      	mov	r0, r3
 8007696:	4621      	mov	r1, r4
 8007698:	f7f9 fabe 	bl	8000c18 <__aeabi_d2f>
 800769c:	4602      	mov	r2, r0
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <cppLoop+0xc34>)
 80076a0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	f04f 31ff 	mov.w	r1, #4294967295
 80076a8:	4803      	ldr	r0, [pc, #12]	; (80076b8 <cppLoop+0xc10>)
 80076aa:	f7fa fcff 	bl	80020ac <_ZN3LED2LREaa>
		break;
 80076ae:	e2dd      	b.n	8007c6c <cppLoop+0x11c4>
 80076b0:	9999999a 	.word	0x9999999a
 80076b4:	3fb99999 	.word	0x3fb99999
 80076b8:	200005c8 	.word	0x200005c8
 80076bc:	080181c4 	.word	0x080181c4
 80076c0:	20017da0 	.word	0x20017da0
 80076c4:	080181ac 	.word	0x080181ac
 80076c8:	200005bc 	.word	0x200005bc
 80076cc:	2003c448 	.word	0x2003c448
 80076d0:	080181d0 	.word	0x080181d0
 80076d4:	0801817c 	.word	0x0801817c
 80076d8:	080181dc 	.word	0x080181dc
 80076dc:	2003c450 	.word	0x2003c450
 80076e0:	080181a0 	.word	0x080181a0
		else if(joy_stick.getValue() == JOY_C){
 80076e4:	48ca      	ldr	r0, [pc, #808]	; (8007a10 <cppLoop+0xf68>)
 80076e6:	f7fa fbc1 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 82b8 	beq.w	8007c6c <cppLoop+0x11c4>
			led.LR(-1, 1);
 80076fc:	2201      	movs	r2, #1
 80076fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007702:	48c4      	ldr	r0, [pc, #784]	; (8007a14 <cppLoop+0xf6c>)
 8007704:	f7fa fcd2 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007708:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800770c:	f000 fbe2 	bl	8007ed4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8007710:	2300      	movs	r3, #0
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4bc0      	ldr	r3, [pc, #768]	; (8007a18 <cppLoop+0xf70>)
 8007716:	2201      	movs	r2, #1
 8007718:	49c0      	ldr	r1, [pc, #768]	; (8007a1c <cppLoop+0xf74>)
 800771a:	48c1      	ldr	r0, [pc, #772]	; (8007a20 <cppLoop+0xf78>)
 800771c:	f7f9 ff90 	bl	8001640 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007720:	4bbd      	ldr	r3, [pc, #756]	; (8007a18 <cppLoop+0xf70>)
 8007722:	edd3 7a00 	vldr	s15, [r3]
 8007726:	eeb0 0a67 	vmov.f32	s0, s15
 800772a:	48be      	ldr	r0, [pc, #760]	; (8007a24 <cppLoop+0xf7c>)
 800772c:	f7fb fde9 	bl	8003302 <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 8007730:	2200      	movs	r2, #0
 8007732:	f04f 31ff 	mov.w	r1, #4294967295
 8007736:	48b7      	ldr	r0, [pc, #732]	; (8007a14 <cppLoop+0xf6c>)
 8007738:	f7fa fcb8 	bl	80020ac <_ZN3LED2LREaa>
		break;
 800773c:	e296      	b.n	8007c6c <cppLoop+0x11c4>

	case 7:
		led.fullColor('~');
 800773e:	217e      	movs	r1, #126	; 0x7e
 8007740:	48b4      	ldr	r0, [pc, #720]	; (8007a14 <cppLoop+0xf6c>)
 8007742:	f7fa fbf7 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007746:	f7f9 fcab 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800774a:	2100      	movs	r1, #0
 800774c:	2000      	movs	r0, #0
 800774e:	f7f9 fcb7 	bl	80010c0 <lcd_locate>
		lcd_printf("07      ");
 8007752:	48b5      	ldr	r0, [pc, #724]	; (8007a28 <cppLoop+0xf80>)
 8007754:	f7f9 fcde 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007758:	2101      	movs	r1, #1
 800775a:	2000      	movs	r0, #0
 800775c:	f7f9 fcb0 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007760:	48b2      	ldr	r0, [pc, #712]	; (8007a2c <cppLoop+0xf84>)
 8007762:	f7f9 fcd7 	bl	8001114 <lcd_printf>
		break;
 8007766:	e290      	b.n	8007c8a <cppLoop+0x11e2>

	case 8:
		led.fullColor('~');
 8007768:	217e      	movs	r1, #126	; 0x7e
 800776a:	48aa      	ldr	r0, [pc, #680]	; (8007a14 <cppLoop+0xf6c>)
 800776c:	f7fa fbe2 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007770:	f7f9 fc96 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007774:	2100      	movs	r1, #0
 8007776:	2000      	movs	r0, #0
 8007778:	f7f9 fca2 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 800777c:	48ac      	ldr	r0, [pc, #688]	; (8007a30 <cppLoop+0xf88>)
 800777e:	f7f9 fcc9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007782:	2101      	movs	r1, #1
 8007784:	2000      	movs	r0, #0
 8007786:	f7f9 fc9b 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800778a:	48a8      	ldr	r0, [pc, #672]	; (8007a2c <cppLoop+0xf84>)
 800778c:	f7f9 fcc2 	bl	8001114 <lcd_printf>

		break;
 8007790:	e27b      	b.n	8007c8a <cppLoop+0x11e2>

	case 9:
		led.fullColor('~');
 8007792:	217e      	movs	r1, #126	; 0x7e
 8007794:	489f      	ldr	r0, [pc, #636]	; (8007a14 <cppLoop+0xf6c>)
 8007796:	f7fa fbcd 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 800779a:	f7f9 fc81 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800779e:	2100      	movs	r1, #0
 80077a0:	2000      	movs	r0, #0
 80077a2:	f7f9 fc8d 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80077a6:	48a3      	ldr	r0, [pc, #652]	; (8007a34 <cppLoop+0xf8c>)
 80077a8:	f7f9 fcb4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077ac:	2101      	movs	r1, #1
 80077ae:	2000      	movs	r0, #0
 80077b0:	f7f9 fc86 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80077b4:	48a0      	ldr	r0, [pc, #640]	; (8007a38 <cppLoop+0xf90>)
 80077b6:	f7f9 fcad 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80077ba:	4895      	ldr	r0, [pc, #596]	; (8007a10 <cppLoop+0xf68>)
 80077bc:	f7fa fb56 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 824f 	beq.w	8007c70 <cppLoop+0x11c8>
			led.LR(-1, 1);
 80077d2:	2201      	movs	r2, #1
 80077d4:	f04f 31ff 	mov.w	r1, #4294967295
 80077d8:	488e      	ldr	r0, [pc, #568]	; (8007a14 <cppLoop+0xf6c>)
 80077da:	f7fa fc67 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(500);
 80077de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077e2:	f000 fb77 	bl	8007ed4 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80077e6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8007a3c <cppLoop+0xf94>
 80077ea:	488e      	ldr	r0, [pc, #568]	; (8007a24 <cppLoop+0xf7c>)
 80077ec:	f7fb fd5c 	bl	80032a8 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80077f0:	488c      	ldr	r0, [pc, #560]	; (8007a24 <cppLoop+0xf7c>)
 80077f2:	f7fb fe43 	bl	800347c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80077f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077fa:	f000 fb6b 	bl	8007ed4 <HAL_Delay>

			led.fullColor('R');
 80077fe:	2152      	movs	r1, #82	; 0x52
 8007800:	4884      	ldr	r0, [pc, #528]	; (8007a14 <cppLoop+0xf6c>)
 8007802:	f7fa fb97 	bl	8001f34 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8007806:	488e      	ldr	r0, [pc, #568]	; (8007a40 <cppLoop+0xf98>)
 8007808:	f7f9 fe5e 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800780c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007810:	f000 fb60 	bl	8007ed4 <HAL_Delay>

			line_trace.stop();
 8007814:	4883      	ldr	r0, [pc, #524]	; (8007a24 <cppLoop+0xf7c>)
 8007816:	f7fb fe57 	bl	80034c8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800781a:	498a      	ldr	r1, [pc, #552]	; (8007a44 <cppLoop+0xf9c>)
 800781c:	488a      	ldr	r0, [pc, #552]	; (8007a48 <cppLoop+0xfa0>)
 800781e:	f7f9 fe9a 	bl	8001556 <user_fopen>
			float d = encoder.getDistance();
 8007822:	4887      	ldr	r0, [pc, #540]	; (8007a40 <cppLoop+0xf98>)
 8007824:	f7f9 fe14 	bl	8001450 <_ZN7Encoder11getDistanceEv>
 8007828:	eef0 7a40 	vmov.f32	s15, s0
 800782c:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8007830:	463b      	mov	r3, r7
 8007832:	2201      	movs	r2, #1
 8007834:	4619      	mov	r1, r3
 8007836:	2001      	movs	r0, #1
 8007838:	f7f9 feb0 	bl	800159c <sd_write_float>
			user_fclose();
 800783c:	f7f9 fe9e 	bl	800157c <user_fclose>

			led.LR(-1, 0);
 8007840:	2200      	movs	r2, #0
 8007842:	f04f 31ff 	mov.w	r1, #4294967295
 8007846:	4873      	ldr	r0, [pc, #460]	; (8007a14 <cppLoop+0xf6c>)
 8007848:	f7fa fc30 	bl	80020ac <_ZN3LED2LREaa>
		}
		break;
 800784c:	e210      	b.n	8007c70 <cppLoop+0x11c8>

	case 10:
		led.fullColor('~');
 800784e:	217e      	movs	r1, #126	; 0x7e
 8007850:	4870      	ldr	r0, [pc, #448]	; (8007a14 <cppLoop+0xf6c>)
 8007852:	f7fa fb6f 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007856:	f7f9 fc23 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800785a:	2100      	movs	r1, #0
 800785c:	2000      	movs	r0, #0
 800785e:	f7f9 fc2f 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8007862:	487a      	ldr	r0, [pc, #488]	; (8007a4c <cppLoop+0xfa4>)
 8007864:	f7f9 fc56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007868:	2101      	movs	r1, #1
 800786a:	2000      	movs	r0, #0
 800786c:	f7f9 fc28 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007870:	4877      	ldr	r0, [pc, #476]	; (8007a50 <cppLoop+0xfa8>)
 8007872:	f7f9 fc4f 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8007876:	4866      	ldr	r0, [pc, #408]	; (8007a10 <cppLoop+0xf68>)
 8007878:	f7fa faf8 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 800787c:	4603      	mov	r3, r0
 800787e:	2b02      	cmp	r3, #2
 8007880:	bf0c      	ite	eq
 8007882:	2301      	moveq	r3, #1
 8007884:	2300      	movne	r3, #0
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 81f3 	beq.w	8007c74 <cppLoop+0x11cc>
			HAL_Delay(500);
 800788e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007892:	f000 fb1f 	bl	8007ed4 <HAL_Delay>
			led.LR(-1, 1);
 8007896:	2201      	movs	r2, #1
 8007898:	f04f 31ff 	mov.w	r1, #4294967295
 800789c:	485d      	ldr	r0, [pc, #372]	; (8007a14 <cppLoop+0xf6c>)
 800789e:	f7fa fc05 	bl	80020ac <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80078a2:	2101      	movs	r1, #1
 80078a4:	485f      	ldr	r0, [pc, #380]	; (8007a24 <cppLoop+0xf7c>)
 80078a6:	f7fb ff79 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80078aa:	485e      	ldr	r0, [pc, #376]	; (8007a24 <cppLoop+0xf7c>)
 80078ac:	f7fb fb2a 	bl	8002f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80078b0:	2200      	movs	r2, #0
 80078b2:	f04f 31ff 	mov.w	r1, #4294967295
 80078b6:	4857      	ldr	r0, [pc, #348]	; (8007a14 <cppLoop+0xf6c>)
 80078b8:	f7fa fbf8 	bl	80020ac <_ZN3LED2LREaa>
		}

		break;
 80078bc:	e1da      	b.n	8007c74 <cppLoop+0x11cc>

	case 11:
		led.fullColor('~');
 80078be:	217e      	movs	r1, #126	; 0x7e
 80078c0:	4854      	ldr	r0, [pc, #336]	; (8007a14 <cppLoop+0xf6c>)
 80078c2:	f7fa fb37 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 80078c6:	f7f9 fbeb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80078ca:	2100      	movs	r1, #0
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f9 fbf7 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80078d2:	4860      	ldr	r0, [pc, #384]	; (8007a54 <cppLoop+0xfac>)
 80078d4:	f7f9 fc1e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80078d8:	2101      	movs	r1, #1
 80078da:	2000      	movs	r0, #0
 80078dc:	f7f9 fbf0 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80078e0:	485d      	ldr	r0, [pc, #372]	; (8007a58 <cppLoop+0xfb0>)
 80078e2:	f7f9 fc17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80078e6:	484a      	ldr	r0, [pc, #296]	; (8007a10 <cppLoop+0xf68>)
 80078e8:	f7fa fac0 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 81bd 	beq.w	8007c78 <cppLoop+0x11d0>
			HAL_Delay(1500);
 80078fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007902:	f000 fae7 	bl	8007ed4 <HAL_Delay>
			led.LR(-1, 1);
 8007906:	2201      	movs	r2, #1
 8007908:	f04f 31ff 	mov.w	r1, #4294967295
 800790c:	4841      	ldr	r0, [pc, #260]	; (8007a14 <cppLoop+0xf6c>)
 800790e:	f7fa fbcd 	bl	80020ac <_ZN3LED2LREaa>

			logger.start();
 8007912:	4852      	ldr	r0, [pc, #328]	; (8007a5c <cppLoop+0xfb4>)
 8007914:	f7fc fa65 	bl	8003de2 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8007918:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80079f8 <cppLoop+0xf50>
 800791c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8007a00 <cppLoop+0xf58>
 8007920:	484f      	ldr	r0, [pc, #316]	; (8007a60 <cppLoop+0xfb8>)
 8007922:	f7fc faf3 	bl	8003f0c <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800792a:	f000 fad3 	bl	8007ed4 <HAL_Delay>

			logger.stop();
 800792e:	484b      	ldr	r0, [pc, #300]	; (8007a5c <cppLoop+0xfb4>)
 8007930:	f7fc fa68 	bl	8003e04 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007934:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8007a08 <cppLoop+0xf60>
 8007938:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8007a08 <cppLoop+0xf60>
 800793c:	4848      	ldr	r0, [pc, #288]	; (8007a60 <cppLoop+0xfb8>)
 800793e:	f7fc fae5 	bl	8003f0c <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007942:	4a48      	ldr	r2, [pc, #288]	; (8007a64 <cppLoop+0xfbc>)
 8007944:	4948      	ldr	r1, [pc, #288]	; (8007a68 <cppLoop+0xfc0>)
 8007946:	4845      	ldr	r0, [pc, #276]	; (8007a5c <cppLoop+0xfb4>)
 8007948:	f7fc f95b 	bl	8003c02 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800794c:	2200      	movs	r2, #0
 800794e:	f04f 31ff 	mov.w	r1, #4294967295
 8007952:	4830      	ldr	r0, [pc, #192]	; (8007a14 <cppLoop+0xf6c>)
 8007954:	f7fa fbaa 	bl	80020ac <_ZN3LED2LREaa>
		}
		break;
 8007958:	e18e      	b.n	8007c78 <cppLoop+0x11d0>

	case 12:
		led.fullColor('~');
 800795a:	217e      	movs	r1, #126	; 0x7e
 800795c:	482d      	ldr	r0, [pc, #180]	; (8007a14 <cppLoop+0xf6c>)
 800795e:	f7fa fae9 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007962:	f7f9 fb9d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007966:	2100      	movs	r1, #0
 8007968:	2000      	movs	r0, #0
 800796a:	f7f9 fba9 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800796e:	483f      	ldr	r0, [pc, #252]	; (8007a6c <cppLoop+0xfc4>)
 8007970:	f7f9 fbd0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007974:	2101      	movs	r1, #1
 8007976:	2000      	movs	r0, #0
 8007978:	f7f9 fba2 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800797c:	483c      	ldr	r0, [pc, #240]	; (8007a70 <cppLoop+0xfc8>)
 800797e:	f7f9 fbc9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007982:	4823      	ldr	r0, [pc, #140]	; (8007a10 <cppLoop+0xf68>)
 8007984:	f7fa fa72 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007988:	4603      	mov	r3, r0
 800798a:	2b02      	cmp	r3, #2
 800798c:	bf0c      	ite	eq
 800798e:	2301      	moveq	r3, #1
 8007990:	2300      	movne	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8171 	beq.w	8007c7c <cppLoop+0x11d4>
			HAL_Delay(1500);
 800799a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800799e:	f000 fa99 	bl	8007ed4 <HAL_Delay>
			led.LR(-1, 1);
 80079a2:	2201      	movs	r2, #1
 80079a4:	f04f 31ff 	mov.w	r1, #4294967295
 80079a8:	481a      	ldr	r0, [pc, #104]	; (8007a14 <cppLoop+0xf6c>)
 80079aa:	f7fa fb7f 	bl	80020ac <_ZN3LED2LREaa>

			logger.start();
 80079ae:	482b      	ldr	r0, [pc, #172]	; (8007a5c <cppLoop+0xfb4>)
 80079b0:	f7fc fa17 	bl	8003de2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80079b4:	482f      	ldr	r0, [pc, #188]	; (8007a74 <cppLoop+0xfcc>)
 80079b6:	f7fd f9ec 	bl	8004d92 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80079ba:	eddf 0a20 	vldr	s1, [pc, #128]	; 8007a3c <cppLoop+0xf94>
 80079be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80079c2:	482c      	ldr	r0, [pc, #176]	; (8007a74 <cppLoop+0xfcc>)
 80079c4:	f7fd f978 	bl	8004cb8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80079c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079cc:	f000 fa82 	bl	8007ed4 <HAL_Delay>

			logger.stop();
 80079d0:	4822      	ldr	r0, [pc, #136]	; (8007a5c <cppLoop+0xfb4>)
 80079d2:	f7fc fa17 	bl	8003e04 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80079d6:	4827      	ldr	r0, [pc, #156]	; (8007a74 <cppLoop+0xfcc>)
 80079d8:	f7fd f9ee 	bl	8004db8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80079dc:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <cppLoop+0xfd0>)
 80079de:	4922      	ldr	r1, [pc, #136]	; (8007a68 <cppLoop+0xfc0>)
 80079e0:	481e      	ldr	r0, [pc, #120]	; (8007a5c <cppLoop+0xfb4>)
 80079e2:	f7fc f90e 	bl	8003c02 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80079e6:	2200      	movs	r2, #0
 80079e8:	f04f 31ff 	mov.w	r1, #4294967295
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <cppLoop+0xf6c>)
 80079ee:	f7fa fb5d 	bl	80020ac <_ZN3LED2LREaa>
		}
		break;
 80079f2:	e143      	b.n	8007c7c <cppLoop+0x11d4>
 80079f4:	f3af 8000 	nop.w
 80079f8:	33333333 	.word	0x33333333
 80079fc:	bfd33333 	.word	0xbfd33333
 8007a00:	33333333 	.word	0x33333333
 8007a04:	3fd33333 	.word	0x3fd33333
	...
 8007a10:	200005bc 	.word	0x200005bc
 8007a14:	200005c8 	.word	0x200005c8
 8007a18:	2003c450 	.word	0x2003c450
 8007a1c:	080181e8 	.word	0x080181e8
 8007a20:	0801817c 	.word	0x0801817c
 8007a24:	20017da0 	.word	0x20017da0
 8007a28:	080181f4 	.word	0x080181f4
 8007a2c:	08018200 	.word	0x08018200
 8007a30:	0801820c 	.word	0x0801820c
 8007a34:	08018218 	.word	0x08018218
 8007a38:	08018220 	.word	0x08018220
 8007a3c:	00000000 	.word	0x00000000
 8007a40:	20017cfc 	.word	0x20017cfc
 8007a44:	0801822c 	.word	0x0801822c
 8007a48:	08018234 	.word	0x08018234
 8007a4c:	08018240 	.word	0x08018240
 8007a50:	0801824c 	.word	0x0801824c
 8007a54:	08018258 	.word	0x08018258
 8007a58:	08018260 	.word	0x08018260
 8007a5c:	200005ec 	.word	0x200005ec
 8007a60:	200005c4 	.word	0x200005c4
 8007a64:	08018268 	.word	0x08018268
 8007a68:	08018274 	.word	0x08018274
 8007a6c:	08018280 	.word	0x08018280
 8007a70:	08018284 	.word	0x08018284
 8007a74:	20017d20 	.word	0x20017d20
 8007a78:	08018290 	.word	0x08018290

	case 13:
		led.fullColor('~');
 8007a7c:	217e      	movs	r1, #126	; 0x7e
 8007a7e:	4886      	ldr	r0, [pc, #536]	; (8007c98 <cppLoop+0x11f0>)
 8007a80:	f7fa fa58 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007a84:	f7f9 fb0c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007a88:	2100      	movs	r1, #0
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f7f9 fb18 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8007a90:	4882      	ldr	r0, [pc, #520]	; (8007c9c <cppLoop+0x11f4>)
 8007a92:	f7f9 fb3f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a96:	2101      	movs	r1, #1
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7f9 fb11 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007a9e:	4880      	ldr	r0, [pc, #512]	; (8007ca0 <cppLoop+0x11f8>)
 8007aa0:	f7f9 fb38 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007aa4:	487f      	ldr	r0, [pc, #508]	; (8007ca4 <cppLoop+0x11fc>)
 8007aa6:	f7fa f9e1 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 80e2 	beq.w	8007c80 <cppLoop+0x11d8>
			led.LR(-1, 1);
 8007abc:	2201      	movs	r2, #1
 8007abe:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac2:	4875      	ldr	r0, [pc, #468]	; (8007c98 <cppLoop+0x11f0>)
 8007ac4:	f7fa faf2 	bl	80020ac <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007ac8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007acc:	f000 fa02 	bl	8007ed4 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007ad0:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8007ca8 <cppLoop+0x1200>
 8007ad4:	4875      	ldr	r0, [pc, #468]	; (8007cac <cppLoop+0x1204>)
 8007ad6:	f7fc ff7b 	bl	80049d0 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007ada:	4874      	ldr	r0, [pc, #464]	; (8007cac <cppLoop+0x1204>)
 8007adc:	f7fc ff88 	bl	80049f0 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007ae0:	f244 405c 	movw	r0, #17500	; 0x445c
 8007ae4:	f000 f9f6 	bl	8007ed4 <HAL_Delay>
			sys_ident.stop();
 8007ae8:	4870      	ldr	r0, [pc, #448]	; (8007cac <cppLoop+0x1204>)
 8007aea:	f7fc ff95 	bl	8004a18 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007aee:	486f      	ldr	r0, [pc, #444]	; (8007cac <cppLoop+0x1204>)
 8007af0:	f7fc fefc 	bl	80048ec <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007af4:	2200      	movs	r2, #0
 8007af6:	f04f 31ff 	mov.w	r1, #4294967295
 8007afa:	4867      	ldr	r0, [pc, #412]	; (8007c98 <cppLoop+0x11f0>)
 8007afc:	f7fa fad6 	bl	80020ac <_ZN3LED2LREaa>
		}
		break;
 8007b00:	e0be      	b.n	8007c80 <cppLoop+0x11d8>

	case 14:
		led.fullColor('W');
 8007b02:	2157      	movs	r1, #87	; 0x57
 8007b04:	4864      	ldr	r0, [pc, #400]	; (8007c98 <cppLoop+0x11f0>)
 8007b06:	f7fa fa15 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b0a:	f7f9 fac9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b0e:	2100      	movs	r1, #0
 8007b10:	2000      	movs	r0, #0
 8007b12:	f7f9 fad5 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8007b16:	4866      	ldr	r0, [pc, #408]	; (8007cb0 <cppLoop+0x1208>)
 8007b18:	f7f9 fafc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f7f9 face 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007b24:	4b63      	ldr	r3, [pc, #396]	; (8007cb4 <cppLoop+0x120c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f8 fd25 	bl	8000578 <__aeabi_f2d>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461a      	mov	r2, r3
 8007b34:	4623      	mov	r3, r4
 8007b36:	4860      	ldr	r0, [pc, #384]	; (8007cb8 <cppLoop+0x1210>)
 8007b38:	f7f9 faec 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007b3c:	4859      	ldr	r0, [pc, #356]	; (8007ca4 <cppLoop+0x11fc>)
 8007b3e:	f7fa f995 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8098 	beq.w	8007c84 <cppLoop+0x11dc>
			HAL_Delay(500);
 8007b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b58:	f000 f9bc 	bl	8007ed4 <HAL_Delay>

			led.LR(1, -1);
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	2101      	movs	r1, #1
 8007b62:	484d      	ldr	r0, [pc, #308]	; (8007c98 <cppLoop+0x11f0>)
 8007b64:	f7fa faa2 	bl	80020ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007b68:	2102      	movs	r1, #2
 8007b6a:	4854      	ldr	r0, [pc, #336]	; (8007cbc <cppLoop+0x1214>)
 8007b6c:	f7fb fe16 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007b70:	4b50      	ldr	r3, [pc, #320]	; (8007cb4 <cppLoop+0x120c>)
 8007b72:	edd3 7a00 	vldr	s15, [r3]
 8007b76:	eeb0 0a67 	vmov.f32	s0, s15
 8007b7a:	4850      	ldr	r0, [pc, #320]	; (8007cbc <cppLoop+0x1214>)
 8007b7c:	f7fb fba3 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8007b80:	4b4c      	ldr	r3, [pc, #304]	; (8007cb4 <cppLoop+0x120c>)
 8007b82:	edd3 7a00 	vldr	s15, [r3]
 8007b86:	eeb0 0a67 	vmov.f32	s0, s15
 8007b8a:	484c      	ldr	r0, [pc, #304]	; (8007cbc <cppLoop+0x1214>)
 8007b8c:	f7fb fbaa 	bl	80032e4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8007b90:	484a      	ldr	r0, [pc, #296]	; (8007cbc <cppLoop+0x1214>)
 8007b92:	f7fb f9b7 	bl	8002f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8007b96:	4849      	ldr	r0, [pc, #292]	; (8007cbc <cppLoop+0x1214>)
 8007b98:	f7fb fcfe 	bl	8003598 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	483d      	ldr	r0, [pc, #244]	; (8007c98 <cppLoop+0x11f0>)
 8007ba4:	f7fa fa82 	bl	80020ac <_ZN3LED2LREaa>
		}

		break;
 8007ba8:	e06c      	b.n	8007c84 <cppLoop+0x11dc>

	case 15:
		led.fullColor('W');
 8007baa:	2157      	movs	r1, #87	; 0x57
 8007bac:	483a      	ldr	r0, [pc, #232]	; (8007c98 <cppLoop+0x11f0>)
 8007bae:	f7fa f9c1 	bl	8001f34 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007bb2:	f7f9 fa75 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f7f9 fa81 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8007bbe:	4840      	ldr	r0, [pc, #256]	; (8007cc0 <cppLoop+0x1218>)
 8007bc0:	f7f9 faa8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7f9 fa7a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8007bcc:	4b3d      	ldr	r3, [pc, #244]	; (8007cc4 <cppLoop+0x121c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f8 fcd1 	bl	8000578 <__aeabi_f2d>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4623      	mov	r3, r4
 8007bde:	4836      	ldr	r0, [pc, #216]	; (8007cb8 <cppLoop+0x1210>)
 8007be0:	f7f9 fa98 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007be4:	482f      	ldr	r0, [pc, #188]	; (8007ca4 <cppLoop+0x11fc>)
 8007be6:	f7fa f941 	bl	8001e6c <_ZN8JoyStick8getValueEv>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d046      	beq.n	8007c88 <cppLoop+0x11e0>
			HAL_Delay(500);
 8007bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007bfe:	f000 f969 	bl	8007ed4 <HAL_Delay>

			led.LR(1, -1);
 8007c02:	f04f 32ff 	mov.w	r2, #4294967295
 8007c06:	2101      	movs	r1, #1
 8007c08:	4823      	ldr	r0, [pc, #140]	; (8007c98 <cppLoop+0x11f0>)
 8007c0a:	f7fa fa4f 	bl	80020ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007c0e:	2101      	movs	r1, #1
 8007c10:	482a      	ldr	r0, [pc, #168]	; (8007cbc <cppLoop+0x1214>)
 8007c12:	f7fb fdc3 	bl	800379c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007c16:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <cppLoop+0x121c>)
 8007c18:	edd3 7a00 	vldr	s15, [r3]
 8007c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c20:	4826      	ldr	r0, [pc, #152]	; (8007cbc <cppLoop+0x1214>)
 8007c22:	f7fb fb50 	bl	80032c6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007c26:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <cppLoop+0x121c>)
 8007c28:	edd3 7a00 	vldr	s15, [r3]
 8007c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c30:	4822      	ldr	r0, [pc, #136]	; (8007cbc <cppLoop+0x1214>)
 8007c32:	f7fb fb57 	bl	80032e4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8007c36:	4821      	ldr	r0, [pc, #132]	; (8007cbc <cppLoop+0x1214>)
 8007c38:	f7fb f964 	bl	8002f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8007c3c:	481f      	ldr	r0, [pc, #124]	; (8007cbc <cppLoop+0x1214>)
 8007c3e:	f7fb fcab 	bl	8003598 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	2100      	movs	r1, #0
 8007c48:	4813      	ldr	r0, [pc, #76]	; (8007c98 <cppLoop+0x11f0>)
 8007c4a:	f7fa fa2f 	bl	80020ac <_ZN3LED2LREaa>
		}
		break;
 8007c4e:	e01b      	b.n	8007c88 <cppLoop+0x11e0>

	default:
		break;
 8007c50:	bf00      	nop
 8007c52:	e01a      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c54:	bf00      	nop
 8007c56:	e018      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c58:	bf00      	nop
 8007c5a:	e016      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c5c:	bf00      	nop
 8007c5e:	e014      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c60:	bf00      	nop
 8007c62:	e012      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c64:	bf00      	nop
 8007c66:	e010      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c68:	bf00      	nop
 8007c6a:	e00e      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c6c:	bf00      	nop
 8007c6e:	e00c      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c70:	bf00      	nop
 8007c72:	e00a      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c74:	bf00      	nop
 8007c76:	e008      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c78:	bf00      	nop
 8007c7a:	e006      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c7c:	bf00      	nop
 8007c7e:	e004      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c80:	bf00      	nop
 8007c82:	e002      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <cppLoop+0x11e2>
		break;
 8007c88:	bf00      	nop

	}

	HAL_Delay(30);
 8007c8a:	201e      	movs	r0, #30
 8007c8c:	f000 f922 	bl	8007ed4 <HAL_Delay>

}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c98:	200005c8 	.word	0x200005c8
 8007c9c:	0801829c 	.word	0x0801829c
 8007ca0:	08018260 	.word	0x08018260
 8007ca4:	200005bc 	.word	0x200005bc
 8007ca8:	3e99999a 	.word	0x3e99999a
 8007cac:	20024aec 	.word	0x20024aec
 8007cb0:	080182a4 	.word	0x080182a4
 8007cb4:	2003c450 	.word	0x2003c450
 8007cb8:	080181a0 	.word	0x080181a0
 8007cbc:	20017da0 	.word	0x20017da0
 8007cc0:	080182b0 	.word	0x080182b0
 8007cc4:	2003c448 	.word	0x2003c448

08007cc8 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af06      	add	r7, sp, #24
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d13d      	bne.n	8007d54 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d138      	bne.n	8007d54 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8007ce2:	481e      	ldr	r0, [pc, #120]	; (8007d5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007ce4:	f7fa fa1a 	bl	800211c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8007ce8:	481d      	ldr	r0, [pc, #116]	; (8007d60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007cea:	f7fc fc71 	bl	80045d0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007cee:	481d      	ldr	r0, [pc, #116]	; (8007d64 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007cf0:	f7fa f8b0 	bl	8001e54 <_ZN8JoyStickC1Ev>
Motor motor;
 8007cf4:	481c      	ldr	r0, [pc, #112]	; (8007d68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007cf6:	f7fc f896 	bl	8003e26 <_ZN5MotorC1Ev>
IMU imu;
 8007cfa:	481c      	ldr	r0, [pc, #112]	; (8007d6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007cfc:	f7f9 feb8 	bl	8001a70 <_ZN3IMUC1Ev>
Logger logger;
 8007d00:	481b      	ldr	r0, [pc, #108]	; (8007d70 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007d02:	f7fb fdec 	bl	80038de <_ZN6LoggerC1Ev>
Encoder encoder;
 8007d06:	481b      	ldr	r0, [pc, #108]	; (8007d74 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007d08:	f7f9 fa24 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007d0c:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007d0e:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007d10:	4915      	ldr	r1, [pc, #84]	; (8007d68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007d12:	4819      	ldr	r0, [pc, #100]	; (8007d78 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007d14:	f7fc fea4 	bl	8004a60 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8007d18:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007d1a:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007d1c:	4915      	ldr	r1, [pc, #84]	; (8007d74 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007d1e:	4817      	ldr	r0, [pc, #92]	; (8007d7c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007d20:	f7fc f966 	bl	8003ff0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007d3a:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007d3c:	490a      	ldr	r1, [pc, #40]	; (8007d68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007d3e:	4810      	ldr	r0, [pc, #64]	; (8007d80 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007d40:	f7fa fd1a 	bl	8002778 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8007d44:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007d46:	490a      	ldr	r1, [pc, #40]	; (8007d70 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007d48:	480e      	ldr	r0, [pc, #56]	; (8007d84 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007d4a:	f7fc fd85 	bl	8004858 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8007d4e:	480e      	ldr	r0, [pc, #56]	; (8007d88 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007d50:	f7fc fad0 	bl	80042f4 <_ZN13PathFollowingC1Ev>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	200002bc 	.word	0x200002bc
 8007d60:	200005b4 	.word	0x200005b4
 8007d64:	200005bc 	.word	0x200005bc
 8007d68:	200005c4 	.word	0x200005c4
 8007d6c:	200005d8 	.word	0x200005d8
 8007d70:	200005ec 	.word	0x200005ec
 8007d74:	20017cfc 	.word	0x20017cfc
 8007d78:	20017d20 	.word	0x20017d20
 8007d7c:	20017d60 	.word	0x20017d60
 8007d80:	20017da0 	.word	0x20017da0
 8007d84:	20024aec 	.word	0x20024aec
 8007d88:	20024cf8 	.word	0x20024cf8

08007d8c <_GLOBAL__sub_I_line_sensor>:
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7ff ff97 	bl	8007cc8 <_Z41__static_initialization_and_destruction_0ii>
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007dd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007da2:	e003      	b.n	8007dac <LoopCopyDataInit>

08007da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007da4:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007daa:	3104      	adds	r1, #4

08007dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007dac:	480b      	ldr	r0, [pc, #44]	; (8007ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007db4:	d3f6      	bcc.n	8007da4 <CopyDataInit>
  ldr  r2, =_sbss
 8007db6:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007db8:	e002      	b.n	8007dc0 <LoopFillZerobss>

08007dba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007dbc:	f842 3b04 	str.w	r3, [r2], #4

08007dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007dc0:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007dc4:	d3f9      	bcc.n	8007dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007dc6:	f7fe fd45 	bl	8006854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dca:	f00b fdd5 	bl	8013978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dce:	f7fd f87f 	bl	8004ed0 <main>
  bx  lr    
 8007dd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007dd4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007dd8:	080188b0 	.word	0x080188b0
  ldr  r0, =_sdata
 8007ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007de0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007de4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007de8:	20040e38 	.word	0x20040e38

08007dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007dec:	e7fe      	b.n	8007dec <ADC_IRQHandler>
	...

08007df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <HAL_Init+0x40>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0d      	ldr	r2, [pc, #52]	; (8007e30 <HAL_Init+0x40>)
 8007dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_Init+0x40>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <HAL_Init+0x40>)
 8007e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <HAL_Init+0x40>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a07      	ldr	r2, [pc, #28]	; (8007e30 <HAL_Init+0x40>)
 8007e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e18:	2003      	movs	r0, #3
 8007e1a:	f000 fd51 	bl	80088c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f000 f808 	bl	8007e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e24:	f7fd ff66 	bl	8005cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40023c00 	.word	0x40023c00

08007e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e3c:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <HAL_InitTick+0x54>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <HAL_InitTick+0x58>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	4619      	mov	r1, r3
 8007e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fd69 	bl	800892a <HAL_SYSTICK_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e00e      	b.n	8007e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d80a      	bhi.n	8007e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	f000 fd31 	bl	80088d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e74:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <HAL_InitTick+0x5c>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000000 	.word	0x20000000
 8007e8c:	20000008 	.word	0x20000008
 8007e90:	20000004 	.word	0x20000004

08007e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e98:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <HAL_IncTick+0x20>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <HAL_IncTick+0x24>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <HAL_IncTick+0x24>)
 8007ea6:	6013      	str	r3, [r2, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000008 	.word	0x20000008
 8007eb8:	2003edc0 	.word	0x2003edc0

08007ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <HAL_GetTick+0x14>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	2003edc0 	.word	0x2003edc0

08007ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007edc:	f7ff ffee 	bl	8007ebc <HAL_GetTick>
 8007ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d005      	beq.n	8007efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <HAL_Delay+0x40>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007efa:	bf00      	nop
 8007efc:	f7ff ffde 	bl	8007ebc <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d8f7      	bhi.n	8007efc <HAL_Delay+0x28>
  {
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000008 	.word	0x20000008

08007f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e033      	b.n	8007f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fd ff04 	bl	8005d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d118      	bne.n	8007f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f5e:	f023 0302 	bic.w	r3, r3, #2
 8007f62:	f043 0202 	orr.w	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa5a 	bl	8008424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	f043 0201 	orr.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
 8007f86:	e001      	b.n	8007f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_ADC_Start_DMA+0x1e>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e0cc      	b.n	8008158 <HAL_ADC_Start_DMA+0x1b8>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d018      	beq.n	8008006 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0201 	orr.w	r2, r2, #1
 8007fe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fe4:	4b5e      	ldr	r3, [pc, #376]	; (8008160 <HAL_ADC_Start_DMA+0x1c0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a5e      	ldr	r2, [pc, #376]	; (8008164 <HAL_ADC_Start_DMA+0x1c4>)
 8007fea:	fba2 2303 	umull	r2, r3, r2, r3
 8007fee:	0c9a      	lsrs	r2, r3, #18
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007ff8:	e002      	b.n	8008000 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f9      	bne.n	8007ffa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 80a0 	bne.w	8008156 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008034:	2b00      	cmp	r3, #0
 8008036:	d007      	beq.n	8008048 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008040:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d106      	bne.n	8008064 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f023 0206 	bic.w	r2, r3, #6
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	645a      	str	r2, [r3, #68]	; 0x44
 8008062:	e002      	b.n	800806a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008072:	4b3d      	ldr	r3, [pc, #244]	; (8008168 <HAL_ADC_Start_DMA+0x1c8>)
 8008074:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	4a3c      	ldr	r2, [pc, #240]	; (800816c <HAL_ADC_Start_DMA+0x1cc>)
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	4a3b      	ldr	r2, [pc, #236]	; (8008170 <HAL_ADC_Start_DMA+0x1d0>)
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	4a3a      	ldr	r2, [pc, #232]	; (8008174 <HAL_ADC_Start_DMA+0x1d4>)
 800808c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008096:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80080a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	334c      	adds	r3, #76	; 0x4c
 80080c2:	4619      	mov	r1, r3
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f000 fcea 	bl	8008aa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 031f 	and.w	r3, r3, #31
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d12a      	bne.n	800812e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a26      	ldr	r2, [pc, #152]	; (8008178 <HAL_ADC_Start_DMA+0x1d8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d015      	beq.n	800810e <HAL_ADC_Start_DMA+0x16e>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a25      	ldr	r2, [pc, #148]	; (800817c <HAL_ADC_Start_DMA+0x1dc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d105      	bne.n	80080f8 <HAL_ADC_Start_DMA+0x158>
 80080ec:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <HAL_ADC_Start_DMA+0x1c8>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a20      	ldr	r2, [pc, #128]	; (8008180 <HAL_ADC_Start_DMA+0x1e0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d129      	bne.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
 8008102:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_ADC_Start_DMA+0x1c8>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	2b0f      	cmp	r3, #15
 800810c:	d823      	bhi.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11c      	bne.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800812a:	609a      	str	r2, [r3, #8]
 800812c:	e013      	b.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a11      	ldr	r2, [pc, #68]	; (8008178 <HAL_ADC_Start_DMA+0x1d8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d10e      	bne.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008154:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000000 	.word	0x20000000
 8008164:	431bde83 	.word	0x431bde83
 8008168:	40012300 	.word	0x40012300
 800816c:	0800861d 	.word	0x0800861d
 8008170:	080086d7 	.word	0x080086d7
 8008174:	080086f3 	.word	0x080086f3
 8008178:	40012000 	.word	0x40012000
 800817c:	40012100 	.word	0x40012100
 8008180:	40012200 	.word	0x40012200

08008184 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d101      	bne.n	80081dc <HAL_ADC_ConfigChannel+0x1c>
 80081d8:	2302      	movs	r3, #2
 80081da:	e113      	b.n	8008404 <HAL_ADC_ConfigChannel+0x244>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d925      	bls.n	8008238 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68d9      	ldr	r1, [r3, #12]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	4613      	mov	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4413      	add	r3, r2
 8008200:	3b1e      	subs	r3, #30
 8008202:	2207      	movs	r2, #7
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	43da      	mvns	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	400a      	ands	r2, r1
 8008210:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68d9      	ldr	r1, [r3, #12]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	4618      	mov	r0, r3
 8008224:	4603      	mov	r3, r0
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	4403      	add	r3, r0
 800822a:	3b1e      	subs	r3, #30
 800822c:	409a      	lsls	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	60da      	str	r2, [r3, #12]
 8008236:	e022      	b.n	800827e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6919      	ldr	r1, [r3, #16]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	4613      	mov	r3, r2
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	4413      	add	r3, r2
 800824c:	2207      	movs	r2, #7
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43da      	mvns	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	400a      	ands	r2, r1
 800825a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6919      	ldr	r1, [r3, #16]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	4618      	mov	r0, r3
 800826e:	4603      	mov	r3, r0
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4403      	add	r3, r0
 8008274:	409a      	lsls	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b06      	cmp	r3, #6
 8008284:	d824      	bhi.n	80082d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	3b05      	subs	r3, #5
 8008298:	221f      	movs	r2, #31
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43da      	mvns	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	400a      	ands	r2, r1
 80082a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4618      	mov	r0, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	3b05      	subs	r3, #5
 80082c2:	fa00 f203 	lsl.w	r2, r0, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	635a      	str	r2, [r3, #52]	; 0x34
 80082ce:	e04c      	b.n	800836a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b0c      	cmp	r3, #12
 80082d6:	d824      	bhi.n	8008322 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	3b23      	subs	r3, #35	; 0x23
 80082ea:	221f      	movs	r2, #31
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	43da      	mvns	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	400a      	ands	r2, r1
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	4618      	mov	r0, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	3b23      	subs	r3, #35	; 0x23
 8008314:	fa00 f203 	lsl.w	r2, r0, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	631a      	str	r2, [r3, #48]	; 0x30
 8008320:	e023      	b.n	800836a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	3b41      	subs	r3, #65	; 0x41
 8008334:	221f      	movs	r2, #31
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43da      	mvns	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	400a      	ands	r2, r1
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	4618      	mov	r0, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	3b41      	subs	r3, #65	; 0x41
 800835e:	fa00 f203 	lsl.w	r2, r0, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800836a:	4b29      	ldr	r3, [pc, #164]	; (8008410 <HAL_ADC_ConfigChannel+0x250>)
 800836c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a28      	ldr	r2, [pc, #160]	; (8008414 <HAL_ADC_ConfigChannel+0x254>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d10f      	bne.n	8008398 <HAL_ADC_ConfigChannel+0x1d8>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b12      	cmp	r3, #18
 800837e:	d10b      	bne.n	8008398 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <HAL_ADC_ConfigChannel+0x254>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d12b      	bne.n	80083fa <HAL_ADC_ConfigChannel+0x23a>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <HAL_ADC_ConfigChannel+0x258>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <HAL_ADC_ConfigChannel+0x1f4>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b11      	cmp	r3, #17
 80083b2:	d122      	bne.n	80083fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a11      	ldr	r2, [pc, #68]	; (8008418 <HAL_ADC_ConfigChannel+0x258>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d111      	bne.n	80083fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <HAL_ADC_ConfigChannel+0x25c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a11      	ldr	r2, [pc, #68]	; (8008420 <HAL_ADC_ConfigChannel+0x260>)
 80083dc:	fba2 2303 	umull	r2, r3, r2, r3
 80083e0:	0c9a      	lsrs	r2, r3, #18
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80083ec:	e002      	b.n	80083f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f9      	bne.n	80083ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	40012300 	.word	0x40012300
 8008414:	40012000 	.word	0x40012000
 8008418:	10000012 	.word	0x10000012
 800841c:	20000000 	.word	0x20000000
 8008420:	431bde83 	.word	0x431bde83

08008424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800842c:	4b79      	ldr	r3, [pc, #484]	; (8008614 <ADC_Init+0x1f0>)
 800842e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	431a      	orrs	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6859      	ldr	r1, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	021a      	lsls	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800847c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6859      	ldr	r1, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800849e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6899      	ldr	r1, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	4a58      	ldr	r2, [pc, #352]	; (8008618 <ADC_Init+0x1f4>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d022      	beq.n	8008502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6899      	ldr	r1, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80084ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6899      	ldr	r1, [r3, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	e00f      	b.n	8008522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0202 	bic.w	r2, r2, #2
 8008530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6899      	ldr	r1, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7e1b      	ldrb	r3, [r3, #24]
 800853c:	005a      	lsls	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01b      	beq.n	8008588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800855e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800856e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	3b01      	subs	r3, #1
 800857c:	035a      	lsls	r2, r3, #13
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	e007      	b.n	8008598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	051a      	lsls	r2, r3, #20
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80085cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6899      	ldr	r1, [r3, #8]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085da:	025a      	lsls	r2, r3, #9
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6899      	ldr	r1, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	029a      	lsls	r2, r3, #10
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	609a      	str	r2, [r3, #8]
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	40012300 	.word	0x40012300
 8008618:	0f000001 	.word	0x0f000001

0800861c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008628:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008632:	2b00      	cmp	r3, #0
 8008634:	d13c      	bne.n	80086b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d12b      	bne.n	80086a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008654:	2b00      	cmp	r3, #0
 8008656:	d127      	bne.n	80086a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008662:	2b00      	cmp	r3, #0
 8008664:	d006      	beq.n	8008674 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008670:	2b00      	cmp	r3, #0
 8008672:	d119      	bne.n	80086a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0220 	bic.w	r2, r2, #32
 8008682:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	f043 0201 	orr.w	r2, r3, #1
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7ff fd6b 	bl	8008184 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80086ae:	e00e      	b.n	80086ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	f003 0310 	and.w	r3, r3, #16
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fd75 	bl	80081ac <HAL_ADC_ErrorCallback>
}
 80086c2:	e004      	b.n	80086ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff fd57 	bl	8008198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2240      	movs	r2, #64	; 0x40
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f043 0204 	orr.w	r2, r3, #4
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff fd4a 	bl	80081ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <__NVIC_SetPriorityGrouping+0x44>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800873c:	4013      	ands	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800874c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008752:	4a04      	ldr	r2, [pc, #16]	; (8008764 <__NVIC_SetPriorityGrouping+0x44>)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	60d3      	str	r3, [r2, #12]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	e000ed00 	.word	0xe000ed00

08008768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800876c:	4b04      	ldr	r3, [pc, #16]	; (8008780 <__NVIC_GetPriorityGrouping+0x18>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	f003 0307 	and.w	r3, r3, #7
}
 8008776:	4618      	mov	r0, r3
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	e000ed00 	.word	0xe000ed00

08008784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800878e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008792:	2b00      	cmp	r3, #0
 8008794:	db0b      	blt.n	80087ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	f003 021f 	and.w	r2, r3, #31
 800879c:	4907      	ldr	r1, [pc, #28]	; (80087bc <__NVIC_EnableIRQ+0x38>)
 800879e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a2:	095b      	lsrs	r3, r3, #5
 80087a4:	2001      	movs	r0, #1
 80087a6:	fa00 f202 	lsl.w	r2, r0, r2
 80087aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	e000e100 	.word	0xe000e100

080087c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db0a      	blt.n	80087ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	490c      	ldr	r1, [pc, #48]	; (800880c <__NVIC_SetPriority+0x4c>)
 80087da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087de:	0112      	lsls	r2, r2, #4
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	440b      	add	r3, r1
 80087e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80087e8:	e00a      	b.n	8008800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	4908      	ldr	r1, [pc, #32]	; (8008810 <__NVIC_SetPriority+0x50>)
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	3b04      	subs	r3, #4
 80087f8:	0112      	lsls	r2, r2, #4
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	440b      	add	r3, r1
 80087fe:	761a      	strb	r2, [r3, #24]
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	e000e100 	.word	0xe000e100
 8008810:	e000ed00 	.word	0xe000ed00

08008814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f1c3 0307 	rsb	r3, r3, #7
 800882e:	2b04      	cmp	r3, #4
 8008830:	bf28      	it	cs
 8008832:	2304      	movcs	r3, #4
 8008834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3304      	adds	r3, #4
 800883a:	2b06      	cmp	r3, #6
 800883c:	d902      	bls.n	8008844 <NVIC_EncodePriority+0x30>
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	3b03      	subs	r3, #3
 8008842:	e000      	b.n	8008846 <NVIC_EncodePriority+0x32>
 8008844:	2300      	movs	r3, #0
 8008846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	43da      	mvns	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	401a      	ands	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800885c:	f04f 31ff 	mov.w	r1, #4294967295
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	43d9      	mvns	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800886c:	4313      	orrs	r3, r2
         );
}
 800886e:	4618      	mov	r0, r3
 8008870:	3724      	adds	r7, #36	; 0x24
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3b01      	subs	r3, #1
 8008888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800888c:	d301      	bcc.n	8008892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800888e:	2301      	movs	r3, #1
 8008890:	e00f      	b.n	80088b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008892:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <SysTick_Config+0x40>)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3b01      	subs	r3, #1
 8008898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800889a:	210f      	movs	r1, #15
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	f7ff ff8e 	bl	80087c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <SysTick_Config+0x40>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088aa:	4b04      	ldr	r3, [pc, #16]	; (80088bc <SysTick_Config+0x40>)
 80088ac:	2207      	movs	r2, #7
 80088ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	e000e010 	.word	0xe000e010

080088c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ff29 	bl	8008720 <__NVIC_SetPriorityGrouping>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b086      	sub	sp, #24
 80088da:	af00      	add	r7, sp, #0
 80088dc:	4603      	mov	r3, r0
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80088e8:	f7ff ff3e 	bl	8008768 <__NVIC_GetPriorityGrouping>
 80088ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	f7ff ff8e 	bl	8008814 <NVIC_EncodePriority>
 80088f8:	4602      	mov	r2, r0
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff ff5d 	bl	80087c0 <__NVIC_SetPriority>
}
 8008906:	bf00      	nop
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	4603      	mov	r3, r0
 8008916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff ff31 	bl	8008784 <__NVIC_EnableIRQ>
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff ffa2 	bl	800887c <SysTick_Config>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008950:	f7ff fab4 	bl	8007ebc <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e099      	b.n	8008a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0201 	bic.w	r2, r2, #1
 800897e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008980:	e00f      	b.n	80089a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008982:	f7ff fa9b 	bl	8007ebc <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b05      	cmp	r3, #5
 800898e:	d908      	bls.n	80089a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2203      	movs	r2, #3
 800899a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e078      	b.n	8008a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e8      	bne.n	8008982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4b38      	ldr	r3, [pc, #224]	; (8008a9c <HAL_DMA_Init+0x158>)
 80089bc:	4013      	ands	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80089ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d107      	bne.n	8008a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	4313      	orrs	r3, r2
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 0307 	bic.w	r3, r3, #7
 8008a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d117      	bne.n	8008a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fa9d 	bl	8008f88 <DMA_CheckFifoParam>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2240      	movs	r2, #64	; 0x40
 8008a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008a62:	2301      	movs	r3, #1
 8008a64:	e016      	b.n	8008a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa54 	bl	8008f1c <DMA_CalcBaseAndBitshift>
 8008a74:	4603      	mov	r3, r0
 8008a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7c:	223f      	movs	r2, #63	; 0x3f
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	f010803f 	.word	0xf010803f

08008aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_DMA_Start_IT+0x26>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e040      	b.n	8008b48 <HAL_DMA_Start_IT+0xa8>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d12f      	bne.n	8008b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f9e6 	bl	8008ec0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af8:	223f      	movs	r2, #63	; 0x3f
 8008afa:	409a      	lsls	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0216 	orr.w	r2, r2, #22
 8008b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0208 	orr.w	r2, r2, #8
 8008b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e005      	b.n	8008b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
 8008b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d004      	beq.n	8008b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2280      	movs	r2, #128	; 0x80
 8008b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e00c      	b.n	8008b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ba0:	4b92      	ldr	r3, [pc, #584]	; (8008dec <HAL_DMA_IRQHandler+0x258>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a92      	ldr	r2, [pc, #584]	; (8008df0 <HAL_DMA_IRQHandler+0x25c>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	0a9b      	lsrs	r3, r3, #10
 8008bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01a      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d013      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0204 	bic.w	r2, r2, #4
 8008be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bec:	2208      	movs	r2, #8
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c04:	2201      	movs	r2, #1
 8008c06:	409a      	lsls	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d012      	beq.n	8008c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00b      	beq.n	8008c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c22:	2201      	movs	r2, #1
 8008c24:	409a      	lsls	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f043 0202 	orr.w	r2, r3, #2
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	409a      	lsls	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4013      	ands	r3, r2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	2204      	movs	r2, #4
 8008c5a:	409a      	lsls	r2, r3
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c64:	f043 0204 	orr.w	r2, r3, #4
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c70:	2210      	movs	r2, #16
 8008c72:	409a      	lsls	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d043      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d03c      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8e:	2210      	movs	r2, #16
 8008c90:	409a      	lsls	r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d018      	beq.n	8008cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d108      	bne.n	8008cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d024      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
 8008cc2:	e01f      	b.n	8008d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01b      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
 8008cd4:	e016      	b.n	8008d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0208 	bic.w	r2, r2, #8
 8008cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d08:	2220      	movs	r2, #32
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 808e 	beq.w	8008e32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8086 	beq.w	8008e32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	409a      	lsls	r2, r3
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d136      	bne.n	8008dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0216 	bic.w	r2, r2, #22
 8008d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695a      	ldr	r2, [r3, #20]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d103      	bne.n	8008d6e <HAL_DMA_IRQHandler+0x1da>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0208 	bic.w	r2, r2, #8
 8008d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d82:	223f      	movs	r2, #63	; 0x3f
 8008d84:	409a      	lsls	r2, r3
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d07d      	beq.n	8008e9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
        }
        return;
 8008daa:	e078      	b.n	8008e9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01c      	beq.n	8008df4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d108      	bne.n	8008dda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d030      	beq.n	8008e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
 8008dd8:	e02b      	b.n	8008e32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d027      	beq.n	8008e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	4798      	blx	r3
 8008dea:	e022      	b.n	8008e32 <HAL_DMA_IRQHandler+0x29e>
 8008dec:	20000000 	.word	0x20000000
 8008df0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0210 	bic.w	r2, r2, #16
 8008e10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d032      	beq.n	8008ea0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d022      	beq.n	8008e8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2205      	movs	r2, #5
 8008e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3301      	adds	r3, #1
 8008e62:	60bb      	str	r3, [r7, #8]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d307      	bcc.n	8008e7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1f2      	bne.n	8008e5e <HAL_DMA_IRQHandler+0x2ca>
 8008e78:	e000      	b.n	8008e7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008e7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
 8008e9c:	e000      	b.n	8008ea0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008e9e:	bf00      	nop
    }
  }
}
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop

08008ea8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008edc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d108      	bne.n	8008f00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008efe:	e007      	b.n	8008f10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	3b10      	subs	r3, #16
 8008f2c:	4a14      	ldr	r2, [pc, #80]	; (8008f80 <DMA_CalcBaseAndBitshift+0x64>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	091b      	lsrs	r3, r3, #4
 8008f34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f36:	4a13      	ldr	r2, [pc, #76]	; (8008f84 <DMA_CalcBaseAndBitshift+0x68>)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d909      	bls.n	8008f5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f52:	f023 0303 	bic.w	r3, r3, #3
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	659a      	str	r2, [r3, #88]	; 0x58
 8008f5c:	e007      	b.n	8008f6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	aaaaaaab 	.word	0xaaaaaaab
 8008f84:	080182f0 	.word	0x080182f0

08008f88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11f      	bne.n	8008fe2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d855      	bhi.n	8009054 <DMA_CheckFifoParam+0xcc>
 8008fa8:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <DMA_CheckFifoParam+0x28>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fc1 	.word	0x08008fc1
 8008fb4:	08008fd3 	.word	0x08008fd3
 8008fb8:	08008fc1 	.word	0x08008fc1
 8008fbc:	08009055 	.word	0x08009055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d045      	beq.n	8009058 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fd0:	e042      	b.n	8009058 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008fda:	d13f      	bne.n	800905c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fe0:	e03c      	b.n	800905c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fea:	d121      	bne.n	8009030 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d836      	bhi.n	8009060 <DMA_CheckFifoParam+0xd8>
 8008ff2:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <DMA_CheckFifoParam+0x70>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009009 	.word	0x08009009
 8008ffc:	0800900f 	.word	0x0800900f
 8009000:	08009009 	.word	0x08009009
 8009004:	08009021 	.word	0x08009021
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
      break;
 800900c:	e02f      	b.n	800906e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d024      	beq.n	8009064 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800901e:	e021      	b.n	8009064 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009028:	d11e      	bne.n	8009068 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800902e:	e01b      	b.n	8009068 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d902      	bls.n	800903c <DMA_CheckFifoParam+0xb4>
 8009036:	2b03      	cmp	r3, #3
 8009038:	d003      	beq.n	8009042 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800903a:	e018      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
      break;
 8009040:	e015      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00e      	beq.n	800906c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	73fb      	strb	r3, [r7, #15]
      break;
 8009052:	e00b      	b.n	800906c <DMA_CheckFifoParam+0xe4>
      break;
 8009054:	bf00      	nop
 8009056:	e00a      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;
 8009058:	bf00      	nop
 800905a:	e008      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;
 800905c:	bf00      	nop
 800905e:	e006      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;
 8009060:	bf00      	nop
 8009062:	e004      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;
 8009064:	bf00      	nop
 8009066:	e002      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;   
 8009068:	bf00      	nop
 800906a:	e000      	b.n	800906e <DMA_CheckFifoParam+0xe6>
      break;
 800906c:	bf00      	nop
    }
  } 
  
  return status; 
 800906e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800907c:	b480      	push	{r7}
 800907e:	b089      	sub	sp, #36	; 0x24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e177      	b.n	8009388 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009098:	2201      	movs	r2, #1
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4013      	ands	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	f040 8166 	bne.w	8009382 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d00b      	beq.n	80090d6 <HAL_GPIO_Init+0x5a>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d007      	beq.n	80090d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80090ca:	2b11      	cmp	r3, #17
 80090cc:	d003      	beq.n	80090d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b12      	cmp	r3, #18
 80090d4:	d130      	bne.n	8009138 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	2203      	movs	r2, #3
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	43db      	mvns	r3, r3
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	4013      	ands	r3, r2
 80090ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800910c:	2201      	movs	r2, #1
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	fa02 f303 	lsl.w	r3, r2, r3
 8009114:	43db      	mvns	r3, r3
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	4013      	ands	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	091b      	lsrs	r3, r3, #4
 8009122:	f003 0201 	and.w	r2, r3, #1
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4313      	orrs	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	2203      	movs	r2, #3
 8009144:	fa02 f303 	lsl.w	r3, r2, r3
 8009148:	43db      	mvns	r3, r3
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	4013      	ands	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4313      	orrs	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d003      	beq.n	8009178 <HAL_GPIO_Init+0xfc>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	2b12      	cmp	r3, #18
 8009176:	d123      	bne.n	80091c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	08da      	lsrs	r2, r3, #3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3208      	adds	r2, #8
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	220f      	movs	r2, #15
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	43db      	mvns	r3, r3
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	4013      	ands	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691a      	ldr	r2, [r3, #16]
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	08da      	lsrs	r2, r3, #3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3208      	adds	r2, #8
 80091ba:	69b9      	ldr	r1, [r7, #24]
 80091bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	2203      	movs	r2, #3
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	43db      	mvns	r3, r3
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4013      	ands	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f003 0203 	and.w	r2, r3, #3
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80c0 	beq.w	8009382 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	4b65      	ldr	r3, [pc, #404]	; (800939c <HAL_GPIO_Init+0x320>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	4a64      	ldr	r2, [pc, #400]	; (800939c <HAL_GPIO_Init+0x320>)
 800920c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009210:	6453      	str	r3, [r2, #68]	; 0x44
 8009212:	4b62      	ldr	r3, [pc, #392]	; (800939c <HAL_GPIO_Init+0x320>)
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800921e:	4a60      	ldr	r2, [pc, #384]	; (80093a0 <HAL_GPIO_Init+0x324>)
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	089b      	lsrs	r3, r3, #2
 8009224:	3302      	adds	r3, #2
 8009226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800922a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	220f      	movs	r2, #15
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	43db      	mvns	r3, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4013      	ands	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a57      	ldr	r2, [pc, #348]	; (80093a4 <HAL_GPIO_Init+0x328>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d037      	beq.n	80092ba <HAL_GPIO_Init+0x23e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a56      	ldr	r2, [pc, #344]	; (80093a8 <HAL_GPIO_Init+0x32c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d031      	beq.n	80092b6 <HAL_GPIO_Init+0x23a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a55      	ldr	r2, [pc, #340]	; (80093ac <HAL_GPIO_Init+0x330>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d02b      	beq.n	80092b2 <HAL_GPIO_Init+0x236>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a54      	ldr	r2, [pc, #336]	; (80093b0 <HAL_GPIO_Init+0x334>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d025      	beq.n	80092ae <HAL_GPIO_Init+0x232>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a53      	ldr	r2, [pc, #332]	; (80093b4 <HAL_GPIO_Init+0x338>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01f      	beq.n	80092aa <HAL_GPIO_Init+0x22e>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a52      	ldr	r2, [pc, #328]	; (80093b8 <HAL_GPIO_Init+0x33c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d019      	beq.n	80092a6 <HAL_GPIO_Init+0x22a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a51      	ldr	r2, [pc, #324]	; (80093bc <HAL_GPIO_Init+0x340>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d013      	beq.n	80092a2 <HAL_GPIO_Init+0x226>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a50      	ldr	r2, [pc, #320]	; (80093c0 <HAL_GPIO_Init+0x344>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00d      	beq.n	800929e <HAL_GPIO_Init+0x222>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a4f      	ldr	r2, [pc, #316]	; (80093c4 <HAL_GPIO_Init+0x348>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d007      	beq.n	800929a <HAL_GPIO_Init+0x21e>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a4e      	ldr	r2, [pc, #312]	; (80093c8 <HAL_GPIO_Init+0x34c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d101      	bne.n	8009296 <HAL_GPIO_Init+0x21a>
 8009292:	2309      	movs	r3, #9
 8009294:	e012      	b.n	80092bc <HAL_GPIO_Init+0x240>
 8009296:	230a      	movs	r3, #10
 8009298:	e010      	b.n	80092bc <HAL_GPIO_Init+0x240>
 800929a:	2308      	movs	r3, #8
 800929c:	e00e      	b.n	80092bc <HAL_GPIO_Init+0x240>
 800929e:	2307      	movs	r3, #7
 80092a0:	e00c      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092a2:	2306      	movs	r3, #6
 80092a4:	e00a      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092a6:	2305      	movs	r3, #5
 80092a8:	e008      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092aa:	2304      	movs	r3, #4
 80092ac:	e006      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092ae:	2303      	movs	r3, #3
 80092b0:	e004      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e002      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <HAL_GPIO_Init+0x240>
 80092ba:	2300      	movs	r3, #0
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	f002 0203 	and.w	r2, r2, #3
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	4093      	lsls	r3, r2
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092cc:	4934      	ldr	r1, [pc, #208]	; (80093a0 <HAL_GPIO_Init+0x324>)
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	089b      	lsrs	r3, r3, #2
 80092d2:	3302      	adds	r3, #2
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80092da:	4b3c      	ldr	r3, [pc, #240]	; (80093cc <HAL_GPIO_Init+0x350>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	43db      	mvns	r3, r3
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	4013      	ands	r3, r2
 80092e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80092fe:	4a33      	ldr	r2, [pc, #204]	; (80093cc <HAL_GPIO_Init+0x350>)
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009304:	4b31      	ldr	r3, [pc, #196]	; (80093cc <HAL_GPIO_Init+0x350>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	43db      	mvns	r3, r3
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4013      	ands	r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009328:	4a28      	ldr	r2, [pc, #160]	; (80093cc <HAL_GPIO_Init+0x350>)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800932e:	4b27      	ldr	r3, [pc, #156]	; (80093cc <HAL_GPIO_Init+0x350>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	43db      	mvns	r3, r3
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	4013      	ands	r3, r2
 800933c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4313      	orrs	r3, r2
 8009350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009352:	4a1e      	ldr	r2, [pc, #120]	; (80093cc <HAL_GPIO_Init+0x350>)
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009358:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <HAL_GPIO_Init+0x350>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	43db      	mvns	r3, r3
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	4013      	ands	r3, r2
 8009366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800937c:	4a13      	ldr	r2, [pc, #76]	; (80093cc <HAL_GPIO_Init+0x350>)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	3301      	adds	r3, #1
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	f67f ae84 	bls.w	8009098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009390:	bf00      	nop
 8009392:	3724      	adds	r7, #36	; 0x24
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	40023800 	.word	0x40023800
 80093a0:	40013800 	.word	0x40013800
 80093a4:	40020000 	.word	0x40020000
 80093a8:	40020400 	.word	0x40020400
 80093ac:	40020800 	.word	0x40020800
 80093b0:	40020c00 	.word	0x40020c00
 80093b4:	40021000 	.word	0x40021000
 80093b8:	40021400 	.word	0x40021400
 80093bc:	40021800 	.word	0x40021800
 80093c0:	40021c00 	.word	0x40021c00
 80093c4:	40022000 	.word	0x40022000
 80093c8:	40022400 	.word	0x40022400
 80093cc:	40013c00 	.word	0x40013c00

080093d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	887b      	ldrh	r3, [r7, #2]
 80093e2:	4013      	ands	r3, r2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
 80093ec:	e001      	b.n	80093f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	807b      	strh	r3, [r7, #2]
 800940c:	4613      	mov	r3, r2
 800940e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009410:	787b      	ldrb	r3, [r7, #1]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009416:	887a      	ldrh	r2, [r7, #2]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800941c:	e003      	b.n	8009426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800941e:	887b      	ldrh	r3, [r7, #2]
 8009420:	041a      	lsls	r2, r3, #16
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	619a      	str	r2, [r3, #24]
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e11f      	b.n	8009686 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fc fd24 	bl	8005ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2224      	movs	r2, #36	; 0x24
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009498:	f001 f96e 	bl	800a778 <HAL_RCC_GetPCLK1Freq>
 800949c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	4a7b      	ldr	r2, [pc, #492]	; (8009690 <HAL_I2C_Init+0x25c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d807      	bhi.n	80094b8 <HAL_I2C_Init+0x84>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4a7a      	ldr	r2, [pc, #488]	; (8009694 <HAL_I2C_Init+0x260>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	bf94      	ite	ls
 80094b0:	2301      	movls	r3, #1
 80094b2:	2300      	movhi	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	e006      	b.n	80094c6 <HAL_I2C_Init+0x92>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4a77      	ldr	r2, [pc, #476]	; (8009698 <HAL_I2C_Init+0x264>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	bf94      	ite	ls
 80094c0:	2301      	movls	r3, #1
 80094c2:	2300      	movhi	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e0db      	b.n	8009686 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a72      	ldr	r2, [pc, #456]	; (800969c <HAL_I2C_Init+0x268>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	0c9b      	lsrs	r3, r3, #18
 80094d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	4a64      	ldr	r2, [pc, #400]	; (8009690 <HAL_I2C_Init+0x25c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d802      	bhi.n	8009508 <HAL_I2C_Init+0xd4>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	3301      	adds	r3, #1
 8009506:	e009      	b.n	800951c <HAL_I2C_Init+0xe8>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	4a63      	ldr	r2, [pc, #396]	; (80096a0 <HAL_I2C_Init+0x26c>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	099b      	lsrs	r3, r3, #6
 800951a:	3301      	adds	r3, #1
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	430b      	orrs	r3, r1
 8009522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800952e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	4956      	ldr	r1, [pc, #344]	; (8009690 <HAL_I2C_Init+0x25c>)
 8009538:	428b      	cmp	r3, r1
 800953a:	d80d      	bhi.n	8009558 <HAL_I2C_Init+0x124>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	1e59      	subs	r1, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	fbb1 f3f3 	udiv	r3, r1, r3
 800954a:	3301      	adds	r3, #1
 800954c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009550:	2b04      	cmp	r3, #4
 8009552:	bf38      	it	cc
 8009554:	2304      	movcc	r3, #4
 8009556:	e04f      	b.n	80095f8 <HAL_I2C_Init+0x1c4>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d111      	bne.n	8009584 <HAL_I2C_Init+0x150>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	1e58      	subs	r0, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	440b      	add	r3, r1
 800956e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009572:	3301      	adds	r3, #1
 8009574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	e012      	b.n	80095aa <HAL_I2C_Init+0x176>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	1e58      	subs	r0, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6859      	ldr	r1, [r3, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	0099      	lsls	r1, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	fbb0 f3f3 	udiv	r3, r0, r3
 800959a:	3301      	adds	r3, #1
 800959c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf0c      	ite	eq
 80095a4:	2301      	moveq	r3, #1
 80095a6:	2300      	movne	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_I2C_Init+0x17e>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e022      	b.n	80095f8 <HAL_I2C_Init+0x1c4>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10e      	bne.n	80095d8 <HAL_I2C_Init+0x1a4>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1e58      	subs	r0, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6859      	ldr	r1, [r3, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	440b      	add	r3, r1
 80095c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80095cc:	3301      	adds	r3, #1
 80095ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d6:	e00f      	b.n	80095f8 <HAL_I2C_Init+0x1c4>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	1e58      	subs	r0, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6859      	ldr	r1, [r3, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	0099      	lsls	r1, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ee:	3301      	adds	r3, #1
 80095f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	6809      	ldr	r1, [r1, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69da      	ldr	r2, [r3, #28]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6911      	ldr	r1, [r2, #16]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	68d2      	ldr	r2, [r2, #12]
 8009632:	4311      	orrs	r1, r2
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	430b      	orrs	r3, r1
 800963a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	000186a0 	.word	0x000186a0
 8009694:	001e847f 	.word	0x001e847f
 8009698:	003d08ff 	.word	0x003d08ff
 800969c:	431bde83 	.word	0x431bde83
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	461a      	mov	r2, r3
 80096b0:	460b      	mov	r3, r1
 80096b2:	817b      	strh	r3, [r7, #10]
 80096b4:	4613      	mov	r3, r2
 80096b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096b8:	f7fe fc00 	bl	8007ebc <HAL_GetTick>
 80096bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	f040 80e0 	bne.w	800988c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2319      	movs	r3, #25
 80096d2:	2201      	movs	r2, #1
 80096d4:	4970      	ldr	r1, [pc, #448]	; (8009898 <HAL_I2C_Master_Transmit+0x1f4>)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 fc58 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
 80096e4:	e0d3      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_I2C_Master_Transmit+0x50>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e0cc      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b01      	cmp	r3, #1
 8009708:	d007      	beq.n	800971a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2221      	movs	r2, #33	; 0x21
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2210      	movs	r2, #16
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	893a      	ldrh	r2, [r7, #8]
 800974a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a50      	ldr	r2, [pc, #320]	; (800989c <HAL_I2C_Master_Transmit+0x1f8>)
 800975a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800975c:	8979      	ldrh	r1, [r7, #10]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	6a3a      	ldr	r2, [r7, #32]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fac2 	bl	8009cec <I2C_MasterRequestWrite>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e08d      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009788:	e066      	b.n	8009858 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	6a39      	ldr	r1, [r7, #32]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fcd2 	bl	800a138 <I2C_WaitOnTXEFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d107      	bne.n	80097b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e06b      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d11b      	bne.n	800982c <HAL_I2C_Master_Transmit+0x188>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009816:	b29b      	uxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009824:	3b01      	subs	r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	6a39      	ldr	r1, [r7, #32]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fcc2 	bl	800a1ba <I2C_WaitOnBTFFlagUntilTimeout>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00d      	beq.n	8009858 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	2b04      	cmp	r3, #4
 8009842:	d107      	bne.n	8009854 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009852:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e01a      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d194      	bne.n	800978a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	e000      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800988c:	2302      	movs	r3, #2
  }
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	00100002 	.word	0x00100002
 800989c:	ffff0000 	.word	0xffff0000

080098a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08c      	sub	sp, #48	; 0x30
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	461a      	mov	r2, r3
 80098ac:	460b      	mov	r3, r1
 80098ae:	817b      	strh	r3, [r7, #10]
 80098b0:	4613      	mov	r3, r2
 80098b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098b4:	f7fe fb02 	bl	8007ebc <HAL_GetTick>
 80098b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	f040 820b 	bne.w	8009cde <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	2319      	movs	r3, #25
 80098ce:	2201      	movs	r2, #1
 80098d0:	497c      	ldr	r1, [pc, #496]	; (8009ac4 <HAL_I2C_Master_Receive+0x224>)
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 fb5a 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
 80098e0:	e1fe      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_I2C_Master_Receive+0x50>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e1f7      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b01      	cmp	r3, #1
 8009904:	d007      	beq.n	8009916 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f042 0201 	orr.w	r2, r2, #1
 8009914:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009924:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2222      	movs	r2, #34	; 0x22
 800992a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2210      	movs	r2, #16
 8009932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	893a      	ldrh	r2, [r7, #8]
 8009946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4a5c      	ldr	r2, [pc, #368]	; (8009ac8 <HAL_I2C_Master_Receive+0x228>)
 8009956:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009958:	8979      	ldrh	r1, [r7, #10]
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fa46 	bl	8009df0 <I2C_MasterRequestRead>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e1b8      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009972:	2b00      	cmp	r3, #0
 8009974:	d113      	bne.n	800999e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009976:	2300      	movs	r3, #0
 8009978:	623b      	str	r3, [r7, #32]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	623b      	str	r3, [r7, #32]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	623b      	str	r3, [r7, #32]
 800998a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	e18c      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d11b      	bne.n	80099de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099b6:	2300      	movs	r3, #0
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e16c      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d11b      	bne.n	8009a1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a06:	2300      	movs	r3, #0
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	e14c      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009a44:	e138      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	f200 80f1 	bhi.w	8009c32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d123      	bne.n	8009aa0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fbed 	bl	800a23c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e139      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a9e:	e10b      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d14e      	bne.n	8009b46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4906      	ldr	r1, [pc, #24]	; (8009acc <HAL_I2C_Master_Receive+0x22c>)
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 fa6a 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d008      	beq.n	8009ad0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e10e      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
 8009ac2:	bf00      	nop
 8009ac4:	00100002 	.word	0x00100002
 8009ac8:	ffff0000 	.word	0xffff0000
 8009acc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b44:	e0b8      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4966      	ldr	r1, [pc, #408]	; (8009ce8 <HAL_I2C_Master_Receive+0x448>)
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 fa1b 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0bf      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	2200      	movs	r2, #0
 8009baa:	494f      	ldr	r1, [pc, #316]	; (8009ce8 <HAL_I2C_Master_Receive+0x448>)
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f9ed 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e091      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691a      	ldr	r2, [r3, #16]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	b2d2      	uxtb	r2, r2
 8009c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c30:	e042      	b.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fb00 	bl	800a23c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e04c      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	3b01      	subs	r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d118      	bne.n	8009cb8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	b2d2      	uxtb	r2, r2
 8009c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f aec2 	bne.w	8009a46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e000      	b.n	8009ce0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009cde:	2302      	movs	r3, #2
  }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3728      	adds	r7, #40	; 0x28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	00010004 	.word	0x00010004

08009cec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d006      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <I2C_MasterRequestWrite+0x2a>
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d14:	d108      	bne.n	8009d28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e00b      	b.n	8009d40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	2b12      	cmp	r3, #18
 8009d2e:	d107      	bne.n	8009d40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f91d 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00d      	beq.n	8009d74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d103      	bne.n	8009d70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e035      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d7c:	d108      	bne.n	8009d90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d7e:	897b      	ldrh	r3, [r7, #10]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d8c:	611a      	str	r2, [r3, #16]
 8009d8e:	e01b      	b.n	8009dc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d90:	897b      	ldrh	r3, [r7, #10]
 8009d92:	11db      	asrs	r3, r3, #7
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f063 030f 	orn	r3, r3, #15
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	490e      	ldr	r1, [pc, #56]	; (8009de8 <I2C_MasterRequestWrite+0xfc>)
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f943 	bl	800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e010      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4907      	ldr	r1, [pc, #28]	; (8009dec <I2C_MasterRequestWrite+0x100>)
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f933 	bl	800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	00010008 	.word	0x00010008
 8009dec:	00010002 	.word	0x00010002

08009df0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d006      	beq.n	8009e2a <I2C_MasterRequestRead+0x3a>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d003      	beq.n	8009e2a <I2C_MasterRequestRead+0x3a>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e28:	d108      	bne.n	8009e3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e00b      	b.n	8009e54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	2b11      	cmp	r3, #17
 8009e42:	d107      	bne.n	8009e54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f893 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00d      	beq.n	8009e88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e7a:	d103      	bne.n	8009e84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e079      	b.n	8009f7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e90:	d108      	bne.n	8009ea4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	611a      	str	r2, [r3, #16]
 8009ea2:	e05f      	b.n	8009f64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ea4:	897b      	ldrh	r3, [r7, #10]
 8009ea6:	11db      	asrs	r3, r3, #7
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f003 0306 	and.w	r3, r3, #6
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f063 030f 	orn	r3, r3, #15
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4930      	ldr	r1, [pc, #192]	; (8009f84 <I2C_MasterRequestRead+0x194>)
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f8b9 	bl	800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e054      	b.n	8009f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009ed2:	897b      	ldrh	r3, [r7, #10]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	4929      	ldr	r1, [pc, #164]	; (8009f88 <I2C_MasterRequestRead+0x198>)
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 f8a9 	bl	800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e044      	b.n	8009f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f831 	bl	8009f8c <I2C_WaitOnFlagUntilTimeout>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00d      	beq.n	8009f4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3e:	d103      	bne.n	8009f48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e017      	b.n	8009f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009f4c:	897b      	ldrh	r3, [r7, #10]
 8009f4e:	11db      	asrs	r3, r3, #7
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0306 	and.w	r3, r3, #6
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f063 030e 	orn	r3, r3, #14
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <I2C_MasterRequestRead+0x198>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f865 	bl	800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	00010008 	.word	0x00010008
 8009f88:	00010002 	.word	0x00010002

08009f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f9c:	e025      	b.n	8009fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d021      	beq.n	8009fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa6:	f7fd ff89 	bl	8007ebc <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d302      	bcc.n	8009fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d116      	bne.n	8009fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	f043 0220 	orr.w	r2, r3, #32
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e023      	b.n	800a032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	0c1b      	lsrs	r3, r3, #16
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d10d      	bne.n	800a010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	43da      	mvns	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	4013      	ands	r3, r2
 800a000:	b29b      	uxth	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	bf0c      	ite	eq
 800a006:	2301      	moveq	r3, #1
 800a008:	2300      	movne	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	e00c      	b.n	800a02a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	43da      	mvns	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4013      	ands	r3, r2
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bf0c      	ite	eq
 800a022:	2301      	moveq	r3, #1
 800a024:	2300      	movne	r3, #0
 800a026:	b2db      	uxtb	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d0b6      	beq.n	8009f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a048:	e051      	b.n	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a058:	d123      	bne.n	800a0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	f043 0204 	orr.w	r2, r3, #4
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e046      	b.n	800a130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d021      	beq.n	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0aa:	f7fd ff07 	bl	8007ebc <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d302      	bcc.n	800a0c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d116      	bne.n	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	f043 0220 	orr.w	r2, r3, #32
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e020      	b.n	800a130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	0c1b      	lsrs	r3, r3, #16
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10c      	bne.n	800a112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	43da      	mvns	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4013      	ands	r3, r2
 800a104:	b29b      	uxth	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	bf14      	ite	ne
 800a10a:	2301      	movne	r3, #1
 800a10c:	2300      	moveq	r3, #0
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	e00b      	b.n	800a12a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	43da      	mvns	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4013      	ands	r3, r2
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d18d      	bne.n	800a04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a144:	e02d      	b.n	800a1a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 f8ce 	bl	800a2e8 <I2C_IsAcknowledgeFailed>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e02d      	b.n	800a1b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d021      	beq.n	800a1a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15e:	f7fd fead 	bl	8007ebc <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d302      	bcc.n	800a174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d116      	bne.n	800a1a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f043 0220 	orr.w	r2, r3, #32
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e007      	b.n	800a1b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ac:	2b80      	cmp	r3, #128	; 0x80
 800a1ae:	d1ca      	bne.n	800a146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a1c6:	e02d      	b.n	800a224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f88d 	bl	800a2e8 <I2C_IsAcknowledgeFailed>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e02d      	b.n	800a234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d021      	beq.n	800a224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e0:	f7fd fe6c 	bl	8007ebc <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d302      	bcc.n	800a1f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d116      	bne.n	800a224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e007      	b.n	800a234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d1ca      	bne.n	800a1c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a248:	e042      	b.n	800a2d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	2b10      	cmp	r3, #16
 800a256:	d119      	bne.n	800a28c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f06f 0210 	mvn.w	r2, #16
 800a260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e029      	b.n	800a2e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a28c:	f7fd fe16 	bl	8007ebc <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d116      	bne.n	800a2d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	f043 0220 	orr.w	r2, r3, #32
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e007      	b.n	800a2e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d1b5      	bne.n	800a24a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2fe:	d11b      	bne.n	800a338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a324:	f043 0204 	orr.w	r2, r3, #4
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a352:	2300      	movs	r3, #0
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4b20      	ldr	r3, [pc, #128]	; (800a3d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	4a1f      	ldr	r2, [pc, #124]	; (800a3d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800a35c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a360:	6413      	str	r3, [r2, #64]	; 0x40
 800a362:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a36e:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <HAL_PWREx_EnableOverDrive+0x94>)
 800a370:	2201      	movs	r2, #1
 800a372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a374:	f7fd fda2 	bl	8007ebc <HAL_GetTick>
 800a378:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a37a:	e009      	b.n	800a390 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a37c:	f7fd fd9e 	bl	8007ebc <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a38a:	d901      	bls.n	800a390 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e01f      	b.n	800a3d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a390:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a39c:	d1ee      	bne.n	800a37c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a39e:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3a4:	f7fd fd8a 	bl	8007ebc <HAL_GetTick>
 800a3a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a3aa:	e009      	b.n	800a3c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a3ac:	f7fd fd86 	bl	8007ebc <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3ba:	d901      	bls.n	800a3c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e007      	b.n	800a3d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a3c0:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3cc:	d1ee      	bne.n	800a3ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	40023800 	.word	0x40023800
 800a3dc:	420e0040 	.word	0x420e0040
 800a3e0:	40007000 	.word	0x40007000
 800a3e4:	420e0044 	.word	0x420e0044

0800a3e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e0cc      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3fc:	4b68      	ldr	r3, [pc, #416]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d90c      	bls.n	800a424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a40a:	4b65      	ldr	r3, [pc, #404]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a412:	4b63      	ldr	r3, [pc, #396]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 030f 	and.w	r3, r3, #15
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d001      	beq.n	800a424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e0b8      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d020      	beq.n	800a472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a43c:	4b59      	ldr	r3, [pc, #356]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	4a58      	ldr	r2, [pc, #352]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0308 	and.w	r3, r3, #8
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a454:	4b53      	ldr	r3, [pc, #332]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	4a52      	ldr	r2, [pc, #328]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a45a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a45e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a460:	4b50      	ldr	r3, [pc, #320]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	494d      	ldr	r1, [pc, #308]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d044      	beq.n	800a508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d107      	bne.n	800a496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a486:	4b47      	ldr	r3, [pc, #284]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d119      	bne.n	800a4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e07f      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d003      	beq.n	800a4a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d107      	bne.n	800a4b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4a6:	4b3f      	ldr	r3, [pc, #252]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e06f      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4b6:	4b3b      	ldr	r3, [pc, #236]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e067      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4c6:	4b37      	ldr	r3, [pc, #220]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f023 0203 	bic.w	r2, r3, #3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	4934      	ldr	r1, [pc, #208]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4d8:	f7fd fcf0 	bl	8007ebc <HAL_GetTick>
 800a4dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4de:	e00a      	b.n	800a4f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4e0:	f7fd fcec 	bl	8007ebc <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e04f      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4f6:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f003 020c 	and.w	r2, r3, #12
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	429a      	cmp	r2, r3
 800a506:	d1eb      	bne.n	800a4e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a508:	4b25      	ldr	r3, [pc, #148]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 030f 	and.w	r3, r3, #15
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d20c      	bcs.n	800a530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a516:	4b22      	ldr	r3, [pc, #136]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	b2d2      	uxtb	r2, r2
 800a51c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a51e:	4b20      	ldr	r3, [pc, #128]	; (800a5a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d001      	beq.n	800a530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e032      	b.n	800a596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d008      	beq.n	800a54e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a53c:	4b19      	ldr	r3, [pc, #100]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	4916      	ldr	r1, [pc, #88]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a55a:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	490e      	ldr	r1, [pc, #56]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a56e:	f000 f821 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800a572:	4601      	mov	r1, r0
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	091b      	lsrs	r3, r3, #4
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <HAL_RCC_ClockConfig+0x1c0>)
 800a580:	5cd3      	ldrb	r3, [r2, r3]
 800a582:	fa21 f303 	lsr.w	r3, r1, r3
 800a586:	4a09      	ldr	r2, [pc, #36]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fd fc50 	bl	8007e34 <HAL_InitTick>

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	40023c00 	.word	0x40023c00
 800a5a4:	40023800 	.word	0x40023800
 800a5a8:	080182d8 	.word	0x080182d8
 800a5ac:	20000000 	.word	0x20000000
 800a5b0:	20000004 	.word	0x20000004

0800a5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	607b      	str	r3, [r7, #4]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5ca:	4b63      	ldr	r3, [pc, #396]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f003 030c 	and.w	r3, r3, #12
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d007      	beq.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x32>
 800a5d6:	2b08      	cmp	r3, #8
 800a5d8:	d008      	beq.n	800a5ec <HAL_RCC_GetSysClockFreq+0x38>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 80b4 	bne.w	800a748 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5e0:	4b5e      	ldr	r3, [pc, #376]	; (800a75c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a5e2:	60bb      	str	r3, [r7, #8]
       break;
 800a5e4:	e0b3      	b.n	800a74e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5e6:	4b5d      	ldr	r3, [pc, #372]	; (800a75c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a5e8:	60bb      	str	r3, [r7, #8]
      break;
 800a5ea:	e0b0      	b.n	800a74e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5ec:	4b5a      	ldr	r3, [pc, #360]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5f6:	4b58      	ldr	r3, [pc, #352]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d04a      	beq.n	800a698 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a602:	4b55      	ldr	r3, [pc, #340]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	099b      	lsrs	r3, r3, #6
 800a608:	f04f 0400 	mov.w	r4, #0
 800a60c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	ea03 0501 	and.w	r5, r3, r1
 800a618:	ea04 0602 	and.w	r6, r4, r2
 800a61c:	4629      	mov	r1, r5
 800a61e:	4632      	mov	r2, r6
 800a620:	f04f 0300 	mov.w	r3, #0
 800a624:	f04f 0400 	mov.w	r4, #0
 800a628:	0154      	lsls	r4, r2, #5
 800a62a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a62e:	014b      	lsls	r3, r1, #5
 800a630:	4619      	mov	r1, r3
 800a632:	4622      	mov	r2, r4
 800a634:	1b49      	subs	r1, r1, r5
 800a636:	eb62 0206 	sbc.w	r2, r2, r6
 800a63a:	f04f 0300 	mov.w	r3, #0
 800a63e:	f04f 0400 	mov.w	r4, #0
 800a642:	0194      	lsls	r4, r2, #6
 800a644:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a648:	018b      	lsls	r3, r1, #6
 800a64a:	1a5b      	subs	r3, r3, r1
 800a64c:	eb64 0402 	sbc.w	r4, r4, r2
 800a650:	f04f 0100 	mov.w	r1, #0
 800a654:	f04f 0200 	mov.w	r2, #0
 800a658:	00e2      	lsls	r2, r4, #3
 800a65a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a65e:	00d9      	lsls	r1, r3, #3
 800a660:	460b      	mov	r3, r1
 800a662:	4614      	mov	r4, r2
 800a664:	195b      	adds	r3, r3, r5
 800a666:	eb44 0406 	adc.w	r4, r4, r6
 800a66a:	f04f 0100 	mov.w	r1, #0
 800a66e:	f04f 0200 	mov.w	r2, #0
 800a672:	02a2      	lsls	r2, r4, #10
 800a674:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a678:	0299      	lsls	r1, r3, #10
 800a67a:	460b      	mov	r3, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	4621      	mov	r1, r4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f04f 0400 	mov.w	r4, #0
 800a688:	461a      	mov	r2, r3
 800a68a:	4623      	mov	r3, r4
 800a68c:	f7f6 fb14 	bl	8000cb8 <__aeabi_uldivmod>
 800a690:	4603      	mov	r3, r0
 800a692:	460c      	mov	r4, r1
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	e049      	b.n	800a72c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a698:	4b2f      	ldr	r3, [pc, #188]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	099b      	lsrs	r3, r3, #6
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a6a6:	f04f 0200 	mov.w	r2, #0
 800a6aa:	ea03 0501 	and.w	r5, r3, r1
 800a6ae:	ea04 0602 	and.w	r6, r4, r2
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	f04f 0400 	mov.w	r4, #0
 800a6be:	0154      	lsls	r4, r2, #5
 800a6c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a6c4:	014b      	lsls	r3, r1, #5
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	1b49      	subs	r1, r1, r5
 800a6cc:	eb62 0206 	sbc.w	r2, r2, r6
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	f04f 0400 	mov.w	r4, #0
 800a6d8:	0194      	lsls	r4, r2, #6
 800a6da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a6de:	018b      	lsls	r3, r1, #6
 800a6e0:	1a5b      	subs	r3, r3, r1
 800a6e2:	eb64 0402 	sbc.w	r4, r4, r2
 800a6e6:	f04f 0100 	mov.w	r1, #0
 800a6ea:	f04f 0200 	mov.w	r2, #0
 800a6ee:	00e2      	lsls	r2, r4, #3
 800a6f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a6f4:	00d9      	lsls	r1, r3, #3
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	195b      	adds	r3, r3, r5
 800a6fc:	eb44 0406 	adc.w	r4, r4, r6
 800a700:	f04f 0100 	mov.w	r1, #0
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	02a2      	lsls	r2, r4, #10
 800a70a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a70e:	0299      	lsls	r1, r3, #10
 800a710:	460b      	mov	r3, r1
 800a712:	4614      	mov	r4, r2
 800a714:	4618      	mov	r0, r3
 800a716:	4621      	mov	r1, r4
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f04f 0400 	mov.w	r4, #0
 800a71e:	461a      	mov	r2, r3
 800a720:	4623      	mov	r3, r4
 800a722:	f7f6 fac9 	bl	8000cb8 <__aeabi_uldivmod>
 800a726:	4603      	mov	r3, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a72c:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	3301      	adds	r3, #1
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	fbb2 f3f3 	udiv	r3, r2, r3
 800a744:	60bb      	str	r3, [r7, #8]
      break;
 800a746:	e002      	b.n	800a74e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a74a:	60bb      	str	r3, [r7, #8]
      break;
 800a74c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a74e:	68bb      	ldr	r3, [r7, #8]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a758:	40023800 	.word	0x40023800
 800a75c:	00f42400 	.word	0x00f42400

0800a760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <HAL_RCC_GetHCLKFreq+0x14>)
 800a766:	681b      	ldr	r3, [r3, #0]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000000 	.word	0x20000000

0800a778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a77c:	f7ff fff0 	bl	800a760 <HAL_RCC_GetHCLKFreq>
 800a780:	4601      	mov	r1, r0
 800a782:	4b05      	ldr	r3, [pc, #20]	; (800a798 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	0a9b      	lsrs	r3, r3, #10
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	4a03      	ldr	r2, [pc, #12]	; (800a79c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a78e:	5cd3      	ldrb	r3, [r2, r3]
 800a790:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a794:	4618      	mov	r0, r3
 800a796:	bd80      	pop	{r7, pc}
 800a798:	40023800 	.word	0x40023800
 800a79c:	080182e8 	.word	0x080182e8

0800a7a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7a4:	f7ff ffdc 	bl	800a760 <HAL_RCC_GetHCLKFreq>
 800a7a8:	4601      	mov	r1, r0
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	0b5b      	lsrs	r3, r3, #13
 800a7b0:	f003 0307 	and.w	r3, r3, #7
 800a7b4:	4a03      	ldr	r2, [pc, #12]	; (800a7c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7b6:	5cd3      	ldrb	r3, [r2, r3]
 800a7b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	080182e8 	.word	0x080182e8

0800a7c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a7f0:	4b66      	ldr	r3, [pc, #408]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7f6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fe:	4963      	ldr	r1, [pc, #396]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a800:	4313      	orrs	r3, r2
 800a802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a812:	4b5e      	ldr	r3, [pc, #376]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a818:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	495a      	ldr	r1, [pc, #360]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a822:	4313      	orrs	r3, r2
 800a824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d105      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d075      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a84c:	4b50      	ldr	r3, [pc, #320]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a852:	f7fd fb33 	bl	8007ebc <HAL_GetTick>
 800a856:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a858:	e008      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a85a:	f7fd fb2f 	bl	8007ebc <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d901      	bls.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e1dc      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a86c:	4b47      	ldr	r3, [pc, #284]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f0      	bne.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	019a      	lsls	r2, r3, #6
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	071b      	lsls	r3, r3, #28
 800a890:	493e      	ldr	r1, [pc, #248]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a892:	4313      	orrs	r3, r2
 800a894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01f      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a8a4:	4b39      	ldr	r3, [pc, #228]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8aa:	0f1b      	lsrs	r3, r3, #28
 800a8ac:	f003 0307 	and.w	r3, r3, #7
 800a8b0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	019a      	lsls	r2, r3, #6
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	061b      	lsls	r3, r3, #24
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	071b      	lsls	r3, r3, #28
 800a8c4:	4931      	ldr	r1, [pc, #196]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a8cc:	4b2f      	ldr	r3, [pc, #188]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8d2:	f023 021f 	bic.w	r2, r3, #31
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	492b      	ldr	r1, [pc, #172]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	019a      	lsls	r2, r3, #6
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	061b      	lsls	r3, r3, #24
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	071b      	lsls	r3, r3, #28
 800a904:	4921      	ldr	r1, [pc, #132]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a906:	4313      	orrs	r3, r2
 800a908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a90c:	4b20      	ldr	r3, [pc, #128]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a912:	f7fd fad3 	bl	8007ebc <HAL_GetTick>
 800a916:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a918:	e008      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a91a:	f7fd facf 	bl	8007ebc <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e17c      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a92c:	4b17      	ldr	r3, [pc, #92]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f0      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d112      	bne.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10c      	bne.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80ce 	beq.w	800aafa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a966:	f040 80c8 	bne.w	800aafa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a970:	f7fd faa4 	bl	8007ebc <HAL_GetTick>
 800a974:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a976:	e00f      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a978:	f7fd faa0 	bl	8007ebc <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d908      	bls.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e14d      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a98a:	bf00      	nop
 800a98c:	40023800 	.word	0x40023800
 800a990:	42470068 	.word	0x42470068
 800a994:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a998:	4ba5      	ldr	r3, [pc, #660]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9a4:	d0e8      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d02e      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a9b2:	4b9f      	ldr	r3, [pc, #636]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	3301      	adds	r3, #1
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a9c4:	4b9a      	ldr	r3, [pc, #616]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ca:	0f1b      	lsrs	r3, r3, #28
 800a9cc:	f003 0307 	and.w	r3, r3, #7
 800a9d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	019a      	lsls	r2, r3, #6
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	431a      	orrs	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	061b      	lsls	r3, r3, #24
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	071b      	lsls	r3, r3, #28
 800a9ee:	4990      	ldr	r1, [pc, #576]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a9f6:	4b8e      	ldr	r3, [pc, #568]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	3b01      	subs	r3, #1
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	4989      	ldr	r1, [pc, #548]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0308 	and.w	r3, r3, #8
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d02c      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800aa1c:	4b84      	ldr	r3, [pc, #528]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	3301      	adds	r3, #1
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aa2e:	4b80      	ldr	r3, [pc, #512]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	0e1b      	lsrs	r3, r3, #24
 800aa36:	f003 030f 	and.w	r3, r3, #15
 800aa3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	019a      	lsls	r2, r3, #6
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	085b      	lsrs	r3, r3, #1
 800aa46:	3b01      	subs	r3, #1
 800aa48:	041b      	lsls	r3, r3, #16
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	061b      	lsls	r3, r3, #24
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	071b      	lsls	r3, r3, #28
 800aa58:	4975      	ldr	r1, [pc, #468]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aa60:	4b73      	ldr	r3, [pc, #460]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	4970      	ldr	r1, [pc, #448]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d024      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800aa86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa8a:	d11f      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aa8c:	4b68      	ldr	r3, [pc, #416]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa92:	0e1b      	lsrs	r3, r3, #24
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aa9a:	4b65      	ldr	r3, [pc, #404]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa0:	0f1b      	lsrs	r3, r3, #28
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	019a      	lsls	r2, r3, #6
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	3b01      	subs	r3, #1
 800aab6:	041b      	lsls	r3, r3, #16
 800aab8:	431a      	orrs	r2, r3
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	061b      	lsls	r3, r3, #24
 800aabe:	431a      	orrs	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	071b      	lsls	r3, r3, #28
 800aac4:	495a      	ldr	r1, [pc, #360]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aacc:	4b59      	ldr	r3, [pc, #356]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800aace:	2201      	movs	r2, #1
 800aad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aad2:	f7fd f9f3 	bl	8007ebc <HAL_GetTick>
 800aad6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aad8:	e008      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aada:	f7fd f9ef 	bl	8007ebc <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d901      	bls.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e09c      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aaec:	4b50      	ldr	r3, [pc, #320]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf8:	d1ef      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 8083 	beq.w	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60bb      	str	r3, [r7, #8]
 800ab0c:	4b48      	ldr	r3, [pc, #288]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab10:	4a47      	ldr	r2, [pc, #284]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab16:	6413      	str	r3, [r2, #64]	; 0x40
 800ab18:	4b45      	ldr	r3, [pc, #276]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab20:	60bb      	str	r3, [r7, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ab24:	4b44      	ldr	r3, [pc, #272]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a43      	ldr	r2, [pc, #268]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ab2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab30:	f7fd f9c4 	bl	8007ebc <HAL_GetTick>
 800ab34:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab36:	e008      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ab38:	f7fd f9c0 	bl	8007ebc <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d901      	bls.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e06d      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab4a:	4b3b      	ldr	r3, [pc, #236]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab56:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab5e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d02f      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d028      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab7c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab7e:	4b2f      	ldr	r3, [pc, #188]	; (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab84:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ab8a:	4a29      	ldr	r2, [pc, #164]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab90:	4b27      	ldr	r3, [pc, #156]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d114      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ab9c:	f7fd f98e 	bl	8007ebc <HAL_GetTick>
 800aba0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba2:	e00a      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aba4:	f7fd f98a 	bl	8007ebc <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d901      	bls.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e035      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abba:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0ee      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd2:	d10d      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800abd4:	4b16      	ldr	r3, [pc, #88]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800abe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abe8:	4911      	ldr	r1, [pc, #68]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abea:	4313      	orrs	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
 800abee:	e005      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x434>
 800abf0:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	4a0e      	ldr	r2, [pc, #56]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800abfa:	6093      	str	r3, [r2, #8]
 800abfc:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac08:	4909      	ldr	r1, [pc, #36]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0310 	and.w	r3, r3, #16
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ac20:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ac22:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3720      	adds	r7, #32
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	40023800 	.word	0x40023800
 800ac34:	42470070 	.word	0x42470070
 800ac38:	40007000 	.word	0x40007000
 800ac3c:	42470e40 	.word	0x42470e40
 800ac40:	424711e0 	.word	0x424711e0

0800ac44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d075      	beq.n	800ad48 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ac5c:	4ba2      	ldr	r3, [pc, #648]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f003 030c 	and.w	r3, r3, #12
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d00c      	beq.n	800ac82 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac68:	4b9f      	ldr	r3, [pc, #636]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	d112      	bne.n	800ac9a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac74:	4b9c      	ldr	r3, [pc, #624]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac80:	d10b      	bne.n	800ac9a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac82:	4b99      	ldr	r3, [pc, #612]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d05b      	beq.n	800ad46 <HAL_RCC_OscConfig+0x102>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d157      	bne.n	800ad46 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e20b      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca2:	d106      	bne.n	800acb2 <HAL_RCC_OscConfig+0x6e>
 800aca4:	4b90      	ldr	r3, [pc, #576]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a8f      	ldr	r2, [pc, #572]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	e01d      	b.n	800acee <HAL_RCC_OscConfig+0xaa>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acba:	d10c      	bne.n	800acd6 <HAL_RCC_OscConfig+0x92>
 800acbc:	4b8a      	ldr	r3, [pc, #552]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a89      	ldr	r2, [pc, #548]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	4b87      	ldr	r3, [pc, #540]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a86      	ldr	r2, [pc, #536]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	e00b      	b.n	800acee <HAL_RCC_OscConfig+0xaa>
 800acd6:	4b84      	ldr	r3, [pc, #528]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a83      	ldr	r2, [pc, #524]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800acdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	4b81      	ldr	r3, [pc, #516]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a80      	ldr	r2, [pc, #512]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ace8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d013      	beq.n	800ad1e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf6:	f7fd f8e1 	bl	8007ebc <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acfc:	e008      	b.n	800ad10 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800acfe:	f7fd f8dd 	bl	8007ebc <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b64      	cmp	r3, #100	; 0x64
 800ad0a:	d901      	bls.n	800ad10 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e1d0      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad10:	4b75      	ldr	r3, [pc, #468]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <HAL_RCC_OscConfig+0xba>
 800ad1c:	e014      	b.n	800ad48 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1e:	f7fd f8cd 	bl	8007ebc <HAL_GetTick>
 800ad22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad24:	e008      	b.n	800ad38 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad26:	f7fd f8c9 	bl	8007ebc <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	2b64      	cmp	r3, #100	; 0x64
 800ad32:	d901      	bls.n	800ad38 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e1bc      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad38:	4b6b      	ldr	r3, [pc, #428]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f0      	bne.n	800ad26 <HAL_RCC_OscConfig+0xe2>
 800ad44:	e000      	b.n	800ad48 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d063      	beq.n	800ae1c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ad54:	4b64      	ldr	r3, [pc, #400]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f003 030c 	and.w	r3, r3, #12
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad60:	4b61      	ldr	r3, [pc, #388]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d11c      	bne.n	800ada6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad6c:	4b5e      	ldr	r3, [pc, #376]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d116      	bne.n	800ada6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad78:	4b5b      	ldr	r3, [pc, #364]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d005      	beq.n	800ad90 <HAL_RCC_OscConfig+0x14c>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d001      	beq.n	800ad90 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e190      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad90:	4b55      	ldr	r3, [pc, #340]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	4952      	ldr	r1, [pc, #328]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ada4:	e03a      	b.n	800ae1c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d020      	beq.n	800adf0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adae:	4b4f      	ldr	r3, [pc, #316]	; (800aeec <HAL_RCC_OscConfig+0x2a8>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb4:	f7fd f882 	bl	8007ebc <HAL_GetTick>
 800adb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adba:	e008      	b.n	800adce <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adbc:	f7fd f87e 	bl	8007ebc <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e171      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adce:	4b46      	ldr	r3, [pc, #280]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f0      	beq.n	800adbc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adda:	4b43      	ldr	r3, [pc, #268]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	493f      	ldr	r1, [pc, #252]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800adea:	4313      	orrs	r3, r2
 800adec:	600b      	str	r3, [r1, #0]
 800adee:	e015      	b.n	800ae1c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adf0:	4b3e      	ldr	r3, [pc, #248]	; (800aeec <HAL_RCC_OscConfig+0x2a8>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adf6:	f7fd f861 	bl	8007ebc <HAL_GetTick>
 800adfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adfc:	e008      	b.n	800ae10 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adfe:	f7fd f85d 	bl	8007ebc <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d901      	bls.n	800ae10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e150      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae10:	4b35      	ldr	r3, [pc, #212]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0302 	and.w	r3, r3, #2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1f0      	bne.n	800adfe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d030      	beq.n	800ae8a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d016      	beq.n	800ae5e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae30:	4b2f      	ldr	r3, [pc, #188]	; (800aef0 <HAL_RCC_OscConfig+0x2ac>)
 800ae32:	2201      	movs	r2, #1
 800ae34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae36:	f7fd f841 	bl	8007ebc <HAL_GetTick>
 800ae3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae3e:	f7fd f83d 	bl	8007ebc <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e130      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae50:	4b25      	ldr	r3, [pc, #148]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ae52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae54:	f003 0302 	and.w	r3, r3, #2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0f0      	beq.n	800ae3e <HAL_RCC_OscConfig+0x1fa>
 800ae5c:	e015      	b.n	800ae8a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae5e:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <HAL_RCC_OscConfig+0x2ac>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae64:	f7fd f82a 	bl	8007ebc <HAL_GetTick>
 800ae68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae6c:	f7fd f826 	bl	8007ebc <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e119      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae7e:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ae80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1f0      	bne.n	800ae6c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 809f 	beq.w	800afd6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae9c:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10f      	bne.n	800aec8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	4a0d      	ldr	r2, [pc, #52]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800aeb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb6:	6413      	str	r3, [r2, #64]	; 0x40
 800aeb8:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <HAL_RCC_OscConfig+0x2a4>)
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aec4:	2301      	movs	r3, #1
 800aec6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <HAL_RCC_OscConfig+0x2b0>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d120      	bne.n	800af16 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aed4:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <HAL_RCC_OscConfig+0x2b0>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a06      	ldr	r2, [pc, #24]	; (800aef4 <HAL_RCC_OscConfig+0x2b0>)
 800aeda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aede:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aee0:	f7fc ffec 	bl	8007ebc <HAL_GetTick>
 800aee4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aee6:	e010      	b.n	800af0a <HAL_RCC_OscConfig+0x2c6>
 800aee8:	40023800 	.word	0x40023800
 800aeec:	42470000 	.word	0x42470000
 800aef0:	42470e80 	.word	0x42470e80
 800aef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aef8:	f7fc ffe0 	bl	8007ebc <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	2b02      	cmp	r3, #2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e0d3      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af0a:	4b6c      	ldr	r3, [pc, #432]	; (800b0bc <HAL_RCC_OscConfig+0x478>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0f0      	beq.n	800aef8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d106      	bne.n	800af2c <HAL_RCC_OscConfig+0x2e8>
 800af1e:	4b68      	ldr	r3, [pc, #416]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	4a67      	ldr	r2, [pc, #412]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af24:	f043 0301 	orr.w	r3, r3, #1
 800af28:	6713      	str	r3, [r2, #112]	; 0x70
 800af2a:	e01c      	b.n	800af66 <HAL_RCC_OscConfig+0x322>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	2b05      	cmp	r3, #5
 800af32:	d10c      	bne.n	800af4e <HAL_RCC_OscConfig+0x30a>
 800af34:	4b62      	ldr	r3, [pc, #392]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af38:	4a61      	ldr	r2, [pc, #388]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af3a:	f043 0304 	orr.w	r3, r3, #4
 800af3e:	6713      	str	r3, [r2, #112]	; 0x70
 800af40:	4b5f      	ldr	r3, [pc, #380]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af44:	4a5e      	ldr	r2, [pc, #376]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	6713      	str	r3, [r2, #112]	; 0x70
 800af4c:	e00b      	b.n	800af66 <HAL_RCC_OscConfig+0x322>
 800af4e:	4b5c      	ldr	r3, [pc, #368]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af52:	4a5b      	ldr	r2, [pc, #364]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af54:	f023 0301 	bic.w	r3, r3, #1
 800af58:	6713      	str	r3, [r2, #112]	; 0x70
 800af5a:	4b59      	ldr	r3, [pc, #356]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5e:	4a58      	ldr	r2, [pc, #352]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af60:	f023 0304 	bic.w	r3, r3, #4
 800af64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d015      	beq.n	800af9a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af6e:	f7fc ffa5 	bl	8007ebc <HAL_GetTick>
 800af72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af74:	e00a      	b.n	800af8c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af76:	f7fc ffa1 	bl	8007ebc <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	f241 3288 	movw	r2, #5000	; 0x1388
 800af84:	4293      	cmp	r3, r2
 800af86:	d901      	bls.n	800af8c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e092      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af8c:	4b4c      	ldr	r3, [pc, #304]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800af8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af90:	f003 0302 	and.w	r3, r3, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0ee      	beq.n	800af76 <HAL_RCC_OscConfig+0x332>
 800af98:	e014      	b.n	800afc4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9a:	f7fc ff8f 	bl	8007ebc <HAL_GetTick>
 800af9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afa0:	e00a      	b.n	800afb8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afa2:	f7fc ff8b 	bl	8007ebc <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d901      	bls.n	800afb8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e07c      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afb8:	4b41      	ldr	r3, [pc, #260]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800afba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1ee      	bne.n	800afa2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d105      	bne.n	800afd6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afca:	4b3d      	ldr	r3, [pc, #244]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	4a3c      	ldr	r2, [pc, #240]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800afd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d068      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800afde:	4b38      	ldr	r3, [pc, #224]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f003 030c 	and.w	r3, r3, #12
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d060      	beq.n	800b0ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d145      	bne.n	800b07e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aff2:	4b34      	ldr	r3, [pc, #208]	; (800b0c4 <HAL_RCC_OscConfig+0x480>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff8:	f7fc ff60 	bl	8007ebc <HAL_GetTick>
 800affc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800affe:	e008      	b.n	800b012 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b000:	f7fc ff5c 	bl	8007ebc <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d901      	bls.n	800b012 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e04f      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b012:	4b2b      	ldr	r3, [pc, #172]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1f0      	bne.n	800b000 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69da      	ldr	r2, [r3, #28]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	431a      	orrs	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	019b      	lsls	r3, r3, #6
 800b02e:	431a      	orrs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b034:	085b      	lsrs	r3, r3, #1
 800b036:	3b01      	subs	r3, #1
 800b038:	041b      	lsls	r3, r3, #16
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	061b      	lsls	r3, r3, #24
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	071b      	lsls	r3, r3, #28
 800b04a:	491d      	ldr	r1, [pc, #116]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b050:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <HAL_RCC_OscConfig+0x480>)
 800b052:	2201      	movs	r2, #1
 800b054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b056:	f7fc ff31 	bl	8007ebc <HAL_GetTick>
 800b05a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b05c:	e008      	b.n	800b070 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b05e:	f7fc ff2d 	bl	8007ebc <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d901      	bls.n	800b070 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e020      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0f0      	beq.n	800b05e <HAL_RCC_OscConfig+0x41a>
 800b07c:	e018      	b.n	800b0b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b07e:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <HAL_RCC_OscConfig+0x480>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b084:	f7fc ff1a 	bl	8007ebc <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b08c:	f7fc ff16 	bl	8007ebc <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e009      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b09e:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <HAL_RCC_OscConfig+0x47c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x448>
 800b0aa:	e001      	b.n	800b0b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e000      	b.n	800b0b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40007000 	.word	0x40007000
 800b0c0:	40023800 	.word	0x40023800
 800b0c4:	42470060 	.word	0x42470060

0800b0c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e022      	b.n	800b120 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d105      	bne.n	800b0f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7fa ff57 	bl	8005fa0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f814 	bl	800b128 <HAL_SD_InitCard>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e00a      	b.n	800b120 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b128:	b5b0      	push	{r4, r5, r7, lr}
 800b12a:	b08e      	sub	sp, #56	; 0x38
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b130:	2300      	movs	r3, #0
 800b132:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b138:	2300      	movs	r3, #0
 800b13a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b140:	2300      	movs	r3, #0
 800b142:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b144:	2376      	movs	r3, #118	; 0x76
 800b146:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681d      	ldr	r5, [r3, #0]
 800b14c:	466c      	mov	r4, sp
 800b14e:	f107 0314 	add.w	r3, r7, #20
 800b152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b160:	4628      	mov	r0, r5
 800b162:	f003 fa87 	bl	800e674 <SDIO_Init>
 800b166:	4603      	mov	r3, r0
 800b168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e031      	b.n	800b1dc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b178:	4b1a      	ldr	r3, [pc, #104]	; (800b1e4 <HAL_SD_InitCard+0xbc>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f003 fabf 	bl	800e706 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b188:	4b16      	ldr	r3, [pc, #88]	; (800b1e4 <HAL_SD_InitCard+0xbc>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 ffc6 	bl	800c120 <SD_PowerON>
 800b194:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00b      	beq.n	800b1b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e013      	b.n	800b1dc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fee5 	bl	800bf84 <SD_InitCard>
 800b1ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00b      	beq.n	800b1da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e000      	b.n	800b1dc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3728      	adds	r7, #40	; 0x28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b1e4:	422580a0 	.word	0x422580a0

0800b1e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	; 0x30
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d107      	bne.n	800b210 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b204:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0c7      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b01      	cmp	r3, #1
 800b21a:	f040 80c0 	bne.w	800b39e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	441a      	add	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22e:	429a      	cmp	r2, r3
 800b230:	d907      	bls.n	800b242 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e0ae      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2203      	movs	r2, #3
 800b246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2200      	movs	r2, #0
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b260:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	4a50      	ldr	r2, [pc, #320]	; (800b3a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	4a4f      	ldr	r2, [pc, #316]	; (800b3ac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800b270:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	2200      	movs	r2, #0
 800b278:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3380      	adds	r3, #128	; 0x80
 800b284:	4619      	mov	r1, r3
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	025b      	lsls	r3, r3, #9
 800b28c:	089b      	lsrs	r3, r3, #2
 800b28e:	f7fd fc07 	bl	8008aa0 <HAL_DMA_Start_IT>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d017      	beq.n	800b2c8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b2a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a40      	ldr	r2, [pc, #256]	; (800b3b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b2ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e06b      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b2c8:	4b3a      	ldr	r3, [pc, #232]	; (800b3b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d002      	beq.n	800b2dc <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	025b      	lsls	r3, r3, #9
 800b2da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f003 faa1 	bl	800e82c <SDMMC_CmdBlockLength>
 800b2ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a2e      	ldr	r2, [pc, #184]	; (800b3b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b2f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	431a      	orrs	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e046      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b312:	f04f 33ff 	mov.w	r3, #4294967295
 800b316:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	025b      	lsls	r3, r3, #9
 800b31c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b31e:	2390      	movs	r3, #144	; 0x90
 800b320:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b322:	2302      	movs	r3, #2
 800b324:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b326:	2300      	movs	r3, #0
 800b328:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f107 0210 	add.w	r2, r7, #16
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f003 fa4b 	bl	800e7d4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d90a      	bls.n	800b35a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2282      	movs	r2, #130	; 0x82
 800b348:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b350:	4618      	mov	r0, r3
 800b352:	f003 faaf 	bl	800e8b4 <SDMMC_CmdReadMultiBlock>
 800b356:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b358:	e009      	b.n	800b36e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2281      	movs	r2, #129	; 0x81
 800b35e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b366:	4618      	mov	r0, r3
 800b368:	f003 fa82 	bl	800e870 <SDMMC_CmdReadSingleBlock>
 800b36c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d012      	beq.n	800b39a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a0d      	ldr	r2, [pc, #52]	; (800b3b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	431a      	orrs	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e002      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	e000      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b39e:	2302      	movs	r3, #2
  }
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3730      	adds	r7, #48	; 0x30
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	0800bd93 	.word	0x0800bd93
 800b3ac:	0800be05 	.word	0x0800be05
 800b3b0:	004005ff 	.word	0x004005ff
 800b3b4:	4225858c 	.word	0x4225858c

0800b3b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08c      	sub	sp, #48	; 0x30
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d107      	bne.n	800b3e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e0ca      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	f040 80c3 	bne.w	800b574 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d907      	bls.n	800b412 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e0b1      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2203      	movs	r2, #3
 800b416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2200      	movs	r2, #0
 800b420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f042 021a 	orr.w	r2, r2, #26
 800b430:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b436:	4a52      	ldr	r2, [pc, #328]	; (800b580 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43e:	4a51      	ldr	r2, [pc, #324]	; (800b584 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	2200      	movs	r2, #0
 800b448:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d002      	beq.n	800b458 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	025b      	lsls	r3, r3, #9
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b460:	4618      	mov	r0, r3
 800b462:	f003 f9e3 	bl	800e82c <SDMMC_CmdBlockLength>
 800b466:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00f      	beq.n	800b48e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a45      	ldr	r2, [pc, #276]	; (800b588 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	431a      	orrs	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e073      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d90a      	bls.n	800b4aa <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	22a0      	movs	r2, #160	; 0xa0
 800b498:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f003 fa4b 	bl	800e93c <SDMMC_CmdWriteMultiBlock>
 800b4a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4a8:	e009      	b.n	800b4be <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2290      	movs	r2, #144	; 0x90
 800b4ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f003 fa1e 	bl	800e8f8 <SDMMC_CmdWriteSingleBlock>
 800b4bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d012      	beq.n	800b4ea <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a2f      	ldr	r2, [pc, #188]	; (800b588 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b4ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e045      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b4ea:	4b28      	ldr	r3, [pc, #160]	; (800b58c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4f4:	68b9      	ldr	r1, [r7, #8]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3380      	adds	r3, #128	; 0x80
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	025b      	lsls	r3, r3, #9
 800b502:	089b      	lsrs	r3, r3, #2
 800b504:	f7fd facc 	bl	8008aa0 <HAL_DMA_Start_IT>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d01a      	beq.n	800b544 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f022 021a 	bic.w	r2, r2, #26
 800b51c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a19      	ldr	r2, [pc, #100]	; (800b588 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e018      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b544:	f04f 33ff 	mov.w	r3, #4294967295
 800b548:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	025b      	lsls	r3, r3, #9
 800b54e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b550:	2390      	movs	r3, #144	; 0x90
 800b552:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b554:	2300      	movs	r3, #0
 800b556:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b558:	2300      	movs	r3, #0
 800b55a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f107 0210 	add.w	r2, r7, #16
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f003 f932 	bl	800e7d4 <SDIO_ConfigData>

      return HAL_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	e000      	b.n	800b576 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b574:	2302      	movs	r3, #2
  }
}
 800b576:	4618      	mov	r0, r3
 800b578:	3730      	adds	r7, #48	; 0x30
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	0800bd69 	.word	0x0800bd69
 800b584:	0800be05 	.word	0x0800be05
 800b588:	004005ff 	.word	0x004005ff
 800b58c:	4225858c 	.word	0x4225858c

0800b590 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d008      	beq.n	800b5be <HAL_SD_IRQHandler+0x2e>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f003 0308 	and.w	r3, r3, #8
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 ffc8 	bl	800c54c <SD_Read_IT>
 800b5bc:	e155      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 808f 	beq.w	800b6ec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5d6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b5e6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b5ea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0201 	bic.w	r2, r2, #1
 800b5fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f003 0308 	and.w	r3, r3, #8
 800b602:	2b00      	cmp	r3, #0
 800b604:	d039      	beq.n	800b67a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d104      	bne.n	800b61a <HAL_SD_IRQHandler+0x8a>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b00      	cmp	r3, #0
 800b618:	d011      	beq.n	800b63e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f003 f9ae 	bl	800e980 <SDMMC_CmdStopTransfer>
 800b624:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d008      	beq.n	800b63e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	431a      	orrs	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f91f 	bl	800b87c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f240 523a 	movw	r2, #1338	; 0x53a
 800b646:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d104      	bne.n	800b66a <HAL_SD_IRQHandler+0xda>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f003 0302 	and.w	r3, r3, #2
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f003 fe04 	bl	800f278 <HAL_SD_RxCpltCallback>
 800b670:	e0fb      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f003 fdf6 	bl	800f264 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b678:	e0f7      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 80f2 	beq.w	800b86a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f003 0320 	and.w	r3, r3, #32
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d011      	beq.n	800b6b4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f003 f973 	bl	800e980 <SDMMC_CmdStopTransfer>
 800b69a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f8e4 	bl	800b87c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f040 80d5 	bne.w	800b86a <HAL_SD_IRQHandler+0x2da>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f040 80cf 	bne.w	800b86a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 0208 	bic.w	r2, r2, #8
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f003 fdbd 	bl	800f264 <HAL_SD_TxCpltCallback>
}
 800b6ea:	e0be      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d008      	beq.n	800b70c <HAL_SD_IRQHandler+0x17c>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f003 0308 	and.w	r3, r3, #8
 800b700:	2b00      	cmp	r3, #0
 800b702:	d003      	beq.n	800b70c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 ff72 	bl	800c5ee <SD_Write_IT>
 800b70a:	e0ae      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b712:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 80a7 	beq.w	800b86a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	f043 0202 	orr.w	r2, r3, #2
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b00      	cmp	r3, #0
 800b742:	d005      	beq.n	800b750 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	f043 0208 	orr.w	r2, r3, #8
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	f043 0220 	orr.w	r2, r3, #32
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	f043 0210 	orr.w	r2, r3, #16
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f240 523a 	movw	r2, #1338	; 0x53a
 800b78c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b79c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f003 f8ec 	bl	800e980 <SDMMC_CmdStopTransfer>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f855 	bl	800b87c <HAL_SD_ErrorCallback>
}
 800b7d2:	e04a      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d045      	beq.n	800b86a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f003 0310 	and.w	r3, r3, #16
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <HAL_SD_IRQHandler+0x262>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f003 0320 	and.w	r3, r3, #32
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d011      	beq.n	800b816 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	; (800b874 <HAL_SD_IRQHandler+0x2e4>)
 800b7f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fd f9a6 	bl	8008b50 <HAL_DMA_Abort_IT>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d02f      	beq.n	800b86a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fb4a 	bl	800bea8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b814:	e029      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <HAL_SD_IRQHandler+0x29a>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d011      	beq.n	800b84e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	4a12      	ldr	r2, [pc, #72]	; (800b878 <HAL_SD_IRQHandler+0x2e8>)
 800b830:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd f98a 	bl	8008b50 <HAL_DMA_Abort_IT>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d013      	beq.n	800b86a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fb65 	bl	800bf16 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b84c:	e00d      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f003 fcf4 	bl	800f250 <HAL_SD_AbortCallback>
}
 800b868:	e7ff      	b.n	800b86a <HAL_SD_IRQHandler+0x2da>
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	0800bea9 	.word	0x0800bea9
 800b878:	0800bf17 	.word	0x0800bf17

0800b87c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b89e:	0f9b      	lsrs	r3, r3, #30
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8aa:	0e9b      	lsrs	r3, r3, #26
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8bc:	0e1b      	lsrs	r3, r3, #24
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	f003 0303 	and.w	r3, r3, #3
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8ce:	0c1b      	lsrs	r3, r3, #16
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8da:	0a1b      	lsrs	r3, r3, #8
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8f0:	0d1b      	lsrs	r3, r3, #20
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8fc:	0c1b      	lsrs	r3, r3, #16
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	f003 030f 	and.w	r3, r3, #15
 800b904:	b2da      	uxtb	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b90e:	0bdb      	lsrs	r3, r3, #15
 800b910:	b2db      	uxtb	r3, r3
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b920:	0b9b      	lsrs	r3, r3, #14
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b932:	0b5b      	lsrs	r3, r3, #13
 800b934:	b2db      	uxtb	r3, r3
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b944:	0b1b      	lsrs	r3, r3, #12
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2200      	movs	r2, #0
 800b956:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d163      	bne.n	800ba28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b964:	009a      	lsls	r2, r3, #2
 800b966:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b96a:	4013      	ands	r3, r2
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b970:	0f92      	lsrs	r2, r2, #30
 800b972:	431a      	orrs	r2, r3
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97c:	0edb      	lsrs	r3, r3, #27
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	b2da      	uxtb	r2, r3
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b98e:	0e1b      	lsrs	r3, r3, #24
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	b2da      	uxtb	r2, r3
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a0:	0d5b      	lsrs	r3, r3, #21
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	f003 0307 	and.w	r3, r3, #7
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b2:	0c9b      	lsrs	r3, r3, #18
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c4:	0bdb      	lsrs	r3, r3, #15
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	f003 0307 	and.w	r3, r3, #7
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	7e1b      	ldrb	r3, [r3, #24]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	3302      	adds	r3, #2
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b9f2:	fb02 f203 	mul.w	r2, r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	7a1b      	ldrb	r3, [r3, #8]
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	f003 030f 	and.w	r3, r3, #15
 800ba04:	2201      	movs	r2, #1
 800ba06:	409a      	lsls	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ba14:	0a52      	lsrs	r2, r2, #9
 800ba16:	fb02 f203 	mul.w	r2, r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba24:	661a      	str	r2, [r3, #96]	; 0x60
 800ba26:	e031      	b.n	800ba8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d11d      	bne.n	800ba6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba34:	041b      	lsls	r3, r3, #16
 800ba36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba3e:	0c1b      	lsrs	r3, r3, #16
 800ba40:	431a      	orrs	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	029a      	lsls	r2, r3, #10
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	661a      	str	r2, [r3, #96]	; 0x60
 800ba6a:	e00f      	b.n	800ba8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a58      	ldr	r2, [pc, #352]	; (800bbd4 <HAL_SD_GetCardCSD+0x344>)
 800ba72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e09d      	b.n	800bbc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba90:	0b9b      	lsrs	r3, r3, #14
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa2:	09db      	lsrs	r3, r3, #7
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baba:	b2da      	uxtb	r2, r3
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac4:	0fdb      	lsrs	r3, r3, #31
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad0:	0f5b      	lsrs	r3, r3, #29
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 0303 	and.w	r3, r3, #3
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae2:	0e9b      	lsrs	r3, r3, #26
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	b2da      	uxtb	r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf4:	0d9b      	lsrs	r3, r3, #22
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb06:	0d5b      	lsrs	r3, r3, #21
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	0c1b      	lsrs	r3, r3, #16
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb36:	0bdb      	lsrs	r3, r3, #15
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4a:	0b9b      	lsrs	r3, r3, #14
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	0b5b      	lsrs	r3, r3, #13
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb72:	0b1b      	lsrs	r3, r3, #12
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	0a9b      	lsrs	r3, r3, #10
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	004005ff 	.word	0x004005ff

0800bbd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bc30:	b5b0      	push	{r4, r5, r7, lr}
 800bc32:	b08e      	sub	sp, #56	; 0x38
 800bc34:	af04      	add	r7, sp, #16
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d02e      	beq.n	800bca8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc50:	d106      	bne.n	800bc60 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
 800bc5e:	e029      	b.n	800bcb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc66:	d10a      	bne.n	800bc7e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fb0f 	bl	800c28c <SD_WideBus_Enable>
 800bc6e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
 800bc7c:	e01a      	b.n	800bcb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fb4c 	bl	800c322 <SD_WideBus_Disable>
 800bc8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	431a      	orrs	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	639a      	str	r2, [r3, #56]	; 0x38
 800bc98:	e00c      	b.n	800bcb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38
 800bca6:	e005      	b.n	800bcb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a18      	ldr	r2, [pc, #96]	; (800bd24 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800bcc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e024      	b.n	800bd1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681d      	ldr	r5, [r3, #0]
 800bcf6:	466c      	mov	r4, sp
 800bcf8:	f107 0318 	add.w	r3, r7, #24
 800bcfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd04:	f107 030c 	add.w	r3, r7, #12
 800bd08:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f002 fcb2 	bl	800e674 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3728      	adds	r7, #40	; 0x28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bdb0      	pop	{r4, r5, r7, pc}
 800bd22:	bf00      	nop
 800bd24:	004005ff 	.word	0x004005ff

0800bd28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bd34:	f107 030c 	add.w	r3, r7, #12
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fa7e 	bl	800c23c <SD_SendStatus>
 800bd40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	0a5b      	lsrs	r3, r3, #9
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bd5e:	693b      	ldr	r3, [r7, #16]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bd86:	bf00      	nop
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b82      	cmp	r3, #130	; 0x82
 800bda6:	d111      	bne.n	800bdcc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f002 fde7 	bl	800e980 <SDMMC_CmdStopTransfer>
 800bdb2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d008      	beq.n	800bdcc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff fd58 	bl	800b87c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 0208 	bic.w	r2, r2, #8
 800bdda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f240 523a 	movw	r2, #1338	; 0x53a
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f003 fa3f 	bl	800f278 <HAL_SD_RxCpltCallback>
#endif
}
 800bdfa:	bf00      	nop
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
	...

0800be04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7fd f848 	bl	8008ea8 <HAL_DMA_GetError>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d03e      	beq.n	800be9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d002      	beq.n	800be3a <SD_DMAError+0x36>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d12d      	bne.n	800be96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a19      	ldr	r2, [pc, #100]	; (800bea4 <SD_DMAError+0xa0>)
 800be40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800be50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f7ff ff62 	bl	800bd28 <HAL_SD_GetCardState>
 800be64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2b06      	cmp	r3, #6
 800be6a:	d002      	beq.n	800be72 <SD_DMAError+0x6e>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b05      	cmp	r3, #5
 800be70:	d10a      	bne.n	800be88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f002 fd82 	bl	800e980 <SDMMC_CmdStopTransfer>
 800be7c:	4602      	mov	r2, r0
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be82:	431a      	orrs	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2200      	movs	r2, #0
 800be94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800be96:	6978      	ldr	r0, [r7, #20]
 800be98:	f7ff fcf0 	bl	800b87c <HAL_SD_ErrorCallback>
#endif
  }
}
 800be9c:	bf00      	nop
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	004005ff 	.word	0x004005ff

0800bea8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f240 523a 	movw	r2, #1338	; 0x53a
 800bebe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7ff ff31 	bl	800bd28 <HAL_SD_GetCardState>
 800bec6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b06      	cmp	r3, #6
 800beda:	d002      	beq.n	800bee2 <SD_DMATxAbort+0x3a>
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2b05      	cmp	r3, #5
 800bee0:	d10a      	bne.n	800bef8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f002 fd4a 	bl	800e980 <SDMMC_CmdStopTransfer>
 800beec:	4602      	mov	r2, r0
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef2:	431a      	orrs	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befc:	2b00      	cmp	r3, #0
 800befe:	d103      	bne.n	800bf08 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f003 f9a5 	bl	800f250 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bf06:	e002      	b.n	800bf0e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7ff fcb7 	bl	800b87c <HAL_SD_ErrorCallback>
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fefa 	bl	800bd28 <HAL_SD_GetCardState>
 800bf34:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b06      	cmp	r3, #6
 800bf48:	d002      	beq.n	800bf50 <SD_DMARxAbort+0x3a>
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b05      	cmp	r3, #5
 800bf4e:	d10a      	bne.n	800bf66 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f002 fd13 	bl	800e980 <SDMMC_CmdStopTransfer>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf60:	431a      	orrs	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f003 f96e 	bl	800f250 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bf74:	e002      	b.n	800bf7c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff fc80 	bl	800b87c <HAL_SD_ErrorCallback>
}
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf84:	b5b0      	push	{r4, r5, r7, lr}
 800bf86:	b094      	sub	sp, #80	; 0x50
 800bf88:	af04      	add	r7, sp, #16
 800bf8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f002 fbc5 	bl	800e724 <SDIO_GetPowerState>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bfa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bfa4:	e0b7      	b.n	800c116 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d02f      	beq.n	800c00e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f002 fdee 	bl	800eb94 <SDMMC_CmdSendCID>
 800bfb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <SD_InitCard+0x40>
    {
      return errorstate;
 800bfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc2:	e0a8      	b.n	800c116 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2100      	movs	r1, #0
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f002 fbef 	bl	800e7ae <SDIO_GetResponse>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2104      	movs	r1, #4
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f002 fbe6 	bl	800e7ae <SDIO_GetResponse>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2108      	movs	r1, #8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f002 fbdd 	bl	800e7ae <SDIO_GetResponse>
 800bff4:	4602      	mov	r2, r0
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	210c      	movs	r1, #12
 800c000:	4618      	mov	r0, r3
 800c002:	f002 fbd4 	bl	800e7ae <SDIO_GetResponse>
 800c006:	4602      	mov	r2, r0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c012:	2b03      	cmp	r3, #3
 800c014:	d00d      	beq.n	800c032 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f107 020e 	add.w	r2, r7, #14
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f002 fdf4 	bl	800ec0e <SDMMC_CmdSetRelAdd>
 800c026:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <SD_InitCard+0xae>
    {
      return errorstate;
 800c02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c030:	e071      	b.n	800c116 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c036:	2b03      	cmp	r3, #3
 800c038:	d036      	beq.n	800c0a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c03a:	89fb      	ldrh	r3, [r7, #14]
 800c03c:	461a      	mov	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	041b      	lsls	r3, r3, #16
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f002 fdbe 	bl	800ebd0 <SDMMC_CmdSendCSD>
 800c054:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	e05a      	b.n	800c116 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2100      	movs	r1, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f002 fba1 	bl	800e7ae <SDIO_GetResponse>
 800c06c:	4602      	mov	r2, r0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2104      	movs	r1, #4
 800c078:	4618      	mov	r0, r3
 800c07a:	f002 fb98 	bl	800e7ae <SDIO_GetResponse>
 800c07e:	4602      	mov	r2, r0
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2108      	movs	r1, #8
 800c08a:	4618      	mov	r0, r3
 800c08c:	f002 fb8f 	bl	800e7ae <SDIO_GetResponse>
 800c090:	4602      	mov	r2, r0
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	210c      	movs	r1, #12
 800c09c:	4618      	mov	r0, r3
 800c09e:	f002 fb86 	bl	800e7ae <SDIO_GetResponse>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f002 fb7d 	bl	800e7ae <SDIO_GetResponse>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	0d1a      	lsrs	r2, r3, #20
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c0bc:	f107 0310 	add.w	r3, r7, #16
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff fbe4 	bl	800b890 <HAL_SD_GetCardCSD>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0d2:	e020      	b.n	800c116 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6819      	ldr	r1, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0dc:	041b      	lsls	r3, r3, #16
 800c0de:	f04f 0400 	mov.w	r4, #0
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4623      	mov	r3, r4
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	f002 fc6c 	bl	800e9c4 <SDMMC_CmdSelDesel>
 800c0ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <SD_InitCard+0x174>
  {
    return errorstate;
 800c0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f6:	e00e      	b.n	800c116 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681d      	ldr	r5, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	466c      	mov	r4, sp
 800c100:	f103 0210 	add.w	r2, r3, #16
 800c104:	ca07      	ldmia	r2, {r0, r1, r2}
 800c106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c10a:	3304      	adds	r3, #4
 800c10c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c10e:	4628      	mov	r0, r5
 800c110:	f002 fab0 	bl	800e674 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3740      	adds	r7, #64	; 0x40
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c120 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	617b      	str	r3, [r7, #20]
 800c130:	2300      	movs	r3, #0
 800c132:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	f002 fc66 	bl	800ea0a <SDMMC_CmdGoIdleState>
 800c13e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	e072      	b.n	800c230 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4618      	mov	r0, r3
 800c150:	f002 fc79 	bl	800ea46 <SDMMC_CmdOperCond>
 800c154:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00d      	beq.n	800c178 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f002 fc4f 	bl	800ea0a <SDMMC_CmdGoIdleState>
 800c16c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	e05b      	b.n	800c230 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c182:	2b01      	cmp	r3, #1
 800c184:	d137      	bne.n	800c1f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2100      	movs	r1, #0
 800c18c:	4618      	mov	r0, r3
 800c18e:	f002 fc79 	bl	800ea84 <SDMMC_CmdAppCommand>
 800c192:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d02d      	beq.n	800c1f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c19a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c19e:	e047      	b.n	800c230 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f002 fc6c 	bl	800ea84 <SDMMC_CmdAppCommand>
 800c1ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <SD_PowerON+0x98>
    {
      return errorstate;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	e03b      	b.n	800c230 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	491e      	ldr	r1, [pc, #120]	; (800c238 <SD_PowerON+0x118>)
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f002 fc82 	bl	800eac8 <SDMMC_CmdAppOperCommand>
 800c1c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c1cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1d0:	e02e      	b.n	800c230 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f002 fae8 	bl	800e7ae <SDIO_GetResponse>
 800c1de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	0fdb      	lsrs	r3, r3, #31
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d101      	bne.n	800c1ec <SD_PowerON+0xcc>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <SD_PowerON+0xce>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	613b      	str	r3, [r7, #16]

    count++;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d802      	bhi.n	800c206 <SD_PowerON+0xe6>
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0cc      	beq.n	800c1a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d902      	bls.n	800c216 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c214:	e00c      	b.n	800c230 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d003      	beq.n	800c228 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	645a      	str	r2, [r3, #68]	; 0x44
 800c226:	e002      	b.n	800c22e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	c1100000 	.word	0xc1100000

0800c23c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d102      	bne.n	800c252 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c24c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c250:	e018      	b.n	800c284 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c25a:	041b      	lsls	r3, r3, #16
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f002 fcf6 	bl	800ec50 <SDMMC_CmdSendStatus>
 800c264:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	e009      	b.n	800c284 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2100      	movs	r1, #0
 800c276:	4618      	mov	r0, r3
 800c278:	f002 fa99 	bl	800e7ae <SDIO_GetResponse>
 800c27c:	4602      	mov	r2, r0
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f002 fa83 	bl	800e7ae <SDIO_GetResponse>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2b2:	d102      	bne.n	800c2ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c2b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2b8:	e02f      	b.n	800c31a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c2ba:	f107 030c 	add.w	r3, r7, #12
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f879 	bl	800c3b8 <SD_FindSCR>
 800c2c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	e023      	b.n	800c31a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01c      	beq.n	800c316 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e4:	041b      	lsls	r3, r3, #16
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f002 fbcb 	bl	800ea84 <SDMMC_CmdAppCommand>
 800c2ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	e00f      	b.n	800c31a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2102      	movs	r1, #2
 800c300:	4618      	mov	r0, r3
 800c302:	f002 fc04 	bl	800eb0e <SDMMC_CmdBusWidth>
 800c306:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	e003      	b.n	800c31a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c312:	2300      	movs	r3, #0
 800c314:	e001      	b.n	800c31a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c316:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b086      	sub	sp, #24
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	2300      	movs	r3, #0
 800c330:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2100      	movs	r1, #0
 800c338:	4618      	mov	r0, r3
 800c33a:	f002 fa38 	bl	800e7ae <SDIO_GetResponse>
 800c33e:	4603      	mov	r3, r0
 800c340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c348:	d102      	bne.n	800c350 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c34a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c34e:	e02f      	b.n	800c3b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f82e 	bl	800c3b8 <SD_FindSCR>
 800c35c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	e023      	b.n	800c3b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01c      	beq.n	800c3ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c37a:	041b      	lsls	r3, r3, #16
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f002 fb80 	bl	800ea84 <SDMMC_CmdAppCommand>
 800c384:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	e00f      	b.n	800c3b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2100      	movs	r1, #0
 800c396:	4618      	mov	r0, r3
 800c398:	f002 fbb9 	bl	800eb0e <SDMMC_CmdBusWidth>
 800c39c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d001      	beq.n	800c3a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	e003      	b.n	800c3b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e001      	b.n	800c3b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b08f      	sub	sp, #60	; 0x3c
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c3c2:	f7fb fd7b 	bl	8007ebc <HAL_GetTick>
 800c3c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60bb      	str	r3, [r7, #8]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2108      	movs	r1, #8
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f002 fa24 	bl	800e82c <SDMMC_CmdBlockLength>
 800c3e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	e0a9      	b.n	800c544 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3f8:	041b      	lsls	r3, r3, #16
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	f002 fb41 	bl	800ea84 <SDMMC_CmdAppCommand>
 800c402:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	e09a      	b.n	800c544 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c40e:	f04f 33ff 	mov.w	r3, #4294967295
 800c412:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c414:	2308      	movs	r3, #8
 800c416:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c418:	2330      	movs	r3, #48	; 0x30
 800c41a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c41c:	2302      	movs	r3, #2
 800c41e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c420:	2300      	movs	r3, #0
 800c422:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c424:	2301      	movs	r3, #1
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f107 0210 	add.w	r2, r7, #16
 800c430:	4611      	mov	r1, r2
 800c432:	4618      	mov	r0, r3
 800c434:	f002 f9ce 	bl	800e7d4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f002 fb88 	bl	800eb52 <SDMMC_CmdSendSCR>
 800c442:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	2b00      	cmp	r3, #0
 800c448:	d022      	beq.n	800c490 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	e07a      	b.n	800c544 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00e      	beq.n	800c47a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6819      	ldr	r1, [r3, #0]
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	f107 0208 	add.w	r2, r7, #8
 800c468:	18d4      	adds	r4, r2, r3
 800c46a:	4608      	mov	r0, r1
 800c46c:	f002 f92d 	bl	800e6ca <SDIO_ReadFIFO>
 800c470:	4603      	mov	r3, r0
 800c472:	6023      	str	r3, [r4, #0]
      index++;
 800c474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c476:	3301      	adds	r3, #1
 800c478:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c47a:	f7fb fd1f 	bl	8007ebc <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c488:	d102      	bne.n	800c490 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c48a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c48e:	e059      	b.n	800c544 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c496:	f240 432a 	movw	r3, #1066	; 0x42a
 800c49a:	4013      	ands	r3, r2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d0d6      	beq.n	800c44e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a6:	f003 0308 	and.w	r3, r3, #8
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2208      	movs	r2, #8
 800c4b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	e044      	b.n	800c544 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d005      	beq.n	800c4d4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	e037      	b.n	800c544 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c4ea:	2320      	movs	r3, #32
 800c4ec:	e02a      	b.n	800c544 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f240 523a 	movw	r2, #1338	; 0x53a
 800c4f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	061a      	lsls	r2, r3, #24
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c504:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	0a1b      	lsrs	r3, r3, #8
 800c50a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c50e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	0e1b      	lsrs	r3, r3, #24
 800c514:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	601a      	str	r2, [r3, #0]
    scr++;
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	3304      	adds	r3, #4
 800c51e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	061a      	lsls	r2, r3, #24
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	021b      	lsls	r3, r3, #8
 800c528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c52c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	0a1b      	lsrs	r3, r3, #8
 800c532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c536:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	0e1b      	lsrs	r3, r3, #24
 800c53c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	373c      	adds	r7, #60	; 0x3c
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd90      	pop	{r4, r7, pc}

0800c54c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c558:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d03f      	beq.n	800c5e6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e033      	b.n	800c5d4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4618      	mov	r0, r3
 800c572:	f002 f8aa 	bl	800e6ca <SDIO_ReadFIFO>
 800c576:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	3b01      	subs	r3, #1
 800c58a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	b2da      	uxtb	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	0c1b      	lsrs	r3, r3, #16
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	0e1b      	lsrs	r3, r3, #24
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b07      	cmp	r3, #7
 800c5d8:	d9c8      	bls.n	800c56c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	693a      	ldr	r2, [r7, #16]
 800c5e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c5e6:	bf00      	nop
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b086      	sub	sp, #24
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c600:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d043      	beq.n	800c690 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c608:	2300      	movs	r3, #0
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e037      	b.n	800c67e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	021a      	lsls	r2, r3, #8
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4313      	orrs	r3, r2
 800c62a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3301      	adds	r3, #1
 800c630:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	3b01      	subs	r3, #1
 800c636:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	041a      	lsls	r2, r3, #16
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4313      	orrs	r3, r2
 800c642:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3301      	adds	r3, #1
 800c648:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	061a      	lsls	r2, r3, #24
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3301      	adds	r3, #1
 800c660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	3b01      	subs	r3, #1
 800c666:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f107 0208 	add.w	r2, r7, #8
 800c670:	4611      	mov	r1, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f002 f836 	bl	800e6e4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	3301      	adds	r3, #1
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b07      	cmp	r3, #7
 800c682:	d9c4      	bls.n	800c60e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c690:	bf00      	nop
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e056      	b.n	800c758 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7f9 fd5d 	bl	8006184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	431a      	orrs	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	ea42 0103 	orr.w	r1, r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	430a      	orrs	r2, r1
 800c720:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	0c1b      	lsrs	r3, r3, #16
 800c728:	f003 0104 	and.w	r1, r3, #4
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	430a      	orrs	r2, r1
 800c736:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	69da      	ldr	r2, [r3, #28]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	4613      	mov	r3, r2
 800c76e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d101      	bne.n	800c782 <HAL_SPI_Transmit+0x22>
 800c77e:	2302      	movs	r3, #2
 800c780:	e11e      	b.n	800c9c0 <HAL_SPI_Transmit+0x260>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c78a:	f7fb fb97 	bl	8007ebc <HAL_GetTick>
 800c78e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d002      	beq.n	800c7a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c7a4:	e103      	b.n	800c9ae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <HAL_SPI_Transmit+0x52>
 800c7ac:	88fb      	ldrh	r3, [r7, #6]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d102      	bne.n	800c7b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c7b6:	e0fa      	b.n	800c9ae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2203      	movs	r2, #3
 800c7bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	88fa      	ldrh	r2, [r7, #6]
 800c7d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	88fa      	ldrh	r2, [r7, #6]
 800c7d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7fe:	d107      	bne.n	800c810 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c80e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81a:	2b40      	cmp	r3, #64	; 0x40
 800c81c:	d007      	beq.n	800c82e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c82c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c836:	d14b      	bne.n	800c8d0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <HAL_SPI_Transmit+0xe6>
 800c840:	8afb      	ldrh	r3, [r7, #22]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d13e      	bne.n	800c8c4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84a:	881a      	ldrh	r2, [r3, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c856:	1c9a      	adds	r2, r3, #2
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	b29a      	uxth	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c86a:	e02b      	b.n	800c8c4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f003 0302 	and.w	r3, r3, #2
 800c876:	2b02      	cmp	r3, #2
 800c878:	d112      	bne.n	800c8a0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87e:	881a      	ldrh	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c894:	b29b      	uxth	r3, r3
 800c896:	3b01      	subs	r3, #1
 800c898:	b29a      	uxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	86da      	strh	r2, [r3, #54]	; 0x36
 800c89e:	e011      	b.n	800c8c4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8a0:	f7fb fb0c 	bl	8007ebc <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d803      	bhi.n	800c8b8 <HAL_SPI_Transmit+0x158>
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b6:	d102      	bne.n	800c8be <HAL_SPI_Transmit+0x15e>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d102      	bne.n	800c8c4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c8c2:	e074      	b.n	800c9ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1ce      	bne.n	800c86c <HAL_SPI_Transmit+0x10c>
 800c8ce:	e04c      	b.n	800c96a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <HAL_SPI_Transmit+0x17e>
 800c8d8:	8afb      	ldrh	r3, [r7, #22]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d140      	bne.n	800c960 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	330c      	adds	r3, #12
 800c8e8:	7812      	ldrb	r2, [r2, #0]
 800c8ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c904:	e02c      	b.n	800c960 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f003 0302 	and.w	r3, r3, #2
 800c910:	2b02      	cmp	r3, #2
 800c912:	d113      	bne.n	800c93c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	7812      	ldrb	r2, [r2, #0]
 800c920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c930:	b29b      	uxth	r3, r3
 800c932:	3b01      	subs	r3, #1
 800c934:	b29a      	uxth	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	86da      	strh	r2, [r3, #54]	; 0x36
 800c93a:	e011      	b.n	800c960 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c93c:	f7fb fabe 	bl	8007ebc <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d803      	bhi.n	800c954 <HAL_SPI_Transmit+0x1f4>
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c952:	d102      	bne.n	800c95a <HAL_SPI_Transmit+0x1fa>
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c95e:	e026      	b.n	800c9ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c964:	b29b      	uxth	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1cd      	bne.n	800c906 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f000 fba4 	bl	800d0bc <SPI_EndRxTxTransaction>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2220      	movs	r2, #32
 800c97e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c988:	2300      	movs	r3, #0
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	77fb      	strb	r3, [r7, #31]
 800c9aa:	e000      	b.n	800c9ae <HAL_SPI_Transmit+0x24e>
  }

error:
 800c9ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c9be:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3720      	adds	r7, #32
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	603b      	str	r3, [r7, #0]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9e4:	d112      	bne.n	800ca0c <HAL_SPI_Receive+0x44>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10e      	bne.n	800ca0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c9f6:	88fa      	ldrh	r2, [r7, #6]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	68b9      	ldr	r1, [r7, #8]
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f8e9 	bl	800cbda <HAL_SPI_TransmitReceive>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	e0e2      	b.n	800cbd2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d101      	bne.n	800ca1a <HAL_SPI_Receive+0x52>
 800ca16:	2302      	movs	r3, #2
 800ca18:	e0db      	b.n	800cbd2 <HAL_SPI_Receive+0x20a>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca22:	f7fb fa4b 	bl	8007ebc <HAL_GetTick>
 800ca26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d002      	beq.n	800ca3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ca34:	2302      	movs	r3, #2
 800ca36:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca38:	e0c2      	b.n	800cbc0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <HAL_SPI_Receive+0x7e>
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d102      	bne.n	800ca4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca4a:	e0b9      	b.n	800cbc0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2204      	movs	r2, #4
 800ca50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	88fa      	ldrh	r2, [r7, #6]
 800ca64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	88fa      	ldrh	r2, [r7, #6]
 800ca6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca92:	d107      	bne.n	800caa4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800caa2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caae:	2b40      	cmp	r3, #64	; 0x40
 800cab0:	d007      	beq.n	800cac2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cac0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d162      	bne.n	800cb90 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800caca:	e02e      	b.n	800cb2a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d115      	bne.n	800cb06 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f103 020c 	add.w	r2, r3, #12
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	7812      	ldrb	r2, [r2, #0]
 800cae8:	b2d2      	uxtb	r2, r2
 800caea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	3b01      	subs	r3, #1
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb04:	e011      	b.n	800cb2a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb06:	f7fb f9d9 	bl	8007ebc <HAL_GetTick>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d803      	bhi.n	800cb1e <HAL_SPI_Receive+0x156>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1c:	d102      	bne.n	800cb24 <HAL_SPI_Receive+0x15c>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cb28:	e04a      	b.n	800cbc0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1cb      	bne.n	800cacc <HAL_SPI_Receive+0x104>
 800cb34:	e031      	b.n	800cb9a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d113      	bne.n	800cb6c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68da      	ldr	r2, [r3, #12]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4e:	b292      	uxth	r2, r2
 800cb50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	1c9a      	adds	r2, r3, #2
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	3b01      	subs	r3, #1
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb6a:	e011      	b.n	800cb90 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb6c:	f7fb f9a6 	bl	8007ebc <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d803      	bhi.n	800cb84 <HAL_SPI_Receive+0x1bc>
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb82:	d102      	bne.n	800cb8a <HAL_SPI_Receive+0x1c2>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cb8e:	e017      	b.n	800cbc0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1cd      	bne.n	800cb36 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 fa27 	bl	800cff2 <SPI_EndRxTransaction>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2220      	movs	r2, #32
 800cbae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	75fb      	strb	r3, [r7, #23]
 800cbbc:	e000      	b.n	800cbc0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800cbbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3718      	adds	r7, #24
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b08c      	sub	sp, #48	; 0x30
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	60f8      	str	r0, [r7, #12]
 800cbe2:	60b9      	str	r1, [r7, #8]
 800cbe4:	607a      	str	r2, [r7, #4]
 800cbe6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d101      	bne.n	800cc00 <HAL_SPI_TransmitReceive+0x26>
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e18a      	b.n	800cf16 <HAL_SPI_TransmitReceive+0x33c>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc08:	f7fb f958 	bl	8007ebc <HAL_GetTick>
 800cc0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cc1e:	887b      	ldrh	r3, [r7, #2]
 800cc20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d00f      	beq.n	800cc4a <HAL_SPI_TransmitReceive+0x70>
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc30:	d107      	bne.n	800cc42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d103      	bne.n	800cc42 <HAL_SPI_TransmitReceive+0x68>
 800cc3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc3e:	2b04      	cmp	r3, #4
 800cc40:	d003      	beq.n	800cc4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
 800cc44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cc48:	e15b      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <HAL_SPI_TransmitReceive+0x82>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <HAL_SPI_TransmitReceive+0x82>
 800cc56:	887b      	ldrh	r3, [r7, #2]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d103      	bne.n	800cc64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cc62:	e14e      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d003      	beq.n	800cc78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2205      	movs	r2, #5
 800cc74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	887a      	ldrh	r2, [r7, #2]
 800cc88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	887a      	ldrh	r2, [r7, #2]
 800cc8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	887a      	ldrh	r2, [r7, #2]
 800cc9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	887a      	ldrh	r2, [r7, #2]
 800cca0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	d007      	beq.n	800cccc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccd4:	d178      	bne.n	800cdc8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <HAL_SPI_TransmitReceive+0x10a>
 800ccde:	8b7b      	ldrh	r3, [r7, #26]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d166      	bne.n	800cdb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce8:	881a      	ldrh	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf4:	1c9a      	adds	r2, r3, #2
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd08:	e053      	b.n	800cdb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f003 0302 	and.w	r3, r3, #2
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d11b      	bne.n	800cd50 <HAL_SPI_TransmitReceive+0x176>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d016      	beq.n	800cd50 <HAL_SPI_TransmitReceive+0x176>
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d113      	bne.n	800cd50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2c:	881a      	ldrh	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd38:	1c9a      	adds	r2, r3, #2
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	3b01      	subs	r3, #1
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d119      	bne.n	800cd92 <HAL_SPI_TransmitReceive+0x1b8>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d014      	beq.n	800cd92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd72:	b292      	uxth	r2, r2
 800cd74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	1c9a      	adds	r2, r3, #2
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	3b01      	subs	r3, #1
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cd92:	f7fb f893 	bl	8007ebc <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d807      	bhi.n	800cdb2 <HAL_SPI_TransmitReceive+0x1d8>
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d003      	beq.n	800cdb2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cdb0:	e0a7      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1a6      	bne.n	800cd0a <HAL_SPI_TransmitReceive+0x130>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1a1      	bne.n	800cd0a <HAL_SPI_TransmitReceive+0x130>
 800cdc6:	e07c      	b.n	800cec2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <HAL_SPI_TransmitReceive+0x1fc>
 800cdd0:	8b7b      	ldrh	r3, [r7, #26]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d16b      	bne.n	800ceae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	330c      	adds	r3, #12
 800cde0:	7812      	ldrb	r2, [r2, #0]
 800cde2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdfc:	e057      	b.n	800ceae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	f003 0302 	and.w	r3, r3, #2
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d11c      	bne.n	800ce46 <HAL_SPI_TransmitReceive+0x26c>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d017      	beq.n	800ce46 <HAL_SPI_TransmitReceive+0x26c>
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d114      	bne.n	800ce46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	330c      	adds	r3, #12
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d119      	bne.n	800ce88 <HAL_SPI_TransmitReceive+0x2ae>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d014      	beq.n	800ce88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce68:	b2d2      	uxtb	r2, r2
 800ce6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce84:	2301      	movs	r3, #1
 800ce86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ce88:	f7fb f818 	bl	8007ebc <HAL_GetTick>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d803      	bhi.n	800cea0 <HAL_SPI_TransmitReceive+0x2c6>
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9e:	d102      	bne.n	800cea6 <HAL_SPI_TransmitReceive+0x2cc>
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d103      	bne.n	800ceae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ceac:	e029      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1a2      	bne.n	800cdfe <HAL_SPI_TransmitReceive+0x224>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d19d      	bne.n	800cdfe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 f8f8 	bl	800d0bc <SPI_EndRxTxTransaction>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d006      	beq.n	800cee0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2220      	movs	r2, #32
 800cedc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cede:	e010      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	617b      	str	r3, [r7, #20]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	e000      	b.n	800cf02 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cf00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cf12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3730      	adds	r7, #48	; 0x30
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	60f8      	str	r0, [r7, #12]
 800cf26:	60b9      	str	r1, [r7, #8]
 800cf28:	603b      	str	r3, [r7, #0]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf2e:	e04c      	b.n	800cfca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf36:	d048      	beq.n	800cfca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cf38:	f7fa ffc0 	bl	8007ebc <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d902      	bls.n	800cf4e <SPI_WaitFlagStateUntilTimeout+0x30>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d13d      	bne.n	800cfca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf66:	d111      	bne.n	800cf8c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf70:	d004      	beq.n	800cf7c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf7a:	d107      	bne.n	800cf8c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf94:	d10f      	bne.n	800cfb6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfa4:	601a      	str	r2, [r3, #0]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e00f      	b.n	800cfea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	689a      	ldr	r2, [r3, #8]
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	bf0c      	ite	eq
 800cfda:	2301      	moveq	r3, #1
 800cfdc:	2300      	movne	r3, #0
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d1a3      	bne.n	800cf30 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b086      	sub	sp, #24
 800cff6:	af02      	add	r7, sp, #8
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d006:	d111      	bne.n	800d02c <SPI_EndRxTransaction+0x3a>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d010:	d004      	beq.n	800d01c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d01a:	d107      	bne.n	800d02c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d02a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d034:	d12a      	bne.n	800d08c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d03e:	d012      	beq.n	800d066 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2200      	movs	r2, #0
 800d048:	2180      	movs	r1, #128	; 0x80
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f7ff ff67 	bl	800cf1e <SPI_WaitFlagStateUntilTimeout>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d02d      	beq.n	800d0b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05a:	f043 0220 	orr.w	r2, r3, #32
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e026      	b.n	800d0b4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2200      	movs	r2, #0
 800d06e:	2101      	movs	r1, #1
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f7ff ff54 	bl	800cf1e <SPI_WaitFlagStateUntilTimeout>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d01a      	beq.n	800d0b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d080:	f043 0220 	orr.w	r2, r3, #32
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d088:	2303      	movs	r3, #3
 800d08a:	e013      	b.n	800d0b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	2200      	movs	r2, #0
 800d094:	2101      	movs	r1, #1
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff ff41 	bl	800cf1e <SPI_WaitFlagStateUntilTimeout>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a6:	f043 0220 	orr.w	r2, r3, #32
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e000      	b.n	800d0b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b088      	sub	sp, #32
 800d0c0:	af02      	add	r7, sp, #8
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d0c8:	4b1b      	ldr	r3, [pc, #108]	; (800d138 <SPI_EndRxTxTransaction+0x7c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a1b      	ldr	r2, [pc, #108]	; (800d13c <SPI_EndRxTxTransaction+0x80>)
 800d0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d2:	0d5b      	lsrs	r3, r3, #21
 800d0d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0d8:	fb02 f303 	mul.w	r3, r2, r3
 800d0dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0e6:	d112      	bne.n	800d10e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2180      	movs	r1, #128	; 0x80
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7ff ff13 	bl	800cf1e <SPI_WaitFlagStateUntilTimeout>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d016      	beq.n	800d12c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d102:	f043 0220 	orr.w	r2, r3, #32
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d10a:	2303      	movs	r3, #3
 800d10c:	e00f      	b.n	800d12e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00a      	beq.n	800d12a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	3b01      	subs	r3, #1
 800d118:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d124:	2b80      	cmp	r3, #128	; 0x80
 800d126:	d0f2      	beq.n	800d10e <SPI_EndRxTxTransaction+0x52>
 800d128:	e000      	b.n	800d12c <SPI_EndRxTxTransaction+0x70>
        break;
 800d12a:	bf00      	nop
  }

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20000000 	.word	0x20000000
 800d13c:	165e9f81 	.word	0x165e9f81

0800d140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e01d      	b.n	800d18e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f9 f8c8 	bl	80062fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f000 fb56 	bl	800d830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d196:	b480      	push	{r7}
 800d198:	b085      	sub	sp, #20
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	68da      	ldr	r2, [r3, #12]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f042 0201 	orr.w	r2, r2, #1
 800d1ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	f003 0307 	and.w	r3, r3, #7
 800d1b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b06      	cmp	r3, #6
 800d1be:	d007      	beq.n	800d1d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f042 0201 	orr.w	r2, r2, #1
 800d1ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e01d      	b.n	800d22c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d106      	bne.n	800d20a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7f9 f805 	bl	8006214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3304      	adds	r3, #4
 800d21a:	4619      	mov	r1, r3
 800d21c:	4610      	mov	r0, r2
 800d21e:	f000 fb07 	bl	800d830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2201      	movs	r2, #1
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fd42 	bl	800dcd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a15      	ldr	r2, [pc, #84]	; (800d2a8 <HAL_TIM_PWM_Start+0x74>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d004      	beq.n	800d260 <HAL_TIM_PWM_Start+0x2c>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a14      	ldr	r2, [pc, #80]	; (800d2ac <HAL_TIM_PWM_Start+0x78>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d101      	bne.n	800d264 <HAL_TIM_PWM_Start+0x30>
 800d260:	2301      	movs	r3, #1
 800d262:	e000      	b.n	800d266 <HAL_TIM_PWM_Start+0x32>
 800d264:	2300      	movs	r3, #0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b06      	cmp	r3, #6
 800d28a:	d007      	beq.n	800d29c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 0201 	orr.w	r2, r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	40010000 	.word	0x40010000
 800d2ac:	40010400 	.word	0x40010400

0800d2b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e083      	b.n	800d3cc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7f9 f89f 	bl	800641c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	6812      	ldr	r2, [r2, #0]
 800d2f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2f4:	f023 0307 	bic.w	r3, r3, #7
 800d2f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3304      	adds	r3, #4
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f000 fa93 	bl	800d830 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6a1b      	ldr	r3, [r3, #32]
 800d320:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	4313      	orrs	r3, r2
 800d32a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	689a      	ldr	r2, [r3, #8]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	021b      	lsls	r3, r3, #8
 800d342:	4313      	orrs	r3, r2
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	4313      	orrs	r3, r2
 800d348:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d350:	f023 030c 	bic.w	r3, r3, #12
 800d354:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d35c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	69db      	ldr	r3, [r3, #28]
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	4313      	orrs	r3, r2
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	4313      	orrs	r3, r2
 800d372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	011a      	lsls	r2, r3, #4
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	031b      	lsls	r3, r3, #12
 800d380:	4313      	orrs	r3, r2
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	4313      	orrs	r3, r2
 800d386:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d38e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d396:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <HAL_TIM_Encoder_Start+0x16>
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	d008      	beq.n	800d3fa <HAL_TIM_Encoder_Start+0x26>
 800d3e8:	e00f      	b.n	800d40a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 fc6c 	bl	800dcd0 <TIM_CCxChannelCmd>
      break;
 800d3f8:	e016      	b.n	800d428 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2201      	movs	r2, #1
 800d400:	2104      	movs	r1, #4
 800d402:	4618      	mov	r0, r3
 800d404:	f000 fc64 	bl	800dcd0 <TIM_CCxChannelCmd>
      break;
 800d408:	e00e      	b.n	800d428 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2201      	movs	r2, #1
 800d410:	2100      	movs	r1, #0
 800d412:	4618      	mov	r0, r3
 800d414:	f000 fc5c 	bl	800dcd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2201      	movs	r2, #1
 800d41e:	2104      	movs	r1, #4
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fc55 	bl	800dcd0 <TIM_CCxChannelCmd>
      break;
 800d426:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0201 	orr.w	r2, r2, #1
 800d436:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	f003 0302 	and.w	r3, r3, #2
 800d454:	2b02      	cmp	r3, #2
 800d456:	d122      	bne.n	800d49e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	2b02      	cmp	r3, #2
 800d464:	d11b      	bne.n	800d49e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f06f 0202 	mvn.w	r2, #2
 800d46e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	f003 0303 	and.w	r3, r3, #3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f9b5 	bl	800d7f4 <HAL_TIM_IC_CaptureCallback>
 800d48a:	e005      	b.n	800d498 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f9a7 	bl	800d7e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 f9b8 	bl	800d808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	f003 0304 	and.w	r3, r3, #4
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d122      	bne.n	800d4f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f003 0304 	and.w	r3, r3, #4
 800d4b6:	2b04      	cmp	r3, #4
 800d4b8:	d11b      	bne.n	800d4f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f06f 0204 	mvn.w	r2, #4
 800d4c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f98b 	bl	800d7f4 <HAL_TIM_IC_CaptureCallback>
 800d4de:	e005      	b.n	800d4ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f97d 	bl	800d7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f98e 	bl	800d808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	f003 0308 	and.w	r3, r3, #8
 800d4fc:	2b08      	cmp	r3, #8
 800d4fe:	d122      	bne.n	800d546 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	f003 0308 	and.w	r3, r3, #8
 800d50a:	2b08      	cmp	r3, #8
 800d50c:	d11b      	bne.n	800d546 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f06f 0208 	mvn.w	r2, #8
 800d516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2204      	movs	r2, #4
 800d51c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	69db      	ldr	r3, [r3, #28]
 800d524:	f003 0303 	and.w	r3, r3, #3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f961 	bl	800d7f4 <HAL_TIM_IC_CaptureCallback>
 800d532:	e005      	b.n	800d540 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f953 	bl	800d7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f964 	bl	800d808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	f003 0310 	and.w	r3, r3, #16
 800d550:	2b10      	cmp	r3, #16
 800d552:	d122      	bne.n	800d59a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	f003 0310 	and.w	r3, r3, #16
 800d55e:	2b10      	cmp	r3, #16
 800d560:	d11b      	bne.n	800d59a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f06f 0210 	mvn.w	r2, #16
 800d56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2208      	movs	r2, #8
 800d570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	69db      	ldr	r3, [r3, #28]
 800d578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f937 	bl	800d7f4 <HAL_TIM_IC_CaptureCallback>
 800d586:	e005      	b.n	800d594 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f929 	bl	800d7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f93a 	bl	800d808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d10e      	bne.n	800d5c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d107      	bne.n	800d5c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f06f 0201 	mvn.w	r2, #1
 800d5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7f7 fc15 	bl	8004df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d0:	2b80      	cmp	r3, #128	; 0x80
 800d5d2:	d10e      	bne.n	800d5f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5de:	2b80      	cmp	r3, #128	; 0x80
 800d5e0:	d107      	bne.n	800d5f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fc6d 	bl	800decc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5fc:	2b40      	cmp	r3, #64	; 0x40
 800d5fe:	d10e      	bne.n	800d61e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60a:	2b40      	cmp	r3, #64	; 0x40
 800d60c:	d107      	bne.n	800d61e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f8ff 	bl	800d81c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	f003 0320 	and.w	r3, r3, #32
 800d628:	2b20      	cmp	r3, #32
 800d62a:	d10e      	bne.n	800d64a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f003 0320 	and.w	r3, r3, #32
 800d636:	2b20      	cmp	r3, #32
 800d638:	d107      	bne.n	800d64a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f06f 0220 	mvn.w	r2, #32
 800d642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fc37 	bl	800deb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d666:	2b01      	cmp	r3, #1
 800d668:	d101      	bne.n	800d66e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d66a:	2302      	movs	r3, #2
 800d66c:	e0b4      	b.n	800d7d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2202      	movs	r2, #2
 800d67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b0c      	cmp	r3, #12
 800d682:	f200 809f 	bhi.w	800d7c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d686:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d6c1 	.word	0x0800d6c1
 800d690:	0800d7c5 	.word	0x0800d7c5
 800d694:	0800d7c5 	.word	0x0800d7c5
 800d698:	0800d7c5 	.word	0x0800d7c5
 800d69c:	0800d701 	.word	0x0800d701
 800d6a0:	0800d7c5 	.word	0x0800d7c5
 800d6a4:	0800d7c5 	.word	0x0800d7c5
 800d6a8:	0800d7c5 	.word	0x0800d7c5
 800d6ac:	0800d743 	.word	0x0800d743
 800d6b0:	0800d7c5 	.word	0x0800d7c5
 800d6b4:	0800d7c5 	.word	0x0800d7c5
 800d6b8:	0800d7c5 	.word	0x0800d7c5
 800d6bc:	0800d783 	.word	0x0800d783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68b9      	ldr	r1, [r7, #8]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 f952 	bl	800d970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	699a      	ldr	r2, [r3, #24]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f042 0208 	orr.w	r2, r2, #8
 800d6da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	699a      	ldr	r2, [r3, #24]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f022 0204 	bic.w	r2, r2, #4
 800d6ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6999      	ldr	r1, [r3, #24]
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	691a      	ldr	r2, [r3, #16]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	430a      	orrs	r2, r1
 800d6fc:	619a      	str	r2, [r3, #24]
      break;
 800d6fe:	e062      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f9a2 	bl	800da50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	699a      	ldr	r2, [r3, #24]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d71a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d72a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6999      	ldr	r1, [r3, #24]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	021a      	lsls	r2, r3, #8
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	430a      	orrs	r2, r1
 800d73e:	619a      	str	r2, [r3, #24]
      break;
 800d740:	e041      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 f9f7 	bl	800db3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	69da      	ldr	r2, [r3, #28]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f042 0208 	orr.w	r2, r2, #8
 800d75c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69da      	ldr	r2, [r3, #28]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 0204 	bic.w	r2, r2, #4
 800d76c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69d9      	ldr	r1, [r3, #28]
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	691a      	ldr	r2, [r3, #16]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	430a      	orrs	r2, r1
 800d77e:	61da      	str	r2, [r3, #28]
      break;
 800d780:	e021      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	4618      	mov	r0, r3
 800d78a:	f000 fa4b 	bl	800dc24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69da      	ldr	r2, [r3, #28]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d79c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	69da      	ldr	r2, [r3, #28]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	69d9      	ldr	r1, [r3, #28]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	021a      	lsls	r2, r3, #8
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	61da      	str	r2, [r3, #28]
      break;
 800d7c2:	e000      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d7c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a40      	ldr	r2, [pc, #256]	; (800d944 <TIM_Base_SetConfig+0x114>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d013      	beq.n	800d870 <TIM_Base_SetConfig+0x40>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d84e:	d00f      	beq.n	800d870 <TIM_Base_SetConfig+0x40>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4a3d      	ldr	r2, [pc, #244]	; (800d948 <TIM_Base_SetConfig+0x118>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d00b      	beq.n	800d870 <TIM_Base_SetConfig+0x40>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4a3c      	ldr	r2, [pc, #240]	; (800d94c <TIM_Base_SetConfig+0x11c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d007      	beq.n	800d870 <TIM_Base_SetConfig+0x40>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a3b      	ldr	r2, [pc, #236]	; (800d950 <TIM_Base_SetConfig+0x120>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d003      	beq.n	800d870 <TIM_Base_SetConfig+0x40>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a3a      	ldr	r2, [pc, #232]	; (800d954 <TIM_Base_SetConfig+0x124>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d108      	bne.n	800d882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a2f      	ldr	r2, [pc, #188]	; (800d944 <TIM_Base_SetConfig+0x114>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d02b      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d890:	d027      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a2c      	ldr	r2, [pc, #176]	; (800d948 <TIM_Base_SetConfig+0x118>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d023      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a2b      	ldr	r2, [pc, #172]	; (800d94c <TIM_Base_SetConfig+0x11c>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d01f      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a2a      	ldr	r2, [pc, #168]	; (800d950 <TIM_Base_SetConfig+0x120>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d01b      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a29      	ldr	r2, [pc, #164]	; (800d954 <TIM_Base_SetConfig+0x124>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d017      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a28      	ldr	r2, [pc, #160]	; (800d958 <TIM_Base_SetConfig+0x128>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d013      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a27      	ldr	r2, [pc, #156]	; (800d95c <TIM_Base_SetConfig+0x12c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d00f      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a26      	ldr	r2, [pc, #152]	; (800d960 <TIM_Base_SetConfig+0x130>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d00b      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a25      	ldr	r2, [pc, #148]	; (800d964 <TIM_Base_SetConfig+0x134>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d007      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a24      	ldr	r2, [pc, #144]	; (800d968 <TIM_Base_SetConfig+0x138>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d003      	beq.n	800d8e2 <TIM_Base_SetConfig+0xb2>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a23      	ldr	r2, [pc, #140]	; (800d96c <TIM_Base_SetConfig+0x13c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d108      	bne.n	800d8f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	689a      	ldr	r2, [r3, #8]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a0a      	ldr	r2, [pc, #40]	; (800d944 <TIM_Base_SetConfig+0x114>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d003      	beq.n	800d928 <TIM_Base_SetConfig+0xf8>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a0c      	ldr	r2, [pc, #48]	; (800d954 <TIM_Base_SetConfig+0x124>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d103      	bne.n	800d930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	691a      	ldr	r2, [r3, #16]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	615a      	str	r2, [r3, #20]
}
 800d936:	bf00      	nop
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	40010000 	.word	0x40010000
 800d948:	40000400 	.word	0x40000400
 800d94c:	40000800 	.word	0x40000800
 800d950:	40000c00 	.word	0x40000c00
 800d954:	40010400 	.word	0x40010400
 800d958:	40014000 	.word	0x40014000
 800d95c:	40014400 	.word	0x40014400
 800d960:	40014800 	.word	0x40014800
 800d964:	40001800 	.word	0x40001800
 800d968:	40001c00 	.word	0x40001c00
 800d96c:	40002000 	.word	0x40002000

0800d970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d970:	b480      	push	{r7}
 800d972:	b087      	sub	sp, #28
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	f023 0201 	bic.w	r2, r3, #1
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a1b      	ldr	r3, [r3, #32]
 800d98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f023 0303 	bic.w	r3, r3, #3
 800d9a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f023 0302 	bic.w	r3, r3, #2
 800d9b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a20      	ldr	r2, [pc, #128]	; (800da48 <TIM_OC1_SetConfig+0xd8>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d003      	beq.n	800d9d4 <TIM_OC1_SetConfig+0x64>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a1f      	ldr	r2, [pc, #124]	; (800da4c <TIM_OC1_SetConfig+0xdc>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d10c      	bne.n	800d9ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f023 0308 	bic.w	r3, r3, #8
 800d9da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f023 0304 	bic.w	r3, r3, #4
 800d9ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4a15      	ldr	r2, [pc, #84]	; (800da48 <TIM_OC1_SetConfig+0xd8>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d003      	beq.n	800d9fe <TIM_OC1_SetConfig+0x8e>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4a14      	ldr	r2, [pc, #80]	; (800da4c <TIM_OC1_SetConfig+0xdc>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d111      	bne.n	800da22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	4313      	orrs	r3, r2
 800da16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	4313      	orrs	r3, r2
 800da20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	621a      	str	r2, [r3, #32]
}
 800da3c:	bf00      	nop
 800da3e:	371c      	adds	r7, #28
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	40010000 	.word	0x40010000
 800da4c:	40010400 	.word	0x40010400

0800da50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da50:	b480      	push	{r7}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	f023 0210 	bic.w	r2, r3, #16
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	021b      	lsls	r3, r3, #8
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	4313      	orrs	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	f023 0320 	bic.w	r3, r3, #32
 800da9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	011b      	lsls	r3, r3, #4
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a22      	ldr	r2, [pc, #136]	; (800db34 <TIM_OC2_SetConfig+0xe4>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d003      	beq.n	800dab8 <TIM_OC2_SetConfig+0x68>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4a21      	ldr	r2, [pc, #132]	; (800db38 <TIM_OC2_SetConfig+0xe8>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d10d      	bne.n	800dad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dabe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	011b      	lsls	r3, r3, #4
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	4313      	orrs	r3, r2
 800daca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a17      	ldr	r2, [pc, #92]	; (800db34 <TIM_OC2_SetConfig+0xe4>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_OC2_SetConfig+0x94>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a16      	ldr	r2, [pc, #88]	; (800db38 <TIM_OC2_SetConfig+0xe8>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d113      	bne.n	800db0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800daea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	693a      	ldr	r2, [r7, #16]
 800db08:	4313      	orrs	r3, r2
 800db0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	621a      	str	r2, [r3, #32]
}
 800db26:	bf00      	nop
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	40010000 	.word	0x40010000
 800db38:	40010400 	.word	0x40010400

0800db3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a1b      	ldr	r3, [r3, #32]
 800db4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	69db      	ldr	r3, [r3, #28]
 800db62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f023 0303 	bic.w	r3, r3, #3
 800db72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	021b      	lsls	r3, r3, #8
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	4313      	orrs	r3, r2
 800db90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4a21      	ldr	r2, [pc, #132]	; (800dc1c <TIM_OC3_SetConfig+0xe0>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d003      	beq.n	800dba2 <TIM_OC3_SetConfig+0x66>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a20      	ldr	r2, [pc, #128]	; (800dc20 <TIM_OC3_SetConfig+0xe4>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d10d      	bne.n	800dbbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	021b      	lsls	r3, r3, #8
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a16      	ldr	r2, [pc, #88]	; (800dc1c <TIM_OC3_SetConfig+0xe0>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d003      	beq.n	800dbce <TIM_OC3_SetConfig+0x92>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a15      	ldr	r2, [pc, #84]	; (800dc20 <TIM_OC3_SetConfig+0xe4>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d113      	bne.n	800dbf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	011b      	lsls	r3, r3, #4
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	011b      	lsls	r3, r3, #4
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	621a      	str	r2, [r3, #32]
}
 800dc10:	bf00      	nop
 800dc12:	371c      	adds	r7, #28
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	40010000 	.word	0x40010000
 800dc20:	40010400 	.word	0x40010400

0800dc24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	021b      	lsls	r3, r3, #8
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	031b      	lsls	r3, r3, #12
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a12      	ldr	r2, [pc, #72]	; (800dcc8 <TIM_OC4_SetConfig+0xa4>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d003      	beq.n	800dc8c <TIM_OC4_SetConfig+0x68>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a11      	ldr	r2, [pc, #68]	; (800dccc <TIM_OC4_SetConfig+0xa8>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d109      	bne.n	800dca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	019b      	lsls	r3, r3, #6
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	621a      	str	r2, [r3, #32]
}
 800dcba:	bf00      	nop
 800dcbc:	371c      	adds	r7, #28
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	40010000 	.word	0x40010000
 800dccc:	40010400 	.word	0x40010400

0800dcd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f003 031f 	and.w	r3, r3, #31
 800dce2:	2201      	movs	r2, #1
 800dce4:	fa02 f303 	lsl.w	r3, r2, r3
 800dce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6a1a      	ldr	r2, [r3, #32]
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	43db      	mvns	r3, r3
 800dcf2:	401a      	ands	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6a1a      	ldr	r2, [r3, #32]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f003 031f 	and.w	r3, r3, #31
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	fa01 f303 	lsl.w	r3, r1, r3
 800dd08:	431a      	orrs	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	621a      	str	r2, [r3, #32]
}
 800dd0e:	bf00      	nop
 800dd10:	371c      	adds	r7, #28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
	...

0800dd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d101      	bne.n	800dd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd30:	2302      	movs	r3, #2
 800dd32:	e05a      	b.n	800ddea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a21      	ldr	r2, [pc, #132]	; (800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d022      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd80:	d01d      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a1d      	ldr	r2, [pc, #116]	; (800ddfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d018      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a1b      	ldr	r2, [pc, #108]	; (800de00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d013      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a1a      	ldr	r2, [pc, #104]	; (800de04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00e      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a18      	ldr	r2, [pc, #96]	; (800de08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d009      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a17      	ldr	r2, [pc, #92]	; (800de0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d004      	beq.n	800ddbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a15      	ldr	r2, [pc, #84]	; (800de10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d10c      	bne.n	800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	40010000 	.word	0x40010000
 800ddfc:	40000400 	.word	0x40000400
 800de00:	40000800 	.word	0x40000800
 800de04:	40000c00 	.word	0x40000c00
 800de08:	40010400 	.word	0x40010400
 800de0c:	40014000 	.word	0x40014000
 800de10:	40001800 	.word	0x40001800

0800de14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d101      	bne.n	800de30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800de2c:	2302      	movs	r3, #2
 800de2e:	e03d      	b.n	800deac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	4313      	orrs	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	4313      	orrs	r3, r2
 800de52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	4313      	orrs	r3, r2
 800de8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	69db      	ldr	r3, [r3, #28]
 800de96:	4313      	orrs	r3, r2
 800de98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	e03f      	b.n	800df72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7f8 fbb2 	bl	8006670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2224      	movs	r2, #36	; 0x24
 800df10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f829 	bl	800df7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	691a      	ldr	r2, [r3, #16]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	695a      	ldr	r2, [r3, #20]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68da      	ldr	r2, [r3, #12]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2220      	movs	r2, #32
 800df64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2220      	movs	r2, #32
 800df6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	b085      	sub	sp, #20
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68da      	ldr	r2, [r3, #12]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	430a      	orrs	r2, r1
 800df9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	431a      	orrs	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	695b      	ldr	r3, [r3, #20]
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	69db      	ldr	r3, [r3, #28]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dfbe:	f023 030c 	bic.w	r3, r3, #12
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	6812      	ldr	r2, [r2, #0]
 800dfc6:	68f9      	ldr	r1, [r7, #12]
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	699a      	ldr	r2, [r3, #24]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	69db      	ldr	r3, [r3, #28]
 800dfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfea:	f040 818b 	bne.w	800e304 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4ac1      	ldr	r2, [pc, #772]	; (800e2f8 <UART_SetConfig+0x37c>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d005      	beq.n	800e004 <UART_SetConfig+0x88>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4abf      	ldr	r2, [pc, #764]	; (800e2fc <UART_SetConfig+0x380>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	f040 80bd 	bne.w	800e17e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e004:	f7fc fbcc 	bl	800a7a0 <HAL_RCC_GetPCLK2Freq>
 800e008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	461d      	mov	r5, r3
 800e00e:	f04f 0600 	mov.w	r6, #0
 800e012:	46a8      	mov	r8, r5
 800e014:	46b1      	mov	r9, r6
 800e016:	eb18 0308 	adds.w	r3, r8, r8
 800e01a:	eb49 0409 	adc.w	r4, r9, r9
 800e01e:	4698      	mov	r8, r3
 800e020:	46a1      	mov	r9, r4
 800e022:	eb18 0805 	adds.w	r8, r8, r5
 800e026:	eb49 0906 	adc.w	r9, r9, r6
 800e02a:	f04f 0100 	mov.w	r1, #0
 800e02e:	f04f 0200 	mov.w	r2, #0
 800e032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e03a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e03e:	4688      	mov	r8, r1
 800e040:	4691      	mov	r9, r2
 800e042:	eb18 0005 	adds.w	r0, r8, r5
 800e046:	eb49 0106 	adc.w	r1, r9, r6
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	461d      	mov	r5, r3
 800e050:	f04f 0600 	mov.w	r6, #0
 800e054:	196b      	adds	r3, r5, r5
 800e056:	eb46 0406 	adc.w	r4, r6, r6
 800e05a:	461a      	mov	r2, r3
 800e05c:	4623      	mov	r3, r4
 800e05e:	f7f2 fe2b 	bl	8000cb8 <__aeabi_uldivmod>
 800e062:	4603      	mov	r3, r0
 800e064:	460c      	mov	r4, r1
 800e066:	461a      	mov	r2, r3
 800e068:	4ba5      	ldr	r3, [pc, #660]	; (800e300 <UART_SetConfig+0x384>)
 800e06a:	fba3 2302 	umull	r2, r3, r3, r2
 800e06e:	095b      	lsrs	r3, r3, #5
 800e070:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	461d      	mov	r5, r3
 800e078:	f04f 0600 	mov.w	r6, #0
 800e07c:	46a9      	mov	r9, r5
 800e07e:	46b2      	mov	sl, r6
 800e080:	eb19 0309 	adds.w	r3, r9, r9
 800e084:	eb4a 040a 	adc.w	r4, sl, sl
 800e088:	4699      	mov	r9, r3
 800e08a:	46a2      	mov	sl, r4
 800e08c:	eb19 0905 	adds.w	r9, r9, r5
 800e090:	eb4a 0a06 	adc.w	sl, sl, r6
 800e094:	f04f 0100 	mov.w	r1, #0
 800e098:	f04f 0200 	mov.w	r2, #0
 800e09c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0a8:	4689      	mov	r9, r1
 800e0aa:	4692      	mov	sl, r2
 800e0ac:	eb19 0005 	adds.w	r0, r9, r5
 800e0b0:	eb4a 0106 	adc.w	r1, sl, r6
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	461d      	mov	r5, r3
 800e0ba:	f04f 0600 	mov.w	r6, #0
 800e0be:	196b      	adds	r3, r5, r5
 800e0c0:	eb46 0406 	adc.w	r4, r6, r6
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	4623      	mov	r3, r4
 800e0c8:	f7f2 fdf6 	bl	8000cb8 <__aeabi_uldivmod>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b8b      	ldr	r3, [pc, #556]	; (800e300 <UART_SetConfig+0x384>)
 800e0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800e0d8:	095b      	lsrs	r3, r3, #5
 800e0da:	2164      	movs	r1, #100	; 0x64
 800e0dc:	fb01 f303 	mul.w	r3, r1, r3
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	3332      	adds	r3, #50	; 0x32
 800e0e6:	4a86      	ldr	r2, [pc, #536]	; (800e300 <UART_SetConfig+0x384>)
 800e0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ec:	095b      	lsrs	r3, r3, #5
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e0f4:	4498      	add	r8, r3
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	461d      	mov	r5, r3
 800e0fa:	f04f 0600 	mov.w	r6, #0
 800e0fe:	46a9      	mov	r9, r5
 800e100:	46b2      	mov	sl, r6
 800e102:	eb19 0309 	adds.w	r3, r9, r9
 800e106:	eb4a 040a 	adc.w	r4, sl, sl
 800e10a:	4699      	mov	r9, r3
 800e10c:	46a2      	mov	sl, r4
 800e10e:	eb19 0905 	adds.w	r9, r9, r5
 800e112:	eb4a 0a06 	adc.w	sl, sl, r6
 800e116:	f04f 0100 	mov.w	r1, #0
 800e11a:	f04f 0200 	mov.w	r2, #0
 800e11e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e12a:	4689      	mov	r9, r1
 800e12c:	4692      	mov	sl, r2
 800e12e:	eb19 0005 	adds.w	r0, r9, r5
 800e132:	eb4a 0106 	adc.w	r1, sl, r6
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	461d      	mov	r5, r3
 800e13c:	f04f 0600 	mov.w	r6, #0
 800e140:	196b      	adds	r3, r5, r5
 800e142:	eb46 0406 	adc.w	r4, r6, r6
 800e146:	461a      	mov	r2, r3
 800e148:	4623      	mov	r3, r4
 800e14a:	f7f2 fdb5 	bl	8000cb8 <__aeabi_uldivmod>
 800e14e:	4603      	mov	r3, r0
 800e150:	460c      	mov	r4, r1
 800e152:	461a      	mov	r2, r3
 800e154:	4b6a      	ldr	r3, [pc, #424]	; (800e300 <UART_SetConfig+0x384>)
 800e156:	fba3 1302 	umull	r1, r3, r3, r2
 800e15a:	095b      	lsrs	r3, r3, #5
 800e15c:	2164      	movs	r1, #100	; 0x64
 800e15e:	fb01 f303 	mul.w	r3, r1, r3
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	00db      	lsls	r3, r3, #3
 800e166:	3332      	adds	r3, #50	; 0x32
 800e168:	4a65      	ldr	r2, [pc, #404]	; (800e300 <UART_SetConfig+0x384>)
 800e16a:	fba2 2303 	umull	r2, r3, r2, r3
 800e16e:	095b      	lsrs	r3, r3, #5
 800e170:	f003 0207 	and.w	r2, r3, #7
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4442      	add	r2, r8
 800e17a:	609a      	str	r2, [r3, #8]
 800e17c:	e26f      	b.n	800e65e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e17e:	f7fc fafb 	bl	800a778 <HAL_RCC_GetPCLK1Freq>
 800e182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	461d      	mov	r5, r3
 800e188:	f04f 0600 	mov.w	r6, #0
 800e18c:	46a8      	mov	r8, r5
 800e18e:	46b1      	mov	r9, r6
 800e190:	eb18 0308 	adds.w	r3, r8, r8
 800e194:	eb49 0409 	adc.w	r4, r9, r9
 800e198:	4698      	mov	r8, r3
 800e19a:	46a1      	mov	r9, r4
 800e19c:	eb18 0805 	adds.w	r8, r8, r5
 800e1a0:	eb49 0906 	adc.w	r9, r9, r6
 800e1a4:	f04f 0100 	mov.w	r1, #0
 800e1a8:	f04f 0200 	mov.w	r2, #0
 800e1ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e1b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e1b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e1b8:	4688      	mov	r8, r1
 800e1ba:	4691      	mov	r9, r2
 800e1bc:	eb18 0005 	adds.w	r0, r8, r5
 800e1c0:	eb49 0106 	adc.w	r1, r9, r6
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	461d      	mov	r5, r3
 800e1ca:	f04f 0600 	mov.w	r6, #0
 800e1ce:	196b      	adds	r3, r5, r5
 800e1d0:	eb46 0406 	adc.w	r4, r6, r6
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	f7f2 fd6e 	bl	8000cb8 <__aeabi_uldivmod>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	460c      	mov	r4, r1
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4b47      	ldr	r3, [pc, #284]	; (800e300 <UART_SetConfig+0x384>)
 800e1e4:	fba3 2302 	umull	r2, r3, r3, r2
 800e1e8:	095b      	lsrs	r3, r3, #5
 800e1ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	461d      	mov	r5, r3
 800e1f2:	f04f 0600 	mov.w	r6, #0
 800e1f6:	46a9      	mov	r9, r5
 800e1f8:	46b2      	mov	sl, r6
 800e1fa:	eb19 0309 	adds.w	r3, r9, r9
 800e1fe:	eb4a 040a 	adc.w	r4, sl, sl
 800e202:	4699      	mov	r9, r3
 800e204:	46a2      	mov	sl, r4
 800e206:	eb19 0905 	adds.w	r9, r9, r5
 800e20a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e20e:	f04f 0100 	mov.w	r1, #0
 800e212:	f04f 0200 	mov.w	r2, #0
 800e216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e21a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e21e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e222:	4689      	mov	r9, r1
 800e224:	4692      	mov	sl, r2
 800e226:	eb19 0005 	adds.w	r0, r9, r5
 800e22a:	eb4a 0106 	adc.w	r1, sl, r6
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	461d      	mov	r5, r3
 800e234:	f04f 0600 	mov.w	r6, #0
 800e238:	196b      	adds	r3, r5, r5
 800e23a:	eb46 0406 	adc.w	r4, r6, r6
 800e23e:	461a      	mov	r2, r3
 800e240:	4623      	mov	r3, r4
 800e242:	f7f2 fd39 	bl	8000cb8 <__aeabi_uldivmod>
 800e246:	4603      	mov	r3, r0
 800e248:	460c      	mov	r4, r1
 800e24a:	461a      	mov	r2, r3
 800e24c:	4b2c      	ldr	r3, [pc, #176]	; (800e300 <UART_SetConfig+0x384>)
 800e24e:	fba3 1302 	umull	r1, r3, r3, r2
 800e252:	095b      	lsrs	r3, r3, #5
 800e254:	2164      	movs	r1, #100	; 0x64
 800e256:	fb01 f303 	mul.w	r3, r1, r3
 800e25a:	1ad3      	subs	r3, r2, r3
 800e25c:	00db      	lsls	r3, r3, #3
 800e25e:	3332      	adds	r3, #50	; 0x32
 800e260:	4a27      	ldr	r2, [pc, #156]	; (800e300 <UART_SetConfig+0x384>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	095b      	lsrs	r3, r3, #5
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e26e:	4498      	add	r8, r3
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	461d      	mov	r5, r3
 800e274:	f04f 0600 	mov.w	r6, #0
 800e278:	46a9      	mov	r9, r5
 800e27a:	46b2      	mov	sl, r6
 800e27c:	eb19 0309 	adds.w	r3, r9, r9
 800e280:	eb4a 040a 	adc.w	r4, sl, sl
 800e284:	4699      	mov	r9, r3
 800e286:	46a2      	mov	sl, r4
 800e288:	eb19 0905 	adds.w	r9, r9, r5
 800e28c:	eb4a 0a06 	adc.w	sl, sl, r6
 800e290:	f04f 0100 	mov.w	r1, #0
 800e294:	f04f 0200 	mov.w	r2, #0
 800e298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e29c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e2a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e2a4:	4689      	mov	r9, r1
 800e2a6:	4692      	mov	sl, r2
 800e2a8:	eb19 0005 	adds.w	r0, r9, r5
 800e2ac:	eb4a 0106 	adc.w	r1, sl, r6
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	461d      	mov	r5, r3
 800e2b6:	f04f 0600 	mov.w	r6, #0
 800e2ba:	196b      	adds	r3, r5, r5
 800e2bc:	eb46 0406 	adc.w	r4, r6, r6
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4623      	mov	r3, r4
 800e2c4:	f7f2 fcf8 	bl	8000cb8 <__aeabi_uldivmod>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <UART_SetConfig+0x384>)
 800e2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800e2d4:	095b      	lsrs	r3, r3, #5
 800e2d6:	2164      	movs	r1, #100	; 0x64
 800e2d8:	fb01 f303 	mul.w	r3, r1, r3
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	3332      	adds	r3, #50	; 0x32
 800e2e2:	4a07      	ldr	r2, [pc, #28]	; (800e300 <UART_SetConfig+0x384>)
 800e2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e8:	095b      	lsrs	r3, r3, #5
 800e2ea:	f003 0207 	and.w	r2, r3, #7
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4442      	add	r2, r8
 800e2f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e2f6:	e1b2      	b.n	800e65e <UART_SetConfig+0x6e2>
 800e2f8:	40011000 	.word	0x40011000
 800e2fc:	40011400 	.word	0x40011400
 800e300:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4ad7      	ldr	r2, [pc, #860]	; (800e668 <UART_SetConfig+0x6ec>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d005      	beq.n	800e31a <UART_SetConfig+0x39e>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4ad6      	ldr	r2, [pc, #856]	; (800e66c <UART_SetConfig+0x6f0>)
 800e314:	4293      	cmp	r3, r2
 800e316:	f040 80d1 	bne.w	800e4bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e31a:	f7fc fa41 	bl	800a7a0 <HAL_RCC_GetPCLK2Freq>
 800e31e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	469a      	mov	sl, r3
 800e324:	f04f 0b00 	mov.w	fp, #0
 800e328:	46d0      	mov	r8, sl
 800e32a:	46d9      	mov	r9, fp
 800e32c:	eb18 0308 	adds.w	r3, r8, r8
 800e330:	eb49 0409 	adc.w	r4, r9, r9
 800e334:	4698      	mov	r8, r3
 800e336:	46a1      	mov	r9, r4
 800e338:	eb18 080a 	adds.w	r8, r8, sl
 800e33c:	eb49 090b 	adc.w	r9, r9, fp
 800e340:	f04f 0100 	mov.w	r1, #0
 800e344:	f04f 0200 	mov.w	r2, #0
 800e348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e34c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e354:	4688      	mov	r8, r1
 800e356:	4691      	mov	r9, r2
 800e358:	eb1a 0508 	adds.w	r5, sl, r8
 800e35c:	eb4b 0609 	adc.w	r6, fp, r9
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	f04f 0300 	mov.w	r3, #0
 800e36e:	f04f 0400 	mov.w	r4, #0
 800e372:	0094      	lsls	r4, r2, #2
 800e374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e378:	008b      	lsls	r3, r1, #2
 800e37a:	461a      	mov	r2, r3
 800e37c:	4623      	mov	r3, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	4631      	mov	r1, r6
 800e382:	f7f2 fc99 	bl	8000cb8 <__aeabi_uldivmod>
 800e386:	4603      	mov	r3, r0
 800e388:	460c      	mov	r4, r1
 800e38a:	461a      	mov	r2, r3
 800e38c:	4bb8      	ldr	r3, [pc, #736]	; (800e670 <UART_SetConfig+0x6f4>)
 800e38e:	fba3 2302 	umull	r2, r3, r3, r2
 800e392:	095b      	lsrs	r3, r3, #5
 800e394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	469b      	mov	fp, r3
 800e39c:	f04f 0c00 	mov.w	ip, #0
 800e3a0:	46d9      	mov	r9, fp
 800e3a2:	46e2      	mov	sl, ip
 800e3a4:	eb19 0309 	adds.w	r3, r9, r9
 800e3a8:	eb4a 040a 	adc.w	r4, sl, sl
 800e3ac:	4699      	mov	r9, r3
 800e3ae:	46a2      	mov	sl, r4
 800e3b0:	eb19 090b 	adds.w	r9, r9, fp
 800e3b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e3b8:	f04f 0100 	mov.w	r1, #0
 800e3bc:	f04f 0200 	mov.w	r2, #0
 800e3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e3c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e3c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e3cc:	4689      	mov	r9, r1
 800e3ce:	4692      	mov	sl, r2
 800e3d0:	eb1b 0509 	adds.w	r5, fp, r9
 800e3d4:	eb4c 060a 	adc.w	r6, ip, sl
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	f04f 0200 	mov.w	r2, #0
 800e3e2:	f04f 0300 	mov.w	r3, #0
 800e3e6:	f04f 0400 	mov.w	r4, #0
 800e3ea:	0094      	lsls	r4, r2, #2
 800e3ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e3f0:	008b      	lsls	r3, r1, #2
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	4623      	mov	r3, r4
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	f7f2 fc5d 	bl	8000cb8 <__aeabi_uldivmod>
 800e3fe:	4603      	mov	r3, r0
 800e400:	460c      	mov	r4, r1
 800e402:	461a      	mov	r2, r3
 800e404:	4b9a      	ldr	r3, [pc, #616]	; (800e670 <UART_SetConfig+0x6f4>)
 800e406:	fba3 1302 	umull	r1, r3, r3, r2
 800e40a:	095b      	lsrs	r3, r3, #5
 800e40c:	2164      	movs	r1, #100	; 0x64
 800e40e:	fb01 f303 	mul.w	r3, r1, r3
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	3332      	adds	r3, #50	; 0x32
 800e418:	4a95      	ldr	r2, [pc, #596]	; (800e670 <UART_SetConfig+0x6f4>)
 800e41a:	fba2 2303 	umull	r2, r3, r2, r3
 800e41e:	095b      	lsrs	r3, r3, #5
 800e420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e424:	4498      	add	r8, r3
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	469b      	mov	fp, r3
 800e42a:	f04f 0c00 	mov.w	ip, #0
 800e42e:	46d9      	mov	r9, fp
 800e430:	46e2      	mov	sl, ip
 800e432:	eb19 0309 	adds.w	r3, r9, r9
 800e436:	eb4a 040a 	adc.w	r4, sl, sl
 800e43a:	4699      	mov	r9, r3
 800e43c:	46a2      	mov	sl, r4
 800e43e:	eb19 090b 	adds.w	r9, r9, fp
 800e442:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e446:	f04f 0100 	mov.w	r1, #0
 800e44a:	f04f 0200 	mov.w	r2, #0
 800e44e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e45a:	4689      	mov	r9, r1
 800e45c:	4692      	mov	sl, r2
 800e45e:	eb1b 0509 	adds.w	r5, fp, r9
 800e462:	eb4c 060a 	adc.w	r6, ip, sl
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	4619      	mov	r1, r3
 800e46c:	f04f 0200 	mov.w	r2, #0
 800e470:	f04f 0300 	mov.w	r3, #0
 800e474:	f04f 0400 	mov.w	r4, #0
 800e478:	0094      	lsls	r4, r2, #2
 800e47a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e47e:	008b      	lsls	r3, r1, #2
 800e480:	461a      	mov	r2, r3
 800e482:	4623      	mov	r3, r4
 800e484:	4628      	mov	r0, r5
 800e486:	4631      	mov	r1, r6
 800e488:	f7f2 fc16 	bl	8000cb8 <__aeabi_uldivmod>
 800e48c:	4603      	mov	r3, r0
 800e48e:	460c      	mov	r4, r1
 800e490:	461a      	mov	r2, r3
 800e492:	4b77      	ldr	r3, [pc, #476]	; (800e670 <UART_SetConfig+0x6f4>)
 800e494:	fba3 1302 	umull	r1, r3, r3, r2
 800e498:	095b      	lsrs	r3, r3, #5
 800e49a:	2164      	movs	r1, #100	; 0x64
 800e49c:	fb01 f303 	mul.w	r3, r1, r3
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	011b      	lsls	r3, r3, #4
 800e4a4:	3332      	adds	r3, #50	; 0x32
 800e4a6:	4a72      	ldr	r2, [pc, #456]	; (800e670 <UART_SetConfig+0x6f4>)
 800e4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ac:	095b      	lsrs	r3, r3, #5
 800e4ae:	f003 020f 	and.w	r2, r3, #15
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4442      	add	r2, r8
 800e4b8:	609a      	str	r2, [r3, #8]
 800e4ba:	e0d0      	b.n	800e65e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e4bc:	f7fc f95c 	bl	800a778 <HAL_RCC_GetPCLK1Freq>
 800e4c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	469a      	mov	sl, r3
 800e4c6:	f04f 0b00 	mov.w	fp, #0
 800e4ca:	46d0      	mov	r8, sl
 800e4cc:	46d9      	mov	r9, fp
 800e4ce:	eb18 0308 	adds.w	r3, r8, r8
 800e4d2:	eb49 0409 	adc.w	r4, r9, r9
 800e4d6:	4698      	mov	r8, r3
 800e4d8:	46a1      	mov	r9, r4
 800e4da:	eb18 080a 	adds.w	r8, r8, sl
 800e4de:	eb49 090b 	adc.w	r9, r9, fp
 800e4e2:	f04f 0100 	mov.w	r1, #0
 800e4e6:	f04f 0200 	mov.w	r2, #0
 800e4ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e4ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e4f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e4f6:	4688      	mov	r8, r1
 800e4f8:	4691      	mov	r9, r2
 800e4fa:	eb1a 0508 	adds.w	r5, sl, r8
 800e4fe:	eb4b 0609 	adc.w	r6, fp, r9
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4619      	mov	r1, r3
 800e508:	f04f 0200 	mov.w	r2, #0
 800e50c:	f04f 0300 	mov.w	r3, #0
 800e510:	f04f 0400 	mov.w	r4, #0
 800e514:	0094      	lsls	r4, r2, #2
 800e516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e51a:	008b      	lsls	r3, r1, #2
 800e51c:	461a      	mov	r2, r3
 800e51e:	4623      	mov	r3, r4
 800e520:	4628      	mov	r0, r5
 800e522:	4631      	mov	r1, r6
 800e524:	f7f2 fbc8 	bl	8000cb8 <__aeabi_uldivmod>
 800e528:	4603      	mov	r3, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b50      	ldr	r3, [pc, #320]	; (800e670 <UART_SetConfig+0x6f4>)
 800e530:	fba3 2302 	umull	r2, r3, r3, r2
 800e534:	095b      	lsrs	r3, r3, #5
 800e536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	469b      	mov	fp, r3
 800e53e:	f04f 0c00 	mov.w	ip, #0
 800e542:	46d9      	mov	r9, fp
 800e544:	46e2      	mov	sl, ip
 800e546:	eb19 0309 	adds.w	r3, r9, r9
 800e54a:	eb4a 040a 	adc.w	r4, sl, sl
 800e54e:	4699      	mov	r9, r3
 800e550:	46a2      	mov	sl, r4
 800e552:	eb19 090b 	adds.w	r9, r9, fp
 800e556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e55a:	f04f 0100 	mov.w	r1, #0
 800e55e:	f04f 0200 	mov.w	r2, #0
 800e562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e56a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e56e:	4689      	mov	r9, r1
 800e570:	4692      	mov	sl, r2
 800e572:	eb1b 0509 	adds.w	r5, fp, r9
 800e576:	eb4c 060a 	adc.w	r6, ip, sl
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	4619      	mov	r1, r3
 800e580:	f04f 0200 	mov.w	r2, #0
 800e584:	f04f 0300 	mov.w	r3, #0
 800e588:	f04f 0400 	mov.w	r4, #0
 800e58c:	0094      	lsls	r4, r2, #2
 800e58e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e592:	008b      	lsls	r3, r1, #2
 800e594:	461a      	mov	r2, r3
 800e596:	4623      	mov	r3, r4
 800e598:	4628      	mov	r0, r5
 800e59a:	4631      	mov	r1, r6
 800e59c:	f7f2 fb8c 	bl	8000cb8 <__aeabi_uldivmod>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4b32      	ldr	r3, [pc, #200]	; (800e670 <UART_SetConfig+0x6f4>)
 800e5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800e5ac:	095b      	lsrs	r3, r3, #5
 800e5ae:	2164      	movs	r1, #100	; 0x64
 800e5b0:	fb01 f303 	mul.w	r3, r1, r3
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	011b      	lsls	r3, r3, #4
 800e5b8:	3332      	adds	r3, #50	; 0x32
 800e5ba:	4a2d      	ldr	r2, [pc, #180]	; (800e670 <UART_SetConfig+0x6f4>)
 800e5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c0:	095b      	lsrs	r3, r3, #5
 800e5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5c6:	4498      	add	r8, r3
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	469b      	mov	fp, r3
 800e5cc:	f04f 0c00 	mov.w	ip, #0
 800e5d0:	46d9      	mov	r9, fp
 800e5d2:	46e2      	mov	sl, ip
 800e5d4:	eb19 0309 	adds.w	r3, r9, r9
 800e5d8:	eb4a 040a 	adc.w	r4, sl, sl
 800e5dc:	4699      	mov	r9, r3
 800e5de:	46a2      	mov	sl, r4
 800e5e0:	eb19 090b 	adds.w	r9, r9, fp
 800e5e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e5e8:	f04f 0100 	mov.w	r1, #0
 800e5ec:	f04f 0200 	mov.w	r2, #0
 800e5f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e5f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e5fc:	4689      	mov	r9, r1
 800e5fe:	4692      	mov	sl, r2
 800e600:	eb1b 0509 	adds.w	r5, fp, r9
 800e604:	eb4c 060a 	adc.w	r6, ip, sl
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	4619      	mov	r1, r3
 800e60e:	f04f 0200 	mov.w	r2, #0
 800e612:	f04f 0300 	mov.w	r3, #0
 800e616:	f04f 0400 	mov.w	r4, #0
 800e61a:	0094      	lsls	r4, r2, #2
 800e61c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e620:	008b      	lsls	r3, r1, #2
 800e622:	461a      	mov	r2, r3
 800e624:	4623      	mov	r3, r4
 800e626:	4628      	mov	r0, r5
 800e628:	4631      	mov	r1, r6
 800e62a:	f7f2 fb45 	bl	8000cb8 <__aeabi_uldivmod>
 800e62e:	4603      	mov	r3, r0
 800e630:	460c      	mov	r4, r1
 800e632:	461a      	mov	r2, r3
 800e634:	4b0e      	ldr	r3, [pc, #56]	; (800e670 <UART_SetConfig+0x6f4>)
 800e636:	fba3 1302 	umull	r1, r3, r3, r2
 800e63a:	095b      	lsrs	r3, r3, #5
 800e63c:	2164      	movs	r1, #100	; 0x64
 800e63e:	fb01 f303 	mul.w	r3, r1, r3
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	011b      	lsls	r3, r3, #4
 800e646:	3332      	adds	r3, #50	; 0x32
 800e648:	4a09      	ldr	r2, [pc, #36]	; (800e670 <UART_SetConfig+0x6f4>)
 800e64a:	fba2 2303 	umull	r2, r3, r2, r3
 800e64e:	095b      	lsrs	r3, r3, #5
 800e650:	f003 020f 	and.w	r2, r3, #15
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4442      	add	r2, r8
 800e65a:	609a      	str	r2, [r3, #8]
}
 800e65c:	e7ff      	b.n	800e65e <UART_SetConfig+0x6e2>
 800e65e:	bf00      	nop
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e668:	40011000 	.word	0x40011000
 800e66c:	40011400 	.word	0x40011400
 800e670:	51eb851f 	.word	0x51eb851f

0800e674 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e674:	b084      	sub	sp, #16
 800e676:	b480      	push	{r7}
 800e678:	b085      	sub	sp, #20
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	f107 001c 	add.w	r0, r7, #28
 800e682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e68a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e68c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e68e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e692:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e696:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e69a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e69e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e6ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3714      	adds	r7, #20
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	b004      	add	sp, #16
 800e6c8:	4770      	bx	lr

0800e6ca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e706:	b580      	push	{r7, lr}
 800e708:	b082      	sub	sp, #8
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2203      	movs	r2, #3
 800e712:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e714:	2002      	movs	r0, #2
 800e716:	f7f9 fbdd 	bl	8007ed4 <HAL_Delay>
  
  return HAL_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f003 0303 	and.w	r3, r3, #3
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e75e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e764:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e76a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	4313      	orrs	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e77a:	f023 030f 	bic.w	r3, r3, #15
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	431a      	orrs	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	b2db      	uxtb	r3, r3
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b085      	sub	sp, #20
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	3314      	adds	r3, #20
 800e7bc:	461a      	mov	r2, r3
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
}  
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3714      	adds	r7, #20
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e7fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e800:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e806:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e812:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	431a      	orrs	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e81e:	2300      	movs	r3, #0

}
 800e820:	4618      	mov	r0, r3
 800e822:	3714      	adds	r7, #20
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e83a:	2310      	movs	r3, #16
 800e83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e83e:	2340      	movs	r3, #64	; 0x40
 800e840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e842:	2300      	movs	r3, #0
 800e844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e84c:	f107 0308 	add.w	r3, r7, #8
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7ff ff74 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e858:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85c:	2110      	movs	r1, #16
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fa40 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e866:	69fb      	ldr	r3, [r7, #28]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3720      	adds	r7, #32
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e87e:	2311      	movs	r3, #17
 800e880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e882:	2340      	movs	r3, #64	; 0x40
 800e884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e886:	2300      	movs	r3, #0
 800e888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e890:	f107 0308 	add.w	r3, r7, #8
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff ff52 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8a0:	2111      	movs	r1, #17
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fa1e 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8aa:	69fb      	ldr	r3, [r7, #28]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e8c2:	2312      	movs	r3, #18
 800e8c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8c6:	2340      	movs	r3, #64	; 0x40
 800e8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8d4:	f107 0308 	add.w	r3, r7, #8
 800e8d8:	4619      	mov	r1, r3
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff ff30 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8e4:	2112      	movs	r1, #18
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f9fc 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b088      	sub	sp, #32
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e906:	2318      	movs	r3, #24
 800e908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e90a:	2340      	movs	r3, #64	; 0x40
 800e90c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e918:	f107 0308 	add.w	r3, r7, #8
 800e91c:	4619      	mov	r1, r3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7ff ff0e 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e924:	f241 3288 	movw	r2, #5000	; 0x1388
 800e928:	2118      	movs	r1, #24
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f9da 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e932:	69fb      	ldr	r3, [r7, #28]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3720      	adds	r7, #32
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b088      	sub	sp, #32
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e94a:	2319      	movs	r3, #25
 800e94c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e94e:	2340      	movs	r3, #64	; 0x40
 800e950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e952:	2300      	movs	r3, #0
 800e954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e95a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e95c:	f107 0308 	add.w	r3, r7, #8
 800e960:	4619      	mov	r1, r3
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff feec 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e968:	f241 3288 	movw	r2, #5000	; 0x1388
 800e96c:	2119      	movs	r1, #25
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f9b8 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e976:	69fb      	ldr	r3, [r7, #28]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3720      	adds	r7, #32
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e988:	2300      	movs	r3, #0
 800e98a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e98c:	230c      	movs	r3, #12
 800e98e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e990:	2340      	movs	r3, #64	; 0x40
 800e992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e99c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff fecb 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e9aa:	4a05      	ldr	r2, [pc, #20]	; (800e9c0 <SDMMC_CmdStopTransfer+0x40>)
 800e9ac:	210c      	movs	r1, #12
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f998 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b6:	69fb      	ldr	r3, [r7, #28]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3720      	adds	r7, #32
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	05f5e100 	.word	0x05f5e100

0800e9c4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b08a      	sub	sp, #40	; 0x28
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e9d4:	2307      	movs	r3, #7
 800e9d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9d8:	2340      	movs	r3, #64	; 0x40
 800e9da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9e4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9e6:	f107 0310 	add.w	r3, r7, #16
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff fea7 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e9f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9f6:	2107      	movs	r1, #7
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f000 f973 	bl	800ece4 <SDMMC_GetCmdResp1>
 800e9fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3728      	adds	r7, #40	; 0x28
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b088      	sub	sp, #32
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ea12:	2300      	movs	r3, #0
 800ea14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ea16:	2300      	movs	r3, #0
 800ea18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea28:	f107 0308 	add.w	r3, r7, #8
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff fe86 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f92d 	bl	800ec94 <SDMMC_GetCmdError>
 800ea3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3720      	adds	r7, #32
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b088      	sub	sp, #32
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ea4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ea52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ea54:	2308      	movs	r3, #8
 800ea56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea58:	2340      	movs	r3, #64	; 0x40
 800ea5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea66:	f107 0308 	add.w	r3, r7, #8
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fe67 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fb16 	bl	800f0a4 <SDMMC_GetCmdResp7>
 800ea78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ea92:	2337      	movs	r3, #55	; 0x37
 800ea94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea96:	2340      	movs	r3, #64	; 0x40
 800ea98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaa4:	f107 0308 	add.w	r3, r7, #8
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff fe48 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eab4:	2137      	movs	r1, #55	; 0x37
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f914 	bl	800ece4 <SDMMC_GetCmdResp1>
 800eabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eabe:	69fb      	ldr	r3, [r7, #28]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3720      	adds	r7, #32
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ead8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eade:	2329      	movs	r3, #41	; 0x29
 800eae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eae2:	2340      	movs	r3, #64	; 0x40
 800eae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaf0:	f107 0308 	add.w	r3, r7, #8
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff fe22 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fa23 	bl	800ef48 <SDMMC_GetCmdResp3>
 800eb02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb04:	69fb      	ldr	r3, [r7, #28]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b088      	sub	sp, #32
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eb1c:	2306      	movs	r3, #6
 800eb1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb20:	2340      	movs	r3, #64	; 0x40
 800eb22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb24:	2300      	movs	r3, #0
 800eb26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb2e:	f107 0308 	add.w	r3, r7, #8
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff fe03 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800eb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb3e:	2106      	movs	r1, #6
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f8cf 	bl	800ece4 <SDMMC_GetCmdResp1>
 800eb46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb48:	69fb      	ldr	r3, [r7, #28]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3720      	adds	r7, #32
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b088      	sub	sp, #32
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eb5e:	2333      	movs	r3, #51	; 0x33
 800eb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb62:	2340      	movs	r3, #64	; 0x40
 800eb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb70:	f107 0308 	add.w	r3, r7, #8
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff fde2 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800eb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb80:	2133      	movs	r1, #51	; 0x33
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f8ae 	bl	800ece4 <SDMMC_GetCmdResp1>
 800eb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb8a:	69fb      	ldr	r3, [r7, #28]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eba0:	2302      	movs	r3, #2
 800eba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eba4:	23c0      	movs	r3, #192	; 0xc0
 800eba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebb2:	f107 0308 	add.w	r3, r7, #8
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff fdc1 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f97c 	bl	800eebc <SDMMC_GetCmdResp2>
 800ebc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3720      	adds	r7, #32
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b088      	sub	sp, #32
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ebde:	2309      	movs	r3, #9
 800ebe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ebe2:	23c0      	movs	r3, #192	; 0xc0
 800ebe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebf0:	f107 0308 	add.w	r3, r7, #8
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7ff fda2 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f95d 	bl	800eebc <SDMMC_GetCmdResp2>
 800ec02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec04:	69fb      	ldr	r3, [r7, #28]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b088      	sub	sp, #32
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec20:	2340      	movs	r3, #64	; 0x40
 800ec22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec24:	2300      	movs	r3, #0
 800ec26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec2e:	f107 0308 	add.w	r3, r7, #8
 800ec32:	4619      	mov	r1, r3
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff fd83 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	2103      	movs	r1, #3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 f9bc 	bl	800efbc <SDMMC_GetCmdResp6>
 800ec44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec46:	69fb      	ldr	r3, [r7, #28]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3720      	adds	r7, #32
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ec5e:	230d      	movs	r3, #13
 800ec60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec62:	2340      	movs	r3, #64	; 0x40
 800ec64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec70:	f107 0308 	add.w	r3, r7, #8
 800ec74:	4619      	mov	r1, r3
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7ff fd62 	bl	800e740 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ec7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec80:	210d      	movs	r1, #13
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f82e 	bl	800ece4 <SDMMC_GetCmdResp1>
 800ec88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec8a:	69fb      	ldr	r3, [r7, #28]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ec94:	b490      	push	{r4, r7}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec9c:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <SDMMC_GetCmdError+0x48>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a0f      	ldr	r2, [pc, #60]	; (800ece0 <SDMMC_GetCmdError+0x4c>)
 800eca2:	fba2 2303 	umull	r2, r3, r2, r3
 800eca6:	0a5b      	lsrs	r3, r3, #9
 800eca8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ecb0:	4623      	mov	r3, r4
 800ecb2:	1e5c      	subs	r4, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ecb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ecbc:	e009      	b.n	800ecd2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0f2      	beq.n	800ecb0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	22c5      	movs	r2, #197	; 0xc5
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bc90      	pop	{r4, r7}
 800ecda:	4770      	bx	lr
 800ecdc:	20000000 	.word	0x20000000
 800ece0:	10624dd3 	.word	0x10624dd3

0800ece4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ece4:	b590      	push	{r4, r7, lr}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	460b      	mov	r3, r1
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ecf2:	4b6f      	ldr	r3, [pc, #444]	; (800eeb0 <SDMMC_GetCmdResp1+0x1cc>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a6f      	ldr	r2, [pc, #444]	; (800eeb4 <SDMMC_GetCmdResp1+0x1d0>)
 800ecf8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecfc:	0a5b      	lsrs	r3, r3, #9
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ed04:	4623      	mov	r3, r4
 800ed06:	1e5c      	subs	r4, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed10:	e0c9      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed16:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0f0      	beq.n	800ed04 <SDMMC_GetCmdResp1+0x20>
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1eb      	bne.n	800ed04 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed30:	f003 0304 	and.w	r3, r3, #4
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d004      	beq.n	800ed42 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2204      	movs	r2, #4
 800ed3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed3e:	2304      	movs	r3, #4
 800ed40:	e0b1      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2201      	movs	r2, #1
 800ed52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed54:	2301      	movs	r3, #1
 800ed56:	e0a6      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	22c5      	movs	r2, #197	; 0xc5
 800ed5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7ff fd18 	bl	800e794 <SDIO_GetCommandResponse>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	7afb      	ldrb	r3, [r7, #11]
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d001      	beq.n	800ed72 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e099      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ed72:	2100      	movs	r1, #0
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff fd1a 	bl	800e7ae <SDIO_GetResponse>
 800ed7a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	4b4e      	ldr	r3, [pc, #312]	; (800eeb8 <SDMMC_GetCmdResp1+0x1d4>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ed86:	2300      	movs	r3, #0
 800ed88:	e08d      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	da02      	bge.n	800ed96 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ed90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ed94:	e087      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eda0:	2340      	movs	r3, #64	; 0x40
 800eda2:	e080      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800edae:	2380      	movs	r3, #128	; 0x80
 800edb0:	e079      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800edbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edc0:	e071      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800edcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edd0:	e069      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede0:	e061      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800edec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800edf0:	e059      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800edfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee00:	e051      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ee0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee10:	e049      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ee1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ee20:	e041      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ee2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee30:	e039      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ee3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ee40:	e031      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ee4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ee50:	e029      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ee5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ee60:	e021      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ee6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee70:	e019      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ee80:	e011      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ee8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ee90:	e009      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	f003 0308 	and.w	r3, r3, #8
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ee9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eea0:	e001      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	371c      	adds	r7, #28
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd90      	pop	{r4, r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000000 	.word	0x20000000
 800eeb4:	10624dd3 	.word	0x10624dd3
 800eeb8:	fdffe008 	.word	0xfdffe008

0800eebc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800eebc:	b490      	push	{r4, r7}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eec4:	4b1e      	ldr	r3, [pc, #120]	; (800ef40 <SDMMC_GetCmdResp2+0x84>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a1e      	ldr	r2, [pc, #120]	; (800ef44 <SDMMC_GetCmdResp2+0x88>)
 800eeca:	fba2 2303 	umull	r2, r3, r2, r3
 800eece:	0a5b      	lsrs	r3, r3, #9
 800eed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eed4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eed8:	4623      	mov	r3, r4
 800eeda:	1e5c      	subs	r4, r3, #1
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d102      	bne.n	800eee6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eee4:	e026      	b.n	800ef34 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0f0      	beq.n	800eed8 <SDMMC_GetCmdResp2+0x1c>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1eb      	bne.n	800eed8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef04:	f003 0304 	and.w	r3, r3, #4
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d004      	beq.n	800ef16 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2204      	movs	r2, #4
 800ef10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef12:	2304      	movs	r3, #4
 800ef14:	e00e      	b.n	800ef34 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d004      	beq.n	800ef2c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e003      	b.n	800ef34 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	22c5      	movs	r2, #197	; 0xc5
 800ef30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bc90      	pop	{r4, r7}
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	20000000 	.word	0x20000000
 800ef44:	10624dd3 	.word	0x10624dd3

0800ef48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ef48:	b490      	push	{r4, r7}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef50:	4b18      	ldr	r3, [pc, #96]	; (800efb4 <SDMMC_GetCmdResp3+0x6c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a18      	ldr	r2, [pc, #96]	; (800efb8 <SDMMC_GetCmdResp3+0x70>)
 800ef56:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5a:	0a5b      	lsrs	r3, r3, #9
 800ef5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ef64:	4623      	mov	r3, r4
 800ef66:	1e5c      	subs	r4, r3, #1
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d102      	bne.n	800ef72 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef70:	e01b      	b.n	800efaa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d0f0      	beq.n	800ef64 <SDMMC_GetCmdResp3+0x1c>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1eb      	bne.n	800ef64 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef90:	f003 0304 	and.w	r3, r3, #4
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2204      	movs	r2, #4
 800ef9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef9e:	2304      	movs	r3, #4
 800efa0:	e003      	b.n	800efaa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	22c5      	movs	r2, #197	; 0xc5
 800efa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bc90      	pop	{r4, r7}
 800efb2:	4770      	bx	lr
 800efb4:	20000000 	.word	0x20000000
 800efb8:	10624dd3 	.word	0x10624dd3

0800efbc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800efbc:	b590      	push	{r4, r7, lr}
 800efbe:	b087      	sub	sp, #28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	460b      	mov	r3, r1
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800efca:	4b34      	ldr	r3, [pc, #208]	; (800f09c <SDMMC_GetCmdResp6+0xe0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4a34      	ldr	r2, [pc, #208]	; (800f0a0 <SDMMC_GetCmdResp6+0xe4>)
 800efd0:	fba2 2303 	umull	r2, r3, r2, r3
 800efd4:	0a5b      	lsrs	r3, r3, #9
 800efd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800efda:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800efde:	4623      	mov	r3, r4
 800efe0:	1e5c      	subs	r4, r3, #1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d102      	bne.n	800efec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800efea:	e052      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d0f0      	beq.n	800efde <SDMMC_GetCmdResp6+0x22>
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1eb      	bne.n	800efde <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f00a:	f003 0304 	and.w	r3, r3, #4
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2204      	movs	r2, #4
 800f016:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f018:	2304      	movs	r3, #4
 800f01a:	e03a      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b00      	cmp	r3, #0
 800f026:	d004      	beq.n	800f032 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2201      	movs	r2, #1
 800f02c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f02e:	2301      	movs	r3, #1
 800f030:	e02f      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7ff fbae 	bl	800e794 <SDIO_GetCommandResponse>
 800f038:	4603      	mov	r3, r0
 800f03a:	461a      	mov	r2, r3
 800f03c:	7afb      	ldrb	r3, [r7, #11]
 800f03e:	4293      	cmp	r3, r2
 800f040:	d001      	beq.n	800f046 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f042:	2301      	movs	r3, #1
 800f044:	e025      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	22c5      	movs	r2, #197	; 0xc5
 800f04a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f04c:	2100      	movs	r1, #0
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7ff fbad 	bl	800e7ae <SDIO_GetResponse>
 800f054:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d106      	bne.n	800f06e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	0c1b      	lsrs	r3, r3, #16
 800f064:	b29a      	uxth	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f06a:	2300      	movs	r3, #0
 800f06c:	e011      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f074:	2b00      	cmp	r3, #0
 800f076:	d002      	beq.n	800f07e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f07c:	e009      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f084:	2b00      	cmp	r3, #0
 800f086:	d002      	beq.n	800f08e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f08c:	e001      	b.n	800f092 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f08e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f092:	4618      	mov	r0, r3
 800f094:	371c      	adds	r7, #28
 800f096:	46bd      	mov	sp, r7
 800f098:	bd90      	pop	{r4, r7, pc}
 800f09a:	bf00      	nop
 800f09c:	20000000 	.word	0x20000000
 800f0a0:	10624dd3 	.word	0x10624dd3

0800f0a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f0a4:	b490      	push	{r4, r7}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0ac:	4b21      	ldr	r3, [pc, #132]	; (800f134 <SDMMC_GetCmdResp7+0x90>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a21      	ldr	r2, [pc, #132]	; (800f138 <SDMMC_GetCmdResp7+0x94>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	0a5b      	lsrs	r3, r3, #9
 800f0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f0c0:	4623      	mov	r3, r4
 800f0c2:	1e5c      	subs	r4, r3, #1
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d102      	bne.n	800f0ce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0cc:	e02c      	b.n	800f128 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d0f0      	beq.n	800f0c0 <SDMMC_GetCmdResp7+0x1c>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1eb      	bne.n	800f0c0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d004      	beq.n	800f0fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2204      	movs	r2, #4
 800f0f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0fa:	2304      	movs	r3, #4
 800f0fc:	e014      	b.n	800f128 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b00      	cmp	r3, #0
 800f108:	d004      	beq.n	800f114 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f110:	2301      	movs	r3, #1
 800f112:	e009      	b.n	800f128 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2240      	movs	r2, #64	; 0x40
 800f124:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f126:	2300      	movs	r3, #0
  
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bc90      	pop	{r4, r7}
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20000000 	.word	0x20000000
 800f138:	10624dd3 	.word	0x10624dd3

0800f13c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f140:	4904      	ldr	r1, [pc, #16]	; (800f154 <MX_FATFS_Init+0x18>)
 800f142:	4805      	ldr	r0, [pc, #20]	; (800f158 <MX_FATFS_Init+0x1c>)
 800f144:	f003 fb9c 	bl	8012880 <FATFS_LinkDriver>
 800f148:	4603      	mov	r3, r0
 800f14a:	461a      	mov	r2, r3
 800f14c:	4b03      	ldr	r3, [pc, #12]	; (800f15c <MX_FATFS_Init+0x20>)
 800f14e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f150:	bf00      	nop
 800f152:	bd80      	pop	{r7, pc}
 800f154:	2003edc8 	.word	0x2003edc8
 800f158:	080182f8 	.word	0x080182f8
 800f15c:	2003edc4 	.word	0x2003edc4

0800f160 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f16a:	f000 f896 	bl	800f29a <BSP_SD_IsDetected>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b01      	cmp	r3, #1
 800f172:	d001      	beq.n	800f178 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e012      	b.n	800f19e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f178:	480b      	ldr	r0, [pc, #44]	; (800f1a8 <BSP_SD_Init+0x48>)
 800f17a:	f7fb ffa5 	bl	800b0c8 <HAL_SD_Init>
 800f17e:	4603      	mov	r3, r0
 800f180:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d109      	bne.n	800f19c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f18c:	4806      	ldr	r0, [pc, #24]	; (800f1a8 <BSP_SD_Init+0x48>)
 800f18e:	f7fc fd4f 	bl	800bc30 <HAL_SD_ConfigWideBusOperation>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f19c:	79fb      	ldrb	r3, [r7, #7]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	2003ebc0 	.word	0x2003ebc0

0800f1ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	68f9      	ldr	r1, [r7, #12]
 800f1c2:	4806      	ldr	r0, [pc, #24]	; (800f1dc <BSP_SD_ReadBlocks_DMA+0x30>)
 800f1c4:	f7fc f810 	bl	800b1e8 <HAL_SD_ReadBlocks_DMA>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3718      	adds	r7, #24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	2003ebc0 	.word	0x2003ebc0

0800f1e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	68f9      	ldr	r1, [r7, #12]
 800f1f6:	4806      	ldr	r0, [pc, #24]	; (800f210 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f1f8:	f7fc f8de 	bl	800b3b8 <HAL_SD_WriteBlocks_DMA>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f206:	7dfb      	ldrb	r3, [r7, #23]
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	2003ebc0 	.word	0x2003ebc0

0800f214 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f218:	4805      	ldr	r0, [pc, #20]	; (800f230 <BSP_SD_GetCardState+0x1c>)
 800f21a:	f7fc fd85 	bl	800bd28 <HAL_SD_GetCardState>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b04      	cmp	r3, #4
 800f222:	bf14      	ite	ne
 800f224:	2301      	movne	r3, #1
 800f226:	2300      	moveq	r3, #0
 800f228:	b2db      	uxtb	r3, r3
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	2003ebc0 	.word	0x2003ebc0

0800f234 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	4803      	ldr	r0, [pc, #12]	; (800f24c <BSP_SD_GetCardInfo+0x18>)
 800f240:	f7fc fcca 	bl	800bbd8 <HAL_SD_GetCardInfo>
}
 800f244:	bf00      	nop
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	2003ebc0 	.word	0x2003ebc0

0800f250 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f258:	f000 f818 	bl	800f28c <BSP_SD_AbortCallback>
}
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f26c:	f000 f9a8 	bl	800f5c0 <BSP_SD_WriteCpltCallback>
}
 800f270:	bf00      	nop
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f280:	f000 f9aa 	bl	800f5d8 <BSP_SD_ReadCpltCallback>
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0

}
 800f290:	bf00      	nop
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f2a4:	f000 f80c 	bl	800f2c0 <BSP_PlatformIsDetected>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	b2db      	uxtb	r3, r3
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f2ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f2ce:	4806      	ldr	r0, [pc, #24]	; (800f2e8 <BSP_PlatformIsDetected+0x28>)
 800f2d0:	f7fa f87e 	bl	80093d0 <HAL_GPIO_ReadPin>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f2de:	79fb      	ldrb	r3, [r7, #7]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	40020000 	.word	0x40020000

0800f2ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f2f4:	f7f8 fde2 	bl	8007ebc <HAL_GetTick>
 800f2f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f2fa:	e006      	b.n	800f30a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2fc:	f7ff ff8a 	bl	800f214 <BSP_SD_GetCardState>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f306:	2300      	movs	r3, #0
 800f308:	e009      	b.n	800f31e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f30a:	f7f8 fdd7 	bl	8007ebc <HAL_GetTick>
 800f30e:	4602      	mov	r2, r0
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	1ad3      	subs	r3, r2, r3
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	429a      	cmp	r2, r3
 800f318:	d8f0      	bhi.n	800f2fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f31a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f332:	4b0b      	ldr	r3, [pc, #44]	; (800f360 <SD_CheckStatus+0x38>)
 800f334:	2201      	movs	r2, #1
 800f336:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f338:	f7ff ff6c 	bl	800f214 <BSP_SD_GetCardState>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d107      	bne.n	800f352 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f342:	4b07      	ldr	r3, [pc, #28]	; (800f360 <SD_CheckStatus+0x38>)
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	f023 0301 	bic.w	r3, r3, #1
 800f34c:	b2da      	uxtb	r2, r3
 800f34e:	4b04      	ldr	r3, [pc, #16]	; (800f360 <SD_CheckStatus+0x38>)
 800f350:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f352:	4b03      	ldr	r3, [pc, #12]	; (800f360 <SD_CheckStatus+0x38>)
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	b2db      	uxtb	r3, r3
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	20000009 	.word	0x20000009

0800f364 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f36e:	f7ff fef7 	bl	800f160 <BSP_SD_Init>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d107      	bne.n	800f388 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f378:	79fb      	ldrb	r3, [r7, #7]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff ffd4 	bl	800f328 <SD_CheckStatus>
 800f380:	4603      	mov	r3, r0
 800f382:	461a      	mov	r2, r3
 800f384:	4b04      	ldr	r3, [pc, #16]	; (800f398 <SD_initialize+0x34>)
 800f386:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f388:	4b03      	ldr	r3, [pc, #12]	; (800f398 <SD_initialize+0x34>)
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	b2db      	uxtb	r3, r3
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20000009 	.word	0x20000009

0800f39c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff ffbd 	bl	800f328 <SD_CheckStatus>
 800f3ae:	4603      	mov	r3, r0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60b9      	str	r1, [r7, #8]
 800f3c0:	607a      	str	r2, [r7, #4]
 800f3c2:	603b      	str	r3, [r7, #0]
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f3cc:	f247 5030 	movw	r0, #30000	; 0x7530
 800f3d0:	f7ff ff8c 	bl	800f2ec <SD_CheckStatusWithTimeout>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	da01      	bge.n	800f3de <SD_read+0x26>
  {
    return res;
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
 800f3dc:	e03b      	b.n	800f456 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	68b8      	ldr	r0, [r7, #8]
 800f3e4:	f7ff fee2 	bl	800f1ac <BSP_SD_ReadBlocks_DMA>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d132      	bne.n	800f454 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f3ee:	4b1c      	ldr	r3, [pc, #112]	; (800f460 <SD_read+0xa8>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f3f4:	f7f8 fd62 	bl	8007ebc <HAL_GetTick>
 800f3f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f3fa:	bf00      	nop
 800f3fc:	4b18      	ldr	r3, [pc, #96]	; (800f460 <SD_read+0xa8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d108      	bne.n	800f416 <SD_read+0x5e>
 800f404:	f7f8 fd5a 	bl	8007ebc <HAL_GetTick>
 800f408:	4602      	mov	r2, r0
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	f247 522f 	movw	r2, #29999	; 0x752f
 800f412:	4293      	cmp	r3, r2
 800f414:	d9f2      	bls.n	800f3fc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f416:	4b12      	ldr	r3, [pc, #72]	; (800f460 <SD_read+0xa8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d102      	bne.n	800f424 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f41e:	2301      	movs	r3, #1
 800f420:	75fb      	strb	r3, [r7, #23]
 800f422:	e017      	b.n	800f454 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f424:	4b0e      	ldr	r3, [pc, #56]	; (800f460 <SD_read+0xa8>)
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f42a:	f7f8 fd47 	bl	8007ebc <HAL_GetTick>
 800f42e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f430:	e007      	b.n	800f442 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f432:	f7ff feef 	bl	800f214 <BSP_SD_GetCardState>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d102      	bne.n	800f442 <SD_read+0x8a>
          {
            res = RES_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f440:	e008      	b.n	800f454 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f442:	f7f8 fd3b 	bl	8007ebc <HAL_GetTick>
 800f446:	4602      	mov	r2, r0
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	f247 522f 	movw	r2, #29999	; 0x752f
 800f450:	4293      	cmp	r3, r2
 800f452:	d9ee      	bls.n	800f432 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f454:	7dfb      	ldrb	r3, [r7, #23]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	2003c45c 	.word	0x2003c45c

0800f464 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60b9      	str	r1, [r7, #8]
 800f46c:	607a      	str	r2, [r7, #4]
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f478:	4b24      	ldr	r3, [pc, #144]	; (800f50c <SD_write+0xa8>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f47e:	f247 5030 	movw	r0, #30000	; 0x7530
 800f482:	f7ff ff33 	bl	800f2ec <SD_CheckStatusWithTimeout>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	da01      	bge.n	800f490 <SD_write+0x2c>
  {
    return res;
 800f48c:	7dfb      	ldrb	r3, [r7, #23]
 800f48e:	e038      	b.n	800f502 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	6879      	ldr	r1, [r7, #4]
 800f494:	68b8      	ldr	r0, [r7, #8]
 800f496:	f7ff fea3 	bl	800f1e0 <BSP_SD_WriteBlocks_DMA>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d12f      	bne.n	800f500 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f4a0:	f7f8 fd0c 	bl	8007ebc <HAL_GetTick>
 800f4a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f4a6:	bf00      	nop
 800f4a8:	4b18      	ldr	r3, [pc, #96]	; (800f50c <SD_write+0xa8>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d108      	bne.n	800f4c2 <SD_write+0x5e>
 800f4b0:	f7f8 fd04 	bl	8007ebc <HAL_GetTick>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d9f2      	bls.n	800f4a8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f4c2:	4b12      	ldr	r3, [pc, #72]	; (800f50c <SD_write+0xa8>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d102      	bne.n	800f4d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	75fb      	strb	r3, [r7, #23]
 800f4ce:	e017      	b.n	800f500 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f4d0:	4b0e      	ldr	r3, [pc, #56]	; (800f50c <SD_write+0xa8>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f4d6:	f7f8 fcf1 	bl	8007ebc <HAL_GetTick>
 800f4da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f4dc:	e007      	b.n	800f4ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f4de:	f7ff fe99 	bl	800f214 <BSP_SD_GetCardState>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <SD_write+0x8a>
          {
            res = RES_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	75fb      	strb	r3, [r7, #23]
            break;
 800f4ec:	e008      	b.n	800f500 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f4ee:	f7f8 fce5 	bl	8007ebc <HAL_GetTick>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d9ee      	bls.n	800f4de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f500:	7dfb      	ldrb	r3, [r7, #23]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	2003c458 	.word	0x2003c458

0800f510 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b08c      	sub	sp, #48	; 0x30
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	603a      	str	r2, [r7, #0]
 800f51a:	71fb      	strb	r3, [r7, #7]
 800f51c:	460b      	mov	r3, r1
 800f51e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f526:	4b25      	ldr	r3, [pc, #148]	; (800f5bc <SD_ioctl+0xac>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <SD_ioctl+0x28>
 800f534:	2303      	movs	r3, #3
 800f536:	e03c      	b.n	800f5b2 <SD_ioctl+0xa2>

  switch (cmd)
 800f538:	79bb      	ldrb	r3, [r7, #6]
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	d834      	bhi.n	800f5a8 <SD_ioctl+0x98>
 800f53e:	a201      	add	r2, pc, #4	; (adr r2, 800f544 <SD_ioctl+0x34>)
 800f540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f544:	0800f555 	.word	0x0800f555
 800f548:	0800f55d 	.word	0x0800f55d
 800f54c:	0800f575 	.word	0x0800f575
 800f550:	0800f58f 	.word	0x0800f58f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f55a:	e028      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f55c:	f107 030c 	add.w	r3, r7, #12
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff fe67 	bl	800f234 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f572:	e01c      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f574:	f107 030c 	add.w	r3, r7, #12
 800f578:	4618      	mov	r0, r3
 800f57a:	f7ff fe5b 	bl	800f234 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	b29a      	uxth	r2, r3
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f58c:	e00f      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f58e:	f107 030c 	add.w	r3, r7, #12
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff fe4e 	bl	800f234 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59a:	0a5a      	lsrs	r2, r3, #9
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f5a6:	e002      	b.n	800f5ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f5a8:	2304      	movs	r3, #4
 800f5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3730      	adds	r7, #48	; 0x30
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	20000009 	.word	0x20000009

0800f5c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f5c4:	4b03      	ldr	r3, [pc, #12]	; (800f5d4 <BSP_SD_WriteCpltCallback+0x14>)
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	601a      	str	r2, [r3, #0]
}
 800f5ca:	bf00      	nop
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	2003c458 	.word	0x2003c458

0800f5d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f5dc:	4b03      	ldr	r3, [pc, #12]	; (800f5ec <BSP_SD_ReadCpltCallback+0x14>)
 800f5de:	2201      	movs	r2, #1
 800f5e0:	601a      	str	r2, [r3, #0]
}
 800f5e2:	bf00      	nop
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	2003c45c 	.word	0x2003c45c

0800f5f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f5fa:	79fb      	ldrb	r3, [r7, #7]
 800f5fc:	4a08      	ldr	r2, [pc, #32]	; (800f620 <disk_status+0x30>)
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	4413      	add	r3, r2
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	79fa      	ldrb	r2, [r7, #7]
 800f608:	4905      	ldr	r1, [pc, #20]	; (800f620 <disk_status+0x30>)
 800f60a:	440a      	add	r2, r1
 800f60c:	7a12      	ldrb	r2, [r2, #8]
 800f60e:	4610      	mov	r0, r2
 800f610:	4798      	blx	r3
 800f612:	4603      	mov	r3, r0
 800f614:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f616:	7bfb      	ldrb	r3, [r7, #15]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	2003c488 	.word	0x2003c488

0800f624 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	4a0d      	ldr	r2, [pc, #52]	; (800f66c <disk_initialize+0x48>)
 800f636:	5cd3      	ldrb	r3, [r2, r3]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d111      	bne.n	800f660 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f63c:	79fb      	ldrb	r3, [r7, #7]
 800f63e:	4a0b      	ldr	r2, [pc, #44]	; (800f66c <disk_initialize+0x48>)
 800f640:	2101      	movs	r1, #1
 800f642:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f644:	79fb      	ldrb	r3, [r7, #7]
 800f646:	4a09      	ldr	r2, [pc, #36]	; (800f66c <disk_initialize+0x48>)
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4413      	add	r3, r2
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	79fa      	ldrb	r2, [r7, #7]
 800f652:	4906      	ldr	r1, [pc, #24]	; (800f66c <disk_initialize+0x48>)
 800f654:	440a      	add	r2, r1
 800f656:	7a12      	ldrb	r2, [r2, #8]
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f660:	7bfb      	ldrb	r3, [r7, #15]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	2003c488 	.word	0x2003c488

0800f670 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	60b9      	str	r1, [r7, #8]
 800f678:	607a      	str	r2, [r7, #4]
 800f67a:	603b      	str	r3, [r7, #0]
 800f67c:	4603      	mov	r3, r0
 800f67e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f680:	7bfb      	ldrb	r3, [r7, #15]
 800f682:	4a0a      	ldr	r2, [pc, #40]	; (800f6ac <disk_read+0x3c>)
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	4413      	add	r3, r2
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	689c      	ldr	r4, [r3, #8]
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	4a07      	ldr	r2, [pc, #28]	; (800f6ac <disk_read+0x3c>)
 800f690:	4413      	add	r3, r2
 800f692:	7a18      	ldrb	r0, [r3, #8]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	47a0      	blx	r4
 800f69c:	4603      	mov	r3, r0
 800f69e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	371c      	adds	r7, #28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd90      	pop	{r4, r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	2003c488 	.word	0x2003c488

0800f6b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f6b0:	b590      	push	{r4, r7, lr}
 800f6b2:	b087      	sub	sp, #28
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60b9      	str	r1, [r7, #8]
 800f6b8:	607a      	str	r2, [r7, #4]
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	4a0a      	ldr	r2, [pc, #40]	; (800f6ec <disk_write+0x3c>)
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	68dc      	ldr	r4, [r3, #12]
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
 800f6ce:	4a07      	ldr	r2, [pc, #28]	; (800f6ec <disk_write+0x3c>)
 800f6d0:	4413      	add	r3, r2
 800f6d2:	7a18      	ldrb	r0, [r3, #8]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	47a0      	blx	r4
 800f6dc:	4603      	mov	r3, r0
 800f6de:	75fb      	strb	r3, [r7, #23]
  return res;
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	371c      	adds	r7, #28
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd90      	pop	{r4, r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	2003c488 	.word	0x2003c488

0800f6f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	603a      	str	r2, [r7, #0]
 800f6fa:	71fb      	strb	r3, [r7, #7]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	4a09      	ldr	r2, [pc, #36]	; (800f728 <disk_ioctl+0x38>)
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	79fa      	ldrb	r2, [r7, #7]
 800f70e:	4906      	ldr	r1, [pc, #24]	; (800f728 <disk_ioctl+0x38>)
 800f710:	440a      	add	r2, r1
 800f712:	7a10      	ldrb	r0, [r2, #8]
 800f714:	79b9      	ldrb	r1, [r7, #6]
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	4798      	blx	r3
 800f71a:	4603      	mov	r3, r0
 800f71c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	2003c488 	.word	0x2003c488

0800f72c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	3301      	adds	r3, #1
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f73c:	89fb      	ldrh	r3, [r7, #14]
 800f73e:	021b      	lsls	r3, r3, #8
 800f740:	b21a      	sxth	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	b21b      	sxth	r3, r3
 800f748:	4313      	orrs	r3, r2
 800f74a:	b21b      	sxth	r3, r3
 800f74c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f74e:	89fb      	ldrh	r3, [r7, #14]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3303      	adds	r3, #3
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	021b      	lsls	r3, r3, #8
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	3202      	adds	r2, #2
 800f774:	7812      	ldrb	r2, [r2, #0]
 800f776:	4313      	orrs	r3, r2
 800f778:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	021b      	lsls	r3, r3, #8
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	3201      	adds	r2, #1
 800f782:	7812      	ldrb	r2, [r2, #0]
 800f784:	4313      	orrs	r3, r2
 800f786:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	021b      	lsls	r3, r3, #8
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	7812      	ldrb	r2, [r2, #0]
 800f790:	4313      	orrs	r3, r2
 800f792:	60fb      	str	r3, [r7, #12]
	return rv;
 800f794:	68fb      	ldr	r3, [r7, #12]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr

0800f7a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f7a2:	b480      	push	{r7}
 800f7a4:	b083      	sub	sp, #12
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	1c5a      	adds	r2, r3, #1
 800f7b2:	607a      	str	r2, [r7, #4]
 800f7b4:	887a      	ldrh	r2, [r7, #2]
 800f7b6:	b2d2      	uxtb	r2, r2
 800f7b8:	701a      	strb	r2, [r3, #0]
 800f7ba:	887b      	ldrh	r3, [r7, #2]
 800f7bc:	0a1b      	lsrs	r3, r3, #8
 800f7be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	1c5a      	adds	r2, r3, #1
 800f7c4:	607a      	str	r2, [r7, #4]
 800f7c6:	887a      	ldrh	r2, [r7, #2]
 800f7c8:	b2d2      	uxtb	r2, r2
 800f7ca:	701a      	strb	r2, [r3, #0]
}
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	b2d2      	uxtb	r2, r2
 800f7ec:	701a      	strb	r2, [r3, #0]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	0a1b      	lsrs	r3, r3, #8
 800f7f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	607a      	str	r2, [r7, #4]
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	b2d2      	uxtb	r2, r2
 800f7fe:	701a      	strb	r2, [r3, #0]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	0a1b      	lsrs	r3, r3, #8
 800f804:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	1c5a      	adds	r2, r3, #1
 800f80a:	607a      	str	r2, [r7, #4]
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	0a1b      	lsrs	r3, r3, #8
 800f816:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	1c5a      	adds	r2, r3, #1
 800f81c:	607a      	str	r2, [r7, #4]
 800f81e:	683a      	ldr	r2, [r7, #0]
 800f820:	b2d2      	uxtb	r2, r2
 800f822:	701a      	strb	r2, [r3, #0]
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00d      	beq.n	800f866 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	1c53      	adds	r3, r2, #1
 800f84e:	613b      	str	r3, [r7, #16]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	1c59      	adds	r1, r3, #1
 800f854:	6179      	str	r1, [r7, #20]
 800f856:	7812      	ldrb	r2, [r2, #0]
 800f858:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3b01      	subs	r3, #1
 800f85e:	607b      	str	r3, [r7, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1f1      	bne.n	800f84a <mem_cpy+0x1a>
	}
}
 800f866:	bf00      	nop
 800f868:	371c      	adds	r7, #28
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f872:	b480      	push	{r7}
 800f874:	b087      	sub	sp, #28
 800f876:	af00      	add	r7, sp, #0
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	617a      	str	r2, [r7, #20]
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	b2d2      	uxtb	r2, r2
 800f88c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	3b01      	subs	r3, #1
 800f892:	607b      	str	r3, [r7, #4]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1f3      	bne.n	800f882 <mem_set+0x10>
}
 800f89a:	bf00      	nop
 800f89c:	371c      	adds	r7, #28
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr

0800f8a6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f8a6:	b480      	push	{r7}
 800f8a8:	b089      	sub	sp, #36	; 0x24
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	60f8      	str	r0, [r7, #12]
 800f8ae:	60b9      	str	r1, [r7, #8]
 800f8b0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	1c5a      	adds	r2, r3, #1
 800f8c2:	61fa      	str	r2, [r7, #28]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	61ba      	str	r2, [r7, #24]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	1acb      	subs	r3, r1, r3
 800f8d2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	607b      	str	r3, [r7, #4]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d002      	beq.n	800f8e6 <mem_cmp+0x40>
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d0eb      	beq.n	800f8be <mem_cmp+0x18>

	return r;
 800f8e6:	697b      	ldr	r3, [r7, #20]
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3724      	adds	r7, #36	; 0x24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f8fe:	e002      	b.n	800f906 <chk_chr+0x12>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3301      	adds	r3, #1
 800f904:	607b      	str	r3, [r7, #4]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d005      	beq.n	800f91a <chk_chr+0x26>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	4293      	cmp	r3, r2
 800f918:	d1f2      	bne.n	800f900 <chk_chr+0xc>
	return *str;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	781b      	ldrb	r3, [r3, #0]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
	...

0800f92c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f936:	2300      	movs	r3, #0
 800f938:	60bb      	str	r3, [r7, #8]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	60fb      	str	r3, [r7, #12]
 800f93e:	e029      	b.n	800f994 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f940:	4a27      	ldr	r2, [pc, #156]	; (800f9e0 <chk_lock+0xb4>)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	011b      	lsls	r3, r3, #4
 800f946:	4413      	add	r3, r2
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01d      	beq.n	800f98a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f94e:	4a24      	ldr	r2, [pc, #144]	; (800f9e0 <chk_lock+0xb4>)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	011b      	lsls	r3, r3, #4
 800f954:	4413      	add	r3, r2
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d116      	bne.n	800f98e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f960:	4a1f      	ldr	r2, [pc, #124]	; (800f9e0 <chk_lock+0xb4>)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	011b      	lsls	r3, r3, #4
 800f966:	4413      	add	r3, r2
 800f968:	3304      	adds	r3, #4
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f970:	429a      	cmp	r2, r3
 800f972:	d10c      	bne.n	800f98e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f974:	4a1a      	ldr	r2, [pc, #104]	; (800f9e0 <chk_lock+0xb4>)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	011b      	lsls	r3, r3, #4
 800f97a:	4413      	add	r3, r2
 800f97c:	3308      	adds	r3, #8
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f984:	429a      	cmp	r2, r3
 800f986:	d102      	bne.n	800f98e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f988:	e007      	b.n	800f99a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f98a:	2301      	movs	r3, #1
 800f98c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3301      	adds	r3, #1
 800f992:	60fb      	str	r3, [r7, #12]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b01      	cmp	r3, #1
 800f998:	d9d2      	bls.n	800f940 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2b02      	cmp	r3, #2
 800f99e:	d109      	bne.n	800f9b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <chk_lock+0x80>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b02      	cmp	r3, #2
 800f9aa:	d101      	bne.n	800f9b0 <chk_lock+0x84>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	e010      	b.n	800f9d2 <chk_lock+0xa6>
 800f9b0:	2312      	movs	r3, #18
 800f9b2:	e00e      	b.n	800f9d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d108      	bne.n	800f9cc <chk_lock+0xa0>
 800f9ba:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <chk_lock+0xb4>)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	011b      	lsls	r3, r3, #4
 800f9c0:	4413      	add	r3, r2
 800f9c2:	330c      	adds	r3, #12
 800f9c4:	881b      	ldrh	r3, [r3, #0]
 800f9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ca:	d101      	bne.n	800f9d0 <chk_lock+0xa4>
 800f9cc:	2310      	movs	r3, #16
 800f9ce:	e000      	b.n	800f9d2 <chk_lock+0xa6>
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	2003c468 	.word	0x2003c468

0800f9e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	607b      	str	r3, [r7, #4]
 800f9ee:	e002      	b.n	800f9f6 <enq_lock+0x12>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	607b      	str	r3, [r7, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d806      	bhi.n	800fa0a <enq_lock+0x26>
 800f9fc:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <enq_lock+0x40>)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	011b      	lsls	r3, r3, #4
 800fa02:	4413      	add	r3, r2
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1f2      	bne.n	800f9f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b02      	cmp	r3, #2
 800fa0e:	bf14      	ite	ne
 800fa10:	2301      	movne	r3, #1
 800fa12:	2300      	moveq	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	370c      	adds	r7, #12
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	2003c468 	.word	0x2003c468

0800fa28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fa32:	2300      	movs	r3, #0
 800fa34:	60fb      	str	r3, [r7, #12]
 800fa36:	e01f      	b.n	800fa78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fa38:	4a41      	ldr	r2, [pc, #260]	; (800fb40 <inc_lock+0x118>)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	011b      	lsls	r3, r3, #4
 800fa3e:	4413      	add	r3, r2
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d113      	bne.n	800fa72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fa4a:	4a3d      	ldr	r2, [pc, #244]	; (800fb40 <inc_lock+0x118>)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	011b      	lsls	r3, r3, #4
 800fa50:	4413      	add	r3, r2
 800fa52:	3304      	adds	r3, #4
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d109      	bne.n	800fa72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fa5e:	4a38      	ldr	r2, [pc, #224]	; (800fb40 <inc_lock+0x118>)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	011b      	lsls	r3, r3, #4
 800fa64:	4413      	add	r3, r2
 800fa66:	3308      	adds	r3, #8
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d006      	beq.n	800fa80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d9dc      	bls.n	800fa38 <inc_lock+0x10>
 800fa7e:	e000      	b.n	800fa82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fa80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d132      	bne.n	800faee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	60fb      	str	r3, [r7, #12]
 800fa8c:	e002      	b.n	800fa94 <inc_lock+0x6c>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3301      	adds	r3, #1
 800fa92:	60fb      	str	r3, [r7, #12]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d806      	bhi.n	800faa8 <inc_lock+0x80>
 800fa9a:	4a29      	ldr	r2, [pc, #164]	; (800fb40 <inc_lock+0x118>)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	011b      	lsls	r3, r3, #4
 800faa0:	4413      	add	r3, r2
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1f2      	bne.n	800fa8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d101      	bne.n	800fab2 <inc_lock+0x8a>
 800faae:	2300      	movs	r3, #0
 800fab0:	e040      	b.n	800fb34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	4922      	ldr	r1, [pc, #136]	; (800fb40 <inc_lock+0x118>)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	011b      	lsls	r3, r3, #4
 800fabc:	440b      	add	r3, r1
 800fabe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	689a      	ldr	r2, [r3, #8]
 800fac4:	491e      	ldr	r1, [pc, #120]	; (800fb40 <inc_lock+0x118>)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	011b      	lsls	r3, r3, #4
 800faca:	440b      	add	r3, r1
 800facc:	3304      	adds	r3, #4
 800face:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	695a      	ldr	r2, [r3, #20]
 800fad4:	491a      	ldr	r1, [pc, #104]	; (800fb40 <inc_lock+0x118>)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	011b      	lsls	r3, r3, #4
 800fada:	440b      	add	r3, r1
 800fadc:	3308      	adds	r3, #8
 800fade:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fae0:	4a17      	ldr	r2, [pc, #92]	; (800fb40 <inc_lock+0x118>)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	011b      	lsls	r3, r3, #4
 800fae6:	4413      	add	r3, r2
 800fae8:	330c      	adds	r3, #12
 800faea:	2200      	movs	r2, #0
 800faec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d009      	beq.n	800fb08 <inc_lock+0xe0>
 800faf4:	4a12      	ldr	r2, [pc, #72]	; (800fb40 <inc_lock+0x118>)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	011b      	lsls	r3, r3, #4
 800fafa:	4413      	add	r3, r2
 800fafc:	330c      	adds	r3, #12
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d001      	beq.n	800fb08 <inc_lock+0xe0>
 800fb04:	2300      	movs	r3, #0
 800fb06:	e015      	b.n	800fb34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d108      	bne.n	800fb20 <inc_lock+0xf8>
 800fb0e:	4a0c      	ldr	r2, [pc, #48]	; (800fb40 <inc_lock+0x118>)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	011b      	lsls	r3, r3, #4
 800fb14:	4413      	add	r3, r2
 800fb16:	330c      	adds	r3, #12
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	e001      	b.n	800fb24 <inc_lock+0xfc>
 800fb20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb24:	4906      	ldr	r1, [pc, #24]	; (800fb40 <inc_lock+0x118>)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	011b      	lsls	r3, r3, #4
 800fb2a:	440b      	add	r3, r1
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	3301      	adds	r3, #1
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	2003c468 	.word	0x2003c468

0800fb44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	607b      	str	r3, [r7, #4]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d825      	bhi.n	800fba4 <dec_lock+0x60>
		n = Files[i].ctr;
 800fb58:	4a17      	ldr	r2, [pc, #92]	; (800fbb8 <dec_lock+0x74>)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	011b      	lsls	r3, r3, #4
 800fb5e:	4413      	add	r3, r2
 800fb60:	330c      	adds	r3, #12
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fb66:	89fb      	ldrh	r3, [r7, #14]
 800fb68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb6c:	d101      	bne.n	800fb72 <dec_lock+0x2e>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fb72:	89fb      	ldrh	r3, [r7, #14]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <dec_lock+0x3a>
 800fb78:	89fb      	ldrh	r3, [r7, #14]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fb7e:	4a0e      	ldr	r2, [pc, #56]	; (800fbb8 <dec_lock+0x74>)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	011b      	lsls	r3, r3, #4
 800fb84:	4413      	add	r3, r2
 800fb86:	330c      	adds	r3, #12
 800fb88:	89fa      	ldrh	r2, [r7, #14]
 800fb8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fb8c:	89fb      	ldrh	r3, [r7, #14]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d105      	bne.n	800fb9e <dec_lock+0x5a>
 800fb92:	4a09      	ldr	r2, [pc, #36]	; (800fbb8 <dec_lock+0x74>)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	011b      	lsls	r3, r3, #4
 800fb98:	4413      	add	r3, r2
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	737b      	strb	r3, [r7, #13]
 800fba2:	e001      	b.n	800fba8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fba4:	2302      	movs	r3, #2
 800fba6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fba8:	7b7b      	ldrb	r3, [r7, #13]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	2003c468 	.word	0x2003c468

0800fbbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	60fb      	str	r3, [r7, #12]
 800fbc8:	e010      	b.n	800fbec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fbca:	4a0d      	ldr	r2, [pc, #52]	; (800fc00 <clear_lock+0x44>)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	011b      	lsls	r3, r3, #4
 800fbd0:	4413      	add	r3, r2
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d105      	bne.n	800fbe6 <clear_lock+0x2a>
 800fbda:	4a09      	ldr	r2, [pc, #36]	; (800fc00 <clear_lock+0x44>)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	011b      	lsls	r3, r3, #4
 800fbe0:	4413      	add	r3, r2
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	60fb      	str	r3, [r7, #12]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d9eb      	bls.n	800fbca <clear_lock+0xe>
	}
}
 800fbf2:	bf00      	nop
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	2003c468 	.word	0x2003c468

0800fc04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	78db      	ldrb	r3, [r3, #3]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d034      	beq.n	800fc82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	7858      	ldrb	r0, [r3, #1]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc28:	2301      	movs	r3, #1
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	f7ff fd40 	bl	800f6b0 <disk_write>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d002      	beq.n	800fc3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	73fb      	strb	r3, [r7, #15]
 800fc3a:	e022      	b.n	800fc82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	1ad2      	subs	r2, r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d217      	bcs.n	800fc82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	789b      	ldrb	r3, [r3, #2]
 800fc56:	613b      	str	r3, [r7, #16]
 800fc58:	e010      	b.n	800fc7c <sync_window+0x78>
					wsect += fs->fsize;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	4413      	add	r3, r2
 800fc62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	7858      	ldrb	r0, [r3, #1]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc6e:	2301      	movs	r3, #1
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	f7ff fd1d 	bl	800f6b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	613b      	str	r3, [r7, #16]
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d8eb      	bhi.n	800fc5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3718      	adds	r7, #24
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d01b      	beq.n	800fcdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffad 	bl	800fc04 <sync_window>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fcae:	7bfb      	ldrb	r3, [r7, #15]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d113      	bne.n	800fcdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7858      	ldrb	r0, [r3, #1]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	f7ff fcd5 	bl	800f670 <disk_read>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d004      	beq.n	800fcd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fccc:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
	...

0800fce8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ff87 	bl	800fc04 <sync_window>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d159      	bne.n	800fdb4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b03      	cmp	r3, #3
 800fd06:	d149      	bne.n	800fd9c <sync_fs+0xb4>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	791b      	ldrb	r3, [r3, #4]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d145      	bne.n	800fd9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	899b      	ldrh	r3, [r3, #12]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	f7ff fda8 	bl	800f872 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3338      	adds	r3, #56	; 0x38
 800fd26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd2a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff fd37 	bl	800f7a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3338      	adds	r3, #56	; 0x38
 800fd38:	4921      	ldr	r1, [pc, #132]	; (800fdc0 <sync_fs+0xd8>)
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fd4c 	bl	800f7d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	3338      	adds	r3, #56	; 0x38
 800fd44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fd48:	491e      	ldr	r1, [pc, #120]	; (800fdc4 <sync_fs+0xdc>)
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff fd44 	bl	800f7d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	3338      	adds	r3, #56	; 0x38
 800fd54:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	695b      	ldr	r3, [r3, #20]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4610      	mov	r0, r2
 800fd60:	f7ff fd3a 	bl	800f7d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3338      	adds	r3, #56	; 0x38
 800fd68:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	4619      	mov	r1, r3
 800fd72:	4610      	mov	r0, r2
 800fd74:	f7ff fd30 	bl	800f7d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	7858      	ldrb	r0, [r3, #1]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd90:	2301      	movs	r3, #1
 800fd92:	f7ff fc8d 	bl	800f6b0 <disk_write>
			fs->fsi_flag = 0;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	785b      	ldrb	r3, [r3, #1]
 800fda0:	2200      	movs	r2, #0
 800fda2:	2100      	movs	r1, #0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff fca3 	bl	800f6f0 <disk_ioctl>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <sync_fs+0xcc>
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	41615252 	.word	0x41615252
 800fdc4:	61417272 	.word	0x61417272

0800fdc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	3b02      	subs	r3, #2
 800fdd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	69db      	ldr	r3, [r3, #28]
 800fddc:	3b02      	subs	r3, #2
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d301      	bcc.n	800fde8 <clust2sect+0x20>
 800fde4:	2300      	movs	r3, #0
 800fde6:	e008      	b.n	800fdfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	895b      	ldrh	r3, [r3, #10]
 800fdec:	461a      	mov	r2, r3
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	fb03 f202 	mul.w	r2, r3, r2
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf8:	4413      	add	r3, r2
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b086      	sub	sp, #24
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d904      	bls.n	800fe26 <get_fat+0x20>
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	69db      	ldr	r3, [r3, #28]
 800fe20:	683a      	ldr	r2, [r7, #0]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d302      	bcc.n	800fe2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800fe26:	2301      	movs	r3, #1
 800fe28:	617b      	str	r3, [r7, #20]
 800fe2a:	e0b7      	b.n	800ff9c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fe2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d05a      	beq.n	800fef0 <get_fat+0xea>
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d07d      	beq.n	800ff3a <get_fat+0x134>
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	f040 80a2 	bne.w	800ff88 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	085b      	lsrs	r3, r3, #1
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	4413      	add	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	899b      	ldrh	r3, [r3, #12]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe62:	4413      	add	r3, r2
 800fe64:	4619      	mov	r1, r3
 800fe66:	6938      	ldr	r0, [r7, #16]
 800fe68:	f7ff ff10 	bl	800fc8c <move_window>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f040 808d 	bne.w	800ff8e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	60fa      	str	r2, [r7, #12]
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	8992      	ldrh	r2, [r2, #12]
 800fe7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe82:	fb02 f201 	mul.w	r2, r2, r1
 800fe86:	1a9b      	subs	r3, r3, r2
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	899b      	ldrh	r3, [r3, #12]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fea2:	4413      	add	r3, r2
 800fea4:	4619      	mov	r1, r3
 800fea6:	6938      	ldr	r0, [r7, #16]
 800fea8:	f7ff fef0 	bl	800fc8c <move_window>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d16f      	bne.n	800ff92 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	899b      	ldrh	r3, [r3, #12]
 800feb6:	461a      	mov	r2, r3
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	fbb3 f1f2 	udiv	r1, r3, r2
 800febe:	fb02 f201 	mul.w	r2, r2, r1
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	693a      	ldr	r2, [r7, #16]
 800fec6:	4413      	add	r3, r2
 800fec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fecc:	021b      	lsls	r3, r3, #8
 800fece:	461a      	mov	r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <get_fat+0xe0>
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	091b      	lsrs	r3, r3, #4
 800fee4:	e002      	b.n	800feec <get_fat+0xe6>
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800feec:	617b      	str	r3, [r7, #20]
			break;
 800feee:	e055      	b.n	800ff9c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	899b      	ldrh	r3, [r3, #12]
 800fef8:	085b      	lsrs	r3, r3, #1
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4619      	mov	r1, r3
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff04:	4413      	add	r3, r2
 800ff06:	4619      	mov	r1, r3
 800ff08:	6938      	ldr	r0, [r7, #16]
 800ff0a:	f7ff febf 	bl	800fc8c <move_window>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d140      	bne.n	800ff96 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	693a      	ldr	r2, [r7, #16]
 800ff20:	8992      	ldrh	r2, [r2, #12]
 800ff22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff26:	fb02 f200 	mul.w	r2, r2, r0
 800ff2a:	1a9b      	subs	r3, r3, r2
 800ff2c:	440b      	add	r3, r1
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff fbfc 	bl	800f72c <ld_word>
 800ff34:	4603      	mov	r3, r0
 800ff36:	617b      	str	r3, [r7, #20]
			break;
 800ff38:	e030      	b.n	800ff9c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	899b      	ldrh	r3, [r3, #12]
 800ff42:	089b      	lsrs	r3, r3, #2
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	4619      	mov	r1, r3
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff4e:	4413      	add	r3, r2
 800ff50:	4619      	mov	r1, r3
 800ff52:	6938      	ldr	r0, [r7, #16]
 800ff54:	f7ff fe9a 	bl	800fc8c <move_window>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d11d      	bne.n	800ff9a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	8992      	ldrh	r2, [r2, #12]
 800ff6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff70:	fb02 f200 	mul.w	r2, r2, r0
 800ff74:	1a9b      	subs	r3, r3, r2
 800ff76:	440b      	add	r3, r1
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff fbef 	bl	800f75c <ld_dword>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ff84:	617b      	str	r3, [r7, #20]
			break;
 800ff86:	e009      	b.n	800ff9c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ff88:	2301      	movs	r3, #1
 800ff8a:	617b      	str	r3, [r7, #20]
 800ff8c:	e006      	b.n	800ff9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff8e:	bf00      	nop
 800ff90:	e004      	b.n	800ff9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff92:	bf00      	nop
 800ff94:	e002      	b.n	800ff9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff96:	bf00      	nop
 800ff98:	e000      	b.n	800ff9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff9a:	bf00      	nop
		}
	}

	return val;
 800ff9c:	697b      	ldr	r3, [r7, #20]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3718      	adds	r7, #24
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ffa6:	b590      	push	{r4, r7, lr}
 800ffa8:	b089      	sub	sp, #36	; 0x24
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	60f8      	str	r0, [r7, #12]
 800ffae:	60b9      	str	r1, [r7, #8]
 800ffb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ffb2:	2302      	movs	r3, #2
 800ffb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	f240 8106 	bls.w	80101ca <put_fat+0x224>
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	f080 8100 	bcs.w	80101ca <put_fat+0x224>
		switch (fs->fs_type) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	f000 8088 	beq.w	80100e4 <put_fat+0x13e>
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	f000 80b0 	beq.w	801013a <put_fat+0x194>
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	f040 80f5 	bne.w	80101ca <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	61bb      	str	r3, [r7, #24]
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	085b      	lsrs	r3, r3, #1
 800ffe8:	69ba      	ldr	r2, [r7, #24]
 800ffea:	4413      	add	r3, r2
 800ffec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	899b      	ldrh	r3, [r3, #12]
 800fff6:	4619      	mov	r1, r3
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fffe:	4413      	add	r3, r2
 8010000:	4619      	mov	r1, r3
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7ff fe42 	bl	800fc8c <move_window>
 8010008:	4603      	mov	r3, r0
 801000a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801000c:	7ffb      	ldrb	r3, [r7, #31]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f040 80d4 	bne.w	80101bc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	61ba      	str	r2, [r7, #24]
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	8992      	ldrh	r2, [r2, #12]
 8010024:	fbb3 f0f2 	udiv	r0, r3, r2
 8010028:	fb02 f200 	mul.w	r2, r2, r0
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	440b      	add	r3, r1
 8010030:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00d      	beq.n	8010058 <put_fat+0xb2>
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	b25b      	sxtb	r3, r3
 8010042:	f003 030f 	and.w	r3, r3, #15
 8010046:	b25a      	sxtb	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	b2db      	uxtb	r3, r3
 801004c:	011b      	lsls	r3, r3, #4
 801004e:	b25b      	sxtb	r3, r3
 8010050:	4313      	orrs	r3, r2
 8010052:	b25b      	sxtb	r3, r3
 8010054:	b2db      	uxtb	r3, r3
 8010056:	e001      	b.n	801005c <put_fat+0xb6>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	b2db      	uxtb	r3, r3
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2201      	movs	r2, #1
 8010064:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	4619      	mov	r1, r3
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	fbb3 f3f1 	udiv	r3, r3, r1
 8010076:	4413      	add	r3, r2
 8010078:	4619      	mov	r1, r3
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff fe06 	bl	800fc8c <move_window>
 8010080:	4603      	mov	r3, r0
 8010082:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010084:	7ffb      	ldrb	r3, [r7, #31]
 8010086:	2b00      	cmp	r3, #0
 8010088:	f040 809a 	bne.w	80101c0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	461a      	mov	r2, r3
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	fbb3 f0f2 	udiv	r0, r3, r2
 801009e:	fb02 f200 	mul.w	r2, r2, r0
 80100a2:	1a9b      	subs	r3, r3, r2
 80100a4:	440b      	add	r3, r1
 80100a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <put_fat+0x114>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	091b      	lsrs	r3, r3, #4
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	e00e      	b.n	80100d8 <put_fat+0x132>
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	b25b      	sxtb	r3, r3
 80100c0:	f023 030f 	bic.w	r3, r3, #15
 80100c4:	b25a      	sxtb	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	0a1b      	lsrs	r3, r3, #8
 80100ca:	b25b      	sxtb	r3, r3
 80100cc:	f003 030f 	and.w	r3, r3, #15
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	4313      	orrs	r3, r2
 80100d4:	b25b      	sxtb	r3, r3
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2201      	movs	r2, #1
 80100e0:	70da      	strb	r2, [r3, #3]
			break;
 80100e2:	e072      	b.n	80101ca <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	899b      	ldrh	r3, [r3, #12]
 80100ec:	085b      	lsrs	r3, r3, #1
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4619      	mov	r1, r3
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80100f8:	4413      	add	r3, r2
 80100fa:	4619      	mov	r1, r3
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f7ff fdc5 	bl	800fc8c <move_window>
 8010102:	4603      	mov	r3, r0
 8010104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010106:	7ffb      	ldrb	r3, [r7, #31]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d15b      	bne.n	80101c4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	005b      	lsls	r3, r3, #1
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	8992      	ldrh	r2, [r2, #12]
 801011a:	fbb3 f0f2 	udiv	r0, r3, r2
 801011e:	fb02 f200 	mul.w	r2, r2, r0
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	440b      	add	r3, r1
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	b292      	uxth	r2, r2
 801012a:	4611      	mov	r1, r2
 801012c:	4618      	mov	r0, r3
 801012e:	f7ff fb38 	bl	800f7a2 <st_word>
			fs->wflag = 1;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	70da      	strb	r2, [r3, #3]
			break;
 8010138:	e047      	b.n	80101ca <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	899b      	ldrh	r3, [r3, #12]
 8010142:	089b      	lsrs	r3, r3, #2
 8010144:	b29b      	uxth	r3, r3
 8010146:	4619      	mov	r1, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	fbb3 f3f1 	udiv	r3, r3, r1
 801014e:	4413      	add	r3, r2
 8010150:	4619      	mov	r1, r3
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f7ff fd9a 	bl	800fc8c <move_window>
 8010158:	4603      	mov	r3, r0
 801015a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801015c:	7ffb      	ldrb	r3, [r7, #31]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d132      	bne.n	80101c8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	8992      	ldrh	r2, [r2, #12]
 8010176:	fbb3 f0f2 	udiv	r0, r3, r2
 801017a:	fb02 f200 	mul.w	r2, r2, r0
 801017e:	1a9b      	subs	r3, r3, r2
 8010180:	440b      	add	r3, r1
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff faea 	bl	800f75c <ld_dword>
 8010188:	4603      	mov	r3, r0
 801018a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801018e:	4323      	orrs	r3, r4
 8010190:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	8992      	ldrh	r2, [r2, #12]
 80101a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80101a4:	fb02 f200 	mul.w	r2, r2, r0
 80101a8:	1a9b      	subs	r3, r3, r2
 80101aa:	440b      	add	r3, r1
 80101ac:	6879      	ldr	r1, [r7, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff fb12 	bl	800f7d8 <st_dword>
			fs->wflag = 1;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2201      	movs	r2, #1
 80101b8:	70da      	strb	r2, [r3, #3]
			break;
 80101ba:	e006      	b.n	80101ca <put_fat+0x224>
			if (res != FR_OK) break;
 80101bc:	bf00      	nop
 80101be:	e004      	b.n	80101ca <put_fat+0x224>
			if (res != FR_OK) break;
 80101c0:	bf00      	nop
 80101c2:	e002      	b.n	80101ca <put_fat+0x224>
			if (res != FR_OK) break;
 80101c4:	bf00      	nop
 80101c6:	e000      	b.n	80101ca <put_fat+0x224>
			if (res != FR_OK) break;
 80101c8:	bf00      	nop
		}
	}
	return res;
 80101ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3724      	adds	r7, #36	; 0x24
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd90      	pop	{r4, r7, pc}

080101d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d904      	bls.n	80101fa <remove_chain+0x26>
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	69db      	ldr	r3, [r3, #28]
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d301      	bcc.n	80101fe <remove_chain+0x2a>
 80101fa:	2302      	movs	r3, #2
 80101fc:	e04b      	b.n	8010296 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00c      	beq.n	801021e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010204:	f04f 32ff 	mov.w	r2, #4294967295
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	69b8      	ldr	r0, [r7, #24]
 801020c:	f7ff fecb 	bl	800ffa6 <put_fat>
 8010210:	4603      	mov	r3, r0
 8010212:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010214:	7ffb      	ldrb	r3, [r7, #31]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <remove_chain+0x4a>
 801021a:	7ffb      	ldrb	r3, [r7, #31]
 801021c:	e03b      	b.n	8010296 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801021e:	68b9      	ldr	r1, [r7, #8]
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7ff fdf0 	bl	800fe06 <get_fat>
 8010226:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d031      	beq.n	8010292 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b01      	cmp	r3, #1
 8010232:	d101      	bne.n	8010238 <remove_chain+0x64>
 8010234:	2302      	movs	r3, #2
 8010236:	e02e      	b.n	8010296 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801023e:	d101      	bne.n	8010244 <remove_chain+0x70>
 8010240:	2301      	movs	r3, #1
 8010242:	e028      	b.n	8010296 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010244:	2200      	movs	r2, #0
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	69b8      	ldr	r0, [r7, #24]
 801024a:	f7ff feac 	bl	800ffa6 <put_fat>
 801024e:	4603      	mov	r3, r0
 8010250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010252:	7ffb      	ldrb	r3, [r7, #31]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <remove_chain+0x88>
 8010258:	7ffb      	ldrb	r3, [r7, #31]
 801025a:	e01c      	b.n	8010296 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	695a      	ldr	r2, [r3, #20]
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	3b02      	subs	r3, #2
 8010266:	429a      	cmp	r2, r3
 8010268:	d20b      	bcs.n	8010282 <remove_chain+0xae>
			fs->free_clst++;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	695b      	ldr	r3, [r3, #20]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	791b      	ldrb	r3, [r3, #4]
 8010278:	f043 0301 	orr.w	r3, r3, #1
 801027c:	b2da      	uxtb	r2, r3
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	429a      	cmp	r2, r3
 801028e:	d3c6      	bcc.n	801021e <remove_chain+0x4a>
 8010290:	e000      	b.n	8010294 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010292:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3720      	adds	r7, #32
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b088      	sub	sp, #32
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10d      	bne.n	80102d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	691b      	ldr	r3, [r3, #16]
 80102b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <create_chain+0x2c>
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	69db      	ldr	r3, [r3, #28]
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d31b      	bcc.n	8010302 <create_chain+0x64>
 80102ca:	2301      	movs	r3, #1
 80102cc:	61bb      	str	r3, [r7, #24]
 80102ce:	e018      	b.n	8010302 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff fd97 	bl	800fe06 <get_fat>
 80102d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d801      	bhi.n	80102e4 <create_chain+0x46>
 80102e0:	2301      	movs	r3, #1
 80102e2:	e070      	b.n	80103c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ea:	d101      	bne.n	80102f0 <create_chain+0x52>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	e06a      	b.n	80103c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	69db      	ldr	r3, [r3, #28]
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d201      	bcs.n	80102fe <create_chain+0x60>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	e063      	b.n	80103c6 <create_chain+0x128>
		scl = clst;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	3301      	adds	r3, #1
 801030a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	69db      	ldr	r3, [r3, #28]
 8010310:	69fa      	ldr	r2, [r7, #28]
 8010312:	429a      	cmp	r2, r3
 8010314:	d307      	bcc.n	8010326 <create_chain+0x88>
				ncl = 2;
 8010316:	2302      	movs	r3, #2
 8010318:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801031a:	69fa      	ldr	r2, [r7, #28]
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	429a      	cmp	r2, r3
 8010320:	d901      	bls.n	8010326 <create_chain+0x88>
 8010322:	2300      	movs	r3, #0
 8010324:	e04f      	b.n	80103c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010326:	69f9      	ldr	r1, [r7, #28]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7ff fd6c 	bl	800fe06 <get_fat>
 801032e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00e      	beq.n	8010354 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d003      	beq.n	8010344 <create_chain+0xa6>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d101      	bne.n	8010348 <create_chain+0xaa>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	e03e      	b.n	80103c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010348:	69fa      	ldr	r2, [r7, #28]
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	429a      	cmp	r2, r3
 801034e:	d1da      	bne.n	8010306 <create_chain+0x68>
 8010350:	2300      	movs	r3, #0
 8010352:	e038      	b.n	80103c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010354:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010356:	f04f 32ff 	mov.w	r2, #4294967295
 801035a:	69f9      	ldr	r1, [r7, #28]
 801035c:	6938      	ldr	r0, [r7, #16]
 801035e:	f7ff fe22 	bl	800ffa6 <put_fat>
 8010362:	4603      	mov	r3, r0
 8010364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010366:	7dfb      	ldrb	r3, [r7, #23]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d109      	bne.n	8010380 <create_chain+0xe2>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d006      	beq.n	8010380 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010372:	69fa      	ldr	r2, [r7, #28]
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6938      	ldr	r0, [r7, #16]
 8010378:	f7ff fe15 	bl	800ffa6 <put_fat>
 801037c:	4603      	mov	r3, r0
 801037e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010380:	7dfb      	ldrb	r3, [r7, #23]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d116      	bne.n	80103b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	69fa      	ldr	r2, [r7, #28]
 801038a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	695a      	ldr	r2, [r3, #20]
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	69db      	ldr	r3, [r3, #28]
 8010394:	3b02      	subs	r3, #2
 8010396:	429a      	cmp	r2, r3
 8010398:	d804      	bhi.n	80103a4 <create_chain+0x106>
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	695b      	ldr	r3, [r3, #20]
 801039e:	1e5a      	subs	r2, r3, #1
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	791b      	ldrb	r3, [r3, #4]
 80103a8:	f043 0301 	orr.w	r3, r3, #1
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	711a      	strb	r2, [r3, #4]
 80103b2:	e007      	b.n	80103c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d102      	bne.n	80103c0 <create_chain+0x122>
 80103ba:	f04f 33ff 	mov.w	r3, #4294967295
 80103be:	e000      	b.n	80103c2 <create_chain+0x124>
 80103c0:	2301      	movs	r3, #1
 80103c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80103c4:	69fb      	ldr	r3, [r7, #28]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3720      	adds	r7, #32
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80103ce:	b480      	push	{r7}
 80103d0:	b087      	sub	sp, #28
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e2:	3304      	adds	r3, #4
 80103e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	899b      	ldrh	r3, [r3, #12]
 80103ea:	461a      	mov	r2, r3
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	8952      	ldrh	r2, [r2, #10]
 80103f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80103fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	1d1a      	adds	r2, r3, #4
 8010400:	613a      	str	r2, [r7, #16]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d101      	bne.n	8010410 <clmt_clust+0x42>
 801040c:	2300      	movs	r3, #0
 801040e:	e010      	b.n	8010432 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	429a      	cmp	r2, r3
 8010416:	d307      	bcc.n	8010428 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010418:	697a      	ldr	r2, [r7, #20]
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	1ad3      	subs	r3, r2, r3
 801041e:	617b      	str	r3, [r7, #20]
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	3304      	adds	r3, #4
 8010424:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010426:	e7e9      	b.n	80103fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010428:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	4413      	add	r3, r2
}
 8010432:	4618      	mov	r0, r3
 8010434:	371c      	adds	r7, #28
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b086      	sub	sp, #24
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010454:	d204      	bcs.n	8010460 <dir_sdi+0x22>
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	f003 031f 	and.w	r3, r3, #31
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010460:	2302      	movs	r3, #2
 8010462:	e071      	b.n	8010548 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <dir_sdi+0x46>
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	2b02      	cmp	r3, #2
 801047c:	d902      	bls.n	8010484 <dir_sdi+0x46>
		clst = fs->dirbase;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010482:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d10c      	bne.n	80104a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	095b      	lsrs	r3, r3, #5
 801048e:	693a      	ldr	r2, [r7, #16]
 8010490:	8912      	ldrh	r2, [r2, #8]
 8010492:	4293      	cmp	r3, r2
 8010494:	d301      	bcc.n	801049a <dir_sdi+0x5c>
 8010496:	2302      	movs	r3, #2
 8010498:	e056      	b.n	8010548 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	61da      	str	r2, [r3, #28]
 80104a2:	e02d      	b.n	8010500 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	895b      	ldrh	r3, [r3, #10]
 80104a8:	461a      	mov	r2, r3
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	899b      	ldrh	r3, [r3, #12]
 80104ae:	fb03 f302 	mul.w	r3, r3, r2
 80104b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104b4:	e019      	b.n	80104ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6979      	ldr	r1, [r7, #20]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff fca3 	bl	800fe06 <get_fat>
 80104c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c8:	d101      	bne.n	80104ce <dir_sdi+0x90>
 80104ca:	2301      	movs	r3, #1
 80104cc:	e03c      	b.n	8010548 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d904      	bls.n	80104de <dir_sdi+0xa0>
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	69db      	ldr	r3, [r3, #28]
 80104d8:	697a      	ldr	r2, [r7, #20]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d301      	bcc.n	80104e2 <dir_sdi+0xa4>
 80104de:	2302      	movs	r3, #2
 80104e0:	e032      	b.n	8010548 <dir_sdi+0x10a>
			ofs -= csz;
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d2e1      	bcs.n	80104b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80104f2:	6979      	ldr	r1, [r7, #20]
 80104f4:	6938      	ldr	r0, [r7, #16]
 80104f6:	f7ff fc67 	bl	800fdc8 <clust2sect>
 80104fa:	4602      	mov	r2, r0
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	697a      	ldr	r2, [r7, #20]
 8010504:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	69db      	ldr	r3, [r3, #28]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d101      	bne.n	8010512 <dir_sdi+0xd4>
 801050e:	2302      	movs	r3, #2
 8010510:	e01a      	b.n	8010548 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	69da      	ldr	r2, [r3, #28]
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	899b      	ldrh	r3, [r3, #12]
 801051a:	4619      	mov	r1, r3
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010522:	441a      	add	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	899b      	ldrh	r3, [r3, #12]
 8010532:	461a      	mov	r2, r3
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	fbb3 f0f2 	udiv	r0, r3, r2
 801053a:	fb02 f200 	mul.w	r2, r2, r0
 801053e:	1a9b      	subs	r3, r3, r2
 8010540:	18ca      	adds	r2, r1, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b086      	sub	sp, #24
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	3320      	adds	r3, #32
 8010566:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	69db      	ldr	r3, [r3, #28]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d003      	beq.n	8010578 <dir_next+0x28>
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010576:	d301      	bcc.n	801057c <dir_next+0x2c>
 8010578:	2304      	movs	r3, #4
 801057a:	e0bb      	b.n	80106f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	899b      	ldrh	r3, [r3, #12]
 8010580:	461a      	mov	r2, r3
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	fbb3 f1f2 	udiv	r1, r3, r2
 8010588:	fb02 f201 	mul.w	r2, r2, r1
 801058c:	1a9b      	subs	r3, r3, r2
 801058e:	2b00      	cmp	r3, #0
 8010590:	f040 809d 	bne.w	80106ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	69db      	ldr	r3, [r3, #28]
 8010598:	1c5a      	adds	r2, r3, #1
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10b      	bne.n	80105be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	095b      	lsrs	r3, r3, #5
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	8912      	ldrh	r2, [r2, #8]
 80105ae:	4293      	cmp	r3, r2
 80105b0:	f0c0 808d 	bcc.w	80106ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	61da      	str	r2, [r3, #28]
 80105ba:	2304      	movs	r3, #4
 80105bc:	e09a      	b.n	80106f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	899b      	ldrh	r3, [r3, #12]
 80105c2:	461a      	mov	r2, r3
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	8952      	ldrh	r2, [r2, #10]
 80105ce:	3a01      	subs	r2, #1
 80105d0:	4013      	ands	r3, r2
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d17b      	bne.n	80106ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	4619      	mov	r1, r3
 80105de:	4610      	mov	r0, r2
 80105e0:	f7ff fc11 	bl	800fe06 <get_fat>
 80105e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d801      	bhi.n	80105f0 <dir_next+0xa0>
 80105ec:	2302      	movs	r3, #2
 80105ee:	e081      	b.n	80106f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f6:	d101      	bne.n	80105fc <dir_next+0xac>
 80105f8:	2301      	movs	r3, #1
 80105fa:	e07b      	b.n	80106f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	69db      	ldr	r3, [r3, #28]
 8010600:	697a      	ldr	r2, [r7, #20]
 8010602:	429a      	cmp	r2, r3
 8010604:	d359      	bcc.n	80106ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d104      	bne.n	8010616 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	61da      	str	r2, [r3, #28]
 8010612:	2304      	movs	r3, #4
 8010614:	e06e      	b.n	80106f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	699b      	ldr	r3, [r3, #24]
 801061c:	4619      	mov	r1, r3
 801061e:	4610      	mov	r0, r2
 8010620:	f7ff fe3d 	bl	801029e <create_chain>
 8010624:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d101      	bne.n	8010630 <dir_next+0xe0>
 801062c:	2307      	movs	r3, #7
 801062e:	e061      	b.n	80106f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2b01      	cmp	r3, #1
 8010634:	d101      	bne.n	801063a <dir_next+0xea>
 8010636:	2302      	movs	r3, #2
 8010638:	e05c      	b.n	80106f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010640:	d101      	bne.n	8010646 <dir_next+0xf6>
 8010642:	2301      	movs	r3, #1
 8010644:	e056      	b.n	80106f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff fadc 	bl	800fc04 <sync_window>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <dir_next+0x106>
 8010652:	2301      	movs	r3, #1
 8010654:	e04e      	b.n	80106f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	899b      	ldrh	r3, [r3, #12]
 8010660:	461a      	mov	r2, r3
 8010662:	2100      	movs	r1, #0
 8010664:	f7ff f905 	bl	800f872 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010668:	2300      	movs	r3, #0
 801066a:	613b      	str	r3, [r7, #16]
 801066c:	6979      	ldr	r1, [r7, #20]
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f7ff fbaa 	bl	800fdc8 <clust2sect>
 8010674:	4602      	mov	r2, r0
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	635a      	str	r2, [r3, #52]	; 0x34
 801067a:	e012      	b.n	80106a2 <dir_next+0x152>
						fs->wflag = 1;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2201      	movs	r2, #1
 8010680:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f7ff fabe 	bl	800fc04 <sync_window>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <dir_next+0x142>
 801068e:	2301      	movs	r3, #1
 8010690:	e030      	b.n	80106f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	3301      	adds	r3, #1
 8010696:	613b      	str	r3, [r7, #16]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801069c:	1c5a      	adds	r2, r3, #1
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	635a      	str	r2, [r3, #52]	; 0x34
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	895b      	ldrh	r3, [r3, #10]
 80106a6:	461a      	mov	r2, r3
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d3e6      	bcc.n	801067c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	1ad2      	subs	r2, r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80106c0:	6979      	ldr	r1, [r7, #20]
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f7ff fb80 	bl	800fdc8 <clust2sect>
 80106c8:	4602      	mov	r2, r0
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	68ba      	ldr	r2, [r7, #8]
 80106d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	899b      	ldrh	r3, [r3, #12]
 80106de:	461a      	mov	r2, r3
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80106e6:	fb02 f200 	mul.w	r2, r2, r0
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	18ca      	adds	r2, r1, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3718      	adds	r7, #24
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801070c:	2100      	movs	r1, #0
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7ff fe95 	bl	801043e <dir_sdi>
 8010714:	4603      	mov	r3, r0
 8010716:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d12b      	bne.n	8010776 <dir_alloc+0x7a>
		n = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	69db      	ldr	r3, [r3, #28]
 8010726:	4619      	mov	r1, r3
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f7ff faaf 	bl	800fc8c <move_window>
 801072e:	4603      	mov	r3, r0
 8010730:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010732:	7dfb      	ldrb	r3, [r7, #23]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11d      	bne.n	8010774 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a1b      	ldr	r3, [r3, #32]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	2be5      	cmp	r3, #229	; 0xe5
 8010740:	d004      	beq.n	801074c <dir_alloc+0x50>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d107      	bne.n	801075c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	3301      	adds	r3, #1
 8010750:	613b      	str	r3, [r7, #16]
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	429a      	cmp	r2, r3
 8010758:	d102      	bne.n	8010760 <dir_alloc+0x64>
 801075a:	e00c      	b.n	8010776 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801075c:	2300      	movs	r3, #0
 801075e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010760:	2101      	movs	r1, #1
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7ff fef4 	bl	8010550 <dir_next>
 8010768:	4603      	mov	r3, r0
 801076a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d0d7      	beq.n	8010722 <dir_alloc+0x26>
 8010772:	e000      	b.n	8010776 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010774:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010776:	7dfb      	ldrb	r3, [r7, #23]
 8010778:	2b04      	cmp	r3, #4
 801077a:	d101      	bne.n	8010780 <dir_alloc+0x84>
 801077c:	2307      	movs	r3, #7
 801077e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010780:	7dfb      	ldrb	r3, [r7, #23]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b084      	sub	sp, #16
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	331a      	adds	r3, #26
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe ffc7 	bl	800f72c <ld_word>
 801079e:	4603      	mov	r3, r0
 80107a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	2b03      	cmp	r3, #3
 80107a8:	d109      	bne.n	80107be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	3314      	adds	r3, #20
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe ffbc 	bl	800f72c <ld_word>
 80107b4:	4603      	mov	r3, r0
 80107b6:	041b      	lsls	r3, r3, #16
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80107be:	68fb      	ldr	r3, [r7, #12]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	331a      	adds	r3, #26
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	b292      	uxth	r2, r2
 80107dc:	4611      	mov	r1, r2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fe ffdf 	bl	800f7a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	2b03      	cmp	r3, #3
 80107ea:	d109      	bne.n	8010800 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	f103 0214 	add.w	r2, r3, #20
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	0c1b      	lsrs	r3, r3, #16
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fe ffd1 	bl	800f7a2 <st_word>
	}
}
 8010800:	bf00      	nop
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010812:	2304      	movs	r3, #4
 8010814:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801081c:	e03c      	b.n	8010898 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	69db      	ldr	r3, [r3, #28]
 8010822:	4619      	mov	r1, r3
 8010824:	6938      	ldr	r0, [r7, #16]
 8010826:	f7ff fa31 	bl	800fc8c <move_window>
 801082a:	4603      	mov	r3, r0
 801082c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801082e:	7dfb      	ldrb	r3, [r7, #23]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d136      	bne.n	80108a2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a1b      	ldr	r3, [r3, #32]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d102      	bne.n	8010848 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010842:	2304      	movs	r3, #4
 8010844:	75fb      	strb	r3, [r7, #23]
 8010846:	e031      	b.n	80108ac <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	330b      	adds	r3, #11
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010854:	73bb      	strb	r3, [r7, #14]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7bba      	ldrb	r2, [r7, #14]
 801085a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801085c:	7bfb      	ldrb	r3, [r7, #15]
 801085e:	2be5      	cmp	r3, #229	; 0xe5
 8010860:	d011      	beq.n	8010886 <dir_read+0x7e>
 8010862:	7bfb      	ldrb	r3, [r7, #15]
 8010864:	2b2e      	cmp	r3, #46	; 0x2e
 8010866:	d00e      	beq.n	8010886 <dir_read+0x7e>
 8010868:	7bbb      	ldrb	r3, [r7, #14]
 801086a:	2b0f      	cmp	r3, #15
 801086c:	d00b      	beq.n	8010886 <dir_read+0x7e>
 801086e:	7bbb      	ldrb	r3, [r7, #14]
 8010870:	f023 0320 	bic.w	r3, r3, #32
 8010874:	2b08      	cmp	r3, #8
 8010876:	bf0c      	ite	eq
 8010878:	2301      	moveq	r3, #1
 801087a:	2300      	movne	r3, #0
 801087c:	b2db      	uxtb	r3, r3
 801087e:	461a      	mov	r2, r3
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	4293      	cmp	r3, r2
 8010884:	d00f      	beq.n	80108a6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010886:	2100      	movs	r1, #0
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff fe61 	bl	8010550 <dir_next>
 801088e:	4603      	mov	r3, r0
 8010890:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010892:	7dfb      	ldrb	r3, [r7, #23]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d108      	bne.n	80108aa <dir_read+0xa2>
	while (dp->sect) {
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1be      	bne.n	801081e <dir_read+0x16>
 80108a0:	e004      	b.n	80108ac <dir_read+0xa4>
		if (res != FR_OK) break;
 80108a2:	bf00      	nop
 80108a4:	e002      	b.n	80108ac <dir_read+0xa4>
				break;
 80108a6:	bf00      	nop
 80108a8:	e000      	b.n	80108ac <dir_read+0xa4>
		if (res != FR_OK) break;
 80108aa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <dir_read+0xb0>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	61da      	str	r2, [r3, #28]
	return res;
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b086      	sub	sp, #24
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80108d0:	2100      	movs	r1, #0
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fdb3 	bl	801043e <dir_sdi>
 80108d8:	4603      	mov	r3, r0
 80108da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80108dc:	7dfb      	ldrb	r3, [r7, #23]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d001      	beq.n	80108e6 <dir_find+0x24>
 80108e2:	7dfb      	ldrb	r3, [r7, #23]
 80108e4:	e03e      	b.n	8010964 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	69db      	ldr	r3, [r3, #28]
 80108ea:	4619      	mov	r1, r3
 80108ec:	6938      	ldr	r0, [r7, #16]
 80108ee:	f7ff f9cd 	bl	800fc8c <move_window>
 80108f2:	4603      	mov	r3, r0
 80108f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d12f      	bne.n	801095c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010904:	7bfb      	ldrb	r3, [r7, #15]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d102      	bne.n	8010910 <dir_find+0x4e>
 801090a:	2304      	movs	r3, #4
 801090c:	75fb      	strb	r3, [r7, #23]
 801090e:	e028      	b.n	8010962 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a1b      	ldr	r3, [r3, #32]
 8010914:	330b      	adds	r3, #11
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801091c:	b2da      	uxtb	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6a1b      	ldr	r3, [r3, #32]
 8010926:	330b      	adds	r3, #11
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	f003 0308 	and.w	r3, r3, #8
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10a      	bne.n	8010948 <dir_find+0x86>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a18      	ldr	r0, [r3, #32]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	3324      	adds	r3, #36	; 0x24
 801093a:	220b      	movs	r2, #11
 801093c:	4619      	mov	r1, r3
 801093e:	f7fe ffb2 	bl	800f8a6 <mem_cmp>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00b      	beq.n	8010960 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010948:	2100      	movs	r1, #0
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff fe00 	bl	8010550 <dir_next>
 8010950:	4603      	mov	r3, r0
 8010952:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010954:	7dfb      	ldrb	r3, [r7, #23]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d0c5      	beq.n	80108e6 <dir_find+0x24>
 801095a:	e002      	b.n	8010962 <dir_find+0xa0>
		if (res != FR_OK) break;
 801095c:	bf00      	nop
 801095e:	e000      	b.n	8010962 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010960:	bf00      	nop

	return res;
 8010962:	7dfb      	ldrb	r3, [r7, #23]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801097a:	2101      	movs	r1, #1
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7ff febd 	bl	80106fc <dir_alloc>
 8010982:	4603      	mov	r3, r0
 8010984:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d11c      	bne.n	80109c6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	69db      	ldr	r3, [r3, #28]
 8010990:	4619      	mov	r1, r3
 8010992:	68b8      	ldr	r0, [r7, #8]
 8010994:	f7ff f97a 	bl	800fc8c <move_window>
 8010998:	4603      	mov	r3, r0
 801099a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d111      	bne.n	80109c6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6a1b      	ldr	r3, [r3, #32]
 80109a6:	2220      	movs	r2, #32
 80109a8:	2100      	movs	r1, #0
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fe ff61 	bl	800f872 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a18      	ldr	r0, [r3, #32]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3324      	adds	r3, #36	; 0x24
 80109b8:	220b      	movs	r2, #11
 80109ba:	4619      	mov	r1, r3
 80109bc:	f7fe ff38 	bl	800f830 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2201      	movs	r2, #1
 80109c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	69db      	ldr	r3, [r3, #28]
 80109e2:	4619      	mov	r1, r3
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7ff f951 	bl	800fc8c <move_window>
 80109ea:	4603      	mov	r3, r0
 80109ec:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80109ee:	7afb      	ldrb	r3, [r7, #11]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d106      	bne.n	8010a02 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6a1b      	ldr	r3, [r3, #32]
 80109f8:	22e5      	movs	r2, #229	; 0xe5
 80109fa:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2201      	movs	r2, #1
 8010a00:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010a02:	7afb      	ldrb	r3, [r7, #11]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3710      	adds	r7, #16
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b088      	sub	sp, #32
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	3324      	adds	r3, #36	; 0x24
 8010a20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010a22:	220b      	movs	r2, #11
 8010a24:	2120      	movs	r1, #32
 8010a26:	68b8      	ldr	r0, [r7, #8]
 8010a28:	f7fe ff23 	bl	800f872 <mem_set>
	si = i = 0; ni = 8;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	613b      	str	r3, [r7, #16]
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	617b      	str	r3, [r7, #20]
 8010a34:	2308      	movs	r3, #8
 8010a36:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	2b2e      	cmp	r3, #46	; 0x2e
 8010a42:	d12f      	bne.n	8010aa4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	617a      	str	r2, [r7, #20]
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010a52:	7ffb      	ldrb	r3, [r7, #31]
 8010a54:	2b2e      	cmp	r3, #46	; 0x2e
 8010a56:	d10a      	bne.n	8010a6e <create_name+0x62>
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d807      	bhi.n	8010a6e <create_name+0x62>
			sfn[i++] = c;
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	1c5a      	adds	r2, r3, #1
 8010a62:	613a      	str	r2, [r7, #16]
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	4413      	add	r3, r2
 8010a68:	7ffa      	ldrb	r2, [r7, #31]
 8010a6a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010a6c:	e7ea      	b.n	8010a44 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010a6e:	7ffb      	ldrb	r3, [r7, #31]
 8010a70:	2b2f      	cmp	r3, #47	; 0x2f
 8010a72:	d007      	beq.n	8010a84 <create_name+0x78>
 8010a74:	7ffb      	ldrb	r3, [r7, #31]
 8010a76:	2b5c      	cmp	r3, #92	; 0x5c
 8010a78:	d004      	beq.n	8010a84 <create_name+0x78>
 8010a7a:	7ffb      	ldrb	r3, [r7, #31]
 8010a7c:	2b20      	cmp	r3, #32
 8010a7e:	d901      	bls.n	8010a84 <create_name+0x78>
 8010a80:	2306      	movs	r3, #6
 8010a82:	e084      	b.n	8010b8e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010a84:	68fa      	ldr	r2, [r7, #12]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	441a      	add	r2, r3
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010a8e:	7ffb      	ldrb	r3, [r7, #31]
 8010a90:	2b20      	cmp	r3, #32
 8010a92:	d801      	bhi.n	8010a98 <create_name+0x8c>
 8010a94:	2224      	movs	r2, #36	; 0x24
 8010a96:	e000      	b.n	8010a9a <create_name+0x8e>
 8010a98:	2220      	movs	r2, #32
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	330b      	adds	r3, #11
 8010a9e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	e074      	b.n	8010b8e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	1c5a      	adds	r2, r3, #1
 8010aa8:	617a      	str	r2, [r7, #20]
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	4413      	add	r3, r2
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010ab2:	7ffb      	ldrb	r3, [r7, #31]
 8010ab4:	2b20      	cmp	r3, #32
 8010ab6:	d94e      	bls.n	8010b56 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010ab8:	7ffb      	ldrb	r3, [r7, #31]
 8010aba:	2b2f      	cmp	r3, #47	; 0x2f
 8010abc:	d006      	beq.n	8010acc <create_name+0xc0>
 8010abe:	7ffb      	ldrb	r3, [r7, #31]
 8010ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ac2:	d110      	bne.n	8010ae6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010ac4:	e002      	b.n	8010acc <create_name+0xc0>
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	617b      	str	r3, [r7, #20]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8010ad6:	d0f6      	beq.n	8010ac6 <create_name+0xba>
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	4413      	add	r3, r2
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ae2:	d0f0      	beq.n	8010ac6 <create_name+0xba>
			break;
 8010ae4:	e038      	b.n	8010b58 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010ae6:	7ffb      	ldrb	r3, [r7, #31]
 8010ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8010aea:	d003      	beq.n	8010af4 <create_name+0xe8>
 8010aec:	693a      	ldr	r2, [r7, #16]
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d30c      	bcc.n	8010b0e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	2b0b      	cmp	r3, #11
 8010af8:	d002      	beq.n	8010b00 <create_name+0xf4>
 8010afa:	7ffb      	ldrb	r3, [r7, #31]
 8010afc:	2b2e      	cmp	r3, #46	; 0x2e
 8010afe:	d001      	beq.n	8010b04 <create_name+0xf8>
 8010b00:	2306      	movs	r3, #6
 8010b02:	e044      	b.n	8010b8e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010b04:	2308      	movs	r3, #8
 8010b06:	613b      	str	r3, [r7, #16]
 8010b08:	230b      	movs	r3, #11
 8010b0a:	61bb      	str	r3, [r7, #24]
			continue;
 8010b0c:	e022      	b.n	8010b54 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	da04      	bge.n	8010b20 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010b16:	7ffb      	ldrb	r3, [r7, #31]
 8010b18:	3b80      	subs	r3, #128	; 0x80
 8010b1a:	4a1f      	ldr	r2, [pc, #124]	; (8010b98 <create_name+0x18c>)
 8010b1c:	5cd3      	ldrb	r3, [r2, r3]
 8010b1e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010b20:	7ffb      	ldrb	r3, [r7, #31]
 8010b22:	4619      	mov	r1, r3
 8010b24:	481d      	ldr	r0, [pc, #116]	; (8010b9c <create_name+0x190>)
 8010b26:	f7fe fee5 	bl	800f8f4 <chk_chr>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <create_name+0x128>
 8010b30:	2306      	movs	r3, #6
 8010b32:	e02c      	b.n	8010b8e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010b34:	7ffb      	ldrb	r3, [r7, #31]
 8010b36:	2b60      	cmp	r3, #96	; 0x60
 8010b38:	d905      	bls.n	8010b46 <create_name+0x13a>
 8010b3a:	7ffb      	ldrb	r3, [r7, #31]
 8010b3c:	2b7a      	cmp	r3, #122	; 0x7a
 8010b3e:	d802      	bhi.n	8010b46 <create_name+0x13a>
 8010b40:	7ffb      	ldrb	r3, [r7, #31]
 8010b42:	3b20      	subs	r3, #32
 8010b44:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	613a      	str	r2, [r7, #16]
 8010b4c:	68ba      	ldr	r2, [r7, #8]
 8010b4e:	4413      	add	r3, r2
 8010b50:	7ffa      	ldrb	r2, [r7, #31]
 8010b52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010b54:	e7a6      	b.n	8010aa4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	441a      	add	r2, r3
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d101      	bne.n	8010b6c <create_name+0x160>
 8010b68:	2306      	movs	r3, #6
 8010b6a:	e010      	b.n	8010b8e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2be5      	cmp	r3, #229	; 0xe5
 8010b72:	d102      	bne.n	8010b7a <create_name+0x16e>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	2205      	movs	r2, #5
 8010b78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010b7a:	7ffb      	ldrb	r3, [r7, #31]
 8010b7c:	2b20      	cmp	r3, #32
 8010b7e:	d801      	bhi.n	8010b84 <create_name+0x178>
 8010b80:	2204      	movs	r2, #4
 8010b82:	e000      	b.n	8010b86 <create_name+0x17a>
 8010b84:	2200      	movs	r2, #0
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	330b      	adds	r3, #11
 8010b8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010b8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3720      	adds	r7, #32
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	0801830c 	.word	0x0801830c
 8010b9c:	080182bc 	.word	0x080182bc

08010ba0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8010bba:	d00b      	beq.n	8010bd4 <follow_path+0x34>
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	2b5c      	cmp	r3, #92	; 0x5c
 8010bc2:	d007      	beq.n	8010bd4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	699a      	ldr	r2, [r3, #24]
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	609a      	str	r2, [r3, #8]
 8010bcc:	e00d      	b.n	8010bea <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	603b      	str	r3, [r7, #0]
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8010bda:	d0f8      	beq.n	8010bce <follow_path+0x2e>
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b5c      	cmp	r3, #92	; 0x5c
 8010be2:	d0f4      	beq.n	8010bce <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	2200      	movs	r2, #0
 8010be8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	2b1f      	cmp	r3, #31
 8010bf0:	d80a      	bhi.n	8010c08 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2280      	movs	r2, #128	; 0x80
 8010bf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f7ff fc1e 	bl	801043e <dir_sdi>
 8010c02:	4603      	mov	r3, r0
 8010c04:	75fb      	strb	r3, [r7, #23]
 8010c06:	e05b      	b.n	8010cc0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c08:	463b      	mov	r3, r7
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7ff fefd 	bl	8010a0c <create_name>
 8010c12:	4603      	mov	r3, r0
 8010c14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d14c      	bne.n	8010cb6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7ff fe50 	bl	80108c2 <dir_find>
 8010c22:	4603      	mov	r3, r0
 8010c24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010c2e:	7dfb      	ldrb	r3, [r7, #23]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01b      	beq.n	8010c6c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	2b04      	cmp	r3, #4
 8010c38:	d13f      	bne.n	8010cba <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010c3a:	7afb      	ldrb	r3, [r7, #11]
 8010c3c:	f003 0320 	and.w	r3, r3, #32
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00b      	beq.n	8010c5c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010c44:	7afb      	ldrb	r3, [r7, #11]
 8010c46:	f003 0304 	and.w	r3, r3, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d031      	beq.n	8010cb2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2280      	movs	r2, #128	; 0x80
 8010c52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010c5a:	e02e      	b.n	8010cba <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c5c:	7afb      	ldrb	r3, [r7, #11]
 8010c5e:	f003 0304 	and.w	r3, r3, #4
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d129      	bne.n	8010cba <follow_path+0x11a>
 8010c66:	2305      	movs	r3, #5
 8010c68:	75fb      	strb	r3, [r7, #23]
				break;
 8010c6a:	e026      	b.n	8010cba <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c6c:	7afb      	ldrb	r3, [r7, #11]
 8010c6e:	f003 0304 	and.w	r3, r3, #4
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d123      	bne.n	8010cbe <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	799b      	ldrb	r3, [r3, #6]
 8010c7a:	f003 0310 	and.w	r3, r3, #16
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d102      	bne.n	8010c88 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010c82:	2305      	movs	r3, #5
 8010c84:	75fb      	strb	r3, [r7, #23]
 8010c86:	e01b      	b.n	8010cc0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	695b      	ldr	r3, [r3, #20]
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	8992      	ldrh	r2, [r2, #12]
 8010c96:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c9a:	fb02 f200 	mul.w	r2, r2, r0
 8010c9e:	1a9b      	subs	r3, r3, r2
 8010ca0:	440b      	add	r3, r1
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f7ff fd70 	bl	801078a <ld_clust>
 8010caa:	4602      	mov	r2, r0
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	609a      	str	r2, [r3, #8]
 8010cb0:	e7aa      	b.n	8010c08 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010cb2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010cb4:	e7a8      	b.n	8010c08 <follow_path+0x68>
			if (res != FR_OK) break;
 8010cb6:	bf00      	nop
 8010cb8:	e002      	b.n	8010cc0 <follow_path+0x120>
				break;
 8010cba:	bf00      	nop
 8010cbc:	e000      	b.n	8010cc0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cbe:	bf00      	nop
			}
		}
	}

	return res;
 8010cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3718      	adds	r7, #24
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b087      	sub	sp, #28
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d031      	beq.n	8010d44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	617b      	str	r3, [r7, #20]
 8010ce6:	e002      	b.n	8010cee <get_ldnumber+0x24>
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	3301      	adds	r3, #1
 8010cec:	617b      	str	r3, [r7, #20]
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	2b20      	cmp	r3, #32
 8010cf4:	d903      	bls.n	8010cfe <get_ldnumber+0x34>
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	2b3a      	cmp	r3, #58	; 0x3a
 8010cfc:	d1f4      	bne.n	8010ce8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	2b3a      	cmp	r3, #58	; 0x3a
 8010d04:	d11c      	bne.n	8010d40 <get_ldnumber+0x76>
			tp = *path;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	60fa      	str	r2, [r7, #12]
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	3b30      	subs	r3, #48	; 0x30
 8010d16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	2b09      	cmp	r3, #9
 8010d1c:	d80e      	bhi.n	8010d3c <get_ldnumber+0x72>
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d10a      	bne.n	8010d3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d107      	bne.n	8010d3c <get_ldnumber+0x72>
					vol = (int)i;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	3301      	adds	r3, #1
 8010d34:	617b      	str	r3, [r7, #20]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	697a      	ldr	r2, [r7, #20]
 8010d3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	e002      	b.n	8010d46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d40:	2300      	movs	r3, #0
 8010d42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d44:	693b      	ldr	r3, [r7, #16]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	371c      	adds	r7, #28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
	...

08010d54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	70da      	strb	r2, [r3, #3]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f04f 32ff 	mov.w	r2, #4294967295
 8010d6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010d6c:	6839      	ldr	r1, [r7, #0]
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7fe ff8c 	bl	800fc8c <move_window>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <check_fs+0x2a>
 8010d7a:	2304      	movs	r3, #4
 8010d7c:	e038      	b.n	8010df0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	3338      	adds	r3, #56	; 0x38
 8010d82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fe fcd0 	bl	800f72c <ld_word>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	461a      	mov	r2, r3
 8010d90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d001      	beq.n	8010d9c <check_fs+0x48>
 8010d98:	2303      	movs	r3, #3
 8010d9a:	e029      	b.n	8010df0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010da2:	2be9      	cmp	r3, #233	; 0xe9
 8010da4:	d009      	beq.n	8010dba <check_fs+0x66>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010dac:	2beb      	cmp	r3, #235	; 0xeb
 8010dae:	d11e      	bne.n	8010dee <check_fs+0x9a>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010db6:	2b90      	cmp	r3, #144	; 0x90
 8010db8:	d119      	bne.n	8010dee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	3338      	adds	r3, #56	; 0x38
 8010dbe:	3336      	adds	r3, #54	; 0x36
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fe fccb 	bl	800f75c <ld_dword>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010dcc:	4a0a      	ldr	r2, [pc, #40]	; (8010df8 <check_fs+0xa4>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d101      	bne.n	8010dd6 <check_fs+0x82>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e00c      	b.n	8010df0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	3338      	adds	r3, #56	; 0x38
 8010dda:	3352      	adds	r3, #82	; 0x52
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe fcbd 	bl	800f75c <ld_dword>
 8010de2:	4602      	mov	r2, r0
 8010de4:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <check_fs+0xa8>)
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d101      	bne.n	8010dee <check_fs+0x9a>
 8010dea:	2300      	movs	r3, #0
 8010dec:	e000      	b.n	8010df0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010dee:	2302      	movs	r3, #2
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	00544146 	.word	0x00544146
 8010dfc:	33544146 	.word	0x33544146

08010e00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b096      	sub	sp, #88	; 0x58
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	2200      	movs	r2, #0
 8010e12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7ff ff58 	bl	8010cca <get_ldnumber>
 8010e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	da01      	bge.n	8010e26 <find_volume+0x26>
 8010e22:	230b      	movs	r3, #11
 8010e24:	e268      	b.n	80112f8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e26:	4ab0      	ldr	r2, [pc, #704]	; (80110e8 <find_volume+0x2e8>)
 8010e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d101      	bne.n	8010e3a <find_volume+0x3a>
 8010e36:	230c      	movs	r3, #12
 8010e38:	e25e      	b.n	80112f8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	f023 0301 	bic.w	r3, r3, #1
 8010e46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d01a      	beq.n	8010e86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	785b      	ldrb	r3, [r3, #1]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fe fbcb 	bl	800f5f0 <disk_status>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10c      	bne.n	8010e86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010e6c:	79fb      	ldrb	r3, [r7, #7]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d007      	beq.n	8010e82 <find_volume+0x82>
 8010e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e76:	f003 0304 	and.w	r3, r3, #4
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010e7e:	230a      	movs	r3, #10
 8010e80:	e23a      	b.n	80112f8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010e82:	2300      	movs	r3, #0
 8010e84:	e238      	b.n	80112f8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	2200      	movs	r2, #0
 8010e8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e96:	785b      	ldrb	r3, [r3, #1]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fe fbc3 	bl	800f624 <disk_initialize>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ea8:	f003 0301 	and.w	r3, r3, #1
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010eb0:	2303      	movs	r3, #3
 8010eb2:	e221      	b.n	80112f8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010eb4:	79fb      	ldrb	r3, [r7, #7]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d007      	beq.n	8010eca <find_volume+0xca>
 8010eba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ebe:	f003 0304 	and.w	r3, r3, #4
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d001      	beq.n	8010eca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010ec6:	230a      	movs	r3, #10
 8010ec8:	e216      	b.n	80112f8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	7858      	ldrb	r0, [r3, #1]
 8010ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed0:	330c      	adds	r3, #12
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	2102      	movs	r1, #2
 8010ed6:	f7fe fc0b 	bl	800f6f0 <disk_ioctl>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <find_volume+0xe4>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e209      	b.n	80112f8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	899b      	ldrh	r3, [r3, #12]
 8010ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010eec:	d80d      	bhi.n	8010f0a <find_volume+0x10a>
 8010eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef0:	899b      	ldrh	r3, [r3, #12]
 8010ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ef6:	d308      	bcc.n	8010f0a <find_volume+0x10a>
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efa:	899b      	ldrh	r3, [r3, #12]
 8010efc:	461a      	mov	r2, r3
 8010efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f00:	899b      	ldrh	r3, [r3, #12]
 8010f02:	3b01      	subs	r3, #1
 8010f04:	4013      	ands	r3, r2
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <find_volume+0x10e>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e1f4      	b.n	80112f8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f16:	f7ff ff1d 	bl	8010d54 <check_fs>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	d14b      	bne.n	8010fc0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f28:	2300      	movs	r3, #0
 8010f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8010f2c:	e01f      	b.n	8010f6e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f36:	011b      	lsls	r3, r3, #4
 8010f38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f3c:	4413      	add	r3, r2
 8010f3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f42:	3304      	adds	r3, #4
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d006      	beq.n	8010f58 <find_volume+0x158>
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	3308      	adds	r3, #8
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fc04 	bl	800f75c <ld_dword>
 8010f54:	4602      	mov	r2, r0
 8010f56:	e000      	b.n	8010f5a <find_volume+0x15a>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f62:	440b      	add	r3, r1
 8010f64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8010f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	d9dc      	bls.n	8010f2e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010f74:	2300      	movs	r3, #0
 8010f76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <find_volume+0x184>
 8010f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f80:	3b01      	subs	r3, #1
 8010f82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d005      	beq.n	8010fa6 <find_volume+0x1a6>
 8010f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f9e:	f7ff fed9 	bl	8010d54 <check_fs>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	e000      	b.n	8010fa8 <find_volume+0x1a8>
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d905      	bls.n	8010fc0 <find_volume+0x1c0>
 8010fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8010fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fbc:	2b03      	cmp	r3, #3
 8010fbe:	d9e1      	bls.n	8010f84 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d101      	bne.n	8010fcc <find_volume+0x1cc>
 8010fc8:	2301      	movs	r3, #1
 8010fca:	e195      	b.n	80112f8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d901      	bls.n	8010fd8 <find_volume+0x1d8>
 8010fd4:	230d      	movs	r3, #13
 8010fd6:	e18f      	b.n	80112f8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fda:	3338      	adds	r3, #56	; 0x38
 8010fdc:	330b      	adds	r3, #11
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fe fba4 	bl	800f72c <ld_word>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d001      	beq.n	8010ff4 <find_volume+0x1f4>
 8010ff0:	230d      	movs	r3, #13
 8010ff2:	e181      	b.n	80112f8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff6:	3338      	adds	r3, #56	; 0x38
 8010ff8:	3316      	adds	r3, #22
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe fb96 	bl	800f72c <ld_word>
 8011000:	4603      	mov	r3, r0
 8011002:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <find_volume+0x218>
 801100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100c:	3338      	adds	r3, #56	; 0x38
 801100e:	3324      	adds	r3, #36	; 0x24
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe fba3 	bl	800f75c <ld_dword>
 8011016:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801101c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102a:	789b      	ldrb	r3, [r3, #2]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d005      	beq.n	801103c <find_volume+0x23c>
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	789b      	ldrb	r3, [r3, #2]
 8011034:	2b02      	cmp	r3, #2
 8011036:	d001      	beq.n	801103c <find_volume+0x23c>
 8011038:	230d      	movs	r3, #13
 801103a:	e15d      	b.n	80112f8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103e:	789b      	ldrb	r3, [r3, #2]
 8011040:	461a      	mov	r2, r3
 8011042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011044:	fb02 f303 	mul.w	r3, r2, r3
 8011048:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011050:	b29a      	uxth	r2, r3
 8011052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011054:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011058:	895b      	ldrh	r3, [r3, #10]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d008      	beq.n	8011070 <find_volume+0x270>
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	895b      	ldrh	r3, [r3, #10]
 8011062:	461a      	mov	r2, r3
 8011064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011066:	895b      	ldrh	r3, [r3, #10]
 8011068:	3b01      	subs	r3, #1
 801106a:	4013      	ands	r3, r2
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <find_volume+0x274>
 8011070:	230d      	movs	r3, #13
 8011072:	e141      	b.n	80112f8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	3338      	adds	r3, #56	; 0x38
 8011078:	3311      	adds	r3, #17
 801107a:	4618      	mov	r0, r3
 801107c:	f7fe fb56 	bl	800f72c <ld_word>
 8011080:	4603      	mov	r3, r0
 8011082:	461a      	mov	r2, r3
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108a:	891b      	ldrh	r3, [r3, #8]
 801108c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801108e:	8992      	ldrh	r2, [r2, #12]
 8011090:	0952      	lsrs	r2, r2, #5
 8011092:	b292      	uxth	r2, r2
 8011094:	fbb3 f1f2 	udiv	r1, r3, r2
 8011098:	fb02 f201 	mul.w	r2, r2, r1
 801109c:	1a9b      	subs	r3, r3, r2
 801109e:	b29b      	uxth	r3, r3
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <find_volume+0x2a8>
 80110a4:	230d      	movs	r3, #13
 80110a6:	e127      	b.n	80112f8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80110a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110aa:	3338      	adds	r3, #56	; 0x38
 80110ac:	3313      	adds	r3, #19
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fe fb3c 	bl	800f72c <ld_word>
 80110b4:	4603      	mov	r3, r0
 80110b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80110b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d106      	bne.n	80110cc <find_volume+0x2cc>
 80110be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c0:	3338      	adds	r3, #56	; 0x38
 80110c2:	3320      	adds	r3, #32
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fe fb49 	bl	800f75c <ld_dword>
 80110ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ce:	3338      	adds	r3, #56	; 0x38
 80110d0:	330e      	adds	r3, #14
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fe fb2a 	bl	800f72c <ld_word>
 80110d8:	4603      	mov	r3, r0
 80110da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80110dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d104      	bne.n	80110ec <find_volume+0x2ec>
 80110e2:	230d      	movs	r3, #13
 80110e4:	e108      	b.n	80112f8 <find_volume+0x4f8>
 80110e6:	bf00      	nop
 80110e8:	2003c460 	.word	0x2003c460

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80110ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f0:	4413      	add	r3, r2
 80110f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f4:	8911      	ldrh	r1, [r2, #8]
 80110f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f8:	8992      	ldrh	r2, [r2, #12]
 80110fa:	0952      	lsrs	r2, r2, #5
 80110fc:	b292      	uxth	r2, r2
 80110fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8011102:	b292      	uxth	r2, r2
 8011104:	4413      	add	r3, r2
 8011106:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110c:	429a      	cmp	r2, r3
 801110e:	d201      	bcs.n	8011114 <find_volume+0x314>
 8011110:	230d      	movs	r3, #13
 8011112:	e0f1      	b.n	80112f8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801111c:	8952      	ldrh	r2, [r2, #10]
 801111e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011122:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <find_volume+0x32e>
 801112a:	230d      	movs	r3, #13
 801112c:	e0e4      	b.n	80112f8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801112e:	2303      	movs	r3, #3
 8011130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011136:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801113a:	4293      	cmp	r3, r2
 801113c:	d802      	bhi.n	8011144 <find_volume+0x344>
 801113e:	2302      	movs	r3, #2
 8011140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011146:	f640 72f5 	movw	r2, #4085	; 0xff5
 801114a:	4293      	cmp	r3, r2
 801114c:	d802      	bhi.n	8011154 <find_volume+0x354>
 801114e:	2301      	movs	r3, #1
 8011150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011156:	1c9a      	adds	r2, r3, #2
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011160:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011162:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011166:	441a      	add	r2, r3
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801116c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011170:	441a      	add	r2, r3
 8011172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011174:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801117a:	2b03      	cmp	r3, #3
 801117c:	d11e      	bne.n	80111bc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	3338      	adds	r3, #56	; 0x38
 8011182:	332a      	adds	r3, #42	; 0x2a
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe fad1 	bl	800f72c <ld_word>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d001      	beq.n	8011194 <find_volume+0x394>
 8011190:	230d      	movs	r3, #13
 8011192:	e0b1      	b.n	80112f8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011196:	891b      	ldrh	r3, [r3, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <find_volume+0x3a0>
 801119c:	230d      	movs	r3, #13
 801119e:	e0ab      	b.n	80112f8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	3338      	adds	r3, #56	; 0x38
 80111a4:	332c      	adds	r3, #44	; 0x2c
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fe fad8 	bl	800f75c <ld_dword>
 80111ac:	4602      	mov	r2, r0
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	69db      	ldr	r3, [r3, #28]
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	647b      	str	r3, [r7, #68]	; 0x44
 80111ba:	e01f      	b.n	80111fc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	891b      	ldrh	r3, [r3, #8]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d101      	bne.n	80111c8 <find_volume+0x3c8>
 80111c4:	230d      	movs	r3, #13
 80111c6:	e097      	b.n	80112f8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111ce:	441a      	add	r2, r3
 80111d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80111d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d103      	bne.n	80111e4 <find_volume+0x3e4>
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	69db      	ldr	r3, [r3, #28]
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	e00a      	b.n	80111fa <find_volume+0x3fa>
 80111e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e6:	69da      	ldr	r2, [r3, #28]
 80111e8:	4613      	mov	r3, r2
 80111ea:	005b      	lsls	r3, r3, #1
 80111ec:	4413      	add	r3, r2
 80111ee:	085a      	lsrs	r2, r3, #1
 80111f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f2:	69db      	ldr	r3, [r3, #28]
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80111fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	6a1a      	ldr	r2, [r3, #32]
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	4619      	mov	r1, r3
 8011206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011208:	440b      	add	r3, r1
 801120a:	3b01      	subs	r3, #1
 801120c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801120e:	8989      	ldrh	r1, [r1, #12]
 8011210:	fbb3 f3f1 	udiv	r3, r3, r1
 8011214:	429a      	cmp	r2, r3
 8011216:	d201      	bcs.n	801121c <find_volume+0x41c>
 8011218:	230d      	movs	r3, #13
 801121a:	e06d      	b.n	80112f8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	f04f 32ff 	mov.w	r2, #4294967295
 8011222:	615a      	str	r2, [r3, #20]
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	695a      	ldr	r2, [r3, #20]
 8011228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	2280      	movs	r2, #128	; 0x80
 8011230:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011236:	2b03      	cmp	r3, #3
 8011238:	d149      	bne.n	80112ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123c:	3338      	adds	r3, #56	; 0x38
 801123e:	3330      	adds	r3, #48	; 0x30
 8011240:	4618      	mov	r0, r3
 8011242:	f7fe fa73 	bl	800f72c <ld_word>
 8011246:	4603      	mov	r3, r0
 8011248:	2b01      	cmp	r3, #1
 801124a:	d140      	bne.n	80112ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801124c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801124e:	3301      	adds	r3, #1
 8011250:	4619      	mov	r1, r3
 8011252:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011254:	f7fe fd1a 	bl	800fc8c <move_window>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d137      	bne.n	80112ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	2200      	movs	r2, #0
 8011262:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	3338      	adds	r3, #56	; 0x38
 8011268:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe fa5d 	bl	800f72c <ld_word>
 8011272:	4603      	mov	r3, r0
 8011274:	461a      	mov	r2, r3
 8011276:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801127a:	429a      	cmp	r2, r3
 801127c:	d127      	bne.n	80112ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	3338      	adds	r3, #56	; 0x38
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe fa6a 	bl	800f75c <ld_dword>
 8011288:	4602      	mov	r2, r0
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <find_volume+0x500>)
 801128c:	429a      	cmp	r2, r3
 801128e:	d11e      	bne.n	80112ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	3338      	adds	r3, #56	; 0x38
 8011294:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011298:	4618      	mov	r0, r3
 801129a:	f7fe fa5f 	bl	800f75c <ld_dword>
 801129e:	4602      	mov	r2, r0
 80112a0:	4b18      	ldr	r3, [pc, #96]	; (8011304 <find_volume+0x504>)
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d113      	bne.n	80112ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80112a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a8:	3338      	adds	r3, #56	; 0x38
 80112aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fe fa54 	bl	800f75c <ld_dword>
 80112b4:	4602      	mov	r2, r0
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80112ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112bc:	3338      	adds	r3, #56	; 0x38
 80112be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fa4a 	bl	800f75c <ld_dword>
 80112c8:	4602      	mov	r2, r0
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80112d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80112d6:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <find_volume+0x508>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	3301      	adds	r3, #1
 80112dc:	b29a      	uxth	r2, r3
 80112de:	4b0a      	ldr	r3, [pc, #40]	; (8011308 <find_volume+0x508>)
 80112e0:	801a      	strh	r2, [r3, #0]
 80112e2:	4b09      	ldr	r3, [pc, #36]	; (8011308 <find_volume+0x508>)
 80112e4:	881a      	ldrh	r2, [r3, #0]
 80112e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80112ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ec:	2200      	movs	r2, #0
 80112ee:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80112f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112f2:	f7fe fc63 	bl	800fbbc <clear_lock>
#endif
	return FR_OK;
 80112f6:	2300      	movs	r3, #0
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3758      	adds	r7, #88	; 0x58
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	41615252 	.word	0x41615252
 8011304:	61417272 	.word	0x61417272
 8011308:	2003c464 	.word	0x2003c464

0801130c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011316:	2309      	movs	r3, #9
 8011318:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d01c      	beq.n	801135a <validate+0x4e>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d018      	beq.n	801135a <validate+0x4e>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d013      	beq.n	801135a <validate+0x4e>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	889a      	ldrh	r2, [r3, #4]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	88db      	ldrh	r3, [r3, #6]
 801133c:	429a      	cmp	r2, r3
 801133e:	d10c      	bne.n	801135a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	785b      	ldrb	r3, [r3, #1]
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe f952 	bl	800f5f0 <disk_status>
 801134c:	4603      	mov	r3, r0
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <validate+0x4e>
			res = FR_OK;
 8011356:	2300      	movs	r3, #0
 8011358:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801135a:	7bfb      	ldrb	r3, [r7, #15]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d102      	bne.n	8011366 <validate+0x5a>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	e000      	b.n	8011368 <validate+0x5c>
 8011366:	2300      	movs	r3, #0
 8011368:	683a      	ldr	r2, [r7, #0]
 801136a:	6013      	str	r3, [r2, #0]
	return res;
 801136c:	7bfb      	ldrb	r3, [r7, #15]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
	...

08011378 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	4613      	mov	r3, r2
 8011384:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801138a:	f107 0310 	add.w	r3, r7, #16
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fc9b 	bl	8010cca <get_ldnumber>
 8011394:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	2b00      	cmp	r3, #0
 801139a:	da01      	bge.n	80113a0 <f_mount+0x28>
 801139c:	230b      	movs	r3, #11
 801139e:	e02b      	b.n	80113f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80113a0:	4a17      	ldr	r2, [pc, #92]	; (8011400 <f_mount+0x88>)
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d005      	beq.n	80113bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80113b0:	69b8      	ldr	r0, [r7, #24]
 80113b2:	f7fe fc03 	bl	800fbbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	2200      	movs	r2, #0
 80113ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d002      	beq.n	80113c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80113c8:	68fa      	ldr	r2, [r7, #12]
 80113ca:	490d      	ldr	r1, [pc, #52]	; (8011400 <f_mount+0x88>)
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <f_mount+0x66>
 80113d8:	79fb      	ldrb	r3, [r7, #7]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d001      	beq.n	80113e2 <f_mount+0x6a>
 80113de:	2300      	movs	r3, #0
 80113e0:	e00a      	b.n	80113f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80113e2:	f107 010c 	add.w	r1, r7, #12
 80113e6:	f107 0308 	add.w	r3, r7, #8
 80113ea:	2200      	movs	r2, #0
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fd07 	bl	8010e00 <find_volume>
 80113f2:	4603      	mov	r3, r0
 80113f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80113f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3720      	adds	r7, #32
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	2003c460 	.word	0x2003c460

08011404 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b098      	sub	sp, #96	; 0x60
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	4613      	mov	r3, r2
 8011410:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d101      	bne.n	801141c <f_open+0x18>
 8011418:	2309      	movs	r3, #9
 801141a:	e1ba      	b.n	8011792 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011422:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011424:	79fa      	ldrb	r2, [r7, #7]
 8011426:	f107 0110 	add.w	r1, r7, #16
 801142a:	f107 0308 	add.w	r3, r7, #8
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fce6 	bl	8010e00 <find_volume>
 8011434:	4603      	mov	r3, r0
 8011436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801143a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801143e:	2b00      	cmp	r3, #0
 8011440:	f040 819e 	bne.w	8011780 <f_open+0x37c>
		dj.obj.fs = fs;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	f107 0314 	add.w	r3, r7, #20
 801144e:	4611      	mov	r1, r2
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fba5 	bl	8010ba0 <follow_path>
 8011456:	4603      	mov	r3, r0
 8011458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801145c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011460:	2b00      	cmp	r3, #0
 8011462:	d11a      	bne.n	801149a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011464:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011468:	b25b      	sxtb	r3, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	da03      	bge.n	8011476 <f_open+0x72>
				res = FR_INVALID_NAME;
 801146e:	2306      	movs	r3, #6
 8011470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011474:	e011      	b.n	801149a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	f023 0301 	bic.w	r3, r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	bf14      	ite	ne
 8011480:	2301      	movne	r3, #1
 8011482:	2300      	moveq	r3, #0
 8011484:	b2db      	uxtb	r3, r3
 8011486:	461a      	mov	r2, r3
 8011488:	f107 0314 	add.w	r3, r7, #20
 801148c:	4611      	mov	r1, r2
 801148e:	4618      	mov	r0, r3
 8011490:	f7fe fa4c 	bl	800f92c <chk_lock>
 8011494:	4603      	mov	r3, r0
 8011496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	f003 031c 	and.w	r3, r3, #28
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d07e      	beq.n	80115a2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80114a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d017      	beq.n	80114dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80114ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114b0:	2b04      	cmp	r3, #4
 80114b2:	d10e      	bne.n	80114d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80114b4:	f7fe fa96 	bl	800f9e4 <enq_lock>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d006      	beq.n	80114cc <f_open+0xc8>
 80114be:	f107 0314 	add.w	r3, r7, #20
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7ff fa52 	bl	801096c <dir_register>
 80114c8:	4603      	mov	r3, r0
 80114ca:	e000      	b.n	80114ce <f_open+0xca>
 80114cc:	2312      	movs	r3, #18
 80114ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	f043 0308 	orr.w	r3, r3, #8
 80114d8:	71fb      	strb	r3, [r7, #7]
 80114da:	e010      	b.n	80114fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80114dc:	7ebb      	ldrb	r3, [r7, #26]
 80114de:	f003 0311 	and.w	r3, r3, #17
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d003      	beq.n	80114ee <f_open+0xea>
					res = FR_DENIED;
 80114e6:	2307      	movs	r3, #7
 80114e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80114ec:	e007      	b.n	80114fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80114ee:	79fb      	ldrb	r3, [r7, #7]
 80114f0:	f003 0304 	and.w	r3, r3, #4
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <f_open+0xfa>
 80114f8:	2308      	movs	r3, #8
 80114fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80114fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011502:	2b00      	cmp	r3, #0
 8011504:	d167      	bne.n	80115d6 <f_open+0x1d2>
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	f003 0308 	and.w	r3, r3, #8
 801150c:	2b00      	cmp	r3, #0
 801150e:	d062      	beq.n	80115d6 <f_open+0x1d2>
				dw = GET_FATTIME();
 8011510:	4ba2      	ldr	r3, [pc, #648]	; (801179c <f_open+0x398>)
 8011512:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011516:	330e      	adds	r3, #14
 8011518:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801151a:	4618      	mov	r0, r3
 801151c:	f7fe f95c 	bl	800f7d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011522:	3316      	adds	r3, #22
 8011524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe f956 	bl	800f7d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152e:	330b      	adds	r3, #11
 8011530:	2220      	movs	r2, #32
 8011532:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011538:	4611      	mov	r1, r2
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff f925 	bl	801078a <ld_clust>
 8011540:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011546:	2200      	movs	r2, #0
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff f93d 	bl	80107c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011550:	331c      	adds	r3, #28
 8011552:	2100      	movs	r1, #0
 8011554:	4618      	mov	r0, r3
 8011556:	f7fe f93f 	bl	800f7d8 <st_dword>
					fs->wflag = 1;
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	2201      	movs	r2, #1
 801155e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011562:	2b00      	cmp	r3, #0
 8011564:	d037      	beq.n	80115d6 <f_open+0x1d2>
						dw = fs->winsect;
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801156a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801156c:	f107 0314 	add.w	r3, r7, #20
 8011570:	2200      	movs	r2, #0
 8011572:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011574:	4618      	mov	r0, r3
 8011576:	f7fe fe2d 	bl	80101d4 <remove_chain>
 801157a:	4603      	mov	r3, r0
 801157c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011584:	2b00      	cmp	r3, #0
 8011586:	d126      	bne.n	80115d6 <f_open+0x1d2>
							res = move_window(fs, dw);
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801158c:	4618      	mov	r0, r3
 801158e:	f7fe fb7d 	bl	800fc8c <move_window>
 8011592:	4603      	mov	r3, r0
 8011594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801159c:	3a01      	subs	r2, #1
 801159e:	611a      	str	r2, [r3, #16]
 80115a0:	e019      	b.n	80115d6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80115a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d115      	bne.n	80115d6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80115aa:	7ebb      	ldrb	r3, [r7, #26]
 80115ac:	f003 0310 	and.w	r3, r3, #16
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d003      	beq.n	80115bc <f_open+0x1b8>
					res = FR_NO_FILE;
 80115b4:	2304      	movs	r3, #4
 80115b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80115ba:	e00c      	b.n	80115d6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80115bc:	79fb      	ldrb	r3, [r7, #7]
 80115be:	f003 0302 	and.w	r3, r3, #2
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <f_open+0x1d2>
 80115c6:	7ebb      	ldrb	r3, [r7, #26]
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <f_open+0x1d2>
						res = FR_DENIED;
 80115d0:	2307      	movs	r3, #7
 80115d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80115d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d128      	bne.n	8011630 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	f003 0308 	and.w	r3, r3, #8
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d003      	beq.n	80115f0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80115e8:	79fb      	ldrb	r3, [r7, #7]
 80115ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80115f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115fe:	79fb      	ldrb	r3, [r7, #7]
 8011600:	f023 0301 	bic.w	r3, r3, #1
 8011604:	2b00      	cmp	r3, #0
 8011606:	bf14      	ite	ne
 8011608:	2301      	movne	r3, #1
 801160a:	2300      	moveq	r3, #0
 801160c:	b2db      	uxtb	r3, r3
 801160e:	461a      	mov	r2, r3
 8011610:	f107 0314 	add.w	r3, r7, #20
 8011614:	4611      	mov	r1, r2
 8011616:	4618      	mov	r0, r3
 8011618:	f7fe fa06 	bl	800fa28 <inc_lock>
 801161c:	4602      	mov	r2, r0
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d102      	bne.n	8011630 <f_open+0x22c>
 801162a:	2302      	movs	r3, #2
 801162c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011634:	2b00      	cmp	r3, #0
 8011636:	f040 80a3 	bne.w	8011780 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801163e:	4611      	mov	r1, r2
 8011640:	4618      	mov	r0, r3
 8011642:	f7ff f8a2 	bl	801078a <ld_clust>
 8011646:	4602      	mov	r2, r0
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801164e:	331c      	adds	r3, #28
 8011650:	4618      	mov	r0, r3
 8011652:	f7fe f883 	bl	800f75c <ld_dword>
 8011656:	4602      	mov	r2, r0
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011662:	693a      	ldr	r2, [r7, #16]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	88da      	ldrh	r2, [r3, #6]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	79fa      	ldrb	r2, [r7, #7]
 8011674:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2200      	movs	r2, #0
 801167a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2200      	movs	r2, #0
 8011680:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2200      	movs	r2, #0
 8011686:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	3330      	adds	r3, #48	; 0x30
 801168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011690:	2100      	movs	r1, #0
 8011692:	4618      	mov	r0, r3
 8011694:	f7fe f8ed 	bl	800f872 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011698:	79fb      	ldrb	r3, [r7, #7]
 801169a:	f003 0320 	and.w	r3, r3, #32
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d06e      	beq.n	8011780 <f_open+0x37c>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d06a      	beq.n	8011780 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68da      	ldr	r2, [r3, #12]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	895b      	ldrh	r3, [r3, #10]
 80116b6:	461a      	mov	r2, r3
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	899b      	ldrh	r3, [r3, #12]
 80116bc:	fb03 f302 	mul.w	r3, r3, r2
 80116c0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	657b      	str	r3, [r7, #84]	; 0x54
 80116ce:	e016      	b.n	80116fe <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe fb96 	bl	800fe06 <get_fat>
 80116da:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80116dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d802      	bhi.n	80116e8 <f_open+0x2e4>
 80116e2:	2302      	movs	r3, #2
 80116e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80116e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ee:	d102      	bne.n	80116f6 <f_open+0x2f2>
 80116f0:	2301      	movs	r3, #1
 80116f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	657b      	str	r3, [r7, #84]	; 0x54
 80116fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011702:	2b00      	cmp	r3, #0
 8011704:	d103      	bne.n	801170e <f_open+0x30a>
 8011706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801170a:	429a      	cmp	r2, r3
 801170c:	d8e0      	bhi.n	80116d0 <f_open+0x2cc>
				}
				fp->clust = clst;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011712:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011718:	2b00      	cmp	r3, #0
 801171a:	d131      	bne.n	8011780 <f_open+0x37c>
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	899b      	ldrh	r3, [r3, #12]
 8011720:	461a      	mov	r2, r3
 8011722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011724:	fbb3 f1f2 	udiv	r1, r3, r2
 8011728:	fb02 f201 	mul.w	r2, r2, r1
 801172c:	1a9b      	subs	r3, r3, r2
 801172e:	2b00      	cmp	r3, #0
 8011730:	d026      	beq.n	8011780 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe fb46 	bl	800fdc8 <clust2sect>
 801173c:	6478      	str	r0, [r7, #68]	; 0x44
 801173e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011740:	2b00      	cmp	r3, #0
 8011742:	d103      	bne.n	801174c <f_open+0x348>
						res = FR_INT_ERR;
 8011744:	2302      	movs	r3, #2
 8011746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801174a:	e019      	b.n	8011780 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	461a      	mov	r2, r3
 8011752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011754:	fbb3 f2f2 	udiv	r2, r3, r2
 8011758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801175a:	441a      	add	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	7858      	ldrb	r0, [r3, #1]
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	6a1a      	ldr	r2, [r3, #32]
 801176e:	2301      	movs	r3, #1
 8011770:	f7fd ff7e 	bl	800f670 <disk_read>
 8011774:	4603      	mov	r3, r0
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <f_open+0x37c>
 801177a:	2301      	movs	r3, #1
 801177c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <f_open+0x38a>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2200      	movs	r2, #0
 801178c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801178e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011792:	4618      	mov	r0, r3
 8011794:	3760      	adds	r7, #96	; 0x60
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	274a0000 	.word	0x274a0000

080117a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b08e      	sub	sp, #56	; 0x38
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	2200      	movs	r2, #0
 80117b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f107 0214 	add.w	r2, r7, #20
 80117be:	4611      	mov	r1, r2
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff fda3 	bl	801130c <validate>
 80117c6:	4603      	mov	r3, r0
 80117c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80117cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d107      	bne.n	80117e4 <f_read+0x44>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	7d5b      	ldrb	r3, [r3, #21]
 80117d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80117dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <f_read+0x4a>
 80117e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117e8:	e135      	b.n	8011a56 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	7d1b      	ldrb	r3, [r3, #20]
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d101      	bne.n	80117fa <f_read+0x5a>
 80117f6:	2307      	movs	r3, #7
 80117f8:	e12d      	b.n	8011a56 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	68da      	ldr	r2, [r3, #12]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	699b      	ldr	r3, [r3, #24]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	429a      	cmp	r2, r3
 801180c:	f240 811e 	bls.w	8011a4c <f_read+0x2ac>
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011814:	e11a      	b.n	8011a4c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	697a      	ldr	r2, [r7, #20]
 801181c:	8992      	ldrh	r2, [r2, #12]
 801181e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011822:	fb02 f201 	mul.w	r2, r2, r1
 8011826:	1a9b      	subs	r3, r3, r2
 8011828:	2b00      	cmp	r3, #0
 801182a:	f040 80d5 	bne.w	80119d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	699b      	ldr	r3, [r3, #24]
 8011832:	697a      	ldr	r2, [r7, #20]
 8011834:	8992      	ldrh	r2, [r2, #12]
 8011836:	fbb3 f3f2 	udiv	r3, r3, r2
 801183a:	697a      	ldr	r2, [r7, #20]
 801183c:	8952      	ldrh	r2, [r2, #10]
 801183e:	3a01      	subs	r2, #1
 8011840:	4013      	ands	r3, r2
 8011842:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d12f      	bne.n	80118aa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	699b      	ldr	r3, [r3, #24]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d103      	bne.n	801185a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	633b      	str	r3, [r7, #48]	; 0x30
 8011858:	e013      	b.n	8011882 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185e:	2b00      	cmp	r3, #0
 8011860:	d007      	beq.n	8011872 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	699b      	ldr	r3, [r3, #24]
 8011866:	4619      	mov	r1, r3
 8011868:	68f8      	ldr	r0, [r7, #12]
 801186a:	f7fe fdb0 	bl	80103ce <clmt_clust>
 801186e:	6338      	str	r0, [r7, #48]	; 0x30
 8011870:	e007      	b.n	8011882 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	4619      	mov	r1, r3
 801187a:	4610      	mov	r0, r2
 801187c:	f7fe fac3 	bl	800fe06 <get_fat>
 8011880:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	2b01      	cmp	r3, #1
 8011886:	d804      	bhi.n	8011892 <f_read+0xf2>
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2202      	movs	r2, #2
 801188c:	755a      	strb	r2, [r3, #21]
 801188e:	2302      	movs	r3, #2
 8011890:	e0e1      	b.n	8011a56 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011898:	d104      	bne.n	80118a4 <f_read+0x104>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2201      	movs	r2, #1
 801189e:	755a      	strb	r2, [r3, #21]
 80118a0:	2301      	movs	r3, #1
 80118a2:	e0d8      	b.n	8011a56 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80118aa:	697a      	ldr	r2, [r7, #20]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	69db      	ldr	r3, [r3, #28]
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7fe fa88 	bl	800fdc8 <clust2sect>
 80118b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d104      	bne.n	80118ca <f_read+0x12a>
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2202      	movs	r2, #2
 80118c4:	755a      	strb	r2, [r3, #21]
 80118c6:	2302      	movs	r3, #2
 80118c8:	e0c5      	b.n	8011a56 <f_read+0x2b6>
			sect += csect;
 80118ca:	69ba      	ldr	r2, [r7, #24]
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	4413      	add	r3, r2
 80118d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	899b      	ldrh	r3, [r3, #12]
 80118d6:	461a      	mov	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	fbb3 f3f2 	udiv	r3, r3, r2
 80118de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80118e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d041      	beq.n	801196a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80118e6:	69fa      	ldr	r2, [r7, #28]
 80118e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ea:	4413      	add	r3, r2
 80118ec:	697a      	ldr	r2, [r7, #20]
 80118ee:	8952      	ldrh	r2, [r2, #10]
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d905      	bls.n	8011900 <f_read+0x160>
					cc = fs->csize - csect;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	895b      	ldrh	r3, [r3, #10]
 80118f8:	461a      	mov	r2, r3
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	7858      	ldrb	r0, [r3, #1]
 8011904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011906:	69ba      	ldr	r2, [r7, #24]
 8011908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801190a:	f7fd feb1 	bl	800f670 <disk_read>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d004      	beq.n	801191e <f_read+0x17e>
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2201      	movs	r2, #1
 8011918:	755a      	strb	r2, [r3, #21]
 801191a:	2301      	movs	r3, #1
 801191c:	e09b      	b.n	8011a56 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	7d1b      	ldrb	r3, [r3, #20]
 8011922:	b25b      	sxtb	r3, r3
 8011924:	2b00      	cmp	r3, #0
 8011926:	da18      	bge.n	801195a <f_read+0x1ba>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6a1a      	ldr	r2, [r3, #32]
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011932:	429a      	cmp	r2, r3
 8011934:	d911      	bls.n	801195a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6a1a      	ldr	r2, [r3, #32]
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	697a      	ldr	r2, [r7, #20]
 8011940:	8992      	ldrh	r2, [r2, #12]
 8011942:	fb02 f303 	mul.w	r3, r2, r3
 8011946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011948:	18d0      	adds	r0, r2, r3
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	899b      	ldrh	r3, [r3, #12]
 8011954:	461a      	mov	r2, r3
 8011956:	f7fd ff6b 	bl	800f830 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	899b      	ldrh	r3, [r3, #12]
 801195e:	461a      	mov	r2, r3
 8011960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011962:	fb02 f303 	mul.w	r3, r2, r3
 8011966:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011968:	e05c      	b.n	8011a24 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	6a1b      	ldr	r3, [r3, #32]
 801196e:	69ba      	ldr	r2, [r7, #24]
 8011970:	429a      	cmp	r2, r3
 8011972:	d02e      	beq.n	80119d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	7d1b      	ldrb	r3, [r3, #20]
 8011978:	b25b      	sxtb	r3, r3
 801197a:	2b00      	cmp	r3, #0
 801197c:	da18      	bge.n	80119b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	7858      	ldrb	r0, [r3, #1]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6a1a      	ldr	r2, [r3, #32]
 801198c:	2301      	movs	r3, #1
 801198e:	f7fd fe8f 	bl	800f6b0 <disk_write>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d004      	beq.n	80119a2 <f_read+0x202>
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2201      	movs	r2, #1
 801199c:	755a      	strb	r2, [r3, #21]
 801199e:	2301      	movs	r3, #1
 80119a0:	e059      	b.n	8011a56 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	7d1b      	ldrb	r3, [r3, #20]
 80119a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119aa:	b2da      	uxtb	r2, r3
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	7858      	ldrb	r0, [r3, #1]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119ba:	2301      	movs	r3, #1
 80119bc:	69ba      	ldr	r2, [r7, #24]
 80119be:	f7fd fe57 	bl	800f670 <disk_read>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d004      	beq.n	80119d2 <f_read+0x232>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2201      	movs	r2, #1
 80119cc:	755a      	strb	r2, [r3, #21]
 80119ce:	2301      	movs	r3, #1
 80119d0:	e041      	b.n	8011a56 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	69ba      	ldr	r2, [r7, #24]
 80119d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	899b      	ldrh	r3, [r3, #12]
 80119dc:	4618      	mov	r0, r3
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	697a      	ldr	r2, [r7, #20]
 80119e4:	8992      	ldrh	r2, [r2, #12]
 80119e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80119ea:	fb02 f201 	mul.w	r2, r2, r1
 80119ee:	1a9b      	subs	r3, r3, r2
 80119f0:	1ac3      	subs	r3, r0, r3
 80119f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80119f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d901      	bls.n	8011a00 <f_read+0x260>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	699b      	ldr	r3, [r3, #24]
 8011a0a:	697a      	ldr	r2, [r7, #20]
 8011a0c:	8992      	ldrh	r2, [r2, #12]
 8011a0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a12:	fb02 f200 	mul.w	r2, r2, r0
 8011a16:	1a9b      	subs	r3, r3, r2
 8011a18:	440b      	add	r3, r1
 8011a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a20:	f7fd ff06 	bl	800f830 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a28:	4413      	add	r3, r2
 8011a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	699a      	ldr	r2, [r3, #24]
 8011a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a32:	441a      	add	r2, r3
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	619a      	str	r2, [r3, #24]
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	441a      	add	r2, r3
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	601a      	str	r2, [r3, #0]
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f47f aee1 	bne.w	8011816 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3738      	adds	r7, #56	; 0x38
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b08c      	sub	sp, #48	; 0x30
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	60b9      	str	r1, [r7, #8]
 8011a68:	607a      	str	r2, [r7, #4]
 8011a6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	2200      	movs	r2, #0
 8011a74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f107 0210 	add.w	r2, r7, #16
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7ff fc44 	bl	801130c <validate>
 8011a84:	4603      	mov	r3, r0
 8011a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <f_write+0x44>
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	7d5b      	ldrb	r3, [r3, #21]
 8011a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d002      	beq.n	8011aa8 <f_write+0x4a>
 8011aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011aa6:	e16a      	b.n	8011d7e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	7d1b      	ldrb	r3, [r3, #20]
 8011aac:	f003 0302 	and.w	r3, r3, #2
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d101      	bne.n	8011ab8 <f_write+0x5a>
 8011ab4:	2307      	movs	r3, #7
 8011ab6:	e162      	b.n	8011d7e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	699a      	ldr	r2, [r3, #24]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	441a      	add	r2, r3
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	699b      	ldr	r3, [r3, #24]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	f080 814c 	bcs.w	8011d62 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	699b      	ldr	r3, [r3, #24]
 8011ace:	43db      	mvns	r3, r3
 8011ad0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011ad2:	e146      	b.n	8011d62 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	693a      	ldr	r2, [r7, #16]
 8011ada:	8992      	ldrh	r2, [r2, #12]
 8011adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ae0:	fb02 f201 	mul.w	r2, r2, r1
 8011ae4:	1a9b      	subs	r3, r3, r2
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 80f1 	bne.w	8011cce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	699b      	ldr	r3, [r3, #24]
 8011af0:	693a      	ldr	r2, [r7, #16]
 8011af2:	8992      	ldrh	r2, [r2, #12]
 8011af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011af8:	693a      	ldr	r2, [r7, #16]
 8011afa:	8952      	ldrh	r2, [r2, #10]
 8011afc:	3a01      	subs	r2, #1
 8011afe:	4013      	ands	r3, r2
 8011b00:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d143      	bne.n	8011b90 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10c      	bne.n	8011b2a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d11a      	bne.n	8011b52 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2100      	movs	r1, #0
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7fe fbbc 	bl	801029e <create_chain>
 8011b26:	62b8      	str	r0, [r7, #40]	; 0x28
 8011b28:	e013      	b.n	8011b52 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d007      	beq.n	8011b42 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	699b      	ldr	r3, [r3, #24]
 8011b36:	4619      	mov	r1, r3
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7fe fc48 	bl	80103ce <clmt_clust>
 8011b3e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011b40:	e007      	b.n	8011b52 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	69db      	ldr	r3, [r3, #28]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	4610      	mov	r0, r2
 8011b4c:	f7fe fba7 	bl	801029e <create_chain>
 8011b50:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 8109 	beq.w	8011d6c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d104      	bne.n	8011b6a <f_write+0x10c>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2202      	movs	r2, #2
 8011b64:	755a      	strb	r2, [r3, #21]
 8011b66:	2302      	movs	r3, #2
 8011b68:	e109      	b.n	8011d7e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b70:	d104      	bne.n	8011b7c <f_write+0x11e>
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2201      	movs	r2, #1
 8011b76:	755a      	strb	r2, [r3, #21]
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e100      	b.n	8011d7e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b80:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d102      	bne.n	8011b90 <f_write+0x132>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b8e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	7d1b      	ldrb	r3, [r3, #20]
 8011b94:	b25b      	sxtb	r3, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	da18      	bge.n	8011bcc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	7858      	ldrb	r0, [r3, #1]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	6a1a      	ldr	r2, [r3, #32]
 8011ba8:	2301      	movs	r3, #1
 8011baa:	f7fd fd81 	bl	800f6b0 <disk_write>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d004      	beq.n	8011bbe <f_write+0x160>
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	755a      	strb	r2, [r3, #21]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e0df      	b.n	8011d7e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	7d1b      	ldrb	r3, [r3, #20]
 8011bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	69db      	ldr	r3, [r3, #28]
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	f7fe f8f7 	bl	800fdc8 <clust2sect>
 8011bda:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d104      	bne.n	8011bec <f_write+0x18e>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2202      	movs	r2, #2
 8011be6:	755a      	strb	r2, [r3, #21]
 8011be8:	2302      	movs	r3, #2
 8011bea:	e0c8      	b.n	8011d7e <f_write+0x320>
			sect += csect;
 8011bec:	697a      	ldr	r2, [r7, #20]
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	899b      	ldrh	r3, [r3, #12]
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c00:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011c02:	6a3b      	ldr	r3, [r7, #32]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d043      	beq.n	8011c90 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011c08:	69ba      	ldr	r2, [r7, #24]
 8011c0a:	6a3b      	ldr	r3, [r7, #32]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	693a      	ldr	r2, [r7, #16]
 8011c10:	8952      	ldrh	r2, [r2, #10]
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d905      	bls.n	8011c22 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	895b      	ldrh	r3, [r3, #10]
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	7858      	ldrb	r0, [r3, #1]
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	69f9      	ldr	r1, [r7, #28]
 8011c2c:	f7fd fd40 	bl	800f6b0 <disk_write>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d004      	beq.n	8011c40 <f_write+0x1e2>
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	755a      	strb	r2, [r3, #21]
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e09e      	b.n	8011d7e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6a1a      	ldr	r2, [r3, #32]
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	6a3a      	ldr	r2, [r7, #32]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d918      	bls.n	8011c80 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6a1a      	ldr	r2, [r3, #32]
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	693a      	ldr	r2, [r7, #16]
 8011c5e:	8992      	ldrh	r2, [r2, #12]
 8011c60:	fb02 f303 	mul.w	r3, r2, r3
 8011c64:	69fa      	ldr	r2, [r7, #28]
 8011c66:	18d1      	adds	r1, r2, r3
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	899b      	ldrh	r3, [r3, #12]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	f7fd fddf 	bl	800f830 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	7d1b      	ldrb	r3, [r3, #20]
 8011c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	899b      	ldrh	r3, [r3, #12]
 8011c84:	461a      	mov	r2, r3
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	fb02 f303 	mul.w	r3, r2, r3
 8011c8c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011c8e:	e04b      	b.n	8011d28 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6a1b      	ldr	r3, [r3, #32]
 8011c94:	697a      	ldr	r2, [r7, #20]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d016      	beq.n	8011cc8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	699a      	ldr	r2, [r3, #24]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d210      	bcs.n	8011cc8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	7858      	ldrb	r0, [r3, #1]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	f7fd fcdc 	bl	800f670 <disk_read>
 8011cb8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d004      	beq.n	8011cc8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	755a      	strb	r2, [r3, #21]
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e05a      	b.n	8011d7e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	697a      	ldr	r2, [r7, #20]
 8011ccc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	899b      	ldrh	r3, [r3, #12]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	699b      	ldr	r3, [r3, #24]
 8011cd8:	693a      	ldr	r2, [r7, #16]
 8011cda:	8992      	ldrh	r2, [r2, #12]
 8011cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ce0:	fb02 f201 	mul.w	r2, r2, r1
 8011ce4:	1a9b      	subs	r3, r3, r2
 8011ce6:	1ac3      	subs	r3, r0, r3
 8011ce8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d901      	bls.n	8011cf6 <f_write+0x298>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	693a      	ldr	r2, [r7, #16]
 8011d02:	8992      	ldrh	r2, [r2, #12]
 8011d04:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d08:	fb02 f200 	mul.w	r2, r2, r0
 8011d0c:	1a9b      	subs	r3, r3, r2
 8011d0e:	440b      	add	r3, r1
 8011d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d12:	69f9      	ldr	r1, [r7, #28]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fd fd8b 	bl	800f830 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	7d1b      	ldrb	r3, [r3, #20]
 8011d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011d28:	69fa      	ldr	r2, [r7, #28]
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	4413      	add	r3, r2
 8011d2e:	61fb      	str	r3, [r7, #28]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	699a      	ldr	r2, [r3, #24]
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	441a      	add	r2, r3
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	619a      	str	r2, [r3, #24]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	68da      	ldr	r2, [r3, #12]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	bf38      	it	cc
 8011d48:	461a      	movcc	r2, r3
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	60da      	str	r2, [r3, #12]
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	441a      	add	r2, r3
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	601a      	str	r2, [r3, #0]
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	f47f aeb5 	bne.w	8011ad4 <f_write+0x76>
 8011d6a:	e000      	b.n	8011d6e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d6c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	7d1b      	ldrb	r3, [r3, #20]
 8011d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011d7c:	2300      	movs	r3, #0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3730      	adds	r7, #48	; 0x30
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f107 0208 	add.w	r2, r7, #8
 8011d96:	4611      	mov	r1, r2
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7ff fab7 	bl	801130c <validate>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011da2:	7dfb      	ldrb	r3, [r7, #23]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d167      	bne.n	8011e78 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	7d1b      	ldrb	r3, [r3, #20]
 8011dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d061      	beq.n	8011e78 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	7d1b      	ldrb	r3, [r3, #20]
 8011db8:	b25b      	sxtb	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	da15      	bge.n	8011dea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	7858      	ldrb	r0, [r3, #1]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6a1a      	ldr	r2, [r3, #32]
 8011dcc:	2301      	movs	r3, #1
 8011dce:	f7fd fc6f 	bl	800f6b0 <disk_write>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d001      	beq.n	8011ddc <f_sync+0x54>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e04e      	b.n	8011e7a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
 8011de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011dea:	4b26      	ldr	r3, [pc, #152]	; (8011e84 <f_sync+0xfc>)
 8011dec:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	4619      	mov	r1, r3
 8011df6:	4610      	mov	r0, r2
 8011df8:	f7fd ff48 	bl	800fc8c <move_window>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011e00:	7dfb      	ldrb	r3, [r7, #23]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d138      	bne.n	8011e78 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	330b      	adds	r3, #11
 8011e10:	781a      	ldrb	r2, [r3, #0]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	330b      	adds	r3, #11
 8011e16:	f042 0220 	orr.w	r2, r2, #32
 8011e1a:	b2d2      	uxtb	r2, r2
 8011e1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6818      	ldr	r0, [r3, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	461a      	mov	r2, r3
 8011e28:	68f9      	ldr	r1, [r7, #12]
 8011e2a:	f7fe fccd 	bl	80107c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f103 021c 	add.w	r2, r3, #28
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4610      	mov	r0, r2
 8011e3c:	f7fd fccc 	bl	800f7d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3316      	adds	r3, #22
 8011e44:	6939      	ldr	r1, [r7, #16]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fd fcc6 	bl	800f7d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	3312      	adds	r3, #18
 8011e50:	2100      	movs	r1, #0
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fd fca5 	bl	800f7a2 <st_word>
					fs->wflag = 1;
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fd ff41 	bl	800fce8 <sync_fs>
 8011e66:	4603      	mov	r3, r0
 8011e68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	7d1b      	ldrb	r3, [r3, #20]
 8011e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3718      	adds	r7, #24
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	274a0000 	.word	0x274a0000

08011e88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7ff ff79 	bl	8011d88 <f_sync>
 8011e96:	4603      	mov	r3, r0
 8011e98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011e9a:	7bfb      	ldrb	r3, [r7, #15]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d118      	bne.n	8011ed2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f107 0208 	add.w	r2, r7, #8
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff fa2f 	bl	801130c <validate>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d10c      	bne.n	8011ed2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	691b      	ldr	r3, [r3, #16]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fd fe41 	bl	800fb44 <dec_lock>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d102      	bne.n	8011ed2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011edc:	b590      	push	{r4, r7, lr}
 8011ede:	b091      	sub	sp, #68	; 0x44
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011ee4:	f107 0108 	add.w	r1, r7, #8
 8011ee8:	1d3b      	adds	r3, r7, #4
 8011eea:	2200      	movs	r2, #0
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fe ff87 	bl	8010e00 <find_volume>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d131      	bne.n	8011f64 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	f107 030c 	add.w	r3, r7, #12
 8011f0a:	4611      	mov	r1, r2
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe fe47 	bl	8010ba0 <follow_path>
 8011f12:	4603      	mov	r3, r0
 8011f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011f18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d11a      	bne.n	8011f56 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011f20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011f24:	b25b      	sxtb	r3, r3
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	da03      	bge.n	8011f32 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	697a      	ldr	r2, [r7, #20]
 8011f2e:	619a      	str	r2, [r3, #24]
 8011f30:	e011      	b.n	8011f56 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011f32:	7cbb      	ldrb	r3, [r7, #18]
 8011f34:	f003 0310 	and.w	r3, r3, #16
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d009      	beq.n	8011f50 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f40:	68bc      	ldr	r4, [r7, #8]
 8011f42:	4611      	mov	r1, r2
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe fc20 	bl	801078a <ld_clust>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	61a3      	str	r3, [r4, #24]
 8011f4e:	e002      	b.n	8011f56 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011f50:	2305      	movs	r3, #5
 8011f52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f5a:	2b04      	cmp	r3, #4
 8011f5c:	d102      	bne.n	8011f64 <f_chdir+0x88>
 8011f5e:	2305      	movs	r3, #5
 8011f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3744      	adds	r7, #68	; 0x44
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd90      	pop	{r4, r7, pc}

08011f70 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b090      	sub	sp, #64	; 0x40
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f107 0208 	add.w	r2, r7, #8
 8011f80:	4611      	mov	r1, r2
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff f9c2 	bl	801130c <validate>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d103      	bne.n	8011f9e <f_lseek+0x2e>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	7d5b      	ldrb	r3, [r3, #21]
 8011f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011f9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <f_lseek+0x3c>
 8011fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011faa:	e201      	b.n	80123b0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f000 80d9 	beq.w	8012168 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fbc:	d15a      	bne.n	8012074 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	1d1a      	adds	r2, r3, #4
 8011fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	617b      	str	r3, [r7, #20]
 8011fce:	2302      	movs	r3, #2
 8011fd0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d03a      	beq.n	8012054 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	613b      	str	r3, [r7, #16]
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	3302      	adds	r3, #2
 8011fea:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fd ff03 	bl	800fe06 <get_fat>
 8012000:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	2b01      	cmp	r3, #1
 8012006:	d804      	bhi.n	8012012 <f_lseek+0xa2>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2202      	movs	r2, #2
 801200c:	755a      	strb	r2, [r3, #21]
 801200e:	2302      	movs	r3, #2
 8012010:	e1ce      	b.n	80123b0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012018:	d104      	bne.n	8012024 <f_lseek+0xb4>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2201      	movs	r2, #1
 801201e:	755a      	strb	r2, [r3, #21]
 8012020:	2301      	movs	r3, #1
 8012022:	e1c5      	b.n	80123b0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3301      	adds	r3, #1
 8012028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801202a:	429a      	cmp	r2, r3
 801202c:	d0de      	beq.n	8011fec <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801202e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	429a      	cmp	r2, r3
 8012034:	d809      	bhi.n	801204a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012038:	1d1a      	adds	r2, r3, #4
 801203a:	627a      	str	r2, [r7, #36]	; 0x24
 801203c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801203e:	601a      	str	r2, [r3, #0]
 8012040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012042:	1d1a      	adds	r2, r3, #4
 8012044:	627a      	str	r2, [r7, #36]	; 0x24
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	69db      	ldr	r3, [r3, #28]
 801204e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012050:	429a      	cmp	r2, r3
 8012052:	d3c4      	bcc.n	8011fde <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801205a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801205c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	429a      	cmp	r2, r3
 8012062:	d803      	bhi.n	801206c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	2200      	movs	r2, #0
 8012068:	601a      	str	r2, [r3, #0]
 801206a:	e19f      	b.n	80123ac <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801206c:	2311      	movs	r3, #17
 801206e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012072:	e19b      	b.n	80123ac <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	429a      	cmp	r2, r3
 801207c:	d902      	bls.n	8012084 <f_lseek+0x114>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 818d 	beq.w	80123ac <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	3b01      	subs	r3, #1
 8012096:	4619      	mov	r1, r3
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7fe f998 	bl	80103ce <clmt_clust>
 801209e:	4602      	mov	r2, r0
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80120a4:	68ba      	ldr	r2, [r7, #8]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	69db      	ldr	r3, [r3, #28]
 80120aa:	4619      	mov	r1, r3
 80120ac:	4610      	mov	r0, r2
 80120ae:	f7fd fe8b 	bl	800fdc8 <clust2sect>
 80120b2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d104      	bne.n	80120c4 <f_lseek+0x154>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2202      	movs	r2, #2
 80120be:	755a      	strb	r2, [r3, #21]
 80120c0:	2302      	movs	r3, #2
 80120c2:	e175      	b.n	80123b0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	68ba      	ldr	r2, [r7, #8]
 80120ca:	8992      	ldrh	r2, [r2, #12]
 80120cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80120d0:	68ba      	ldr	r2, [r7, #8]
 80120d2:	8952      	ldrh	r2, [r2, #10]
 80120d4:	3a01      	subs	r2, #1
 80120d6:	4013      	ands	r3, r2
 80120d8:	69ba      	ldr	r2, [r7, #24]
 80120da:	4413      	add	r3, r2
 80120dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	8992      	ldrh	r2, [r2, #12]
 80120e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80120ea:	fb02 f201 	mul.w	r2, r2, r1
 80120ee:	1a9b      	subs	r3, r3, r2
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	f000 815b 	beq.w	80123ac <f_lseek+0x43c>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6a1b      	ldr	r3, [r3, #32]
 80120fa:	69ba      	ldr	r2, [r7, #24]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	f000 8155 	beq.w	80123ac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	7d1b      	ldrb	r3, [r3, #20]
 8012106:	b25b      	sxtb	r3, r3
 8012108:	2b00      	cmp	r3, #0
 801210a:	da18      	bge.n	801213e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	7858      	ldrb	r0, [r3, #1]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a1a      	ldr	r2, [r3, #32]
 801211a:	2301      	movs	r3, #1
 801211c:	f7fd fac8 	bl	800f6b0 <disk_write>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d004      	beq.n	8012130 <f_lseek+0x1c0>
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2201      	movs	r2, #1
 801212a:	755a      	strb	r2, [r3, #21]
 801212c:	2301      	movs	r3, #1
 801212e:	e13f      	b.n	80123b0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	7d1b      	ldrb	r3, [r3, #20]
 8012134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012138:	b2da      	uxtb	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	7858      	ldrb	r0, [r3, #1]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012148:	2301      	movs	r3, #1
 801214a:	69ba      	ldr	r2, [r7, #24]
 801214c:	f7fd fa90 	bl	800f670 <disk_read>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d004      	beq.n	8012160 <f_lseek+0x1f0>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2201      	movs	r2, #1
 801215a:	755a      	strb	r2, [r3, #21]
 801215c:	2301      	movs	r3, #1
 801215e:	e127      	b.n	80123b0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	69ba      	ldr	r2, [r7, #24]
 8012164:	621a      	str	r2, [r3, #32]
 8012166:	e121      	b.n	80123ac <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	683a      	ldr	r2, [r7, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d908      	bls.n	8012184 <f_lseek+0x214>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	7d1b      	ldrb	r3, [r3, #20]
 8012176:	f003 0302 	and.w	r3, r3, #2
 801217a:	2b00      	cmp	r3, #0
 801217c:	d102      	bne.n	8012184 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	637b      	str	r3, [r7, #52]	; 0x34
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012192:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 80b5 	beq.w	8012306 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	895b      	ldrh	r3, [r3, #10]
 80121a0:	461a      	mov	r2, r3
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	899b      	ldrh	r3, [r3, #12]
 80121a6:	fb03 f302 	mul.w	r3, r3, r2
 80121aa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80121ac:	6a3b      	ldr	r3, [r7, #32]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d01b      	beq.n	80121ea <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	1e5a      	subs	r2, r3, #1
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80121bc:	6a3b      	ldr	r3, [r7, #32]
 80121be:	1e59      	subs	r1, r3, #1
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d30f      	bcc.n	80121ea <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80121ca:	6a3b      	ldr	r3, [r7, #32]
 80121cc:	1e5a      	subs	r2, r3, #1
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	425b      	negs	r3, r3
 80121d2:	401a      	ands	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	699b      	ldr	r3, [r3, #24]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	69db      	ldr	r3, [r3, #28]
 80121e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80121e8:	e022      	b.n	8012230 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d119      	bne.n	801222a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2100      	movs	r1, #0
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fe f84f 	bl	801029e <create_chain>
 8012200:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012204:	2b01      	cmp	r3, #1
 8012206:	d104      	bne.n	8012212 <f_lseek+0x2a2>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2202      	movs	r2, #2
 801220c:	755a      	strb	r2, [r3, #21]
 801220e:	2302      	movs	r3, #2
 8012210:	e0ce      	b.n	80123b0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012218:	d104      	bne.n	8012224 <f_lseek+0x2b4>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2201      	movs	r2, #1
 801221e:	755a      	strb	r2, [r3, #21]
 8012220:	2301      	movs	r3, #1
 8012222:	e0c5      	b.n	80123b0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012228:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801222e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012232:	2b00      	cmp	r3, #0
 8012234:	d067      	beq.n	8012306 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012236:	e03a      	b.n	80122ae <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012238:	683a      	ldr	r2, [r7, #0]
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	603b      	str	r3, [r7, #0]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	699a      	ldr	r2, [r3, #24]
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	441a      	add	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	7d1b      	ldrb	r3, [r3, #20]
 8012250:	f003 0302 	and.w	r3, r3, #2
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00b      	beq.n	8012270 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe f81e 	bl	801029e <create_chain>
 8012262:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012266:	2b00      	cmp	r3, #0
 8012268:	d108      	bne.n	801227c <f_lseek+0x30c>
							ofs = 0; break;
 801226a:	2300      	movs	r3, #0
 801226c:	603b      	str	r3, [r7, #0]
 801226e:	e022      	b.n	80122b6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012274:	4618      	mov	r0, r3
 8012276:	f7fd fdc6 	bl	800fe06 <get_fat>
 801227a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012282:	d104      	bne.n	801228e <f_lseek+0x31e>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2201      	movs	r2, #1
 8012288:	755a      	strb	r2, [r3, #21]
 801228a:	2301      	movs	r3, #1
 801228c:	e090      	b.n	80123b0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012290:	2b01      	cmp	r3, #1
 8012292:	d904      	bls.n	801229e <f_lseek+0x32e>
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	69db      	ldr	r3, [r3, #28]
 8012298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801229a:	429a      	cmp	r2, r3
 801229c:	d304      	bcc.n	80122a8 <f_lseek+0x338>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2202      	movs	r2, #2
 80122a2:	755a      	strb	r2, [r3, #21]
 80122a4:	2302      	movs	r3, #2
 80122a6:	e083      	b.n	80123b0 <f_lseek+0x440>
					fp->clust = clst;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d8c0      	bhi.n	8012238 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	699a      	ldr	r2, [r3, #24]
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	441a      	add	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	899b      	ldrh	r3, [r3, #12]
 80122c6:	461a      	mov	r2, r3
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80122ce:	fb02 f201 	mul.w	r2, r2, r1
 80122d2:	1a9b      	subs	r3, r3, r2
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d016      	beq.n	8012306 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fd fd73 	bl	800fdc8 <clust2sect>
 80122e2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80122e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d104      	bne.n	80122f4 <f_lseek+0x384>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2202      	movs	r2, #2
 80122ee:	755a      	strb	r2, [r3, #21]
 80122f0:	2302      	movs	r3, #2
 80122f2:	e05d      	b.n	80123b0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	899b      	ldrh	r3, [r3, #12]
 80122f8:	461a      	mov	r2, r3
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012302:	4413      	add	r3, r2
 8012304:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	699a      	ldr	r2, [r3, #24]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	429a      	cmp	r2, r3
 8012310:	d90a      	bls.n	8012328 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	699a      	ldr	r2, [r3, #24]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	7d1b      	ldrb	r3, [r3, #20]
 801231e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012322:	b2da      	uxtb	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	8992      	ldrh	r2, [r2, #12]
 8012330:	fbb3 f1f2 	udiv	r1, r3, r2
 8012334:	fb02 f201 	mul.w	r2, r2, r1
 8012338:	1a9b      	subs	r3, r3, r2
 801233a:	2b00      	cmp	r3, #0
 801233c:	d036      	beq.n	80123ac <f_lseek+0x43c>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6a1b      	ldr	r3, [r3, #32]
 8012342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012344:	429a      	cmp	r2, r3
 8012346:	d031      	beq.n	80123ac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	7d1b      	ldrb	r3, [r3, #20]
 801234c:	b25b      	sxtb	r3, r3
 801234e:	2b00      	cmp	r3, #0
 8012350:	da18      	bge.n	8012384 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	7858      	ldrb	r0, [r3, #1]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a1a      	ldr	r2, [r3, #32]
 8012360:	2301      	movs	r3, #1
 8012362:	f7fd f9a5 	bl	800f6b0 <disk_write>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d004      	beq.n	8012376 <f_lseek+0x406>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2201      	movs	r2, #1
 8012370:	755a      	strb	r2, [r3, #21]
 8012372:	2301      	movs	r3, #1
 8012374:	e01c      	b.n	80123b0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	7d1b      	ldrb	r3, [r3, #20]
 801237a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801237e:	b2da      	uxtb	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	7858      	ldrb	r0, [r3, #1]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801238e:	2301      	movs	r3, #1
 8012390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012392:	f7fd f96d 	bl	800f670 <disk_read>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d004      	beq.n	80123a6 <f_lseek+0x436>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2201      	movs	r2, #1
 80123a0:	755a      	strb	r2, [r3, #21]
 80123a2:	2301      	movs	r3, #1
 80123a4:	e004      	b.n	80123b0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80123ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3740      	adds	r7, #64	; 0x40
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b09e      	sub	sp, #120	; 0x78
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80123c0:	2300      	movs	r3, #0
 80123c2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80123c4:	f107 010c 	add.w	r1, r7, #12
 80123c8:	1d3b      	adds	r3, r7, #4
 80123ca:	2202      	movs	r2, #2
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fe fd17 	bl	8010e00 <find_volume>
 80123d2:	4603      	mov	r3, r0
 80123d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80123dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f040 80a4 	bne.w	801252e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe fbd6 	bl	8010ba0 <follow_path>
 80123f4:	4603      	mov	r3, r0
 80123f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80123fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d108      	bne.n	8012414 <f_unlink+0x5c>
 8012402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012406:	f003 0320 	and.w	r3, r3, #32
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801240e:	2306      	movs	r3, #6
 8012410:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012414:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012418:	2b00      	cmp	r3, #0
 801241a:	d108      	bne.n	801242e <f_unlink+0x76>
 801241c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012420:	2102      	movs	r1, #2
 8012422:	4618      	mov	r0, r3
 8012424:	f7fd fa82 	bl	800f92c <chk_lock>
 8012428:	4603      	mov	r3, r0
 801242a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801242e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012432:	2b00      	cmp	r3, #0
 8012434:	d17b      	bne.n	801252e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012436:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801243a:	b25b      	sxtb	r3, r3
 801243c:	2b00      	cmp	r3, #0
 801243e:	da03      	bge.n	8012448 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012440:	2306      	movs	r3, #6
 8012442:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012446:	e008      	b.n	801245a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012448:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801244c:	f003 0301 	and.w	r3, r3, #1
 8012450:	2b00      	cmp	r3, #0
 8012452:	d002      	beq.n	801245a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012454:	2307      	movs	r3, #7
 8012456:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801245a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801245e:	2b00      	cmp	r3, #0
 8012460:	d13d      	bne.n	80124de <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012466:	4611      	mov	r1, r2
 8012468:	4618      	mov	r0, r3
 801246a:	f7fe f98e 	bl	801078a <ld_clust>
 801246e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012470:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012474:	f003 0310 	and.w	r3, r3, #16
 8012478:	2b00      	cmp	r3, #0
 801247a:	d030      	beq.n	80124de <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	699b      	ldr	r3, [r3, #24]
 8012480:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012482:	429a      	cmp	r2, r3
 8012484:	d103      	bne.n	801248e <f_unlink+0xd6>
						res = FR_DENIED;
 8012486:	2307      	movs	r3, #7
 8012488:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801248c:	e027      	b.n	80124de <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012494:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012496:	f107 0310 	add.w	r3, r7, #16
 801249a:	2100      	movs	r1, #0
 801249c:	4618      	mov	r0, r3
 801249e:	f7fd ffce 	bl	801043e <dir_sdi>
 80124a2:	4603      	mov	r3, r0
 80124a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80124a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d116      	bne.n	80124de <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80124b0:	f107 0310 	add.w	r3, r7, #16
 80124b4:	2100      	movs	r1, #0
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fe f9a6 	bl	8010808 <dir_read>
 80124bc:	4603      	mov	r3, r0
 80124be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80124c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d102      	bne.n	80124d0 <f_unlink+0x118>
 80124ca:	2307      	movs	r3, #7
 80124cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80124d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124d4:	2b04      	cmp	r3, #4
 80124d6:	d102      	bne.n	80124de <f_unlink+0x126>
 80124d8:	2300      	movs	r3, #0
 80124da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80124de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d123      	bne.n	801252e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80124e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fe fa70 	bl	80109d0 <dir_remove>
 80124f0:	4603      	mov	r3, r0
 80124f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80124f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d10c      	bne.n	8012518 <f_unlink+0x160>
 80124fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012500:	2b00      	cmp	r3, #0
 8012502:	d009      	beq.n	8012518 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012508:	2200      	movs	r2, #0
 801250a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801250c:	4618      	mov	r0, r3
 801250e:	f7fd fe61 	bl	80101d4 <remove_chain>
 8012512:	4603      	mov	r3, r0
 8012514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012518:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801251c:	2b00      	cmp	r3, #0
 801251e:	d106      	bne.n	801252e <f_unlink+0x176>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	4618      	mov	r0, r3
 8012524:	f7fd fbe0 	bl	800fce8 <sync_fs>
 8012528:	4603      	mov	r3, r0
 801252a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801252e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012532:	4618      	mov	r0, r3
 8012534:	3778      	adds	r7, #120	; 0x78
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
	...

0801253c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b096      	sub	sp, #88	; 0x58
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012544:	f107 0108 	add.w	r1, r7, #8
 8012548:	1d3b      	adds	r3, r7, #4
 801254a:	2202      	movs	r2, #2
 801254c:	4618      	mov	r0, r3
 801254e:	f7fe fc57 	bl	8010e00 <find_volume>
 8012552:	4603      	mov	r3, r0
 8012554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801255c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012560:	2b00      	cmp	r3, #0
 8012562:	f040 80fe 	bne.w	8012762 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	f107 030c 	add.w	r3, r7, #12
 801256c:	4611      	mov	r1, r2
 801256e:	4618      	mov	r0, r3
 8012570:	f7fe fb16 	bl	8010ba0 <follow_path>
 8012574:	4603      	mov	r3, r0
 8012576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801257a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801257e:	2b00      	cmp	r3, #0
 8012580:	d102      	bne.n	8012588 <f_mkdir+0x4c>
 8012582:	2308      	movs	r3, #8
 8012584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801258c:	2b04      	cmp	r3, #4
 801258e:	d108      	bne.n	80125a2 <f_mkdir+0x66>
 8012590:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012594:	f003 0320 	and.w	r3, r3, #32
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801259c:	2306      	movs	r3, #6
 801259e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80125a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125a6:	2b04      	cmp	r3, #4
 80125a8:	f040 80db 	bne.w	8012762 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80125ac:	f107 030c 	add.w	r3, r7, #12
 80125b0:	2100      	movs	r1, #0
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fd fe73 	bl	801029e <create_chain>
 80125b8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	895b      	ldrh	r3, [r3, #10]
 80125be:	461a      	mov	r2, r3
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	899b      	ldrh	r3, [r3, #12]
 80125c4:	fb03 f302 	mul.w	r3, r3, r2
 80125c8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80125d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d102      	bne.n	80125dc <f_mkdir+0xa0>
 80125d6:	2307      	movs	r3, #7
 80125d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80125dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d102      	bne.n	80125e8 <f_mkdir+0xac>
 80125e2:	2302      	movs	r3, #2
 80125e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80125e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ee:	d102      	bne.n	80125f6 <f_mkdir+0xba>
 80125f0:	2301      	movs	r3, #1
 80125f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80125f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d106      	bne.n	801260c <f_mkdir+0xd0>
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	4618      	mov	r0, r3
 8012602:	f7fd faff 	bl	800fc04 <sync_window>
 8012606:	4603      	mov	r3, r0
 8012608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801260c:	4b58      	ldr	r3, [pc, #352]	; (8012770 <f_mkdir+0x234>)
 801260e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012614:	2b00      	cmp	r3, #0
 8012616:	d16c      	bne.n	80126f2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801261c:	4618      	mov	r0, r3
 801261e:	f7fd fbd3 	bl	800fdc8 <clust2sect>
 8012622:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	3338      	adds	r3, #56	; 0x38
 8012628:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	899b      	ldrh	r3, [r3, #12]
 801262e:	461a      	mov	r2, r3
 8012630:	2100      	movs	r1, #0
 8012632:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012634:	f7fd f91d 	bl	800f872 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012638:	220b      	movs	r2, #11
 801263a:	2120      	movs	r1, #32
 801263c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801263e:	f7fd f918 	bl	800f872 <mem_set>
					dir[DIR_Name] = '.';
 8012642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012644:	222e      	movs	r2, #46	; 0x2e
 8012646:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264a:	330b      	adds	r3, #11
 801264c:	2210      	movs	r2, #16
 801264e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012652:	3316      	adds	r3, #22
 8012654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012656:	4618      	mov	r0, r3
 8012658:	f7fd f8be 	bl	800f7d8 <st_dword>
					st_clust(fs, dir, dcl);
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe f8b0 	bl	80107c8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801266a:	3320      	adds	r3, #32
 801266c:	2220      	movs	r2, #32
 801266e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012670:	4618      	mov	r0, r3
 8012672:	f7fd f8dd 	bl	800f830 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012678:	3321      	adds	r3, #33	; 0x21
 801267a:	222e      	movs	r2, #46	; 0x2e
 801267c:	701a      	strb	r2, [r3, #0]
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	2b03      	cmp	r3, #3
 8012688:	d106      	bne.n	8012698 <f_mkdir+0x15c>
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012690:	429a      	cmp	r2, r3
 8012692:	d101      	bne.n	8012698 <f_mkdir+0x15c>
 8012694:	2300      	movs	r3, #0
 8012696:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012698:	68b8      	ldr	r0, [r7, #8]
 801269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801269c:	3320      	adds	r3, #32
 801269e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126a0:	4619      	mov	r1, r3
 80126a2:	f7fe f891 	bl	80107c8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	895b      	ldrh	r3, [r3, #10]
 80126aa:	653b      	str	r3, [r7, #80]	; 0x50
 80126ac:	e01c      	b.n	80126e8 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80126ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b0:	1c5a      	adds	r2, r3, #1
 80126b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80126b4:	68ba      	ldr	r2, [r7, #8]
 80126b6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	2201      	movs	r2, #1
 80126bc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7fd fa9f 	bl	800fc04 <sync_window>
 80126c6:	4603      	mov	r3, r0
 80126c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80126cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10d      	bne.n	80126f0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	899b      	ldrh	r3, [r3, #12]
 80126d8:	461a      	mov	r2, r3
 80126da:	2100      	movs	r1, #0
 80126dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126de:	f7fd f8c8 	bl	800f872 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80126e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126e4:	3b01      	subs	r3, #1
 80126e6:	653b      	str	r3, [r7, #80]	; 0x50
 80126e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1df      	bne.n	80126ae <f_mkdir+0x172>
 80126ee:	e000      	b.n	80126f2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80126f0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80126f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d107      	bne.n	801270a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80126fa:	f107 030c 	add.w	r3, r7, #12
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe f934 	bl	801096c <dir_register>
 8012704:	4603      	mov	r3, r0
 8012706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801270a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801270e:	2b00      	cmp	r3, #0
 8012710:	d120      	bne.n	8012754 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012714:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012718:	3316      	adds	r3, #22
 801271a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801271c:	4618      	mov	r0, r3
 801271e:	f7fd f85b 	bl	800f7d8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012728:	4618      	mov	r0, r3
 801272a:	f7fe f84d 	bl	80107c8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012730:	330b      	adds	r3, #11
 8012732:	2210      	movs	r2, #16
 8012734:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2201      	movs	r2, #1
 801273a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801273c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10e      	bne.n	8012762 <f_mkdir+0x226>
					res = sync_fs(fs);
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	4618      	mov	r0, r3
 8012748:	f7fd face 	bl	800fce8 <sync_fs>
 801274c:	4603      	mov	r3, r0
 801274e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012752:	e006      	b.n	8012762 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012754:	f107 030c 	add.w	r3, r7, #12
 8012758:	2200      	movs	r2, #0
 801275a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801275c:	4618      	mov	r0, r3
 801275e:	f7fd fd39 	bl	80101d4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012766:	4618      	mov	r0, r3
 8012768:	3758      	adds	r7, #88	; 0x58
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	274a0000 	.word	0x274a0000

08012774 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b088      	sub	sp, #32
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012780:	2300      	movs	r3, #0
 8012782:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012788:	e017      	b.n	80127ba <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801278a:	f107 0310 	add.w	r3, r7, #16
 801278e:	f107 0114 	add.w	r1, r7, #20
 8012792:	2201      	movs	r2, #1
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff f803 	bl	80117a0 <f_read>
		if (rc != 1) break;
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d112      	bne.n	80127c6 <f_gets+0x52>
		c = s[0];
 80127a0:	7d3b      	ldrb	r3, [r7, #20]
 80127a2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	1c5a      	adds	r2, r3, #1
 80127a8:	61ba      	str	r2, [r7, #24]
 80127aa:	7dfa      	ldrb	r2, [r7, #23]
 80127ac:	701a      	strb	r2, [r3, #0]
		n++;
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	3301      	adds	r3, #1
 80127b2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80127b4:	7dfb      	ldrb	r3, [r7, #23]
 80127b6:	2b0a      	cmp	r3, #10
 80127b8:	d007      	beq.n	80127ca <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	3b01      	subs	r3, #1
 80127be:	69fa      	ldr	r2, [r7, #28]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	dbe2      	blt.n	801278a <f_gets+0x16>
 80127c4:	e002      	b.n	80127cc <f_gets+0x58>
		if (rc != 1) break;
 80127c6:	bf00      	nop
 80127c8:	e000      	b.n	80127cc <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80127ca:	bf00      	nop
	}
	*p = 0;
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	2200      	movs	r2, #0
 80127d0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d001      	beq.n	80127dc <f_gets+0x68>
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	e000      	b.n	80127de <f_gets+0x6a>
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3720      	adds	r7, #32
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
	...

080127e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b087      	sub	sp, #28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	4613      	mov	r3, r2
 80127f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80127f6:	2301      	movs	r3, #1
 80127f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80127fe:	4b1f      	ldr	r3, [pc, #124]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012800:	7a5b      	ldrb	r3, [r3, #9]
 8012802:	b2db      	uxtb	r3, r3
 8012804:	2b00      	cmp	r3, #0
 8012806:	d131      	bne.n	801286c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012808:	4b1c      	ldr	r3, [pc, #112]	; (801287c <FATFS_LinkDriverEx+0x94>)
 801280a:	7a5b      	ldrb	r3, [r3, #9]
 801280c:	b2db      	uxtb	r3, r3
 801280e:	461a      	mov	r2, r3
 8012810:	4b1a      	ldr	r3, [pc, #104]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012812:	2100      	movs	r1, #0
 8012814:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012816:	4b19      	ldr	r3, [pc, #100]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012818:	7a5b      	ldrb	r3, [r3, #9]
 801281a:	b2db      	uxtb	r3, r3
 801281c:	4a17      	ldr	r2, [pc, #92]	; (801287c <FATFS_LinkDriverEx+0x94>)
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	4413      	add	r3, r2
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012826:	4b15      	ldr	r3, [pc, #84]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012828:	7a5b      	ldrb	r3, [r3, #9]
 801282a:	b2db      	uxtb	r3, r3
 801282c:	461a      	mov	r2, r3
 801282e:	4b13      	ldr	r3, [pc, #76]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012830:	4413      	add	r3, r2
 8012832:	79fa      	ldrb	r2, [r7, #7]
 8012834:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012836:	4b11      	ldr	r3, [pc, #68]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012838:	7a5b      	ldrb	r3, [r3, #9]
 801283a:	b2db      	uxtb	r3, r3
 801283c:	1c5a      	adds	r2, r3, #1
 801283e:	b2d1      	uxtb	r1, r2
 8012840:	4a0e      	ldr	r2, [pc, #56]	; (801287c <FATFS_LinkDriverEx+0x94>)
 8012842:	7251      	strb	r1, [r2, #9]
 8012844:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012846:	7dbb      	ldrb	r3, [r7, #22]
 8012848:	3330      	adds	r3, #48	; 0x30
 801284a:	b2da      	uxtb	r2, r3
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	3301      	adds	r3, #1
 8012854:	223a      	movs	r2, #58	; 0x3a
 8012856:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	3302      	adds	r3, #2
 801285c:	222f      	movs	r2, #47	; 0x2f
 801285e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	3303      	adds	r3, #3
 8012864:	2200      	movs	r2, #0
 8012866:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012868:	2300      	movs	r3, #0
 801286a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801286c:	7dfb      	ldrb	r3, [r7, #23]
}
 801286e:	4618      	mov	r0, r3
 8012870:	371c      	adds	r7, #28
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop
 801287c:	2003c488 	.word	0x2003c488

08012880 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801288a:	2200      	movs	r2, #0
 801288c:	6839      	ldr	r1, [r7, #0]
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7ff ffaa 	bl	80127e8 <FATFS_LinkDriverEx>
 8012894:	4603      	mov	r3, r0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <__cxa_guard_acquire>:
 801289e:	6803      	ldr	r3, [r0, #0]
 80128a0:	07db      	lsls	r3, r3, #31
 80128a2:	d406      	bmi.n	80128b2 <__cxa_guard_acquire+0x14>
 80128a4:	7843      	ldrb	r3, [r0, #1]
 80128a6:	b103      	cbz	r3, 80128aa <__cxa_guard_acquire+0xc>
 80128a8:	deff      	udf	#255	; 0xff
 80128aa:	2301      	movs	r3, #1
 80128ac:	7043      	strb	r3, [r0, #1]
 80128ae:	4618      	mov	r0, r3
 80128b0:	4770      	bx	lr
 80128b2:	2000      	movs	r0, #0
 80128b4:	4770      	bx	lr

080128b6 <__cxa_guard_release>:
 80128b6:	2301      	movs	r3, #1
 80128b8:	6003      	str	r3, [r0, #0]
 80128ba:	4770      	bx	lr
 80128bc:	0000      	movs	r0, r0
	...

080128c0 <cos>:
 80128c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128c2:	ec51 0b10 	vmov	r0, r1, d0
 80128c6:	4a1e      	ldr	r2, [pc, #120]	; (8012940 <cos+0x80>)
 80128c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128cc:	4293      	cmp	r3, r2
 80128ce:	dc06      	bgt.n	80128de <cos+0x1e>
 80128d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012938 <cos+0x78>
 80128d4:	f000 fa74 	bl	8012dc0 <__kernel_cos>
 80128d8:	ec51 0b10 	vmov	r0, r1, d0
 80128dc:	e007      	b.n	80128ee <cos+0x2e>
 80128de:	4a19      	ldr	r2, [pc, #100]	; (8012944 <cos+0x84>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	dd09      	ble.n	80128f8 <cos+0x38>
 80128e4:	ee10 2a10 	vmov	r2, s0
 80128e8:	460b      	mov	r3, r1
 80128ea:	f7ed fce5 	bl	80002b8 <__aeabi_dsub>
 80128ee:	ec41 0b10 	vmov	d0, r0, r1
 80128f2:	b005      	add	sp, #20
 80128f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80128f8:	4668      	mov	r0, sp
 80128fa:	f000 f86d 	bl	80129d8 <__ieee754_rem_pio2>
 80128fe:	f000 0003 	and.w	r0, r0, #3
 8012902:	2801      	cmp	r0, #1
 8012904:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012908:	ed9d 0b00 	vldr	d0, [sp]
 801290c:	d007      	beq.n	801291e <cos+0x5e>
 801290e:	2802      	cmp	r0, #2
 8012910:	d00e      	beq.n	8012930 <cos+0x70>
 8012912:	2800      	cmp	r0, #0
 8012914:	d0de      	beq.n	80128d4 <cos+0x14>
 8012916:	2001      	movs	r0, #1
 8012918:	f000 fe5a 	bl	80135d0 <__kernel_sin>
 801291c:	e7dc      	b.n	80128d8 <cos+0x18>
 801291e:	f000 fe57 	bl	80135d0 <__kernel_sin>
 8012922:	ec53 2b10 	vmov	r2, r3, d0
 8012926:	ee10 0a10 	vmov	r0, s0
 801292a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801292e:	e7de      	b.n	80128ee <cos+0x2e>
 8012930:	f000 fa46 	bl	8012dc0 <__kernel_cos>
 8012934:	e7f5      	b.n	8012922 <cos+0x62>
 8012936:	bf00      	nop
	...
 8012940:	3fe921fb 	.word	0x3fe921fb
 8012944:	7fefffff 	.word	0x7fefffff

08012948 <sin>:
 8012948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801294a:	ec51 0b10 	vmov	r0, r1, d0
 801294e:	4a20      	ldr	r2, [pc, #128]	; (80129d0 <sin+0x88>)
 8012950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012954:	4293      	cmp	r3, r2
 8012956:	dc07      	bgt.n	8012968 <sin+0x20>
 8012958:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80129c8 <sin+0x80>
 801295c:	2000      	movs	r0, #0
 801295e:	f000 fe37 	bl	80135d0 <__kernel_sin>
 8012962:	ec51 0b10 	vmov	r0, r1, d0
 8012966:	e007      	b.n	8012978 <sin+0x30>
 8012968:	4a1a      	ldr	r2, [pc, #104]	; (80129d4 <sin+0x8c>)
 801296a:	4293      	cmp	r3, r2
 801296c:	dd09      	ble.n	8012982 <sin+0x3a>
 801296e:	ee10 2a10 	vmov	r2, s0
 8012972:	460b      	mov	r3, r1
 8012974:	f7ed fca0 	bl	80002b8 <__aeabi_dsub>
 8012978:	ec41 0b10 	vmov	d0, r0, r1
 801297c:	b005      	add	sp, #20
 801297e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012982:	4668      	mov	r0, sp
 8012984:	f000 f828 	bl	80129d8 <__ieee754_rem_pio2>
 8012988:	f000 0003 	and.w	r0, r0, #3
 801298c:	2801      	cmp	r0, #1
 801298e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012992:	ed9d 0b00 	vldr	d0, [sp]
 8012996:	d004      	beq.n	80129a2 <sin+0x5a>
 8012998:	2802      	cmp	r0, #2
 801299a:	d005      	beq.n	80129a8 <sin+0x60>
 801299c:	b970      	cbnz	r0, 80129bc <sin+0x74>
 801299e:	2001      	movs	r0, #1
 80129a0:	e7dd      	b.n	801295e <sin+0x16>
 80129a2:	f000 fa0d 	bl	8012dc0 <__kernel_cos>
 80129a6:	e7dc      	b.n	8012962 <sin+0x1a>
 80129a8:	2001      	movs	r0, #1
 80129aa:	f000 fe11 	bl	80135d0 <__kernel_sin>
 80129ae:	ec53 2b10 	vmov	r2, r3, d0
 80129b2:	ee10 0a10 	vmov	r0, s0
 80129b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129ba:	e7dd      	b.n	8012978 <sin+0x30>
 80129bc:	f000 fa00 	bl	8012dc0 <__kernel_cos>
 80129c0:	e7f5      	b.n	80129ae <sin+0x66>
 80129c2:	bf00      	nop
 80129c4:	f3af 8000 	nop.w
	...
 80129d0:	3fe921fb 	.word	0x3fe921fb
 80129d4:	7fefffff 	.word	0x7fefffff

080129d8 <__ieee754_rem_pio2>:
 80129d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129dc:	ec57 6b10 	vmov	r6, r7, d0
 80129e0:	4bc3      	ldr	r3, [pc, #780]	; (8012cf0 <__ieee754_rem_pio2+0x318>)
 80129e2:	b08d      	sub	sp, #52	; 0x34
 80129e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80129e8:	4598      	cmp	r8, r3
 80129ea:	4604      	mov	r4, r0
 80129ec:	9704      	str	r7, [sp, #16]
 80129ee:	dc07      	bgt.n	8012a00 <__ieee754_rem_pio2+0x28>
 80129f0:	2200      	movs	r2, #0
 80129f2:	2300      	movs	r3, #0
 80129f4:	ed84 0b00 	vstr	d0, [r4]
 80129f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80129fc:	2500      	movs	r5, #0
 80129fe:	e027      	b.n	8012a50 <__ieee754_rem_pio2+0x78>
 8012a00:	4bbc      	ldr	r3, [pc, #752]	; (8012cf4 <__ieee754_rem_pio2+0x31c>)
 8012a02:	4598      	cmp	r8, r3
 8012a04:	dc75      	bgt.n	8012af2 <__ieee754_rem_pio2+0x11a>
 8012a06:	9b04      	ldr	r3, [sp, #16]
 8012a08:	4dbb      	ldr	r5, [pc, #748]	; (8012cf8 <__ieee754_rem_pio2+0x320>)
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	ee10 0a10 	vmov	r0, s0
 8012a10:	a3a9      	add	r3, pc, #676	; (adr r3, 8012cb8 <__ieee754_rem_pio2+0x2e0>)
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	4639      	mov	r1, r7
 8012a18:	dd36      	ble.n	8012a88 <__ieee754_rem_pio2+0xb0>
 8012a1a:	f7ed fc4d 	bl	80002b8 <__aeabi_dsub>
 8012a1e:	45a8      	cmp	r8, r5
 8012a20:	4606      	mov	r6, r0
 8012a22:	460f      	mov	r7, r1
 8012a24:	d018      	beq.n	8012a58 <__ieee754_rem_pio2+0x80>
 8012a26:	a3a6      	add	r3, pc, #664	; (adr r3, 8012cc0 <__ieee754_rem_pio2+0x2e8>)
 8012a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2c:	f7ed fc44 	bl	80002b8 <__aeabi_dsub>
 8012a30:	4602      	mov	r2, r0
 8012a32:	460b      	mov	r3, r1
 8012a34:	e9c4 2300 	strd	r2, r3, [r4]
 8012a38:	4630      	mov	r0, r6
 8012a3a:	4639      	mov	r1, r7
 8012a3c:	f7ed fc3c 	bl	80002b8 <__aeabi_dsub>
 8012a40:	a39f      	add	r3, pc, #636	; (adr r3, 8012cc0 <__ieee754_rem_pio2+0x2e8>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	f7ed fc37 	bl	80002b8 <__aeabi_dsub>
 8012a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012a4e:	2501      	movs	r5, #1
 8012a50:	4628      	mov	r0, r5
 8012a52:	b00d      	add	sp, #52	; 0x34
 8012a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a58:	a39b      	add	r3, pc, #620	; (adr r3, 8012cc8 <__ieee754_rem_pio2+0x2f0>)
 8012a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5e:	f7ed fc2b 	bl	80002b8 <__aeabi_dsub>
 8012a62:	a39b      	add	r3, pc, #620	; (adr r3, 8012cd0 <__ieee754_rem_pio2+0x2f8>)
 8012a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a68:	4606      	mov	r6, r0
 8012a6a:	460f      	mov	r7, r1
 8012a6c:	f7ed fc24 	bl	80002b8 <__aeabi_dsub>
 8012a70:	4602      	mov	r2, r0
 8012a72:	460b      	mov	r3, r1
 8012a74:	e9c4 2300 	strd	r2, r3, [r4]
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	f7ed fc1c 	bl	80002b8 <__aeabi_dsub>
 8012a80:	a393      	add	r3, pc, #588	; (adr r3, 8012cd0 <__ieee754_rem_pio2+0x2f8>)
 8012a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a86:	e7de      	b.n	8012a46 <__ieee754_rem_pio2+0x6e>
 8012a88:	f7ed fc18 	bl	80002bc <__adddf3>
 8012a8c:	45a8      	cmp	r8, r5
 8012a8e:	4606      	mov	r6, r0
 8012a90:	460f      	mov	r7, r1
 8012a92:	d016      	beq.n	8012ac2 <__ieee754_rem_pio2+0xea>
 8012a94:	a38a      	add	r3, pc, #552	; (adr r3, 8012cc0 <__ieee754_rem_pio2+0x2e8>)
 8012a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9a:	f7ed fc0f 	bl	80002bc <__adddf3>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	e9c4 2300 	strd	r2, r3, [r4]
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	4639      	mov	r1, r7
 8012aaa:	f7ed fc05 	bl	80002b8 <__aeabi_dsub>
 8012aae:	a384      	add	r3, pc, #528	; (adr r3, 8012cc0 <__ieee754_rem_pio2+0x2e8>)
 8012ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab4:	f7ed fc02 	bl	80002bc <__adddf3>
 8012ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8012abc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ac0:	e7c6      	b.n	8012a50 <__ieee754_rem_pio2+0x78>
 8012ac2:	a381      	add	r3, pc, #516	; (adr r3, 8012cc8 <__ieee754_rem_pio2+0x2f0>)
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	f7ed fbf8 	bl	80002bc <__adddf3>
 8012acc:	a380      	add	r3, pc, #512	; (adr r3, 8012cd0 <__ieee754_rem_pio2+0x2f8>)
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	460f      	mov	r7, r1
 8012ad6:	f7ed fbf1 	bl	80002bc <__adddf3>
 8012ada:	4602      	mov	r2, r0
 8012adc:	460b      	mov	r3, r1
 8012ade:	e9c4 2300 	strd	r2, r3, [r4]
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f7ed fbe7 	bl	80002b8 <__aeabi_dsub>
 8012aea:	a379      	add	r3, pc, #484	; (adr r3, 8012cd0 <__ieee754_rem_pio2+0x2f8>)
 8012aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af0:	e7e0      	b.n	8012ab4 <__ieee754_rem_pio2+0xdc>
 8012af2:	4b82      	ldr	r3, [pc, #520]	; (8012cfc <__ieee754_rem_pio2+0x324>)
 8012af4:	4598      	cmp	r8, r3
 8012af6:	f300 80d0 	bgt.w	8012c9a <__ieee754_rem_pio2+0x2c2>
 8012afa:	f000 fe23 	bl	8013744 <fabs>
 8012afe:	ec57 6b10 	vmov	r6, r7, d0
 8012b02:	ee10 0a10 	vmov	r0, s0
 8012b06:	a374      	add	r3, pc, #464	; (adr r3, 8012cd8 <__ieee754_rem_pio2+0x300>)
 8012b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0c:	4639      	mov	r1, r7
 8012b0e:	f7ed fd8b 	bl	8000628 <__aeabi_dmul>
 8012b12:	2200      	movs	r2, #0
 8012b14:	4b7a      	ldr	r3, [pc, #488]	; (8012d00 <__ieee754_rem_pio2+0x328>)
 8012b16:	f7ed fbd1 	bl	80002bc <__adddf3>
 8012b1a:	f7ee f835 	bl	8000b88 <__aeabi_d2iz>
 8012b1e:	4605      	mov	r5, r0
 8012b20:	f7ed fd18 	bl	8000554 <__aeabi_i2d>
 8012b24:	a364      	add	r3, pc, #400	; (adr r3, 8012cb8 <__ieee754_rem_pio2+0x2e0>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b2e:	f7ed fd7b 	bl	8000628 <__aeabi_dmul>
 8012b32:	4602      	mov	r2, r0
 8012b34:	460b      	mov	r3, r1
 8012b36:	4630      	mov	r0, r6
 8012b38:	4639      	mov	r1, r7
 8012b3a:	f7ed fbbd 	bl	80002b8 <__aeabi_dsub>
 8012b3e:	a360      	add	r3, pc, #384	; (adr r3, 8012cc0 <__ieee754_rem_pio2+0x2e8>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	4682      	mov	sl, r0
 8012b46:	468b      	mov	fp, r1
 8012b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b4c:	f7ed fd6c 	bl	8000628 <__aeabi_dmul>
 8012b50:	2d1f      	cmp	r5, #31
 8012b52:	4606      	mov	r6, r0
 8012b54:	460f      	mov	r7, r1
 8012b56:	dc0c      	bgt.n	8012b72 <__ieee754_rem_pio2+0x19a>
 8012b58:	1e6a      	subs	r2, r5, #1
 8012b5a:	4b6a      	ldr	r3, [pc, #424]	; (8012d04 <__ieee754_rem_pio2+0x32c>)
 8012b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b60:	4543      	cmp	r3, r8
 8012b62:	d006      	beq.n	8012b72 <__ieee754_rem_pio2+0x19a>
 8012b64:	4632      	mov	r2, r6
 8012b66:	463b      	mov	r3, r7
 8012b68:	4650      	mov	r0, sl
 8012b6a:	4659      	mov	r1, fp
 8012b6c:	f7ed fba4 	bl	80002b8 <__aeabi_dsub>
 8012b70:	e00e      	b.n	8012b90 <__ieee754_rem_pio2+0x1b8>
 8012b72:	4632      	mov	r2, r6
 8012b74:	463b      	mov	r3, r7
 8012b76:	4650      	mov	r0, sl
 8012b78:	4659      	mov	r1, fp
 8012b7a:	f7ed fb9d 	bl	80002b8 <__aeabi_dsub>
 8012b7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012b82:	9305      	str	r3, [sp, #20]
 8012b84:	9a05      	ldr	r2, [sp, #20]
 8012b86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	2b10      	cmp	r3, #16
 8012b8e:	dc02      	bgt.n	8012b96 <__ieee754_rem_pio2+0x1be>
 8012b90:	e9c4 0100 	strd	r0, r1, [r4]
 8012b94:	e039      	b.n	8012c0a <__ieee754_rem_pio2+0x232>
 8012b96:	a34c      	add	r3, pc, #304	; (adr r3, 8012cc8 <__ieee754_rem_pio2+0x2f0>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ba0:	f7ed fd42 	bl	8000628 <__aeabi_dmul>
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	460f      	mov	r7, r1
 8012ba8:	4602      	mov	r2, r0
 8012baa:	460b      	mov	r3, r1
 8012bac:	4650      	mov	r0, sl
 8012bae:	4659      	mov	r1, fp
 8012bb0:	f7ed fb82 	bl	80002b8 <__aeabi_dsub>
 8012bb4:	4602      	mov	r2, r0
 8012bb6:	460b      	mov	r3, r1
 8012bb8:	4680      	mov	r8, r0
 8012bba:	4689      	mov	r9, r1
 8012bbc:	4650      	mov	r0, sl
 8012bbe:	4659      	mov	r1, fp
 8012bc0:	f7ed fb7a 	bl	80002b8 <__aeabi_dsub>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	f7ed fb76 	bl	80002b8 <__aeabi_dsub>
 8012bcc:	a340      	add	r3, pc, #256	; (adr r3, 8012cd0 <__ieee754_rem_pio2+0x2f8>)
 8012bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	460f      	mov	r7, r1
 8012bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012bda:	f7ed fd25 	bl	8000628 <__aeabi_dmul>
 8012bde:	4632      	mov	r2, r6
 8012be0:	463b      	mov	r3, r7
 8012be2:	f7ed fb69 	bl	80002b8 <__aeabi_dsub>
 8012be6:	4602      	mov	r2, r0
 8012be8:	460b      	mov	r3, r1
 8012bea:	4606      	mov	r6, r0
 8012bec:	460f      	mov	r7, r1
 8012bee:	4640      	mov	r0, r8
 8012bf0:	4649      	mov	r1, r9
 8012bf2:	f7ed fb61 	bl	80002b8 <__aeabi_dsub>
 8012bf6:	9a05      	ldr	r2, [sp, #20]
 8012bf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	2b31      	cmp	r3, #49	; 0x31
 8012c00:	dc20      	bgt.n	8012c44 <__ieee754_rem_pio2+0x26c>
 8012c02:	e9c4 0100 	strd	r0, r1, [r4]
 8012c06:	46c2      	mov	sl, r8
 8012c08:	46cb      	mov	fp, r9
 8012c0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012c0e:	4650      	mov	r0, sl
 8012c10:	4642      	mov	r2, r8
 8012c12:	464b      	mov	r3, r9
 8012c14:	4659      	mov	r1, fp
 8012c16:	f7ed fb4f 	bl	80002b8 <__aeabi_dsub>
 8012c1a:	463b      	mov	r3, r7
 8012c1c:	4632      	mov	r2, r6
 8012c1e:	f7ed fb4b 	bl	80002b8 <__aeabi_dsub>
 8012c22:	9b04      	ldr	r3, [sp, #16]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012c2a:	f6bf af11 	bge.w	8012a50 <__ieee754_rem_pio2+0x78>
 8012c2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012c32:	6063      	str	r3, [r4, #4]
 8012c34:	f8c4 8000 	str.w	r8, [r4]
 8012c38:	60a0      	str	r0, [r4, #8]
 8012c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c3e:	60e3      	str	r3, [r4, #12]
 8012c40:	426d      	negs	r5, r5
 8012c42:	e705      	b.n	8012a50 <__ieee754_rem_pio2+0x78>
 8012c44:	a326      	add	r3, pc, #152	; (adr r3, 8012ce0 <__ieee754_rem_pio2+0x308>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c4e:	f7ed fceb 	bl	8000628 <__aeabi_dmul>
 8012c52:	4606      	mov	r6, r0
 8012c54:	460f      	mov	r7, r1
 8012c56:	4602      	mov	r2, r0
 8012c58:	460b      	mov	r3, r1
 8012c5a:	4640      	mov	r0, r8
 8012c5c:	4649      	mov	r1, r9
 8012c5e:	f7ed fb2b 	bl	80002b8 <__aeabi_dsub>
 8012c62:	4602      	mov	r2, r0
 8012c64:	460b      	mov	r3, r1
 8012c66:	4682      	mov	sl, r0
 8012c68:	468b      	mov	fp, r1
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	f7ed fb23 	bl	80002b8 <__aeabi_dsub>
 8012c72:	4632      	mov	r2, r6
 8012c74:	463b      	mov	r3, r7
 8012c76:	f7ed fb1f 	bl	80002b8 <__aeabi_dsub>
 8012c7a:	a31b      	add	r3, pc, #108	; (adr r3, 8012ce8 <__ieee754_rem_pio2+0x310>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	4606      	mov	r6, r0
 8012c82:	460f      	mov	r7, r1
 8012c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c88:	f7ed fcce 	bl	8000628 <__aeabi_dmul>
 8012c8c:	4632      	mov	r2, r6
 8012c8e:	463b      	mov	r3, r7
 8012c90:	f7ed fb12 	bl	80002b8 <__aeabi_dsub>
 8012c94:	4606      	mov	r6, r0
 8012c96:	460f      	mov	r7, r1
 8012c98:	e764      	b.n	8012b64 <__ieee754_rem_pio2+0x18c>
 8012c9a:	4b1b      	ldr	r3, [pc, #108]	; (8012d08 <__ieee754_rem_pio2+0x330>)
 8012c9c:	4598      	cmp	r8, r3
 8012c9e:	dd35      	ble.n	8012d0c <__ieee754_rem_pio2+0x334>
 8012ca0:	ee10 2a10 	vmov	r2, s0
 8012ca4:	463b      	mov	r3, r7
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	4639      	mov	r1, r7
 8012caa:	f7ed fb05 	bl	80002b8 <__aeabi_dsub>
 8012cae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012cb2:	e9c4 0100 	strd	r0, r1, [r4]
 8012cb6:	e6a1      	b.n	80129fc <__ieee754_rem_pio2+0x24>
 8012cb8:	54400000 	.word	0x54400000
 8012cbc:	3ff921fb 	.word	0x3ff921fb
 8012cc0:	1a626331 	.word	0x1a626331
 8012cc4:	3dd0b461 	.word	0x3dd0b461
 8012cc8:	1a600000 	.word	0x1a600000
 8012ccc:	3dd0b461 	.word	0x3dd0b461
 8012cd0:	2e037073 	.word	0x2e037073
 8012cd4:	3ba3198a 	.word	0x3ba3198a
 8012cd8:	6dc9c883 	.word	0x6dc9c883
 8012cdc:	3fe45f30 	.word	0x3fe45f30
 8012ce0:	2e000000 	.word	0x2e000000
 8012ce4:	3ba3198a 	.word	0x3ba3198a
 8012ce8:	252049c1 	.word	0x252049c1
 8012cec:	397b839a 	.word	0x397b839a
 8012cf0:	3fe921fb 	.word	0x3fe921fb
 8012cf4:	4002d97b 	.word	0x4002d97b
 8012cf8:	3ff921fb 	.word	0x3ff921fb
 8012cfc:	413921fb 	.word	0x413921fb
 8012d00:	3fe00000 	.word	0x3fe00000
 8012d04:	0801838c 	.word	0x0801838c
 8012d08:	7fefffff 	.word	0x7fefffff
 8012d0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012d10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012d14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012d18:	4630      	mov	r0, r6
 8012d1a:	460f      	mov	r7, r1
 8012d1c:	f7ed ff34 	bl	8000b88 <__aeabi_d2iz>
 8012d20:	f7ed fc18 	bl	8000554 <__aeabi_i2d>
 8012d24:	4602      	mov	r2, r0
 8012d26:	460b      	mov	r3, r1
 8012d28:	4630      	mov	r0, r6
 8012d2a:	4639      	mov	r1, r7
 8012d2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d30:	f7ed fac2 	bl	80002b8 <__aeabi_dsub>
 8012d34:	2200      	movs	r2, #0
 8012d36:	4b1f      	ldr	r3, [pc, #124]	; (8012db4 <__ieee754_rem_pio2+0x3dc>)
 8012d38:	f7ed fc76 	bl	8000628 <__aeabi_dmul>
 8012d3c:	460f      	mov	r7, r1
 8012d3e:	4606      	mov	r6, r0
 8012d40:	f7ed ff22 	bl	8000b88 <__aeabi_d2iz>
 8012d44:	f7ed fc06 	bl	8000554 <__aeabi_i2d>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	4639      	mov	r1, r7
 8012d50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012d54:	f7ed fab0 	bl	80002b8 <__aeabi_dsub>
 8012d58:	2200      	movs	r2, #0
 8012d5a:	4b16      	ldr	r3, [pc, #88]	; (8012db4 <__ieee754_rem_pio2+0x3dc>)
 8012d5c:	f7ed fc64 	bl	8000628 <__aeabi_dmul>
 8012d60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012d64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012d68:	f04f 0803 	mov.w	r8, #3
 8012d6c:	2600      	movs	r6, #0
 8012d6e:	2700      	movs	r7, #0
 8012d70:	4632      	mov	r2, r6
 8012d72:	463b      	mov	r3, r7
 8012d74:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8012d7c:	f7ed febc 	bl	8000af8 <__aeabi_dcmpeq>
 8012d80:	b9b0      	cbnz	r0, 8012db0 <__ieee754_rem_pio2+0x3d8>
 8012d82:	4b0d      	ldr	r3, [pc, #52]	; (8012db8 <__ieee754_rem_pio2+0x3e0>)
 8012d84:	9301      	str	r3, [sp, #4]
 8012d86:	2302      	movs	r3, #2
 8012d88:	9300      	str	r3, [sp, #0]
 8012d8a:	462a      	mov	r2, r5
 8012d8c:	4643      	mov	r3, r8
 8012d8e:	4621      	mov	r1, r4
 8012d90:	a806      	add	r0, sp, #24
 8012d92:	f000 f8dd 	bl	8012f50 <__kernel_rem_pio2>
 8012d96:	9b04      	ldr	r3, [sp, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	f6bf ae58 	bge.w	8012a50 <__ieee754_rem_pio2+0x78>
 8012da0:	6863      	ldr	r3, [r4, #4]
 8012da2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012da6:	6063      	str	r3, [r4, #4]
 8012da8:	68e3      	ldr	r3, [r4, #12]
 8012daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012dae:	e746      	b.n	8012c3e <__ieee754_rem_pio2+0x266>
 8012db0:	46d0      	mov	r8, sl
 8012db2:	e7dd      	b.n	8012d70 <__ieee754_rem_pio2+0x398>
 8012db4:	41700000 	.word	0x41700000
 8012db8:	0801840c 	.word	0x0801840c
 8012dbc:	00000000 	.word	0x00000000

08012dc0 <__kernel_cos>:
 8012dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	ec59 8b10 	vmov	r8, r9, d0
 8012dc8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012dcc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012dd0:	ed2d 8b02 	vpush	{d8}
 8012dd4:	eeb0 8a41 	vmov.f32	s16, s2
 8012dd8:	eef0 8a61 	vmov.f32	s17, s3
 8012ddc:	da07      	bge.n	8012dee <__kernel_cos+0x2e>
 8012dde:	ee10 0a10 	vmov	r0, s0
 8012de2:	4649      	mov	r1, r9
 8012de4:	f7ed fed0 	bl	8000b88 <__aeabi_d2iz>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	f000 8089 	beq.w	8012f00 <__kernel_cos+0x140>
 8012dee:	4642      	mov	r2, r8
 8012df0:	464b      	mov	r3, r9
 8012df2:	4640      	mov	r0, r8
 8012df4:	4649      	mov	r1, r9
 8012df6:	f7ed fc17 	bl	8000628 <__aeabi_dmul>
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	4b4e      	ldr	r3, [pc, #312]	; (8012f38 <__kernel_cos+0x178>)
 8012dfe:	4604      	mov	r4, r0
 8012e00:	460d      	mov	r5, r1
 8012e02:	f7ed fc11 	bl	8000628 <__aeabi_dmul>
 8012e06:	a340      	add	r3, pc, #256	; (adr r3, 8012f08 <__kernel_cos+0x148>)
 8012e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0c:	4682      	mov	sl, r0
 8012e0e:	468b      	mov	fp, r1
 8012e10:	4620      	mov	r0, r4
 8012e12:	4629      	mov	r1, r5
 8012e14:	f7ed fc08 	bl	8000628 <__aeabi_dmul>
 8012e18:	a33d      	add	r3, pc, #244	; (adr r3, 8012f10 <__kernel_cos+0x150>)
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	f7ed fa4d 	bl	80002bc <__adddf3>
 8012e22:	4622      	mov	r2, r4
 8012e24:	462b      	mov	r3, r5
 8012e26:	f7ed fbff 	bl	8000628 <__aeabi_dmul>
 8012e2a:	a33b      	add	r3, pc, #236	; (adr r3, 8012f18 <__kernel_cos+0x158>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	f7ed fa42 	bl	80002b8 <__aeabi_dsub>
 8012e34:	4622      	mov	r2, r4
 8012e36:	462b      	mov	r3, r5
 8012e38:	f7ed fbf6 	bl	8000628 <__aeabi_dmul>
 8012e3c:	a338      	add	r3, pc, #224	; (adr r3, 8012f20 <__kernel_cos+0x160>)
 8012e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e42:	f7ed fa3b 	bl	80002bc <__adddf3>
 8012e46:	4622      	mov	r2, r4
 8012e48:	462b      	mov	r3, r5
 8012e4a:	f7ed fbed 	bl	8000628 <__aeabi_dmul>
 8012e4e:	a336      	add	r3, pc, #216	; (adr r3, 8012f28 <__kernel_cos+0x168>)
 8012e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e54:	f7ed fa30 	bl	80002b8 <__aeabi_dsub>
 8012e58:	4622      	mov	r2, r4
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	f7ed fbe4 	bl	8000628 <__aeabi_dmul>
 8012e60:	a333      	add	r3, pc, #204	; (adr r3, 8012f30 <__kernel_cos+0x170>)
 8012e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e66:	f7ed fa29 	bl	80002bc <__adddf3>
 8012e6a:	4622      	mov	r2, r4
 8012e6c:	462b      	mov	r3, r5
 8012e6e:	f7ed fbdb 	bl	8000628 <__aeabi_dmul>
 8012e72:	4622      	mov	r2, r4
 8012e74:	462b      	mov	r3, r5
 8012e76:	f7ed fbd7 	bl	8000628 <__aeabi_dmul>
 8012e7a:	ec53 2b18 	vmov	r2, r3, d8
 8012e7e:	4604      	mov	r4, r0
 8012e80:	460d      	mov	r5, r1
 8012e82:	4640      	mov	r0, r8
 8012e84:	4649      	mov	r1, r9
 8012e86:	f7ed fbcf 	bl	8000628 <__aeabi_dmul>
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	4629      	mov	r1, r5
 8012e90:	4620      	mov	r0, r4
 8012e92:	f7ed fa11 	bl	80002b8 <__aeabi_dsub>
 8012e96:	4b29      	ldr	r3, [pc, #164]	; (8012f3c <__kernel_cos+0x17c>)
 8012e98:	429e      	cmp	r6, r3
 8012e9a:	4680      	mov	r8, r0
 8012e9c:	4689      	mov	r9, r1
 8012e9e:	dc11      	bgt.n	8012ec4 <__kernel_cos+0x104>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4650      	mov	r0, sl
 8012ea6:	4659      	mov	r1, fp
 8012ea8:	f7ed fa06 	bl	80002b8 <__aeabi_dsub>
 8012eac:	460b      	mov	r3, r1
 8012eae:	4924      	ldr	r1, [pc, #144]	; (8012f40 <__kernel_cos+0x180>)
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	f7ed fa00 	bl	80002b8 <__aeabi_dsub>
 8012eb8:	ecbd 8b02 	vpop	{d8}
 8012ebc:	ec41 0b10 	vmov	d0, r0, r1
 8012ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec4:	4b1f      	ldr	r3, [pc, #124]	; (8012f44 <__kernel_cos+0x184>)
 8012ec6:	491e      	ldr	r1, [pc, #120]	; (8012f40 <__kernel_cos+0x180>)
 8012ec8:	429e      	cmp	r6, r3
 8012eca:	bfcc      	ite	gt
 8012ecc:	4d1e      	ldrgt	r5, [pc, #120]	; (8012f48 <__kernel_cos+0x188>)
 8012ece:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012ed2:	2400      	movs	r4, #0
 8012ed4:	4622      	mov	r2, r4
 8012ed6:	462b      	mov	r3, r5
 8012ed8:	2000      	movs	r0, #0
 8012eda:	f7ed f9ed 	bl	80002b8 <__aeabi_dsub>
 8012ede:	4622      	mov	r2, r4
 8012ee0:	4606      	mov	r6, r0
 8012ee2:	460f      	mov	r7, r1
 8012ee4:	462b      	mov	r3, r5
 8012ee6:	4650      	mov	r0, sl
 8012ee8:	4659      	mov	r1, fp
 8012eea:	f7ed f9e5 	bl	80002b8 <__aeabi_dsub>
 8012eee:	4642      	mov	r2, r8
 8012ef0:	464b      	mov	r3, r9
 8012ef2:	f7ed f9e1 	bl	80002b8 <__aeabi_dsub>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	460b      	mov	r3, r1
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	e7d9      	b.n	8012eb4 <__kernel_cos+0xf4>
 8012f00:	2000      	movs	r0, #0
 8012f02:	490f      	ldr	r1, [pc, #60]	; (8012f40 <__kernel_cos+0x180>)
 8012f04:	e7d8      	b.n	8012eb8 <__kernel_cos+0xf8>
 8012f06:	bf00      	nop
 8012f08:	be8838d4 	.word	0xbe8838d4
 8012f0c:	bda8fae9 	.word	0xbda8fae9
 8012f10:	bdb4b1c4 	.word	0xbdb4b1c4
 8012f14:	3e21ee9e 	.word	0x3e21ee9e
 8012f18:	809c52ad 	.word	0x809c52ad
 8012f1c:	3e927e4f 	.word	0x3e927e4f
 8012f20:	19cb1590 	.word	0x19cb1590
 8012f24:	3efa01a0 	.word	0x3efa01a0
 8012f28:	16c15177 	.word	0x16c15177
 8012f2c:	3f56c16c 	.word	0x3f56c16c
 8012f30:	5555554c 	.word	0x5555554c
 8012f34:	3fa55555 	.word	0x3fa55555
 8012f38:	3fe00000 	.word	0x3fe00000
 8012f3c:	3fd33332 	.word	0x3fd33332
 8012f40:	3ff00000 	.word	0x3ff00000
 8012f44:	3fe90000 	.word	0x3fe90000
 8012f48:	3fd20000 	.word	0x3fd20000
 8012f4c:	00000000 	.word	0x00000000

08012f50 <__kernel_rem_pio2>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	ed2d 8b02 	vpush	{d8}
 8012f58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012f5c:	1ed4      	subs	r4, r2, #3
 8012f5e:	9308      	str	r3, [sp, #32]
 8012f60:	9101      	str	r1, [sp, #4]
 8012f62:	4bc5      	ldr	r3, [pc, #788]	; (8013278 <__kernel_rem_pio2+0x328>)
 8012f64:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012f66:	9009      	str	r0, [sp, #36]	; 0x24
 8012f68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f6c:	9304      	str	r3, [sp, #16]
 8012f6e:	9b08      	ldr	r3, [sp, #32]
 8012f70:	3b01      	subs	r3, #1
 8012f72:	9307      	str	r3, [sp, #28]
 8012f74:	2318      	movs	r3, #24
 8012f76:	fb94 f4f3 	sdiv	r4, r4, r3
 8012f7a:	f06f 0317 	mvn.w	r3, #23
 8012f7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012f82:	fb04 3303 	mla	r3, r4, r3, r3
 8012f86:	eb03 0a02 	add.w	sl, r3, r2
 8012f8a:	9b04      	ldr	r3, [sp, #16]
 8012f8c:	9a07      	ldr	r2, [sp, #28]
 8012f8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013268 <__kernel_rem_pio2+0x318>
 8012f92:	eb03 0802 	add.w	r8, r3, r2
 8012f96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012f98:	1aa7      	subs	r7, r4, r2
 8012f9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012f9e:	ae22      	add	r6, sp, #136	; 0x88
 8012fa0:	2500      	movs	r5, #0
 8012fa2:	4545      	cmp	r5, r8
 8012fa4:	dd13      	ble.n	8012fce <__kernel_rem_pio2+0x7e>
 8012fa6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013268 <__kernel_rem_pio2+0x318>
 8012faa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012fae:	2600      	movs	r6, #0
 8012fb0:	9b04      	ldr	r3, [sp, #16]
 8012fb2:	429e      	cmp	r6, r3
 8012fb4:	dc32      	bgt.n	801301c <__kernel_rem_pio2+0xcc>
 8012fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fb8:	9302      	str	r3, [sp, #8]
 8012fba:	9b08      	ldr	r3, [sp, #32]
 8012fbc:	199d      	adds	r5, r3, r6
 8012fbe:	ab22      	add	r3, sp, #136	; 0x88
 8012fc0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012fc4:	9306      	str	r3, [sp, #24]
 8012fc6:	ec59 8b18 	vmov	r8, r9, d8
 8012fca:	2700      	movs	r7, #0
 8012fcc:	e01f      	b.n	801300e <__kernel_rem_pio2+0xbe>
 8012fce:	42ef      	cmn	r7, r5
 8012fd0:	d407      	bmi.n	8012fe2 <__kernel_rem_pio2+0x92>
 8012fd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012fd6:	f7ed fabd 	bl	8000554 <__aeabi_i2d>
 8012fda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012fde:	3501      	adds	r5, #1
 8012fe0:	e7df      	b.n	8012fa2 <__kernel_rem_pio2+0x52>
 8012fe2:	ec51 0b18 	vmov	r0, r1, d8
 8012fe6:	e7f8      	b.n	8012fda <__kernel_rem_pio2+0x8a>
 8012fe8:	9906      	ldr	r1, [sp, #24]
 8012fea:	9d02      	ldr	r5, [sp, #8]
 8012fec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012ff0:	9106      	str	r1, [sp, #24]
 8012ff2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012ff6:	9502      	str	r5, [sp, #8]
 8012ff8:	f7ed fb16 	bl	8000628 <__aeabi_dmul>
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	460b      	mov	r3, r1
 8013000:	4640      	mov	r0, r8
 8013002:	4649      	mov	r1, r9
 8013004:	f7ed f95a 	bl	80002bc <__adddf3>
 8013008:	3701      	adds	r7, #1
 801300a:	4680      	mov	r8, r0
 801300c:	4689      	mov	r9, r1
 801300e:	9b07      	ldr	r3, [sp, #28]
 8013010:	429f      	cmp	r7, r3
 8013012:	dde9      	ble.n	8012fe8 <__kernel_rem_pio2+0x98>
 8013014:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013018:	3601      	adds	r6, #1
 801301a:	e7c9      	b.n	8012fb0 <__kernel_rem_pio2+0x60>
 801301c:	9b04      	ldr	r3, [sp, #16]
 801301e:	aa0e      	add	r2, sp, #56	; 0x38
 8013020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013024:	930c      	str	r3, [sp, #48]	; 0x30
 8013026:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801302c:	9c04      	ldr	r4, [sp, #16]
 801302e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013030:	ab9a      	add	r3, sp, #616	; 0x268
 8013032:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013036:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801303a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801303e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013042:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013046:	ab9a      	add	r3, sp, #616	; 0x268
 8013048:	445b      	add	r3, fp
 801304a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801304e:	2500      	movs	r5, #0
 8013050:	1b63      	subs	r3, r4, r5
 8013052:	2b00      	cmp	r3, #0
 8013054:	dc78      	bgt.n	8013148 <__kernel_rem_pio2+0x1f8>
 8013056:	4650      	mov	r0, sl
 8013058:	ec49 8b10 	vmov	d0, r8, r9
 801305c:	f000 fc00 	bl	8013860 <scalbn>
 8013060:	ec57 6b10 	vmov	r6, r7, d0
 8013064:	2200      	movs	r2, #0
 8013066:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801306a:	ee10 0a10 	vmov	r0, s0
 801306e:	4639      	mov	r1, r7
 8013070:	f7ed fada 	bl	8000628 <__aeabi_dmul>
 8013074:	ec41 0b10 	vmov	d0, r0, r1
 8013078:	f000 fb6e 	bl	8013758 <floor>
 801307c:	2200      	movs	r2, #0
 801307e:	ec51 0b10 	vmov	r0, r1, d0
 8013082:	4b7e      	ldr	r3, [pc, #504]	; (801327c <__kernel_rem_pio2+0x32c>)
 8013084:	f7ed fad0 	bl	8000628 <__aeabi_dmul>
 8013088:	4602      	mov	r2, r0
 801308a:	460b      	mov	r3, r1
 801308c:	4630      	mov	r0, r6
 801308e:	4639      	mov	r1, r7
 8013090:	f7ed f912 	bl	80002b8 <__aeabi_dsub>
 8013094:	460f      	mov	r7, r1
 8013096:	4606      	mov	r6, r0
 8013098:	f7ed fd76 	bl	8000b88 <__aeabi_d2iz>
 801309c:	9006      	str	r0, [sp, #24]
 801309e:	f7ed fa59 	bl	8000554 <__aeabi_i2d>
 80130a2:	4602      	mov	r2, r0
 80130a4:	460b      	mov	r3, r1
 80130a6:	4630      	mov	r0, r6
 80130a8:	4639      	mov	r1, r7
 80130aa:	f7ed f905 	bl	80002b8 <__aeabi_dsub>
 80130ae:	f1ba 0f00 	cmp.w	sl, #0
 80130b2:	4606      	mov	r6, r0
 80130b4:	460f      	mov	r7, r1
 80130b6:	dd6c      	ble.n	8013192 <__kernel_rem_pio2+0x242>
 80130b8:	1e62      	subs	r2, r4, #1
 80130ba:	ab0e      	add	r3, sp, #56	; 0x38
 80130bc:	f1ca 0118 	rsb	r1, sl, #24
 80130c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80130c4:	9d06      	ldr	r5, [sp, #24]
 80130c6:	fa40 f301 	asr.w	r3, r0, r1
 80130ca:	441d      	add	r5, r3
 80130cc:	408b      	lsls	r3, r1
 80130ce:	1ac0      	subs	r0, r0, r3
 80130d0:	ab0e      	add	r3, sp, #56	; 0x38
 80130d2:	9506      	str	r5, [sp, #24]
 80130d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80130d8:	f1ca 0317 	rsb	r3, sl, #23
 80130dc:	fa40 f303 	asr.w	r3, r0, r3
 80130e0:	9302      	str	r3, [sp, #8]
 80130e2:	9b02      	ldr	r3, [sp, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dd62      	ble.n	80131ae <__kernel_rem_pio2+0x25e>
 80130e8:	9b06      	ldr	r3, [sp, #24]
 80130ea:	2200      	movs	r2, #0
 80130ec:	3301      	adds	r3, #1
 80130ee:	9306      	str	r3, [sp, #24]
 80130f0:	4615      	mov	r5, r2
 80130f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80130f6:	4294      	cmp	r4, r2
 80130f8:	f300 8095 	bgt.w	8013226 <__kernel_rem_pio2+0x2d6>
 80130fc:	f1ba 0f00 	cmp.w	sl, #0
 8013100:	dd07      	ble.n	8013112 <__kernel_rem_pio2+0x1c2>
 8013102:	f1ba 0f01 	cmp.w	sl, #1
 8013106:	f000 80a2 	beq.w	801324e <__kernel_rem_pio2+0x2fe>
 801310a:	f1ba 0f02 	cmp.w	sl, #2
 801310e:	f000 80c1 	beq.w	8013294 <__kernel_rem_pio2+0x344>
 8013112:	9b02      	ldr	r3, [sp, #8]
 8013114:	2b02      	cmp	r3, #2
 8013116:	d14a      	bne.n	80131ae <__kernel_rem_pio2+0x25e>
 8013118:	4632      	mov	r2, r6
 801311a:	463b      	mov	r3, r7
 801311c:	2000      	movs	r0, #0
 801311e:	4958      	ldr	r1, [pc, #352]	; (8013280 <__kernel_rem_pio2+0x330>)
 8013120:	f7ed f8ca 	bl	80002b8 <__aeabi_dsub>
 8013124:	4606      	mov	r6, r0
 8013126:	460f      	mov	r7, r1
 8013128:	2d00      	cmp	r5, #0
 801312a:	d040      	beq.n	80131ae <__kernel_rem_pio2+0x25e>
 801312c:	4650      	mov	r0, sl
 801312e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013270 <__kernel_rem_pio2+0x320>
 8013132:	f000 fb95 	bl	8013860 <scalbn>
 8013136:	4630      	mov	r0, r6
 8013138:	4639      	mov	r1, r7
 801313a:	ec53 2b10 	vmov	r2, r3, d0
 801313e:	f7ed f8bb 	bl	80002b8 <__aeabi_dsub>
 8013142:	4606      	mov	r6, r0
 8013144:	460f      	mov	r7, r1
 8013146:	e032      	b.n	80131ae <__kernel_rem_pio2+0x25e>
 8013148:	2200      	movs	r2, #0
 801314a:	4b4e      	ldr	r3, [pc, #312]	; (8013284 <__kernel_rem_pio2+0x334>)
 801314c:	4640      	mov	r0, r8
 801314e:	4649      	mov	r1, r9
 8013150:	f7ed fa6a 	bl	8000628 <__aeabi_dmul>
 8013154:	f7ed fd18 	bl	8000b88 <__aeabi_d2iz>
 8013158:	f7ed f9fc 	bl	8000554 <__aeabi_i2d>
 801315c:	2200      	movs	r2, #0
 801315e:	4b4a      	ldr	r3, [pc, #296]	; (8013288 <__kernel_rem_pio2+0x338>)
 8013160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013164:	f7ed fa60 	bl	8000628 <__aeabi_dmul>
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	4640      	mov	r0, r8
 801316e:	4649      	mov	r1, r9
 8013170:	f7ed f8a2 	bl	80002b8 <__aeabi_dsub>
 8013174:	f7ed fd08 	bl	8000b88 <__aeabi_d2iz>
 8013178:	ab0e      	add	r3, sp, #56	; 0x38
 801317a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801317e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013186:	f7ed f899 	bl	80002bc <__adddf3>
 801318a:	3501      	adds	r5, #1
 801318c:	4680      	mov	r8, r0
 801318e:	4689      	mov	r9, r1
 8013190:	e75e      	b.n	8013050 <__kernel_rem_pio2+0x100>
 8013192:	d105      	bne.n	80131a0 <__kernel_rem_pio2+0x250>
 8013194:	1e63      	subs	r3, r4, #1
 8013196:	aa0e      	add	r2, sp, #56	; 0x38
 8013198:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801319c:	15c3      	asrs	r3, r0, #23
 801319e:	e79f      	b.n	80130e0 <__kernel_rem_pio2+0x190>
 80131a0:	2200      	movs	r2, #0
 80131a2:	4b3a      	ldr	r3, [pc, #232]	; (801328c <__kernel_rem_pio2+0x33c>)
 80131a4:	f7ed fcc6 	bl	8000b34 <__aeabi_dcmpge>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d139      	bne.n	8013220 <__kernel_rem_pio2+0x2d0>
 80131ac:	9002      	str	r0, [sp, #8]
 80131ae:	2200      	movs	r2, #0
 80131b0:	2300      	movs	r3, #0
 80131b2:	4630      	mov	r0, r6
 80131b4:	4639      	mov	r1, r7
 80131b6:	f7ed fc9f 	bl	8000af8 <__aeabi_dcmpeq>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	f000 80c7 	beq.w	801334e <__kernel_rem_pio2+0x3fe>
 80131c0:	1e65      	subs	r5, r4, #1
 80131c2:	462b      	mov	r3, r5
 80131c4:	2200      	movs	r2, #0
 80131c6:	9904      	ldr	r1, [sp, #16]
 80131c8:	428b      	cmp	r3, r1
 80131ca:	da6a      	bge.n	80132a2 <__kernel_rem_pio2+0x352>
 80131cc:	2a00      	cmp	r2, #0
 80131ce:	f000 8088 	beq.w	80132e2 <__kernel_rem_pio2+0x392>
 80131d2:	ab0e      	add	r3, sp, #56	; 0x38
 80131d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80131d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f000 80b4 	beq.w	801334a <__kernel_rem_pio2+0x3fa>
 80131e2:	4650      	mov	r0, sl
 80131e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013270 <__kernel_rem_pio2+0x320>
 80131e8:	f000 fb3a 	bl	8013860 <scalbn>
 80131ec:	00ec      	lsls	r4, r5, #3
 80131ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80131f0:	191e      	adds	r6, r3, r4
 80131f2:	ec59 8b10 	vmov	r8, r9, d0
 80131f6:	f106 0a08 	add.w	sl, r6, #8
 80131fa:	462f      	mov	r7, r5
 80131fc:	2f00      	cmp	r7, #0
 80131fe:	f280 80df 	bge.w	80133c0 <__kernel_rem_pio2+0x470>
 8013202:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013268 <__kernel_rem_pio2+0x318>
 8013206:	f04f 0a00 	mov.w	sl, #0
 801320a:	eba5 030a 	sub.w	r3, r5, sl
 801320e:	2b00      	cmp	r3, #0
 8013210:	f2c0 810a 	blt.w	8013428 <__kernel_rem_pio2+0x4d8>
 8013214:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013290 <__kernel_rem_pio2+0x340>
 8013218:	ec59 8b18 	vmov	r8, r9, d8
 801321c:	2700      	movs	r7, #0
 801321e:	e0f5      	b.n	801340c <__kernel_rem_pio2+0x4bc>
 8013220:	2302      	movs	r3, #2
 8013222:	9302      	str	r3, [sp, #8]
 8013224:	e760      	b.n	80130e8 <__kernel_rem_pio2+0x198>
 8013226:	ab0e      	add	r3, sp, #56	; 0x38
 8013228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801322c:	b94d      	cbnz	r5, 8013242 <__kernel_rem_pio2+0x2f2>
 801322e:	b12b      	cbz	r3, 801323c <__kernel_rem_pio2+0x2ec>
 8013230:	a80e      	add	r0, sp, #56	; 0x38
 8013232:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013236:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801323a:	2301      	movs	r3, #1
 801323c:	3201      	adds	r2, #1
 801323e:	461d      	mov	r5, r3
 8013240:	e759      	b.n	80130f6 <__kernel_rem_pio2+0x1a6>
 8013242:	a80e      	add	r0, sp, #56	; 0x38
 8013244:	1acb      	subs	r3, r1, r3
 8013246:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801324a:	462b      	mov	r3, r5
 801324c:	e7f6      	b.n	801323c <__kernel_rem_pio2+0x2ec>
 801324e:	1e62      	subs	r2, r4, #1
 8013250:	ab0e      	add	r3, sp, #56	; 0x38
 8013252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013256:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801325a:	a90e      	add	r1, sp, #56	; 0x38
 801325c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013260:	e757      	b.n	8013112 <__kernel_rem_pio2+0x1c2>
 8013262:	bf00      	nop
 8013264:	f3af 8000 	nop.w
	...
 8013274:	3ff00000 	.word	0x3ff00000
 8013278:	08018558 	.word	0x08018558
 801327c:	40200000 	.word	0x40200000
 8013280:	3ff00000 	.word	0x3ff00000
 8013284:	3e700000 	.word	0x3e700000
 8013288:	41700000 	.word	0x41700000
 801328c:	3fe00000 	.word	0x3fe00000
 8013290:	08018518 	.word	0x08018518
 8013294:	1e62      	subs	r2, r4, #1
 8013296:	ab0e      	add	r3, sp, #56	; 0x38
 8013298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801329c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80132a0:	e7db      	b.n	801325a <__kernel_rem_pio2+0x30a>
 80132a2:	a90e      	add	r1, sp, #56	; 0x38
 80132a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80132a8:	3b01      	subs	r3, #1
 80132aa:	430a      	orrs	r2, r1
 80132ac:	e78b      	b.n	80131c6 <__kernel_rem_pio2+0x276>
 80132ae:	3301      	adds	r3, #1
 80132b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80132b4:	2900      	cmp	r1, #0
 80132b6:	d0fa      	beq.n	80132ae <__kernel_rem_pio2+0x35e>
 80132b8:	9a08      	ldr	r2, [sp, #32]
 80132ba:	4422      	add	r2, r4
 80132bc:	00d2      	lsls	r2, r2, #3
 80132be:	a922      	add	r1, sp, #136	; 0x88
 80132c0:	18e3      	adds	r3, r4, r3
 80132c2:	9206      	str	r2, [sp, #24]
 80132c4:	440a      	add	r2, r1
 80132c6:	9302      	str	r3, [sp, #8]
 80132c8:	f10b 0108 	add.w	r1, fp, #8
 80132cc:	f102 0308 	add.w	r3, r2, #8
 80132d0:	1c66      	adds	r6, r4, #1
 80132d2:	910a      	str	r1, [sp, #40]	; 0x28
 80132d4:	2500      	movs	r5, #0
 80132d6:	930d      	str	r3, [sp, #52]	; 0x34
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	42b3      	cmp	r3, r6
 80132dc:	da04      	bge.n	80132e8 <__kernel_rem_pio2+0x398>
 80132de:	461c      	mov	r4, r3
 80132e0:	e6a6      	b.n	8013030 <__kernel_rem_pio2+0xe0>
 80132e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132e4:	2301      	movs	r3, #1
 80132e6:	e7e3      	b.n	80132b0 <__kernel_rem_pio2+0x360>
 80132e8:	9b06      	ldr	r3, [sp, #24]
 80132ea:	18ef      	adds	r7, r5, r3
 80132ec:	ab22      	add	r3, sp, #136	; 0x88
 80132ee:	441f      	add	r7, r3
 80132f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80132f6:	f7ed f92d 	bl	8000554 <__aeabi_i2d>
 80132fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132fc:	461c      	mov	r4, r3
 80132fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013300:	e9c7 0100 	strd	r0, r1, [r7]
 8013304:	eb03 0b05 	add.w	fp, r3, r5
 8013308:	2700      	movs	r7, #0
 801330a:	f04f 0800 	mov.w	r8, #0
 801330e:	f04f 0900 	mov.w	r9, #0
 8013312:	9b07      	ldr	r3, [sp, #28]
 8013314:	429f      	cmp	r7, r3
 8013316:	dd08      	ble.n	801332a <__kernel_rem_pio2+0x3da>
 8013318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801331a:	aa72      	add	r2, sp, #456	; 0x1c8
 801331c:	18eb      	adds	r3, r5, r3
 801331e:	4413      	add	r3, r2
 8013320:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013324:	3601      	adds	r6, #1
 8013326:	3508      	adds	r5, #8
 8013328:	e7d6      	b.n	80132d8 <__kernel_rem_pio2+0x388>
 801332a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801332e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013332:	f7ed f979 	bl	8000628 <__aeabi_dmul>
 8013336:	4602      	mov	r2, r0
 8013338:	460b      	mov	r3, r1
 801333a:	4640      	mov	r0, r8
 801333c:	4649      	mov	r1, r9
 801333e:	f7ec ffbd 	bl	80002bc <__adddf3>
 8013342:	3701      	adds	r7, #1
 8013344:	4680      	mov	r8, r0
 8013346:	4689      	mov	r9, r1
 8013348:	e7e3      	b.n	8013312 <__kernel_rem_pio2+0x3c2>
 801334a:	3d01      	subs	r5, #1
 801334c:	e741      	b.n	80131d2 <__kernel_rem_pio2+0x282>
 801334e:	f1ca 0000 	rsb	r0, sl, #0
 8013352:	ec47 6b10 	vmov	d0, r6, r7
 8013356:	f000 fa83 	bl	8013860 <scalbn>
 801335a:	ec57 6b10 	vmov	r6, r7, d0
 801335e:	2200      	movs	r2, #0
 8013360:	4b99      	ldr	r3, [pc, #612]	; (80135c8 <__kernel_rem_pio2+0x678>)
 8013362:	ee10 0a10 	vmov	r0, s0
 8013366:	4639      	mov	r1, r7
 8013368:	f7ed fbe4 	bl	8000b34 <__aeabi_dcmpge>
 801336c:	b1f8      	cbz	r0, 80133ae <__kernel_rem_pio2+0x45e>
 801336e:	2200      	movs	r2, #0
 8013370:	4b96      	ldr	r3, [pc, #600]	; (80135cc <__kernel_rem_pio2+0x67c>)
 8013372:	4630      	mov	r0, r6
 8013374:	4639      	mov	r1, r7
 8013376:	f7ed f957 	bl	8000628 <__aeabi_dmul>
 801337a:	f7ed fc05 	bl	8000b88 <__aeabi_d2iz>
 801337e:	4680      	mov	r8, r0
 8013380:	f7ed f8e8 	bl	8000554 <__aeabi_i2d>
 8013384:	2200      	movs	r2, #0
 8013386:	4b90      	ldr	r3, [pc, #576]	; (80135c8 <__kernel_rem_pio2+0x678>)
 8013388:	f7ed f94e 	bl	8000628 <__aeabi_dmul>
 801338c:	460b      	mov	r3, r1
 801338e:	4602      	mov	r2, r0
 8013390:	4639      	mov	r1, r7
 8013392:	4630      	mov	r0, r6
 8013394:	f7ec ff90 	bl	80002b8 <__aeabi_dsub>
 8013398:	f7ed fbf6 	bl	8000b88 <__aeabi_d2iz>
 801339c:	1c65      	adds	r5, r4, #1
 801339e:	ab0e      	add	r3, sp, #56	; 0x38
 80133a0:	f10a 0a18 	add.w	sl, sl, #24
 80133a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80133a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80133ac:	e719      	b.n	80131e2 <__kernel_rem_pio2+0x292>
 80133ae:	4630      	mov	r0, r6
 80133b0:	4639      	mov	r1, r7
 80133b2:	f7ed fbe9 	bl	8000b88 <__aeabi_d2iz>
 80133b6:	ab0e      	add	r3, sp, #56	; 0x38
 80133b8:	4625      	mov	r5, r4
 80133ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80133be:	e710      	b.n	80131e2 <__kernel_rem_pio2+0x292>
 80133c0:	ab0e      	add	r3, sp, #56	; 0x38
 80133c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80133c6:	f7ed f8c5 	bl	8000554 <__aeabi_i2d>
 80133ca:	4642      	mov	r2, r8
 80133cc:	464b      	mov	r3, r9
 80133ce:	f7ed f92b 	bl	8000628 <__aeabi_dmul>
 80133d2:	2200      	movs	r2, #0
 80133d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80133d8:	4b7c      	ldr	r3, [pc, #496]	; (80135cc <__kernel_rem_pio2+0x67c>)
 80133da:	4640      	mov	r0, r8
 80133dc:	4649      	mov	r1, r9
 80133de:	f7ed f923 	bl	8000628 <__aeabi_dmul>
 80133e2:	3f01      	subs	r7, #1
 80133e4:	4680      	mov	r8, r0
 80133e6:	4689      	mov	r9, r1
 80133e8:	e708      	b.n	80131fc <__kernel_rem_pio2+0x2ac>
 80133ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80133ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80133f6:	f7ed f917 	bl	8000628 <__aeabi_dmul>
 80133fa:	4602      	mov	r2, r0
 80133fc:	460b      	mov	r3, r1
 80133fe:	4640      	mov	r0, r8
 8013400:	4649      	mov	r1, r9
 8013402:	f7ec ff5b 	bl	80002bc <__adddf3>
 8013406:	3701      	adds	r7, #1
 8013408:	4680      	mov	r8, r0
 801340a:	4689      	mov	r9, r1
 801340c:	9b04      	ldr	r3, [sp, #16]
 801340e:	429f      	cmp	r7, r3
 8013410:	dc01      	bgt.n	8013416 <__kernel_rem_pio2+0x4c6>
 8013412:	45ba      	cmp	sl, r7
 8013414:	dae9      	bge.n	80133ea <__kernel_rem_pio2+0x49a>
 8013416:	ab4a      	add	r3, sp, #296	; 0x128
 8013418:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801341c:	e9c3 8900 	strd	r8, r9, [r3]
 8013420:	f10a 0a01 	add.w	sl, sl, #1
 8013424:	3e08      	subs	r6, #8
 8013426:	e6f0      	b.n	801320a <__kernel_rem_pio2+0x2ba>
 8013428:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801342a:	2b03      	cmp	r3, #3
 801342c:	d85b      	bhi.n	80134e6 <__kernel_rem_pio2+0x596>
 801342e:	e8df f003 	tbb	[pc, r3]
 8013432:	264a      	.short	0x264a
 8013434:	0226      	.short	0x0226
 8013436:	ab9a      	add	r3, sp, #616	; 0x268
 8013438:	441c      	add	r4, r3
 801343a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801343e:	46a2      	mov	sl, r4
 8013440:	46ab      	mov	fp, r5
 8013442:	f1bb 0f00 	cmp.w	fp, #0
 8013446:	dc6c      	bgt.n	8013522 <__kernel_rem_pio2+0x5d2>
 8013448:	46a2      	mov	sl, r4
 801344a:	46ab      	mov	fp, r5
 801344c:	f1bb 0f01 	cmp.w	fp, #1
 8013450:	f300 8086 	bgt.w	8013560 <__kernel_rem_pio2+0x610>
 8013454:	2000      	movs	r0, #0
 8013456:	2100      	movs	r1, #0
 8013458:	2d01      	cmp	r5, #1
 801345a:	f300 80a0 	bgt.w	801359e <__kernel_rem_pio2+0x64e>
 801345e:	9b02      	ldr	r3, [sp, #8]
 8013460:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013464:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013468:	2b00      	cmp	r3, #0
 801346a:	f040 809e 	bne.w	80135aa <__kernel_rem_pio2+0x65a>
 801346e:	9b01      	ldr	r3, [sp, #4]
 8013470:	e9c3 7800 	strd	r7, r8, [r3]
 8013474:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013478:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801347c:	e033      	b.n	80134e6 <__kernel_rem_pio2+0x596>
 801347e:	3408      	adds	r4, #8
 8013480:	ab4a      	add	r3, sp, #296	; 0x128
 8013482:	441c      	add	r4, r3
 8013484:	462e      	mov	r6, r5
 8013486:	2000      	movs	r0, #0
 8013488:	2100      	movs	r1, #0
 801348a:	2e00      	cmp	r6, #0
 801348c:	da3a      	bge.n	8013504 <__kernel_rem_pio2+0x5b4>
 801348e:	9b02      	ldr	r3, [sp, #8]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d03d      	beq.n	8013510 <__kernel_rem_pio2+0x5c0>
 8013494:	4602      	mov	r2, r0
 8013496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801349a:	9c01      	ldr	r4, [sp, #4]
 801349c:	e9c4 2300 	strd	r2, r3, [r4]
 80134a0:	4602      	mov	r2, r0
 80134a2:	460b      	mov	r3, r1
 80134a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80134a8:	f7ec ff06 	bl	80002b8 <__aeabi_dsub>
 80134ac:	ae4c      	add	r6, sp, #304	; 0x130
 80134ae:	2401      	movs	r4, #1
 80134b0:	42a5      	cmp	r5, r4
 80134b2:	da30      	bge.n	8013516 <__kernel_rem_pio2+0x5c6>
 80134b4:	9b02      	ldr	r3, [sp, #8]
 80134b6:	b113      	cbz	r3, 80134be <__kernel_rem_pio2+0x56e>
 80134b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134bc:	4619      	mov	r1, r3
 80134be:	9b01      	ldr	r3, [sp, #4]
 80134c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80134c4:	e00f      	b.n	80134e6 <__kernel_rem_pio2+0x596>
 80134c6:	ab9a      	add	r3, sp, #616	; 0x268
 80134c8:	441c      	add	r4, r3
 80134ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80134ce:	2000      	movs	r0, #0
 80134d0:	2100      	movs	r1, #0
 80134d2:	2d00      	cmp	r5, #0
 80134d4:	da10      	bge.n	80134f8 <__kernel_rem_pio2+0x5a8>
 80134d6:	9b02      	ldr	r3, [sp, #8]
 80134d8:	b113      	cbz	r3, 80134e0 <__kernel_rem_pio2+0x590>
 80134da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134de:	4619      	mov	r1, r3
 80134e0:	9b01      	ldr	r3, [sp, #4]
 80134e2:	e9c3 0100 	strd	r0, r1, [r3]
 80134e6:	9b06      	ldr	r3, [sp, #24]
 80134e8:	f003 0007 	and.w	r0, r3, #7
 80134ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80134f0:	ecbd 8b02 	vpop	{d8}
 80134f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80134fc:	f7ec fede 	bl	80002bc <__adddf3>
 8013500:	3d01      	subs	r5, #1
 8013502:	e7e6      	b.n	80134d2 <__kernel_rem_pio2+0x582>
 8013504:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013508:	f7ec fed8 	bl	80002bc <__adddf3>
 801350c:	3e01      	subs	r6, #1
 801350e:	e7bc      	b.n	801348a <__kernel_rem_pio2+0x53a>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	e7c1      	b.n	801349a <__kernel_rem_pio2+0x54a>
 8013516:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801351a:	f7ec fecf 	bl	80002bc <__adddf3>
 801351e:	3401      	adds	r4, #1
 8013520:	e7c6      	b.n	80134b0 <__kernel_rem_pio2+0x560>
 8013522:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013526:	ed3a 7b02 	vldmdb	sl!, {d7}
 801352a:	4640      	mov	r0, r8
 801352c:	ec53 2b17 	vmov	r2, r3, d7
 8013530:	4649      	mov	r1, r9
 8013532:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013536:	f7ec fec1 	bl	80002bc <__adddf3>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4606      	mov	r6, r0
 8013540:	460f      	mov	r7, r1
 8013542:	4640      	mov	r0, r8
 8013544:	4649      	mov	r1, r9
 8013546:	f7ec feb7 	bl	80002b8 <__aeabi_dsub>
 801354a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801354e:	f7ec feb5 	bl	80002bc <__adddf3>
 8013552:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013556:	e9ca 0100 	strd	r0, r1, [sl]
 801355a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801355e:	e770      	b.n	8013442 <__kernel_rem_pio2+0x4f2>
 8013560:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013564:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013568:	4630      	mov	r0, r6
 801356a:	ec53 2b17 	vmov	r2, r3, d7
 801356e:	4639      	mov	r1, r7
 8013570:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013574:	f7ec fea2 	bl	80002bc <__adddf3>
 8013578:	4602      	mov	r2, r0
 801357a:	460b      	mov	r3, r1
 801357c:	4680      	mov	r8, r0
 801357e:	4689      	mov	r9, r1
 8013580:	4630      	mov	r0, r6
 8013582:	4639      	mov	r1, r7
 8013584:	f7ec fe98 	bl	80002b8 <__aeabi_dsub>
 8013588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801358c:	f7ec fe96 	bl	80002bc <__adddf3>
 8013590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013594:	e9ca 0100 	strd	r0, r1, [sl]
 8013598:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801359c:	e756      	b.n	801344c <__kernel_rem_pio2+0x4fc>
 801359e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80135a2:	f7ec fe8b 	bl	80002bc <__adddf3>
 80135a6:	3d01      	subs	r5, #1
 80135a8:	e756      	b.n	8013458 <__kernel_rem_pio2+0x508>
 80135aa:	9b01      	ldr	r3, [sp, #4]
 80135ac:	9a01      	ldr	r2, [sp, #4]
 80135ae:	601f      	str	r7, [r3, #0]
 80135b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80135b4:	605c      	str	r4, [r3, #4]
 80135b6:	609d      	str	r5, [r3, #8]
 80135b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80135bc:	60d3      	str	r3, [r2, #12]
 80135be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135c2:	6110      	str	r0, [r2, #16]
 80135c4:	6153      	str	r3, [r2, #20]
 80135c6:	e78e      	b.n	80134e6 <__kernel_rem_pio2+0x596>
 80135c8:	41700000 	.word	0x41700000
 80135cc:	3e700000 	.word	0x3e700000

080135d0 <__kernel_sin>:
 80135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	ec55 4b10 	vmov	r4, r5, d0
 80135d8:	b085      	sub	sp, #20
 80135da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80135e2:	ed8d 1b00 	vstr	d1, [sp]
 80135e6:	9002      	str	r0, [sp, #8]
 80135e8:	da06      	bge.n	80135f8 <__kernel_sin+0x28>
 80135ea:	ee10 0a10 	vmov	r0, s0
 80135ee:	4629      	mov	r1, r5
 80135f0:	f7ed faca 	bl	8000b88 <__aeabi_d2iz>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d051      	beq.n	801369c <__kernel_sin+0xcc>
 80135f8:	4622      	mov	r2, r4
 80135fa:	462b      	mov	r3, r5
 80135fc:	4620      	mov	r0, r4
 80135fe:	4629      	mov	r1, r5
 8013600:	f7ed f812 	bl	8000628 <__aeabi_dmul>
 8013604:	4682      	mov	sl, r0
 8013606:	468b      	mov	fp, r1
 8013608:	4602      	mov	r2, r0
 801360a:	460b      	mov	r3, r1
 801360c:	4620      	mov	r0, r4
 801360e:	4629      	mov	r1, r5
 8013610:	f7ed f80a 	bl	8000628 <__aeabi_dmul>
 8013614:	a341      	add	r3, pc, #260	; (adr r3, 801371c <__kernel_sin+0x14c>)
 8013616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361a:	4680      	mov	r8, r0
 801361c:	4689      	mov	r9, r1
 801361e:	4650      	mov	r0, sl
 8013620:	4659      	mov	r1, fp
 8013622:	f7ed f801 	bl	8000628 <__aeabi_dmul>
 8013626:	a33f      	add	r3, pc, #252	; (adr r3, 8013724 <__kernel_sin+0x154>)
 8013628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362c:	f7ec fe44 	bl	80002b8 <__aeabi_dsub>
 8013630:	4652      	mov	r2, sl
 8013632:	465b      	mov	r3, fp
 8013634:	f7ec fff8 	bl	8000628 <__aeabi_dmul>
 8013638:	a33c      	add	r3, pc, #240	; (adr r3, 801372c <__kernel_sin+0x15c>)
 801363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363e:	f7ec fe3d 	bl	80002bc <__adddf3>
 8013642:	4652      	mov	r2, sl
 8013644:	465b      	mov	r3, fp
 8013646:	f7ec ffef 	bl	8000628 <__aeabi_dmul>
 801364a:	a33a      	add	r3, pc, #232	; (adr r3, 8013734 <__kernel_sin+0x164>)
 801364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013650:	f7ec fe32 	bl	80002b8 <__aeabi_dsub>
 8013654:	4652      	mov	r2, sl
 8013656:	465b      	mov	r3, fp
 8013658:	f7ec ffe6 	bl	8000628 <__aeabi_dmul>
 801365c:	a337      	add	r3, pc, #220	; (adr r3, 801373c <__kernel_sin+0x16c>)
 801365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013662:	f7ec fe2b 	bl	80002bc <__adddf3>
 8013666:	9b02      	ldr	r3, [sp, #8]
 8013668:	4606      	mov	r6, r0
 801366a:	460f      	mov	r7, r1
 801366c:	b9db      	cbnz	r3, 80136a6 <__kernel_sin+0xd6>
 801366e:	4602      	mov	r2, r0
 8013670:	460b      	mov	r3, r1
 8013672:	4650      	mov	r0, sl
 8013674:	4659      	mov	r1, fp
 8013676:	f7ec ffd7 	bl	8000628 <__aeabi_dmul>
 801367a:	a325      	add	r3, pc, #148	; (adr r3, 8013710 <__kernel_sin+0x140>)
 801367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013680:	f7ec fe1a 	bl	80002b8 <__aeabi_dsub>
 8013684:	4642      	mov	r2, r8
 8013686:	464b      	mov	r3, r9
 8013688:	f7ec ffce 	bl	8000628 <__aeabi_dmul>
 801368c:	4602      	mov	r2, r0
 801368e:	460b      	mov	r3, r1
 8013690:	4620      	mov	r0, r4
 8013692:	4629      	mov	r1, r5
 8013694:	f7ec fe12 	bl	80002bc <__adddf3>
 8013698:	4604      	mov	r4, r0
 801369a:	460d      	mov	r5, r1
 801369c:	ec45 4b10 	vmov	d0, r4, r5
 80136a0:	b005      	add	sp, #20
 80136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a6:	2200      	movs	r2, #0
 80136a8:	4b1b      	ldr	r3, [pc, #108]	; (8013718 <__kernel_sin+0x148>)
 80136aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136ae:	f7ec ffbb 	bl	8000628 <__aeabi_dmul>
 80136b2:	4632      	mov	r2, r6
 80136b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136b8:	463b      	mov	r3, r7
 80136ba:	4640      	mov	r0, r8
 80136bc:	4649      	mov	r1, r9
 80136be:	f7ec ffb3 	bl	8000628 <__aeabi_dmul>
 80136c2:	4602      	mov	r2, r0
 80136c4:	460b      	mov	r3, r1
 80136c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136ca:	f7ec fdf5 	bl	80002b8 <__aeabi_dsub>
 80136ce:	4652      	mov	r2, sl
 80136d0:	465b      	mov	r3, fp
 80136d2:	f7ec ffa9 	bl	8000628 <__aeabi_dmul>
 80136d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136da:	f7ec fded 	bl	80002b8 <__aeabi_dsub>
 80136de:	a30c      	add	r3, pc, #48	; (adr r3, 8013710 <__kernel_sin+0x140>)
 80136e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e4:	4606      	mov	r6, r0
 80136e6:	460f      	mov	r7, r1
 80136e8:	4640      	mov	r0, r8
 80136ea:	4649      	mov	r1, r9
 80136ec:	f7ec ff9c 	bl	8000628 <__aeabi_dmul>
 80136f0:	4602      	mov	r2, r0
 80136f2:	460b      	mov	r3, r1
 80136f4:	4630      	mov	r0, r6
 80136f6:	4639      	mov	r1, r7
 80136f8:	f7ec fde0 	bl	80002bc <__adddf3>
 80136fc:	4602      	mov	r2, r0
 80136fe:	460b      	mov	r3, r1
 8013700:	4620      	mov	r0, r4
 8013702:	4629      	mov	r1, r5
 8013704:	f7ec fdd8 	bl	80002b8 <__aeabi_dsub>
 8013708:	e7c6      	b.n	8013698 <__kernel_sin+0xc8>
 801370a:	bf00      	nop
 801370c:	f3af 8000 	nop.w
 8013710:	55555549 	.word	0x55555549
 8013714:	3fc55555 	.word	0x3fc55555
 8013718:	3fe00000 	.word	0x3fe00000
 801371c:	5acfd57c 	.word	0x5acfd57c
 8013720:	3de5d93a 	.word	0x3de5d93a
 8013724:	8a2b9ceb 	.word	0x8a2b9ceb
 8013728:	3e5ae5e6 	.word	0x3e5ae5e6
 801372c:	57b1fe7d 	.word	0x57b1fe7d
 8013730:	3ec71de3 	.word	0x3ec71de3
 8013734:	19c161d5 	.word	0x19c161d5
 8013738:	3f2a01a0 	.word	0x3f2a01a0
 801373c:	1110f8a6 	.word	0x1110f8a6
 8013740:	3f811111 	.word	0x3f811111

08013744 <fabs>:
 8013744:	ec51 0b10 	vmov	r0, r1, d0
 8013748:	ee10 2a10 	vmov	r2, s0
 801374c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013750:	ec43 2b10 	vmov	d0, r2, r3
 8013754:	4770      	bx	lr
	...

08013758 <floor>:
 8013758:	ec51 0b10 	vmov	r0, r1, d0
 801375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013760:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013764:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013768:	2e13      	cmp	r6, #19
 801376a:	460c      	mov	r4, r1
 801376c:	ee10 5a10 	vmov	r5, s0
 8013770:	4680      	mov	r8, r0
 8013772:	dc34      	bgt.n	80137de <floor+0x86>
 8013774:	2e00      	cmp	r6, #0
 8013776:	da16      	bge.n	80137a6 <floor+0x4e>
 8013778:	a335      	add	r3, pc, #212	; (adr r3, 8013850 <floor+0xf8>)
 801377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377e:	f7ec fd9d 	bl	80002bc <__adddf3>
 8013782:	2200      	movs	r2, #0
 8013784:	2300      	movs	r3, #0
 8013786:	f7ed f9df 	bl	8000b48 <__aeabi_dcmpgt>
 801378a:	b148      	cbz	r0, 80137a0 <floor+0x48>
 801378c:	2c00      	cmp	r4, #0
 801378e:	da59      	bge.n	8013844 <floor+0xec>
 8013790:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013794:	4a30      	ldr	r2, [pc, #192]	; (8013858 <floor+0x100>)
 8013796:	432b      	orrs	r3, r5
 8013798:	2500      	movs	r5, #0
 801379a:	42ab      	cmp	r3, r5
 801379c:	bf18      	it	ne
 801379e:	4614      	movne	r4, r2
 80137a0:	4621      	mov	r1, r4
 80137a2:	4628      	mov	r0, r5
 80137a4:	e025      	b.n	80137f2 <floor+0x9a>
 80137a6:	4f2d      	ldr	r7, [pc, #180]	; (801385c <floor+0x104>)
 80137a8:	4137      	asrs	r7, r6
 80137aa:	ea01 0307 	and.w	r3, r1, r7
 80137ae:	4303      	orrs	r3, r0
 80137b0:	d01f      	beq.n	80137f2 <floor+0x9a>
 80137b2:	a327      	add	r3, pc, #156	; (adr r3, 8013850 <floor+0xf8>)
 80137b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b8:	f7ec fd80 	bl	80002bc <__adddf3>
 80137bc:	2200      	movs	r2, #0
 80137be:	2300      	movs	r3, #0
 80137c0:	f7ed f9c2 	bl	8000b48 <__aeabi_dcmpgt>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d0eb      	beq.n	80137a0 <floor+0x48>
 80137c8:	2c00      	cmp	r4, #0
 80137ca:	bfbe      	ittt	lt
 80137cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80137d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80137d4:	19a4      	addlt	r4, r4, r6
 80137d6:	ea24 0407 	bic.w	r4, r4, r7
 80137da:	2500      	movs	r5, #0
 80137dc:	e7e0      	b.n	80137a0 <floor+0x48>
 80137de:	2e33      	cmp	r6, #51	; 0x33
 80137e0:	dd0b      	ble.n	80137fa <floor+0xa2>
 80137e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80137e6:	d104      	bne.n	80137f2 <floor+0x9a>
 80137e8:	ee10 2a10 	vmov	r2, s0
 80137ec:	460b      	mov	r3, r1
 80137ee:	f7ec fd65 	bl	80002bc <__adddf3>
 80137f2:	ec41 0b10 	vmov	d0, r0, r1
 80137f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80137fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013802:	fa23 f707 	lsr.w	r7, r3, r7
 8013806:	4207      	tst	r7, r0
 8013808:	d0f3      	beq.n	80137f2 <floor+0x9a>
 801380a:	a311      	add	r3, pc, #68	; (adr r3, 8013850 <floor+0xf8>)
 801380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013810:	f7ec fd54 	bl	80002bc <__adddf3>
 8013814:	2200      	movs	r2, #0
 8013816:	2300      	movs	r3, #0
 8013818:	f7ed f996 	bl	8000b48 <__aeabi_dcmpgt>
 801381c:	2800      	cmp	r0, #0
 801381e:	d0bf      	beq.n	80137a0 <floor+0x48>
 8013820:	2c00      	cmp	r4, #0
 8013822:	da02      	bge.n	801382a <floor+0xd2>
 8013824:	2e14      	cmp	r6, #20
 8013826:	d103      	bne.n	8013830 <floor+0xd8>
 8013828:	3401      	adds	r4, #1
 801382a:	ea25 0507 	bic.w	r5, r5, r7
 801382e:	e7b7      	b.n	80137a0 <floor+0x48>
 8013830:	2301      	movs	r3, #1
 8013832:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013836:	fa03 f606 	lsl.w	r6, r3, r6
 801383a:	4435      	add	r5, r6
 801383c:	4545      	cmp	r5, r8
 801383e:	bf38      	it	cc
 8013840:	18e4      	addcc	r4, r4, r3
 8013842:	e7f2      	b.n	801382a <floor+0xd2>
 8013844:	2500      	movs	r5, #0
 8013846:	462c      	mov	r4, r5
 8013848:	e7aa      	b.n	80137a0 <floor+0x48>
 801384a:	bf00      	nop
 801384c:	f3af 8000 	nop.w
 8013850:	8800759c 	.word	0x8800759c
 8013854:	7e37e43c 	.word	0x7e37e43c
 8013858:	bff00000 	.word	0xbff00000
 801385c:	000fffff 	.word	0x000fffff

08013860 <scalbn>:
 8013860:	b570      	push	{r4, r5, r6, lr}
 8013862:	ec55 4b10 	vmov	r4, r5, d0
 8013866:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801386a:	4606      	mov	r6, r0
 801386c:	462b      	mov	r3, r5
 801386e:	b9aa      	cbnz	r2, 801389c <scalbn+0x3c>
 8013870:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013874:	4323      	orrs	r3, r4
 8013876:	d03b      	beq.n	80138f0 <scalbn+0x90>
 8013878:	4b31      	ldr	r3, [pc, #196]	; (8013940 <scalbn+0xe0>)
 801387a:	4629      	mov	r1, r5
 801387c:	2200      	movs	r2, #0
 801387e:	ee10 0a10 	vmov	r0, s0
 8013882:	f7ec fed1 	bl	8000628 <__aeabi_dmul>
 8013886:	4b2f      	ldr	r3, [pc, #188]	; (8013944 <scalbn+0xe4>)
 8013888:	429e      	cmp	r6, r3
 801388a:	4604      	mov	r4, r0
 801388c:	460d      	mov	r5, r1
 801388e:	da12      	bge.n	80138b6 <scalbn+0x56>
 8013890:	a327      	add	r3, pc, #156	; (adr r3, 8013930 <scalbn+0xd0>)
 8013892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013896:	f7ec fec7 	bl	8000628 <__aeabi_dmul>
 801389a:	e009      	b.n	80138b0 <scalbn+0x50>
 801389c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80138a0:	428a      	cmp	r2, r1
 80138a2:	d10c      	bne.n	80138be <scalbn+0x5e>
 80138a4:	ee10 2a10 	vmov	r2, s0
 80138a8:	4620      	mov	r0, r4
 80138aa:	4629      	mov	r1, r5
 80138ac:	f7ec fd06 	bl	80002bc <__adddf3>
 80138b0:	4604      	mov	r4, r0
 80138b2:	460d      	mov	r5, r1
 80138b4:	e01c      	b.n	80138f0 <scalbn+0x90>
 80138b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80138ba:	460b      	mov	r3, r1
 80138bc:	3a36      	subs	r2, #54	; 0x36
 80138be:	4432      	add	r2, r6
 80138c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80138c4:	428a      	cmp	r2, r1
 80138c6:	dd0b      	ble.n	80138e0 <scalbn+0x80>
 80138c8:	ec45 4b11 	vmov	d1, r4, r5
 80138cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013938 <scalbn+0xd8>
 80138d0:	f000 f83c 	bl	801394c <copysign>
 80138d4:	a318      	add	r3, pc, #96	; (adr r3, 8013938 <scalbn+0xd8>)
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	ec51 0b10 	vmov	r0, r1, d0
 80138de:	e7da      	b.n	8013896 <scalbn+0x36>
 80138e0:	2a00      	cmp	r2, #0
 80138e2:	dd08      	ble.n	80138f6 <scalbn+0x96>
 80138e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80138e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80138ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80138f0:	ec45 4b10 	vmov	d0, r4, r5
 80138f4:	bd70      	pop	{r4, r5, r6, pc}
 80138f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80138fa:	da0d      	bge.n	8013918 <scalbn+0xb8>
 80138fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013900:	429e      	cmp	r6, r3
 8013902:	ec45 4b11 	vmov	d1, r4, r5
 8013906:	dce1      	bgt.n	80138cc <scalbn+0x6c>
 8013908:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013930 <scalbn+0xd0>
 801390c:	f000 f81e 	bl	801394c <copysign>
 8013910:	a307      	add	r3, pc, #28	; (adr r3, 8013930 <scalbn+0xd0>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	e7e0      	b.n	80138da <scalbn+0x7a>
 8013918:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801391c:	3236      	adds	r2, #54	; 0x36
 801391e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013926:	4620      	mov	r0, r4
 8013928:	4629      	mov	r1, r5
 801392a:	2200      	movs	r2, #0
 801392c:	4b06      	ldr	r3, [pc, #24]	; (8013948 <scalbn+0xe8>)
 801392e:	e7b2      	b.n	8013896 <scalbn+0x36>
 8013930:	c2f8f359 	.word	0xc2f8f359
 8013934:	01a56e1f 	.word	0x01a56e1f
 8013938:	8800759c 	.word	0x8800759c
 801393c:	7e37e43c 	.word	0x7e37e43c
 8013940:	43500000 	.word	0x43500000
 8013944:	ffff3cb0 	.word	0xffff3cb0
 8013948:	3c900000 	.word	0x3c900000

0801394c <copysign>:
 801394c:	ec51 0b10 	vmov	r0, r1, d0
 8013950:	ee11 0a90 	vmov	r0, s3
 8013954:	ee10 2a10 	vmov	r2, s0
 8013958:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801395c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013960:	ea41 0300 	orr.w	r3, r1, r0
 8013964:	ec43 2b10 	vmov	d0, r2, r3
 8013968:	4770      	bx	lr
	...

0801396c <__errno>:
 801396c:	4b01      	ldr	r3, [pc, #4]	; (8013974 <__errno+0x8>)
 801396e:	6818      	ldr	r0, [r3, #0]
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop
 8013974:	2000000c 	.word	0x2000000c

08013978 <__libc_init_array>:
 8013978:	b570      	push	{r4, r5, r6, lr}
 801397a:	4e0d      	ldr	r6, [pc, #52]	; (80139b0 <__libc_init_array+0x38>)
 801397c:	4c0d      	ldr	r4, [pc, #52]	; (80139b4 <__libc_init_array+0x3c>)
 801397e:	1ba4      	subs	r4, r4, r6
 8013980:	10a4      	asrs	r4, r4, #2
 8013982:	2500      	movs	r5, #0
 8013984:	42a5      	cmp	r5, r4
 8013986:	d109      	bne.n	801399c <__libc_init_array+0x24>
 8013988:	4e0b      	ldr	r6, [pc, #44]	; (80139b8 <__libc_init_array+0x40>)
 801398a:	4c0c      	ldr	r4, [pc, #48]	; (80139bc <__libc_init_array+0x44>)
 801398c:	f004 f9e8 	bl	8017d60 <_init>
 8013990:	1ba4      	subs	r4, r4, r6
 8013992:	10a4      	asrs	r4, r4, #2
 8013994:	2500      	movs	r5, #0
 8013996:	42a5      	cmp	r5, r4
 8013998:	d105      	bne.n	80139a6 <__libc_init_array+0x2e>
 801399a:	bd70      	pop	{r4, r5, r6, pc}
 801399c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139a0:	4798      	blx	r3
 80139a2:	3501      	adds	r5, #1
 80139a4:	e7ee      	b.n	8013984 <__libc_init_array+0xc>
 80139a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80139aa:	4798      	blx	r3
 80139ac:	3501      	adds	r5, #1
 80139ae:	e7f2      	b.n	8013996 <__libc_init_array+0x1e>
 80139b0:	080188a4 	.word	0x080188a4
 80139b4:	080188a4 	.word	0x080188a4
 80139b8:	080188a4 	.word	0x080188a4
 80139bc:	080188ac 	.word	0x080188ac

080139c0 <memcpy>:
 80139c0:	b510      	push	{r4, lr}
 80139c2:	1e43      	subs	r3, r0, #1
 80139c4:	440a      	add	r2, r1
 80139c6:	4291      	cmp	r1, r2
 80139c8:	d100      	bne.n	80139cc <memcpy+0xc>
 80139ca:	bd10      	pop	{r4, pc}
 80139cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139d4:	e7f7      	b.n	80139c6 <memcpy+0x6>

080139d6 <memset>:
 80139d6:	4402      	add	r2, r0
 80139d8:	4603      	mov	r3, r0
 80139da:	4293      	cmp	r3, r2
 80139dc:	d100      	bne.n	80139e0 <memset+0xa>
 80139de:	4770      	bx	lr
 80139e0:	f803 1b01 	strb.w	r1, [r3], #1
 80139e4:	e7f9      	b.n	80139da <memset+0x4>

080139e6 <__cvt>:
 80139e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139ea:	ec55 4b10 	vmov	r4, r5, d0
 80139ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80139f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80139f4:	2d00      	cmp	r5, #0
 80139f6:	460e      	mov	r6, r1
 80139f8:	4691      	mov	r9, r2
 80139fa:	4619      	mov	r1, r3
 80139fc:	bfb8      	it	lt
 80139fe:	4622      	movlt	r2, r4
 8013a00:	462b      	mov	r3, r5
 8013a02:	f027 0720 	bic.w	r7, r7, #32
 8013a06:	bfbb      	ittet	lt
 8013a08:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013a0c:	461d      	movlt	r5, r3
 8013a0e:	2300      	movge	r3, #0
 8013a10:	232d      	movlt	r3, #45	; 0x2d
 8013a12:	bfb8      	it	lt
 8013a14:	4614      	movlt	r4, r2
 8013a16:	2f46      	cmp	r7, #70	; 0x46
 8013a18:	700b      	strb	r3, [r1, #0]
 8013a1a:	d004      	beq.n	8013a26 <__cvt+0x40>
 8013a1c:	2f45      	cmp	r7, #69	; 0x45
 8013a1e:	d100      	bne.n	8013a22 <__cvt+0x3c>
 8013a20:	3601      	adds	r6, #1
 8013a22:	2102      	movs	r1, #2
 8013a24:	e000      	b.n	8013a28 <__cvt+0x42>
 8013a26:	2103      	movs	r1, #3
 8013a28:	ab03      	add	r3, sp, #12
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	ab02      	add	r3, sp, #8
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	4632      	mov	r2, r6
 8013a32:	4653      	mov	r3, sl
 8013a34:	ec45 4b10 	vmov	d0, r4, r5
 8013a38:	f001 fdfe 	bl	8015638 <_dtoa_r>
 8013a3c:	2f47      	cmp	r7, #71	; 0x47
 8013a3e:	4680      	mov	r8, r0
 8013a40:	d102      	bne.n	8013a48 <__cvt+0x62>
 8013a42:	f019 0f01 	tst.w	r9, #1
 8013a46:	d026      	beq.n	8013a96 <__cvt+0xb0>
 8013a48:	2f46      	cmp	r7, #70	; 0x46
 8013a4a:	eb08 0906 	add.w	r9, r8, r6
 8013a4e:	d111      	bne.n	8013a74 <__cvt+0x8e>
 8013a50:	f898 3000 	ldrb.w	r3, [r8]
 8013a54:	2b30      	cmp	r3, #48	; 0x30
 8013a56:	d10a      	bne.n	8013a6e <__cvt+0x88>
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4629      	mov	r1, r5
 8013a60:	f7ed f84a 	bl	8000af8 <__aeabi_dcmpeq>
 8013a64:	b918      	cbnz	r0, 8013a6e <__cvt+0x88>
 8013a66:	f1c6 0601 	rsb	r6, r6, #1
 8013a6a:	f8ca 6000 	str.w	r6, [sl]
 8013a6e:	f8da 3000 	ldr.w	r3, [sl]
 8013a72:	4499      	add	r9, r3
 8013a74:	2200      	movs	r2, #0
 8013a76:	2300      	movs	r3, #0
 8013a78:	4620      	mov	r0, r4
 8013a7a:	4629      	mov	r1, r5
 8013a7c:	f7ed f83c 	bl	8000af8 <__aeabi_dcmpeq>
 8013a80:	b938      	cbnz	r0, 8013a92 <__cvt+0xac>
 8013a82:	2230      	movs	r2, #48	; 0x30
 8013a84:	9b03      	ldr	r3, [sp, #12]
 8013a86:	454b      	cmp	r3, r9
 8013a88:	d205      	bcs.n	8013a96 <__cvt+0xb0>
 8013a8a:	1c59      	adds	r1, r3, #1
 8013a8c:	9103      	str	r1, [sp, #12]
 8013a8e:	701a      	strb	r2, [r3, #0]
 8013a90:	e7f8      	b.n	8013a84 <__cvt+0x9e>
 8013a92:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a96:	9b03      	ldr	r3, [sp, #12]
 8013a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a9a:	eba3 0308 	sub.w	r3, r3, r8
 8013a9e:	4640      	mov	r0, r8
 8013aa0:	6013      	str	r3, [r2, #0]
 8013aa2:	b004      	add	sp, #16
 8013aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013aa8 <__exponent>:
 8013aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013aaa:	2900      	cmp	r1, #0
 8013aac:	4604      	mov	r4, r0
 8013aae:	bfba      	itte	lt
 8013ab0:	4249      	neglt	r1, r1
 8013ab2:	232d      	movlt	r3, #45	; 0x2d
 8013ab4:	232b      	movge	r3, #43	; 0x2b
 8013ab6:	2909      	cmp	r1, #9
 8013ab8:	f804 2b02 	strb.w	r2, [r4], #2
 8013abc:	7043      	strb	r3, [r0, #1]
 8013abe:	dd20      	ble.n	8013b02 <__exponent+0x5a>
 8013ac0:	f10d 0307 	add.w	r3, sp, #7
 8013ac4:	461f      	mov	r7, r3
 8013ac6:	260a      	movs	r6, #10
 8013ac8:	fb91 f5f6 	sdiv	r5, r1, r6
 8013acc:	fb06 1115 	mls	r1, r6, r5, r1
 8013ad0:	3130      	adds	r1, #48	; 0x30
 8013ad2:	2d09      	cmp	r5, #9
 8013ad4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013ad8:	f103 32ff 	add.w	r2, r3, #4294967295
 8013adc:	4629      	mov	r1, r5
 8013ade:	dc09      	bgt.n	8013af4 <__exponent+0x4c>
 8013ae0:	3130      	adds	r1, #48	; 0x30
 8013ae2:	3b02      	subs	r3, #2
 8013ae4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013ae8:	42bb      	cmp	r3, r7
 8013aea:	4622      	mov	r2, r4
 8013aec:	d304      	bcc.n	8013af8 <__exponent+0x50>
 8013aee:	1a10      	subs	r0, r2, r0
 8013af0:	b003      	add	sp, #12
 8013af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013af4:	4613      	mov	r3, r2
 8013af6:	e7e7      	b.n	8013ac8 <__exponent+0x20>
 8013af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013afc:	f804 2b01 	strb.w	r2, [r4], #1
 8013b00:	e7f2      	b.n	8013ae8 <__exponent+0x40>
 8013b02:	2330      	movs	r3, #48	; 0x30
 8013b04:	4419      	add	r1, r3
 8013b06:	7083      	strb	r3, [r0, #2]
 8013b08:	1d02      	adds	r2, r0, #4
 8013b0a:	70c1      	strb	r1, [r0, #3]
 8013b0c:	e7ef      	b.n	8013aee <__exponent+0x46>
	...

08013b10 <_printf_float>:
 8013b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b14:	b08d      	sub	sp, #52	; 0x34
 8013b16:	460c      	mov	r4, r1
 8013b18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013b1c:	4616      	mov	r6, r2
 8013b1e:	461f      	mov	r7, r3
 8013b20:	4605      	mov	r5, r0
 8013b22:	f002 fe7b 	bl	801681c <_localeconv_r>
 8013b26:	6803      	ldr	r3, [r0, #0]
 8013b28:	9304      	str	r3, [sp, #16]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7ec fb68 	bl	8000200 <strlen>
 8013b30:	2300      	movs	r3, #0
 8013b32:	930a      	str	r3, [sp, #40]	; 0x28
 8013b34:	f8d8 3000 	ldr.w	r3, [r8]
 8013b38:	9005      	str	r0, [sp, #20]
 8013b3a:	3307      	adds	r3, #7
 8013b3c:	f023 0307 	bic.w	r3, r3, #7
 8013b40:	f103 0208 	add.w	r2, r3, #8
 8013b44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013b48:	f8d4 b000 	ldr.w	fp, [r4]
 8013b4c:	f8c8 2000 	str.w	r2, [r8]
 8013b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013b58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013b5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b60:	9307      	str	r3, [sp, #28]
 8013b62:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b66:	f04f 32ff 	mov.w	r2, #4294967295
 8013b6a:	4ba7      	ldr	r3, [pc, #668]	; (8013e08 <_printf_float+0x2f8>)
 8013b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b70:	f7ec fff4 	bl	8000b5c <__aeabi_dcmpun>
 8013b74:	bb70      	cbnz	r0, 8013bd4 <_printf_float+0xc4>
 8013b76:	f04f 32ff 	mov.w	r2, #4294967295
 8013b7a:	4ba3      	ldr	r3, [pc, #652]	; (8013e08 <_printf_float+0x2f8>)
 8013b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b80:	f7ec ffce 	bl	8000b20 <__aeabi_dcmple>
 8013b84:	bb30      	cbnz	r0, 8013bd4 <_printf_float+0xc4>
 8013b86:	2200      	movs	r2, #0
 8013b88:	2300      	movs	r3, #0
 8013b8a:	4640      	mov	r0, r8
 8013b8c:	4649      	mov	r1, r9
 8013b8e:	f7ec ffbd 	bl	8000b0c <__aeabi_dcmplt>
 8013b92:	b110      	cbz	r0, 8013b9a <_printf_float+0x8a>
 8013b94:	232d      	movs	r3, #45	; 0x2d
 8013b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b9a:	4a9c      	ldr	r2, [pc, #624]	; (8013e0c <_printf_float+0x2fc>)
 8013b9c:	4b9c      	ldr	r3, [pc, #624]	; (8013e10 <_printf_float+0x300>)
 8013b9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013ba2:	bf8c      	ite	hi
 8013ba4:	4690      	movhi	r8, r2
 8013ba6:	4698      	movls	r8, r3
 8013ba8:	2303      	movs	r3, #3
 8013baa:	f02b 0204 	bic.w	r2, fp, #4
 8013bae:	6123      	str	r3, [r4, #16]
 8013bb0:	6022      	str	r2, [r4, #0]
 8013bb2:	f04f 0900 	mov.w	r9, #0
 8013bb6:	9700      	str	r7, [sp, #0]
 8013bb8:	4633      	mov	r3, r6
 8013bba:	aa0b      	add	r2, sp, #44	; 0x2c
 8013bbc:	4621      	mov	r1, r4
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f000 f9e6 	bl	8013f90 <_printf_common>
 8013bc4:	3001      	adds	r0, #1
 8013bc6:	f040 808d 	bne.w	8013ce4 <_printf_float+0x1d4>
 8013bca:	f04f 30ff 	mov.w	r0, #4294967295
 8013bce:	b00d      	add	sp, #52	; 0x34
 8013bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bd4:	4642      	mov	r2, r8
 8013bd6:	464b      	mov	r3, r9
 8013bd8:	4640      	mov	r0, r8
 8013bda:	4649      	mov	r1, r9
 8013bdc:	f7ec ffbe 	bl	8000b5c <__aeabi_dcmpun>
 8013be0:	b110      	cbz	r0, 8013be8 <_printf_float+0xd8>
 8013be2:	4a8c      	ldr	r2, [pc, #560]	; (8013e14 <_printf_float+0x304>)
 8013be4:	4b8c      	ldr	r3, [pc, #560]	; (8013e18 <_printf_float+0x308>)
 8013be6:	e7da      	b.n	8013b9e <_printf_float+0x8e>
 8013be8:	6861      	ldr	r1, [r4, #4]
 8013bea:	1c4b      	adds	r3, r1, #1
 8013bec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013bf0:	a80a      	add	r0, sp, #40	; 0x28
 8013bf2:	d13e      	bne.n	8013c72 <_printf_float+0x162>
 8013bf4:	2306      	movs	r3, #6
 8013bf6:	6063      	str	r3, [r4, #4]
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013bfe:	ab09      	add	r3, sp, #36	; 0x24
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	ec49 8b10 	vmov	d0, r8, r9
 8013c06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013c0a:	6022      	str	r2, [r4, #0]
 8013c0c:	f8cd a004 	str.w	sl, [sp, #4]
 8013c10:	6861      	ldr	r1, [r4, #4]
 8013c12:	4628      	mov	r0, r5
 8013c14:	f7ff fee7 	bl	80139e6 <__cvt>
 8013c18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013c1c:	2b47      	cmp	r3, #71	; 0x47
 8013c1e:	4680      	mov	r8, r0
 8013c20:	d109      	bne.n	8013c36 <_printf_float+0x126>
 8013c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c24:	1cd8      	adds	r0, r3, #3
 8013c26:	db02      	blt.n	8013c2e <_printf_float+0x11e>
 8013c28:	6862      	ldr	r2, [r4, #4]
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	dd47      	ble.n	8013cbe <_printf_float+0x1ae>
 8013c2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8013c32:	fa5f fa8a 	uxtb.w	sl, sl
 8013c36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c3c:	d824      	bhi.n	8013c88 <_printf_float+0x178>
 8013c3e:	3901      	subs	r1, #1
 8013c40:	4652      	mov	r2, sl
 8013c42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013c46:	9109      	str	r1, [sp, #36]	; 0x24
 8013c48:	f7ff ff2e 	bl	8013aa8 <__exponent>
 8013c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c4e:	1813      	adds	r3, r2, r0
 8013c50:	2a01      	cmp	r2, #1
 8013c52:	4681      	mov	r9, r0
 8013c54:	6123      	str	r3, [r4, #16]
 8013c56:	dc02      	bgt.n	8013c5e <_printf_float+0x14e>
 8013c58:	6822      	ldr	r2, [r4, #0]
 8013c5a:	07d1      	lsls	r1, r2, #31
 8013c5c:	d501      	bpl.n	8013c62 <_printf_float+0x152>
 8013c5e:	3301      	adds	r3, #1
 8013c60:	6123      	str	r3, [r4, #16]
 8013c62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d0a5      	beq.n	8013bb6 <_printf_float+0xa6>
 8013c6a:	232d      	movs	r3, #45	; 0x2d
 8013c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c70:	e7a1      	b.n	8013bb6 <_printf_float+0xa6>
 8013c72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013c76:	f000 8177 	beq.w	8013f68 <_printf_float+0x458>
 8013c7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013c7e:	d1bb      	bne.n	8013bf8 <_printf_float+0xe8>
 8013c80:	2900      	cmp	r1, #0
 8013c82:	d1b9      	bne.n	8013bf8 <_printf_float+0xe8>
 8013c84:	2301      	movs	r3, #1
 8013c86:	e7b6      	b.n	8013bf6 <_printf_float+0xe6>
 8013c88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013c8c:	d119      	bne.n	8013cc2 <_printf_float+0x1b2>
 8013c8e:	2900      	cmp	r1, #0
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	dd0c      	ble.n	8013cae <_printf_float+0x19e>
 8013c94:	6121      	str	r1, [r4, #16]
 8013c96:	b913      	cbnz	r3, 8013c9e <_printf_float+0x18e>
 8013c98:	6822      	ldr	r2, [r4, #0]
 8013c9a:	07d2      	lsls	r2, r2, #31
 8013c9c:	d502      	bpl.n	8013ca4 <_printf_float+0x194>
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	440b      	add	r3, r1
 8013ca2:	6123      	str	r3, [r4, #16]
 8013ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ca6:	65a3      	str	r3, [r4, #88]	; 0x58
 8013ca8:	f04f 0900 	mov.w	r9, #0
 8013cac:	e7d9      	b.n	8013c62 <_printf_float+0x152>
 8013cae:	b913      	cbnz	r3, 8013cb6 <_printf_float+0x1a6>
 8013cb0:	6822      	ldr	r2, [r4, #0]
 8013cb2:	07d0      	lsls	r0, r2, #31
 8013cb4:	d501      	bpl.n	8013cba <_printf_float+0x1aa>
 8013cb6:	3302      	adds	r3, #2
 8013cb8:	e7f3      	b.n	8013ca2 <_printf_float+0x192>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	e7f1      	b.n	8013ca2 <_printf_float+0x192>
 8013cbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013cc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	db05      	blt.n	8013cd6 <_printf_float+0x1c6>
 8013cca:	6822      	ldr	r2, [r4, #0]
 8013ccc:	6123      	str	r3, [r4, #16]
 8013cce:	07d1      	lsls	r1, r2, #31
 8013cd0:	d5e8      	bpl.n	8013ca4 <_printf_float+0x194>
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	e7e5      	b.n	8013ca2 <_printf_float+0x192>
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	bfd4      	ite	le
 8013cda:	f1c3 0302 	rsble	r3, r3, #2
 8013cde:	2301      	movgt	r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	e7de      	b.n	8013ca2 <_printf_float+0x192>
 8013ce4:	6823      	ldr	r3, [r4, #0]
 8013ce6:	055a      	lsls	r2, r3, #21
 8013ce8:	d407      	bmi.n	8013cfa <_printf_float+0x1ea>
 8013cea:	6923      	ldr	r3, [r4, #16]
 8013cec:	4642      	mov	r2, r8
 8013cee:	4631      	mov	r1, r6
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	47b8      	blx	r7
 8013cf4:	3001      	adds	r0, #1
 8013cf6:	d12b      	bne.n	8013d50 <_printf_float+0x240>
 8013cf8:	e767      	b.n	8013bca <_printf_float+0xba>
 8013cfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013cfe:	f240 80dc 	bls.w	8013eba <_printf_float+0x3aa>
 8013d02:	2200      	movs	r2, #0
 8013d04:	2300      	movs	r3, #0
 8013d06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d0a:	f7ec fef5 	bl	8000af8 <__aeabi_dcmpeq>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d033      	beq.n	8013d7a <_printf_float+0x26a>
 8013d12:	2301      	movs	r3, #1
 8013d14:	4a41      	ldr	r2, [pc, #260]	; (8013e1c <_printf_float+0x30c>)
 8013d16:	4631      	mov	r1, r6
 8013d18:	4628      	mov	r0, r5
 8013d1a:	47b8      	blx	r7
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	f43f af54 	beq.w	8013bca <_printf_float+0xba>
 8013d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d26:	429a      	cmp	r2, r3
 8013d28:	db02      	blt.n	8013d30 <_printf_float+0x220>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	07d8      	lsls	r0, r3, #31
 8013d2e:	d50f      	bpl.n	8013d50 <_printf_float+0x240>
 8013d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d34:	4631      	mov	r1, r6
 8013d36:	4628      	mov	r0, r5
 8013d38:	47b8      	blx	r7
 8013d3a:	3001      	adds	r0, #1
 8013d3c:	f43f af45 	beq.w	8013bca <_printf_float+0xba>
 8013d40:	f04f 0800 	mov.w	r8, #0
 8013d44:	f104 091a 	add.w	r9, r4, #26
 8013d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d4a:	3b01      	subs	r3, #1
 8013d4c:	4543      	cmp	r3, r8
 8013d4e:	dc09      	bgt.n	8013d64 <_printf_float+0x254>
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	079b      	lsls	r3, r3, #30
 8013d54:	f100 8103 	bmi.w	8013f5e <_printf_float+0x44e>
 8013d58:	68e0      	ldr	r0, [r4, #12]
 8013d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d5c:	4298      	cmp	r0, r3
 8013d5e:	bfb8      	it	lt
 8013d60:	4618      	movlt	r0, r3
 8013d62:	e734      	b.n	8013bce <_printf_float+0xbe>
 8013d64:	2301      	movs	r3, #1
 8013d66:	464a      	mov	r2, r9
 8013d68:	4631      	mov	r1, r6
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	47b8      	blx	r7
 8013d6e:	3001      	adds	r0, #1
 8013d70:	f43f af2b 	beq.w	8013bca <_printf_float+0xba>
 8013d74:	f108 0801 	add.w	r8, r8, #1
 8013d78:	e7e6      	b.n	8013d48 <_printf_float+0x238>
 8013d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	dc2b      	bgt.n	8013dd8 <_printf_float+0x2c8>
 8013d80:	2301      	movs	r3, #1
 8013d82:	4a26      	ldr	r2, [pc, #152]	; (8013e1c <_printf_float+0x30c>)
 8013d84:	4631      	mov	r1, r6
 8013d86:	4628      	mov	r0, r5
 8013d88:	47b8      	blx	r7
 8013d8a:	3001      	adds	r0, #1
 8013d8c:	f43f af1d 	beq.w	8013bca <_printf_float+0xba>
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	b923      	cbnz	r3, 8013d9e <_printf_float+0x28e>
 8013d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d96:	b913      	cbnz	r3, 8013d9e <_printf_float+0x28e>
 8013d98:	6823      	ldr	r3, [r4, #0]
 8013d9a:	07d9      	lsls	r1, r3, #31
 8013d9c:	d5d8      	bpl.n	8013d50 <_printf_float+0x240>
 8013d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013da2:	4631      	mov	r1, r6
 8013da4:	4628      	mov	r0, r5
 8013da6:	47b8      	blx	r7
 8013da8:	3001      	adds	r0, #1
 8013daa:	f43f af0e 	beq.w	8013bca <_printf_float+0xba>
 8013dae:	f04f 0900 	mov.w	r9, #0
 8013db2:	f104 0a1a 	add.w	sl, r4, #26
 8013db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db8:	425b      	negs	r3, r3
 8013dba:	454b      	cmp	r3, r9
 8013dbc:	dc01      	bgt.n	8013dc2 <_printf_float+0x2b2>
 8013dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dc0:	e794      	b.n	8013cec <_printf_float+0x1dc>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	4652      	mov	r2, sl
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	4628      	mov	r0, r5
 8013dca:	47b8      	blx	r7
 8013dcc:	3001      	adds	r0, #1
 8013dce:	f43f aefc 	beq.w	8013bca <_printf_float+0xba>
 8013dd2:	f109 0901 	add.w	r9, r9, #1
 8013dd6:	e7ee      	b.n	8013db6 <_printf_float+0x2a6>
 8013dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	bfa8      	it	ge
 8013de0:	461a      	movge	r2, r3
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	4691      	mov	r9, r2
 8013de6:	dd07      	ble.n	8013df8 <_printf_float+0x2e8>
 8013de8:	4613      	mov	r3, r2
 8013dea:	4631      	mov	r1, r6
 8013dec:	4642      	mov	r2, r8
 8013dee:	4628      	mov	r0, r5
 8013df0:	47b8      	blx	r7
 8013df2:	3001      	adds	r0, #1
 8013df4:	f43f aee9 	beq.w	8013bca <_printf_float+0xba>
 8013df8:	f104 031a 	add.w	r3, r4, #26
 8013dfc:	f04f 0b00 	mov.w	fp, #0
 8013e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e04:	9306      	str	r3, [sp, #24]
 8013e06:	e015      	b.n	8013e34 <_printf_float+0x324>
 8013e08:	7fefffff 	.word	0x7fefffff
 8013e0c:	0801856c 	.word	0x0801856c
 8013e10:	08018568 	.word	0x08018568
 8013e14:	08018574 	.word	0x08018574
 8013e18:	08018570 	.word	0x08018570
 8013e1c:	08018793 	.word	0x08018793
 8013e20:	2301      	movs	r3, #1
 8013e22:	9a06      	ldr	r2, [sp, #24]
 8013e24:	4631      	mov	r1, r6
 8013e26:	4628      	mov	r0, r5
 8013e28:	47b8      	blx	r7
 8013e2a:	3001      	adds	r0, #1
 8013e2c:	f43f aecd 	beq.w	8013bca <_printf_float+0xba>
 8013e30:	f10b 0b01 	add.w	fp, fp, #1
 8013e34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013e38:	ebaa 0309 	sub.w	r3, sl, r9
 8013e3c:	455b      	cmp	r3, fp
 8013e3e:	dcef      	bgt.n	8013e20 <_printf_float+0x310>
 8013e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e44:	429a      	cmp	r2, r3
 8013e46:	44d0      	add	r8, sl
 8013e48:	db15      	blt.n	8013e76 <_printf_float+0x366>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	07da      	lsls	r2, r3, #31
 8013e4e:	d412      	bmi.n	8013e76 <_printf_float+0x366>
 8013e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e54:	eba3 020a 	sub.w	r2, r3, sl
 8013e58:	eba3 0a01 	sub.w	sl, r3, r1
 8013e5c:	4592      	cmp	sl, r2
 8013e5e:	bfa8      	it	ge
 8013e60:	4692      	movge	sl, r2
 8013e62:	f1ba 0f00 	cmp.w	sl, #0
 8013e66:	dc0e      	bgt.n	8013e86 <_printf_float+0x376>
 8013e68:	f04f 0800 	mov.w	r8, #0
 8013e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e70:	f104 091a 	add.w	r9, r4, #26
 8013e74:	e019      	b.n	8013eaa <_printf_float+0x39a>
 8013e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e7a:	4631      	mov	r1, r6
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	47b8      	blx	r7
 8013e80:	3001      	adds	r0, #1
 8013e82:	d1e5      	bne.n	8013e50 <_printf_float+0x340>
 8013e84:	e6a1      	b.n	8013bca <_printf_float+0xba>
 8013e86:	4653      	mov	r3, sl
 8013e88:	4642      	mov	r2, r8
 8013e8a:	4631      	mov	r1, r6
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	47b8      	blx	r7
 8013e90:	3001      	adds	r0, #1
 8013e92:	d1e9      	bne.n	8013e68 <_printf_float+0x358>
 8013e94:	e699      	b.n	8013bca <_printf_float+0xba>
 8013e96:	2301      	movs	r3, #1
 8013e98:	464a      	mov	r2, r9
 8013e9a:	4631      	mov	r1, r6
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	47b8      	blx	r7
 8013ea0:	3001      	adds	r0, #1
 8013ea2:	f43f ae92 	beq.w	8013bca <_printf_float+0xba>
 8013ea6:	f108 0801 	add.w	r8, r8, #1
 8013eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eae:	1a9b      	subs	r3, r3, r2
 8013eb0:	eba3 030a 	sub.w	r3, r3, sl
 8013eb4:	4543      	cmp	r3, r8
 8013eb6:	dcee      	bgt.n	8013e96 <_printf_float+0x386>
 8013eb8:	e74a      	b.n	8013d50 <_printf_float+0x240>
 8013eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ebc:	2a01      	cmp	r2, #1
 8013ebe:	dc01      	bgt.n	8013ec4 <_printf_float+0x3b4>
 8013ec0:	07db      	lsls	r3, r3, #31
 8013ec2:	d53a      	bpl.n	8013f3a <_printf_float+0x42a>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	4642      	mov	r2, r8
 8013ec8:	4631      	mov	r1, r6
 8013eca:	4628      	mov	r0, r5
 8013ecc:	47b8      	blx	r7
 8013ece:	3001      	adds	r0, #1
 8013ed0:	f43f ae7b 	beq.w	8013bca <_printf_float+0xba>
 8013ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ed8:	4631      	mov	r1, r6
 8013eda:	4628      	mov	r0, r5
 8013edc:	47b8      	blx	r7
 8013ede:	3001      	adds	r0, #1
 8013ee0:	f108 0801 	add.w	r8, r8, #1
 8013ee4:	f43f ae71 	beq.w	8013bca <_printf_float+0xba>
 8013ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eea:	2200      	movs	r2, #0
 8013eec:	f103 3aff 	add.w	sl, r3, #4294967295
 8013ef0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	f7ec fdff 	bl	8000af8 <__aeabi_dcmpeq>
 8013efa:	b9c8      	cbnz	r0, 8013f30 <_printf_float+0x420>
 8013efc:	4653      	mov	r3, sl
 8013efe:	4642      	mov	r2, r8
 8013f00:	4631      	mov	r1, r6
 8013f02:	4628      	mov	r0, r5
 8013f04:	47b8      	blx	r7
 8013f06:	3001      	adds	r0, #1
 8013f08:	d10e      	bne.n	8013f28 <_printf_float+0x418>
 8013f0a:	e65e      	b.n	8013bca <_printf_float+0xba>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	4652      	mov	r2, sl
 8013f10:	4631      	mov	r1, r6
 8013f12:	4628      	mov	r0, r5
 8013f14:	47b8      	blx	r7
 8013f16:	3001      	adds	r0, #1
 8013f18:	f43f ae57 	beq.w	8013bca <_printf_float+0xba>
 8013f1c:	f108 0801 	add.w	r8, r8, #1
 8013f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f22:	3b01      	subs	r3, #1
 8013f24:	4543      	cmp	r3, r8
 8013f26:	dcf1      	bgt.n	8013f0c <_printf_float+0x3fc>
 8013f28:	464b      	mov	r3, r9
 8013f2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013f2e:	e6de      	b.n	8013cee <_printf_float+0x1de>
 8013f30:	f04f 0800 	mov.w	r8, #0
 8013f34:	f104 0a1a 	add.w	sl, r4, #26
 8013f38:	e7f2      	b.n	8013f20 <_printf_float+0x410>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e7df      	b.n	8013efe <_printf_float+0x3ee>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	464a      	mov	r2, r9
 8013f42:	4631      	mov	r1, r6
 8013f44:	4628      	mov	r0, r5
 8013f46:	47b8      	blx	r7
 8013f48:	3001      	adds	r0, #1
 8013f4a:	f43f ae3e 	beq.w	8013bca <_printf_float+0xba>
 8013f4e:	f108 0801 	add.w	r8, r8, #1
 8013f52:	68e3      	ldr	r3, [r4, #12]
 8013f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f56:	1a9b      	subs	r3, r3, r2
 8013f58:	4543      	cmp	r3, r8
 8013f5a:	dcf0      	bgt.n	8013f3e <_printf_float+0x42e>
 8013f5c:	e6fc      	b.n	8013d58 <_printf_float+0x248>
 8013f5e:	f04f 0800 	mov.w	r8, #0
 8013f62:	f104 0919 	add.w	r9, r4, #25
 8013f66:	e7f4      	b.n	8013f52 <_printf_float+0x442>
 8013f68:	2900      	cmp	r1, #0
 8013f6a:	f43f ae8b 	beq.w	8013c84 <_printf_float+0x174>
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013f74:	ab09      	add	r3, sp, #36	; 0x24
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	ec49 8b10 	vmov	d0, r8, r9
 8013f7c:	6022      	str	r2, [r4, #0]
 8013f7e:	f8cd a004 	str.w	sl, [sp, #4]
 8013f82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013f86:	4628      	mov	r0, r5
 8013f88:	f7ff fd2d 	bl	80139e6 <__cvt>
 8013f8c:	4680      	mov	r8, r0
 8013f8e:	e648      	b.n	8013c22 <_printf_float+0x112>

08013f90 <_printf_common>:
 8013f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f94:	4691      	mov	r9, r2
 8013f96:	461f      	mov	r7, r3
 8013f98:	688a      	ldr	r2, [r1, #8]
 8013f9a:	690b      	ldr	r3, [r1, #16]
 8013f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	bfb8      	it	lt
 8013fa4:	4613      	movlt	r3, r2
 8013fa6:	f8c9 3000 	str.w	r3, [r9]
 8013faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013fae:	4606      	mov	r6, r0
 8013fb0:	460c      	mov	r4, r1
 8013fb2:	b112      	cbz	r2, 8013fba <_printf_common+0x2a>
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	f8c9 3000 	str.w	r3, [r9]
 8013fba:	6823      	ldr	r3, [r4, #0]
 8013fbc:	0699      	lsls	r1, r3, #26
 8013fbe:	bf42      	ittt	mi
 8013fc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013fc4:	3302      	addmi	r3, #2
 8013fc6:	f8c9 3000 	strmi.w	r3, [r9]
 8013fca:	6825      	ldr	r5, [r4, #0]
 8013fcc:	f015 0506 	ands.w	r5, r5, #6
 8013fd0:	d107      	bne.n	8013fe2 <_printf_common+0x52>
 8013fd2:	f104 0a19 	add.w	sl, r4, #25
 8013fd6:	68e3      	ldr	r3, [r4, #12]
 8013fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8013fdc:	1a9b      	subs	r3, r3, r2
 8013fde:	42ab      	cmp	r3, r5
 8013fe0:	dc28      	bgt.n	8014034 <_printf_common+0xa4>
 8013fe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013fe6:	6822      	ldr	r2, [r4, #0]
 8013fe8:	3300      	adds	r3, #0
 8013fea:	bf18      	it	ne
 8013fec:	2301      	movne	r3, #1
 8013fee:	0692      	lsls	r2, r2, #26
 8013ff0:	d42d      	bmi.n	801404e <_printf_common+0xbe>
 8013ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ff6:	4639      	mov	r1, r7
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	47c0      	blx	r8
 8013ffc:	3001      	adds	r0, #1
 8013ffe:	d020      	beq.n	8014042 <_printf_common+0xb2>
 8014000:	6823      	ldr	r3, [r4, #0]
 8014002:	68e5      	ldr	r5, [r4, #12]
 8014004:	f8d9 2000 	ldr.w	r2, [r9]
 8014008:	f003 0306 	and.w	r3, r3, #6
 801400c:	2b04      	cmp	r3, #4
 801400e:	bf08      	it	eq
 8014010:	1aad      	subeq	r5, r5, r2
 8014012:	68a3      	ldr	r3, [r4, #8]
 8014014:	6922      	ldr	r2, [r4, #16]
 8014016:	bf0c      	ite	eq
 8014018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801401c:	2500      	movne	r5, #0
 801401e:	4293      	cmp	r3, r2
 8014020:	bfc4      	itt	gt
 8014022:	1a9b      	subgt	r3, r3, r2
 8014024:	18ed      	addgt	r5, r5, r3
 8014026:	f04f 0900 	mov.w	r9, #0
 801402a:	341a      	adds	r4, #26
 801402c:	454d      	cmp	r5, r9
 801402e:	d11a      	bne.n	8014066 <_printf_common+0xd6>
 8014030:	2000      	movs	r0, #0
 8014032:	e008      	b.n	8014046 <_printf_common+0xb6>
 8014034:	2301      	movs	r3, #1
 8014036:	4652      	mov	r2, sl
 8014038:	4639      	mov	r1, r7
 801403a:	4630      	mov	r0, r6
 801403c:	47c0      	blx	r8
 801403e:	3001      	adds	r0, #1
 8014040:	d103      	bne.n	801404a <_printf_common+0xba>
 8014042:	f04f 30ff 	mov.w	r0, #4294967295
 8014046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801404a:	3501      	adds	r5, #1
 801404c:	e7c3      	b.n	8013fd6 <_printf_common+0x46>
 801404e:	18e1      	adds	r1, r4, r3
 8014050:	1c5a      	adds	r2, r3, #1
 8014052:	2030      	movs	r0, #48	; 0x30
 8014054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014058:	4422      	add	r2, r4
 801405a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801405e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014062:	3302      	adds	r3, #2
 8014064:	e7c5      	b.n	8013ff2 <_printf_common+0x62>
 8014066:	2301      	movs	r3, #1
 8014068:	4622      	mov	r2, r4
 801406a:	4639      	mov	r1, r7
 801406c:	4630      	mov	r0, r6
 801406e:	47c0      	blx	r8
 8014070:	3001      	adds	r0, #1
 8014072:	d0e6      	beq.n	8014042 <_printf_common+0xb2>
 8014074:	f109 0901 	add.w	r9, r9, #1
 8014078:	e7d8      	b.n	801402c <_printf_common+0x9c>
	...

0801407c <_printf_i>:
 801407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014080:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014084:	460c      	mov	r4, r1
 8014086:	7e09      	ldrb	r1, [r1, #24]
 8014088:	b085      	sub	sp, #20
 801408a:	296e      	cmp	r1, #110	; 0x6e
 801408c:	4617      	mov	r7, r2
 801408e:	4606      	mov	r6, r0
 8014090:	4698      	mov	r8, r3
 8014092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014094:	f000 80b3 	beq.w	80141fe <_printf_i+0x182>
 8014098:	d822      	bhi.n	80140e0 <_printf_i+0x64>
 801409a:	2963      	cmp	r1, #99	; 0x63
 801409c:	d036      	beq.n	801410c <_printf_i+0x90>
 801409e:	d80a      	bhi.n	80140b6 <_printf_i+0x3a>
 80140a0:	2900      	cmp	r1, #0
 80140a2:	f000 80b9 	beq.w	8014218 <_printf_i+0x19c>
 80140a6:	2958      	cmp	r1, #88	; 0x58
 80140a8:	f000 8083 	beq.w	80141b2 <_printf_i+0x136>
 80140ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80140b4:	e032      	b.n	801411c <_printf_i+0xa0>
 80140b6:	2964      	cmp	r1, #100	; 0x64
 80140b8:	d001      	beq.n	80140be <_printf_i+0x42>
 80140ba:	2969      	cmp	r1, #105	; 0x69
 80140bc:	d1f6      	bne.n	80140ac <_printf_i+0x30>
 80140be:	6820      	ldr	r0, [r4, #0]
 80140c0:	6813      	ldr	r3, [r2, #0]
 80140c2:	0605      	lsls	r5, r0, #24
 80140c4:	f103 0104 	add.w	r1, r3, #4
 80140c8:	d52a      	bpl.n	8014120 <_printf_i+0xa4>
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	6011      	str	r1, [r2, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	da03      	bge.n	80140da <_printf_i+0x5e>
 80140d2:	222d      	movs	r2, #45	; 0x2d
 80140d4:	425b      	negs	r3, r3
 80140d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80140da:	486f      	ldr	r0, [pc, #444]	; (8014298 <_printf_i+0x21c>)
 80140dc:	220a      	movs	r2, #10
 80140de:	e039      	b.n	8014154 <_printf_i+0xd8>
 80140e0:	2973      	cmp	r1, #115	; 0x73
 80140e2:	f000 809d 	beq.w	8014220 <_printf_i+0x1a4>
 80140e6:	d808      	bhi.n	80140fa <_printf_i+0x7e>
 80140e8:	296f      	cmp	r1, #111	; 0x6f
 80140ea:	d020      	beq.n	801412e <_printf_i+0xb2>
 80140ec:	2970      	cmp	r1, #112	; 0x70
 80140ee:	d1dd      	bne.n	80140ac <_printf_i+0x30>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	f043 0320 	orr.w	r3, r3, #32
 80140f6:	6023      	str	r3, [r4, #0]
 80140f8:	e003      	b.n	8014102 <_printf_i+0x86>
 80140fa:	2975      	cmp	r1, #117	; 0x75
 80140fc:	d017      	beq.n	801412e <_printf_i+0xb2>
 80140fe:	2978      	cmp	r1, #120	; 0x78
 8014100:	d1d4      	bne.n	80140ac <_printf_i+0x30>
 8014102:	2378      	movs	r3, #120	; 0x78
 8014104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014108:	4864      	ldr	r0, [pc, #400]	; (801429c <_printf_i+0x220>)
 801410a:	e055      	b.n	80141b8 <_printf_i+0x13c>
 801410c:	6813      	ldr	r3, [r2, #0]
 801410e:	1d19      	adds	r1, r3, #4
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	6011      	str	r1, [r2, #0]
 8014114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801411c:	2301      	movs	r3, #1
 801411e:	e08c      	b.n	801423a <_printf_i+0x1be>
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	6011      	str	r1, [r2, #0]
 8014124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014128:	bf18      	it	ne
 801412a:	b21b      	sxthne	r3, r3
 801412c:	e7cf      	b.n	80140ce <_printf_i+0x52>
 801412e:	6813      	ldr	r3, [r2, #0]
 8014130:	6825      	ldr	r5, [r4, #0]
 8014132:	1d18      	adds	r0, r3, #4
 8014134:	6010      	str	r0, [r2, #0]
 8014136:	0628      	lsls	r0, r5, #24
 8014138:	d501      	bpl.n	801413e <_printf_i+0xc2>
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	e002      	b.n	8014144 <_printf_i+0xc8>
 801413e:	0668      	lsls	r0, r5, #25
 8014140:	d5fb      	bpl.n	801413a <_printf_i+0xbe>
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	4854      	ldr	r0, [pc, #336]	; (8014298 <_printf_i+0x21c>)
 8014146:	296f      	cmp	r1, #111	; 0x6f
 8014148:	bf14      	ite	ne
 801414a:	220a      	movne	r2, #10
 801414c:	2208      	moveq	r2, #8
 801414e:	2100      	movs	r1, #0
 8014150:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014154:	6865      	ldr	r5, [r4, #4]
 8014156:	60a5      	str	r5, [r4, #8]
 8014158:	2d00      	cmp	r5, #0
 801415a:	f2c0 8095 	blt.w	8014288 <_printf_i+0x20c>
 801415e:	6821      	ldr	r1, [r4, #0]
 8014160:	f021 0104 	bic.w	r1, r1, #4
 8014164:	6021      	str	r1, [r4, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d13d      	bne.n	80141e6 <_printf_i+0x16a>
 801416a:	2d00      	cmp	r5, #0
 801416c:	f040 808e 	bne.w	801428c <_printf_i+0x210>
 8014170:	4665      	mov	r5, ip
 8014172:	2a08      	cmp	r2, #8
 8014174:	d10b      	bne.n	801418e <_printf_i+0x112>
 8014176:	6823      	ldr	r3, [r4, #0]
 8014178:	07db      	lsls	r3, r3, #31
 801417a:	d508      	bpl.n	801418e <_printf_i+0x112>
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	6862      	ldr	r2, [r4, #4]
 8014180:	429a      	cmp	r2, r3
 8014182:	bfde      	ittt	le
 8014184:	2330      	movle	r3, #48	; 0x30
 8014186:	f805 3c01 	strble.w	r3, [r5, #-1]
 801418a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801418e:	ebac 0305 	sub.w	r3, ip, r5
 8014192:	6123      	str	r3, [r4, #16]
 8014194:	f8cd 8000 	str.w	r8, [sp]
 8014198:	463b      	mov	r3, r7
 801419a:	aa03      	add	r2, sp, #12
 801419c:	4621      	mov	r1, r4
 801419e:	4630      	mov	r0, r6
 80141a0:	f7ff fef6 	bl	8013f90 <_printf_common>
 80141a4:	3001      	adds	r0, #1
 80141a6:	d14d      	bne.n	8014244 <_printf_i+0x1c8>
 80141a8:	f04f 30ff 	mov.w	r0, #4294967295
 80141ac:	b005      	add	sp, #20
 80141ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141b2:	4839      	ldr	r0, [pc, #228]	; (8014298 <_printf_i+0x21c>)
 80141b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80141b8:	6813      	ldr	r3, [r2, #0]
 80141ba:	6821      	ldr	r1, [r4, #0]
 80141bc:	1d1d      	adds	r5, r3, #4
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	6015      	str	r5, [r2, #0]
 80141c2:	060a      	lsls	r2, r1, #24
 80141c4:	d50b      	bpl.n	80141de <_printf_i+0x162>
 80141c6:	07ca      	lsls	r2, r1, #31
 80141c8:	bf44      	itt	mi
 80141ca:	f041 0120 	orrmi.w	r1, r1, #32
 80141ce:	6021      	strmi	r1, [r4, #0]
 80141d0:	b91b      	cbnz	r3, 80141da <_printf_i+0x15e>
 80141d2:	6822      	ldr	r2, [r4, #0]
 80141d4:	f022 0220 	bic.w	r2, r2, #32
 80141d8:	6022      	str	r2, [r4, #0]
 80141da:	2210      	movs	r2, #16
 80141dc:	e7b7      	b.n	801414e <_printf_i+0xd2>
 80141de:	064d      	lsls	r5, r1, #25
 80141e0:	bf48      	it	mi
 80141e2:	b29b      	uxthmi	r3, r3
 80141e4:	e7ef      	b.n	80141c6 <_printf_i+0x14a>
 80141e6:	4665      	mov	r5, ip
 80141e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80141ec:	fb02 3311 	mls	r3, r2, r1, r3
 80141f0:	5cc3      	ldrb	r3, [r0, r3]
 80141f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80141f6:	460b      	mov	r3, r1
 80141f8:	2900      	cmp	r1, #0
 80141fa:	d1f5      	bne.n	80141e8 <_printf_i+0x16c>
 80141fc:	e7b9      	b.n	8014172 <_printf_i+0xf6>
 80141fe:	6813      	ldr	r3, [r2, #0]
 8014200:	6825      	ldr	r5, [r4, #0]
 8014202:	6961      	ldr	r1, [r4, #20]
 8014204:	1d18      	adds	r0, r3, #4
 8014206:	6010      	str	r0, [r2, #0]
 8014208:	0628      	lsls	r0, r5, #24
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	d501      	bpl.n	8014212 <_printf_i+0x196>
 801420e:	6019      	str	r1, [r3, #0]
 8014210:	e002      	b.n	8014218 <_printf_i+0x19c>
 8014212:	066a      	lsls	r2, r5, #25
 8014214:	d5fb      	bpl.n	801420e <_printf_i+0x192>
 8014216:	8019      	strh	r1, [r3, #0]
 8014218:	2300      	movs	r3, #0
 801421a:	6123      	str	r3, [r4, #16]
 801421c:	4665      	mov	r5, ip
 801421e:	e7b9      	b.n	8014194 <_printf_i+0x118>
 8014220:	6813      	ldr	r3, [r2, #0]
 8014222:	1d19      	adds	r1, r3, #4
 8014224:	6011      	str	r1, [r2, #0]
 8014226:	681d      	ldr	r5, [r3, #0]
 8014228:	6862      	ldr	r2, [r4, #4]
 801422a:	2100      	movs	r1, #0
 801422c:	4628      	mov	r0, r5
 801422e:	f7eb ffef 	bl	8000210 <memchr>
 8014232:	b108      	cbz	r0, 8014238 <_printf_i+0x1bc>
 8014234:	1b40      	subs	r0, r0, r5
 8014236:	6060      	str	r0, [r4, #4]
 8014238:	6863      	ldr	r3, [r4, #4]
 801423a:	6123      	str	r3, [r4, #16]
 801423c:	2300      	movs	r3, #0
 801423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014242:	e7a7      	b.n	8014194 <_printf_i+0x118>
 8014244:	6923      	ldr	r3, [r4, #16]
 8014246:	462a      	mov	r2, r5
 8014248:	4639      	mov	r1, r7
 801424a:	4630      	mov	r0, r6
 801424c:	47c0      	blx	r8
 801424e:	3001      	adds	r0, #1
 8014250:	d0aa      	beq.n	80141a8 <_printf_i+0x12c>
 8014252:	6823      	ldr	r3, [r4, #0]
 8014254:	079b      	lsls	r3, r3, #30
 8014256:	d413      	bmi.n	8014280 <_printf_i+0x204>
 8014258:	68e0      	ldr	r0, [r4, #12]
 801425a:	9b03      	ldr	r3, [sp, #12]
 801425c:	4298      	cmp	r0, r3
 801425e:	bfb8      	it	lt
 8014260:	4618      	movlt	r0, r3
 8014262:	e7a3      	b.n	80141ac <_printf_i+0x130>
 8014264:	2301      	movs	r3, #1
 8014266:	464a      	mov	r2, r9
 8014268:	4639      	mov	r1, r7
 801426a:	4630      	mov	r0, r6
 801426c:	47c0      	blx	r8
 801426e:	3001      	adds	r0, #1
 8014270:	d09a      	beq.n	80141a8 <_printf_i+0x12c>
 8014272:	3501      	adds	r5, #1
 8014274:	68e3      	ldr	r3, [r4, #12]
 8014276:	9a03      	ldr	r2, [sp, #12]
 8014278:	1a9b      	subs	r3, r3, r2
 801427a:	42ab      	cmp	r3, r5
 801427c:	dcf2      	bgt.n	8014264 <_printf_i+0x1e8>
 801427e:	e7eb      	b.n	8014258 <_printf_i+0x1dc>
 8014280:	2500      	movs	r5, #0
 8014282:	f104 0919 	add.w	r9, r4, #25
 8014286:	e7f5      	b.n	8014274 <_printf_i+0x1f8>
 8014288:	2b00      	cmp	r3, #0
 801428a:	d1ac      	bne.n	80141e6 <_printf_i+0x16a>
 801428c:	7803      	ldrb	r3, [r0, #0]
 801428e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014292:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014296:	e76c      	b.n	8014172 <_printf_i+0xf6>
 8014298:	08018578 	.word	0x08018578
 801429c:	08018589 	.word	0x08018589

080142a0 <_scanf_float>:
 80142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a4:	469a      	mov	sl, r3
 80142a6:	688b      	ldr	r3, [r1, #8]
 80142a8:	4616      	mov	r6, r2
 80142aa:	1e5a      	subs	r2, r3, #1
 80142ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80142b0:	b087      	sub	sp, #28
 80142b2:	bf83      	ittte	hi
 80142b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80142b8:	189b      	addhi	r3, r3, r2
 80142ba:	9301      	strhi	r3, [sp, #4]
 80142bc:	2300      	movls	r3, #0
 80142be:	bf86      	itte	hi
 80142c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80142c4:	608b      	strhi	r3, [r1, #8]
 80142c6:	9301      	strls	r3, [sp, #4]
 80142c8:	680b      	ldr	r3, [r1, #0]
 80142ca:	4688      	mov	r8, r1
 80142cc:	f04f 0b00 	mov.w	fp, #0
 80142d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80142d4:	f848 3b1c 	str.w	r3, [r8], #28
 80142d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80142dc:	4607      	mov	r7, r0
 80142de:	460c      	mov	r4, r1
 80142e0:	4645      	mov	r5, r8
 80142e2:	465a      	mov	r2, fp
 80142e4:	46d9      	mov	r9, fp
 80142e6:	f8cd b008 	str.w	fp, [sp, #8]
 80142ea:	68a1      	ldr	r1, [r4, #8]
 80142ec:	b181      	cbz	r1, 8014310 <_scanf_float+0x70>
 80142ee:	6833      	ldr	r3, [r6, #0]
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b49      	cmp	r3, #73	; 0x49
 80142f4:	d071      	beq.n	80143da <_scanf_float+0x13a>
 80142f6:	d84d      	bhi.n	8014394 <_scanf_float+0xf4>
 80142f8:	2b39      	cmp	r3, #57	; 0x39
 80142fa:	d840      	bhi.n	801437e <_scanf_float+0xde>
 80142fc:	2b31      	cmp	r3, #49	; 0x31
 80142fe:	f080 8088 	bcs.w	8014412 <_scanf_float+0x172>
 8014302:	2b2d      	cmp	r3, #45	; 0x2d
 8014304:	f000 8090 	beq.w	8014428 <_scanf_float+0x188>
 8014308:	d815      	bhi.n	8014336 <_scanf_float+0x96>
 801430a:	2b2b      	cmp	r3, #43	; 0x2b
 801430c:	f000 808c 	beq.w	8014428 <_scanf_float+0x188>
 8014310:	f1b9 0f00 	cmp.w	r9, #0
 8014314:	d003      	beq.n	801431e <_scanf_float+0x7e>
 8014316:	6823      	ldr	r3, [r4, #0]
 8014318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801431c:	6023      	str	r3, [r4, #0]
 801431e:	3a01      	subs	r2, #1
 8014320:	2a01      	cmp	r2, #1
 8014322:	f200 80ea 	bhi.w	80144fa <_scanf_float+0x25a>
 8014326:	4545      	cmp	r5, r8
 8014328:	f200 80dc 	bhi.w	80144e4 <_scanf_float+0x244>
 801432c:	2601      	movs	r6, #1
 801432e:	4630      	mov	r0, r6
 8014330:	b007      	add	sp, #28
 8014332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014336:	2b2e      	cmp	r3, #46	; 0x2e
 8014338:	f000 809f 	beq.w	801447a <_scanf_float+0x1da>
 801433c:	2b30      	cmp	r3, #48	; 0x30
 801433e:	d1e7      	bne.n	8014310 <_scanf_float+0x70>
 8014340:	6820      	ldr	r0, [r4, #0]
 8014342:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014346:	d064      	beq.n	8014412 <_scanf_float+0x172>
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801434e:	6020      	str	r0, [r4, #0]
 8014350:	f109 0901 	add.w	r9, r9, #1
 8014354:	b11b      	cbz	r3, 801435e <_scanf_float+0xbe>
 8014356:	3b01      	subs	r3, #1
 8014358:	3101      	adds	r1, #1
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	60a1      	str	r1, [r4, #8]
 801435e:	68a3      	ldr	r3, [r4, #8]
 8014360:	3b01      	subs	r3, #1
 8014362:	60a3      	str	r3, [r4, #8]
 8014364:	6923      	ldr	r3, [r4, #16]
 8014366:	3301      	adds	r3, #1
 8014368:	6123      	str	r3, [r4, #16]
 801436a:	6873      	ldr	r3, [r6, #4]
 801436c:	3b01      	subs	r3, #1
 801436e:	2b00      	cmp	r3, #0
 8014370:	6073      	str	r3, [r6, #4]
 8014372:	f340 80ac 	ble.w	80144ce <_scanf_float+0x22e>
 8014376:	6833      	ldr	r3, [r6, #0]
 8014378:	3301      	adds	r3, #1
 801437a:	6033      	str	r3, [r6, #0]
 801437c:	e7b5      	b.n	80142ea <_scanf_float+0x4a>
 801437e:	2b45      	cmp	r3, #69	; 0x45
 8014380:	f000 8085 	beq.w	801448e <_scanf_float+0x1ee>
 8014384:	2b46      	cmp	r3, #70	; 0x46
 8014386:	d06a      	beq.n	801445e <_scanf_float+0x1be>
 8014388:	2b41      	cmp	r3, #65	; 0x41
 801438a:	d1c1      	bne.n	8014310 <_scanf_float+0x70>
 801438c:	2a01      	cmp	r2, #1
 801438e:	d1bf      	bne.n	8014310 <_scanf_float+0x70>
 8014390:	2202      	movs	r2, #2
 8014392:	e046      	b.n	8014422 <_scanf_float+0x182>
 8014394:	2b65      	cmp	r3, #101	; 0x65
 8014396:	d07a      	beq.n	801448e <_scanf_float+0x1ee>
 8014398:	d818      	bhi.n	80143cc <_scanf_float+0x12c>
 801439a:	2b54      	cmp	r3, #84	; 0x54
 801439c:	d066      	beq.n	801446c <_scanf_float+0x1cc>
 801439e:	d811      	bhi.n	80143c4 <_scanf_float+0x124>
 80143a0:	2b4e      	cmp	r3, #78	; 0x4e
 80143a2:	d1b5      	bne.n	8014310 <_scanf_float+0x70>
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	d146      	bne.n	8014436 <_scanf_float+0x196>
 80143a8:	f1b9 0f00 	cmp.w	r9, #0
 80143ac:	d145      	bne.n	801443a <_scanf_float+0x19a>
 80143ae:	6821      	ldr	r1, [r4, #0]
 80143b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80143b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80143b8:	d13f      	bne.n	801443a <_scanf_float+0x19a>
 80143ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80143be:	6021      	str	r1, [r4, #0]
 80143c0:	2201      	movs	r2, #1
 80143c2:	e02e      	b.n	8014422 <_scanf_float+0x182>
 80143c4:	2b59      	cmp	r3, #89	; 0x59
 80143c6:	d01e      	beq.n	8014406 <_scanf_float+0x166>
 80143c8:	2b61      	cmp	r3, #97	; 0x61
 80143ca:	e7de      	b.n	801438a <_scanf_float+0xea>
 80143cc:	2b6e      	cmp	r3, #110	; 0x6e
 80143ce:	d0e9      	beq.n	80143a4 <_scanf_float+0x104>
 80143d0:	d815      	bhi.n	80143fe <_scanf_float+0x15e>
 80143d2:	2b66      	cmp	r3, #102	; 0x66
 80143d4:	d043      	beq.n	801445e <_scanf_float+0x1be>
 80143d6:	2b69      	cmp	r3, #105	; 0x69
 80143d8:	d19a      	bne.n	8014310 <_scanf_float+0x70>
 80143da:	f1bb 0f00 	cmp.w	fp, #0
 80143de:	d138      	bne.n	8014452 <_scanf_float+0x1b2>
 80143e0:	f1b9 0f00 	cmp.w	r9, #0
 80143e4:	d197      	bne.n	8014316 <_scanf_float+0x76>
 80143e6:	6821      	ldr	r1, [r4, #0]
 80143e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80143ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80143f0:	d195      	bne.n	801431e <_scanf_float+0x7e>
 80143f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80143f6:	6021      	str	r1, [r4, #0]
 80143f8:	f04f 0b01 	mov.w	fp, #1
 80143fc:	e011      	b.n	8014422 <_scanf_float+0x182>
 80143fe:	2b74      	cmp	r3, #116	; 0x74
 8014400:	d034      	beq.n	801446c <_scanf_float+0x1cc>
 8014402:	2b79      	cmp	r3, #121	; 0x79
 8014404:	d184      	bne.n	8014310 <_scanf_float+0x70>
 8014406:	f1bb 0f07 	cmp.w	fp, #7
 801440a:	d181      	bne.n	8014310 <_scanf_float+0x70>
 801440c:	f04f 0b08 	mov.w	fp, #8
 8014410:	e007      	b.n	8014422 <_scanf_float+0x182>
 8014412:	eb12 0f0b 	cmn.w	r2, fp
 8014416:	f47f af7b 	bne.w	8014310 <_scanf_float+0x70>
 801441a:	6821      	ldr	r1, [r4, #0]
 801441c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014420:	6021      	str	r1, [r4, #0]
 8014422:	702b      	strb	r3, [r5, #0]
 8014424:	3501      	adds	r5, #1
 8014426:	e79a      	b.n	801435e <_scanf_float+0xbe>
 8014428:	6821      	ldr	r1, [r4, #0]
 801442a:	0608      	lsls	r0, r1, #24
 801442c:	f57f af70 	bpl.w	8014310 <_scanf_float+0x70>
 8014430:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014434:	e7f4      	b.n	8014420 <_scanf_float+0x180>
 8014436:	2a02      	cmp	r2, #2
 8014438:	d047      	beq.n	80144ca <_scanf_float+0x22a>
 801443a:	f1bb 0f01 	cmp.w	fp, #1
 801443e:	d003      	beq.n	8014448 <_scanf_float+0x1a8>
 8014440:	f1bb 0f04 	cmp.w	fp, #4
 8014444:	f47f af64 	bne.w	8014310 <_scanf_float+0x70>
 8014448:	f10b 0b01 	add.w	fp, fp, #1
 801444c:	fa5f fb8b 	uxtb.w	fp, fp
 8014450:	e7e7      	b.n	8014422 <_scanf_float+0x182>
 8014452:	f1bb 0f03 	cmp.w	fp, #3
 8014456:	d0f7      	beq.n	8014448 <_scanf_float+0x1a8>
 8014458:	f1bb 0f05 	cmp.w	fp, #5
 801445c:	e7f2      	b.n	8014444 <_scanf_float+0x1a4>
 801445e:	f1bb 0f02 	cmp.w	fp, #2
 8014462:	f47f af55 	bne.w	8014310 <_scanf_float+0x70>
 8014466:	f04f 0b03 	mov.w	fp, #3
 801446a:	e7da      	b.n	8014422 <_scanf_float+0x182>
 801446c:	f1bb 0f06 	cmp.w	fp, #6
 8014470:	f47f af4e 	bne.w	8014310 <_scanf_float+0x70>
 8014474:	f04f 0b07 	mov.w	fp, #7
 8014478:	e7d3      	b.n	8014422 <_scanf_float+0x182>
 801447a:	6821      	ldr	r1, [r4, #0]
 801447c:	0588      	lsls	r0, r1, #22
 801447e:	f57f af47 	bpl.w	8014310 <_scanf_float+0x70>
 8014482:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014486:	6021      	str	r1, [r4, #0]
 8014488:	f8cd 9008 	str.w	r9, [sp, #8]
 801448c:	e7c9      	b.n	8014422 <_scanf_float+0x182>
 801448e:	6821      	ldr	r1, [r4, #0]
 8014490:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014494:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014498:	d006      	beq.n	80144a8 <_scanf_float+0x208>
 801449a:	0548      	lsls	r0, r1, #21
 801449c:	f57f af38 	bpl.w	8014310 <_scanf_float+0x70>
 80144a0:	f1b9 0f00 	cmp.w	r9, #0
 80144a4:	f43f af3b 	beq.w	801431e <_scanf_float+0x7e>
 80144a8:	0588      	lsls	r0, r1, #22
 80144aa:	bf58      	it	pl
 80144ac:	9802      	ldrpl	r0, [sp, #8]
 80144ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80144b2:	bf58      	it	pl
 80144b4:	eba9 0000 	subpl.w	r0, r9, r0
 80144b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80144bc:	bf58      	it	pl
 80144be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80144c2:	6021      	str	r1, [r4, #0]
 80144c4:	f04f 0900 	mov.w	r9, #0
 80144c8:	e7ab      	b.n	8014422 <_scanf_float+0x182>
 80144ca:	2203      	movs	r2, #3
 80144cc:	e7a9      	b.n	8014422 <_scanf_float+0x182>
 80144ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144d2:	9205      	str	r2, [sp, #20]
 80144d4:	4631      	mov	r1, r6
 80144d6:	4638      	mov	r0, r7
 80144d8:	4798      	blx	r3
 80144da:	9a05      	ldr	r2, [sp, #20]
 80144dc:	2800      	cmp	r0, #0
 80144de:	f43f af04 	beq.w	80142ea <_scanf_float+0x4a>
 80144e2:	e715      	b.n	8014310 <_scanf_float+0x70>
 80144e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80144ec:	4632      	mov	r2, r6
 80144ee:	4638      	mov	r0, r7
 80144f0:	4798      	blx	r3
 80144f2:	6923      	ldr	r3, [r4, #16]
 80144f4:	3b01      	subs	r3, #1
 80144f6:	6123      	str	r3, [r4, #16]
 80144f8:	e715      	b.n	8014326 <_scanf_float+0x86>
 80144fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80144fe:	2b06      	cmp	r3, #6
 8014500:	d80a      	bhi.n	8014518 <_scanf_float+0x278>
 8014502:	f1bb 0f02 	cmp.w	fp, #2
 8014506:	d968      	bls.n	80145da <_scanf_float+0x33a>
 8014508:	f1ab 0b03 	sub.w	fp, fp, #3
 801450c:	fa5f fb8b 	uxtb.w	fp, fp
 8014510:	eba5 0b0b 	sub.w	fp, r5, fp
 8014514:	455d      	cmp	r5, fp
 8014516:	d14b      	bne.n	80145b0 <_scanf_float+0x310>
 8014518:	6823      	ldr	r3, [r4, #0]
 801451a:	05da      	lsls	r2, r3, #23
 801451c:	d51f      	bpl.n	801455e <_scanf_float+0x2be>
 801451e:	055b      	lsls	r3, r3, #21
 8014520:	d468      	bmi.n	80145f4 <_scanf_float+0x354>
 8014522:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014526:	6923      	ldr	r3, [r4, #16]
 8014528:	2965      	cmp	r1, #101	; 0x65
 801452a:	f103 33ff 	add.w	r3, r3, #4294967295
 801452e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014532:	6123      	str	r3, [r4, #16]
 8014534:	d00d      	beq.n	8014552 <_scanf_float+0x2b2>
 8014536:	2945      	cmp	r1, #69	; 0x45
 8014538:	d00b      	beq.n	8014552 <_scanf_float+0x2b2>
 801453a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801453e:	4632      	mov	r2, r6
 8014540:	4638      	mov	r0, r7
 8014542:	4798      	blx	r3
 8014544:	6923      	ldr	r3, [r4, #16]
 8014546:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801454a:	3b01      	subs	r3, #1
 801454c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014550:	6123      	str	r3, [r4, #16]
 8014552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014556:	4632      	mov	r2, r6
 8014558:	4638      	mov	r0, r7
 801455a:	4798      	blx	r3
 801455c:	465d      	mov	r5, fp
 801455e:	6826      	ldr	r6, [r4, #0]
 8014560:	f016 0610 	ands.w	r6, r6, #16
 8014564:	d17a      	bne.n	801465c <_scanf_float+0x3bc>
 8014566:	702e      	strb	r6, [r5, #0]
 8014568:	6823      	ldr	r3, [r4, #0]
 801456a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014572:	d142      	bne.n	80145fa <_scanf_float+0x35a>
 8014574:	9b02      	ldr	r3, [sp, #8]
 8014576:	eba9 0303 	sub.w	r3, r9, r3
 801457a:	425a      	negs	r2, r3
 801457c:	2b00      	cmp	r3, #0
 801457e:	d149      	bne.n	8014614 <_scanf_float+0x374>
 8014580:	2200      	movs	r2, #0
 8014582:	4641      	mov	r1, r8
 8014584:	4638      	mov	r0, r7
 8014586:	f000 ff0b 	bl	80153a0 <_strtod_r>
 801458a:	6825      	ldr	r5, [r4, #0]
 801458c:	f8da 3000 	ldr.w	r3, [sl]
 8014590:	f015 0f02 	tst.w	r5, #2
 8014594:	f103 0204 	add.w	r2, r3, #4
 8014598:	ec59 8b10 	vmov	r8, r9, d0
 801459c:	f8ca 2000 	str.w	r2, [sl]
 80145a0:	d043      	beq.n	801462a <_scanf_float+0x38a>
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	e9c3 8900 	strd	r8, r9, [r3]
 80145a8:	68e3      	ldr	r3, [r4, #12]
 80145aa:	3301      	adds	r3, #1
 80145ac:	60e3      	str	r3, [r4, #12]
 80145ae:	e6be      	b.n	801432e <_scanf_float+0x8e>
 80145b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80145b8:	4632      	mov	r2, r6
 80145ba:	4638      	mov	r0, r7
 80145bc:	4798      	blx	r3
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	3b01      	subs	r3, #1
 80145c2:	6123      	str	r3, [r4, #16]
 80145c4:	e7a6      	b.n	8014514 <_scanf_float+0x274>
 80145c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80145ce:	4632      	mov	r2, r6
 80145d0:	4638      	mov	r0, r7
 80145d2:	4798      	blx	r3
 80145d4:	6923      	ldr	r3, [r4, #16]
 80145d6:	3b01      	subs	r3, #1
 80145d8:	6123      	str	r3, [r4, #16]
 80145da:	4545      	cmp	r5, r8
 80145dc:	d8f3      	bhi.n	80145c6 <_scanf_float+0x326>
 80145de:	e6a5      	b.n	801432c <_scanf_float+0x8c>
 80145e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80145e8:	4632      	mov	r2, r6
 80145ea:	4638      	mov	r0, r7
 80145ec:	4798      	blx	r3
 80145ee:	6923      	ldr	r3, [r4, #16]
 80145f0:	3b01      	subs	r3, #1
 80145f2:	6123      	str	r3, [r4, #16]
 80145f4:	4545      	cmp	r5, r8
 80145f6:	d8f3      	bhi.n	80145e0 <_scanf_float+0x340>
 80145f8:	e698      	b.n	801432c <_scanf_float+0x8c>
 80145fa:	9b03      	ldr	r3, [sp, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d0bf      	beq.n	8014580 <_scanf_float+0x2e0>
 8014600:	9904      	ldr	r1, [sp, #16]
 8014602:	230a      	movs	r3, #10
 8014604:	4632      	mov	r2, r6
 8014606:	3101      	adds	r1, #1
 8014608:	4638      	mov	r0, r7
 801460a:	f000 ff55 	bl	80154b8 <_strtol_r>
 801460e:	9b03      	ldr	r3, [sp, #12]
 8014610:	9d04      	ldr	r5, [sp, #16]
 8014612:	1ac2      	subs	r2, r0, r3
 8014614:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014618:	429d      	cmp	r5, r3
 801461a:	bf28      	it	cs
 801461c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014620:	490f      	ldr	r1, [pc, #60]	; (8014660 <_scanf_float+0x3c0>)
 8014622:	4628      	mov	r0, r5
 8014624:	f000 f858 	bl	80146d8 <siprintf>
 8014628:	e7aa      	b.n	8014580 <_scanf_float+0x2e0>
 801462a:	f015 0504 	ands.w	r5, r5, #4
 801462e:	d1b8      	bne.n	80145a2 <_scanf_float+0x302>
 8014630:	681f      	ldr	r7, [r3, #0]
 8014632:	ee10 2a10 	vmov	r2, s0
 8014636:	464b      	mov	r3, r9
 8014638:	ee10 0a10 	vmov	r0, s0
 801463c:	4649      	mov	r1, r9
 801463e:	f7ec fa8d 	bl	8000b5c <__aeabi_dcmpun>
 8014642:	b128      	cbz	r0, 8014650 <_scanf_float+0x3b0>
 8014644:	4628      	mov	r0, r5
 8014646:	f000 f80d 	bl	8014664 <nanf>
 801464a:	ed87 0a00 	vstr	s0, [r7]
 801464e:	e7ab      	b.n	80145a8 <_scanf_float+0x308>
 8014650:	4640      	mov	r0, r8
 8014652:	4649      	mov	r1, r9
 8014654:	f7ec fae0 	bl	8000c18 <__aeabi_d2f>
 8014658:	6038      	str	r0, [r7, #0]
 801465a:	e7a5      	b.n	80145a8 <_scanf_float+0x308>
 801465c:	2600      	movs	r6, #0
 801465e:	e666      	b.n	801432e <_scanf_float+0x8e>
 8014660:	0801859a 	.word	0x0801859a

08014664 <nanf>:
 8014664:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801466c <nanf+0x8>
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	7fc00000 	.word	0x7fc00000

08014670 <sniprintf>:
 8014670:	b40c      	push	{r2, r3}
 8014672:	b530      	push	{r4, r5, lr}
 8014674:	4b17      	ldr	r3, [pc, #92]	; (80146d4 <sniprintf+0x64>)
 8014676:	1e0c      	subs	r4, r1, #0
 8014678:	b09d      	sub	sp, #116	; 0x74
 801467a:	681d      	ldr	r5, [r3, #0]
 801467c:	da08      	bge.n	8014690 <sniprintf+0x20>
 801467e:	238b      	movs	r3, #139	; 0x8b
 8014680:	602b      	str	r3, [r5, #0]
 8014682:	f04f 30ff 	mov.w	r0, #4294967295
 8014686:	b01d      	add	sp, #116	; 0x74
 8014688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801468c:	b002      	add	sp, #8
 801468e:	4770      	bx	lr
 8014690:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014694:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014698:	bf14      	ite	ne
 801469a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801469e:	4623      	moveq	r3, r4
 80146a0:	9304      	str	r3, [sp, #16]
 80146a2:	9307      	str	r3, [sp, #28]
 80146a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146a8:	9002      	str	r0, [sp, #8]
 80146aa:	9006      	str	r0, [sp, #24]
 80146ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80146b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80146b2:	ab21      	add	r3, sp, #132	; 0x84
 80146b4:	a902      	add	r1, sp, #8
 80146b6:	4628      	mov	r0, r5
 80146b8:	9301      	str	r3, [sp, #4]
 80146ba:	f002 fde7 	bl	801728c <_svfiprintf_r>
 80146be:	1c43      	adds	r3, r0, #1
 80146c0:	bfbc      	itt	lt
 80146c2:	238b      	movlt	r3, #139	; 0x8b
 80146c4:	602b      	strlt	r3, [r5, #0]
 80146c6:	2c00      	cmp	r4, #0
 80146c8:	d0dd      	beq.n	8014686 <sniprintf+0x16>
 80146ca:	9b02      	ldr	r3, [sp, #8]
 80146cc:	2200      	movs	r2, #0
 80146ce:	701a      	strb	r2, [r3, #0]
 80146d0:	e7d9      	b.n	8014686 <sniprintf+0x16>
 80146d2:	bf00      	nop
 80146d4:	2000000c 	.word	0x2000000c

080146d8 <siprintf>:
 80146d8:	b40e      	push	{r1, r2, r3}
 80146da:	b500      	push	{lr}
 80146dc:	b09c      	sub	sp, #112	; 0x70
 80146de:	ab1d      	add	r3, sp, #116	; 0x74
 80146e0:	9002      	str	r0, [sp, #8]
 80146e2:	9006      	str	r0, [sp, #24]
 80146e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80146e8:	4809      	ldr	r0, [pc, #36]	; (8014710 <siprintf+0x38>)
 80146ea:	9107      	str	r1, [sp, #28]
 80146ec:	9104      	str	r1, [sp, #16]
 80146ee:	4909      	ldr	r1, [pc, #36]	; (8014714 <siprintf+0x3c>)
 80146f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80146f4:	9105      	str	r1, [sp, #20]
 80146f6:	6800      	ldr	r0, [r0, #0]
 80146f8:	9301      	str	r3, [sp, #4]
 80146fa:	a902      	add	r1, sp, #8
 80146fc:	f002 fdc6 	bl	801728c <_svfiprintf_r>
 8014700:	9b02      	ldr	r3, [sp, #8]
 8014702:	2200      	movs	r2, #0
 8014704:	701a      	strb	r2, [r3, #0]
 8014706:	b01c      	add	sp, #112	; 0x70
 8014708:	f85d eb04 	ldr.w	lr, [sp], #4
 801470c:	b003      	add	sp, #12
 801470e:	4770      	bx	lr
 8014710:	2000000c 	.word	0x2000000c
 8014714:	ffff0208 	.word	0xffff0208

08014718 <siscanf>:
 8014718:	b40e      	push	{r1, r2, r3}
 801471a:	b530      	push	{r4, r5, lr}
 801471c:	b09c      	sub	sp, #112	; 0x70
 801471e:	ac1f      	add	r4, sp, #124	; 0x7c
 8014720:	f44f 7201 	mov.w	r2, #516	; 0x204
 8014724:	f854 5b04 	ldr.w	r5, [r4], #4
 8014728:	f8ad 2014 	strh.w	r2, [sp, #20]
 801472c:	9002      	str	r0, [sp, #8]
 801472e:	9006      	str	r0, [sp, #24]
 8014730:	f7eb fd66 	bl	8000200 <strlen>
 8014734:	4b0b      	ldr	r3, [pc, #44]	; (8014764 <siscanf+0x4c>)
 8014736:	9003      	str	r0, [sp, #12]
 8014738:	9007      	str	r0, [sp, #28]
 801473a:	930b      	str	r3, [sp, #44]	; 0x2c
 801473c:	480a      	ldr	r0, [pc, #40]	; (8014768 <siscanf+0x50>)
 801473e:	9401      	str	r4, [sp, #4]
 8014740:	2300      	movs	r3, #0
 8014742:	930f      	str	r3, [sp, #60]	; 0x3c
 8014744:	9314      	str	r3, [sp, #80]	; 0x50
 8014746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801474a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801474e:	462a      	mov	r2, r5
 8014750:	4623      	mov	r3, r4
 8014752:	a902      	add	r1, sp, #8
 8014754:	6800      	ldr	r0, [r0, #0]
 8014756:	f002 feeb 	bl	8017530 <__ssvfiscanf_r>
 801475a:	b01c      	add	sp, #112	; 0x70
 801475c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014760:	b003      	add	sp, #12
 8014762:	4770      	bx	lr
 8014764:	0801476d 	.word	0x0801476d
 8014768:	2000000c 	.word	0x2000000c

0801476c <__seofread>:
 801476c:	2000      	movs	r0, #0
 801476e:	4770      	bx	lr

08014770 <strcpy>:
 8014770:	4603      	mov	r3, r0
 8014772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014776:	f803 2b01 	strb.w	r2, [r3], #1
 801477a:	2a00      	cmp	r2, #0
 801477c:	d1f9      	bne.n	8014772 <strcpy+0x2>
 801477e:	4770      	bx	lr

08014780 <sulp>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	4604      	mov	r4, r0
 8014784:	460d      	mov	r5, r1
 8014786:	ec45 4b10 	vmov	d0, r4, r5
 801478a:	4616      	mov	r6, r2
 801478c:	f002 fb3a 	bl	8016e04 <__ulp>
 8014790:	ec51 0b10 	vmov	r0, r1, d0
 8014794:	b17e      	cbz	r6, 80147b6 <sulp+0x36>
 8014796:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801479a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801479e:	2b00      	cmp	r3, #0
 80147a0:	dd09      	ble.n	80147b6 <sulp+0x36>
 80147a2:	051b      	lsls	r3, r3, #20
 80147a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80147a8:	2400      	movs	r4, #0
 80147aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80147ae:	4622      	mov	r2, r4
 80147b0:	462b      	mov	r3, r5
 80147b2:	f7eb ff39 	bl	8000628 <__aeabi_dmul>
 80147b6:	bd70      	pop	{r4, r5, r6, pc}

080147b8 <_strtod_l>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	461f      	mov	r7, r3
 80147be:	b0a1      	sub	sp, #132	; 0x84
 80147c0:	2300      	movs	r3, #0
 80147c2:	4681      	mov	r9, r0
 80147c4:	4638      	mov	r0, r7
 80147c6:	460e      	mov	r6, r1
 80147c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80147ca:	931c      	str	r3, [sp, #112]	; 0x70
 80147cc:	f002 f824 	bl	8016818 <__localeconv_l>
 80147d0:	4680      	mov	r8, r0
 80147d2:	6800      	ldr	r0, [r0, #0]
 80147d4:	f7eb fd14 	bl	8000200 <strlen>
 80147d8:	f04f 0a00 	mov.w	sl, #0
 80147dc:	4604      	mov	r4, r0
 80147de:	f04f 0b00 	mov.w	fp, #0
 80147e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80147e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147e6:	781a      	ldrb	r2, [r3, #0]
 80147e8:	2a0d      	cmp	r2, #13
 80147ea:	d832      	bhi.n	8014852 <_strtod_l+0x9a>
 80147ec:	2a09      	cmp	r2, #9
 80147ee:	d236      	bcs.n	801485e <_strtod_l+0xa6>
 80147f0:	2a00      	cmp	r2, #0
 80147f2:	d03e      	beq.n	8014872 <_strtod_l+0xba>
 80147f4:	2300      	movs	r3, #0
 80147f6:	930d      	str	r3, [sp, #52]	; 0x34
 80147f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80147fa:	782b      	ldrb	r3, [r5, #0]
 80147fc:	2b30      	cmp	r3, #48	; 0x30
 80147fe:	f040 80ac 	bne.w	801495a <_strtod_l+0x1a2>
 8014802:	786b      	ldrb	r3, [r5, #1]
 8014804:	2b58      	cmp	r3, #88	; 0x58
 8014806:	d001      	beq.n	801480c <_strtod_l+0x54>
 8014808:	2b78      	cmp	r3, #120	; 0x78
 801480a:	d167      	bne.n	80148dc <_strtod_l+0x124>
 801480c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801480e:	9301      	str	r3, [sp, #4]
 8014810:	ab1c      	add	r3, sp, #112	; 0x70
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	9702      	str	r7, [sp, #8]
 8014816:	ab1d      	add	r3, sp, #116	; 0x74
 8014818:	4a88      	ldr	r2, [pc, #544]	; (8014a3c <_strtod_l+0x284>)
 801481a:	a91b      	add	r1, sp, #108	; 0x6c
 801481c:	4648      	mov	r0, r9
 801481e:	f001 fd12 	bl	8016246 <__gethex>
 8014822:	f010 0407 	ands.w	r4, r0, #7
 8014826:	4606      	mov	r6, r0
 8014828:	d005      	beq.n	8014836 <_strtod_l+0x7e>
 801482a:	2c06      	cmp	r4, #6
 801482c:	d12b      	bne.n	8014886 <_strtod_l+0xce>
 801482e:	3501      	adds	r5, #1
 8014830:	2300      	movs	r3, #0
 8014832:	951b      	str	r5, [sp, #108]	; 0x6c
 8014834:	930d      	str	r3, [sp, #52]	; 0x34
 8014836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014838:	2b00      	cmp	r3, #0
 801483a:	f040 859a 	bne.w	8015372 <_strtod_l+0xbba>
 801483e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014840:	b1e3      	cbz	r3, 801487c <_strtod_l+0xc4>
 8014842:	4652      	mov	r2, sl
 8014844:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014848:	ec43 2b10 	vmov	d0, r2, r3
 801484c:	b021      	add	sp, #132	; 0x84
 801484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014852:	2a2b      	cmp	r2, #43	; 0x2b
 8014854:	d015      	beq.n	8014882 <_strtod_l+0xca>
 8014856:	2a2d      	cmp	r2, #45	; 0x2d
 8014858:	d004      	beq.n	8014864 <_strtod_l+0xac>
 801485a:	2a20      	cmp	r2, #32
 801485c:	d1ca      	bne.n	80147f4 <_strtod_l+0x3c>
 801485e:	3301      	adds	r3, #1
 8014860:	931b      	str	r3, [sp, #108]	; 0x6c
 8014862:	e7bf      	b.n	80147e4 <_strtod_l+0x2c>
 8014864:	2201      	movs	r2, #1
 8014866:	920d      	str	r2, [sp, #52]	; 0x34
 8014868:	1c5a      	adds	r2, r3, #1
 801486a:	921b      	str	r2, [sp, #108]	; 0x6c
 801486c:	785b      	ldrb	r3, [r3, #1]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d1c2      	bne.n	80147f8 <_strtod_l+0x40>
 8014872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014874:	961b      	str	r6, [sp, #108]	; 0x6c
 8014876:	2b00      	cmp	r3, #0
 8014878:	f040 8579 	bne.w	801536e <_strtod_l+0xbb6>
 801487c:	4652      	mov	r2, sl
 801487e:	465b      	mov	r3, fp
 8014880:	e7e2      	b.n	8014848 <_strtod_l+0x90>
 8014882:	2200      	movs	r2, #0
 8014884:	e7ef      	b.n	8014866 <_strtod_l+0xae>
 8014886:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014888:	b13a      	cbz	r2, 801489a <_strtod_l+0xe2>
 801488a:	2135      	movs	r1, #53	; 0x35
 801488c:	a81e      	add	r0, sp, #120	; 0x78
 801488e:	f002 fbb1 	bl	8016ff4 <__copybits>
 8014892:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014894:	4648      	mov	r0, r9
 8014896:	f002 f81d 	bl	80168d4 <_Bfree>
 801489a:	3c01      	subs	r4, #1
 801489c:	2c04      	cmp	r4, #4
 801489e:	d806      	bhi.n	80148ae <_strtod_l+0xf6>
 80148a0:	e8df f004 	tbb	[pc, r4]
 80148a4:	1714030a 	.word	0x1714030a
 80148a8:	0a          	.byte	0x0a
 80148a9:	00          	.byte	0x00
 80148aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80148ae:	0730      	lsls	r0, r6, #28
 80148b0:	d5c1      	bpl.n	8014836 <_strtod_l+0x7e>
 80148b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80148b6:	e7be      	b.n	8014836 <_strtod_l+0x7e>
 80148b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80148bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80148be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80148c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80148c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80148ca:	e7f0      	b.n	80148ae <_strtod_l+0xf6>
 80148cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014a40 <_strtod_l+0x288>
 80148d0:	e7ed      	b.n	80148ae <_strtod_l+0xf6>
 80148d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80148d6:	f04f 3aff 	mov.w	sl, #4294967295
 80148da:	e7e8      	b.n	80148ae <_strtod_l+0xf6>
 80148dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80148e2:	785b      	ldrb	r3, [r3, #1]
 80148e4:	2b30      	cmp	r3, #48	; 0x30
 80148e6:	d0f9      	beq.n	80148dc <_strtod_l+0x124>
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d0a4      	beq.n	8014836 <_strtod_l+0x7e>
 80148ec:	2301      	movs	r3, #1
 80148ee:	2500      	movs	r5, #0
 80148f0:	9306      	str	r3, [sp, #24]
 80148f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80148f4:	9308      	str	r3, [sp, #32]
 80148f6:	9507      	str	r5, [sp, #28]
 80148f8:	9505      	str	r5, [sp, #20]
 80148fa:	220a      	movs	r2, #10
 80148fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80148fe:	7807      	ldrb	r7, [r0, #0]
 8014900:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014904:	b2d9      	uxtb	r1, r3
 8014906:	2909      	cmp	r1, #9
 8014908:	d929      	bls.n	801495e <_strtod_l+0x1a6>
 801490a:	4622      	mov	r2, r4
 801490c:	f8d8 1000 	ldr.w	r1, [r8]
 8014910:	f003 f8f8 	bl	8017b04 <strncmp>
 8014914:	2800      	cmp	r0, #0
 8014916:	d031      	beq.n	801497c <_strtod_l+0x1c4>
 8014918:	2000      	movs	r0, #0
 801491a:	9c05      	ldr	r4, [sp, #20]
 801491c:	9004      	str	r0, [sp, #16]
 801491e:	463b      	mov	r3, r7
 8014920:	4602      	mov	r2, r0
 8014922:	2b65      	cmp	r3, #101	; 0x65
 8014924:	d001      	beq.n	801492a <_strtod_l+0x172>
 8014926:	2b45      	cmp	r3, #69	; 0x45
 8014928:	d114      	bne.n	8014954 <_strtod_l+0x19c>
 801492a:	b924      	cbnz	r4, 8014936 <_strtod_l+0x17e>
 801492c:	b910      	cbnz	r0, 8014934 <_strtod_l+0x17c>
 801492e:	9b06      	ldr	r3, [sp, #24]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d09e      	beq.n	8014872 <_strtod_l+0xba>
 8014934:	2400      	movs	r4, #0
 8014936:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014938:	1c73      	adds	r3, r6, #1
 801493a:	931b      	str	r3, [sp, #108]	; 0x6c
 801493c:	7873      	ldrb	r3, [r6, #1]
 801493e:	2b2b      	cmp	r3, #43	; 0x2b
 8014940:	d078      	beq.n	8014a34 <_strtod_l+0x27c>
 8014942:	2b2d      	cmp	r3, #45	; 0x2d
 8014944:	d070      	beq.n	8014a28 <_strtod_l+0x270>
 8014946:	f04f 0c00 	mov.w	ip, #0
 801494a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801494e:	2f09      	cmp	r7, #9
 8014950:	d97c      	bls.n	8014a4c <_strtod_l+0x294>
 8014952:	961b      	str	r6, [sp, #108]	; 0x6c
 8014954:	f04f 0e00 	mov.w	lr, #0
 8014958:	e09a      	b.n	8014a90 <_strtod_l+0x2d8>
 801495a:	2300      	movs	r3, #0
 801495c:	e7c7      	b.n	80148ee <_strtod_l+0x136>
 801495e:	9905      	ldr	r1, [sp, #20]
 8014960:	2908      	cmp	r1, #8
 8014962:	bfdd      	ittte	le
 8014964:	9907      	ldrle	r1, [sp, #28]
 8014966:	fb02 3301 	mlale	r3, r2, r1, r3
 801496a:	9307      	strle	r3, [sp, #28]
 801496c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014970:	9b05      	ldr	r3, [sp, #20]
 8014972:	3001      	adds	r0, #1
 8014974:	3301      	adds	r3, #1
 8014976:	9305      	str	r3, [sp, #20]
 8014978:	901b      	str	r0, [sp, #108]	; 0x6c
 801497a:	e7bf      	b.n	80148fc <_strtod_l+0x144>
 801497c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801497e:	191a      	adds	r2, r3, r4
 8014980:	921b      	str	r2, [sp, #108]	; 0x6c
 8014982:	9a05      	ldr	r2, [sp, #20]
 8014984:	5d1b      	ldrb	r3, [r3, r4]
 8014986:	2a00      	cmp	r2, #0
 8014988:	d037      	beq.n	80149fa <_strtod_l+0x242>
 801498a:	9c05      	ldr	r4, [sp, #20]
 801498c:	4602      	mov	r2, r0
 801498e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014992:	2909      	cmp	r1, #9
 8014994:	d913      	bls.n	80149be <_strtod_l+0x206>
 8014996:	2101      	movs	r1, #1
 8014998:	9104      	str	r1, [sp, #16]
 801499a:	e7c2      	b.n	8014922 <_strtod_l+0x16a>
 801499c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801499e:	1c5a      	adds	r2, r3, #1
 80149a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80149a2:	785b      	ldrb	r3, [r3, #1]
 80149a4:	3001      	adds	r0, #1
 80149a6:	2b30      	cmp	r3, #48	; 0x30
 80149a8:	d0f8      	beq.n	801499c <_strtod_l+0x1e4>
 80149aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80149ae:	2a08      	cmp	r2, #8
 80149b0:	f200 84e4 	bhi.w	801537c <_strtod_l+0xbc4>
 80149b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80149b6:	9208      	str	r2, [sp, #32]
 80149b8:	4602      	mov	r2, r0
 80149ba:	2000      	movs	r0, #0
 80149bc:	4604      	mov	r4, r0
 80149be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80149c2:	f100 0101 	add.w	r1, r0, #1
 80149c6:	d012      	beq.n	80149ee <_strtod_l+0x236>
 80149c8:	440a      	add	r2, r1
 80149ca:	eb00 0c04 	add.w	ip, r0, r4
 80149ce:	4621      	mov	r1, r4
 80149d0:	270a      	movs	r7, #10
 80149d2:	458c      	cmp	ip, r1
 80149d4:	d113      	bne.n	80149fe <_strtod_l+0x246>
 80149d6:	1821      	adds	r1, r4, r0
 80149d8:	2908      	cmp	r1, #8
 80149da:	f104 0401 	add.w	r4, r4, #1
 80149de:	4404      	add	r4, r0
 80149e0:	dc19      	bgt.n	8014a16 <_strtod_l+0x25e>
 80149e2:	9b07      	ldr	r3, [sp, #28]
 80149e4:	210a      	movs	r1, #10
 80149e6:	fb01 e303 	mla	r3, r1, r3, lr
 80149ea:	9307      	str	r3, [sp, #28]
 80149ec:	2100      	movs	r1, #0
 80149ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80149f0:	1c58      	adds	r0, r3, #1
 80149f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80149f4:	785b      	ldrb	r3, [r3, #1]
 80149f6:	4608      	mov	r0, r1
 80149f8:	e7c9      	b.n	801498e <_strtod_l+0x1d6>
 80149fa:	9805      	ldr	r0, [sp, #20]
 80149fc:	e7d3      	b.n	80149a6 <_strtod_l+0x1ee>
 80149fe:	2908      	cmp	r1, #8
 8014a00:	f101 0101 	add.w	r1, r1, #1
 8014a04:	dc03      	bgt.n	8014a0e <_strtod_l+0x256>
 8014a06:	9b07      	ldr	r3, [sp, #28]
 8014a08:	437b      	muls	r3, r7
 8014a0a:	9307      	str	r3, [sp, #28]
 8014a0c:	e7e1      	b.n	80149d2 <_strtod_l+0x21a>
 8014a0e:	2910      	cmp	r1, #16
 8014a10:	bfd8      	it	le
 8014a12:	437d      	mulle	r5, r7
 8014a14:	e7dd      	b.n	80149d2 <_strtod_l+0x21a>
 8014a16:	2c10      	cmp	r4, #16
 8014a18:	bfdc      	itt	le
 8014a1a:	210a      	movle	r1, #10
 8014a1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8014a20:	e7e4      	b.n	80149ec <_strtod_l+0x234>
 8014a22:	2301      	movs	r3, #1
 8014a24:	9304      	str	r3, [sp, #16]
 8014a26:	e781      	b.n	801492c <_strtod_l+0x174>
 8014a28:	f04f 0c01 	mov.w	ip, #1
 8014a2c:	1cb3      	adds	r3, r6, #2
 8014a2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014a30:	78b3      	ldrb	r3, [r6, #2]
 8014a32:	e78a      	b.n	801494a <_strtod_l+0x192>
 8014a34:	f04f 0c00 	mov.w	ip, #0
 8014a38:	e7f8      	b.n	8014a2c <_strtod_l+0x274>
 8014a3a:	bf00      	nop
 8014a3c:	080185a0 	.word	0x080185a0
 8014a40:	7ff00000 	.word	0x7ff00000
 8014a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a46:	1c5f      	adds	r7, r3, #1
 8014a48:	971b      	str	r7, [sp, #108]	; 0x6c
 8014a4a:	785b      	ldrb	r3, [r3, #1]
 8014a4c:	2b30      	cmp	r3, #48	; 0x30
 8014a4e:	d0f9      	beq.n	8014a44 <_strtod_l+0x28c>
 8014a50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014a54:	2f08      	cmp	r7, #8
 8014a56:	f63f af7d 	bhi.w	8014954 <_strtod_l+0x19c>
 8014a5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a60:	930a      	str	r3, [sp, #40]	; 0x28
 8014a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a64:	1c5f      	adds	r7, r3, #1
 8014a66:	971b      	str	r7, [sp, #108]	; 0x6c
 8014a68:	785b      	ldrb	r3, [r3, #1]
 8014a6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014a6e:	f1b8 0f09 	cmp.w	r8, #9
 8014a72:	d937      	bls.n	8014ae4 <_strtod_l+0x32c>
 8014a74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014a76:	1a7f      	subs	r7, r7, r1
 8014a78:	2f08      	cmp	r7, #8
 8014a7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014a7e:	dc37      	bgt.n	8014af0 <_strtod_l+0x338>
 8014a80:	45be      	cmp	lr, r7
 8014a82:	bfa8      	it	ge
 8014a84:	46be      	movge	lr, r7
 8014a86:	f1bc 0f00 	cmp.w	ip, #0
 8014a8a:	d001      	beq.n	8014a90 <_strtod_l+0x2d8>
 8014a8c:	f1ce 0e00 	rsb	lr, lr, #0
 8014a90:	2c00      	cmp	r4, #0
 8014a92:	d151      	bne.n	8014b38 <_strtod_l+0x380>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	f47f aece 	bne.w	8014836 <_strtod_l+0x7e>
 8014a9a:	9a06      	ldr	r2, [sp, #24]
 8014a9c:	2a00      	cmp	r2, #0
 8014a9e:	f47f aeca 	bne.w	8014836 <_strtod_l+0x7e>
 8014aa2:	9a04      	ldr	r2, [sp, #16]
 8014aa4:	2a00      	cmp	r2, #0
 8014aa6:	f47f aee4 	bne.w	8014872 <_strtod_l+0xba>
 8014aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8014aac:	d027      	beq.n	8014afe <_strtod_l+0x346>
 8014aae:	dc21      	bgt.n	8014af4 <_strtod_l+0x33c>
 8014ab0:	2b49      	cmp	r3, #73	; 0x49
 8014ab2:	f47f aede 	bne.w	8014872 <_strtod_l+0xba>
 8014ab6:	49a0      	ldr	r1, [pc, #640]	; (8014d38 <_strtod_l+0x580>)
 8014ab8:	a81b      	add	r0, sp, #108	; 0x6c
 8014aba:	f001 fdf7 	bl	80166ac <__match>
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	f43f aed7 	beq.w	8014872 <_strtod_l+0xba>
 8014ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ac6:	499d      	ldr	r1, [pc, #628]	; (8014d3c <_strtod_l+0x584>)
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	a81b      	add	r0, sp, #108	; 0x6c
 8014acc:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ace:	f001 fded 	bl	80166ac <__match>
 8014ad2:	b910      	cbnz	r0, 8014ada <_strtod_l+0x322>
 8014ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ada:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014d50 <_strtod_l+0x598>
 8014ade:	f04f 0a00 	mov.w	sl, #0
 8014ae2:	e6a8      	b.n	8014836 <_strtod_l+0x7e>
 8014ae4:	210a      	movs	r1, #10
 8014ae6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014aea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014aee:	e7b8      	b.n	8014a62 <_strtod_l+0x2aa>
 8014af0:	46be      	mov	lr, r7
 8014af2:	e7c8      	b.n	8014a86 <_strtod_l+0x2ce>
 8014af4:	2b69      	cmp	r3, #105	; 0x69
 8014af6:	d0de      	beq.n	8014ab6 <_strtod_l+0x2fe>
 8014af8:	2b6e      	cmp	r3, #110	; 0x6e
 8014afa:	f47f aeba 	bne.w	8014872 <_strtod_l+0xba>
 8014afe:	4990      	ldr	r1, [pc, #576]	; (8014d40 <_strtod_l+0x588>)
 8014b00:	a81b      	add	r0, sp, #108	; 0x6c
 8014b02:	f001 fdd3 	bl	80166ac <__match>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	f43f aeb3 	beq.w	8014872 <_strtod_l+0xba>
 8014b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	2b28      	cmp	r3, #40	; 0x28
 8014b12:	d10e      	bne.n	8014b32 <_strtod_l+0x37a>
 8014b14:	aa1e      	add	r2, sp, #120	; 0x78
 8014b16:	498b      	ldr	r1, [pc, #556]	; (8014d44 <_strtod_l+0x58c>)
 8014b18:	a81b      	add	r0, sp, #108	; 0x6c
 8014b1a:	f001 fddb 	bl	80166d4 <__hexnan>
 8014b1e:	2805      	cmp	r0, #5
 8014b20:	d107      	bne.n	8014b32 <_strtod_l+0x37a>
 8014b22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b24:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014b28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014b2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014b30:	e681      	b.n	8014836 <_strtod_l+0x7e>
 8014b32:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014d58 <_strtod_l+0x5a0>
 8014b36:	e7d2      	b.n	8014ade <_strtod_l+0x326>
 8014b38:	ebae 0302 	sub.w	r3, lr, r2
 8014b3c:	9306      	str	r3, [sp, #24]
 8014b3e:	9b05      	ldr	r3, [sp, #20]
 8014b40:	9807      	ldr	r0, [sp, #28]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	bf08      	it	eq
 8014b46:	4623      	moveq	r3, r4
 8014b48:	2c10      	cmp	r4, #16
 8014b4a:	9305      	str	r3, [sp, #20]
 8014b4c:	46a0      	mov	r8, r4
 8014b4e:	bfa8      	it	ge
 8014b50:	f04f 0810 	movge.w	r8, #16
 8014b54:	f7eb fcee 	bl	8000534 <__aeabi_ui2d>
 8014b58:	2c09      	cmp	r4, #9
 8014b5a:	4682      	mov	sl, r0
 8014b5c:	468b      	mov	fp, r1
 8014b5e:	dc13      	bgt.n	8014b88 <_strtod_l+0x3d0>
 8014b60:	9b06      	ldr	r3, [sp, #24]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	f43f ae67 	beq.w	8014836 <_strtod_l+0x7e>
 8014b68:	9b06      	ldr	r3, [sp, #24]
 8014b6a:	dd7a      	ble.n	8014c62 <_strtod_l+0x4aa>
 8014b6c:	2b16      	cmp	r3, #22
 8014b6e:	dc61      	bgt.n	8014c34 <_strtod_l+0x47c>
 8014b70:	4a75      	ldr	r2, [pc, #468]	; (8014d48 <_strtod_l+0x590>)
 8014b72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014b76:	e9de 0100 	ldrd	r0, r1, [lr]
 8014b7a:	4652      	mov	r2, sl
 8014b7c:	465b      	mov	r3, fp
 8014b7e:	f7eb fd53 	bl	8000628 <__aeabi_dmul>
 8014b82:	4682      	mov	sl, r0
 8014b84:	468b      	mov	fp, r1
 8014b86:	e656      	b.n	8014836 <_strtod_l+0x7e>
 8014b88:	4b6f      	ldr	r3, [pc, #444]	; (8014d48 <_strtod_l+0x590>)
 8014b8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014b8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014b92:	f7eb fd49 	bl	8000628 <__aeabi_dmul>
 8014b96:	4606      	mov	r6, r0
 8014b98:	4628      	mov	r0, r5
 8014b9a:	460f      	mov	r7, r1
 8014b9c:	f7eb fcca 	bl	8000534 <__aeabi_ui2d>
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	4630      	mov	r0, r6
 8014ba6:	4639      	mov	r1, r7
 8014ba8:	f7eb fb88 	bl	80002bc <__adddf3>
 8014bac:	2c0f      	cmp	r4, #15
 8014bae:	4682      	mov	sl, r0
 8014bb0:	468b      	mov	fp, r1
 8014bb2:	ddd5      	ble.n	8014b60 <_strtod_l+0x3a8>
 8014bb4:	9b06      	ldr	r3, [sp, #24]
 8014bb6:	eba4 0808 	sub.w	r8, r4, r8
 8014bba:	4498      	add	r8, r3
 8014bbc:	f1b8 0f00 	cmp.w	r8, #0
 8014bc0:	f340 8096 	ble.w	8014cf0 <_strtod_l+0x538>
 8014bc4:	f018 030f 	ands.w	r3, r8, #15
 8014bc8:	d00a      	beq.n	8014be0 <_strtod_l+0x428>
 8014bca:	495f      	ldr	r1, [pc, #380]	; (8014d48 <_strtod_l+0x590>)
 8014bcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014bd0:	4652      	mov	r2, sl
 8014bd2:	465b      	mov	r3, fp
 8014bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bd8:	f7eb fd26 	bl	8000628 <__aeabi_dmul>
 8014bdc:	4682      	mov	sl, r0
 8014bde:	468b      	mov	fp, r1
 8014be0:	f038 080f 	bics.w	r8, r8, #15
 8014be4:	d073      	beq.n	8014cce <_strtod_l+0x516>
 8014be6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014bea:	dd47      	ble.n	8014c7c <_strtod_l+0x4c4>
 8014bec:	2400      	movs	r4, #0
 8014bee:	46a0      	mov	r8, r4
 8014bf0:	9407      	str	r4, [sp, #28]
 8014bf2:	9405      	str	r4, [sp, #20]
 8014bf4:	2322      	movs	r3, #34	; 0x22
 8014bf6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014d50 <_strtod_l+0x598>
 8014bfa:	f8c9 3000 	str.w	r3, [r9]
 8014bfe:	f04f 0a00 	mov.w	sl, #0
 8014c02:	9b07      	ldr	r3, [sp, #28]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f43f ae16 	beq.w	8014836 <_strtod_l+0x7e>
 8014c0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014c0c:	4648      	mov	r0, r9
 8014c0e:	f001 fe61 	bl	80168d4 <_Bfree>
 8014c12:	9905      	ldr	r1, [sp, #20]
 8014c14:	4648      	mov	r0, r9
 8014c16:	f001 fe5d 	bl	80168d4 <_Bfree>
 8014c1a:	4641      	mov	r1, r8
 8014c1c:	4648      	mov	r0, r9
 8014c1e:	f001 fe59 	bl	80168d4 <_Bfree>
 8014c22:	9907      	ldr	r1, [sp, #28]
 8014c24:	4648      	mov	r0, r9
 8014c26:	f001 fe55 	bl	80168d4 <_Bfree>
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	4648      	mov	r0, r9
 8014c2e:	f001 fe51 	bl	80168d4 <_Bfree>
 8014c32:	e600      	b.n	8014836 <_strtod_l+0x7e>
 8014c34:	9a06      	ldr	r2, [sp, #24]
 8014c36:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	dbba      	blt.n	8014bb4 <_strtod_l+0x3fc>
 8014c3e:	4d42      	ldr	r5, [pc, #264]	; (8014d48 <_strtod_l+0x590>)
 8014c40:	f1c4 040f 	rsb	r4, r4, #15
 8014c44:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014c48:	4652      	mov	r2, sl
 8014c4a:	465b      	mov	r3, fp
 8014c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c50:	f7eb fcea 	bl	8000628 <__aeabi_dmul>
 8014c54:	9b06      	ldr	r3, [sp, #24]
 8014c56:	1b1c      	subs	r4, r3, r4
 8014c58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014c60:	e78d      	b.n	8014b7e <_strtod_l+0x3c6>
 8014c62:	f113 0f16 	cmn.w	r3, #22
 8014c66:	dba5      	blt.n	8014bb4 <_strtod_l+0x3fc>
 8014c68:	4a37      	ldr	r2, [pc, #220]	; (8014d48 <_strtod_l+0x590>)
 8014c6a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014c6e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014c72:	4650      	mov	r0, sl
 8014c74:	4659      	mov	r1, fp
 8014c76:	f7eb fe01 	bl	800087c <__aeabi_ddiv>
 8014c7a:	e782      	b.n	8014b82 <_strtod_l+0x3ca>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	4e33      	ldr	r6, [pc, #204]	; (8014d4c <_strtod_l+0x594>)
 8014c80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014c84:	4650      	mov	r0, sl
 8014c86:	4659      	mov	r1, fp
 8014c88:	461d      	mov	r5, r3
 8014c8a:	f1b8 0f01 	cmp.w	r8, #1
 8014c8e:	dc21      	bgt.n	8014cd4 <_strtod_l+0x51c>
 8014c90:	b10b      	cbz	r3, 8014c96 <_strtod_l+0x4de>
 8014c92:	4682      	mov	sl, r0
 8014c94:	468b      	mov	fp, r1
 8014c96:	4b2d      	ldr	r3, [pc, #180]	; (8014d4c <_strtod_l+0x594>)
 8014c98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014c9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014ca0:	4652      	mov	r2, sl
 8014ca2:	465b      	mov	r3, fp
 8014ca4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ca8:	f7eb fcbe 	bl	8000628 <__aeabi_dmul>
 8014cac:	4b28      	ldr	r3, [pc, #160]	; (8014d50 <_strtod_l+0x598>)
 8014cae:	460a      	mov	r2, r1
 8014cb0:	400b      	ands	r3, r1
 8014cb2:	4928      	ldr	r1, [pc, #160]	; (8014d54 <_strtod_l+0x59c>)
 8014cb4:	428b      	cmp	r3, r1
 8014cb6:	4682      	mov	sl, r0
 8014cb8:	d898      	bhi.n	8014bec <_strtod_l+0x434>
 8014cba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014cbe:	428b      	cmp	r3, r1
 8014cc0:	bf86      	itte	hi
 8014cc2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014d5c <_strtod_l+0x5a4>
 8014cc6:	f04f 3aff 	movhi.w	sl, #4294967295
 8014cca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014cce:	2300      	movs	r3, #0
 8014cd0:	9304      	str	r3, [sp, #16]
 8014cd2:	e077      	b.n	8014dc4 <_strtod_l+0x60c>
 8014cd4:	f018 0f01 	tst.w	r8, #1
 8014cd8:	d006      	beq.n	8014ce8 <_strtod_l+0x530>
 8014cda:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	f7eb fca1 	bl	8000628 <__aeabi_dmul>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	3501      	adds	r5, #1
 8014cea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014cee:	e7cc      	b.n	8014c8a <_strtod_l+0x4d2>
 8014cf0:	d0ed      	beq.n	8014cce <_strtod_l+0x516>
 8014cf2:	f1c8 0800 	rsb	r8, r8, #0
 8014cf6:	f018 020f 	ands.w	r2, r8, #15
 8014cfa:	d00a      	beq.n	8014d12 <_strtod_l+0x55a>
 8014cfc:	4b12      	ldr	r3, [pc, #72]	; (8014d48 <_strtod_l+0x590>)
 8014cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d02:	4650      	mov	r0, sl
 8014d04:	4659      	mov	r1, fp
 8014d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0a:	f7eb fdb7 	bl	800087c <__aeabi_ddiv>
 8014d0e:	4682      	mov	sl, r0
 8014d10:	468b      	mov	fp, r1
 8014d12:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014d16:	d0da      	beq.n	8014cce <_strtod_l+0x516>
 8014d18:	f1b8 0f1f 	cmp.w	r8, #31
 8014d1c:	dd20      	ble.n	8014d60 <_strtod_l+0x5a8>
 8014d1e:	2400      	movs	r4, #0
 8014d20:	46a0      	mov	r8, r4
 8014d22:	9407      	str	r4, [sp, #28]
 8014d24:	9405      	str	r4, [sp, #20]
 8014d26:	2322      	movs	r3, #34	; 0x22
 8014d28:	f04f 0a00 	mov.w	sl, #0
 8014d2c:	f04f 0b00 	mov.w	fp, #0
 8014d30:	f8c9 3000 	str.w	r3, [r9]
 8014d34:	e765      	b.n	8014c02 <_strtod_l+0x44a>
 8014d36:	bf00      	nop
 8014d38:	0801856d 	.word	0x0801856d
 8014d3c:	080185f3 	.word	0x080185f3
 8014d40:	08018575 	.word	0x08018575
 8014d44:	080185b4 	.word	0x080185b4
 8014d48:	08018698 	.word	0x08018698
 8014d4c:	08018670 	.word	0x08018670
 8014d50:	7ff00000 	.word	0x7ff00000
 8014d54:	7ca00000 	.word	0x7ca00000
 8014d58:	fff80000 	.word	0xfff80000
 8014d5c:	7fefffff 	.word	0x7fefffff
 8014d60:	f018 0310 	ands.w	r3, r8, #16
 8014d64:	bf18      	it	ne
 8014d66:	236a      	movne	r3, #106	; 0x6a
 8014d68:	4da0      	ldr	r5, [pc, #640]	; (8014fec <_strtod_l+0x834>)
 8014d6a:	9304      	str	r3, [sp, #16]
 8014d6c:	4650      	mov	r0, sl
 8014d6e:	4659      	mov	r1, fp
 8014d70:	2300      	movs	r3, #0
 8014d72:	f1b8 0f00 	cmp.w	r8, #0
 8014d76:	f300 810a 	bgt.w	8014f8e <_strtod_l+0x7d6>
 8014d7a:	b10b      	cbz	r3, 8014d80 <_strtod_l+0x5c8>
 8014d7c:	4682      	mov	sl, r0
 8014d7e:	468b      	mov	fp, r1
 8014d80:	9b04      	ldr	r3, [sp, #16]
 8014d82:	b1bb      	cbz	r3, 8014db4 <_strtod_l+0x5fc>
 8014d84:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014d88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	4659      	mov	r1, fp
 8014d90:	dd10      	ble.n	8014db4 <_strtod_l+0x5fc>
 8014d92:	2b1f      	cmp	r3, #31
 8014d94:	f340 8107 	ble.w	8014fa6 <_strtod_l+0x7ee>
 8014d98:	2b34      	cmp	r3, #52	; 0x34
 8014d9a:	bfde      	ittt	le
 8014d9c:	3b20      	suble	r3, #32
 8014d9e:	f04f 32ff 	movle.w	r2, #4294967295
 8014da2:	fa02 f303 	lslle.w	r3, r2, r3
 8014da6:	f04f 0a00 	mov.w	sl, #0
 8014daa:	bfcc      	ite	gt
 8014dac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014db0:	ea03 0b01 	andle.w	fp, r3, r1
 8014db4:	2200      	movs	r2, #0
 8014db6:	2300      	movs	r3, #0
 8014db8:	4650      	mov	r0, sl
 8014dba:	4659      	mov	r1, fp
 8014dbc:	f7eb fe9c 	bl	8000af8 <__aeabi_dcmpeq>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d1ac      	bne.n	8014d1e <_strtod_l+0x566>
 8014dc4:	9b07      	ldr	r3, [sp, #28]
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	9a05      	ldr	r2, [sp, #20]
 8014dca:	9908      	ldr	r1, [sp, #32]
 8014dcc:	4623      	mov	r3, r4
 8014dce:	4648      	mov	r0, r9
 8014dd0:	f001 fdd2 	bl	8016978 <__s2b>
 8014dd4:	9007      	str	r0, [sp, #28]
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	f43f af08 	beq.w	8014bec <_strtod_l+0x434>
 8014ddc:	9a06      	ldr	r2, [sp, #24]
 8014dde:	9b06      	ldr	r3, [sp, #24]
 8014de0:	2a00      	cmp	r2, #0
 8014de2:	f1c3 0300 	rsb	r3, r3, #0
 8014de6:	bfa8      	it	ge
 8014de8:	2300      	movge	r3, #0
 8014dea:	930e      	str	r3, [sp, #56]	; 0x38
 8014dec:	2400      	movs	r4, #0
 8014dee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014df2:	9316      	str	r3, [sp, #88]	; 0x58
 8014df4:	46a0      	mov	r8, r4
 8014df6:	9b07      	ldr	r3, [sp, #28]
 8014df8:	4648      	mov	r0, r9
 8014dfa:	6859      	ldr	r1, [r3, #4]
 8014dfc:	f001 fd36 	bl	801686c <_Balloc>
 8014e00:	9005      	str	r0, [sp, #20]
 8014e02:	2800      	cmp	r0, #0
 8014e04:	f43f aef6 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014e08:	9b07      	ldr	r3, [sp, #28]
 8014e0a:	691a      	ldr	r2, [r3, #16]
 8014e0c:	3202      	adds	r2, #2
 8014e0e:	f103 010c 	add.w	r1, r3, #12
 8014e12:	0092      	lsls	r2, r2, #2
 8014e14:	300c      	adds	r0, #12
 8014e16:	f7fe fdd3 	bl	80139c0 <memcpy>
 8014e1a:	aa1e      	add	r2, sp, #120	; 0x78
 8014e1c:	a91d      	add	r1, sp, #116	; 0x74
 8014e1e:	ec4b ab10 	vmov	d0, sl, fp
 8014e22:	4648      	mov	r0, r9
 8014e24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014e28:	f002 f862 	bl	8016ef0 <__d2b>
 8014e2c:	901c      	str	r0, [sp, #112]	; 0x70
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f43f aee0 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014e34:	2101      	movs	r1, #1
 8014e36:	4648      	mov	r0, r9
 8014e38:	f001 fe2a 	bl	8016a90 <__i2b>
 8014e3c:	4680      	mov	r8, r0
 8014e3e:	2800      	cmp	r0, #0
 8014e40:	f43f aed8 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014e44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014e46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014e48:	2e00      	cmp	r6, #0
 8014e4a:	bfab      	itete	ge
 8014e4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014e4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014e50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014e52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014e54:	bfac      	ite	ge
 8014e56:	18f7      	addge	r7, r6, r3
 8014e58:	1b9d      	sublt	r5, r3, r6
 8014e5a:	9b04      	ldr	r3, [sp, #16]
 8014e5c:	1af6      	subs	r6, r6, r3
 8014e5e:	4416      	add	r6, r2
 8014e60:	4b63      	ldr	r3, [pc, #396]	; (8014ff0 <_strtod_l+0x838>)
 8014e62:	3e01      	subs	r6, #1
 8014e64:	429e      	cmp	r6, r3
 8014e66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014e6a:	f280 80af 	bge.w	8014fcc <_strtod_l+0x814>
 8014e6e:	1b9b      	subs	r3, r3, r6
 8014e70:	2b1f      	cmp	r3, #31
 8014e72:	eba2 0203 	sub.w	r2, r2, r3
 8014e76:	f04f 0101 	mov.w	r1, #1
 8014e7a:	f300 809b 	bgt.w	8014fb4 <_strtod_l+0x7fc>
 8014e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e84:	2300      	movs	r3, #0
 8014e86:	930a      	str	r3, [sp, #40]	; 0x28
 8014e88:	18be      	adds	r6, r7, r2
 8014e8a:	9b04      	ldr	r3, [sp, #16]
 8014e8c:	42b7      	cmp	r7, r6
 8014e8e:	4415      	add	r5, r2
 8014e90:	441d      	add	r5, r3
 8014e92:	463b      	mov	r3, r7
 8014e94:	bfa8      	it	ge
 8014e96:	4633      	movge	r3, r6
 8014e98:	42ab      	cmp	r3, r5
 8014e9a:	bfa8      	it	ge
 8014e9c:	462b      	movge	r3, r5
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	bfc2      	ittt	gt
 8014ea2:	1af6      	subgt	r6, r6, r3
 8014ea4:	1aed      	subgt	r5, r5, r3
 8014ea6:	1aff      	subgt	r7, r7, r3
 8014ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eaa:	b1bb      	cbz	r3, 8014edc <_strtod_l+0x724>
 8014eac:	4641      	mov	r1, r8
 8014eae:	461a      	mov	r2, r3
 8014eb0:	4648      	mov	r0, r9
 8014eb2:	f001 fe8d 	bl	8016bd0 <__pow5mult>
 8014eb6:	4680      	mov	r8, r0
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	f43f ae9b 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014ebe:	4601      	mov	r1, r0
 8014ec0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014ec2:	4648      	mov	r0, r9
 8014ec4:	f001 fded 	bl	8016aa2 <__multiply>
 8014ec8:	900c      	str	r0, [sp, #48]	; 0x30
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	f43f ae92 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014ed0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014ed2:	4648      	mov	r0, r9
 8014ed4:	f001 fcfe 	bl	80168d4 <_Bfree>
 8014ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eda:	931c      	str	r3, [sp, #112]	; 0x70
 8014edc:	2e00      	cmp	r6, #0
 8014ede:	dc7a      	bgt.n	8014fd6 <_strtod_l+0x81e>
 8014ee0:	9b06      	ldr	r3, [sp, #24]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	dd08      	ble.n	8014ef8 <_strtod_l+0x740>
 8014ee6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ee8:	9905      	ldr	r1, [sp, #20]
 8014eea:	4648      	mov	r0, r9
 8014eec:	f001 fe70 	bl	8016bd0 <__pow5mult>
 8014ef0:	9005      	str	r0, [sp, #20]
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	f43f ae7e 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014ef8:	2d00      	cmp	r5, #0
 8014efa:	dd08      	ble.n	8014f0e <_strtod_l+0x756>
 8014efc:	462a      	mov	r2, r5
 8014efe:	9905      	ldr	r1, [sp, #20]
 8014f00:	4648      	mov	r0, r9
 8014f02:	f001 feb3 	bl	8016c6c <__lshift>
 8014f06:	9005      	str	r0, [sp, #20]
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	f43f ae73 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014f0e:	2f00      	cmp	r7, #0
 8014f10:	dd08      	ble.n	8014f24 <_strtod_l+0x76c>
 8014f12:	4641      	mov	r1, r8
 8014f14:	463a      	mov	r2, r7
 8014f16:	4648      	mov	r0, r9
 8014f18:	f001 fea8 	bl	8016c6c <__lshift>
 8014f1c:	4680      	mov	r8, r0
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	f43f ae68 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014f24:	9a05      	ldr	r2, [sp, #20]
 8014f26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014f28:	4648      	mov	r0, r9
 8014f2a:	f001 ff0d 	bl	8016d48 <__mdiff>
 8014f2e:	4604      	mov	r4, r0
 8014f30:	2800      	cmp	r0, #0
 8014f32:	f43f ae5f 	beq.w	8014bf4 <_strtod_l+0x43c>
 8014f36:	68c3      	ldr	r3, [r0, #12]
 8014f38:	930c      	str	r3, [sp, #48]	; 0x30
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60c3      	str	r3, [r0, #12]
 8014f3e:	4641      	mov	r1, r8
 8014f40:	f001 fee8 	bl	8016d14 <__mcmp>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	da55      	bge.n	8014ff4 <_strtod_l+0x83c>
 8014f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f4a:	b9e3      	cbnz	r3, 8014f86 <_strtod_l+0x7ce>
 8014f4c:	f1ba 0f00 	cmp.w	sl, #0
 8014f50:	d119      	bne.n	8014f86 <_strtod_l+0x7ce>
 8014f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014f56:	b9b3      	cbnz	r3, 8014f86 <_strtod_l+0x7ce>
 8014f58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f5c:	0d1b      	lsrs	r3, r3, #20
 8014f5e:	051b      	lsls	r3, r3, #20
 8014f60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014f64:	d90f      	bls.n	8014f86 <_strtod_l+0x7ce>
 8014f66:	6963      	ldr	r3, [r4, #20]
 8014f68:	b913      	cbnz	r3, 8014f70 <_strtod_l+0x7b8>
 8014f6a:	6923      	ldr	r3, [r4, #16]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	dd0a      	ble.n	8014f86 <_strtod_l+0x7ce>
 8014f70:	4621      	mov	r1, r4
 8014f72:	2201      	movs	r2, #1
 8014f74:	4648      	mov	r0, r9
 8014f76:	f001 fe79 	bl	8016c6c <__lshift>
 8014f7a:	4641      	mov	r1, r8
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	f001 fec9 	bl	8016d14 <__mcmp>
 8014f82:	2800      	cmp	r0, #0
 8014f84:	dc67      	bgt.n	8015056 <_strtod_l+0x89e>
 8014f86:	9b04      	ldr	r3, [sp, #16]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d171      	bne.n	8015070 <_strtod_l+0x8b8>
 8014f8c:	e63d      	b.n	8014c0a <_strtod_l+0x452>
 8014f8e:	f018 0f01 	tst.w	r8, #1
 8014f92:	d004      	beq.n	8014f9e <_strtod_l+0x7e6>
 8014f94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f98:	f7eb fb46 	bl	8000628 <__aeabi_dmul>
 8014f9c:	2301      	movs	r3, #1
 8014f9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014fa2:	3508      	adds	r5, #8
 8014fa4:	e6e5      	b.n	8014d72 <_strtod_l+0x5ba>
 8014fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8014faa:	fa02 f303 	lsl.w	r3, r2, r3
 8014fae:	ea03 0a0a 	and.w	sl, r3, sl
 8014fb2:	e6ff      	b.n	8014db4 <_strtod_l+0x5fc>
 8014fb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014fb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014fbc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014fc0:	36e2      	adds	r6, #226	; 0xe2
 8014fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8014fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8014fc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8014fca:	e75d      	b.n	8014e88 <_strtod_l+0x6d0>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	930a      	str	r3, [sp, #40]	; 0x28
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fd4:	e758      	b.n	8014e88 <_strtod_l+0x6d0>
 8014fd6:	4632      	mov	r2, r6
 8014fd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014fda:	4648      	mov	r0, r9
 8014fdc:	f001 fe46 	bl	8016c6c <__lshift>
 8014fe0:	901c      	str	r0, [sp, #112]	; 0x70
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	f47f af7c 	bne.w	8014ee0 <_strtod_l+0x728>
 8014fe8:	e604      	b.n	8014bf4 <_strtod_l+0x43c>
 8014fea:	bf00      	nop
 8014fec:	080185c8 	.word	0x080185c8
 8014ff0:	fffffc02 	.word	0xfffffc02
 8014ff4:	465d      	mov	r5, fp
 8014ff6:	f040 8086 	bne.w	8015106 <_strtod_l+0x94e>
 8014ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015000:	b32a      	cbz	r2, 801504e <_strtod_l+0x896>
 8015002:	4aaf      	ldr	r2, [pc, #700]	; (80152c0 <_strtod_l+0xb08>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d153      	bne.n	80150b0 <_strtod_l+0x8f8>
 8015008:	9b04      	ldr	r3, [sp, #16]
 801500a:	4650      	mov	r0, sl
 801500c:	b1d3      	cbz	r3, 8015044 <_strtod_l+0x88c>
 801500e:	4aad      	ldr	r2, [pc, #692]	; (80152c4 <_strtod_l+0xb0c>)
 8015010:	402a      	ands	r2, r5
 8015012:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015016:	f04f 31ff 	mov.w	r1, #4294967295
 801501a:	d816      	bhi.n	801504a <_strtod_l+0x892>
 801501c:	0d12      	lsrs	r2, r2, #20
 801501e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015022:	fa01 f303 	lsl.w	r3, r1, r3
 8015026:	4298      	cmp	r0, r3
 8015028:	d142      	bne.n	80150b0 <_strtod_l+0x8f8>
 801502a:	4ba7      	ldr	r3, [pc, #668]	; (80152c8 <_strtod_l+0xb10>)
 801502c:	429d      	cmp	r5, r3
 801502e:	d102      	bne.n	8015036 <_strtod_l+0x87e>
 8015030:	3001      	adds	r0, #1
 8015032:	f43f addf 	beq.w	8014bf4 <_strtod_l+0x43c>
 8015036:	4ba3      	ldr	r3, [pc, #652]	; (80152c4 <_strtod_l+0xb0c>)
 8015038:	402b      	ands	r3, r5
 801503a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801503e:	f04f 0a00 	mov.w	sl, #0
 8015042:	e7a0      	b.n	8014f86 <_strtod_l+0x7ce>
 8015044:	f04f 33ff 	mov.w	r3, #4294967295
 8015048:	e7ed      	b.n	8015026 <_strtod_l+0x86e>
 801504a:	460b      	mov	r3, r1
 801504c:	e7eb      	b.n	8015026 <_strtod_l+0x86e>
 801504e:	bb7b      	cbnz	r3, 80150b0 <_strtod_l+0x8f8>
 8015050:	f1ba 0f00 	cmp.w	sl, #0
 8015054:	d12c      	bne.n	80150b0 <_strtod_l+0x8f8>
 8015056:	9904      	ldr	r1, [sp, #16]
 8015058:	4a9a      	ldr	r2, [pc, #616]	; (80152c4 <_strtod_l+0xb0c>)
 801505a:	465b      	mov	r3, fp
 801505c:	b1f1      	cbz	r1, 801509c <_strtod_l+0x8e4>
 801505e:	ea02 010b 	and.w	r1, r2, fp
 8015062:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015066:	dc19      	bgt.n	801509c <_strtod_l+0x8e4>
 8015068:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801506c:	f77f ae5b 	ble.w	8014d26 <_strtod_l+0x56e>
 8015070:	4a96      	ldr	r2, [pc, #600]	; (80152cc <_strtod_l+0xb14>)
 8015072:	2300      	movs	r3, #0
 8015074:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015078:	4650      	mov	r0, sl
 801507a:	4659      	mov	r1, fp
 801507c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015080:	f7eb fad2 	bl	8000628 <__aeabi_dmul>
 8015084:	4682      	mov	sl, r0
 8015086:	468b      	mov	fp, r1
 8015088:	2900      	cmp	r1, #0
 801508a:	f47f adbe 	bne.w	8014c0a <_strtod_l+0x452>
 801508e:	2800      	cmp	r0, #0
 8015090:	f47f adbb 	bne.w	8014c0a <_strtod_l+0x452>
 8015094:	2322      	movs	r3, #34	; 0x22
 8015096:	f8c9 3000 	str.w	r3, [r9]
 801509a:	e5b6      	b.n	8014c0a <_strtod_l+0x452>
 801509c:	4013      	ands	r3, r2
 801509e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80150a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80150a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80150aa:	f04f 3aff 	mov.w	sl, #4294967295
 80150ae:	e76a      	b.n	8014f86 <_strtod_l+0x7ce>
 80150b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b2:	b193      	cbz	r3, 80150da <_strtod_l+0x922>
 80150b4:	422b      	tst	r3, r5
 80150b6:	f43f af66 	beq.w	8014f86 <_strtod_l+0x7ce>
 80150ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150bc:	9a04      	ldr	r2, [sp, #16]
 80150be:	4650      	mov	r0, sl
 80150c0:	4659      	mov	r1, fp
 80150c2:	b173      	cbz	r3, 80150e2 <_strtod_l+0x92a>
 80150c4:	f7ff fb5c 	bl	8014780 <sulp>
 80150c8:	4602      	mov	r2, r0
 80150ca:	460b      	mov	r3, r1
 80150cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80150d0:	f7eb f8f4 	bl	80002bc <__adddf3>
 80150d4:	4682      	mov	sl, r0
 80150d6:	468b      	mov	fp, r1
 80150d8:	e755      	b.n	8014f86 <_strtod_l+0x7ce>
 80150da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150dc:	ea13 0f0a 	tst.w	r3, sl
 80150e0:	e7e9      	b.n	80150b6 <_strtod_l+0x8fe>
 80150e2:	f7ff fb4d 	bl	8014780 <sulp>
 80150e6:	4602      	mov	r2, r0
 80150e8:	460b      	mov	r3, r1
 80150ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80150ee:	f7eb f8e3 	bl	80002b8 <__aeabi_dsub>
 80150f2:	2200      	movs	r2, #0
 80150f4:	2300      	movs	r3, #0
 80150f6:	4682      	mov	sl, r0
 80150f8:	468b      	mov	fp, r1
 80150fa:	f7eb fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80150fe:	2800      	cmp	r0, #0
 8015100:	f47f ae11 	bne.w	8014d26 <_strtod_l+0x56e>
 8015104:	e73f      	b.n	8014f86 <_strtod_l+0x7ce>
 8015106:	4641      	mov	r1, r8
 8015108:	4620      	mov	r0, r4
 801510a:	f001 ff40 	bl	8016f8e <__ratio>
 801510e:	ec57 6b10 	vmov	r6, r7, d0
 8015112:	2200      	movs	r2, #0
 8015114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015118:	ee10 0a10 	vmov	r0, s0
 801511c:	4639      	mov	r1, r7
 801511e:	f7eb fcff 	bl	8000b20 <__aeabi_dcmple>
 8015122:	2800      	cmp	r0, #0
 8015124:	d077      	beq.n	8015216 <_strtod_l+0xa5e>
 8015126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015128:	2b00      	cmp	r3, #0
 801512a:	d04a      	beq.n	80151c2 <_strtod_l+0xa0a>
 801512c:	4b68      	ldr	r3, [pc, #416]	; (80152d0 <_strtod_l+0xb18>)
 801512e:	2200      	movs	r2, #0
 8015130:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015134:	4f66      	ldr	r7, [pc, #408]	; (80152d0 <_strtod_l+0xb18>)
 8015136:	2600      	movs	r6, #0
 8015138:	4b62      	ldr	r3, [pc, #392]	; (80152c4 <_strtod_l+0xb0c>)
 801513a:	402b      	ands	r3, r5
 801513c:	930f      	str	r3, [sp, #60]	; 0x3c
 801513e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015140:	4b64      	ldr	r3, [pc, #400]	; (80152d4 <_strtod_l+0xb1c>)
 8015142:	429a      	cmp	r2, r3
 8015144:	f040 80ce 	bne.w	80152e4 <_strtod_l+0xb2c>
 8015148:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801514c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015150:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015154:	ec4b ab10 	vmov	d0, sl, fp
 8015158:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801515c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015160:	f001 fe50 	bl	8016e04 <__ulp>
 8015164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015168:	ec53 2b10 	vmov	r2, r3, d0
 801516c:	f7eb fa5c 	bl	8000628 <__aeabi_dmul>
 8015170:	4652      	mov	r2, sl
 8015172:	465b      	mov	r3, fp
 8015174:	f7eb f8a2 	bl	80002bc <__adddf3>
 8015178:	460b      	mov	r3, r1
 801517a:	4952      	ldr	r1, [pc, #328]	; (80152c4 <_strtod_l+0xb0c>)
 801517c:	4a56      	ldr	r2, [pc, #344]	; (80152d8 <_strtod_l+0xb20>)
 801517e:	4019      	ands	r1, r3
 8015180:	4291      	cmp	r1, r2
 8015182:	4682      	mov	sl, r0
 8015184:	d95b      	bls.n	801523e <_strtod_l+0xa86>
 8015186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015188:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801518c:	4293      	cmp	r3, r2
 801518e:	d103      	bne.n	8015198 <_strtod_l+0x9e0>
 8015190:	9b08      	ldr	r3, [sp, #32]
 8015192:	3301      	adds	r3, #1
 8015194:	f43f ad2e 	beq.w	8014bf4 <_strtod_l+0x43c>
 8015198:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80152c8 <_strtod_l+0xb10>
 801519c:	f04f 3aff 	mov.w	sl, #4294967295
 80151a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80151a2:	4648      	mov	r0, r9
 80151a4:	f001 fb96 	bl	80168d4 <_Bfree>
 80151a8:	9905      	ldr	r1, [sp, #20]
 80151aa:	4648      	mov	r0, r9
 80151ac:	f001 fb92 	bl	80168d4 <_Bfree>
 80151b0:	4641      	mov	r1, r8
 80151b2:	4648      	mov	r0, r9
 80151b4:	f001 fb8e 	bl	80168d4 <_Bfree>
 80151b8:	4621      	mov	r1, r4
 80151ba:	4648      	mov	r0, r9
 80151bc:	f001 fb8a 	bl	80168d4 <_Bfree>
 80151c0:	e619      	b.n	8014df6 <_strtod_l+0x63e>
 80151c2:	f1ba 0f00 	cmp.w	sl, #0
 80151c6:	d11a      	bne.n	80151fe <_strtod_l+0xa46>
 80151c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80151cc:	b9eb      	cbnz	r3, 801520a <_strtod_l+0xa52>
 80151ce:	2200      	movs	r2, #0
 80151d0:	4b3f      	ldr	r3, [pc, #252]	; (80152d0 <_strtod_l+0xb18>)
 80151d2:	4630      	mov	r0, r6
 80151d4:	4639      	mov	r1, r7
 80151d6:	f7eb fc99 	bl	8000b0c <__aeabi_dcmplt>
 80151da:	b9c8      	cbnz	r0, 8015210 <_strtod_l+0xa58>
 80151dc:	4630      	mov	r0, r6
 80151de:	4639      	mov	r1, r7
 80151e0:	2200      	movs	r2, #0
 80151e2:	4b3e      	ldr	r3, [pc, #248]	; (80152dc <_strtod_l+0xb24>)
 80151e4:	f7eb fa20 	bl	8000628 <__aeabi_dmul>
 80151e8:	4606      	mov	r6, r0
 80151ea:	460f      	mov	r7, r1
 80151ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80151f0:	9618      	str	r6, [sp, #96]	; 0x60
 80151f2:	9319      	str	r3, [sp, #100]	; 0x64
 80151f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80151f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80151fc:	e79c      	b.n	8015138 <_strtod_l+0x980>
 80151fe:	f1ba 0f01 	cmp.w	sl, #1
 8015202:	d102      	bne.n	801520a <_strtod_l+0xa52>
 8015204:	2d00      	cmp	r5, #0
 8015206:	f43f ad8e 	beq.w	8014d26 <_strtod_l+0x56e>
 801520a:	2200      	movs	r2, #0
 801520c:	4b34      	ldr	r3, [pc, #208]	; (80152e0 <_strtod_l+0xb28>)
 801520e:	e78f      	b.n	8015130 <_strtod_l+0x978>
 8015210:	2600      	movs	r6, #0
 8015212:	4f32      	ldr	r7, [pc, #200]	; (80152dc <_strtod_l+0xb24>)
 8015214:	e7ea      	b.n	80151ec <_strtod_l+0xa34>
 8015216:	4b31      	ldr	r3, [pc, #196]	; (80152dc <_strtod_l+0xb24>)
 8015218:	4630      	mov	r0, r6
 801521a:	4639      	mov	r1, r7
 801521c:	2200      	movs	r2, #0
 801521e:	f7eb fa03 	bl	8000628 <__aeabi_dmul>
 8015222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015224:	4606      	mov	r6, r0
 8015226:	460f      	mov	r7, r1
 8015228:	b933      	cbnz	r3, 8015238 <_strtod_l+0xa80>
 801522a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801522e:	9010      	str	r0, [sp, #64]	; 0x40
 8015230:	9311      	str	r3, [sp, #68]	; 0x44
 8015232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015236:	e7df      	b.n	80151f8 <_strtod_l+0xa40>
 8015238:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801523c:	e7f9      	b.n	8015232 <_strtod_l+0xa7a>
 801523e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015242:	9b04      	ldr	r3, [sp, #16]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1ab      	bne.n	80151a0 <_strtod_l+0x9e8>
 8015248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801524c:	0d1b      	lsrs	r3, r3, #20
 801524e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015250:	051b      	lsls	r3, r3, #20
 8015252:	429a      	cmp	r2, r3
 8015254:	465d      	mov	r5, fp
 8015256:	d1a3      	bne.n	80151a0 <_strtod_l+0x9e8>
 8015258:	4639      	mov	r1, r7
 801525a:	4630      	mov	r0, r6
 801525c:	f7eb fc94 	bl	8000b88 <__aeabi_d2iz>
 8015260:	f7eb f978 	bl	8000554 <__aeabi_i2d>
 8015264:	460b      	mov	r3, r1
 8015266:	4602      	mov	r2, r0
 8015268:	4639      	mov	r1, r7
 801526a:	4630      	mov	r0, r6
 801526c:	f7eb f824 	bl	80002b8 <__aeabi_dsub>
 8015270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015272:	4606      	mov	r6, r0
 8015274:	460f      	mov	r7, r1
 8015276:	b933      	cbnz	r3, 8015286 <_strtod_l+0xace>
 8015278:	f1ba 0f00 	cmp.w	sl, #0
 801527c:	d103      	bne.n	8015286 <_strtod_l+0xace>
 801527e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015282:	2d00      	cmp	r5, #0
 8015284:	d06d      	beq.n	8015362 <_strtod_l+0xbaa>
 8015286:	a30a      	add	r3, pc, #40	; (adr r3, 80152b0 <_strtod_l+0xaf8>)
 8015288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528c:	4630      	mov	r0, r6
 801528e:	4639      	mov	r1, r7
 8015290:	f7eb fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8015294:	2800      	cmp	r0, #0
 8015296:	f47f acb8 	bne.w	8014c0a <_strtod_l+0x452>
 801529a:	a307      	add	r3, pc, #28	; (adr r3, 80152b8 <_strtod_l+0xb00>)
 801529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a0:	4630      	mov	r0, r6
 80152a2:	4639      	mov	r1, r7
 80152a4:	f7eb fc50 	bl	8000b48 <__aeabi_dcmpgt>
 80152a8:	2800      	cmp	r0, #0
 80152aa:	f43f af79 	beq.w	80151a0 <_strtod_l+0x9e8>
 80152ae:	e4ac      	b.n	8014c0a <_strtod_l+0x452>
 80152b0:	94a03595 	.word	0x94a03595
 80152b4:	3fdfffff 	.word	0x3fdfffff
 80152b8:	35afe535 	.word	0x35afe535
 80152bc:	3fe00000 	.word	0x3fe00000
 80152c0:	000fffff 	.word	0x000fffff
 80152c4:	7ff00000 	.word	0x7ff00000
 80152c8:	7fefffff 	.word	0x7fefffff
 80152cc:	39500000 	.word	0x39500000
 80152d0:	3ff00000 	.word	0x3ff00000
 80152d4:	7fe00000 	.word	0x7fe00000
 80152d8:	7c9fffff 	.word	0x7c9fffff
 80152dc:	3fe00000 	.word	0x3fe00000
 80152e0:	bff00000 	.word	0xbff00000
 80152e4:	9b04      	ldr	r3, [sp, #16]
 80152e6:	b333      	cbz	r3, 8015336 <_strtod_l+0xb7e>
 80152e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80152ee:	d822      	bhi.n	8015336 <_strtod_l+0xb7e>
 80152f0:	a327      	add	r3, pc, #156	; (adr r3, 8015390 <_strtod_l+0xbd8>)
 80152f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f6:	4630      	mov	r0, r6
 80152f8:	4639      	mov	r1, r7
 80152fa:	f7eb fc11 	bl	8000b20 <__aeabi_dcmple>
 80152fe:	b1a0      	cbz	r0, 801532a <_strtod_l+0xb72>
 8015300:	4639      	mov	r1, r7
 8015302:	4630      	mov	r0, r6
 8015304:	f7eb fc68 	bl	8000bd8 <__aeabi_d2uiz>
 8015308:	2800      	cmp	r0, #0
 801530a:	bf08      	it	eq
 801530c:	2001      	moveq	r0, #1
 801530e:	f7eb f911 	bl	8000534 <__aeabi_ui2d>
 8015312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015314:	4606      	mov	r6, r0
 8015316:	460f      	mov	r7, r1
 8015318:	bb03      	cbnz	r3, 801535c <_strtod_l+0xba4>
 801531a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801531e:	9012      	str	r0, [sp, #72]	; 0x48
 8015320:	9313      	str	r3, [sp, #76]	; 0x4c
 8015322:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015326:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801532a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801532c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801532e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015332:	1a9b      	subs	r3, r3, r2
 8015334:	930b      	str	r3, [sp, #44]	; 0x2c
 8015336:	ed9d 0b08 	vldr	d0, [sp, #32]
 801533a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801533e:	f001 fd61 	bl	8016e04 <__ulp>
 8015342:	4650      	mov	r0, sl
 8015344:	ec53 2b10 	vmov	r2, r3, d0
 8015348:	4659      	mov	r1, fp
 801534a:	f7eb f96d 	bl	8000628 <__aeabi_dmul>
 801534e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015352:	f7ea ffb3 	bl	80002bc <__adddf3>
 8015356:	4682      	mov	sl, r0
 8015358:	468b      	mov	fp, r1
 801535a:	e772      	b.n	8015242 <_strtod_l+0xa8a>
 801535c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015360:	e7df      	b.n	8015322 <_strtod_l+0xb6a>
 8015362:	a30d      	add	r3, pc, #52	; (adr r3, 8015398 <_strtod_l+0xbe0>)
 8015364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015368:	f7eb fbd0 	bl	8000b0c <__aeabi_dcmplt>
 801536c:	e79c      	b.n	80152a8 <_strtod_l+0xaf0>
 801536e:	2300      	movs	r3, #0
 8015370:	930d      	str	r3, [sp, #52]	; 0x34
 8015372:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015376:	6013      	str	r3, [r2, #0]
 8015378:	f7ff ba61 	b.w	801483e <_strtod_l+0x86>
 801537c:	2b65      	cmp	r3, #101	; 0x65
 801537e:	f04f 0200 	mov.w	r2, #0
 8015382:	f43f ab4e 	beq.w	8014a22 <_strtod_l+0x26a>
 8015386:	2101      	movs	r1, #1
 8015388:	4614      	mov	r4, r2
 801538a:	9104      	str	r1, [sp, #16]
 801538c:	f7ff bacb 	b.w	8014926 <_strtod_l+0x16e>
 8015390:	ffc00000 	.word	0xffc00000
 8015394:	41dfffff 	.word	0x41dfffff
 8015398:	94a03595 	.word	0x94a03595
 801539c:	3fcfffff 	.word	0x3fcfffff

080153a0 <_strtod_r>:
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <_strtod_r+0x18>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	b410      	push	{r4}
 80153a6:	6a1b      	ldr	r3, [r3, #32]
 80153a8:	4c04      	ldr	r4, [pc, #16]	; (80153bc <_strtod_r+0x1c>)
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	bf08      	it	eq
 80153ae:	4623      	moveq	r3, r4
 80153b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153b4:	f7ff ba00 	b.w	80147b8 <_strtod_l>
 80153b8:	2000000c 	.word	0x2000000c
 80153bc:	20000070 	.word	0x20000070

080153c0 <_strtol_l.isra.0>:
 80153c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153c4:	4680      	mov	r8, r0
 80153c6:	4689      	mov	r9, r1
 80153c8:	4692      	mov	sl, r2
 80153ca:	461e      	mov	r6, r3
 80153cc:	460f      	mov	r7, r1
 80153ce:	463d      	mov	r5, r7
 80153d0:	9808      	ldr	r0, [sp, #32]
 80153d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153d6:	f001 fa0d 	bl	80167f4 <__locale_ctype_ptr_l>
 80153da:	4420      	add	r0, r4
 80153dc:	7843      	ldrb	r3, [r0, #1]
 80153de:	f013 0308 	ands.w	r3, r3, #8
 80153e2:	d132      	bne.n	801544a <_strtol_l.isra.0+0x8a>
 80153e4:	2c2d      	cmp	r4, #45	; 0x2d
 80153e6:	d132      	bne.n	801544e <_strtol_l.isra.0+0x8e>
 80153e8:	787c      	ldrb	r4, [r7, #1]
 80153ea:	1cbd      	adds	r5, r7, #2
 80153ec:	2201      	movs	r2, #1
 80153ee:	2e00      	cmp	r6, #0
 80153f0:	d05d      	beq.n	80154ae <_strtol_l.isra.0+0xee>
 80153f2:	2e10      	cmp	r6, #16
 80153f4:	d109      	bne.n	801540a <_strtol_l.isra.0+0x4a>
 80153f6:	2c30      	cmp	r4, #48	; 0x30
 80153f8:	d107      	bne.n	801540a <_strtol_l.isra.0+0x4a>
 80153fa:	782b      	ldrb	r3, [r5, #0]
 80153fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015400:	2b58      	cmp	r3, #88	; 0x58
 8015402:	d14f      	bne.n	80154a4 <_strtol_l.isra.0+0xe4>
 8015404:	786c      	ldrb	r4, [r5, #1]
 8015406:	2610      	movs	r6, #16
 8015408:	3502      	adds	r5, #2
 801540a:	2a00      	cmp	r2, #0
 801540c:	bf14      	ite	ne
 801540e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015412:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015416:	2700      	movs	r7, #0
 8015418:	fbb1 fcf6 	udiv	ip, r1, r6
 801541c:	4638      	mov	r0, r7
 801541e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015422:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015426:	2b09      	cmp	r3, #9
 8015428:	d817      	bhi.n	801545a <_strtol_l.isra.0+0x9a>
 801542a:	461c      	mov	r4, r3
 801542c:	42a6      	cmp	r6, r4
 801542e:	dd23      	ble.n	8015478 <_strtol_l.isra.0+0xb8>
 8015430:	1c7b      	adds	r3, r7, #1
 8015432:	d007      	beq.n	8015444 <_strtol_l.isra.0+0x84>
 8015434:	4584      	cmp	ip, r0
 8015436:	d31c      	bcc.n	8015472 <_strtol_l.isra.0+0xb2>
 8015438:	d101      	bne.n	801543e <_strtol_l.isra.0+0x7e>
 801543a:	45a6      	cmp	lr, r4
 801543c:	db19      	blt.n	8015472 <_strtol_l.isra.0+0xb2>
 801543e:	fb00 4006 	mla	r0, r0, r6, r4
 8015442:	2701      	movs	r7, #1
 8015444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015448:	e7eb      	b.n	8015422 <_strtol_l.isra.0+0x62>
 801544a:	462f      	mov	r7, r5
 801544c:	e7bf      	b.n	80153ce <_strtol_l.isra.0+0xe>
 801544e:	2c2b      	cmp	r4, #43	; 0x2b
 8015450:	bf04      	itt	eq
 8015452:	1cbd      	addeq	r5, r7, #2
 8015454:	787c      	ldrbeq	r4, [r7, #1]
 8015456:	461a      	mov	r2, r3
 8015458:	e7c9      	b.n	80153ee <_strtol_l.isra.0+0x2e>
 801545a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801545e:	2b19      	cmp	r3, #25
 8015460:	d801      	bhi.n	8015466 <_strtol_l.isra.0+0xa6>
 8015462:	3c37      	subs	r4, #55	; 0x37
 8015464:	e7e2      	b.n	801542c <_strtol_l.isra.0+0x6c>
 8015466:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801546a:	2b19      	cmp	r3, #25
 801546c:	d804      	bhi.n	8015478 <_strtol_l.isra.0+0xb8>
 801546e:	3c57      	subs	r4, #87	; 0x57
 8015470:	e7dc      	b.n	801542c <_strtol_l.isra.0+0x6c>
 8015472:	f04f 37ff 	mov.w	r7, #4294967295
 8015476:	e7e5      	b.n	8015444 <_strtol_l.isra.0+0x84>
 8015478:	1c7b      	adds	r3, r7, #1
 801547a:	d108      	bne.n	801548e <_strtol_l.isra.0+0xce>
 801547c:	2322      	movs	r3, #34	; 0x22
 801547e:	f8c8 3000 	str.w	r3, [r8]
 8015482:	4608      	mov	r0, r1
 8015484:	f1ba 0f00 	cmp.w	sl, #0
 8015488:	d107      	bne.n	801549a <_strtol_l.isra.0+0xda>
 801548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801548e:	b102      	cbz	r2, 8015492 <_strtol_l.isra.0+0xd2>
 8015490:	4240      	negs	r0, r0
 8015492:	f1ba 0f00 	cmp.w	sl, #0
 8015496:	d0f8      	beq.n	801548a <_strtol_l.isra.0+0xca>
 8015498:	b10f      	cbz	r7, 801549e <_strtol_l.isra.0+0xde>
 801549a:	f105 39ff 	add.w	r9, r5, #4294967295
 801549e:	f8ca 9000 	str.w	r9, [sl]
 80154a2:	e7f2      	b.n	801548a <_strtol_l.isra.0+0xca>
 80154a4:	2430      	movs	r4, #48	; 0x30
 80154a6:	2e00      	cmp	r6, #0
 80154a8:	d1af      	bne.n	801540a <_strtol_l.isra.0+0x4a>
 80154aa:	2608      	movs	r6, #8
 80154ac:	e7ad      	b.n	801540a <_strtol_l.isra.0+0x4a>
 80154ae:	2c30      	cmp	r4, #48	; 0x30
 80154b0:	d0a3      	beq.n	80153fa <_strtol_l.isra.0+0x3a>
 80154b2:	260a      	movs	r6, #10
 80154b4:	e7a9      	b.n	801540a <_strtol_l.isra.0+0x4a>
	...

080154b8 <_strtol_r>:
 80154b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154ba:	4c06      	ldr	r4, [pc, #24]	; (80154d4 <_strtol_r+0x1c>)
 80154bc:	4d06      	ldr	r5, [pc, #24]	; (80154d8 <_strtol_r+0x20>)
 80154be:	6824      	ldr	r4, [r4, #0]
 80154c0:	6a24      	ldr	r4, [r4, #32]
 80154c2:	2c00      	cmp	r4, #0
 80154c4:	bf08      	it	eq
 80154c6:	462c      	moveq	r4, r5
 80154c8:	9400      	str	r4, [sp, #0]
 80154ca:	f7ff ff79 	bl	80153c0 <_strtol_l.isra.0>
 80154ce:	b003      	add	sp, #12
 80154d0:	bd30      	pop	{r4, r5, pc}
 80154d2:	bf00      	nop
 80154d4:	2000000c 	.word	0x2000000c
 80154d8:	20000070 	.word	0x20000070

080154dc <_vsiprintf_r>:
 80154dc:	b500      	push	{lr}
 80154de:	b09b      	sub	sp, #108	; 0x6c
 80154e0:	9100      	str	r1, [sp, #0]
 80154e2:	9104      	str	r1, [sp, #16]
 80154e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80154e8:	9105      	str	r1, [sp, #20]
 80154ea:	9102      	str	r1, [sp, #8]
 80154ec:	4905      	ldr	r1, [pc, #20]	; (8015504 <_vsiprintf_r+0x28>)
 80154ee:	9103      	str	r1, [sp, #12]
 80154f0:	4669      	mov	r1, sp
 80154f2:	f001 fecb 	bl	801728c <_svfiprintf_r>
 80154f6:	9b00      	ldr	r3, [sp, #0]
 80154f8:	2200      	movs	r2, #0
 80154fa:	701a      	strb	r2, [r3, #0]
 80154fc:	b01b      	add	sp, #108	; 0x6c
 80154fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015502:	bf00      	nop
 8015504:	ffff0208 	.word	0xffff0208

08015508 <vsiprintf>:
 8015508:	4613      	mov	r3, r2
 801550a:	460a      	mov	r2, r1
 801550c:	4601      	mov	r1, r0
 801550e:	4802      	ldr	r0, [pc, #8]	; (8015518 <vsiprintf+0x10>)
 8015510:	6800      	ldr	r0, [r0, #0]
 8015512:	f7ff bfe3 	b.w	80154dc <_vsiprintf_r>
 8015516:	bf00      	nop
 8015518:	2000000c 	.word	0x2000000c

0801551c <quorem>:
 801551c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015520:	6903      	ldr	r3, [r0, #16]
 8015522:	690c      	ldr	r4, [r1, #16]
 8015524:	42a3      	cmp	r3, r4
 8015526:	4680      	mov	r8, r0
 8015528:	f2c0 8082 	blt.w	8015630 <quorem+0x114>
 801552c:	3c01      	subs	r4, #1
 801552e:	f101 0714 	add.w	r7, r1, #20
 8015532:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015536:	f100 0614 	add.w	r6, r0, #20
 801553a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801553e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015542:	eb06 030c 	add.w	r3, r6, ip
 8015546:	3501      	adds	r5, #1
 8015548:	eb07 090c 	add.w	r9, r7, ip
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015552:	b395      	cbz	r5, 80155ba <quorem+0x9e>
 8015554:	f04f 0a00 	mov.w	sl, #0
 8015558:	4638      	mov	r0, r7
 801555a:	46b6      	mov	lr, r6
 801555c:	46d3      	mov	fp, sl
 801555e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015562:	b293      	uxth	r3, r2
 8015564:	fb05 a303 	mla	r3, r5, r3, sl
 8015568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801556c:	b29b      	uxth	r3, r3
 801556e:	ebab 0303 	sub.w	r3, fp, r3
 8015572:	0c12      	lsrs	r2, r2, #16
 8015574:	f8de b000 	ldr.w	fp, [lr]
 8015578:	fb05 a202 	mla	r2, r5, r2, sl
 801557c:	fa13 f38b 	uxtah	r3, r3, fp
 8015580:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015584:	fa1f fb82 	uxth.w	fp, r2
 8015588:	f8de 2000 	ldr.w	r2, [lr]
 801558c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015594:	b29b      	uxth	r3, r3
 8015596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801559a:	4581      	cmp	r9, r0
 801559c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80155a0:	f84e 3b04 	str.w	r3, [lr], #4
 80155a4:	d2db      	bcs.n	801555e <quorem+0x42>
 80155a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80155aa:	b933      	cbnz	r3, 80155ba <quorem+0x9e>
 80155ac:	9b01      	ldr	r3, [sp, #4]
 80155ae:	3b04      	subs	r3, #4
 80155b0:	429e      	cmp	r6, r3
 80155b2:	461a      	mov	r2, r3
 80155b4:	d330      	bcc.n	8015618 <quorem+0xfc>
 80155b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80155ba:	4640      	mov	r0, r8
 80155bc:	f001 fbaa 	bl	8016d14 <__mcmp>
 80155c0:	2800      	cmp	r0, #0
 80155c2:	db25      	blt.n	8015610 <quorem+0xf4>
 80155c4:	3501      	adds	r5, #1
 80155c6:	4630      	mov	r0, r6
 80155c8:	f04f 0c00 	mov.w	ip, #0
 80155cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80155d0:	f8d0 e000 	ldr.w	lr, [r0]
 80155d4:	b293      	uxth	r3, r2
 80155d6:	ebac 0303 	sub.w	r3, ip, r3
 80155da:	0c12      	lsrs	r2, r2, #16
 80155dc:	fa13 f38e 	uxtah	r3, r3, lr
 80155e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80155e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155ee:	45b9      	cmp	r9, r7
 80155f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80155f4:	f840 3b04 	str.w	r3, [r0], #4
 80155f8:	d2e8      	bcs.n	80155cc <quorem+0xb0>
 80155fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80155fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015602:	b92a      	cbnz	r2, 8015610 <quorem+0xf4>
 8015604:	3b04      	subs	r3, #4
 8015606:	429e      	cmp	r6, r3
 8015608:	461a      	mov	r2, r3
 801560a:	d30b      	bcc.n	8015624 <quorem+0x108>
 801560c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015610:	4628      	mov	r0, r5
 8015612:	b003      	add	sp, #12
 8015614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015618:	6812      	ldr	r2, [r2, #0]
 801561a:	3b04      	subs	r3, #4
 801561c:	2a00      	cmp	r2, #0
 801561e:	d1ca      	bne.n	80155b6 <quorem+0x9a>
 8015620:	3c01      	subs	r4, #1
 8015622:	e7c5      	b.n	80155b0 <quorem+0x94>
 8015624:	6812      	ldr	r2, [r2, #0]
 8015626:	3b04      	subs	r3, #4
 8015628:	2a00      	cmp	r2, #0
 801562a:	d1ef      	bne.n	801560c <quorem+0xf0>
 801562c:	3c01      	subs	r4, #1
 801562e:	e7ea      	b.n	8015606 <quorem+0xea>
 8015630:	2000      	movs	r0, #0
 8015632:	e7ee      	b.n	8015612 <quorem+0xf6>
 8015634:	0000      	movs	r0, r0
	...

08015638 <_dtoa_r>:
 8015638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563c:	ec57 6b10 	vmov	r6, r7, d0
 8015640:	b097      	sub	sp, #92	; 0x5c
 8015642:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015644:	9106      	str	r1, [sp, #24]
 8015646:	4604      	mov	r4, r0
 8015648:	920b      	str	r2, [sp, #44]	; 0x2c
 801564a:	9312      	str	r3, [sp, #72]	; 0x48
 801564c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015650:	e9cd 6700 	strd	r6, r7, [sp]
 8015654:	b93d      	cbnz	r5, 8015666 <_dtoa_r+0x2e>
 8015656:	2010      	movs	r0, #16
 8015658:	f001 f8ee 	bl	8016838 <malloc>
 801565c:	6260      	str	r0, [r4, #36]	; 0x24
 801565e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015662:	6005      	str	r5, [r0, #0]
 8015664:	60c5      	str	r5, [r0, #12]
 8015666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015668:	6819      	ldr	r1, [r3, #0]
 801566a:	b151      	cbz	r1, 8015682 <_dtoa_r+0x4a>
 801566c:	685a      	ldr	r2, [r3, #4]
 801566e:	604a      	str	r2, [r1, #4]
 8015670:	2301      	movs	r3, #1
 8015672:	4093      	lsls	r3, r2
 8015674:	608b      	str	r3, [r1, #8]
 8015676:	4620      	mov	r0, r4
 8015678:	f001 f92c 	bl	80168d4 <_Bfree>
 801567c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801567e:	2200      	movs	r2, #0
 8015680:	601a      	str	r2, [r3, #0]
 8015682:	1e3b      	subs	r3, r7, #0
 8015684:	bfbb      	ittet	lt
 8015686:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801568a:	9301      	strlt	r3, [sp, #4]
 801568c:	2300      	movge	r3, #0
 801568e:	2201      	movlt	r2, #1
 8015690:	bfac      	ite	ge
 8015692:	f8c8 3000 	strge.w	r3, [r8]
 8015696:	f8c8 2000 	strlt.w	r2, [r8]
 801569a:	4baf      	ldr	r3, [pc, #700]	; (8015958 <_dtoa_r+0x320>)
 801569c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80156a0:	ea33 0308 	bics.w	r3, r3, r8
 80156a4:	d114      	bne.n	80156d0 <_dtoa_r+0x98>
 80156a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80156ac:	6013      	str	r3, [r2, #0]
 80156ae:	9b00      	ldr	r3, [sp, #0]
 80156b0:	b923      	cbnz	r3, 80156bc <_dtoa_r+0x84>
 80156b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80156b6:	2800      	cmp	r0, #0
 80156b8:	f000 8542 	beq.w	8016140 <_dtoa_r+0xb08>
 80156bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801596c <_dtoa_r+0x334>
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f000 8544 	beq.w	8016150 <_dtoa_r+0xb18>
 80156c8:	f10b 0303 	add.w	r3, fp, #3
 80156cc:	f000 bd3e 	b.w	801614c <_dtoa_r+0xb14>
 80156d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80156d4:	2200      	movs	r2, #0
 80156d6:	2300      	movs	r3, #0
 80156d8:	4630      	mov	r0, r6
 80156da:	4639      	mov	r1, r7
 80156dc:	f7eb fa0c 	bl	8000af8 <__aeabi_dcmpeq>
 80156e0:	4681      	mov	r9, r0
 80156e2:	b168      	cbz	r0, 8015700 <_dtoa_r+0xc8>
 80156e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156e6:	2301      	movs	r3, #1
 80156e8:	6013      	str	r3, [r2, #0]
 80156ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	f000 8524 	beq.w	801613a <_dtoa_r+0xb02>
 80156f2:	4b9a      	ldr	r3, [pc, #616]	; (801595c <_dtoa_r+0x324>)
 80156f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80156f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80156fa:	6013      	str	r3, [r2, #0]
 80156fc:	f000 bd28 	b.w	8016150 <_dtoa_r+0xb18>
 8015700:	aa14      	add	r2, sp, #80	; 0x50
 8015702:	a915      	add	r1, sp, #84	; 0x54
 8015704:	ec47 6b10 	vmov	d0, r6, r7
 8015708:	4620      	mov	r0, r4
 801570a:	f001 fbf1 	bl	8016ef0 <__d2b>
 801570e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015712:	9004      	str	r0, [sp, #16]
 8015714:	2d00      	cmp	r5, #0
 8015716:	d07c      	beq.n	8015812 <_dtoa_r+0x1da>
 8015718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801571c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015720:	46b2      	mov	sl, r6
 8015722:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801572a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801572e:	2200      	movs	r2, #0
 8015730:	4b8b      	ldr	r3, [pc, #556]	; (8015960 <_dtoa_r+0x328>)
 8015732:	4650      	mov	r0, sl
 8015734:	4659      	mov	r1, fp
 8015736:	f7ea fdbf 	bl	80002b8 <__aeabi_dsub>
 801573a:	a381      	add	r3, pc, #516	; (adr r3, 8015940 <_dtoa_r+0x308>)
 801573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015740:	f7ea ff72 	bl	8000628 <__aeabi_dmul>
 8015744:	a380      	add	r3, pc, #512	; (adr r3, 8015948 <_dtoa_r+0x310>)
 8015746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574a:	f7ea fdb7 	bl	80002bc <__adddf3>
 801574e:	4606      	mov	r6, r0
 8015750:	4628      	mov	r0, r5
 8015752:	460f      	mov	r7, r1
 8015754:	f7ea fefe 	bl	8000554 <__aeabi_i2d>
 8015758:	a37d      	add	r3, pc, #500	; (adr r3, 8015950 <_dtoa_r+0x318>)
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	f7ea ff63 	bl	8000628 <__aeabi_dmul>
 8015762:	4602      	mov	r2, r0
 8015764:	460b      	mov	r3, r1
 8015766:	4630      	mov	r0, r6
 8015768:	4639      	mov	r1, r7
 801576a:	f7ea fda7 	bl	80002bc <__adddf3>
 801576e:	4606      	mov	r6, r0
 8015770:	460f      	mov	r7, r1
 8015772:	f7eb fa09 	bl	8000b88 <__aeabi_d2iz>
 8015776:	2200      	movs	r2, #0
 8015778:	4682      	mov	sl, r0
 801577a:	2300      	movs	r3, #0
 801577c:	4630      	mov	r0, r6
 801577e:	4639      	mov	r1, r7
 8015780:	f7eb f9c4 	bl	8000b0c <__aeabi_dcmplt>
 8015784:	b148      	cbz	r0, 801579a <_dtoa_r+0x162>
 8015786:	4650      	mov	r0, sl
 8015788:	f7ea fee4 	bl	8000554 <__aeabi_i2d>
 801578c:	4632      	mov	r2, r6
 801578e:	463b      	mov	r3, r7
 8015790:	f7eb f9b2 	bl	8000af8 <__aeabi_dcmpeq>
 8015794:	b908      	cbnz	r0, 801579a <_dtoa_r+0x162>
 8015796:	f10a 3aff 	add.w	sl, sl, #4294967295
 801579a:	f1ba 0f16 	cmp.w	sl, #22
 801579e:	d859      	bhi.n	8015854 <_dtoa_r+0x21c>
 80157a0:	4970      	ldr	r1, [pc, #448]	; (8015964 <_dtoa_r+0x32c>)
 80157a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80157a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ae:	f7eb f9cb 	bl	8000b48 <__aeabi_dcmpgt>
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d050      	beq.n	8015858 <_dtoa_r+0x220>
 80157b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80157ba:	2300      	movs	r3, #0
 80157bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80157be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157c0:	1b5d      	subs	r5, r3, r5
 80157c2:	f1b5 0801 	subs.w	r8, r5, #1
 80157c6:	bf49      	itett	mi
 80157c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80157cc:	2300      	movpl	r3, #0
 80157ce:	9305      	strmi	r3, [sp, #20]
 80157d0:	f04f 0800 	movmi.w	r8, #0
 80157d4:	bf58      	it	pl
 80157d6:	9305      	strpl	r3, [sp, #20]
 80157d8:	f1ba 0f00 	cmp.w	sl, #0
 80157dc:	db3e      	blt.n	801585c <_dtoa_r+0x224>
 80157de:	2300      	movs	r3, #0
 80157e0:	44d0      	add	r8, sl
 80157e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80157e6:	9307      	str	r3, [sp, #28]
 80157e8:	9b06      	ldr	r3, [sp, #24]
 80157ea:	2b09      	cmp	r3, #9
 80157ec:	f200 8090 	bhi.w	8015910 <_dtoa_r+0x2d8>
 80157f0:	2b05      	cmp	r3, #5
 80157f2:	bfc4      	itt	gt
 80157f4:	3b04      	subgt	r3, #4
 80157f6:	9306      	strgt	r3, [sp, #24]
 80157f8:	9b06      	ldr	r3, [sp, #24]
 80157fa:	f1a3 0302 	sub.w	r3, r3, #2
 80157fe:	bfcc      	ite	gt
 8015800:	2500      	movgt	r5, #0
 8015802:	2501      	movle	r5, #1
 8015804:	2b03      	cmp	r3, #3
 8015806:	f200 808f 	bhi.w	8015928 <_dtoa_r+0x2f0>
 801580a:	e8df f003 	tbb	[pc, r3]
 801580e:	7f7d      	.short	0x7f7d
 8015810:	7131      	.short	0x7131
 8015812:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015816:	441d      	add	r5, r3
 8015818:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801581c:	2820      	cmp	r0, #32
 801581e:	dd13      	ble.n	8015848 <_dtoa_r+0x210>
 8015820:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015824:	9b00      	ldr	r3, [sp, #0]
 8015826:	fa08 f800 	lsl.w	r8, r8, r0
 801582a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801582e:	fa23 f000 	lsr.w	r0, r3, r0
 8015832:	ea48 0000 	orr.w	r0, r8, r0
 8015836:	f7ea fe7d 	bl	8000534 <__aeabi_ui2d>
 801583a:	2301      	movs	r3, #1
 801583c:	4682      	mov	sl, r0
 801583e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015842:	3d01      	subs	r5, #1
 8015844:	9313      	str	r3, [sp, #76]	; 0x4c
 8015846:	e772      	b.n	801572e <_dtoa_r+0xf6>
 8015848:	9b00      	ldr	r3, [sp, #0]
 801584a:	f1c0 0020 	rsb	r0, r0, #32
 801584e:	fa03 f000 	lsl.w	r0, r3, r0
 8015852:	e7f0      	b.n	8015836 <_dtoa_r+0x1fe>
 8015854:	2301      	movs	r3, #1
 8015856:	e7b1      	b.n	80157bc <_dtoa_r+0x184>
 8015858:	900f      	str	r0, [sp, #60]	; 0x3c
 801585a:	e7b0      	b.n	80157be <_dtoa_r+0x186>
 801585c:	9b05      	ldr	r3, [sp, #20]
 801585e:	eba3 030a 	sub.w	r3, r3, sl
 8015862:	9305      	str	r3, [sp, #20]
 8015864:	f1ca 0300 	rsb	r3, sl, #0
 8015868:	9307      	str	r3, [sp, #28]
 801586a:	2300      	movs	r3, #0
 801586c:	930e      	str	r3, [sp, #56]	; 0x38
 801586e:	e7bb      	b.n	80157e8 <_dtoa_r+0x1b0>
 8015870:	2301      	movs	r3, #1
 8015872:	930a      	str	r3, [sp, #40]	; 0x28
 8015874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015876:	2b00      	cmp	r3, #0
 8015878:	dd59      	ble.n	801592e <_dtoa_r+0x2f6>
 801587a:	9302      	str	r3, [sp, #8]
 801587c:	4699      	mov	r9, r3
 801587e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015880:	2200      	movs	r2, #0
 8015882:	6072      	str	r2, [r6, #4]
 8015884:	2204      	movs	r2, #4
 8015886:	f102 0014 	add.w	r0, r2, #20
 801588a:	4298      	cmp	r0, r3
 801588c:	6871      	ldr	r1, [r6, #4]
 801588e:	d953      	bls.n	8015938 <_dtoa_r+0x300>
 8015890:	4620      	mov	r0, r4
 8015892:	f000 ffeb 	bl	801686c <_Balloc>
 8015896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015898:	6030      	str	r0, [r6, #0]
 801589a:	f1b9 0f0e 	cmp.w	r9, #14
 801589e:	f8d3 b000 	ldr.w	fp, [r3]
 80158a2:	f200 80e6 	bhi.w	8015a72 <_dtoa_r+0x43a>
 80158a6:	2d00      	cmp	r5, #0
 80158a8:	f000 80e3 	beq.w	8015a72 <_dtoa_r+0x43a>
 80158ac:	ed9d 7b00 	vldr	d7, [sp]
 80158b0:	f1ba 0f00 	cmp.w	sl, #0
 80158b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80158b8:	dd74      	ble.n	80159a4 <_dtoa_r+0x36c>
 80158ba:	4a2a      	ldr	r2, [pc, #168]	; (8015964 <_dtoa_r+0x32c>)
 80158bc:	f00a 030f 	and.w	r3, sl, #15
 80158c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80158c4:	ed93 7b00 	vldr	d7, [r3]
 80158c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80158cc:	06f0      	lsls	r0, r6, #27
 80158ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80158d2:	d565      	bpl.n	80159a0 <_dtoa_r+0x368>
 80158d4:	4b24      	ldr	r3, [pc, #144]	; (8015968 <_dtoa_r+0x330>)
 80158d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80158da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80158de:	f7ea ffcd 	bl	800087c <__aeabi_ddiv>
 80158e2:	e9cd 0100 	strd	r0, r1, [sp]
 80158e6:	f006 060f 	and.w	r6, r6, #15
 80158ea:	2503      	movs	r5, #3
 80158ec:	4f1e      	ldr	r7, [pc, #120]	; (8015968 <_dtoa_r+0x330>)
 80158ee:	e04c      	b.n	801598a <_dtoa_r+0x352>
 80158f0:	2301      	movs	r3, #1
 80158f2:	930a      	str	r3, [sp, #40]	; 0x28
 80158f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158f6:	4453      	add	r3, sl
 80158f8:	f103 0901 	add.w	r9, r3, #1
 80158fc:	9302      	str	r3, [sp, #8]
 80158fe:	464b      	mov	r3, r9
 8015900:	2b01      	cmp	r3, #1
 8015902:	bfb8      	it	lt
 8015904:	2301      	movlt	r3, #1
 8015906:	e7ba      	b.n	801587e <_dtoa_r+0x246>
 8015908:	2300      	movs	r3, #0
 801590a:	e7b2      	b.n	8015872 <_dtoa_r+0x23a>
 801590c:	2300      	movs	r3, #0
 801590e:	e7f0      	b.n	80158f2 <_dtoa_r+0x2ba>
 8015910:	2501      	movs	r5, #1
 8015912:	2300      	movs	r3, #0
 8015914:	9306      	str	r3, [sp, #24]
 8015916:	950a      	str	r5, [sp, #40]	; 0x28
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
 801591c:	9302      	str	r3, [sp, #8]
 801591e:	4699      	mov	r9, r3
 8015920:	2200      	movs	r2, #0
 8015922:	2312      	movs	r3, #18
 8015924:	920b      	str	r2, [sp, #44]	; 0x2c
 8015926:	e7aa      	b.n	801587e <_dtoa_r+0x246>
 8015928:	2301      	movs	r3, #1
 801592a:	930a      	str	r3, [sp, #40]	; 0x28
 801592c:	e7f4      	b.n	8015918 <_dtoa_r+0x2e0>
 801592e:	2301      	movs	r3, #1
 8015930:	9302      	str	r3, [sp, #8]
 8015932:	4699      	mov	r9, r3
 8015934:	461a      	mov	r2, r3
 8015936:	e7f5      	b.n	8015924 <_dtoa_r+0x2ec>
 8015938:	3101      	adds	r1, #1
 801593a:	6071      	str	r1, [r6, #4]
 801593c:	0052      	lsls	r2, r2, #1
 801593e:	e7a2      	b.n	8015886 <_dtoa_r+0x24e>
 8015940:	636f4361 	.word	0x636f4361
 8015944:	3fd287a7 	.word	0x3fd287a7
 8015948:	8b60c8b3 	.word	0x8b60c8b3
 801594c:	3fc68a28 	.word	0x3fc68a28
 8015950:	509f79fb 	.word	0x509f79fb
 8015954:	3fd34413 	.word	0x3fd34413
 8015958:	7ff00000 	.word	0x7ff00000
 801595c:	08018794 	.word	0x08018794
 8015960:	3ff80000 	.word	0x3ff80000
 8015964:	08018698 	.word	0x08018698
 8015968:	08018670 	.word	0x08018670
 801596c:	080185f9 	.word	0x080185f9
 8015970:	07f1      	lsls	r1, r6, #31
 8015972:	d508      	bpl.n	8015986 <_dtoa_r+0x34e>
 8015974:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015978:	e9d7 2300 	ldrd	r2, r3, [r7]
 801597c:	f7ea fe54 	bl	8000628 <__aeabi_dmul>
 8015980:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015984:	3501      	adds	r5, #1
 8015986:	1076      	asrs	r6, r6, #1
 8015988:	3708      	adds	r7, #8
 801598a:	2e00      	cmp	r6, #0
 801598c:	d1f0      	bne.n	8015970 <_dtoa_r+0x338>
 801598e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015996:	f7ea ff71 	bl	800087c <__aeabi_ddiv>
 801599a:	e9cd 0100 	strd	r0, r1, [sp]
 801599e:	e01a      	b.n	80159d6 <_dtoa_r+0x39e>
 80159a0:	2502      	movs	r5, #2
 80159a2:	e7a3      	b.n	80158ec <_dtoa_r+0x2b4>
 80159a4:	f000 80a0 	beq.w	8015ae8 <_dtoa_r+0x4b0>
 80159a8:	f1ca 0600 	rsb	r6, sl, #0
 80159ac:	4b9f      	ldr	r3, [pc, #636]	; (8015c2c <_dtoa_r+0x5f4>)
 80159ae:	4fa0      	ldr	r7, [pc, #640]	; (8015c30 <_dtoa_r+0x5f8>)
 80159b0:	f006 020f 	and.w	r2, r6, #15
 80159b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80159c0:	f7ea fe32 	bl	8000628 <__aeabi_dmul>
 80159c4:	e9cd 0100 	strd	r0, r1, [sp]
 80159c8:	1136      	asrs	r6, r6, #4
 80159ca:	2300      	movs	r3, #0
 80159cc:	2502      	movs	r5, #2
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d17f      	bne.n	8015ad2 <_dtoa_r+0x49a>
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d1e1      	bne.n	801599a <_dtoa_r+0x362>
 80159d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159d8:	2b00      	cmp	r3, #0
 80159da:	f000 8087 	beq.w	8015aec <_dtoa_r+0x4b4>
 80159de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80159e2:	2200      	movs	r2, #0
 80159e4:	4b93      	ldr	r3, [pc, #588]	; (8015c34 <_dtoa_r+0x5fc>)
 80159e6:	4630      	mov	r0, r6
 80159e8:	4639      	mov	r1, r7
 80159ea:	f7eb f88f 	bl	8000b0c <__aeabi_dcmplt>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d07c      	beq.n	8015aec <_dtoa_r+0x4b4>
 80159f2:	f1b9 0f00 	cmp.w	r9, #0
 80159f6:	d079      	beq.n	8015aec <_dtoa_r+0x4b4>
 80159f8:	9b02      	ldr	r3, [sp, #8]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	dd35      	ble.n	8015a6a <_dtoa_r+0x432>
 80159fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015a02:	9308      	str	r3, [sp, #32]
 8015a04:	4639      	mov	r1, r7
 8015a06:	2200      	movs	r2, #0
 8015a08:	4b8b      	ldr	r3, [pc, #556]	; (8015c38 <_dtoa_r+0x600>)
 8015a0a:	4630      	mov	r0, r6
 8015a0c:	f7ea fe0c 	bl	8000628 <__aeabi_dmul>
 8015a10:	e9cd 0100 	strd	r0, r1, [sp]
 8015a14:	9f02      	ldr	r7, [sp, #8]
 8015a16:	3501      	adds	r5, #1
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f7ea fd9b 	bl	8000554 <__aeabi_i2d>
 8015a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a22:	f7ea fe01 	bl	8000628 <__aeabi_dmul>
 8015a26:	2200      	movs	r2, #0
 8015a28:	4b84      	ldr	r3, [pc, #528]	; (8015c3c <_dtoa_r+0x604>)
 8015a2a:	f7ea fc47 	bl	80002bc <__adddf3>
 8015a2e:	4605      	mov	r5, r0
 8015a30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015a34:	2f00      	cmp	r7, #0
 8015a36:	d15d      	bne.n	8015af4 <_dtoa_r+0x4bc>
 8015a38:	2200      	movs	r2, #0
 8015a3a:	4b81      	ldr	r3, [pc, #516]	; (8015c40 <_dtoa_r+0x608>)
 8015a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a40:	f7ea fc3a 	bl	80002b8 <__aeabi_dsub>
 8015a44:	462a      	mov	r2, r5
 8015a46:	4633      	mov	r3, r6
 8015a48:	e9cd 0100 	strd	r0, r1, [sp]
 8015a4c:	f7eb f87c 	bl	8000b48 <__aeabi_dcmpgt>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	f040 8288 	bne.w	8015f66 <_dtoa_r+0x92e>
 8015a56:	462a      	mov	r2, r5
 8015a58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a60:	f7eb f854 	bl	8000b0c <__aeabi_dcmplt>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	f040 827c 	bne.w	8015f62 <_dtoa_r+0x92a>
 8015a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015a6e:	e9cd 2300 	strd	r2, r3, [sp]
 8015a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f2c0 8150 	blt.w	8015d1a <_dtoa_r+0x6e2>
 8015a7a:	f1ba 0f0e 	cmp.w	sl, #14
 8015a7e:	f300 814c 	bgt.w	8015d1a <_dtoa_r+0x6e2>
 8015a82:	4b6a      	ldr	r3, [pc, #424]	; (8015c2c <_dtoa_r+0x5f4>)
 8015a84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015a88:	ed93 7b00 	vldr	d7, [r3]
 8015a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a94:	f280 80d8 	bge.w	8015c48 <_dtoa_r+0x610>
 8015a98:	f1b9 0f00 	cmp.w	r9, #0
 8015a9c:	f300 80d4 	bgt.w	8015c48 <_dtoa_r+0x610>
 8015aa0:	f040 825e 	bne.w	8015f60 <_dtoa_r+0x928>
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	4b66      	ldr	r3, [pc, #408]	; (8015c40 <_dtoa_r+0x608>)
 8015aa8:	ec51 0b17 	vmov	r0, r1, d7
 8015aac:	f7ea fdbc 	bl	8000628 <__aeabi_dmul>
 8015ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ab4:	f7eb f83e 	bl	8000b34 <__aeabi_dcmpge>
 8015ab8:	464f      	mov	r7, r9
 8015aba:	464e      	mov	r6, r9
 8015abc:	2800      	cmp	r0, #0
 8015abe:	f040 8234 	bne.w	8015f2a <_dtoa_r+0x8f2>
 8015ac2:	2331      	movs	r3, #49	; 0x31
 8015ac4:	f10b 0501 	add.w	r5, fp, #1
 8015ac8:	f88b 3000 	strb.w	r3, [fp]
 8015acc:	f10a 0a01 	add.w	sl, sl, #1
 8015ad0:	e22f      	b.n	8015f32 <_dtoa_r+0x8fa>
 8015ad2:	07f2      	lsls	r2, r6, #31
 8015ad4:	d505      	bpl.n	8015ae2 <_dtoa_r+0x4aa>
 8015ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ada:	f7ea fda5 	bl	8000628 <__aeabi_dmul>
 8015ade:	3501      	adds	r5, #1
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	1076      	asrs	r6, r6, #1
 8015ae4:	3708      	adds	r7, #8
 8015ae6:	e772      	b.n	80159ce <_dtoa_r+0x396>
 8015ae8:	2502      	movs	r5, #2
 8015aea:	e774      	b.n	80159d6 <_dtoa_r+0x39e>
 8015aec:	f8cd a020 	str.w	sl, [sp, #32]
 8015af0:	464f      	mov	r7, r9
 8015af2:	e791      	b.n	8015a18 <_dtoa_r+0x3e0>
 8015af4:	4b4d      	ldr	r3, [pc, #308]	; (8015c2c <_dtoa_r+0x5f4>)
 8015af6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015afa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d047      	beq.n	8015b94 <_dtoa_r+0x55c>
 8015b04:	4602      	mov	r2, r0
 8015b06:	460b      	mov	r3, r1
 8015b08:	2000      	movs	r0, #0
 8015b0a:	494e      	ldr	r1, [pc, #312]	; (8015c44 <_dtoa_r+0x60c>)
 8015b0c:	f7ea feb6 	bl	800087c <__aeabi_ddiv>
 8015b10:	462a      	mov	r2, r5
 8015b12:	4633      	mov	r3, r6
 8015b14:	f7ea fbd0 	bl	80002b8 <__aeabi_dsub>
 8015b18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b1c:	465d      	mov	r5, fp
 8015b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b22:	f7eb f831 	bl	8000b88 <__aeabi_d2iz>
 8015b26:	4606      	mov	r6, r0
 8015b28:	f7ea fd14 	bl	8000554 <__aeabi_i2d>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	460b      	mov	r3, r1
 8015b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b34:	f7ea fbc0 	bl	80002b8 <__aeabi_dsub>
 8015b38:	3630      	adds	r6, #48	; 0x30
 8015b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8015b3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015b42:	e9cd 0100 	strd	r0, r1, [sp]
 8015b46:	f7ea ffe1 	bl	8000b0c <__aeabi_dcmplt>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	d163      	bne.n	8015c16 <_dtoa_r+0x5de>
 8015b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b52:	2000      	movs	r0, #0
 8015b54:	4937      	ldr	r1, [pc, #220]	; (8015c34 <_dtoa_r+0x5fc>)
 8015b56:	f7ea fbaf 	bl	80002b8 <__aeabi_dsub>
 8015b5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015b5e:	f7ea ffd5 	bl	8000b0c <__aeabi_dcmplt>
 8015b62:	2800      	cmp	r0, #0
 8015b64:	f040 80b7 	bne.w	8015cd6 <_dtoa_r+0x69e>
 8015b68:	eba5 030b 	sub.w	r3, r5, fp
 8015b6c:	429f      	cmp	r7, r3
 8015b6e:	f77f af7c 	ble.w	8015a6a <_dtoa_r+0x432>
 8015b72:	2200      	movs	r2, #0
 8015b74:	4b30      	ldr	r3, [pc, #192]	; (8015c38 <_dtoa_r+0x600>)
 8015b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015b7a:	f7ea fd55 	bl	8000628 <__aeabi_dmul>
 8015b7e:	2200      	movs	r2, #0
 8015b80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b84:	4b2c      	ldr	r3, [pc, #176]	; (8015c38 <_dtoa_r+0x600>)
 8015b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b8a:	f7ea fd4d 	bl	8000628 <__aeabi_dmul>
 8015b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8015b92:	e7c4      	b.n	8015b1e <_dtoa_r+0x4e6>
 8015b94:	462a      	mov	r2, r5
 8015b96:	4633      	mov	r3, r6
 8015b98:	f7ea fd46 	bl	8000628 <__aeabi_dmul>
 8015b9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015ba0:	eb0b 0507 	add.w	r5, fp, r7
 8015ba4:	465e      	mov	r6, fp
 8015ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015baa:	f7ea ffed 	bl	8000b88 <__aeabi_d2iz>
 8015bae:	4607      	mov	r7, r0
 8015bb0:	f7ea fcd0 	bl	8000554 <__aeabi_i2d>
 8015bb4:	3730      	adds	r7, #48	; 0x30
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	460b      	mov	r3, r1
 8015bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bbe:	f7ea fb7b 	bl	80002b8 <__aeabi_dsub>
 8015bc2:	f806 7b01 	strb.w	r7, [r6], #1
 8015bc6:	42ae      	cmp	r6, r5
 8015bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8015bcc:	f04f 0200 	mov.w	r2, #0
 8015bd0:	d126      	bne.n	8015c20 <_dtoa_r+0x5e8>
 8015bd2:	4b1c      	ldr	r3, [pc, #112]	; (8015c44 <_dtoa_r+0x60c>)
 8015bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015bd8:	f7ea fb70 	bl	80002bc <__adddf3>
 8015bdc:	4602      	mov	r2, r0
 8015bde:	460b      	mov	r3, r1
 8015be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015be4:	f7ea ffb0 	bl	8000b48 <__aeabi_dcmpgt>
 8015be8:	2800      	cmp	r0, #0
 8015bea:	d174      	bne.n	8015cd6 <_dtoa_r+0x69e>
 8015bec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	4914      	ldr	r1, [pc, #80]	; (8015c44 <_dtoa_r+0x60c>)
 8015bf4:	f7ea fb60 	bl	80002b8 <__aeabi_dsub>
 8015bf8:	4602      	mov	r2, r0
 8015bfa:	460b      	mov	r3, r1
 8015bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c00:	f7ea ff84 	bl	8000b0c <__aeabi_dcmplt>
 8015c04:	2800      	cmp	r0, #0
 8015c06:	f43f af30 	beq.w	8015a6a <_dtoa_r+0x432>
 8015c0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c0e:	2b30      	cmp	r3, #48	; 0x30
 8015c10:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c14:	d002      	beq.n	8015c1c <_dtoa_r+0x5e4>
 8015c16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015c1a:	e04a      	b.n	8015cb2 <_dtoa_r+0x67a>
 8015c1c:	4615      	mov	r5, r2
 8015c1e:	e7f4      	b.n	8015c0a <_dtoa_r+0x5d2>
 8015c20:	4b05      	ldr	r3, [pc, #20]	; (8015c38 <_dtoa_r+0x600>)
 8015c22:	f7ea fd01 	bl	8000628 <__aeabi_dmul>
 8015c26:	e9cd 0100 	strd	r0, r1, [sp]
 8015c2a:	e7bc      	b.n	8015ba6 <_dtoa_r+0x56e>
 8015c2c:	08018698 	.word	0x08018698
 8015c30:	08018670 	.word	0x08018670
 8015c34:	3ff00000 	.word	0x3ff00000
 8015c38:	40240000 	.word	0x40240000
 8015c3c:	401c0000 	.word	0x401c0000
 8015c40:	40140000 	.word	0x40140000
 8015c44:	3fe00000 	.word	0x3fe00000
 8015c48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015c4c:	465d      	mov	r5, fp
 8015c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c52:	4630      	mov	r0, r6
 8015c54:	4639      	mov	r1, r7
 8015c56:	f7ea fe11 	bl	800087c <__aeabi_ddiv>
 8015c5a:	f7ea ff95 	bl	8000b88 <__aeabi_d2iz>
 8015c5e:	4680      	mov	r8, r0
 8015c60:	f7ea fc78 	bl	8000554 <__aeabi_i2d>
 8015c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c68:	f7ea fcde 	bl	8000628 <__aeabi_dmul>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	460b      	mov	r3, r1
 8015c70:	4630      	mov	r0, r6
 8015c72:	4639      	mov	r1, r7
 8015c74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015c78:	f7ea fb1e 	bl	80002b8 <__aeabi_dsub>
 8015c7c:	f805 6b01 	strb.w	r6, [r5], #1
 8015c80:	eba5 060b 	sub.w	r6, r5, fp
 8015c84:	45b1      	cmp	r9, r6
 8015c86:	4602      	mov	r2, r0
 8015c88:	460b      	mov	r3, r1
 8015c8a:	d139      	bne.n	8015d00 <_dtoa_r+0x6c8>
 8015c8c:	f7ea fb16 	bl	80002bc <__adddf3>
 8015c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c94:	4606      	mov	r6, r0
 8015c96:	460f      	mov	r7, r1
 8015c98:	f7ea ff56 	bl	8000b48 <__aeabi_dcmpgt>
 8015c9c:	b9c8      	cbnz	r0, 8015cd2 <_dtoa_r+0x69a>
 8015c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	4639      	mov	r1, r7
 8015ca6:	f7ea ff27 	bl	8000af8 <__aeabi_dcmpeq>
 8015caa:	b110      	cbz	r0, 8015cb2 <_dtoa_r+0x67a>
 8015cac:	f018 0f01 	tst.w	r8, #1
 8015cb0:	d10f      	bne.n	8015cd2 <_dtoa_r+0x69a>
 8015cb2:	9904      	ldr	r1, [sp, #16]
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	f000 fe0d 	bl	80168d4 <_Bfree>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015cbe:	702b      	strb	r3, [r5, #0]
 8015cc0:	f10a 0301 	add.w	r3, sl, #1
 8015cc4:	6013      	str	r3, [r2, #0]
 8015cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 8241 	beq.w	8016150 <_dtoa_r+0xb18>
 8015cce:	601d      	str	r5, [r3, #0]
 8015cd0:	e23e      	b.n	8016150 <_dtoa_r+0xb18>
 8015cd2:	f8cd a020 	str.w	sl, [sp, #32]
 8015cd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015cda:	2a39      	cmp	r2, #57	; 0x39
 8015cdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8015ce0:	d108      	bne.n	8015cf4 <_dtoa_r+0x6bc>
 8015ce2:	459b      	cmp	fp, r3
 8015ce4:	d10a      	bne.n	8015cfc <_dtoa_r+0x6c4>
 8015ce6:	9b08      	ldr	r3, [sp, #32]
 8015ce8:	3301      	adds	r3, #1
 8015cea:	9308      	str	r3, [sp, #32]
 8015cec:	2330      	movs	r3, #48	; 0x30
 8015cee:	f88b 3000 	strb.w	r3, [fp]
 8015cf2:	465b      	mov	r3, fp
 8015cf4:	781a      	ldrb	r2, [r3, #0]
 8015cf6:	3201      	adds	r2, #1
 8015cf8:	701a      	strb	r2, [r3, #0]
 8015cfa:	e78c      	b.n	8015c16 <_dtoa_r+0x5de>
 8015cfc:	461d      	mov	r5, r3
 8015cfe:	e7ea      	b.n	8015cd6 <_dtoa_r+0x69e>
 8015d00:	2200      	movs	r2, #0
 8015d02:	4b9b      	ldr	r3, [pc, #620]	; (8015f70 <_dtoa_r+0x938>)
 8015d04:	f7ea fc90 	bl	8000628 <__aeabi_dmul>
 8015d08:	2200      	movs	r2, #0
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	4606      	mov	r6, r0
 8015d0e:	460f      	mov	r7, r1
 8015d10:	f7ea fef2 	bl	8000af8 <__aeabi_dcmpeq>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d09a      	beq.n	8015c4e <_dtoa_r+0x616>
 8015d18:	e7cb      	b.n	8015cb2 <_dtoa_r+0x67a>
 8015d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d1c:	2a00      	cmp	r2, #0
 8015d1e:	f000 808b 	beq.w	8015e38 <_dtoa_r+0x800>
 8015d22:	9a06      	ldr	r2, [sp, #24]
 8015d24:	2a01      	cmp	r2, #1
 8015d26:	dc6e      	bgt.n	8015e06 <_dtoa_r+0x7ce>
 8015d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d2a:	2a00      	cmp	r2, #0
 8015d2c:	d067      	beq.n	8015dfe <_dtoa_r+0x7c6>
 8015d2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015d32:	9f07      	ldr	r7, [sp, #28]
 8015d34:	9d05      	ldr	r5, [sp, #20]
 8015d36:	9a05      	ldr	r2, [sp, #20]
 8015d38:	2101      	movs	r1, #1
 8015d3a:	441a      	add	r2, r3
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	9205      	str	r2, [sp, #20]
 8015d40:	4498      	add	r8, r3
 8015d42:	f000 fea5 	bl	8016a90 <__i2b>
 8015d46:	4606      	mov	r6, r0
 8015d48:	2d00      	cmp	r5, #0
 8015d4a:	dd0c      	ble.n	8015d66 <_dtoa_r+0x72e>
 8015d4c:	f1b8 0f00 	cmp.w	r8, #0
 8015d50:	dd09      	ble.n	8015d66 <_dtoa_r+0x72e>
 8015d52:	4545      	cmp	r5, r8
 8015d54:	9a05      	ldr	r2, [sp, #20]
 8015d56:	462b      	mov	r3, r5
 8015d58:	bfa8      	it	ge
 8015d5a:	4643      	movge	r3, r8
 8015d5c:	1ad2      	subs	r2, r2, r3
 8015d5e:	9205      	str	r2, [sp, #20]
 8015d60:	1aed      	subs	r5, r5, r3
 8015d62:	eba8 0803 	sub.w	r8, r8, r3
 8015d66:	9b07      	ldr	r3, [sp, #28]
 8015d68:	b1eb      	cbz	r3, 8015da6 <_dtoa_r+0x76e>
 8015d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d067      	beq.n	8015e40 <_dtoa_r+0x808>
 8015d70:	b18f      	cbz	r7, 8015d96 <_dtoa_r+0x75e>
 8015d72:	4631      	mov	r1, r6
 8015d74:	463a      	mov	r2, r7
 8015d76:	4620      	mov	r0, r4
 8015d78:	f000 ff2a 	bl	8016bd0 <__pow5mult>
 8015d7c:	9a04      	ldr	r2, [sp, #16]
 8015d7e:	4601      	mov	r1, r0
 8015d80:	4606      	mov	r6, r0
 8015d82:	4620      	mov	r0, r4
 8015d84:	f000 fe8d 	bl	8016aa2 <__multiply>
 8015d88:	9904      	ldr	r1, [sp, #16]
 8015d8a:	9008      	str	r0, [sp, #32]
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	f000 fda1 	bl	80168d4 <_Bfree>
 8015d92:	9b08      	ldr	r3, [sp, #32]
 8015d94:	9304      	str	r3, [sp, #16]
 8015d96:	9b07      	ldr	r3, [sp, #28]
 8015d98:	1bda      	subs	r2, r3, r7
 8015d9a:	d004      	beq.n	8015da6 <_dtoa_r+0x76e>
 8015d9c:	9904      	ldr	r1, [sp, #16]
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f000 ff16 	bl	8016bd0 <__pow5mult>
 8015da4:	9004      	str	r0, [sp, #16]
 8015da6:	2101      	movs	r1, #1
 8015da8:	4620      	mov	r0, r4
 8015daa:	f000 fe71 	bl	8016a90 <__i2b>
 8015dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015db0:	4607      	mov	r7, r0
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f000 81d0 	beq.w	8016158 <_dtoa_r+0xb20>
 8015db8:	461a      	mov	r2, r3
 8015dba:	4601      	mov	r1, r0
 8015dbc:	4620      	mov	r0, r4
 8015dbe:	f000 ff07 	bl	8016bd0 <__pow5mult>
 8015dc2:	9b06      	ldr	r3, [sp, #24]
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	4607      	mov	r7, r0
 8015dc8:	dc40      	bgt.n	8015e4c <_dtoa_r+0x814>
 8015dca:	9b00      	ldr	r3, [sp, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d139      	bne.n	8015e44 <_dtoa_r+0x80c>
 8015dd0:	9b01      	ldr	r3, [sp, #4]
 8015dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d136      	bne.n	8015e48 <_dtoa_r+0x810>
 8015dda:	9b01      	ldr	r3, [sp, #4]
 8015ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015de0:	0d1b      	lsrs	r3, r3, #20
 8015de2:	051b      	lsls	r3, r3, #20
 8015de4:	b12b      	cbz	r3, 8015df2 <_dtoa_r+0x7ba>
 8015de6:	9b05      	ldr	r3, [sp, #20]
 8015de8:	3301      	adds	r3, #1
 8015dea:	9305      	str	r3, [sp, #20]
 8015dec:	f108 0801 	add.w	r8, r8, #1
 8015df0:	2301      	movs	r3, #1
 8015df2:	9307      	str	r3, [sp, #28]
 8015df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d12a      	bne.n	8015e50 <_dtoa_r+0x818>
 8015dfa:	2001      	movs	r0, #1
 8015dfc:	e030      	b.n	8015e60 <_dtoa_r+0x828>
 8015dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015e04:	e795      	b.n	8015d32 <_dtoa_r+0x6fa>
 8015e06:	9b07      	ldr	r3, [sp, #28]
 8015e08:	f109 37ff 	add.w	r7, r9, #4294967295
 8015e0c:	42bb      	cmp	r3, r7
 8015e0e:	bfbf      	itttt	lt
 8015e10:	9b07      	ldrlt	r3, [sp, #28]
 8015e12:	9707      	strlt	r7, [sp, #28]
 8015e14:	1afa      	sublt	r2, r7, r3
 8015e16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015e18:	bfbb      	ittet	lt
 8015e1a:	189b      	addlt	r3, r3, r2
 8015e1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015e1e:	1bdf      	subge	r7, r3, r7
 8015e20:	2700      	movlt	r7, #0
 8015e22:	f1b9 0f00 	cmp.w	r9, #0
 8015e26:	bfb5      	itete	lt
 8015e28:	9b05      	ldrlt	r3, [sp, #20]
 8015e2a:	9d05      	ldrge	r5, [sp, #20]
 8015e2c:	eba3 0509 	sublt.w	r5, r3, r9
 8015e30:	464b      	movge	r3, r9
 8015e32:	bfb8      	it	lt
 8015e34:	2300      	movlt	r3, #0
 8015e36:	e77e      	b.n	8015d36 <_dtoa_r+0x6fe>
 8015e38:	9f07      	ldr	r7, [sp, #28]
 8015e3a:	9d05      	ldr	r5, [sp, #20]
 8015e3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015e3e:	e783      	b.n	8015d48 <_dtoa_r+0x710>
 8015e40:	9a07      	ldr	r2, [sp, #28]
 8015e42:	e7ab      	b.n	8015d9c <_dtoa_r+0x764>
 8015e44:	2300      	movs	r3, #0
 8015e46:	e7d4      	b.n	8015df2 <_dtoa_r+0x7ba>
 8015e48:	9b00      	ldr	r3, [sp, #0]
 8015e4a:	e7d2      	b.n	8015df2 <_dtoa_r+0x7ba>
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	9307      	str	r3, [sp, #28]
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015e56:	6918      	ldr	r0, [r3, #16]
 8015e58:	f000 fdcc 	bl	80169f4 <__hi0bits>
 8015e5c:	f1c0 0020 	rsb	r0, r0, #32
 8015e60:	4440      	add	r0, r8
 8015e62:	f010 001f 	ands.w	r0, r0, #31
 8015e66:	d047      	beq.n	8015ef8 <_dtoa_r+0x8c0>
 8015e68:	f1c0 0320 	rsb	r3, r0, #32
 8015e6c:	2b04      	cmp	r3, #4
 8015e6e:	dd3b      	ble.n	8015ee8 <_dtoa_r+0x8b0>
 8015e70:	9b05      	ldr	r3, [sp, #20]
 8015e72:	f1c0 001c 	rsb	r0, r0, #28
 8015e76:	4403      	add	r3, r0
 8015e78:	9305      	str	r3, [sp, #20]
 8015e7a:	4405      	add	r5, r0
 8015e7c:	4480      	add	r8, r0
 8015e7e:	9b05      	ldr	r3, [sp, #20]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	dd05      	ble.n	8015e90 <_dtoa_r+0x858>
 8015e84:	461a      	mov	r2, r3
 8015e86:	9904      	ldr	r1, [sp, #16]
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f000 feef 	bl	8016c6c <__lshift>
 8015e8e:	9004      	str	r0, [sp, #16]
 8015e90:	f1b8 0f00 	cmp.w	r8, #0
 8015e94:	dd05      	ble.n	8015ea2 <_dtoa_r+0x86a>
 8015e96:	4639      	mov	r1, r7
 8015e98:	4642      	mov	r2, r8
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f000 fee6 	bl	8016c6c <__lshift>
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ea4:	b353      	cbz	r3, 8015efc <_dtoa_r+0x8c4>
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	9804      	ldr	r0, [sp, #16]
 8015eaa:	f000 ff33 	bl	8016d14 <__mcmp>
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	da24      	bge.n	8015efc <_dtoa_r+0x8c4>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	220a      	movs	r2, #10
 8015eb6:	9904      	ldr	r1, [sp, #16]
 8015eb8:	4620      	mov	r0, r4
 8015eba:	f000 fd22 	bl	8016902 <__multadd>
 8015ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ec0:	9004      	str	r0, [sp, #16]
 8015ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f000 814d 	beq.w	8016166 <_dtoa_r+0xb2e>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4631      	mov	r1, r6
 8015ed0:	220a      	movs	r2, #10
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f000 fd15 	bl	8016902 <__multadd>
 8015ed8:	9b02      	ldr	r3, [sp, #8]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	4606      	mov	r6, r0
 8015ede:	dc4f      	bgt.n	8015f80 <_dtoa_r+0x948>
 8015ee0:	9b06      	ldr	r3, [sp, #24]
 8015ee2:	2b02      	cmp	r3, #2
 8015ee4:	dd4c      	ble.n	8015f80 <_dtoa_r+0x948>
 8015ee6:	e011      	b.n	8015f0c <_dtoa_r+0x8d4>
 8015ee8:	d0c9      	beq.n	8015e7e <_dtoa_r+0x846>
 8015eea:	9a05      	ldr	r2, [sp, #20]
 8015eec:	331c      	adds	r3, #28
 8015eee:	441a      	add	r2, r3
 8015ef0:	9205      	str	r2, [sp, #20]
 8015ef2:	441d      	add	r5, r3
 8015ef4:	4498      	add	r8, r3
 8015ef6:	e7c2      	b.n	8015e7e <_dtoa_r+0x846>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	e7f6      	b.n	8015eea <_dtoa_r+0x8b2>
 8015efc:	f1b9 0f00 	cmp.w	r9, #0
 8015f00:	dc38      	bgt.n	8015f74 <_dtoa_r+0x93c>
 8015f02:	9b06      	ldr	r3, [sp, #24]
 8015f04:	2b02      	cmp	r3, #2
 8015f06:	dd35      	ble.n	8015f74 <_dtoa_r+0x93c>
 8015f08:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f0c:	9b02      	ldr	r3, [sp, #8]
 8015f0e:	b963      	cbnz	r3, 8015f2a <_dtoa_r+0x8f2>
 8015f10:	4639      	mov	r1, r7
 8015f12:	2205      	movs	r2, #5
 8015f14:	4620      	mov	r0, r4
 8015f16:	f000 fcf4 	bl	8016902 <__multadd>
 8015f1a:	4601      	mov	r1, r0
 8015f1c:	4607      	mov	r7, r0
 8015f1e:	9804      	ldr	r0, [sp, #16]
 8015f20:	f000 fef8 	bl	8016d14 <__mcmp>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	f73f adcc 	bgt.w	8015ac2 <_dtoa_r+0x48a>
 8015f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f2c:	465d      	mov	r5, fp
 8015f2e:	ea6f 0a03 	mvn.w	sl, r3
 8015f32:	f04f 0900 	mov.w	r9, #0
 8015f36:	4639      	mov	r1, r7
 8015f38:	4620      	mov	r0, r4
 8015f3a:	f000 fccb 	bl	80168d4 <_Bfree>
 8015f3e:	2e00      	cmp	r6, #0
 8015f40:	f43f aeb7 	beq.w	8015cb2 <_dtoa_r+0x67a>
 8015f44:	f1b9 0f00 	cmp.w	r9, #0
 8015f48:	d005      	beq.n	8015f56 <_dtoa_r+0x91e>
 8015f4a:	45b1      	cmp	r9, r6
 8015f4c:	d003      	beq.n	8015f56 <_dtoa_r+0x91e>
 8015f4e:	4649      	mov	r1, r9
 8015f50:	4620      	mov	r0, r4
 8015f52:	f000 fcbf 	bl	80168d4 <_Bfree>
 8015f56:	4631      	mov	r1, r6
 8015f58:	4620      	mov	r0, r4
 8015f5a:	f000 fcbb 	bl	80168d4 <_Bfree>
 8015f5e:	e6a8      	b.n	8015cb2 <_dtoa_r+0x67a>
 8015f60:	2700      	movs	r7, #0
 8015f62:	463e      	mov	r6, r7
 8015f64:	e7e1      	b.n	8015f2a <_dtoa_r+0x8f2>
 8015f66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015f6a:	463e      	mov	r6, r7
 8015f6c:	e5a9      	b.n	8015ac2 <_dtoa_r+0x48a>
 8015f6e:	bf00      	nop
 8015f70:	40240000 	.word	0x40240000
 8015f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f76:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f000 80fa 	beq.w	8016174 <_dtoa_r+0xb3c>
 8015f80:	2d00      	cmp	r5, #0
 8015f82:	dd05      	ble.n	8015f90 <_dtoa_r+0x958>
 8015f84:	4631      	mov	r1, r6
 8015f86:	462a      	mov	r2, r5
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f000 fe6f 	bl	8016c6c <__lshift>
 8015f8e:	4606      	mov	r6, r0
 8015f90:	9b07      	ldr	r3, [sp, #28]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d04c      	beq.n	8016030 <_dtoa_r+0x9f8>
 8015f96:	6871      	ldr	r1, [r6, #4]
 8015f98:	4620      	mov	r0, r4
 8015f9a:	f000 fc67 	bl	801686c <_Balloc>
 8015f9e:	6932      	ldr	r2, [r6, #16]
 8015fa0:	3202      	adds	r2, #2
 8015fa2:	4605      	mov	r5, r0
 8015fa4:	0092      	lsls	r2, r2, #2
 8015fa6:	f106 010c 	add.w	r1, r6, #12
 8015faa:	300c      	adds	r0, #12
 8015fac:	f7fd fd08 	bl	80139c0 <memcpy>
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f000 fe59 	bl	8016c6c <__lshift>
 8015fba:	9b00      	ldr	r3, [sp, #0]
 8015fbc:	f8cd b014 	str.w	fp, [sp, #20]
 8015fc0:	f003 0301 	and.w	r3, r3, #1
 8015fc4:	46b1      	mov	r9, r6
 8015fc6:	9307      	str	r3, [sp, #28]
 8015fc8:	4606      	mov	r6, r0
 8015fca:	4639      	mov	r1, r7
 8015fcc:	9804      	ldr	r0, [sp, #16]
 8015fce:	f7ff faa5 	bl	801551c <quorem>
 8015fd2:	4649      	mov	r1, r9
 8015fd4:	4605      	mov	r5, r0
 8015fd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015fda:	9804      	ldr	r0, [sp, #16]
 8015fdc:	f000 fe9a 	bl	8016d14 <__mcmp>
 8015fe0:	4632      	mov	r2, r6
 8015fe2:	9000      	str	r0, [sp, #0]
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f000 feae 	bl	8016d48 <__mdiff>
 8015fec:	68c3      	ldr	r3, [r0, #12]
 8015fee:	4602      	mov	r2, r0
 8015ff0:	bb03      	cbnz	r3, 8016034 <_dtoa_r+0x9fc>
 8015ff2:	4601      	mov	r1, r0
 8015ff4:	9008      	str	r0, [sp, #32]
 8015ff6:	9804      	ldr	r0, [sp, #16]
 8015ff8:	f000 fe8c 	bl	8016d14 <__mcmp>
 8015ffc:	9a08      	ldr	r2, [sp, #32]
 8015ffe:	4603      	mov	r3, r0
 8016000:	4611      	mov	r1, r2
 8016002:	4620      	mov	r0, r4
 8016004:	9308      	str	r3, [sp, #32]
 8016006:	f000 fc65 	bl	80168d4 <_Bfree>
 801600a:	9b08      	ldr	r3, [sp, #32]
 801600c:	b9a3      	cbnz	r3, 8016038 <_dtoa_r+0xa00>
 801600e:	9a06      	ldr	r2, [sp, #24]
 8016010:	b992      	cbnz	r2, 8016038 <_dtoa_r+0xa00>
 8016012:	9a07      	ldr	r2, [sp, #28]
 8016014:	b982      	cbnz	r2, 8016038 <_dtoa_r+0xa00>
 8016016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801601a:	d029      	beq.n	8016070 <_dtoa_r+0xa38>
 801601c:	9b00      	ldr	r3, [sp, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	dd01      	ble.n	8016026 <_dtoa_r+0x9ee>
 8016022:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016026:	9b05      	ldr	r3, [sp, #20]
 8016028:	1c5d      	adds	r5, r3, #1
 801602a:	f883 8000 	strb.w	r8, [r3]
 801602e:	e782      	b.n	8015f36 <_dtoa_r+0x8fe>
 8016030:	4630      	mov	r0, r6
 8016032:	e7c2      	b.n	8015fba <_dtoa_r+0x982>
 8016034:	2301      	movs	r3, #1
 8016036:	e7e3      	b.n	8016000 <_dtoa_r+0x9c8>
 8016038:	9a00      	ldr	r2, [sp, #0]
 801603a:	2a00      	cmp	r2, #0
 801603c:	db04      	blt.n	8016048 <_dtoa_r+0xa10>
 801603e:	d125      	bne.n	801608c <_dtoa_r+0xa54>
 8016040:	9a06      	ldr	r2, [sp, #24]
 8016042:	bb1a      	cbnz	r2, 801608c <_dtoa_r+0xa54>
 8016044:	9a07      	ldr	r2, [sp, #28]
 8016046:	bb0a      	cbnz	r2, 801608c <_dtoa_r+0xa54>
 8016048:	2b00      	cmp	r3, #0
 801604a:	ddec      	ble.n	8016026 <_dtoa_r+0x9ee>
 801604c:	2201      	movs	r2, #1
 801604e:	9904      	ldr	r1, [sp, #16]
 8016050:	4620      	mov	r0, r4
 8016052:	f000 fe0b 	bl	8016c6c <__lshift>
 8016056:	4639      	mov	r1, r7
 8016058:	9004      	str	r0, [sp, #16]
 801605a:	f000 fe5b 	bl	8016d14 <__mcmp>
 801605e:	2800      	cmp	r0, #0
 8016060:	dc03      	bgt.n	801606a <_dtoa_r+0xa32>
 8016062:	d1e0      	bne.n	8016026 <_dtoa_r+0x9ee>
 8016064:	f018 0f01 	tst.w	r8, #1
 8016068:	d0dd      	beq.n	8016026 <_dtoa_r+0x9ee>
 801606a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801606e:	d1d8      	bne.n	8016022 <_dtoa_r+0x9ea>
 8016070:	9b05      	ldr	r3, [sp, #20]
 8016072:	9a05      	ldr	r2, [sp, #20]
 8016074:	1c5d      	adds	r5, r3, #1
 8016076:	2339      	movs	r3, #57	; 0x39
 8016078:	7013      	strb	r3, [r2, #0]
 801607a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801607e:	2b39      	cmp	r3, #57	; 0x39
 8016080:	f105 32ff 	add.w	r2, r5, #4294967295
 8016084:	d04f      	beq.n	8016126 <_dtoa_r+0xaee>
 8016086:	3301      	adds	r3, #1
 8016088:	7013      	strb	r3, [r2, #0]
 801608a:	e754      	b.n	8015f36 <_dtoa_r+0x8fe>
 801608c:	9a05      	ldr	r2, [sp, #20]
 801608e:	2b00      	cmp	r3, #0
 8016090:	f102 0501 	add.w	r5, r2, #1
 8016094:	dd06      	ble.n	80160a4 <_dtoa_r+0xa6c>
 8016096:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801609a:	d0e9      	beq.n	8016070 <_dtoa_r+0xa38>
 801609c:	f108 0801 	add.w	r8, r8, #1
 80160a0:	9b05      	ldr	r3, [sp, #20]
 80160a2:	e7c2      	b.n	801602a <_dtoa_r+0x9f2>
 80160a4:	9a02      	ldr	r2, [sp, #8]
 80160a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80160aa:	eba5 030b 	sub.w	r3, r5, fp
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d021      	beq.n	80160f6 <_dtoa_r+0xabe>
 80160b2:	2300      	movs	r3, #0
 80160b4:	220a      	movs	r2, #10
 80160b6:	9904      	ldr	r1, [sp, #16]
 80160b8:	4620      	mov	r0, r4
 80160ba:	f000 fc22 	bl	8016902 <__multadd>
 80160be:	45b1      	cmp	r9, r6
 80160c0:	9004      	str	r0, [sp, #16]
 80160c2:	f04f 0300 	mov.w	r3, #0
 80160c6:	f04f 020a 	mov.w	r2, #10
 80160ca:	4649      	mov	r1, r9
 80160cc:	4620      	mov	r0, r4
 80160ce:	d105      	bne.n	80160dc <_dtoa_r+0xaa4>
 80160d0:	f000 fc17 	bl	8016902 <__multadd>
 80160d4:	4681      	mov	r9, r0
 80160d6:	4606      	mov	r6, r0
 80160d8:	9505      	str	r5, [sp, #20]
 80160da:	e776      	b.n	8015fca <_dtoa_r+0x992>
 80160dc:	f000 fc11 	bl	8016902 <__multadd>
 80160e0:	4631      	mov	r1, r6
 80160e2:	4681      	mov	r9, r0
 80160e4:	2300      	movs	r3, #0
 80160e6:	220a      	movs	r2, #10
 80160e8:	4620      	mov	r0, r4
 80160ea:	f000 fc0a 	bl	8016902 <__multadd>
 80160ee:	4606      	mov	r6, r0
 80160f0:	e7f2      	b.n	80160d8 <_dtoa_r+0xaa0>
 80160f2:	f04f 0900 	mov.w	r9, #0
 80160f6:	2201      	movs	r2, #1
 80160f8:	9904      	ldr	r1, [sp, #16]
 80160fa:	4620      	mov	r0, r4
 80160fc:	f000 fdb6 	bl	8016c6c <__lshift>
 8016100:	4639      	mov	r1, r7
 8016102:	9004      	str	r0, [sp, #16]
 8016104:	f000 fe06 	bl	8016d14 <__mcmp>
 8016108:	2800      	cmp	r0, #0
 801610a:	dcb6      	bgt.n	801607a <_dtoa_r+0xa42>
 801610c:	d102      	bne.n	8016114 <_dtoa_r+0xadc>
 801610e:	f018 0f01 	tst.w	r8, #1
 8016112:	d1b2      	bne.n	801607a <_dtoa_r+0xa42>
 8016114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016118:	2b30      	cmp	r3, #48	; 0x30
 801611a:	f105 32ff 	add.w	r2, r5, #4294967295
 801611e:	f47f af0a 	bne.w	8015f36 <_dtoa_r+0x8fe>
 8016122:	4615      	mov	r5, r2
 8016124:	e7f6      	b.n	8016114 <_dtoa_r+0xadc>
 8016126:	4593      	cmp	fp, r2
 8016128:	d105      	bne.n	8016136 <_dtoa_r+0xafe>
 801612a:	2331      	movs	r3, #49	; 0x31
 801612c:	f10a 0a01 	add.w	sl, sl, #1
 8016130:	f88b 3000 	strb.w	r3, [fp]
 8016134:	e6ff      	b.n	8015f36 <_dtoa_r+0x8fe>
 8016136:	4615      	mov	r5, r2
 8016138:	e79f      	b.n	801607a <_dtoa_r+0xa42>
 801613a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80161a0 <_dtoa_r+0xb68>
 801613e:	e007      	b.n	8016150 <_dtoa_r+0xb18>
 8016140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016142:	f8df b060 	ldr.w	fp, [pc, #96]	; 80161a4 <_dtoa_r+0xb6c>
 8016146:	b11b      	cbz	r3, 8016150 <_dtoa_r+0xb18>
 8016148:	f10b 0308 	add.w	r3, fp, #8
 801614c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801614e:	6013      	str	r3, [r2, #0]
 8016150:	4658      	mov	r0, fp
 8016152:	b017      	add	sp, #92	; 0x5c
 8016154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016158:	9b06      	ldr	r3, [sp, #24]
 801615a:	2b01      	cmp	r3, #1
 801615c:	f77f ae35 	ble.w	8015dca <_dtoa_r+0x792>
 8016160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016162:	9307      	str	r3, [sp, #28]
 8016164:	e649      	b.n	8015dfa <_dtoa_r+0x7c2>
 8016166:	9b02      	ldr	r3, [sp, #8]
 8016168:	2b00      	cmp	r3, #0
 801616a:	dc03      	bgt.n	8016174 <_dtoa_r+0xb3c>
 801616c:	9b06      	ldr	r3, [sp, #24]
 801616e:	2b02      	cmp	r3, #2
 8016170:	f73f aecc 	bgt.w	8015f0c <_dtoa_r+0x8d4>
 8016174:	465d      	mov	r5, fp
 8016176:	4639      	mov	r1, r7
 8016178:	9804      	ldr	r0, [sp, #16]
 801617a:	f7ff f9cf 	bl	801551c <quorem>
 801617e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016182:	f805 8b01 	strb.w	r8, [r5], #1
 8016186:	9a02      	ldr	r2, [sp, #8]
 8016188:	eba5 030b 	sub.w	r3, r5, fp
 801618c:	429a      	cmp	r2, r3
 801618e:	ddb0      	ble.n	80160f2 <_dtoa_r+0xaba>
 8016190:	2300      	movs	r3, #0
 8016192:	220a      	movs	r2, #10
 8016194:	9904      	ldr	r1, [sp, #16]
 8016196:	4620      	mov	r0, r4
 8016198:	f000 fbb3 	bl	8016902 <__multadd>
 801619c:	9004      	str	r0, [sp, #16]
 801619e:	e7ea      	b.n	8016176 <_dtoa_r+0xb3e>
 80161a0:	08018793 	.word	0x08018793
 80161a4:	080185f0 	.word	0x080185f0

080161a8 <rshift>:
 80161a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161aa:	6906      	ldr	r6, [r0, #16]
 80161ac:	114b      	asrs	r3, r1, #5
 80161ae:	429e      	cmp	r6, r3
 80161b0:	f100 0414 	add.w	r4, r0, #20
 80161b4:	dd30      	ble.n	8016218 <rshift+0x70>
 80161b6:	f011 011f 	ands.w	r1, r1, #31
 80161ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80161be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80161c2:	d108      	bne.n	80161d6 <rshift+0x2e>
 80161c4:	4621      	mov	r1, r4
 80161c6:	42b2      	cmp	r2, r6
 80161c8:	460b      	mov	r3, r1
 80161ca:	d211      	bcs.n	80161f0 <rshift+0x48>
 80161cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80161d0:	f841 3b04 	str.w	r3, [r1], #4
 80161d4:	e7f7      	b.n	80161c6 <rshift+0x1e>
 80161d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80161da:	f1c1 0c20 	rsb	ip, r1, #32
 80161de:	40cd      	lsrs	r5, r1
 80161e0:	3204      	adds	r2, #4
 80161e2:	4623      	mov	r3, r4
 80161e4:	42b2      	cmp	r2, r6
 80161e6:	4617      	mov	r7, r2
 80161e8:	d30c      	bcc.n	8016204 <rshift+0x5c>
 80161ea:	601d      	str	r5, [r3, #0]
 80161ec:	b105      	cbz	r5, 80161f0 <rshift+0x48>
 80161ee:	3304      	adds	r3, #4
 80161f0:	1b1a      	subs	r2, r3, r4
 80161f2:	42a3      	cmp	r3, r4
 80161f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80161f8:	bf08      	it	eq
 80161fa:	2300      	moveq	r3, #0
 80161fc:	6102      	str	r2, [r0, #16]
 80161fe:	bf08      	it	eq
 8016200:	6143      	streq	r3, [r0, #20]
 8016202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016204:	683f      	ldr	r7, [r7, #0]
 8016206:	fa07 f70c 	lsl.w	r7, r7, ip
 801620a:	433d      	orrs	r5, r7
 801620c:	f843 5b04 	str.w	r5, [r3], #4
 8016210:	f852 5b04 	ldr.w	r5, [r2], #4
 8016214:	40cd      	lsrs	r5, r1
 8016216:	e7e5      	b.n	80161e4 <rshift+0x3c>
 8016218:	4623      	mov	r3, r4
 801621a:	e7e9      	b.n	80161f0 <rshift+0x48>

0801621c <__hexdig_fun>:
 801621c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016220:	2b09      	cmp	r3, #9
 8016222:	d802      	bhi.n	801622a <__hexdig_fun+0xe>
 8016224:	3820      	subs	r0, #32
 8016226:	b2c0      	uxtb	r0, r0
 8016228:	4770      	bx	lr
 801622a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801622e:	2b05      	cmp	r3, #5
 8016230:	d801      	bhi.n	8016236 <__hexdig_fun+0x1a>
 8016232:	3847      	subs	r0, #71	; 0x47
 8016234:	e7f7      	b.n	8016226 <__hexdig_fun+0xa>
 8016236:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801623a:	2b05      	cmp	r3, #5
 801623c:	d801      	bhi.n	8016242 <__hexdig_fun+0x26>
 801623e:	3827      	subs	r0, #39	; 0x27
 8016240:	e7f1      	b.n	8016226 <__hexdig_fun+0xa>
 8016242:	2000      	movs	r0, #0
 8016244:	4770      	bx	lr

08016246 <__gethex>:
 8016246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801624a:	b08b      	sub	sp, #44	; 0x2c
 801624c:	468a      	mov	sl, r1
 801624e:	9002      	str	r0, [sp, #8]
 8016250:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016252:	9306      	str	r3, [sp, #24]
 8016254:	4690      	mov	r8, r2
 8016256:	f000 fadf 	bl	8016818 <__localeconv_l>
 801625a:	6803      	ldr	r3, [r0, #0]
 801625c:	9303      	str	r3, [sp, #12]
 801625e:	4618      	mov	r0, r3
 8016260:	f7e9 ffce 	bl	8000200 <strlen>
 8016264:	9b03      	ldr	r3, [sp, #12]
 8016266:	9001      	str	r0, [sp, #4]
 8016268:	4403      	add	r3, r0
 801626a:	f04f 0b00 	mov.w	fp, #0
 801626e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016272:	9307      	str	r3, [sp, #28]
 8016274:	f8da 3000 	ldr.w	r3, [sl]
 8016278:	3302      	adds	r3, #2
 801627a:	461f      	mov	r7, r3
 801627c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016280:	2830      	cmp	r0, #48	; 0x30
 8016282:	d06c      	beq.n	801635e <__gethex+0x118>
 8016284:	f7ff ffca 	bl	801621c <__hexdig_fun>
 8016288:	4604      	mov	r4, r0
 801628a:	2800      	cmp	r0, #0
 801628c:	d16a      	bne.n	8016364 <__gethex+0x11e>
 801628e:	9a01      	ldr	r2, [sp, #4]
 8016290:	9903      	ldr	r1, [sp, #12]
 8016292:	4638      	mov	r0, r7
 8016294:	f001 fc36 	bl	8017b04 <strncmp>
 8016298:	2800      	cmp	r0, #0
 801629a:	d166      	bne.n	801636a <__gethex+0x124>
 801629c:	9b01      	ldr	r3, [sp, #4]
 801629e:	5cf8      	ldrb	r0, [r7, r3]
 80162a0:	18fe      	adds	r6, r7, r3
 80162a2:	f7ff ffbb 	bl	801621c <__hexdig_fun>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d062      	beq.n	8016370 <__gethex+0x12a>
 80162aa:	4633      	mov	r3, r6
 80162ac:	7818      	ldrb	r0, [r3, #0]
 80162ae:	2830      	cmp	r0, #48	; 0x30
 80162b0:	461f      	mov	r7, r3
 80162b2:	f103 0301 	add.w	r3, r3, #1
 80162b6:	d0f9      	beq.n	80162ac <__gethex+0x66>
 80162b8:	f7ff ffb0 	bl	801621c <__hexdig_fun>
 80162bc:	fab0 f580 	clz	r5, r0
 80162c0:	096d      	lsrs	r5, r5, #5
 80162c2:	4634      	mov	r4, r6
 80162c4:	f04f 0b01 	mov.w	fp, #1
 80162c8:	463a      	mov	r2, r7
 80162ca:	4616      	mov	r6, r2
 80162cc:	3201      	adds	r2, #1
 80162ce:	7830      	ldrb	r0, [r6, #0]
 80162d0:	f7ff ffa4 	bl	801621c <__hexdig_fun>
 80162d4:	2800      	cmp	r0, #0
 80162d6:	d1f8      	bne.n	80162ca <__gethex+0x84>
 80162d8:	9a01      	ldr	r2, [sp, #4]
 80162da:	9903      	ldr	r1, [sp, #12]
 80162dc:	4630      	mov	r0, r6
 80162de:	f001 fc11 	bl	8017b04 <strncmp>
 80162e2:	b950      	cbnz	r0, 80162fa <__gethex+0xb4>
 80162e4:	b954      	cbnz	r4, 80162fc <__gethex+0xb6>
 80162e6:	9b01      	ldr	r3, [sp, #4]
 80162e8:	18f4      	adds	r4, r6, r3
 80162ea:	4622      	mov	r2, r4
 80162ec:	4616      	mov	r6, r2
 80162ee:	3201      	adds	r2, #1
 80162f0:	7830      	ldrb	r0, [r6, #0]
 80162f2:	f7ff ff93 	bl	801621c <__hexdig_fun>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d1f8      	bne.n	80162ec <__gethex+0xa6>
 80162fa:	b10c      	cbz	r4, 8016300 <__gethex+0xba>
 80162fc:	1ba4      	subs	r4, r4, r6
 80162fe:	00a4      	lsls	r4, r4, #2
 8016300:	7833      	ldrb	r3, [r6, #0]
 8016302:	2b50      	cmp	r3, #80	; 0x50
 8016304:	d001      	beq.n	801630a <__gethex+0xc4>
 8016306:	2b70      	cmp	r3, #112	; 0x70
 8016308:	d140      	bne.n	801638c <__gethex+0x146>
 801630a:	7873      	ldrb	r3, [r6, #1]
 801630c:	2b2b      	cmp	r3, #43	; 0x2b
 801630e:	d031      	beq.n	8016374 <__gethex+0x12e>
 8016310:	2b2d      	cmp	r3, #45	; 0x2d
 8016312:	d033      	beq.n	801637c <__gethex+0x136>
 8016314:	1c71      	adds	r1, r6, #1
 8016316:	f04f 0900 	mov.w	r9, #0
 801631a:	7808      	ldrb	r0, [r1, #0]
 801631c:	f7ff ff7e 	bl	801621c <__hexdig_fun>
 8016320:	1e43      	subs	r3, r0, #1
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b18      	cmp	r3, #24
 8016326:	d831      	bhi.n	801638c <__gethex+0x146>
 8016328:	f1a0 0210 	sub.w	r2, r0, #16
 801632c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016330:	f7ff ff74 	bl	801621c <__hexdig_fun>
 8016334:	1e43      	subs	r3, r0, #1
 8016336:	b2db      	uxtb	r3, r3
 8016338:	2b18      	cmp	r3, #24
 801633a:	d922      	bls.n	8016382 <__gethex+0x13c>
 801633c:	f1b9 0f00 	cmp.w	r9, #0
 8016340:	d000      	beq.n	8016344 <__gethex+0xfe>
 8016342:	4252      	negs	r2, r2
 8016344:	4414      	add	r4, r2
 8016346:	f8ca 1000 	str.w	r1, [sl]
 801634a:	b30d      	cbz	r5, 8016390 <__gethex+0x14a>
 801634c:	f1bb 0f00 	cmp.w	fp, #0
 8016350:	bf0c      	ite	eq
 8016352:	2706      	moveq	r7, #6
 8016354:	2700      	movne	r7, #0
 8016356:	4638      	mov	r0, r7
 8016358:	b00b      	add	sp, #44	; 0x2c
 801635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801635e:	f10b 0b01 	add.w	fp, fp, #1
 8016362:	e78a      	b.n	801627a <__gethex+0x34>
 8016364:	2500      	movs	r5, #0
 8016366:	462c      	mov	r4, r5
 8016368:	e7ae      	b.n	80162c8 <__gethex+0x82>
 801636a:	463e      	mov	r6, r7
 801636c:	2501      	movs	r5, #1
 801636e:	e7c7      	b.n	8016300 <__gethex+0xba>
 8016370:	4604      	mov	r4, r0
 8016372:	e7fb      	b.n	801636c <__gethex+0x126>
 8016374:	f04f 0900 	mov.w	r9, #0
 8016378:	1cb1      	adds	r1, r6, #2
 801637a:	e7ce      	b.n	801631a <__gethex+0xd4>
 801637c:	f04f 0901 	mov.w	r9, #1
 8016380:	e7fa      	b.n	8016378 <__gethex+0x132>
 8016382:	230a      	movs	r3, #10
 8016384:	fb03 0202 	mla	r2, r3, r2, r0
 8016388:	3a10      	subs	r2, #16
 801638a:	e7cf      	b.n	801632c <__gethex+0xe6>
 801638c:	4631      	mov	r1, r6
 801638e:	e7da      	b.n	8016346 <__gethex+0x100>
 8016390:	1bf3      	subs	r3, r6, r7
 8016392:	3b01      	subs	r3, #1
 8016394:	4629      	mov	r1, r5
 8016396:	2b07      	cmp	r3, #7
 8016398:	dc49      	bgt.n	801642e <__gethex+0x1e8>
 801639a:	9802      	ldr	r0, [sp, #8]
 801639c:	f000 fa66 	bl	801686c <_Balloc>
 80163a0:	9b01      	ldr	r3, [sp, #4]
 80163a2:	f100 0914 	add.w	r9, r0, #20
 80163a6:	f04f 0b00 	mov.w	fp, #0
 80163aa:	f1c3 0301 	rsb	r3, r3, #1
 80163ae:	4605      	mov	r5, r0
 80163b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80163b4:	46da      	mov	sl, fp
 80163b6:	9308      	str	r3, [sp, #32]
 80163b8:	42b7      	cmp	r7, r6
 80163ba:	d33b      	bcc.n	8016434 <__gethex+0x1ee>
 80163bc:	9804      	ldr	r0, [sp, #16]
 80163be:	f840 ab04 	str.w	sl, [r0], #4
 80163c2:	eba0 0009 	sub.w	r0, r0, r9
 80163c6:	1080      	asrs	r0, r0, #2
 80163c8:	6128      	str	r0, [r5, #16]
 80163ca:	0147      	lsls	r7, r0, #5
 80163cc:	4650      	mov	r0, sl
 80163ce:	f000 fb11 	bl	80169f4 <__hi0bits>
 80163d2:	f8d8 6000 	ldr.w	r6, [r8]
 80163d6:	1a3f      	subs	r7, r7, r0
 80163d8:	42b7      	cmp	r7, r6
 80163da:	dd64      	ble.n	80164a6 <__gethex+0x260>
 80163dc:	1bbf      	subs	r7, r7, r6
 80163de:	4639      	mov	r1, r7
 80163e0:	4628      	mov	r0, r5
 80163e2:	f000 fe21 	bl	8017028 <__any_on>
 80163e6:	4682      	mov	sl, r0
 80163e8:	b178      	cbz	r0, 801640a <__gethex+0x1c4>
 80163ea:	1e7b      	subs	r3, r7, #1
 80163ec:	1159      	asrs	r1, r3, #5
 80163ee:	f003 021f 	and.w	r2, r3, #31
 80163f2:	f04f 0a01 	mov.w	sl, #1
 80163f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80163fa:	fa0a f202 	lsl.w	r2, sl, r2
 80163fe:	420a      	tst	r2, r1
 8016400:	d003      	beq.n	801640a <__gethex+0x1c4>
 8016402:	4553      	cmp	r3, sl
 8016404:	dc46      	bgt.n	8016494 <__gethex+0x24e>
 8016406:	f04f 0a02 	mov.w	sl, #2
 801640a:	4639      	mov	r1, r7
 801640c:	4628      	mov	r0, r5
 801640e:	f7ff fecb 	bl	80161a8 <rshift>
 8016412:	443c      	add	r4, r7
 8016414:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016418:	42a3      	cmp	r3, r4
 801641a:	da52      	bge.n	80164c2 <__gethex+0x27c>
 801641c:	4629      	mov	r1, r5
 801641e:	9802      	ldr	r0, [sp, #8]
 8016420:	f000 fa58 	bl	80168d4 <_Bfree>
 8016424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016426:	2300      	movs	r3, #0
 8016428:	6013      	str	r3, [r2, #0]
 801642a:	27a3      	movs	r7, #163	; 0xa3
 801642c:	e793      	b.n	8016356 <__gethex+0x110>
 801642e:	3101      	adds	r1, #1
 8016430:	105b      	asrs	r3, r3, #1
 8016432:	e7b0      	b.n	8016396 <__gethex+0x150>
 8016434:	1e73      	subs	r3, r6, #1
 8016436:	9305      	str	r3, [sp, #20]
 8016438:	9a07      	ldr	r2, [sp, #28]
 801643a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801643e:	4293      	cmp	r3, r2
 8016440:	d018      	beq.n	8016474 <__gethex+0x22e>
 8016442:	f1bb 0f20 	cmp.w	fp, #32
 8016446:	d107      	bne.n	8016458 <__gethex+0x212>
 8016448:	9b04      	ldr	r3, [sp, #16]
 801644a:	f8c3 a000 	str.w	sl, [r3]
 801644e:	3304      	adds	r3, #4
 8016450:	f04f 0a00 	mov.w	sl, #0
 8016454:	9304      	str	r3, [sp, #16]
 8016456:	46d3      	mov	fp, sl
 8016458:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801645c:	f7ff fede 	bl	801621c <__hexdig_fun>
 8016460:	f000 000f 	and.w	r0, r0, #15
 8016464:	fa00 f00b 	lsl.w	r0, r0, fp
 8016468:	ea4a 0a00 	orr.w	sl, sl, r0
 801646c:	f10b 0b04 	add.w	fp, fp, #4
 8016470:	9b05      	ldr	r3, [sp, #20]
 8016472:	e00d      	b.n	8016490 <__gethex+0x24a>
 8016474:	9b05      	ldr	r3, [sp, #20]
 8016476:	9a08      	ldr	r2, [sp, #32]
 8016478:	4413      	add	r3, r2
 801647a:	42bb      	cmp	r3, r7
 801647c:	d3e1      	bcc.n	8016442 <__gethex+0x1fc>
 801647e:	4618      	mov	r0, r3
 8016480:	9a01      	ldr	r2, [sp, #4]
 8016482:	9903      	ldr	r1, [sp, #12]
 8016484:	9309      	str	r3, [sp, #36]	; 0x24
 8016486:	f001 fb3d 	bl	8017b04 <strncmp>
 801648a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801648c:	2800      	cmp	r0, #0
 801648e:	d1d8      	bne.n	8016442 <__gethex+0x1fc>
 8016490:	461e      	mov	r6, r3
 8016492:	e791      	b.n	80163b8 <__gethex+0x172>
 8016494:	1eb9      	subs	r1, r7, #2
 8016496:	4628      	mov	r0, r5
 8016498:	f000 fdc6 	bl	8017028 <__any_on>
 801649c:	2800      	cmp	r0, #0
 801649e:	d0b2      	beq.n	8016406 <__gethex+0x1c0>
 80164a0:	f04f 0a03 	mov.w	sl, #3
 80164a4:	e7b1      	b.n	801640a <__gethex+0x1c4>
 80164a6:	da09      	bge.n	80164bc <__gethex+0x276>
 80164a8:	1bf7      	subs	r7, r6, r7
 80164aa:	4629      	mov	r1, r5
 80164ac:	463a      	mov	r2, r7
 80164ae:	9802      	ldr	r0, [sp, #8]
 80164b0:	f000 fbdc 	bl	8016c6c <__lshift>
 80164b4:	1be4      	subs	r4, r4, r7
 80164b6:	4605      	mov	r5, r0
 80164b8:	f100 0914 	add.w	r9, r0, #20
 80164bc:	f04f 0a00 	mov.w	sl, #0
 80164c0:	e7a8      	b.n	8016414 <__gethex+0x1ce>
 80164c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80164c6:	42a0      	cmp	r0, r4
 80164c8:	dd6a      	ble.n	80165a0 <__gethex+0x35a>
 80164ca:	1b04      	subs	r4, r0, r4
 80164cc:	42a6      	cmp	r6, r4
 80164ce:	dc2e      	bgt.n	801652e <__gethex+0x2e8>
 80164d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164d4:	2b02      	cmp	r3, #2
 80164d6:	d022      	beq.n	801651e <__gethex+0x2d8>
 80164d8:	2b03      	cmp	r3, #3
 80164da:	d024      	beq.n	8016526 <__gethex+0x2e0>
 80164dc:	2b01      	cmp	r3, #1
 80164de:	d115      	bne.n	801650c <__gethex+0x2c6>
 80164e0:	42a6      	cmp	r6, r4
 80164e2:	d113      	bne.n	801650c <__gethex+0x2c6>
 80164e4:	2e01      	cmp	r6, #1
 80164e6:	dc0b      	bgt.n	8016500 <__gethex+0x2ba>
 80164e8:	9a06      	ldr	r2, [sp, #24]
 80164ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80164ee:	6013      	str	r3, [r2, #0]
 80164f0:	2301      	movs	r3, #1
 80164f2:	612b      	str	r3, [r5, #16]
 80164f4:	f8c9 3000 	str.w	r3, [r9]
 80164f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80164fa:	2762      	movs	r7, #98	; 0x62
 80164fc:	601d      	str	r5, [r3, #0]
 80164fe:	e72a      	b.n	8016356 <__gethex+0x110>
 8016500:	1e71      	subs	r1, r6, #1
 8016502:	4628      	mov	r0, r5
 8016504:	f000 fd90 	bl	8017028 <__any_on>
 8016508:	2800      	cmp	r0, #0
 801650a:	d1ed      	bne.n	80164e8 <__gethex+0x2a2>
 801650c:	4629      	mov	r1, r5
 801650e:	9802      	ldr	r0, [sp, #8]
 8016510:	f000 f9e0 	bl	80168d4 <_Bfree>
 8016514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016516:	2300      	movs	r3, #0
 8016518:	6013      	str	r3, [r2, #0]
 801651a:	2750      	movs	r7, #80	; 0x50
 801651c:	e71b      	b.n	8016356 <__gethex+0x110>
 801651e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016520:	2b00      	cmp	r3, #0
 8016522:	d0e1      	beq.n	80164e8 <__gethex+0x2a2>
 8016524:	e7f2      	b.n	801650c <__gethex+0x2c6>
 8016526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016528:	2b00      	cmp	r3, #0
 801652a:	d1dd      	bne.n	80164e8 <__gethex+0x2a2>
 801652c:	e7ee      	b.n	801650c <__gethex+0x2c6>
 801652e:	1e67      	subs	r7, r4, #1
 8016530:	f1ba 0f00 	cmp.w	sl, #0
 8016534:	d131      	bne.n	801659a <__gethex+0x354>
 8016536:	b127      	cbz	r7, 8016542 <__gethex+0x2fc>
 8016538:	4639      	mov	r1, r7
 801653a:	4628      	mov	r0, r5
 801653c:	f000 fd74 	bl	8017028 <__any_on>
 8016540:	4682      	mov	sl, r0
 8016542:	117a      	asrs	r2, r7, #5
 8016544:	2301      	movs	r3, #1
 8016546:	f007 071f 	and.w	r7, r7, #31
 801654a:	fa03 f707 	lsl.w	r7, r3, r7
 801654e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016552:	4621      	mov	r1, r4
 8016554:	421f      	tst	r7, r3
 8016556:	4628      	mov	r0, r5
 8016558:	bf18      	it	ne
 801655a:	f04a 0a02 	orrne.w	sl, sl, #2
 801655e:	1b36      	subs	r6, r6, r4
 8016560:	f7ff fe22 	bl	80161a8 <rshift>
 8016564:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016568:	2702      	movs	r7, #2
 801656a:	f1ba 0f00 	cmp.w	sl, #0
 801656e:	d048      	beq.n	8016602 <__gethex+0x3bc>
 8016570:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016574:	2b02      	cmp	r3, #2
 8016576:	d015      	beq.n	80165a4 <__gethex+0x35e>
 8016578:	2b03      	cmp	r3, #3
 801657a:	d017      	beq.n	80165ac <__gethex+0x366>
 801657c:	2b01      	cmp	r3, #1
 801657e:	d109      	bne.n	8016594 <__gethex+0x34e>
 8016580:	f01a 0f02 	tst.w	sl, #2
 8016584:	d006      	beq.n	8016594 <__gethex+0x34e>
 8016586:	f8d9 3000 	ldr.w	r3, [r9]
 801658a:	ea4a 0a03 	orr.w	sl, sl, r3
 801658e:	f01a 0f01 	tst.w	sl, #1
 8016592:	d10e      	bne.n	80165b2 <__gethex+0x36c>
 8016594:	f047 0710 	orr.w	r7, r7, #16
 8016598:	e033      	b.n	8016602 <__gethex+0x3bc>
 801659a:	f04f 0a01 	mov.w	sl, #1
 801659e:	e7d0      	b.n	8016542 <__gethex+0x2fc>
 80165a0:	2701      	movs	r7, #1
 80165a2:	e7e2      	b.n	801656a <__gethex+0x324>
 80165a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165a6:	f1c3 0301 	rsb	r3, r3, #1
 80165aa:	9315      	str	r3, [sp, #84]	; 0x54
 80165ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d0f0      	beq.n	8016594 <__gethex+0x34e>
 80165b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80165b6:	f105 0314 	add.w	r3, r5, #20
 80165ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80165be:	eb03 010a 	add.w	r1, r3, sl
 80165c2:	f04f 0c00 	mov.w	ip, #0
 80165c6:	4618      	mov	r0, r3
 80165c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80165d0:	d01c      	beq.n	801660c <__gethex+0x3c6>
 80165d2:	3201      	adds	r2, #1
 80165d4:	6002      	str	r2, [r0, #0]
 80165d6:	2f02      	cmp	r7, #2
 80165d8:	f105 0314 	add.w	r3, r5, #20
 80165dc:	d138      	bne.n	8016650 <__gethex+0x40a>
 80165de:	f8d8 2000 	ldr.w	r2, [r8]
 80165e2:	3a01      	subs	r2, #1
 80165e4:	42b2      	cmp	r2, r6
 80165e6:	d10a      	bne.n	80165fe <__gethex+0x3b8>
 80165e8:	1171      	asrs	r1, r6, #5
 80165ea:	2201      	movs	r2, #1
 80165ec:	f006 061f 	and.w	r6, r6, #31
 80165f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80165f4:	fa02 f606 	lsl.w	r6, r2, r6
 80165f8:	421e      	tst	r6, r3
 80165fa:	bf18      	it	ne
 80165fc:	4617      	movne	r7, r2
 80165fe:	f047 0720 	orr.w	r7, r7, #32
 8016602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016604:	601d      	str	r5, [r3, #0]
 8016606:	9b06      	ldr	r3, [sp, #24]
 8016608:	601c      	str	r4, [r3, #0]
 801660a:	e6a4      	b.n	8016356 <__gethex+0x110>
 801660c:	4299      	cmp	r1, r3
 801660e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016612:	d8d8      	bhi.n	80165c6 <__gethex+0x380>
 8016614:	68ab      	ldr	r3, [r5, #8]
 8016616:	4599      	cmp	r9, r3
 8016618:	db12      	blt.n	8016640 <__gethex+0x3fa>
 801661a:	6869      	ldr	r1, [r5, #4]
 801661c:	9802      	ldr	r0, [sp, #8]
 801661e:	3101      	adds	r1, #1
 8016620:	f000 f924 	bl	801686c <_Balloc>
 8016624:	692a      	ldr	r2, [r5, #16]
 8016626:	3202      	adds	r2, #2
 8016628:	f105 010c 	add.w	r1, r5, #12
 801662c:	4683      	mov	fp, r0
 801662e:	0092      	lsls	r2, r2, #2
 8016630:	300c      	adds	r0, #12
 8016632:	f7fd f9c5 	bl	80139c0 <memcpy>
 8016636:	4629      	mov	r1, r5
 8016638:	9802      	ldr	r0, [sp, #8]
 801663a:	f000 f94b 	bl	80168d4 <_Bfree>
 801663e:	465d      	mov	r5, fp
 8016640:	692b      	ldr	r3, [r5, #16]
 8016642:	1c5a      	adds	r2, r3, #1
 8016644:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016648:	612a      	str	r2, [r5, #16]
 801664a:	2201      	movs	r2, #1
 801664c:	615a      	str	r2, [r3, #20]
 801664e:	e7c2      	b.n	80165d6 <__gethex+0x390>
 8016650:	692a      	ldr	r2, [r5, #16]
 8016652:	454a      	cmp	r2, r9
 8016654:	dd0b      	ble.n	801666e <__gethex+0x428>
 8016656:	2101      	movs	r1, #1
 8016658:	4628      	mov	r0, r5
 801665a:	f7ff fda5 	bl	80161a8 <rshift>
 801665e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016662:	3401      	adds	r4, #1
 8016664:	42a3      	cmp	r3, r4
 8016666:	f6ff aed9 	blt.w	801641c <__gethex+0x1d6>
 801666a:	2701      	movs	r7, #1
 801666c:	e7c7      	b.n	80165fe <__gethex+0x3b8>
 801666e:	f016 061f 	ands.w	r6, r6, #31
 8016672:	d0fa      	beq.n	801666a <__gethex+0x424>
 8016674:	449a      	add	sl, r3
 8016676:	f1c6 0620 	rsb	r6, r6, #32
 801667a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801667e:	f000 f9b9 	bl	80169f4 <__hi0bits>
 8016682:	42b0      	cmp	r0, r6
 8016684:	dbe7      	blt.n	8016656 <__gethex+0x410>
 8016686:	e7f0      	b.n	801666a <__gethex+0x424>

08016688 <L_shift>:
 8016688:	f1c2 0208 	rsb	r2, r2, #8
 801668c:	0092      	lsls	r2, r2, #2
 801668e:	b570      	push	{r4, r5, r6, lr}
 8016690:	f1c2 0620 	rsb	r6, r2, #32
 8016694:	6843      	ldr	r3, [r0, #4]
 8016696:	6804      	ldr	r4, [r0, #0]
 8016698:	fa03 f506 	lsl.w	r5, r3, r6
 801669c:	432c      	orrs	r4, r5
 801669e:	40d3      	lsrs	r3, r2
 80166a0:	6004      	str	r4, [r0, #0]
 80166a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80166a6:	4288      	cmp	r0, r1
 80166a8:	d3f4      	bcc.n	8016694 <L_shift+0xc>
 80166aa:	bd70      	pop	{r4, r5, r6, pc}

080166ac <__match>:
 80166ac:	b530      	push	{r4, r5, lr}
 80166ae:	6803      	ldr	r3, [r0, #0]
 80166b0:	3301      	adds	r3, #1
 80166b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166b6:	b914      	cbnz	r4, 80166be <__match+0x12>
 80166b8:	6003      	str	r3, [r0, #0]
 80166ba:	2001      	movs	r0, #1
 80166bc:	bd30      	pop	{r4, r5, pc}
 80166be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80166c6:	2d19      	cmp	r5, #25
 80166c8:	bf98      	it	ls
 80166ca:	3220      	addls	r2, #32
 80166cc:	42a2      	cmp	r2, r4
 80166ce:	d0f0      	beq.n	80166b2 <__match+0x6>
 80166d0:	2000      	movs	r0, #0
 80166d2:	e7f3      	b.n	80166bc <__match+0x10>

080166d4 <__hexnan>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	680b      	ldr	r3, [r1, #0]
 80166da:	6801      	ldr	r1, [r0, #0]
 80166dc:	115f      	asrs	r7, r3, #5
 80166de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80166e2:	f013 031f 	ands.w	r3, r3, #31
 80166e6:	b087      	sub	sp, #28
 80166e8:	bf18      	it	ne
 80166ea:	3704      	addne	r7, #4
 80166ec:	2500      	movs	r5, #0
 80166ee:	1f3e      	subs	r6, r7, #4
 80166f0:	4682      	mov	sl, r0
 80166f2:	4690      	mov	r8, r2
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80166fa:	46b1      	mov	r9, r6
 80166fc:	4634      	mov	r4, r6
 80166fe:	9502      	str	r5, [sp, #8]
 8016700:	46ab      	mov	fp, r5
 8016702:	784a      	ldrb	r2, [r1, #1]
 8016704:	1c4b      	adds	r3, r1, #1
 8016706:	9303      	str	r3, [sp, #12]
 8016708:	b342      	cbz	r2, 801675c <__hexnan+0x88>
 801670a:	4610      	mov	r0, r2
 801670c:	9105      	str	r1, [sp, #20]
 801670e:	9204      	str	r2, [sp, #16]
 8016710:	f7ff fd84 	bl	801621c <__hexdig_fun>
 8016714:	2800      	cmp	r0, #0
 8016716:	d143      	bne.n	80167a0 <__hexnan+0xcc>
 8016718:	9a04      	ldr	r2, [sp, #16]
 801671a:	9905      	ldr	r1, [sp, #20]
 801671c:	2a20      	cmp	r2, #32
 801671e:	d818      	bhi.n	8016752 <__hexnan+0x7e>
 8016720:	9b02      	ldr	r3, [sp, #8]
 8016722:	459b      	cmp	fp, r3
 8016724:	dd13      	ble.n	801674e <__hexnan+0x7a>
 8016726:	454c      	cmp	r4, r9
 8016728:	d206      	bcs.n	8016738 <__hexnan+0x64>
 801672a:	2d07      	cmp	r5, #7
 801672c:	dc04      	bgt.n	8016738 <__hexnan+0x64>
 801672e:	462a      	mov	r2, r5
 8016730:	4649      	mov	r1, r9
 8016732:	4620      	mov	r0, r4
 8016734:	f7ff ffa8 	bl	8016688 <L_shift>
 8016738:	4544      	cmp	r4, r8
 801673a:	d944      	bls.n	80167c6 <__hexnan+0xf2>
 801673c:	2300      	movs	r3, #0
 801673e:	f1a4 0904 	sub.w	r9, r4, #4
 8016742:	f844 3c04 	str.w	r3, [r4, #-4]
 8016746:	f8cd b008 	str.w	fp, [sp, #8]
 801674a:	464c      	mov	r4, r9
 801674c:	461d      	mov	r5, r3
 801674e:	9903      	ldr	r1, [sp, #12]
 8016750:	e7d7      	b.n	8016702 <__hexnan+0x2e>
 8016752:	2a29      	cmp	r2, #41	; 0x29
 8016754:	d14a      	bne.n	80167ec <__hexnan+0x118>
 8016756:	3102      	adds	r1, #2
 8016758:	f8ca 1000 	str.w	r1, [sl]
 801675c:	f1bb 0f00 	cmp.w	fp, #0
 8016760:	d044      	beq.n	80167ec <__hexnan+0x118>
 8016762:	454c      	cmp	r4, r9
 8016764:	d206      	bcs.n	8016774 <__hexnan+0xa0>
 8016766:	2d07      	cmp	r5, #7
 8016768:	dc04      	bgt.n	8016774 <__hexnan+0xa0>
 801676a:	462a      	mov	r2, r5
 801676c:	4649      	mov	r1, r9
 801676e:	4620      	mov	r0, r4
 8016770:	f7ff ff8a 	bl	8016688 <L_shift>
 8016774:	4544      	cmp	r4, r8
 8016776:	d928      	bls.n	80167ca <__hexnan+0xf6>
 8016778:	4643      	mov	r3, r8
 801677a:	f854 2b04 	ldr.w	r2, [r4], #4
 801677e:	f843 2b04 	str.w	r2, [r3], #4
 8016782:	42a6      	cmp	r6, r4
 8016784:	d2f9      	bcs.n	801677a <__hexnan+0xa6>
 8016786:	2200      	movs	r2, #0
 8016788:	f843 2b04 	str.w	r2, [r3], #4
 801678c:	429e      	cmp	r6, r3
 801678e:	d2fb      	bcs.n	8016788 <__hexnan+0xb4>
 8016790:	6833      	ldr	r3, [r6, #0]
 8016792:	b91b      	cbnz	r3, 801679c <__hexnan+0xc8>
 8016794:	4546      	cmp	r6, r8
 8016796:	d127      	bne.n	80167e8 <__hexnan+0x114>
 8016798:	2301      	movs	r3, #1
 801679a:	6033      	str	r3, [r6, #0]
 801679c:	2005      	movs	r0, #5
 801679e:	e026      	b.n	80167ee <__hexnan+0x11a>
 80167a0:	3501      	adds	r5, #1
 80167a2:	2d08      	cmp	r5, #8
 80167a4:	f10b 0b01 	add.w	fp, fp, #1
 80167a8:	dd06      	ble.n	80167b8 <__hexnan+0xe4>
 80167aa:	4544      	cmp	r4, r8
 80167ac:	d9cf      	bls.n	801674e <__hexnan+0x7a>
 80167ae:	2300      	movs	r3, #0
 80167b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80167b4:	2501      	movs	r5, #1
 80167b6:	3c04      	subs	r4, #4
 80167b8:	6822      	ldr	r2, [r4, #0]
 80167ba:	f000 000f 	and.w	r0, r0, #15
 80167be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80167c2:	6020      	str	r0, [r4, #0]
 80167c4:	e7c3      	b.n	801674e <__hexnan+0x7a>
 80167c6:	2508      	movs	r5, #8
 80167c8:	e7c1      	b.n	801674e <__hexnan+0x7a>
 80167ca:	9b01      	ldr	r3, [sp, #4]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d0df      	beq.n	8016790 <__hexnan+0xbc>
 80167d0:	f04f 32ff 	mov.w	r2, #4294967295
 80167d4:	f1c3 0320 	rsb	r3, r3, #32
 80167d8:	fa22 f303 	lsr.w	r3, r2, r3
 80167dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80167e0:	401a      	ands	r2, r3
 80167e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80167e6:	e7d3      	b.n	8016790 <__hexnan+0xbc>
 80167e8:	3e04      	subs	r6, #4
 80167ea:	e7d1      	b.n	8016790 <__hexnan+0xbc>
 80167ec:	2004      	movs	r0, #4
 80167ee:	b007      	add	sp, #28
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167f4 <__locale_ctype_ptr_l>:
 80167f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80167f8:	4770      	bx	lr
	...

080167fc <__locale_ctype_ptr>:
 80167fc:	4b04      	ldr	r3, [pc, #16]	; (8016810 <__locale_ctype_ptr+0x14>)
 80167fe:	4a05      	ldr	r2, [pc, #20]	; (8016814 <__locale_ctype_ptr+0x18>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	6a1b      	ldr	r3, [r3, #32]
 8016804:	2b00      	cmp	r3, #0
 8016806:	bf08      	it	eq
 8016808:	4613      	moveq	r3, r2
 801680a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801680e:	4770      	bx	lr
 8016810:	2000000c 	.word	0x2000000c
 8016814:	20000070 	.word	0x20000070

08016818 <__localeconv_l>:
 8016818:	30f0      	adds	r0, #240	; 0xf0
 801681a:	4770      	bx	lr

0801681c <_localeconv_r>:
 801681c:	4b04      	ldr	r3, [pc, #16]	; (8016830 <_localeconv_r+0x14>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	6a18      	ldr	r0, [r3, #32]
 8016822:	4b04      	ldr	r3, [pc, #16]	; (8016834 <_localeconv_r+0x18>)
 8016824:	2800      	cmp	r0, #0
 8016826:	bf08      	it	eq
 8016828:	4618      	moveq	r0, r3
 801682a:	30f0      	adds	r0, #240	; 0xf0
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	2000000c 	.word	0x2000000c
 8016834:	20000070 	.word	0x20000070

08016838 <malloc>:
 8016838:	4b02      	ldr	r3, [pc, #8]	; (8016844 <malloc+0xc>)
 801683a:	4601      	mov	r1, r0
 801683c:	6818      	ldr	r0, [r3, #0]
 801683e:	f000 bc71 	b.w	8017124 <_malloc_r>
 8016842:	bf00      	nop
 8016844:	2000000c 	.word	0x2000000c

08016848 <__ascii_mbtowc>:
 8016848:	b082      	sub	sp, #8
 801684a:	b901      	cbnz	r1, 801684e <__ascii_mbtowc+0x6>
 801684c:	a901      	add	r1, sp, #4
 801684e:	b142      	cbz	r2, 8016862 <__ascii_mbtowc+0x1a>
 8016850:	b14b      	cbz	r3, 8016866 <__ascii_mbtowc+0x1e>
 8016852:	7813      	ldrb	r3, [r2, #0]
 8016854:	600b      	str	r3, [r1, #0]
 8016856:	7812      	ldrb	r2, [r2, #0]
 8016858:	1c10      	adds	r0, r2, #0
 801685a:	bf18      	it	ne
 801685c:	2001      	movne	r0, #1
 801685e:	b002      	add	sp, #8
 8016860:	4770      	bx	lr
 8016862:	4610      	mov	r0, r2
 8016864:	e7fb      	b.n	801685e <__ascii_mbtowc+0x16>
 8016866:	f06f 0001 	mvn.w	r0, #1
 801686a:	e7f8      	b.n	801685e <__ascii_mbtowc+0x16>

0801686c <_Balloc>:
 801686c:	b570      	push	{r4, r5, r6, lr}
 801686e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016870:	4604      	mov	r4, r0
 8016872:	460e      	mov	r6, r1
 8016874:	b93d      	cbnz	r5, 8016886 <_Balloc+0x1a>
 8016876:	2010      	movs	r0, #16
 8016878:	f7ff ffde 	bl	8016838 <malloc>
 801687c:	6260      	str	r0, [r4, #36]	; 0x24
 801687e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016882:	6005      	str	r5, [r0, #0]
 8016884:	60c5      	str	r5, [r0, #12]
 8016886:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016888:	68eb      	ldr	r3, [r5, #12]
 801688a:	b183      	cbz	r3, 80168ae <_Balloc+0x42>
 801688c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801688e:	68db      	ldr	r3, [r3, #12]
 8016890:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016894:	b9b8      	cbnz	r0, 80168c6 <_Balloc+0x5a>
 8016896:	2101      	movs	r1, #1
 8016898:	fa01 f506 	lsl.w	r5, r1, r6
 801689c:	1d6a      	adds	r2, r5, #5
 801689e:	0092      	lsls	r2, r2, #2
 80168a0:	4620      	mov	r0, r4
 80168a2:	f000 fbe2 	bl	801706a <_calloc_r>
 80168a6:	b160      	cbz	r0, 80168c2 <_Balloc+0x56>
 80168a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80168ac:	e00e      	b.n	80168cc <_Balloc+0x60>
 80168ae:	2221      	movs	r2, #33	; 0x21
 80168b0:	2104      	movs	r1, #4
 80168b2:	4620      	mov	r0, r4
 80168b4:	f000 fbd9 	bl	801706a <_calloc_r>
 80168b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168ba:	60e8      	str	r0, [r5, #12]
 80168bc:	68db      	ldr	r3, [r3, #12]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1e4      	bne.n	801688c <_Balloc+0x20>
 80168c2:	2000      	movs	r0, #0
 80168c4:	bd70      	pop	{r4, r5, r6, pc}
 80168c6:	6802      	ldr	r2, [r0, #0]
 80168c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80168cc:	2300      	movs	r3, #0
 80168ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80168d2:	e7f7      	b.n	80168c4 <_Balloc+0x58>

080168d4 <_Bfree>:
 80168d4:	b570      	push	{r4, r5, r6, lr}
 80168d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80168d8:	4606      	mov	r6, r0
 80168da:	460d      	mov	r5, r1
 80168dc:	b93c      	cbnz	r4, 80168ee <_Bfree+0x1a>
 80168de:	2010      	movs	r0, #16
 80168e0:	f7ff ffaa 	bl	8016838 <malloc>
 80168e4:	6270      	str	r0, [r6, #36]	; 0x24
 80168e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168ea:	6004      	str	r4, [r0, #0]
 80168ec:	60c4      	str	r4, [r0, #12]
 80168ee:	b13d      	cbz	r5, 8016900 <_Bfree+0x2c>
 80168f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80168f2:	686a      	ldr	r2, [r5, #4]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80168fa:	6029      	str	r1, [r5, #0]
 80168fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016900:	bd70      	pop	{r4, r5, r6, pc}

08016902 <__multadd>:
 8016902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016906:	690d      	ldr	r5, [r1, #16]
 8016908:	461f      	mov	r7, r3
 801690a:	4606      	mov	r6, r0
 801690c:	460c      	mov	r4, r1
 801690e:	f101 0c14 	add.w	ip, r1, #20
 8016912:	2300      	movs	r3, #0
 8016914:	f8dc 0000 	ldr.w	r0, [ip]
 8016918:	b281      	uxth	r1, r0
 801691a:	fb02 7101 	mla	r1, r2, r1, r7
 801691e:	0c0f      	lsrs	r7, r1, #16
 8016920:	0c00      	lsrs	r0, r0, #16
 8016922:	fb02 7000 	mla	r0, r2, r0, r7
 8016926:	b289      	uxth	r1, r1
 8016928:	3301      	adds	r3, #1
 801692a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801692e:	429d      	cmp	r5, r3
 8016930:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016934:	f84c 1b04 	str.w	r1, [ip], #4
 8016938:	dcec      	bgt.n	8016914 <__multadd+0x12>
 801693a:	b1d7      	cbz	r7, 8016972 <__multadd+0x70>
 801693c:	68a3      	ldr	r3, [r4, #8]
 801693e:	42ab      	cmp	r3, r5
 8016940:	dc12      	bgt.n	8016968 <__multadd+0x66>
 8016942:	6861      	ldr	r1, [r4, #4]
 8016944:	4630      	mov	r0, r6
 8016946:	3101      	adds	r1, #1
 8016948:	f7ff ff90 	bl	801686c <_Balloc>
 801694c:	6922      	ldr	r2, [r4, #16]
 801694e:	3202      	adds	r2, #2
 8016950:	f104 010c 	add.w	r1, r4, #12
 8016954:	4680      	mov	r8, r0
 8016956:	0092      	lsls	r2, r2, #2
 8016958:	300c      	adds	r0, #12
 801695a:	f7fd f831 	bl	80139c0 <memcpy>
 801695e:	4621      	mov	r1, r4
 8016960:	4630      	mov	r0, r6
 8016962:	f7ff ffb7 	bl	80168d4 <_Bfree>
 8016966:	4644      	mov	r4, r8
 8016968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801696c:	3501      	adds	r5, #1
 801696e:	615f      	str	r7, [r3, #20]
 8016970:	6125      	str	r5, [r4, #16]
 8016972:	4620      	mov	r0, r4
 8016974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016978 <__s2b>:
 8016978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801697c:	460c      	mov	r4, r1
 801697e:	4615      	mov	r5, r2
 8016980:	461f      	mov	r7, r3
 8016982:	2209      	movs	r2, #9
 8016984:	3308      	adds	r3, #8
 8016986:	4606      	mov	r6, r0
 8016988:	fb93 f3f2 	sdiv	r3, r3, r2
 801698c:	2100      	movs	r1, #0
 801698e:	2201      	movs	r2, #1
 8016990:	429a      	cmp	r2, r3
 8016992:	db20      	blt.n	80169d6 <__s2b+0x5e>
 8016994:	4630      	mov	r0, r6
 8016996:	f7ff ff69 	bl	801686c <_Balloc>
 801699a:	9b08      	ldr	r3, [sp, #32]
 801699c:	6143      	str	r3, [r0, #20]
 801699e:	2d09      	cmp	r5, #9
 80169a0:	f04f 0301 	mov.w	r3, #1
 80169a4:	6103      	str	r3, [r0, #16]
 80169a6:	dd19      	ble.n	80169dc <__s2b+0x64>
 80169a8:	f104 0809 	add.w	r8, r4, #9
 80169ac:	46c1      	mov	r9, r8
 80169ae:	442c      	add	r4, r5
 80169b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80169b4:	4601      	mov	r1, r0
 80169b6:	3b30      	subs	r3, #48	; 0x30
 80169b8:	220a      	movs	r2, #10
 80169ba:	4630      	mov	r0, r6
 80169bc:	f7ff ffa1 	bl	8016902 <__multadd>
 80169c0:	45a1      	cmp	r9, r4
 80169c2:	d1f5      	bne.n	80169b0 <__s2b+0x38>
 80169c4:	eb08 0405 	add.w	r4, r8, r5
 80169c8:	3c08      	subs	r4, #8
 80169ca:	1b2d      	subs	r5, r5, r4
 80169cc:	1963      	adds	r3, r4, r5
 80169ce:	42bb      	cmp	r3, r7
 80169d0:	db07      	blt.n	80169e2 <__s2b+0x6a>
 80169d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169d6:	0052      	lsls	r2, r2, #1
 80169d8:	3101      	adds	r1, #1
 80169da:	e7d9      	b.n	8016990 <__s2b+0x18>
 80169dc:	340a      	adds	r4, #10
 80169de:	2509      	movs	r5, #9
 80169e0:	e7f3      	b.n	80169ca <__s2b+0x52>
 80169e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169e6:	4601      	mov	r1, r0
 80169e8:	3b30      	subs	r3, #48	; 0x30
 80169ea:	220a      	movs	r2, #10
 80169ec:	4630      	mov	r0, r6
 80169ee:	f7ff ff88 	bl	8016902 <__multadd>
 80169f2:	e7eb      	b.n	80169cc <__s2b+0x54>

080169f4 <__hi0bits>:
 80169f4:	0c02      	lsrs	r2, r0, #16
 80169f6:	0412      	lsls	r2, r2, #16
 80169f8:	4603      	mov	r3, r0
 80169fa:	b9b2      	cbnz	r2, 8016a2a <__hi0bits+0x36>
 80169fc:	0403      	lsls	r3, r0, #16
 80169fe:	2010      	movs	r0, #16
 8016a00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016a04:	bf04      	itt	eq
 8016a06:	021b      	lsleq	r3, r3, #8
 8016a08:	3008      	addeq	r0, #8
 8016a0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016a0e:	bf04      	itt	eq
 8016a10:	011b      	lsleq	r3, r3, #4
 8016a12:	3004      	addeq	r0, #4
 8016a14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016a18:	bf04      	itt	eq
 8016a1a:	009b      	lsleq	r3, r3, #2
 8016a1c:	3002      	addeq	r0, #2
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	db06      	blt.n	8016a30 <__hi0bits+0x3c>
 8016a22:	005b      	lsls	r3, r3, #1
 8016a24:	d503      	bpl.n	8016a2e <__hi0bits+0x3a>
 8016a26:	3001      	adds	r0, #1
 8016a28:	4770      	bx	lr
 8016a2a:	2000      	movs	r0, #0
 8016a2c:	e7e8      	b.n	8016a00 <__hi0bits+0xc>
 8016a2e:	2020      	movs	r0, #32
 8016a30:	4770      	bx	lr

08016a32 <__lo0bits>:
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	f013 0207 	ands.w	r2, r3, #7
 8016a38:	4601      	mov	r1, r0
 8016a3a:	d00b      	beq.n	8016a54 <__lo0bits+0x22>
 8016a3c:	07da      	lsls	r2, r3, #31
 8016a3e:	d423      	bmi.n	8016a88 <__lo0bits+0x56>
 8016a40:	0798      	lsls	r0, r3, #30
 8016a42:	bf49      	itett	mi
 8016a44:	085b      	lsrmi	r3, r3, #1
 8016a46:	089b      	lsrpl	r3, r3, #2
 8016a48:	2001      	movmi	r0, #1
 8016a4a:	600b      	strmi	r3, [r1, #0]
 8016a4c:	bf5c      	itt	pl
 8016a4e:	600b      	strpl	r3, [r1, #0]
 8016a50:	2002      	movpl	r0, #2
 8016a52:	4770      	bx	lr
 8016a54:	b298      	uxth	r0, r3
 8016a56:	b9a8      	cbnz	r0, 8016a84 <__lo0bits+0x52>
 8016a58:	0c1b      	lsrs	r3, r3, #16
 8016a5a:	2010      	movs	r0, #16
 8016a5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016a60:	bf04      	itt	eq
 8016a62:	0a1b      	lsreq	r3, r3, #8
 8016a64:	3008      	addeq	r0, #8
 8016a66:	071a      	lsls	r2, r3, #28
 8016a68:	bf04      	itt	eq
 8016a6a:	091b      	lsreq	r3, r3, #4
 8016a6c:	3004      	addeq	r0, #4
 8016a6e:	079a      	lsls	r2, r3, #30
 8016a70:	bf04      	itt	eq
 8016a72:	089b      	lsreq	r3, r3, #2
 8016a74:	3002      	addeq	r0, #2
 8016a76:	07da      	lsls	r2, r3, #31
 8016a78:	d402      	bmi.n	8016a80 <__lo0bits+0x4e>
 8016a7a:	085b      	lsrs	r3, r3, #1
 8016a7c:	d006      	beq.n	8016a8c <__lo0bits+0x5a>
 8016a7e:	3001      	adds	r0, #1
 8016a80:	600b      	str	r3, [r1, #0]
 8016a82:	4770      	bx	lr
 8016a84:	4610      	mov	r0, r2
 8016a86:	e7e9      	b.n	8016a5c <__lo0bits+0x2a>
 8016a88:	2000      	movs	r0, #0
 8016a8a:	4770      	bx	lr
 8016a8c:	2020      	movs	r0, #32
 8016a8e:	4770      	bx	lr

08016a90 <__i2b>:
 8016a90:	b510      	push	{r4, lr}
 8016a92:	460c      	mov	r4, r1
 8016a94:	2101      	movs	r1, #1
 8016a96:	f7ff fee9 	bl	801686c <_Balloc>
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	6144      	str	r4, [r0, #20]
 8016a9e:	6102      	str	r2, [r0, #16]
 8016aa0:	bd10      	pop	{r4, pc}

08016aa2 <__multiply>:
 8016aa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa6:	4614      	mov	r4, r2
 8016aa8:	690a      	ldr	r2, [r1, #16]
 8016aaa:	6923      	ldr	r3, [r4, #16]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	bfb8      	it	lt
 8016ab0:	460b      	movlt	r3, r1
 8016ab2:	4688      	mov	r8, r1
 8016ab4:	bfbc      	itt	lt
 8016ab6:	46a0      	movlt	r8, r4
 8016ab8:	461c      	movlt	r4, r3
 8016aba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016abe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016ac6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016aca:	eb07 0609 	add.w	r6, r7, r9
 8016ace:	42b3      	cmp	r3, r6
 8016ad0:	bfb8      	it	lt
 8016ad2:	3101      	addlt	r1, #1
 8016ad4:	f7ff feca 	bl	801686c <_Balloc>
 8016ad8:	f100 0514 	add.w	r5, r0, #20
 8016adc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016ae0:	462b      	mov	r3, r5
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	4573      	cmp	r3, lr
 8016ae6:	d316      	bcc.n	8016b16 <__multiply+0x74>
 8016ae8:	f104 0214 	add.w	r2, r4, #20
 8016aec:	f108 0114 	add.w	r1, r8, #20
 8016af0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016af4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016af8:	9300      	str	r3, [sp, #0]
 8016afa:	9b00      	ldr	r3, [sp, #0]
 8016afc:	9201      	str	r2, [sp, #4]
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d80c      	bhi.n	8016b1c <__multiply+0x7a>
 8016b02:	2e00      	cmp	r6, #0
 8016b04:	dd03      	ble.n	8016b0e <__multiply+0x6c>
 8016b06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d05d      	beq.n	8016bca <__multiply+0x128>
 8016b0e:	6106      	str	r6, [r0, #16]
 8016b10:	b003      	add	sp, #12
 8016b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b16:	f843 2b04 	str.w	r2, [r3], #4
 8016b1a:	e7e3      	b.n	8016ae4 <__multiply+0x42>
 8016b1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016b20:	f1bb 0f00 	cmp.w	fp, #0
 8016b24:	d023      	beq.n	8016b6e <__multiply+0xcc>
 8016b26:	4689      	mov	r9, r1
 8016b28:	46ac      	mov	ip, r5
 8016b2a:	f04f 0800 	mov.w	r8, #0
 8016b2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016b32:	f8dc a000 	ldr.w	sl, [ip]
 8016b36:	b2a3      	uxth	r3, r4
 8016b38:	fa1f fa8a 	uxth.w	sl, sl
 8016b3c:	fb0b a303 	mla	r3, fp, r3, sl
 8016b40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016b44:	f8dc 4000 	ldr.w	r4, [ip]
 8016b48:	4443      	add	r3, r8
 8016b4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016b4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016b52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016b56:	46e2      	mov	sl, ip
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016b5e:	454f      	cmp	r7, r9
 8016b60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016b64:	f84a 3b04 	str.w	r3, [sl], #4
 8016b68:	d82b      	bhi.n	8016bc2 <__multiply+0x120>
 8016b6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8016b6e:	9b01      	ldr	r3, [sp, #4]
 8016b70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016b74:	3204      	adds	r2, #4
 8016b76:	f1ba 0f00 	cmp.w	sl, #0
 8016b7a:	d020      	beq.n	8016bbe <__multiply+0x11c>
 8016b7c:	682b      	ldr	r3, [r5, #0]
 8016b7e:	4689      	mov	r9, r1
 8016b80:	46a8      	mov	r8, r5
 8016b82:	f04f 0b00 	mov.w	fp, #0
 8016b86:	f8b9 c000 	ldrh.w	ip, [r9]
 8016b8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016b8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016b92:	445c      	add	r4, fp
 8016b94:	46c4      	mov	ip, r8
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016b9c:	f84c 3b04 	str.w	r3, [ip], #4
 8016ba0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016ba4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016ba8:	0c1b      	lsrs	r3, r3, #16
 8016baa:	fb0a b303 	mla	r3, sl, r3, fp
 8016bae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016bb2:	454f      	cmp	r7, r9
 8016bb4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016bb8:	d805      	bhi.n	8016bc6 <__multiply+0x124>
 8016bba:	f8c8 3004 	str.w	r3, [r8, #4]
 8016bbe:	3504      	adds	r5, #4
 8016bc0:	e79b      	b.n	8016afa <__multiply+0x58>
 8016bc2:	46d4      	mov	ip, sl
 8016bc4:	e7b3      	b.n	8016b2e <__multiply+0x8c>
 8016bc6:	46e0      	mov	r8, ip
 8016bc8:	e7dd      	b.n	8016b86 <__multiply+0xe4>
 8016bca:	3e01      	subs	r6, #1
 8016bcc:	e799      	b.n	8016b02 <__multiply+0x60>
	...

08016bd0 <__pow5mult>:
 8016bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd4:	4615      	mov	r5, r2
 8016bd6:	f012 0203 	ands.w	r2, r2, #3
 8016bda:	4606      	mov	r6, r0
 8016bdc:	460f      	mov	r7, r1
 8016bde:	d007      	beq.n	8016bf0 <__pow5mult+0x20>
 8016be0:	3a01      	subs	r2, #1
 8016be2:	4c21      	ldr	r4, [pc, #132]	; (8016c68 <__pow5mult+0x98>)
 8016be4:	2300      	movs	r3, #0
 8016be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016bea:	f7ff fe8a 	bl	8016902 <__multadd>
 8016bee:	4607      	mov	r7, r0
 8016bf0:	10ad      	asrs	r5, r5, #2
 8016bf2:	d035      	beq.n	8016c60 <__pow5mult+0x90>
 8016bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016bf6:	b93c      	cbnz	r4, 8016c08 <__pow5mult+0x38>
 8016bf8:	2010      	movs	r0, #16
 8016bfa:	f7ff fe1d 	bl	8016838 <malloc>
 8016bfe:	6270      	str	r0, [r6, #36]	; 0x24
 8016c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c04:	6004      	str	r4, [r0, #0]
 8016c06:	60c4      	str	r4, [r0, #12]
 8016c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016c10:	b94c      	cbnz	r4, 8016c26 <__pow5mult+0x56>
 8016c12:	f240 2171 	movw	r1, #625	; 0x271
 8016c16:	4630      	mov	r0, r6
 8016c18:	f7ff ff3a 	bl	8016a90 <__i2b>
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016c22:	4604      	mov	r4, r0
 8016c24:	6003      	str	r3, [r0, #0]
 8016c26:	f04f 0800 	mov.w	r8, #0
 8016c2a:	07eb      	lsls	r3, r5, #31
 8016c2c:	d50a      	bpl.n	8016c44 <__pow5mult+0x74>
 8016c2e:	4639      	mov	r1, r7
 8016c30:	4622      	mov	r2, r4
 8016c32:	4630      	mov	r0, r6
 8016c34:	f7ff ff35 	bl	8016aa2 <__multiply>
 8016c38:	4639      	mov	r1, r7
 8016c3a:	4681      	mov	r9, r0
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	f7ff fe49 	bl	80168d4 <_Bfree>
 8016c42:	464f      	mov	r7, r9
 8016c44:	106d      	asrs	r5, r5, #1
 8016c46:	d00b      	beq.n	8016c60 <__pow5mult+0x90>
 8016c48:	6820      	ldr	r0, [r4, #0]
 8016c4a:	b938      	cbnz	r0, 8016c5c <__pow5mult+0x8c>
 8016c4c:	4622      	mov	r2, r4
 8016c4e:	4621      	mov	r1, r4
 8016c50:	4630      	mov	r0, r6
 8016c52:	f7ff ff26 	bl	8016aa2 <__multiply>
 8016c56:	6020      	str	r0, [r4, #0]
 8016c58:	f8c0 8000 	str.w	r8, [r0]
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	e7e4      	b.n	8016c2a <__pow5mult+0x5a>
 8016c60:	4638      	mov	r0, r7
 8016c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c66:	bf00      	nop
 8016c68:	08018760 	.word	0x08018760

08016c6c <__lshift>:
 8016c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c70:	460c      	mov	r4, r1
 8016c72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c76:	6923      	ldr	r3, [r4, #16]
 8016c78:	6849      	ldr	r1, [r1, #4]
 8016c7a:	eb0a 0903 	add.w	r9, sl, r3
 8016c7e:	68a3      	ldr	r3, [r4, #8]
 8016c80:	4607      	mov	r7, r0
 8016c82:	4616      	mov	r6, r2
 8016c84:	f109 0501 	add.w	r5, r9, #1
 8016c88:	42ab      	cmp	r3, r5
 8016c8a:	db32      	blt.n	8016cf2 <__lshift+0x86>
 8016c8c:	4638      	mov	r0, r7
 8016c8e:	f7ff fded 	bl	801686c <_Balloc>
 8016c92:	2300      	movs	r3, #0
 8016c94:	4680      	mov	r8, r0
 8016c96:	f100 0114 	add.w	r1, r0, #20
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4553      	cmp	r3, sl
 8016c9e:	db2b      	blt.n	8016cf8 <__lshift+0x8c>
 8016ca0:	6920      	ldr	r0, [r4, #16]
 8016ca2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016ca6:	f104 0314 	add.w	r3, r4, #20
 8016caa:	f016 021f 	ands.w	r2, r6, #31
 8016cae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016cb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016cb6:	d025      	beq.n	8016d04 <__lshift+0x98>
 8016cb8:	f1c2 0e20 	rsb	lr, r2, #32
 8016cbc:	2000      	movs	r0, #0
 8016cbe:	681e      	ldr	r6, [r3, #0]
 8016cc0:	468a      	mov	sl, r1
 8016cc2:	4096      	lsls	r6, r2
 8016cc4:	4330      	orrs	r0, r6
 8016cc6:	f84a 0b04 	str.w	r0, [sl], #4
 8016cca:	f853 0b04 	ldr.w	r0, [r3], #4
 8016cce:	459c      	cmp	ip, r3
 8016cd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8016cd4:	d814      	bhi.n	8016d00 <__lshift+0x94>
 8016cd6:	6048      	str	r0, [r1, #4]
 8016cd8:	b108      	cbz	r0, 8016cde <__lshift+0x72>
 8016cda:	f109 0502 	add.w	r5, r9, #2
 8016cde:	3d01      	subs	r5, #1
 8016ce0:	4638      	mov	r0, r7
 8016ce2:	f8c8 5010 	str.w	r5, [r8, #16]
 8016ce6:	4621      	mov	r1, r4
 8016ce8:	f7ff fdf4 	bl	80168d4 <_Bfree>
 8016cec:	4640      	mov	r0, r8
 8016cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cf2:	3101      	adds	r1, #1
 8016cf4:	005b      	lsls	r3, r3, #1
 8016cf6:	e7c7      	b.n	8016c88 <__lshift+0x1c>
 8016cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	e7cd      	b.n	8016c9c <__lshift+0x30>
 8016d00:	4651      	mov	r1, sl
 8016d02:	e7dc      	b.n	8016cbe <__lshift+0x52>
 8016d04:	3904      	subs	r1, #4
 8016d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8016d0e:	459c      	cmp	ip, r3
 8016d10:	d8f9      	bhi.n	8016d06 <__lshift+0x9a>
 8016d12:	e7e4      	b.n	8016cde <__lshift+0x72>

08016d14 <__mcmp>:
 8016d14:	6903      	ldr	r3, [r0, #16]
 8016d16:	690a      	ldr	r2, [r1, #16]
 8016d18:	1a9b      	subs	r3, r3, r2
 8016d1a:	b530      	push	{r4, r5, lr}
 8016d1c:	d10c      	bne.n	8016d38 <__mcmp+0x24>
 8016d1e:	0092      	lsls	r2, r2, #2
 8016d20:	3014      	adds	r0, #20
 8016d22:	3114      	adds	r1, #20
 8016d24:	1884      	adds	r4, r0, r2
 8016d26:	4411      	add	r1, r2
 8016d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016d30:	4295      	cmp	r5, r2
 8016d32:	d003      	beq.n	8016d3c <__mcmp+0x28>
 8016d34:	d305      	bcc.n	8016d42 <__mcmp+0x2e>
 8016d36:	2301      	movs	r3, #1
 8016d38:	4618      	mov	r0, r3
 8016d3a:	bd30      	pop	{r4, r5, pc}
 8016d3c:	42a0      	cmp	r0, r4
 8016d3e:	d3f3      	bcc.n	8016d28 <__mcmp+0x14>
 8016d40:	e7fa      	b.n	8016d38 <__mcmp+0x24>
 8016d42:	f04f 33ff 	mov.w	r3, #4294967295
 8016d46:	e7f7      	b.n	8016d38 <__mcmp+0x24>

08016d48 <__mdiff>:
 8016d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d4c:	460d      	mov	r5, r1
 8016d4e:	4607      	mov	r7, r0
 8016d50:	4611      	mov	r1, r2
 8016d52:	4628      	mov	r0, r5
 8016d54:	4614      	mov	r4, r2
 8016d56:	f7ff ffdd 	bl	8016d14 <__mcmp>
 8016d5a:	1e06      	subs	r6, r0, #0
 8016d5c:	d108      	bne.n	8016d70 <__mdiff+0x28>
 8016d5e:	4631      	mov	r1, r6
 8016d60:	4638      	mov	r0, r7
 8016d62:	f7ff fd83 	bl	801686c <_Balloc>
 8016d66:	2301      	movs	r3, #1
 8016d68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d70:	bfa4      	itt	ge
 8016d72:	4623      	movge	r3, r4
 8016d74:	462c      	movge	r4, r5
 8016d76:	4638      	mov	r0, r7
 8016d78:	6861      	ldr	r1, [r4, #4]
 8016d7a:	bfa6      	itte	ge
 8016d7c:	461d      	movge	r5, r3
 8016d7e:	2600      	movge	r6, #0
 8016d80:	2601      	movlt	r6, #1
 8016d82:	f7ff fd73 	bl	801686c <_Balloc>
 8016d86:	692b      	ldr	r3, [r5, #16]
 8016d88:	60c6      	str	r6, [r0, #12]
 8016d8a:	6926      	ldr	r6, [r4, #16]
 8016d8c:	f105 0914 	add.w	r9, r5, #20
 8016d90:	f104 0214 	add.w	r2, r4, #20
 8016d94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016d98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016d9c:	f100 0514 	add.w	r5, r0, #20
 8016da0:	f04f 0e00 	mov.w	lr, #0
 8016da4:	f852 ab04 	ldr.w	sl, [r2], #4
 8016da8:	f859 4b04 	ldr.w	r4, [r9], #4
 8016dac:	fa1e f18a 	uxtah	r1, lr, sl
 8016db0:	b2a3      	uxth	r3, r4
 8016db2:	1ac9      	subs	r1, r1, r3
 8016db4:	0c23      	lsrs	r3, r4, #16
 8016db6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016dba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016dbe:	b289      	uxth	r1, r1
 8016dc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016dc4:	45c8      	cmp	r8, r9
 8016dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016dca:	4694      	mov	ip, r2
 8016dcc:	f845 3b04 	str.w	r3, [r5], #4
 8016dd0:	d8e8      	bhi.n	8016da4 <__mdiff+0x5c>
 8016dd2:	45bc      	cmp	ip, r7
 8016dd4:	d304      	bcc.n	8016de0 <__mdiff+0x98>
 8016dd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016dda:	b183      	cbz	r3, 8016dfe <__mdiff+0xb6>
 8016ddc:	6106      	str	r6, [r0, #16]
 8016dde:	e7c5      	b.n	8016d6c <__mdiff+0x24>
 8016de0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016de4:	fa1e f381 	uxtah	r3, lr, r1
 8016de8:	141a      	asrs	r2, r3, #16
 8016dea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016dee:	b29b      	uxth	r3, r3
 8016df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016df4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016df8:	f845 3b04 	str.w	r3, [r5], #4
 8016dfc:	e7e9      	b.n	8016dd2 <__mdiff+0x8a>
 8016dfe:	3e01      	subs	r6, #1
 8016e00:	e7e9      	b.n	8016dd6 <__mdiff+0x8e>
	...

08016e04 <__ulp>:
 8016e04:	4b12      	ldr	r3, [pc, #72]	; (8016e50 <__ulp+0x4c>)
 8016e06:	ee10 2a90 	vmov	r2, s1
 8016e0a:	401a      	ands	r2, r3
 8016e0c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dd04      	ble.n	8016e1e <__ulp+0x1a>
 8016e14:	2000      	movs	r0, #0
 8016e16:	4619      	mov	r1, r3
 8016e18:	ec41 0b10 	vmov	d0, r0, r1
 8016e1c:	4770      	bx	lr
 8016e1e:	425b      	negs	r3, r3
 8016e20:	151b      	asrs	r3, r3, #20
 8016e22:	2b13      	cmp	r3, #19
 8016e24:	f04f 0000 	mov.w	r0, #0
 8016e28:	f04f 0100 	mov.w	r1, #0
 8016e2c:	dc04      	bgt.n	8016e38 <__ulp+0x34>
 8016e2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016e32:	fa42 f103 	asr.w	r1, r2, r3
 8016e36:	e7ef      	b.n	8016e18 <__ulp+0x14>
 8016e38:	3b14      	subs	r3, #20
 8016e3a:	2b1e      	cmp	r3, #30
 8016e3c:	f04f 0201 	mov.w	r2, #1
 8016e40:	bfda      	itte	le
 8016e42:	f1c3 031f 	rsble	r3, r3, #31
 8016e46:	fa02 f303 	lslle.w	r3, r2, r3
 8016e4a:	4613      	movgt	r3, r2
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	e7e3      	b.n	8016e18 <__ulp+0x14>
 8016e50:	7ff00000 	.word	0x7ff00000

08016e54 <__b2d>:
 8016e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e56:	6905      	ldr	r5, [r0, #16]
 8016e58:	f100 0714 	add.w	r7, r0, #20
 8016e5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016e60:	1f2e      	subs	r6, r5, #4
 8016e62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016e66:	4620      	mov	r0, r4
 8016e68:	f7ff fdc4 	bl	80169f4 <__hi0bits>
 8016e6c:	f1c0 0320 	rsb	r3, r0, #32
 8016e70:	280a      	cmp	r0, #10
 8016e72:	600b      	str	r3, [r1, #0]
 8016e74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016eec <__b2d+0x98>
 8016e78:	dc14      	bgt.n	8016ea4 <__b2d+0x50>
 8016e7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016e7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016e82:	42b7      	cmp	r7, r6
 8016e84:	ea41 030c 	orr.w	r3, r1, ip
 8016e88:	bf34      	ite	cc
 8016e8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e8e:	2100      	movcs	r1, #0
 8016e90:	3015      	adds	r0, #21
 8016e92:	fa04 f000 	lsl.w	r0, r4, r0
 8016e96:	fa21 f10e 	lsr.w	r1, r1, lr
 8016e9a:	ea40 0201 	orr.w	r2, r0, r1
 8016e9e:	ec43 2b10 	vmov	d0, r2, r3
 8016ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ea4:	42b7      	cmp	r7, r6
 8016ea6:	bf3a      	itte	cc
 8016ea8:	f1a5 0608 	subcc.w	r6, r5, #8
 8016eac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016eb0:	2100      	movcs	r1, #0
 8016eb2:	380b      	subs	r0, #11
 8016eb4:	d015      	beq.n	8016ee2 <__b2d+0x8e>
 8016eb6:	4084      	lsls	r4, r0
 8016eb8:	f1c0 0520 	rsb	r5, r0, #32
 8016ebc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016ec0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016ec4:	42be      	cmp	r6, r7
 8016ec6:	fa21 fc05 	lsr.w	ip, r1, r5
 8016eca:	ea44 030c 	orr.w	r3, r4, ip
 8016ece:	bf8c      	ite	hi
 8016ed0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016ed4:	2400      	movls	r4, #0
 8016ed6:	fa01 f000 	lsl.w	r0, r1, r0
 8016eda:	40ec      	lsrs	r4, r5
 8016edc:	ea40 0204 	orr.w	r2, r0, r4
 8016ee0:	e7dd      	b.n	8016e9e <__b2d+0x4a>
 8016ee2:	ea44 030c 	orr.w	r3, r4, ip
 8016ee6:	460a      	mov	r2, r1
 8016ee8:	e7d9      	b.n	8016e9e <__b2d+0x4a>
 8016eea:	bf00      	nop
 8016eec:	3ff00000 	.word	0x3ff00000

08016ef0 <__d2b>:
 8016ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ef4:	460e      	mov	r6, r1
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	ec59 8b10 	vmov	r8, r9, d0
 8016efc:	4615      	mov	r5, r2
 8016efe:	f7ff fcb5 	bl	801686c <_Balloc>
 8016f02:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016f06:	4607      	mov	r7, r0
 8016f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f0c:	bb34      	cbnz	r4, 8016f5c <__d2b+0x6c>
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	f1b8 0300 	subs.w	r3, r8, #0
 8016f14:	d027      	beq.n	8016f66 <__d2b+0x76>
 8016f16:	a802      	add	r0, sp, #8
 8016f18:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016f1c:	f7ff fd89 	bl	8016a32 <__lo0bits>
 8016f20:	9900      	ldr	r1, [sp, #0]
 8016f22:	b1f0      	cbz	r0, 8016f62 <__d2b+0x72>
 8016f24:	9a01      	ldr	r2, [sp, #4]
 8016f26:	f1c0 0320 	rsb	r3, r0, #32
 8016f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8016f2e:	430b      	orrs	r3, r1
 8016f30:	40c2      	lsrs	r2, r0
 8016f32:	617b      	str	r3, [r7, #20]
 8016f34:	9201      	str	r2, [sp, #4]
 8016f36:	9b01      	ldr	r3, [sp, #4]
 8016f38:	61bb      	str	r3, [r7, #24]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	bf14      	ite	ne
 8016f3e:	2102      	movne	r1, #2
 8016f40:	2101      	moveq	r1, #1
 8016f42:	6139      	str	r1, [r7, #16]
 8016f44:	b1c4      	cbz	r4, 8016f78 <__d2b+0x88>
 8016f46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016f4a:	4404      	add	r4, r0
 8016f4c:	6034      	str	r4, [r6, #0]
 8016f4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016f52:	6028      	str	r0, [r5, #0]
 8016f54:	4638      	mov	r0, r7
 8016f56:	b003      	add	sp, #12
 8016f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016f60:	e7d5      	b.n	8016f0e <__d2b+0x1e>
 8016f62:	6179      	str	r1, [r7, #20]
 8016f64:	e7e7      	b.n	8016f36 <__d2b+0x46>
 8016f66:	a801      	add	r0, sp, #4
 8016f68:	f7ff fd63 	bl	8016a32 <__lo0bits>
 8016f6c:	9b01      	ldr	r3, [sp, #4]
 8016f6e:	617b      	str	r3, [r7, #20]
 8016f70:	2101      	movs	r1, #1
 8016f72:	6139      	str	r1, [r7, #16]
 8016f74:	3020      	adds	r0, #32
 8016f76:	e7e5      	b.n	8016f44 <__d2b+0x54>
 8016f78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016f7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016f80:	6030      	str	r0, [r6, #0]
 8016f82:	6918      	ldr	r0, [r3, #16]
 8016f84:	f7ff fd36 	bl	80169f4 <__hi0bits>
 8016f88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016f8c:	e7e1      	b.n	8016f52 <__d2b+0x62>

08016f8e <__ratio>:
 8016f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f92:	4688      	mov	r8, r1
 8016f94:	4669      	mov	r1, sp
 8016f96:	4681      	mov	r9, r0
 8016f98:	f7ff ff5c 	bl	8016e54 <__b2d>
 8016f9c:	a901      	add	r1, sp, #4
 8016f9e:	4640      	mov	r0, r8
 8016fa0:	ec57 6b10 	vmov	r6, r7, d0
 8016fa4:	f7ff ff56 	bl	8016e54 <__b2d>
 8016fa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016fac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016fb0:	eba3 0c02 	sub.w	ip, r3, r2
 8016fb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016fb8:	1a9b      	subs	r3, r3, r2
 8016fba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016fbe:	ec5b ab10 	vmov	sl, fp, d0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	bfce      	itee	gt
 8016fc6:	463a      	movgt	r2, r7
 8016fc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016fcc:	465a      	movle	r2, fp
 8016fce:	4659      	mov	r1, fp
 8016fd0:	463d      	mov	r5, r7
 8016fd2:	bfd4      	ite	le
 8016fd4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016fd8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016fdc:	4630      	mov	r0, r6
 8016fde:	ee10 2a10 	vmov	r2, s0
 8016fe2:	460b      	mov	r3, r1
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	f7e9 fc49 	bl	800087c <__aeabi_ddiv>
 8016fea:	ec41 0b10 	vmov	d0, r0, r1
 8016fee:	b003      	add	sp, #12
 8016ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ff4 <__copybits>:
 8016ff4:	3901      	subs	r1, #1
 8016ff6:	b510      	push	{r4, lr}
 8016ff8:	1149      	asrs	r1, r1, #5
 8016ffa:	6914      	ldr	r4, [r2, #16]
 8016ffc:	3101      	adds	r1, #1
 8016ffe:	f102 0314 	add.w	r3, r2, #20
 8017002:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017006:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801700a:	42a3      	cmp	r3, r4
 801700c:	4602      	mov	r2, r0
 801700e:	d303      	bcc.n	8017018 <__copybits+0x24>
 8017010:	2300      	movs	r3, #0
 8017012:	428a      	cmp	r2, r1
 8017014:	d305      	bcc.n	8017022 <__copybits+0x2e>
 8017016:	bd10      	pop	{r4, pc}
 8017018:	f853 2b04 	ldr.w	r2, [r3], #4
 801701c:	f840 2b04 	str.w	r2, [r0], #4
 8017020:	e7f3      	b.n	801700a <__copybits+0x16>
 8017022:	f842 3b04 	str.w	r3, [r2], #4
 8017026:	e7f4      	b.n	8017012 <__copybits+0x1e>

08017028 <__any_on>:
 8017028:	f100 0214 	add.w	r2, r0, #20
 801702c:	6900      	ldr	r0, [r0, #16]
 801702e:	114b      	asrs	r3, r1, #5
 8017030:	4298      	cmp	r0, r3
 8017032:	b510      	push	{r4, lr}
 8017034:	db11      	blt.n	801705a <__any_on+0x32>
 8017036:	dd0a      	ble.n	801704e <__any_on+0x26>
 8017038:	f011 011f 	ands.w	r1, r1, #31
 801703c:	d007      	beq.n	801704e <__any_on+0x26>
 801703e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017042:	fa24 f001 	lsr.w	r0, r4, r1
 8017046:	fa00 f101 	lsl.w	r1, r0, r1
 801704a:	428c      	cmp	r4, r1
 801704c:	d10b      	bne.n	8017066 <__any_on+0x3e>
 801704e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017052:	4293      	cmp	r3, r2
 8017054:	d803      	bhi.n	801705e <__any_on+0x36>
 8017056:	2000      	movs	r0, #0
 8017058:	bd10      	pop	{r4, pc}
 801705a:	4603      	mov	r3, r0
 801705c:	e7f7      	b.n	801704e <__any_on+0x26>
 801705e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017062:	2900      	cmp	r1, #0
 8017064:	d0f5      	beq.n	8017052 <__any_on+0x2a>
 8017066:	2001      	movs	r0, #1
 8017068:	e7f6      	b.n	8017058 <__any_on+0x30>

0801706a <_calloc_r>:
 801706a:	b538      	push	{r3, r4, r5, lr}
 801706c:	fb02 f401 	mul.w	r4, r2, r1
 8017070:	4621      	mov	r1, r4
 8017072:	f000 f857 	bl	8017124 <_malloc_r>
 8017076:	4605      	mov	r5, r0
 8017078:	b118      	cbz	r0, 8017082 <_calloc_r+0x18>
 801707a:	4622      	mov	r2, r4
 801707c:	2100      	movs	r1, #0
 801707e:	f7fc fcaa 	bl	80139d6 <memset>
 8017082:	4628      	mov	r0, r5
 8017084:	bd38      	pop	{r3, r4, r5, pc}
	...

08017088 <_free_r>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	4605      	mov	r5, r0
 801708c:	2900      	cmp	r1, #0
 801708e:	d045      	beq.n	801711c <_free_r+0x94>
 8017090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017094:	1f0c      	subs	r4, r1, #4
 8017096:	2b00      	cmp	r3, #0
 8017098:	bfb8      	it	lt
 801709a:	18e4      	addlt	r4, r4, r3
 801709c:	f000 fe30 	bl	8017d00 <__malloc_lock>
 80170a0:	4a1f      	ldr	r2, [pc, #124]	; (8017120 <_free_r+0x98>)
 80170a2:	6813      	ldr	r3, [r2, #0]
 80170a4:	4610      	mov	r0, r2
 80170a6:	b933      	cbnz	r3, 80170b6 <_free_r+0x2e>
 80170a8:	6063      	str	r3, [r4, #4]
 80170aa:	6014      	str	r4, [r2, #0]
 80170ac:	4628      	mov	r0, r5
 80170ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170b2:	f000 be26 	b.w	8017d02 <__malloc_unlock>
 80170b6:	42a3      	cmp	r3, r4
 80170b8:	d90c      	bls.n	80170d4 <_free_r+0x4c>
 80170ba:	6821      	ldr	r1, [r4, #0]
 80170bc:	1862      	adds	r2, r4, r1
 80170be:	4293      	cmp	r3, r2
 80170c0:	bf04      	itt	eq
 80170c2:	681a      	ldreq	r2, [r3, #0]
 80170c4:	685b      	ldreq	r3, [r3, #4]
 80170c6:	6063      	str	r3, [r4, #4]
 80170c8:	bf04      	itt	eq
 80170ca:	1852      	addeq	r2, r2, r1
 80170cc:	6022      	streq	r2, [r4, #0]
 80170ce:	6004      	str	r4, [r0, #0]
 80170d0:	e7ec      	b.n	80170ac <_free_r+0x24>
 80170d2:	4613      	mov	r3, r2
 80170d4:	685a      	ldr	r2, [r3, #4]
 80170d6:	b10a      	cbz	r2, 80170dc <_free_r+0x54>
 80170d8:	42a2      	cmp	r2, r4
 80170da:	d9fa      	bls.n	80170d2 <_free_r+0x4a>
 80170dc:	6819      	ldr	r1, [r3, #0]
 80170de:	1858      	adds	r0, r3, r1
 80170e0:	42a0      	cmp	r0, r4
 80170e2:	d10b      	bne.n	80170fc <_free_r+0x74>
 80170e4:	6820      	ldr	r0, [r4, #0]
 80170e6:	4401      	add	r1, r0
 80170e8:	1858      	adds	r0, r3, r1
 80170ea:	4282      	cmp	r2, r0
 80170ec:	6019      	str	r1, [r3, #0]
 80170ee:	d1dd      	bne.n	80170ac <_free_r+0x24>
 80170f0:	6810      	ldr	r0, [r2, #0]
 80170f2:	6852      	ldr	r2, [r2, #4]
 80170f4:	605a      	str	r2, [r3, #4]
 80170f6:	4401      	add	r1, r0
 80170f8:	6019      	str	r1, [r3, #0]
 80170fa:	e7d7      	b.n	80170ac <_free_r+0x24>
 80170fc:	d902      	bls.n	8017104 <_free_r+0x7c>
 80170fe:	230c      	movs	r3, #12
 8017100:	602b      	str	r3, [r5, #0]
 8017102:	e7d3      	b.n	80170ac <_free_r+0x24>
 8017104:	6820      	ldr	r0, [r4, #0]
 8017106:	1821      	adds	r1, r4, r0
 8017108:	428a      	cmp	r2, r1
 801710a:	bf04      	itt	eq
 801710c:	6811      	ldreq	r1, [r2, #0]
 801710e:	6852      	ldreq	r2, [r2, #4]
 8017110:	6062      	str	r2, [r4, #4]
 8017112:	bf04      	itt	eq
 8017114:	1809      	addeq	r1, r1, r0
 8017116:	6021      	streq	r1, [r4, #0]
 8017118:	605c      	str	r4, [r3, #4]
 801711a:	e7c7      	b.n	80170ac <_free_r+0x24>
 801711c:	bd38      	pop	{r3, r4, r5, pc}
 801711e:	bf00      	nop
 8017120:	2003c494 	.word	0x2003c494

08017124 <_malloc_r>:
 8017124:	b570      	push	{r4, r5, r6, lr}
 8017126:	1ccd      	adds	r5, r1, #3
 8017128:	f025 0503 	bic.w	r5, r5, #3
 801712c:	3508      	adds	r5, #8
 801712e:	2d0c      	cmp	r5, #12
 8017130:	bf38      	it	cc
 8017132:	250c      	movcc	r5, #12
 8017134:	2d00      	cmp	r5, #0
 8017136:	4606      	mov	r6, r0
 8017138:	db01      	blt.n	801713e <_malloc_r+0x1a>
 801713a:	42a9      	cmp	r1, r5
 801713c:	d903      	bls.n	8017146 <_malloc_r+0x22>
 801713e:	230c      	movs	r3, #12
 8017140:	6033      	str	r3, [r6, #0]
 8017142:	2000      	movs	r0, #0
 8017144:	bd70      	pop	{r4, r5, r6, pc}
 8017146:	f000 fddb 	bl	8017d00 <__malloc_lock>
 801714a:	4a21      	ldr	r2, [pc, #132]	; (80171d0 <_malloc_r+0xac>)
 801714c:	6814      	ldr	r4, [r2, #0]
 801714e:	4621      	mov	r1, r4
 8017150:	b991      	cbnz	r1, 8017178 <_malloc_r+0x54>
 8017152:	4c20      	ldr	r4, [pc, #128]	; (80171d4 <_malloc_r+0xb0>)
 8017154:	6823      	ldr	r3, [r4, #0]
 8017156:	b91b      	cbnz	r3, 8017160 <_malloc_r+0x3c>
 8017158:	4630      	mov	r0, r6
 801715a:	f000 fc91 	bl	8017a80 <_sbrk_r>
 801715e:	6020      	str	r0, [r4, #0]
 8017160:	4629      	mov	r1, r5
 8017162:	4630      	mov	r0, r6
 8017164:	f000 fc8c 	bl	8017a80 <_sbrk_r>
 8017168:	1c43      	adds	r3, r0, #1
 801716a:	d124      	bne.n	80171b6 <_malloc_r+0x92>
 801716c:	230c      	movs	r3, #12
 801716e:	6033      	str	r3, [r6, #0]
 8017170:	4630      	mov	r0, r6
 8017172:	f000 fdc6 	bl	8017d02 <__malloc_unlock>
 8017176:	e7e4      	b.n	8017142 <_malloc_r+0x1e>
 8017178:	680b      	ldr	r3, [r1, #0]
 801717a:	1b5b      	subs	r3, r3, r5
 801717c:	d418      	bmi.n	80171b0 <_malloc_r+0x8c>
 801717e:	2b0b      	cmp	r3, #11
 8017180:	d90f      	bls.n	80171a2 <_malloc_r+0x7e>
 8017182:	600b      	str	r3, [r1, #0]
 8017184:	50cd      	str	r5, [r1, r3]
 8017186:	18cc      	adds	r4, r1, r3
 8017188:	4630      	mov	r0, r6
 801718a:	f000 fdba 	bl	8017d02 <__malloc_unlock>
 801718e:	f104 000b 	add.w	r0, r4, #11
 8017192:	1d23      	adds	r3, r4, #4
 8017194:	f020 0007 	bic.w	r0, r0, #7
 8017198:	1ac3      	subs	r3, r0, r3
 801719a:	d0d3      	beq.n	8017144 <_malloc_r+0x20>
 801719c:	425a      	negs	r2, r3
 801719e:	50e2      	str	r2, [r4, r3]
 80171a0:	e7d0      	b.n	8017144 <_malloc_r+0x20>
 80171a2:	428c      	cmp	r4, r1
 80171a4:	684b      	ldr	r3, [r1, #4]
 80171a6:	bf16      	itet	ne
 80171a8:	6063      	strne	r3, [r4, #4]
 80171aa:	6013      	streq	r3, [r2, #0]
 80171ac:	460c      	movne	r4, r1
 80171ae:	e7eb      	b.n	8017188 <_malloc_r+0x64>
 80171b0:	460c      	mov	r4, r1
 80171b2:	6849      	ldr	r1, [r1, #4]
 80171b4:	e7cc      	b.n	8017150 <_malloc_r+0x2c>
 80171b6:	1cc4      	adds	r4, r0, #3
 80171b8:	f024 0403 	bic.w	r4, r4, #3
 80171bc:	42a0      	cmp	r0, r4
 80171be:	d005      	beq.n	80171cc <_malloc_r+0xa8>
 80171c0:	1a21      	subs	r1, r4, r0
 80171c2:	4630      	mov	r0, r6
 80171c4:	f000 fc5c 	bl	8017a80 <_sbrk_r>
 80171c8:	3001      	adds	r0, #1
 80171ca:	d0cf      	beq.n	801716c <_malloc_r+0x48>
 80171cc:	6025      	str	r5, [r4, #0]
 80171ce:	e7db      	b.n	8017188 <_malloc_r+0x64>
 80171d0:	2003c494 	.word	0x2003c494
 80171d4:	2003c498 	.word	0x2003c498

080171d8 <__ssputs_r>:
 80171d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171dc:	688e      	ldr	r6, [r1, #8]
 80171de:	429e      	cmp	r6, r3
 80171e0:	4682      	mov	sl, r0
 80171e2:	460c      	mov	r4, r1
 80171e4:	4690      	mov	r8, r2
 80171e6:	4699      	mov	r9, r3
 80171e8:	d837      	bhi.n	801725a <__ssputs_r+0x82>
 80171ea:	898a      	ldrh	r2, [r1, #12]
 80171ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80171f0:	d031      	beq.n	8017256 <__ssputs_r+0x7e>
 80171f2:	6825      	ldr	r5, [r4, #0]
 80171f4:	6909      	ldr	r1, [r1, #16]
 80171f6:	1a6f      	subs	r7, r5, r1
 80171f8:	6965      	ldr	r5, [r4, #20]
 80171fa:	2302      	movs	r3, #2
 80171fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017200:	fb95 f5f3 	sdiv	r5, r5, r3
 8017204:	f109 0301 	add.w	r3, r9, #1
 8017208:	443b      	add	r3, r7
 801720a:	429d      	cmp	r5, r3
 801720c:	bf38      	it	cc
 801720e:	461d      	movcc	r5, r3
 8017210:	0553      	lsls	r3, r2, #21
 8017212:	d530      	bpl.n	8017276 <__ssputs_r+0x9e>
 8017214:	4629      	mov	r1, r5
 8017216:	f7ff ff85 	bl	8017124 <_malloc_r>
 801721a:	4606      	mov	r6, r0
 801721c:	b950      	cbnz	r0, 8017234 <__ssputs_r+0x5c>
 801721e:	230c      	movs	r3, #12
 8017220:	f8ca 3000 	str.w	r3, [sl]
 8017224:	89a3      	ldrh	r3, [r4, #12]
 8017226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722a:	81a3      	strh	r3, [r4, #12]
 801722c:	f04f 30ff 	mov.w	r0, #4294967295
 8017230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017234:	463a      	mov	r2, r7
 8017236:	6921      	ldr	r1, [r4, #16]
 8017238:	f7fc fbc2 	bl	80139c0 <memcpy>
 801723c:	89a3      	ldrh	r3, [r4, #12]
 801723e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017246:	81a3      	strh	r3, [r4, #12]
 8017248:	6126      	str	r6, [r4, #16]
 801724a:	6165      	str	r5, [r4, #20]
 801724c:	443e      	add	r6, r7
 801724e:	1bed      	subs	r5, r5, r7
 8017250:	6026      	str	r6, [r4, #0]
 8017252:	60a5      	str	r5, [r4, #8]
 8017254:	464e      	mov	r6, r9
 8017256:	454e      	cmp	r6, r9
 8017258:	d900      	bls.n	801725c <__ssputs_r+0x84>
 801725a:	464e      	mov	r6, r9
 801725c:	4632      	mov	r2, r6
 801725e:	4641      	mov	r1, r8
 8017260:	6820      	ldr	r0, [r4, #0]
 8017262:	f000 fd34 	bl	8017cce <memmove>
 8017266:	68a3      	ldr	r3, [r4, #8]
 8017268:	1b9b      	subs	r3, r3, r6
 801726a:	60a3      	str	r3, [r4, #8]
 801726c:	6823      	ldr	r3, [r4, #0]
 801726e:	441e      	add	r6, r3
 8017270:	6026      	str	r6, [r4, #0]
 8017272:	2000      	movs	r0, #0
 8017274:	e7dc      	b.n	8017230 <__ssputs_r+0x58>
 8017276:	462a      	mov	r2, r5
 8017278:	f000 fd44 	bl	8017d04 <_realloc_r>
 801727c:	4606      	mov	r6, r0
 801727e:	2800      	cmp	r0, #0
 8017280:	d1e2      	bne.n	8017248 <__ssputs_r+0x70>
 8017282:	6921      	ldr	r1, [r4, #16]
 8017284:	4650      	mov	r0, sl
 8017286:	f7ff feff 	bl	8017088 <_free_r>
 801728a:	e7c8      	b.n	801721e <__ssputs_r+0x46>

0801728c <_svfiprintf_r>:
 801728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017290:	461d      	mov	r5, r3
 8017292:	898b      	ldrh	r3, [r1, #12]
 8017294:	061f      	lsls	r7, r3, #24
 8017296:	b09d      	sub	sp, #116	; 0x74
 8017298:	4680      	mov	r8, r0
 801729a:	460c      	mov	r4, r1
 801729c:	4616      	mov	r6, r2
 801729e:	d50f      	bpl.n	80172c0 <_svfiprintf_r+0x34>
 80172a0:	690b      	ldr	r3, [r1, #16]
 80172a2:	b96b      	cbnz	r3, 80172c0 <_svfiprintf_r+0x34>
 80172a4:	2140      	movs	r1, #64	; 0x40
 80172a6:	f7ff ff3d 	bl	8017124 <_malloc_r>
 80172aa:	6020      	str	r0, [r4, #0]
 80172ac:	6120      	str	r0, [r4, #16]
 80172ae:	b928      	cbnz	r0, 80172bc <_svfiprintf_r+0x30>
 80172b0:	230c      	movs	r3, #12
 80172b2:	f8c8 3000 	str.w	r3, [r8]
 80172b6:	f04f 30ff 	mov.w	r0, #4294967295
 80172ba:	e0c8      	b.n	801744e <_svfiprintf_r+0x1c2>
 80172bc:	2340      	movs	r3, #64	; 0x40
 80172be:	6163      	str	r3, [r4, #20]
 80172c0:	2300      	movs	r3, #0
 80172c2:	9309      	str	r3, [sp, #36]	; 0x24
 80172c4:	2320      	movs	r3, #32
 80172c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172ca:	2330      	movs	r3, #48	; 0x30
 80172cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172d0:	9503      	str	r5, [sp, #12]
 80172d2:	f04f 0b01 	mov.w	fp, #1
 80172d6:	4637      	mov	r7, r6
 80172d8:	463d      	mov	r5, r7
 80172da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80172de:	b10b      	cbz	r3, 80172e4 <_svfiprintf_r+0x58>
 80172e0:	2b25      	cmp	r3, #37	; 0x25
 80172e2:	d13e      	bne.n	8017362 <_svfiprintf_r+0xd6>
 80172e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80172e8:	d00b      	beq.n	8017302 <_svfiprintf_r+0x76>
 80172ea:	4653      	mov	r3, sl
 80172ec:	4632      	mov	r2, r6
 80172ee:	4621      	mov	r1, r4
 80172f0:	4640      	mov	r0, r8
 80172f2:	f7ff ff71 	bl	80171d8 <__ssputs_r>
 80172f6:	3001      	adds	r0, #1
 80172f8:	f000 80a4 	beq.w	8017444 <_svfiprintf_r+0x1b8>
 80172fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172fe:	4453      	add	r3, sl
 8017300:	9309      	str	r3, [sp, #36]	; 0x24
 8017302:	783b      	ldrb	r3, [r7, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	f000 809d 	beq.w	8017444 <_svfiprintf_r+0x1b8>
 801730a:	2300      	movs	r3, #0
 801730c:	f04f 32ff 	mov.w	r2, #4294967295
 8017310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017314:	9304      	str	r3, [sp, #16]
 8017316:	9307      	str	r3, [sp, #28]
 8017318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801731c:	931a      	str	r3, [sp, #104]	; 0x68
 801731e:	462f      	mov	r7, r5
 8017320:	2205      	movs	r2, #5
 8017322:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017326:	4850      	ldr	r0, [pc, #320]	; (8017468 <_svfiprintf_r+0x1dc>)
 8017328:	f7e8 ff72 	bl	8000210 <memchr>
 801732c:	9b04      	ldr	r3, [sp, #16]
 801732e:	b9d0      	cbnz	r0, 8017366 <_svfiprintf_r+0xda>
 8017330:	06d9      	lsls	r1, r3, #27
 8017332:	bf44      	itt	mi
 8017334:	2220      	movmi	r2, #32
 8017336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801733a:	071a      	lsls	r2, r3, #28
 801733c:	bf44      	itt	mi
 801733e:	222b      	movmi	r2, #43	; 0x2b
 8017340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017344:	782a      	ldrb	r2, [r5, #0]
 8017346:	2a2a      	cmp	r2, #42	; 0x2a
 8017348:	d015      	beq.n	8017376 <_svfiprintf_r+0xea>
 801734a:	9a07      	ldr	r2, [sp, #28]
 801734c:	462f      	mov	r7, r5
 801734e:	2000      	movs	r0, #0
 8017350:	250a      	movs	r5, #10
 8017352:	4639      	mov	r1, r7
 8017354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017358:	3b30      	subs	r3, #48	; 0x30
 801735a:	2b09      	cmp	r3, #9
 801735c:	d94d      	bls.n	80173fa <_svfiprintf_r+0x16e>
 801735e:	b1b8      	cbz	r0, 8017390 <_svfiprintf_r+0x104>
 8017360:	e00f      	b.n	8017382 <_svfiprintf_r+0xf6>
 8017362:	462f      	mov	r7, r5
 8017364:	e7b8      	b.n	80172d8 <_svfiprintf_r+0x4c>
 8017366:	4a40      	ldr	r2, [pc, #256]	; (8017468 <_svfiprintf_r+0x1dc>)
 8017368:	1a80      	subs	r0, r0, r2
 801736a:	fa0b f000 	lsl.w	r0, fp, r0
 801736e:	4318      	orrs	r0, r3
 8017370:	9004      	str	r0, [sp, #16]
 8017372:	463d      	mov	r5, r7
 8017374:	e7d3      	b.n	801731e <_svfiprintf_r+0x92>
 8017376:	9a03      	ldr	r2, [sp, #12]
 8017378:	1d11      	adds	r1, r2, #4
 801737a:	6812      	ldr	r2, [r2, #0]
 801737c:	9103      	str	r1, [sp, #12]
 801737e:	2a00      	cmp	r2, #0
 8017380:	db01      	blt.n	8017386 <_svfiprintf_r+0xfa>
 8017382:	9207      	str	r2, [sp, #28]
 8017384:	e004      	b.n	8017390 <_svfiprintf_r+0x104>
 8017386:	4252      	negs	r2, r2
 8017388:	f043 0302 	orr.w	r3, r3, #2
 801738c:	9207      	str	r2, [sp, #28]
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	783b      	ldrb	r3, [r7, #0]
 8017392:	2b2e      	cmp	r3, #46	; 0x2e
 8017394:	d10c      	bne.n	80173b0 <_svfiprintf_r+0x124>
 8017396:	787b      	ldrb	r3, [r7, #1]
 8017398:	2b2a      	cmp	r3, #42	; 0x2a
 801739a:	d133      	bne.n	8017404 <_svfiprintf_r+0x178>
 801739c:	9b03      	ldr	r3, [sp, #12]
 801739e:	1d1a      	adds	r2, r3, #4
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	9203      	str	r2, [sp, #12]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	bfb8      	it	lt
 80173a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80173ac:	3702      	adds	r7, #2
 80173ae:	9305      	str	r3, [sp, #20]
 80173b0:	4d2e      	ldr	r5, [pc, #184]	; (801746c <_svfiprintf_r+0x1e0>)
 80173b2:	7839      	ldrb	r1, [r7, #0]
 80173b4:	2203      	movs	r2, #3
 80173b6:	4628      	mov	r0, r5
 80173b8:	f7e8 ff2a 	bl	8000210 <memchr>
 80173bc:	b138      	cbz	r0, 80173ce <_svfiprintf_r+0x142>
 80173be:	2340      	movs	r3, #64	; 0x40
 80173c0:	1b40      	subs	r0, r0, r5
 80173c2:	fa03 f000 	lsl.w	r0, r3, r0
 80173c6:	9b04      	ldr	r3, [sp, #16]
 80173c8:	4303      	orrs	r3, r0
 80173ca:	3701      	adds	r7, #1
 80173cc:	9304      	str	r3, [sp, #16]
 80173ce:	7839      	ldrb	r1, [r7, #0]
 80173d0:	4827      	ldr	r0, [pc, #156]	; (8017470 <_svfiprintf_r+0x1e4>)
 80173d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173d6:	2206      	movs	r2, #6
 80173d8:	1c7e      	adds	r6, r7, #1
 80173da:	f7e8 ff19 	bl	8000210 <memchr>
 80173de:	2800      	cmp	r0, #0
 80173e0:	d038      	beq.n	8017454 <_svfiprintf_r+0x1c8>
 80173e2:	4b24      	ldr	r3, [pc, #144]	; (8017474 <_svfiprintf_r+0x1e8>)
 80173e4:	bb13      	cbnz	r3, 801742c <_svfiprintf_r+0x1a0>
 80173e6:	9b03      	ldr	r3, [sp, #12]
 80173e8:	3307      	adds	r3, #7
 80173ea:	f023 0307 	bic.w	r3, r3, #7
 80173ee:	3308      	adds	r3, #8
 80173f0:	9303      	str	r3, [sp, #12]
 80173f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f4:	444b      	add	r3, r9
 80173f6:	9309      	str	r3, [sp, #36]	; 0x24
 80173f8:	e76d      	b.n	80172d6 <_svfiprintf_r+0x4a>
 80173fa:	fb05 3202 	mla	r2, r5, r2, r3
 80173fe:	2001      	movs	r0, #1
 8017400:	460f      	mov	r7, r1
 8017402:	e7a6      	b.n	8017352 <_svfiprintf_r+0xc6>
 8017404:	2300      	movs	r3, #0
 8017406:	3701      	adds	r7, #1
 8017408:	9305      	str	r3, [sp, #20]
 801740a:	4619      	mov	r1, r3
 801740c:	250a      	movs	r5, #10
 801740e:	4638      	mov	r0, r7
 8017410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017414:	3a30      	subs	r2, #48	; 0x30
 8017416:	2a09      	cmp	r2, #9
 8017418:	d903      	bls.n	8017422 <_svfiprintf_r+0x196>
 801741a:	2b00      	cmp	r3, #0
 801741c:	d0c8      	beq.n	80173b0 <_svfiprintf_r+0x124>
 801741e:	9105      	str	r1, [sp, #20]
 8017420:	e7c6      	b.n	80173b0 <_svfiprintf_r+0x124>
 8017422:	fb05 2101 	mla	r1, r5, r1, r2
 8017426:	2301      	movs	r3, #1
 8017428:	4607      	mov	r7, r0
 801742a:	e7f0      	b.n	801740e <_svfiprintf_r+0x182>
 801742c:	ab03      	add	r3, sp, #12
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	4622      	mov	r2, r4
 8017432:	4b11      	ldr	r3, [pc, #68]	; (8017478 <_svfiprintf_r+0x1ec>)
 8017434:	a904      	add	r1, sp, #16
 8017436:	4640      	mov	r0, r8
 8017438:	f7fc fb6a 	bl	8013b10 <_printf_float>
 801743c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017440:	4681      	mov	r9, r0
 8017442:	d1d6      	bne.n	80173f2 <_svfiprintf_r+0x166>
 8017444:	89a3      	ldrh	r3, [r4, #12]
 8017446:	065b      	lsls	r3, r3, #25
 8017448:	f53f af35 	bmi.w	80172b6 <_svfiprintf_r+0x2a>
 801744c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801744e:	b01d      	add	sp, #116	; 0x74
 8017450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017454:	ab03      	add	r3, sp, #12
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	4622      	mov	r2, r4
 801745a:	4b07      	ldr	r3, [pc, #28]	; (8017478 <_svfiprintf_r+0x1ec>)
 801745c:	a904      	add	r1, sp, #16
 801745e:	4640      	mov	r0, r8
 8017460:	f7fc fe0c 	bl	801407c <_printf_i>
 8017464:	e7ea      	b.n	801743c <_svfiprintf_r+0x1b0>
 8017466:	bf00      	nop
 8017468:	0801876c 	.word	0x0801876c
 801746c:	08018772 	.word	0x08018772
 8017470:	08018776 	.word	0x08018776
 8017474:	08013b11 	.word	0x08013b11
 8017478:	080171d9 	.word	0x080171d9

0801747c <_sungetc_r>:
 801747c:	b538      	push	{r3, r4, r5, lr}
 801747e:	1c4b      	adds	r3, r1, #1
 8017480:	4614      	mov	r4, r2
 8017482:	d103      	bne.n	801748c <_sungetc_r+0x10>
 8017484:	f04f 35ff 	mov.w	r5, #4294967295
 8017488:	4628      	mov	r0, r5
 801748a:	bd38      	pop	{r3, r4, r5, pc}
 801748c:	8993      	ldrh	r3, [r2, #12]
 801748e:	f023 0320 	bic.w	r3, r3, #32
 8017492:	8193      	strh	r3, [r2, #12]
 8017494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017496:	6852      	ldr	r2, [r2, #4]
 8017498:	b2cd      	uxtb	r5, r1
 801749a:	b18b      	cbz	r3, 80174c0 <_sungetc_r+0x44>
 801749c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801749e:	4293      	cmp	r3, r2
 80174a0:	dd08      	ble.n	80174b4 <_sungetc_r+0x38>
 80174a2:	6823      	ldr	r3, [r4, #0]
 80174a4:	1e5a      	subs	r2, r3, #1
 80174a6:	6022      	str	r2, [r4, #0]
 80174a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80174ac:	6863      	ldr	r3, [r4, #4]
 80174ae:	3301      	adds	r3, #1
 80174b0:	6063      	str	r3, [r4, #4]
 80174b2:	e7e9      	b.n	8017488 <_sungetc_r+0xc>
 80174b4:	4621      	mov	r1, r4
 80174b6:	f000 fbc3 	bl	8017c40 <__submore>
 80174ba:	2800      	cmp	r0, #0
 80174bc:	d0f1      	beq.n	80174a2 <_sungetc_r+0x26>
 80174be:	e7e1      	b.n	8017484 <_sungetc_r+0x8>
 80174c0:	6921      	ldr	r1, [r4, #16]
 80174c2:	6823      	ldr	r3, [r4, #0]
 80174c4:	b151      	cbz	r1, 80174dc <_sungetc_r+0x60>
 80174c6:	4299      	cmp	r1, r3
 80174c8:	d208      	bcs.n	80174dc <_sungetc_r+0x60>
 80174ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80174ce:	42a9      	cmp	r1, r5
 80174d0:	d104      	bne.n	80174dc <_sungetc_r+0x60>
 80174d2:	3b01      	subs	r3, #1
 80174d4:	3201      	adds	r2, #1
 80174d6:	6023      	str	r3, [r4, #0]
 80174d8:	6062      	str	r2, [r4, #4]
 80174da:	e7d5      	b.n	8017488 <_sungetc_r+0xc>
 80174dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80174e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174e4:	6363      	str	r3, [r4, #52]	; 0x34
 80174e6:	2303      	movs	r3, #3
 80174e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80174ea:	4623      	mov	r3, r4
 80174ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80174f0:	6023      	str	r3, [r4, #0]
 80174f2:	2301      	movs	r3, #1
 80174f4:	e7dc      	b.n	80174b0 <_sungetc_r+0x34>

080174f6 <__ssrefill_r>:
 80174f6:	b510      	push	{r4, lr}
 80174f8:	460c      	mov	r4, r1
 80174fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80174fc:	b169      	cbz	r1, 801751a <__ssrefill_r+0x24>
 80174fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017502:	4299      	cmp	r1, r3
 8017504:	d001      	beq.n	801750a <__ssrefill_r+0x14>
 8017506:	f7ff fdbf 	bl	8017088 <_free_r>
 801750a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801750c:	6063      	str	r3, [r4, #4]
 801750e:	2000      	movs	r0, #0
 8017510:	6360      	str	r0, [r4, #52]	; 0x34
 8017512:	b113      	cbz	r3, 801751a <__ssrefill_r+0x24>
 8017514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017516:	6023      	str	r3, [r4, #0]
 8017518:	bd10      	pop	{r4, pc}
 801751a:	6923      	ldr	r3, [r4, #16]
 801751c:	6023      	str	r3, [r4, #0]
 801751e:	2300      	movs	r3, #0
 8017520:	6063      	str	r3, [r4, #4]
 8017522:	89a3      	ldrh	r3, [r4, #12]
 8017524:	f043 0320 	orr.w	r3, r3, #32
 8017528:	81a3      	strh	r3, [r4, #12]
 801752a:	f04f 30ff 	mov.w	r0, #4294967295
 801752e:	e7f3      	b.n	8017518 <__ssrefill_r+0x22>

08017530 <__ssvfiscanf_r>:
 8017530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017534:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017538:	460c      	mov	r4, r1
 801753a:	2100      	movs	r1, #0
 801753c:	9144      	str	r1, [sp, #272]	; 0x110
 801753e:	9145      	str	r1, [sp, #276]	; 0x114
 8017540:	499f      	ldr	r1, [pc, #636]	; (80177c0 <__ssvfiscanf_r+0x290>)
 8017542:	91a0      	str	r1, [sp, #640]	; 0x280
 8017544:	f10d 0804 	add.w	r8, sp, #4
 8017548:	499e      	ldr	r1, [pc, #632]	; (80177c4 <__ssvfiscanf_r+0x294>)
 801754a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80177c8 <__ssvfiscanf_r+0x298>
 801754e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017552:	4606      	mov	r6, r0
 8017554:	4692      	mov	sl, r2
 8017556:	91a1      	str	r1, [sp, #644]	; 0x284
 8017558:	9300      	str	r3, [sp, #0]
 801755a:	270a      	movs	r7, #10
 801755c:	f89a 3000 	ldrb.w	r3, [sl]
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 812a 	beq.w	80177ba <__ssvfiscanf_r+0x28a>
 8017566:	4655      	mov	r5, sl
 8017568:	f7ff f948 	bl	80167fc <__locale_ctype_ptr>
 801756c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017570:	4458      	add	r0, fp
 8017572:	7843      	ldrb	r3, [r0, #1]
 8017574:	f013 0308 	ands.w	r3, r3, #8
 8017578:	d01c      	beq.n	80175b4 <__ssvfiscanf_r+0x84>
 801757a:	6863      	ldr	r3, [r4, #4]
 801757c:	2b00      	cmp	r3, #0
 801757e:	dd12      	ble.n	80175a6 <__ssvfiscanf_r+0x76>
 8017580:	f7ff f93c 	bl	80167fc <__locale_ctype_ptr>
 8017584:	6823      	ldr	r3, [r4, #0]
 8017586:	781a      	ldrb	r2, [r3, #0]
 8017588:	4410      	add	r0, r2
 801758a:	7842      	ldrb	r2, [r0, #1]
 801758c:	0712      	lsls	r2, r2, #28
 801758e:	d401      	bmi.n	8017594 <__ssvfiscanf_r+0x64>
 8017590:	46aa      	mov	sl, r5
 8017592:	e7e3      	b.n	801755c <__ssvfiscanf_r+0x2c>
 8017594:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017596:	3201      	adds	r2, #1
 8017598:	9245      	str	r2, [sp, #276]	; 0x114
 801759a:	6862      	ldr	r2, [r4, #4]
 801759c:	3301      	adds	r3, #1
 801759e:	3a01      	subs	r2, #1
 80175a0:	6062      	str	r2, [r4, #4]
 80175a2:	6023      	str	r3, [r4, #0]
 80175a4:	e7e9      	b.n	801757a <__ssvfiscanf_r+0x4a>
 80175a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80175a8:	4621      	mov	r1, r4
 80175aa:	4630      	mov	r0, r6
 80175ac:	4798      	blx	r3
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d0e6      	beq.n	8017580 <__ssvfiscanf_r+0x50>
 80175b2:	e7ed      	b.n	8017590 <__ssvfiscanf_r+0x60>
 80175b4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80175b8:	f040 8082 	bne.w	80176c0 <__ssvfiscanf_r+0x190>
 80175bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80175be:	9341      	str	r3, [sp, #260]	; 0x104
 80175c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80175c4:	2b2a      	cmp	r3, #42	; 0x2a
 80175c6:	d103      	bne.n	80175d0 <__ssvfiscanf_r+0xa0>
 80175c8:	2310      	movs	r3, #16
 80175ca:	9341      	str	r3, [sp, #260]	; 0x104
 80175cc:	f10a 0502 	add.w	r5, sl, #2
 80175d0:	46aa      	mov	sl, r5
 80175d2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80175d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80175da:	2a09      	cmp	r2, #9
 80175dc:	d922      	bls.n	8017624 <__ssvfiscanf_r+0xf4>
 80175de:	2203      	movs	r2, #3
 80175e0:	4879      	ldr	r0, [pc, #484]	; (80177c8 <__ssvfiscanf_r+0x298>)
 80175e2:	f7e8 fe15 	bl	8000210 <memchr>
 80175e6:	b138      	cbz	r0, 80175f8 <__ssvfiscanf_r+0xc8>
 80175e8:	eba0 0309 	sub.w	r3, r0, r9
 80175ec:	2001      	movs	r0, #1
 80175ee:	4098      	lsls	r0, r3
 80175f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175f2:	4318      	orrs	r0, r3
 80175f4:	9041      	str	r0, [sp, #260]	; 0x104
 80175f6:	46aa      	mov	sl, r5
 80175f8:	f89a 3000 	ldrb.w	r3, [sl]
 80175fc:	2b67      	cmp	r3, #103	; 0x67
 80175fe:	f10a 0501 	add.w	r5, sl, #1
 8017602:	d82b      	bhi.n	801765c <__ssvfiscanf_r+0x12c>
 8017604:	2b65      	cmp	r3, #101	; 0x65
 8017606:	f080 809f 	bcs.w	8017748 <__ssvfiscanf_r+0x218>
 801760a:	2b47      	cmp	r3, #71	; 0x47
 801760c:	d810      	bhi.n	8017630 <__ssvfiscanf_r+0x100>
 801760e:	2b45      	cmp	r3, #69	; 0x45
 8017610:	f080 809a 	bcs.w	8017748 <__ssvfiscanf_r+0x218>
 8017614:	2b00      	cmp	r3, #0
 8017616:	d06c      	beq.n	80176f2 <__ssvfiscanf_r+0x1c2>
 8017618:	2b25      	cmp	r3, #37	; 0x25
 801761a:	d051      	beq.n	80176c0 <__ssvfiscanf_r+0x190>
 801761c:	2303      	movs	r3, #3
 801761e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017620:	9742      	str	r7, [sp, #264]	; 0x108
 8017622:	e027      	b.n	8017674 <__ssvfiscanf_r+0x144>
 8017624:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017626:	fb07 1303 	mla	r3, r7, r3, r1
 801762a:	3b30      	subs	r3, #48	; 0x30
 801762c:	9343      	str	r3, [sp, #268]	; 0x10c
 801762e:	e7cf      	b.n	80175d0 <__ssvfiscanf_r+0xa0>
 8017630:	2b5b      	cmp	r3, #91	; 0x5b
 8017632:	d06a      	beq.n	801770a <__ssvfiscanf_r+0x1da>
 8017634:	d80c      	bhi.n	8017650 <__ssvfiscanf_r+0x120>
 8017636:	2b58      	cmp	r3, #88	; 0x58
 8017638:	d1f0      	bne.n	801761c <__ssvfiscanf_r+0xec>
 801763a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801763c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017640:	9241      	str	r2, [sp, #260]	; 0x104
 8017642:	2210      	movs	r2, #16
 8017644:	9242      	str	r2, [sp, #264]	; 0x108
 8017646:	2b6e      	cmp	r3, #110	; 0x6e
 8017648:	bf8c      	ite	hi
 801764a:	2304      	movhi	r3, #4
 801764c:	2303      	movls	r3, #3
 801764e:	e010      	b.n	8017672 <__ssvfiscanf_r+0x142>
 8017650:	2b63      	cmp	r3, #99	; 0x63
 8017652:	d065      	beq.n	8017720 <__ssvfiscanf_r+0x1f0>
 8017654:	2b64      	cmp	r3, #100	; 0x64
 8017656:	d1e1      	bne.n	801761c <__ssvfiscanf_r+0xec>
 8017658:	9742      	str	r7, [sp, #264]	; 0x108
 801765a:	e7f4      	b.n	8017646 <__ssvfiscanf_r+0x116>
 801765c:	2b70      	cmp	r3, #112	; 0x70
 801765e:	d04b      	beq.n	80176f8 <__ssvfiscanf_r+0x1c8>
 8017660:	d826      	bhi.n	80176b0 <__ssvfiscanf_r+0x180>
 8017662:	2b6e      	cmp	r3, #110	; 0x6e
 8017664:	d062      	beq.n	801772c <__ssvfiscanf_r+0x1fc>
 8017666:	d84c      	bhi.n	8017702 <__ssvfiscanf_r+0x1d2>
 8017668:	2b69      	cmp	r3, #105	; 0x69
 801766a:	d1d7      	bne.n	801761c <__ssvfiscanf_r+0xec>
 801766c:	2300      	movs	r3, #0
 801766e:	9342      	str	r3, [sp, #264]	; 0x108
 8017670:	2303      	movs	r3, #3
 8017672:	9347      	str	r3, [sp, #284]	; 0x11c
 8017674:	6863      	ldr	r3, [r4, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	dd68      	ble.n	801774c <__ssvfiscanf_r+0x21c>
 801767a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801767c:	0659      	lsls	r1, r3, #25
 801767e:	d407      	bmi.n	8017690 <__ssvfiscanf_r+0x160>
 8017680:	f7ff f8bc 	bl	80167fc <__locale_ctype_ptr>
 8017684:	6823      	ldr	r3, [r4, #0]
 8017686:	781a      	ldrb	r2, [r3, #0]
 8017688:	4410      	add	r0, r2
 801768a:	7842      	ldrb	r2, [r0, #1]
 801768c:	0712      	lsls	r2, r2, #28
 801768e:	d464      	bmi.n	801775a <__ssvfiscanf_r+0x22a>
 8017690:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017692:	2b02      	cmp	r3, #2
 8017694:	dc73      	bgt.n	801777e <__ssvfiscanf_r+0x24e>
 8017696:	466b      	mov	r3, sp
 8017698:	4622      	mov	r2, r4
 801769a:	a941      	add	r1, sp, #260	; 0x104
 801769c:	4630      	mov	r0, r6
 801769e:	f000 f897 	bl	80177d0 <_scanf_chars>
 80176a2:	2801      	cmp	r0, #1
 80176a4:	f000 8089 	beq.w	80177ba <__ssvfiscanf_r+0x28a>
 80176a8:	2802      	cmp	r0, #2
 80176aa:	f47f af71 	bne.w	8017590 <__ssvfiscanf_r+0x60>
 80176ae:	e01d      	b.n	80176ec <__ssvfiscanf_r+0x1bc>
 80176b0:	2b75      	cmp	r3, #117	; 0x75
 80176b2:	d0d1      	beq.n	8017658 <__ssvfiscanf_r+0x128>
 80176b4:	2b78      	cmp	r3, #120	; 0x78
 80176b6:	d0c0      	beq.n	801763a <__ssvfiscanf_r+0x10a>
 80176b8:	2b73      	cmp	r3, #115	; 0x73
 80176ba:	d1af      	bne.n	801761c <__ssvfiscanf_r+0xec>
 80176bc:	2302      	movs	r3, #2
 80176be:	e7d8      	b.n	8017672 <__ssvfiscanf_r+0x142>
 80176c0:	6863      	ldr	r3, [r4, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	dd0c      	ble.n	80176e0 <__ssvfiscanf_r+0x1b0>
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	781a      	ldrb	r2, [r3, #0]
 80176ca:	455a      	cmp	r2, fp
 80176cc:	d175      	bne.n	80177ba <__ssvfiscanf_r+0x28a>
 80176ce:	3301      	adds	r3, #1
 80176d0:	6862      	ldr	r2, [r4, #4]
 80176d2:	6023      	str	r3, [r4, #0]
 80176d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80176d6:	3a01      	subs	r2, #1
 80176d8:	3301      	adds	r3, #1
 80176da:	6062      	str	r2, [r4, #4]
 80176dc:	9345      	str	r3, [sp, #276]	; 0x114
 80176de:	e757      	b.n	8017590 <__ssvfiscanf_r+0x60>
 80176e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176e2:	4621      	mov	r1, r4
 80176e4:	4630      	mov	r0, r6
 80176e6:	4798      	blx	r3
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d0ec      	beq.n	80176c6 <__ssvfiscanf_r+0x196>
 80176ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d159      	bne.n	80177a6 <__ssvfiscanf_r+0x276>
 80176f2:	f04f 30ff 	mov.w	r0, #4294967295
 80176f6:	e05c      	b.n	80177b2 <__ssvfiscanf_r+0x282>
 80176f8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80176fa:	f042 0220 	orr.w	r2, r2, #32
 80176fe:	9241      	str	r2, [sp, #260]	; 0x104
 8017700:	e79b      	b.n	801763a <__ssvfiscanf_r+0x10a>
 8017702:	2308      	movs	r3, #8
 8017704:	9342      	str	r3, [sp, #264]	; 0x108
 8017706:	2304      	movs	r3, #4
 8017708:	e7b3      	b.n	8017672 <__ssvfiscanf_r+0x142>
 801770a:	4629      	mov	r1, r5
 801770c:	4640      	mov	r0, r8
 801770e:	f000 f9c7 	bl	8017aa0 <__sccl>
 8017712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017718:	9341      	str	r3, [sp, #260]	; 0x104
 801771a:	4605      	mov	r5, r0
 801771c:	2301      	movs	r3, #1
 801771e:	e7a8      	b.n	8017672 <__ssvfiscanf_r+0x142>
 8017720:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017726:	9341      	str	r3, [sp, #260]	; 0x104
 8017728:	2300      	movs	r3, #0
 801772a:	e7a2      	b.n	8017672 <__ssvfiscanf_r+0x142>
 801772c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801772e:	06c3      	lsls	r3, r0, #27
 8017730:	f53f af2e 	bmi.w	8017590 <__ssvfiscanf_r+0x60>
 8017734:	9b00      	ldr	r3, [sp, #0]
 8017736:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017738:	1d19      	adds	r1, r3, #4
 801773a:	9100      	str	r1, [sp, #0]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	07c0      	lsls	r0, r0, #31
 8017740:	bf4c      	ite	mi
 8017742:	801a      	strhmi	r2, [r3, #0]
 8017744:	601a      	strpl	r2, [r3, #0]
 8017746:	e723      	b.n	8017590 <__ssvfiscanf_r+0x60>
 8017748:	2305      	movs	r3, #5
 801774a:	e792      	b.n	8017672 <__ssvfiscanf_r+0x142>
 801774c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801774e:	4621      	mov	r1, r4
 8017750:	4630      	mov	r0, r6
 8017752:	4798      	blx	r3
 8017754:	2800      	cmp	r0, #0
 8017756:	d090      	beq.n	801767a <__ssvfiscanf_r+0x14a>
 8017758:	e7c8      	b.n	80176ec <__ssvfiscanf_r+0x1bc>
 801775a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801775c:	3201      	adds	r2, #1
 801775e:	9245      	str	r2, [sp, #276]	; 0x114
 8017760:	6862      	ldr	r2, [r4, #4]
 8017762:	3a01      	subs	r2, #1
 8017764:	2a00      	cmp	r2, #0
 8017766:	6062      	str	r2, [r4, #4]
 8017768:	dd02      	ble.n	8017770 <__ssvfiscanf_r+0x240>
 801776a:	3301      	adds	r3, #1
 801776c:	6023      	str	r3, [r4, #0]
 801776e:	e787      	b.n	8017680 <__ssvfiscanf_r+0x150>
 8017770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017772:	4621      	mov	r1, r4
 8017774:	4630      	mov	r0, r6
 8017776:	4798      	blx	r3
 8017778:	2800      	cmp	r0, #0
 801777a:	d081      	beq.n	8017680 <__ssvfiscanf_r+0x150>
 801777c:	e7b6      	b.n	80176ec <__ssvfiscanf_r+0x1bc>
 801777e:	2b04      	cmp	r3, #4
 8017780:	dc06      	bgt.n	8017790 <__ssvfiscanf_r+0x260>
 8017782:	466b      	mov	r3, sp
 8017784:	4622      	mov	r2, r4
 8017786:	a941      	add	r1, sp, #260	; 0x104
 8017788:	4630      	mov	r0, r6
 801778a:	f000 f885 	bl	8017898 <_scanf_i>
 801778e:	e788      	b.n	80176a2 <__ssvfiscanf_r+0x172>
 8017790:	4b0e      	ldr	r3, [pc, #56]	; (80177cc <__ssvfiscanf_r+0x29c>)
 8017792:	2b00      	cmp	r3, #0
 8017794:	f43f aefc 	beq.w	8017590 <__ssvfiscanf_r+0x60>
 8017798:	466b      	mov	r3, sp
 801779a:	4622      	mov	r2, r4
 801779c:	a941      	add	r1, sp, #260	; 0x104
 801779e:	4630      	mov	r0, r6
 80177a0:	f7fc fd7e 	bl	80142a0 <_scanf_float>
 80177a4:	e77d      	b.n	80176a2 <__ssvfiscanf_r+0x172>
 80177a6:	89a3      	ldrh	r3, [r4, #12]
 80177a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80177ac:	bf18      	it	ne
 80177ae:	f04f 30ff 	movne.w	r0, #4294967295
 80177b2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80177b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80177bc:	e7f9      	b.n	80177b2 <__ssvfiscanf_r+0x282>
 80177be:	bf00      	nop
 80177c0:	0801747d 	.word	0x0801747d
 80177c4:	080174f7 	.word	0x080174f7
 80177c8:	08018772 	.word	0x08018772
 80177cc:	080142a1 	.word	0x080142a1

080177d0 <_scanf_chars>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	4615      	mov	r5, r2
 80177d6:	688a      	ldr	r2, [r1, #8]
 80177d8:	4680      	mov	r8, r0
 80177da:	460c      	mov	r4, r1
 80177dc:	b932      	cbnz	r2, 80177ec <_scanf_chars+0x1c>
 80177de:	698a      	ldr	r2, [r1, #24]
 80177e0:	2a00      	cmp	r2, #0
 80177e2:	bf14      	ite	ne
 80177e4:	f04f 32ff 	movne.w	r2, #4294967295
 80177e8:	2201      	moveq	r2, #1
 80177ea:	608a      	str	r2, [r1, #8]
 80177ec:	6822      	ldr	r2, [r4, #0]
 80177ee:	06d1      	lsls	r1, r2, #27
 80177f0:	bf5f      	itttt	pl
 80177f2:	681a      	ldrpl	r2, [r3, #0]
 80177f4:	1d11      	addpl	r1, r2, #4
 80177f6:	6019      	strpl	r1, [r3, #0]
 80177f8:	6817      	ldrpl	r7, [r2, #0]
 80177fa:	2600      	movs	r6, #0
 80177fc:	69a3      	ldr	r3, [r4, #24]
 80177fe:	b1db      	cbz	r3, 8017838 <_scanf_chars+0x68>
 8017800:	2b01      	cmp	r3, #1
 8017802:	d107      	bne.n	8017814 <_scanf_chars+0x44>
 8017804:	682b      	ldr	r3, [r5, #0]
 8017806:	6962      	ldr	r2, [r4, #20]
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	5cd3      	ldrb	r3, [r2, r3]
 801780c:	b9a3      	cbnz	r3, 8017838 <_scanf_chars+0x68>
 801780e:	2e00      	cmp	r6, #0
 8017810:	d132      	bne.n	8017878 <_scanf_chars+0xa8>
 8017812:	e006      	b.n	8017822 <_scanf_chars+0x52>
 8017814:	2b02      	cmp	r3, #2
 8017816:	d007      	beq.n	8017828 <_scanf_chars+0x58>
 8017818:	2e00      	cmp	r6, #0
 801781a:	d12d      	bne.n	8017878 <_scanf_chars+0xa8>
 801781c:	69a3      	ldr	r3, [r4, #24]
 801781e:	2b01      	cmp	r3, #1
 8017820:	d12a      	bne.n	8017878 <_scanf_chars+0xa8>
 8017822:	2001      	movs	r0, #1
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017828:	f7fe ffe8 	bl	80167fc <__locale_ctype_ptr>
 801782c:	682b      	ldr	r3, [r5, #0]
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	4418      	add	r0, r3
 8017832:	7843      	ldrb	r3, [r0, #1]
 8017834:	071b      	lsls	r3, r3, #28
 8017836:	d4ef      	bmi.n	8017818 <_scanf_chars+0x48>
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	06da      	lsls	r2, r3, #27
 801783c:	bf5e      	ittt	pl
 801783e:	682b      	ldrpl	r3, [r5, #0]
 8017840:	781b      	ldrbpl	r3, [r3, #0]
 8017842:	703b      	strbpl	r3, [r7, #0]
 8017844:	682a      	ldr	r2, [r5, #0]
 8017846:	686b      	ldr	r3, [r5, #4]
 8017848:	f102 0201 	add.w	r2, r2, #1
 801784c:	602a      	str	r2, [r5, #0]
 801784e:	68a2      	ldr	r2, [r4, #8]
 8017850:	f103 33ff 	add.w	r3, r3, #4294967295
 8017854:	f102 32ff 	add.w	r2, r2, #4294967295
 8017858:	606b      	str	r3, [r5, #4]
 801785a:	f106 0601 	add.w	r6, r6, #1
 801785e:	bf58      	it	pl
 8017860:	3701      	addpl	r7, #1
 8017862:	60a2      	str	r2, [r4, #8]
 8017864:	b142      	cbz	r2, 8017878 <_scanf_chars+0xa8>
 8017866:	2b00      	cmp	r3, #0
 8017868:	dcc8      	bgt.n	80177fc <_scanf_chars+0x2c>
 801786a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801786e:	4629      	mov	r1, r5
 8017870:	4640      	mov	r0, r8
 8017872:	4798      	blx	r3
 8017874:	2800      	cmp	r0, #0
 8017876:	d0c1      	beq.n	80177fc <_scanf_chars+0x2c>
 8017878:	6823      	ldr	r3, [r4, #0]
 801787a:	f013 0310 	ands.w	r3, r3, #16
 801787e:	d105      	bne.n	801788c <_scanf_chars+0xbc>
 8017880:	68e2      	ldr	r2, [r4, #12]
 8017882:	3201      	adds	r2, #1
 8017884:	60e2      	str	r2, [r4, #12]
 8017886:	69a2      	ldr	r2, [r4, #24]
 8017888:	b102      	cbz	r2, 801788c <_scanf_chars+0xbc>
 801788a:	703b      	strb	r3, [r7, #0]
 801788c:	6923      	ldr	r3, [r4, #16]
 801788e:	441e      	add	r6, r3
 8017890:	6126      	str	r6, [r4, #16]
 8017892:	2000      	movs	r0, #0
 8017894:	e7c6      	b.n	8017824 <_scanf_chars+0x54>
	...

08017898 <_scanf_i>:
 8017898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801789c:	469a      	mov	sl, r3
 801789e:	4b74      	ldr	r3, [pc, #464]	; (8017a70 <_scanf_i+0x1d8>)
 80178a0:	460c      	mov	r4, r1
 80178a2:	4683      	mov	fp, r0
 80178a4:	4616      	mov	r6, r2
 80178a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80178aa:	b087      	sub	sp, #28
 80178ac:	ab03      	add	r3, sp, #12
 80178ae:	68a7      	ldr	r7, [r4, #8]
 80178b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80178b4:	4b6f      	ldr	r3, [pc, #444]	; (8017a74 <_scanf_i+0x1dc>)
 80178b6:	69a1      	ldr	r1, [r4, #24]
 80178b8:	4a6f      	ldr	r2, [pc, #444]	; (8017a78 <_scanf_i+0x1e0>)
 80178ba:	2903      	cmp	r1, #3
 80178bc:	bf08      	it	eq
 80178be:	461a      	moveq	r2, r3
 80178c0:	1e7b      	subs	r3, r7, #1
 80178c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80178c6:	bf84      	itt	hi
 80178c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80178cc:	60a3      	strhi	r3, [r4, #8]
 80178ce:	6823      	ldr	r3, [r4, #0]
 80178d0:	9200      	str	r2, [sp, #0]
 80178d2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80178d6:	bf88      	it	hi
 80178d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80178dc:	f104 091c 	add.w	r9, r4, #28
 80178e0:	6023      	str	r3, [r4, #0]
 80178e2:	bf8c      	ite	hi
 80178e4:	197f      	addhi	r7, r7, r5
 80178e6:	2700      	movls	r7, #0
 80178e8:	464b      	mov	r3, r9
 80178ea:	f04f 0800 	mov.w	r8, #0
 80178ee:	9301      	str	r3, [sp, #4]
 80178f0:	6831      	ldr	r1, [r6, #0]
 80178f2:	ab03      	add	r3, sp, #12
 80178f4:	2202      	movs	r2, #2
 80178f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80178fa:	7809      	ldrb	r1, [r1, #0]
 80178fc:	f7e8 fc88 	bl	8000210 <memchr>
 8017900:	9b01      	ldr	r3, [sp, #4]
 8017902:	b330      	cbz	r0, 8017952 <_scanf_i+0xba>
 8017904:	f1b8 0f01 	cmp.w	r8, #1
 8017908:	d15a      	bne.n	80179c0 <_scanf_i+0x128>
 801790a:	6862      	ldr	r2, [r4, #4]
 801790c:	b92a      	cbnz	r2, 801791a <_scanf_i+0x82>
 801790e:	6822      	ldr	r2, [r4, #0]
 8017910:	2108      	movs	r1, #8
 8017912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017916:	6061      	str	r1, [r4, #4]
 8017918:	6022      	str	r2, [r4, #0]
 801791a:	6822      	ldr	r2, [r4, #0]
 801791c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017920:	6022      	str	r2, [r4, #0]
 8017922:	68a2      	ldr	r2, [r4, #8]
 8017924:	1e51      	subs	r1, r2, #1
 8017926:	60a1      	str	r1, [r4, #8]
 8017928:	b19a      	cbz	r2, 8017952 <_scanf_i+0xba>
 801792a:	6832      	ldr	r2, [r6, #0]
 801792c:	1c51      	adds	r1, r2, #1
 801792e:	6031      	str	r1, [r6, #0]
 8017930:	7812      	ldrb	r2, [r2, #0]
 8017932:	701a      	strb	r2, [r3, #0]
 8017934:	1c5d      	adds	r5, r3, #1
 8017936:	6873      	ldr	r3, [r6, #4]
 8017938:	3b01      	subs	r3, #1
 801793a:	2b00      	cmp	r3, #0
 801793c:	6073      	str	r3, [r6, #4]
 801793e:	dc07      	bgt.n	8017950 <_scanf_i+0xb8>
 8017940:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017944:	4631      	mov	r1, r6
 8017946:	4658      	mov	r0, fp
 8017948:	4798      	blx	r3
 801794a:	2800      	cmp	r0, #0
 801794c:	f040 8086 	bne.w	8017a5c <_scanf_i+0x1c4>
 8017950:	462b      	mov	r3, r5
 8017952:	f108 0801 	add.w	r8, r8, #1
 8017956:	f1b8 0f03 	cmp.w	r8, #3
 801795a:	d1c8      	bne.n	80178ee <_scanf_i+0x56>
 801795c:	6862      	ldr	r2, [r4, #4]
 801795e:	b90a      	cbnz	r2, 8017964 <_scanf_i+0xcc>
 8017960:	220a      	movs	r2, #10
 8017962:	6062      	str	r2, [r4, #4]
 8017964:	6862      	ldr	r2, [r4, #4]
 8017966:	4945      	ldr	r1, [pc, #276]	; (8017a7c <_scanf_i+0x1e4>)
 8017968:	6960      	ldr	r0, [r4, #20]
 801796a:	9301      	str	r3, [sp, #4]
 801796c:	1a89      	subs	r1, r1, r2
 801796e:	f000 f897 	bl	8017aa0 <__sccl>
 8017972:	9b01      	ldr	r3, [sp, #4]
 8017974:	f04f 0800 	mov.w	r8, #0
 8017978:	461d      	mov	r5, r3
 801797a:	68a3      	ldr	r3, [r4, #8]
 801797c:	6822      	ldr	r2, [r4, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d03a      	beq.n	80179f8 <_scanf_i+0x160>
 8017982:	6831      	ldr	r1, [r6, #0]
 8017984:	6960      	ldr	r0, [r4, #20]
 8017986:	f891 c000 	ldrb.w	ip, [r1]
 801798a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801798e:	2800      	cmp	r0, #0
 8017990:	d032      	beq.n	80179f8 <_scanf_i+0x160>
 8017992:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017996:	d121      	bne.n	80179dc <_scanf_i+0x144>
 8017998:	0510      	lsls	r0, r2, #20
 801799a:	d51f      	bpl.n	80179dc <_scanf_i+0x144>
 801799c:	f108 0801 	add.w	r8, r8, #1
 80179a0:	b117      	cbz	r7, 80179a8 <_scanf_i+0x110>
 80179a2:	3301      	adds	r3, #1
 80179a4:	3f01      	subs	r7, #1
 80179a6:	60a3      	str	r3, [r4, #8]
 80179a8:	6873      	ldr	r3, [r6, #4]
 80179aa:	3b01      	subs	r3, #1
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	6073      	str	r3, [r6, #4]
 80179b0:	dd1b      	ble.n	80179ea <_scanf_i+0x152>
 80179b2:	6833      	ldr	r3, [r6, #0]
 80179b4:	3301      	adds	r3, #1
 80179b6:	6033      	str	r3, [r6, #0]
 80179b8:	68a3      	ldr	r3, [r4, #8]
 80179ba:	3b01      	subs	r3, #1
 80179bc:	60a3      	str	r3, [r4, #8]
 80179be:	e7dc      	b.n	801797a <_scanf_i+0xe2>
 80179c0:	f1b8 0f02 	cmp.w	r8, #2
 80179c4:	d1ad      	bne.n	8017922 <_scanf_i+0x8a>
 80179c6:	6822      	ldr	r2, [r4, #0]
 80179c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80179cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80179d0:	d1bf      	bne.n	8017952 <_scanf_i+0xba>
 80179d2:	2110      	movs	r1, #16
 80179d4:	6061      	str	r1, [r4, #4]
 80179d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179da:	e7a1      	b.n	8017920 <_scanf_i+0x88>
 80179dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80179e0:	6022      	str	r2, [r4, #0]
 80179e2:	780b      	ldrb	r3, [r1, #0]
 80179e4:	702b      	strb	r3, [r5, #0]
 80179e6:	3501      	adds	r5, #1
 80179e8:	e7de      	b.n	80179a8 <_scanf_i+0x110>
 80179ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179ee:	4631      	mov	r1, r6
 80179f0:	4658      	mov	r0, fp
 80179f2:	4798      	blx	r3
 80179f4:	2800      	cmp	r0, #0
 80179f6:	d0df      	beq.n	80179b8 <_scanf_i+0x120>
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	05d9      	lsls	r1, r3, #23
 80179fc:	d50c      	bpl.n	8017a18 <_scanf_i+0x180>
 80179fe:	454d      	cmp	r5, r9
 8017a00:	d908      	bls.n	8017a14 <_scanf_i+0x17c>
 8017a02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a0a:	4632      	mov	r2, r6
 8017a0c:	4658      	mov	r0, fp
 8017a0e:	4798      	blx	r3
 8017a10:	1e6f      	subs	r7, r5, #1
 8017a12:	463d      	mov	r5, r7
 8017a14:	454d      	cmp	r5, r9
 8017a16:	d029      	beq.n	8017a6c <_scanf_i+0x1d4>
 8017a18:	6822      	ldr	r2, [r4, #0]
 8017a1a:	f012 0210 	ands.w	r2, r2, #16
 8017a1e:	d113      	bne.n	8017a48 <_scanf_i+0x1b0>
 8017a20:	702a      	strb	r2, [r5, #0]
 8017a22:	6863      	ldr	r3, [r4, #4]
 8017a24:	9e00      	ldr	r6, [sp, #0]
 8017a26:	4649      	mov	r1, r9
 8017a28:	4658      	mov	r0, fp
 8017a2a:	47b0      	blx	r6
 8017a2c:	f8da 3000 	ldr.w	r3, [sl]
 8017a30:	6821      	ldr	r1, [r4, #0]
 8017a32:	1d1a      	adds	r2, r3, #4
 8017a34:	f8ca 2000 	str.w	r2, [sl]
 8017a38:	f011 0f20 	tst.w	r1, #32
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	d010      	beq.n	8017a62 <_scanf_i+0x1ca>
 8017a40:	6018      	str	r0, [r3, #0]
 8017a42:	68e3      	ldr	r3, [r4, #12]
 8017a44:	3301      	adds	r3, #1
 8017a46:	60e3      	str	r3, [r4, #12]
 8017a48:	eba5 0509 	sub.w	r5, r5, r9
 8017a4c:	44a8      	add	r8, r5
 8017a4e:	6925      	ldr	r5, [r4, #16]
 8017a50:	4445      	add	r5, r8
 8017a52:	6125      	str	r5, [r4, #16]
 8017a54:	2000      	movs	r0, #0
 8017a56:	b007      	add	sp, #28
 8017a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a5c:	f04f 0800 	mov.w	r8, #0
 8017a60:	e7ca      	b.n	80179f8 <_scanf_i+0x160>
 8017a62:	07ca      	lsls	r2, r1, #31
 8017a64:	bf4c      	ite	mi
 8017a66:	8018      	strhmi	r0, [r3, #0]
 8017a68:	6018      	strpl	r0, [r3, #0]
 8017a6a:	e7ea      	b.n	8017a42 <_scanf_i+0x1aa>
 8017a6c:	2001      	movs	r0, #1
 8017a6e:	e7f2      	b.n	8017a56 <_scanf_i+0x1be>
 8017a70:	080182cc 	.word	0x080182cc
 8017a74:	080154b9 	.word	0x080154b9
 8017a78:	08017c1d 	.word	0x08017c1d
 8017a7c:	0801878d 	.word	0x0801878d

08017a80 <_sbrk_r>:
 8017a80:	b538      	push	{r3, r4, r5, lr}
 8017a82:	4c06      	ldr	r4, [pc, #24]	; (8017a9c <_sbrk_r+0x1c>)
 8017a84:	2300      	movs	r3, #0
 8017a86:	4605      	mov	r5, r0
 8017a88:	4608      	mov	r0, r1
 8017a8a:	6023      	str	r3, [r4, #0]
 8017a8c:	f7ee feac 	bl	80067e8 <_sbrk>
 8017a90:	1c43      	adds	r3, r0, #1
 8017a92:	d102      	bne.n	8017a9a <_sbrk_r+0x1a>
 8017a94:	6823      	ldr	r3, [r4, #0]
 8017a96:	b103      	cbz	r3, 8017a9a <_sbrk_r+0x1a>
 8017a98:	602b      	str	r3, [r5, #0]
 8017a9a:	bd38      	pop	{r3, r4, r5, pc}
 8017a9c:	20040e34 	.word	0x20040e34

08017aa0 <__sccl>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	780b      	ldrb	r3, [r1, #0]
 8017aa4:	2b5e      	cmp	r3, #94	; 0x5e
 8017aa6:	bf13      	iteet	ne
 8017aa8:	1c4a      	addne	r2, r1, #1
 8017aaa:	1c8a      	addeq	r2, r1, #2
 8017aac:	784b      	ldrbeq	r3, [r1, #1]
 8017aae:	2100      	movne	r1, #0
 8017ab0:	bf08      	it	eq
 8017ab2:	2101      	moveq	r1, #1
 8017ab4:	1e44      	subs	r4, r0, #1
 8017ab6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017aba:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017abe:	42ac      	cmp	r4, r5
 8017ac0:	d1fb      	bne.n	8017aba <__sccl+0x1a>
 8017ac2:	b913      	cbnz	r3, 8017aca <__sccl+0x2a>
 8017ac4:	3a01      	subs	r2, #1
 8017ac6:	4610      	mov	r0, r2
 8017ac8:	bd70      	pop	{r4, r5, r6, pc}
 8017aca:	f081 0401 	eor.w	r4, r1, #1
 8017ace:	54c4      	strb	r4, [r0, r3]
 8017ad0:	1c51      	adds	r1, r2, #1
 8017ad2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017ad6:	2d2d      	cmp	r5, #45	; 0x2d
 8017ad8:	f101 36ff 	add.w	r6, r1, #4294967295
 8017adc:	460a      	mov	r2, r1
 8017ade:	d006      	beq.n	8017aee <__sccl+0x4e>
 8017ae0:	2d5d      	cmp	r5, #93	; 0x5d
 8017ae2:	d0f0      	beq.n	8017ac6 <__sccl+0x26>
 8017ae4:	b90d      	cbnz	r5, 8017aea <__sccl+0x4a>
 8017ae6:	4632      	mov	r2, r6
 8017ae8:	e7ed      	b.n	8017ac6 <__sccl+0x26>
 8017aea:	462b      	mov	r3, r5
 8017aec:	e7ef      	b.n	8017ace <__sccl+0x2e>
 8017aee:	780e      	ldrb	r6, [r1, #0]
 8017af0:	2e5d      	cmp	r6, #93	; 0x5d
 8017af2:	d0fa      	beq.n	8017aea <__sccl+0x4a>
 8017af4:	42b3      	cmp	r3, r6
 8017af6:	dcf8      	bgt.n	8017aea <__sccl+0x4a>
 8017af8:	3301      	adds	r3, #1
 8017afa:	429e      	cmp	r6, r3
 8017afc:	54c4      	strb	r4, [r0, r3]
 8017afe:	dcfb      	bgt.n	8017af8 <__sccl+0x58>
 8017b00:	3102      	adds	r1, #2
 8017b02:	e7e6      	b.n	8017ad2 <__sccl+0x32>

08017b04 <strncmp>:
 8017b04:	b510      	push	{r4, lr}
 8017b06:	b16a      	cbz	r2, 8017b24 <strncmp+0x20>
 8017b08:	3901      	subs	r1, #1
 8017b0a:	1884      	adds	r4, r0, r2
 8017b0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017b10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017b14:	4293      	cmp	r3, r2
 8017b16:	d103      	bne.n	8017b20 <strncmp+0x1c>
 8017b18:	42a0      	cmp	r0, r4
 8017b1a:	d001      	beq.n	8017b20 <strncmp+0x1c>
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d1f5      	bne.n	8017b0c <strncmp+0x8>
 8017b20:	1a98      	subs	r0, r3, r2
 8017b22:	bd10      	pop	{r4, pc}
 8017b24:	4610      	mov	r0, r2
 8017b26:	e7fc      	b.n	8017b22 <strncmp+0x1e>

08017b28 <_strtoul_l.isra.0>:
 8017b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b2c:	4680      	mov	r8, r0
 8017b2e:	4689      	mov	r9, r1
 8017b30:	4692      	mov	sl, r2
 8017b32:	461e      	mov	r6, r3
 8017b34:	460f      	mov	r7, r1
 8017b36:	463d      	mov	r5, r7
 8017b38:	9808      	ldr	r0, [sp, #32]
 8017b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b3e:	f7fe fe59 	bl	80167f4 <__locale_ctype_ptr_l>
 8017b42:	4420      	add	r0, r4
 8017b44:	7843      	ldrb	r3, [r0, #1]
 8017b46:	f013 0308 	ands.w	r3, r3, #8
 8017b4a:	d130      	bne.n	8017bae <_strtoul_l.isra.0+0x86>
 8017b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8017b4e:	d130      	bne.n	8017bb2 <_strtoul_l.isra.0+0x8a>
 8017b50:	787c      	ldrb	r4, [r7, #1]
 8017b52:	1cbd      	adds	r5, r7, #2
 8017b54:	2101      	movs	r1, #1
 8017b56:	2e00      	cmp	r6, #0
 8017b58:	d05c      	beq.n	8017c14 <_strtoul_l.isra.0+0xec>
 8017b5a:	2e10      	cmp	r6, #16
 8017b5c:	d109      	bne.n	8017b72 <_strtoul_l.isra.0+0x4a>
 8017b5e:	2c30      	cmp	r4, #48	; 0x30
 8017b60:	d107      	bne.n	8017b72 <_strtoul_l.isra.0+0x4a>
 8017b62:	782b      	ldrb	r3, [r5, #0]
 8017b64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017b68:	2b58      	cmp	r3, #88	; 0x58
 8017b6a:	d14e      	bne.n	8017c0a <_strtoul_l.isra.0+0xe2>
 8017b6c:	786c      	ldrb	r4, [r5, #1]
 8017b6e:	2610      	movs	r6, #16
 8017b70:	3502      	adds	r5, #2
 8017b72:	f04f 32ff 	mov.w	r2, #4294967295
 8017b76:	2300      	movs	r3, #0
 8017b78:	fbb2 f2f6 	udiv	r2, r2, r6
 8017b7c:	fb06 fc02 	mul.w	ip, r6, r2
 8017b80:	ea6f 0c0c 	mvn.w	ip, ip
 8017b84:	4618      	mov	r0, r3
 8017b86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017b8a:	2f09      	cmp	r7, #9
 8017b8c:	d817      	bhi.n	8017bbe <_strtoul_l.isra.0+0x96>
 8017b8e:	463c      	mov	r4, r7
 8017b90:	42a6      	cmp	r6, r4
 8017b92:	dd23      	ble.n	8017bdc <_strtoul_l.isra.0+0xb4>
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	db1e      	blt.n	8017bd6 <_strtoul_l.isra.0+0xae>
 8017b98:	4282      	cmp	r2, r0
 8017b9a:	d31c      	bcc.n	8017bd6 <_strtoul_l.isra.0+0xae>
 8017b9c:	d101      	bne.n	8017ba2 <_strtoul_l.isra.0+0x7a>
 8017b9e:	45a4      	cmp	ip, r4
 8017ba0:	db19      	blt.n	8017bd6 <_strtoul_l.isra.0+0xae>
 8017ba2:	fb00 4006 	mla	r0, r0, r6, r4
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bac:	e7eb      	b.n	8017b86 <_strtoul_l.isra.0+0x5e>
 8017bae:	462f      	mov	r7, r5
 8017bb0:	e7c1      	b.n	8017b36 <_strtoul_l.isra.0+0xe>
 8017bb2:	2c2b      	cmp	r4, #43	; 0x2b
 8017bb4:	bf04      	itt	eq
 8017bb6:	1cbd      	addeq	r5, r7, #2
 8017bb8:	787c      	ldrbeq	r4, [r7, #1]
 8017bba:	4619      	mov	r1, r3
 8017bbc:	e7cb      	b.n	8017b56 <_strtoul_l.isra.0+0x2e>
 8017bbe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017bc2:	2f19      	cmp	r7, #25
 8017bc4:	d801      	bhi.n	8017bca <_strtoul_l.isra.0+0xa2>
 8017bc6:	3c37      	subs	r4, #55	; 0x37
 8017bc8:	e7e2      	b.n	8017b90 <_strtoul_l.isra.0+0x68>
 8017bca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017bce:	2f19      	cmp	r7, #25
 8017bd0:	d804      	bhi.n	8017bdc <_strtoul_l.isra.0+0xb4>
 8017bd2:	3c57      	subs	r4, #87	; 0x57
 8017bd4:	e7dc      	b.n	8017b90 <_strtoul_l.isra.0+0x68>
 8017bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017bda:	e7e5      	b.n	8017ba8 <_strtoul_l.isra.0+0x80>
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	da09      	bge.n	8017bf4 <_strtoul_l.isra.0+0xcc>
 8017be0:	2322      	movs	r3, #34	; 0x22
 8017be2:	f8c8 3000 	str.w	r3, [r8]
 8017be6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bea:	f1ba 0f00 	cmp.w	sl, #0
 8017bee:	d107      	bne.n	8017c00 <_strtoul_l.isra.0+0xd8>
 8017bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bf4:	b101      	cbz	r1, 8017bf8 <_strtoul_l.isra.0+0xd0>
 8017bf6:	4240      	negs	r0, r0
 8017bf8:	f1ba 0f00 	cmp.w	sl, #0
 8017bfc:	d0f8      	beq.n	8017bf0 <_strtoul_l.isra.0+0xc8>
 8017bfe:	b10b      	cbz	r3, 8017c04 <_strtoul_l.isra.0+0xdc>
 8017c00:	f105 39ff 	add.w	r9, r5, #4294967295
 8017c04:	f8ca 9000 	str.w	r9, [sl]
 8017c08:	e7f2      	b.n	8017bf0 <_strtoul_l.isra.0+0xc8>
 8017c0a:	2430      	movs	r4, #48	; 0x30
 8017c0c:	2e00      	cmp	r6, #0
 8017c0e:	d1b0      	bne.n	8017b72 <_strtoul_l.isra.0+0x4a>
 8017c10:	2608      	movs	r6, #8
 8017c12:	e7ae      	b.n	8017b72 <_strtoul_l.isra.0+0x4a>
 8017c14:	2c30      	cmp	r4, #48	; 0x30
 8017c16:	d0a4      	beq.n	8017b62 <_strtoul_l.isra.0+0x3a>
 8017c18:	260a      	movs	r6, #10
 8017c1a:	e7aa      	b.n	8017b72 <_strtoul_l.isra.0+0x4a>

08017c1c <_strtoul_r>:
 8017c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c1e:	4c06      	ldr	r4, [pc, #24]	; (8017c38 <_strtoul_r+0x1c>)
 8017c20:	4d06      	ldr	r5, [pc, #24]	; (8017c3c <_strtoul_r+0x20>)
 8017c22:	6824      	ldr	r4, [r4, #0]
 8017c24:	6a24      	ldr	r4, [r4, #32]
 8017c26:	2c00      	cmp	r4, #0
 8017c28:	bf08      	it	eq
 8017c2a:	462c      	moveq	r4, r5
 8017c2c:	9400      	str	r4, [sp, #0]
 8017c2e:	f7ff ff7b 	bl	8017b28 <_strtoul_l.isra.0>
 8017c32:	b003      	add	sp, #12
 8017c34:	bd30      	pop	{r4, r5, pc}
 8017c36:	bf00      	nop
 8017c38:	2000000c 	.word	0x2000000c
 8017c3c:	20000070 	.word	0x20000070

08017c40 <__submore>:
 8017c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c44:	460c      	mov	r4, r1
 8017c46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c4c:	4299      	cmp	r1, r3
 8017c4e:	d11d      	bne.n	8017c8c <__submore+0x4c>
 8017c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017c54:	f7ff fa66 	bl	8017124 <_malloc_r>
 8017c58:	b918      	cbnz	r0, 8017c62 <__submore+0x22>
 8017c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c66:	63a3      	str	r3, [r4, #56]	; 0x38
 8017c68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8017c6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017c72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017c76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017c7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017c7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017c82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017c86:	6020      	str	r0, [r4, #0]
 8017c88:	2000      	movs	r0, #0
 8017c8a:	e7e8      	b.n	8017c5e <__submore+0x1e>
 8017c8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017c8e:	0077      	lsls	r7, r6, #1
 8017c90:	463a      	mov	r2, r7
 8017c92:	f000 f837 	bl	8017d04 <_realloc_r>
 8017c96:	4605      	mov	r5, r0
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d0de      	beq.n	8017c5a <__submore+0x1a>
 8017c9c:	eb00 0806 	add.w	r8, r0, r6
 8017ca0:	4601      	mov	r1, r0
 8017ca2:	4632      	mov	r2, r6
 8017ca4:	4640      	mov	r0, r8
 8017ca6:	f7fb fe8b 	bl	80139c0 <memcpy>
 8017caa:	f8c4 8000 	str.w	r8, [r4]
 8017cae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017cb2:	e7e9      	b.n	8017c88 <__submore+0x48>

08017cb4 <__ascii_wctomb>:
 8017cb4:	b149      	cbz	r1, 8017cca <__ascii_wctomb+0x16>
 8017cb6:	2aff      	cmp	r2, #255	; 0xff
 8017cb8:	bf85      	ittet	hi
 8017cba:	238a      	movhi	r3, #138	; 0x8a
 8017cbc:	6003      	strhi	r3, [r0, #0]
 8017cbe:	700a      	strbls	r2, [r1, #0]
 8017cc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8017cc4:	bf98      	it	ls
 8017cc6:	2001      	movls	r0, #1
 8017cc8:	4770      	bx	lr
 8017cca:	4608      	mov	r0, r1
 8017ccc:	4770      	bx	lr

08017cce <memmove>:
 8017cce:	4288      	cmp	r0, r1
 8017cd0:	b510      	push	{r4, lr}
 8017cd2:	eb01 0302 	add.w	r3, r1, r2
 8017cd6:	d807      	bhi.n	8017ce8 <memmove+0x1a>
 8017cd8:	1e42      	subs	r2, r0, #1
 8017cda:	4299      	cmp	r1, r3
 8017cdc:	d00a      	beq.n	8017cf4 <memmove+0x26>
 8017cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ce2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017ce6:	e7f8      	b.n	8017cda <memmove+0xc>
 8017ce8:	4283      	cmp	r3, r0
 8017cea:	d9f5      	bls.n	8017cd8 <memmove+0xa>
 8017cec:	1881      	adds	r1, r0, r2
 8017cee:	1ad2      	subs	r2, r2, r3
 8017cf0:	42d3      	cmn	r3, r2
 8017cf2:	d100      	bne.n	8017cf6 <memmove+0x28>
 8017cf4:	bd10      	pop	{r4, pc}
 8017cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017cfe:	e7f7      	b.n	8017cf0 <memmove+0x22>

08017d00 <__malloc_lock>:
 8017d00:	4770      	bx	lr

08017d02 <__malloc_unlock>:
 8017d02:	4770      	bx	lr

08017d04 <_realloc_r>:
 8017d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d06:	4607      	mov	r7, r0
 8017d08:	4614      	mov	r4, r2
 8017d0a:	460e      	mov	r6, r1
 8017d0c:	b921      	cbnz	r1, 8017d18 <_realloc_r+0x14>
 8017d0e:	4611      	mov	r1, r2
 8017d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d14:	f7ff ba06 	b.w	8017124 <_malloc_r>
 8017d18:	b922      	cbnz	r2, 8017d24 <_realloc_r+0x20>
 8017d1a:	f7ff f9b5 	bl	8017088 <_free_r>
 8017d1e:	4625      	mov	r5, r4
 8017d20:	4628      	mov	r0, r5
 8017d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d24:	f000 f814 	bl	8017d50 <_malloc_usable_size_r>
 8017d28:	42a0      	cmp	r0, r4
 8017d2a:	d20f      	bcs.n	8017d4c <_realloc_r+0x48>
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	4638      	mov	r0, r7
 8017d30:	f7ff f9f8 	bl	8017124 <_malloc_r>
 8017d34:	4605      	mov	r5, r0
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d0f2      	beq.n	8017d20 <_realloc_r+0x1c>
 8017d3a:	4631      	mov	r1, r6
 8017d3c:	4622      	mov	r2, r4
 8017d3e:	f7fb fe3f 	bl	80139c0 <memcpy>
 8017d42:	4631      	mov	r1, r6
 8017d44:	4638      	mov	r0, r7
 8017d46:	f7ff f99f 	bl	8017088 <_free_r>
 8017d4a:	e7e9      	b.n	8017d20 <_realloc_r+0x1c>
 8017d4c:	4635      	mov	r5, r6
 8017d4e:	e7e7      	b.n	8017d20 <_realloc_r+0x1c>

08017d50 <_malloc_usable_size_r>:
 8017d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d54:	1f18      	subs	r0, r3, #4
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	bfbc      	itt	lt
 8017d5a:	580b      	ldrlt	r3, [r1, r0]
 8017d5c:	18c0      	addlt	r0, r0, r3
 8017d5e:	4770      	bx	lr

08017d60 <_init>:
 8017d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d62:	bf00      	nop
 8017d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d66:	bc08      	pop	{r3}
 8017d68:	469e      	mov	lr, r3
 8017d6a:	4770      	bx	lr

08017d6c <_fini>:
 8017d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d6e:	bf00      	nop
 8017d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d72:	bc08      	pop	{r3}
 8017d74:	469e      	mov	lr, r3
 8017d76:	4770      	bx	lr
