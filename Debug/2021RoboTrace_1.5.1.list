
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a134  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0801a2f8  0801a2f8  0002a2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac34  0801ac34  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac34  0801ac34  0002ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac3c  0801ac3c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ac3c  0801ac3c  0002ac3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac44  0801ac44  0002ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801ac48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004be60  200001e0  0801ae24  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004c040  0801ae24  0003c040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004082a  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008650  00000000  00000000  00070a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002578  00000000  00000000  00079088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002278  00000000  00000000  0007b600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365da  00000000  00000000  0007d878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028e18  00000000  00000000  000b3e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112761  00000000  00000000  000dcc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ef3cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b05c  00000000  00000000  001ef448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a2dc 	.word	0x0801a2dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a2dc 	.word	0x0801a2dc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00b fe14 	bl	800cc04 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20049b34 	.word	0x20049b34

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00b fdfc 	bl	800cc04 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20049b34 	.word	0x20049b34

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00b fc85 	bl	800c930 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f00a f9ec 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f00a f9e6 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f00a f9e0 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f00a f9da 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f00a f9d4 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f00a f9ce 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f00a f9c8 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f00a f9c2 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f00a f9bc 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f00a f9b6 	bl	800b404 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f00a f9aa 	bl	800b404 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00a f9a4 	bl	800b404 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fd61 	bl	8017bf0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00f facc 	bl	8010794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00f fac8 	bl	8010794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00f fac4 	bl	8010794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00f fac0 	bl	8010794 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20049c20 	.word	0x20049c20
 8001248:	20049b88 	.word	0x20049b88
 800124c:	20049ca8 	.word	0x20049ca8

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20049c20 	.word	0x20049c20
 800137c:	20049ca8 	.word	0x20049ca8
 8001380:	20049b88 	.word	0x20049b88

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20049c20 	.word	0x20049c20
 80013c4:	20049b88 	.word	0x20049b88
 80013c8:	20049ca8 	.word	0x20049ca8

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00f fa78 	bl	8010934 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00f fa74 	bl	8010934 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20049d88 	.word	0x20049d88
 8001468:	20049a6c 	.word	0x20049a6c
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder15getDistance10mmEv>:
{
	return distance_;
}

float Encoder::getDistance10mm()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return total_distance_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	ee07 3a90 	vmov	s15, r3
}
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	ee07 3a90 	vmov	s15, r3
}
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	ee07 3a90 	vmov	s15, r3
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f8e4 	bl	8001938 <create_path>

	if(state == OVER_WRITE){
 8001770:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	d108      	bne.n	800178a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <sd_write_array_float+0xb0>)
 800177a:	f013 fe5f 	bl	801543c <f_chdir>
		f_unlink(filepath);	//	一回消す
 800177e:	4822      	ldr	r0, [pc, #136]	; (8001808 <sd_write_array_float+0xb4>)
 8001780:	f014 f8ca 	bl	8015918 <f_unlink>
		f_chdir("..");
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <sd_write_array_float+0xb8>)
 8001786:	f013 fe59 	bl	801543c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800178a:	f000 f8eb 	bl	8001964 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800178e:	2300      	movs	r3, #0
 8001790:	82fb      	strh	r3, [r7, #22]
 8001792:	e028      	b.n	80017e6 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fee9 	bl	8000578 <__aeabi_f2d>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	e9cd 3400 	strd	r3, r4, [sp]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <sd_write_array_float+0xbc>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <sd_write_array_float+0xc0>)
 80017b4:	f015 fad0 	bl	8016d58 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <sd_write_array_float+0xc4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4619      	mov	r1, r3
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <sd_write_array_float+0xc4>)
 80017c0:	f013 fe86 	bl	80154d0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <sd_write_array_float+0xc0>)
 80017c6:	f7fe fd1b 	bl	8000200 <strlen>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <sd_write_array_float+0xc8>)
 80017ce:	4911      	ldr	r1, [pc, #68]	; (8001814 <sd_write_array_float+0xc0>)
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <sd_write_array_float+0xc4>)
 80017d2:	f013 fbf4 	bl	8014fbe <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80017d6:	f000 f8df 	bl	8001998 <bufclear>
	for(short i = 0 ; i < size; i++){
 80017da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	82fb      	strh	r3, [r7, #22]
 80017e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	dbd0      	blt.n	8001794 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <sd_write_array_float+0xc4>)
 80017f4:	f013 fdf8 	bl	80153e8 <f_close>

	return ret;
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	200487e8 	.word	0x200487e8
 8001808:	200476a8 	.word	0x200476a8
 800180c:	0801a314 	.word	0x0801a314
 8001810:	0801a2f8 	.word	0x0801a2f8
 8001814:	200488e8 	.word	0x200488e8
 8001818:	20048978 	.word	0x20048978
 800181c:	20048968 	.word	0x20048968

08001820 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f87c 	bl	8001938 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001840:	f000 f890 	bl	8001964 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001844:	e019      	b.n	800187a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001846:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4913      	ldr	r1, [pc, #76]	; (80018a0 <sd_read_array_float+0x80>)
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <sd_read_array_float+0x84>)
 8001856:	f015 fad3 	bl	8016e00 <siscanf>
		i++;
 800185a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800185e:	b29b      	uxth	r3, r3
 8001860:	3301      	adds	r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001866:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	429a      	cmp	r2, r3
 8001870:	db03      	blt.n	800187a <sd_read_array_float+0x5a>
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3b01      	subs	r3, #1
 8001876:	b29b      	uxth	r3, r3
 8001878:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <sd_read_array_float+0x88>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	4809      	ldr	r0, [pc, #36]	; (80018a4 <sd_read_array_float+0x84>)
 8001880:	f014 fa28 	bl	8015cd4 <f_gets>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1dd      	bne.n	8001846 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800188a:	f000 f885 	bl	8001998 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <sd_read_array_float+0x88>)
 8001890:	f013 fdaa 	bl	80153e8 <f_close>

	return ret;
 8001894:	7d7b      	ldrb	r3, [r7, #21]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0801a304 	.word	0x0801a304
 80018a4:	200488e8 	.word	0x200488e8
 80018a8:	20048978 	.word	0x20048978

080018ac <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f836 	bl	8001938 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018cc:	f000 f84a 	bl	8001964 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018d0:	e019      	b.n	8001906 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80018d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4913      	ldr	r1, [pc, #76]	; (800192c <sd_read_array_double+0x80>)
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <sd_read_array_double+0x84>)
 80018e2:	f015 fa8d 	bl	8016e00 <siscanf>
		i++;
 80018e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80018f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	db03      	blt.n	8001906 <sd_read_array_double+0x5a>
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	3b01      	subs	r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <sd_read_array_double+0x88>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <sd_read_array_double+0x84>)
 800190c:	f014 f9e2 	bl	8015cd4 <f_gets>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1dd      	bne.n	80018d2 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001916:	f000 f83f 	bl	8001998 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <sd_read_array_double+0x88>)
 800191c:	f013 fd64 	bl	80153e8 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	0801a310 	.word	0x0801a310
 8001930:	200488e8 	.word	0x200488e8
 8001934:	20048978 	.word	0x20048978

08001938 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <create_path+0x24>)
 8001946:	f015 fa87 	bl	8016e58 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <create_path+0x28>)
 800194e:	f015 fa83 	bl	8016e58 <strcpy>

}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200487e8 	.word	0x200487e8
 8001960:	200476a8 	.word	0x200476a8

08001964 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <fopen_folder_and_file+0x24>)
 800196a:	f014 f897 	bl	8015a9c <f_mkdir>

	f_chdir(dirpath);
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <fopen_folder_and_file+0x24>)
 8001970:	f013 fd64 	bl	801543c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001974:	2213      	movs	r2, #19
 8001976:	4905      	ldr	r1, [pc, #20]	; (800198c <fopen_folder_and_file+0x28>)
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <fopen_folder_and_file+0x2c>)
 800197a:	f012 fff3 	bl	8014964 <f_open>

	f_chdir("..");
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <fopen_folder_and_file+0x30>)
 8001980:	f013 fd5c 	bl	801543c <f_chdir>


}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200487e8 	.word	0x200487e8
 800198c:	200476a8 	.word	0x200476a8
 8001990:	20048978 	.word	0x20048978
 8001994:	0801a314 	.word	0x0801a314

08001998 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e007      	b.n	80019b4 <bufclear+0x1c>
		buffer[i] = '\0';
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <bufclear+0x30>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b7f      	cmp	r3, #127	; 0x7f
 80019b8:	ddf4      	ble.n	80019a4 <bufclear+0xc>
	}
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200488e8 	.word	0x200488e8

080019cc <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <read_byte+0x54>)
 80019e8:	f00a ffa2 	bl	800c930 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019ec:	f107 010f 	add.w	r1, r7, #15
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	2201      	movs	r2, #1
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <read_byte+0x58>)
 80019f6:	f00e f963 	bl	800fcc0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80019fa:	f107 010e 	add.w	r1, r7, #14
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	2201      	movs	r2, #1
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <read_byte+0x58>)
 8001a04:	f00e fa90 	bl	800ff28 <HAL_SPI_Receive>
	CS_SET;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <read_byte+0x54>)
 8001a10:	f00a ff8e 	bl	800c930 <HAL_GPIO_WritePin>

	return val;
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400
 8001a24:	20049a14 	.word	0x20049a14

08001a28 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <write_byte+0x54>)
 8001a4a:	f00a ff71 	bl	800c930 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001a4e:	f107 010f 	add.w	r1, r7, #15
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	2201      	movs	r2, #1
 8001a56:	480a      	ldr	r0, [pc, #40]	; (8001a80 <write_byte+0x58>)
 8001a58:	f00e f932 	bl	800fcc0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001a5c:	1db9      	adds	r1, r7, #6
 8001a5e:	2364      	movs	r3, #100	; 0x64
 8001a60:	2201      	movs	r2, #1
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <write_byte+0x58>)
 8001a64:	f00e f92c 	bl	800fcc0 <HAL_SPI_Transmit>
	CS_SET;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <write_byte+0x54>)
 8001a70:	f00a ff5e 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	20049a14 	.word	0x20049a14

08001a84 <IMU_init>:

uint16_t IMU_init() {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ff9c 	bl	80019cc <read_byte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	2be0      	cmp	r3, #224	; 0xe0
 8001a9c:	d119      	bne.n	8001ad2 <IMU_init+0x4e>
		ret = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2006      	movs	r0, #6
 8001aa6:	f7ff ffbf 	bl	8001a28 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001aaa:	2110      	movs	r1, #16
 8001aac:	2003      	movs	r0, #3
 8001aae:	f7ff ffbb 	bl	8001a28 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	207f      	movs	r0, #127	; 0x7f
 8001ab6:	f7ff ffb7 	bl	8001a28 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001aba:	2106      	movs	r1, #6
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff ffb3 	bl	8001a28 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ac2:	2106      	movs	r1, #6
 8001ac4:	2014      	movs	r0, #20
 8001ac6:	f7ff ffaf 	bl	8001a28 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001aca:	2100      	movs	r1, #0
 8001acc:	207f      	movs	r0, #127	; 0x7f
 8001ace:	f7ff ffab 	bl	8001a28 <write_byte>
	}
	return ret;
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <read_gyro_data>:

void read_gyro_data() {
 8001adc:	b598      	push	{r3, r4, r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001ae0:	2033      	movs	r0, #51	; 0x33
 8001ae2:	f7ff ff73 	bl	80019cc <read_byte>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21c      	sxth	r4, r3
 8001aec:	2034      	movs	r0, #52	; 0x34
 8001aee:	f7ff ff6d 	bl	80019cc <read_byte>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4323      	orrs	r3, r4
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <read_gyro_data+0x64>)
 8001afc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001afe:	2035      	movs	r0, #53	; 0x35
 8001b00:	f7ff ff64 	bl	80019cc <read_byte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21c      	sxth	r4, r3
 8001b0a:	2036      	movs	r0, #54	; 0x36
 8001b0c:	f7ff ff5e 	bl	80019cc <read_byte>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4323      	orrs	r3, r4
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <read_gyro_data+0x68>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001b1c:	2037      	movs	r0, #55	; 0x37
 8001b1e:	f7ff ff55 	bl	80019cc <read_byte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21c      	sxth	r4, r3
 8001b28:	2038      	movs	r0, #56	; 0x38
 8001b2a:	f7ff ff4f 	bl	80019cc <read_byte>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4323      	orrs	r3, r4
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <read_gyro_data+0x6c>)
 8001b38:	801a      	strh	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	bd98      	pop	{r3, r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200499b0 	.word	0x200499b0
 8001b44:	200499ae 	.word	0x200499ae
 8001b48:	200499a8 	.word	0x200499a8

08001b4c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	801a      	strh	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	805a      	strh	r2, [r3, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	809a      	strh	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	80da      	strh	r2, [r3, #6]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	811a      	strh	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	815a      	strh	r2, [r3, #10]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
{

}
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b98:	f7ff ff74 	bl	8001a84 <IMU_init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ba0:	f7ff fa7e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fa8a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <_ZN3IMU4initEv+0x44>)
 8001bae:	f7ff fab1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fa83 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <_ZN3IMU4initEv+0x48>)
 8001bc0:	f7ff faa8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc8:	f009 fc1c 	bl	800b404 <HAL_Delay>

}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0801a324 	.word	0x0801a324
 8001bd8:	0801a330 	.word	0x0801a330
 8001bdc:	00000000 	.word	0x00000000

08001be0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001be8:	f7ff ff78 	bl	8001adc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <_ZN3IMU12updateValuesEv+0xa0>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <_ZN3IMU12updateValuesEv+0xa4>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <_ZN3IMU12updateValuesEv+0xa8>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc9f 	bl	8000554 <__aeabi_i2d>
 8001c16:	a316      	add	r3, pc, #88	; (adr r3, 8001c70 <_ZN3IMU12updateValuesEv+0x90>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fd04 	bl	8000628 <__aeabi_dmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4625      	mov	r5, r4
 8001c26:	461c      	mov	r4, r3
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <_ZN3IMU12updateValuesEv+0xac>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc90 	bl	8000554 <__aeabi_i2d>
 8001c34:	a310      	add	r3, pc, #64	; (adr r3, 8001c78 <_ZN3IMU12updateValuesEv+0x98>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcf5 	bl	8000628 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fb39 	bl	80002bc <__adddf3>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f7fe ff99 	bl	8000b88 <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <_ZN3IMU12updateValuesEv+0xac>)
 8001c66:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	47ae147b 	.word	0x47ae147b
 8001c74:	3f847ae1 	.word	0x3f847ae1
 8001c78:	7ae147ae 	.word	0x7ae147ae
 8001c7c:	3fefae14 	.word	0x3fefae14
 8001c80:	200499b0 	.word	0x200499b0
 8001c84:	200499ae 	.word	0x200499ae
 8001c88:	200499a8 	.word	0x200499a8
 8001c8c:	200001fc 	.word	0x200001fc

08001c90 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7fe fc5f 	bl	8000578 <__aeabi_f2d>
 8001cba:	a316      	add	r3, pc, #88	; (adr r3, 8001d14 <_ZN3IMU8getOmegaEv+0x84>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fddc 	bl	800087c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cce:	a313      	add	r3, pc, #76	; (adr r3, 8001d1c <_ZN3IMU8getOmegaEv+0x8c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fca6 	bl	8000628 <__aeabi_dmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <_ZN3IMU8getOmegaEv+0x80>)
 8001cea:	f7fe fdc7 	bl	800087c <__aeabi_ddiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	f7fe ff8f 	bl	8000c18 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40668000 	.word	0x40668000
 8001d14:	66666666 	.word	0x66666666
 8001d18:	40306666 	.word	0x40306666
 8001d1c:	54411744 	.word	0x54411744
 8001d20:	400921fb 	.word	0x400921fb

08001d24 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	b299      	uxth	r1, r3
 8001d38:	1dfa      	adds	r2, r7, #7
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <INA260_read+0x50>)
 8001d42:	f00a ff5f 	bl	800cc04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	f107 020c 	add.w	r2, r7, #12
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2302      	movs	r3, #2
 8001d54:	4807      	ldr	r0, [pc, #28]	; (8001d74 <INA260_read+0x50>)
 8001d56:	f00b f853 	bl	800ce00 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20049bc8 	.word	0x20049bc8

08001d78 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71bb      	strb	r3, [r7, #6]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	717b      	strb	r3, [r7, #5]
 8001d92:	4613      	mov	r3, r2
 8001d94:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	733b      	strb	r3, [r7, #12]
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	737b      	strb	r3, [r7, #13]
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001da2:	793b      	ldrb	r3, [r7, #4]
 8001da4:	b299      	uxth	r1, r3
 8001da6:	f107 020c 	add.w	r2, r7, #12
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2303      	movs	r3, #3
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <INA260_write+0x48>)
 8001db2:	f00a ff27 	bl	800cc04 <HAL_I2C_Master_Transmit>
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20049bc8 	.word	0x20049bc8

08001dc4 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	71bb      	strb	r3, [r7, #6]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	79f9      	ldrb	r1, [r7, #7]
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff ffcb 	bl	8001d78 <INA260_write>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	461a      	mov	r2, r3
 8001df8:	21df      	movs	r1, #223	; 0xdf
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff ffe2 	bl	8001dc4 <setConfig>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
{

}
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e30:	482a      	ldr	r0, [pc, #168]	; (8001edc <_ZN8JoyStick8getValueEv+0xbc>)
 8001e32:	f00a fd65 	bl	800c900 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <_ZN8JoyStick8getValueEv+0x2e>
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e52:	f00a fd55 	bl	800c900 <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <_ZN8JoyStick8getValueEv+0x4e>
 8001e66:	89fb      	ldrh	r3, [r7, #14]
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e72:	481a      	ldr	r0, [pc, #104]	; (8001edc <_ZN8JoyStick8getValueEv+0xbc>)
 8001e74:	f00a fd44 	bl	800c900 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <_ZN8JoyStick8getValueEv+0x70>
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e90:	2104      	movs	r1, #4
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e94:	f00a fd34 	bl	800c900 <HAL_GPIO_ReadPin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <_ZN8JoyStick8getValueEv+0x90>
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	480a      	ldr	r0, [pc, #40]	; (8001edc <_ZN8JoyStick8getValueEv+0xbc>)
 8001eb4:	f00a fd24 	bl	800c900 <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <_ZN8JoyStick8getValueEv+0xb0>
 8001ec8:	89fb      	ldrh	r3, [r7, #14]
 8001eca:	f043 0310 	orr.w	r3, r3, #16
 8001ece:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b52      	cmp	r3, #82	; 0x52
 8001ef8:	d112      	bne.n	8001f20 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f00:	4856      	ldr	r0, [pc, #344]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f02:	f00a fd15 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0c:	4853      	ldr	r0, [pc, #332]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f00a fd0f 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f18:	4850      	ldr	r0, [pc, #320]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f1a:	f00a fd09 	bl	800c930 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f1e:	e098      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b47      	cmp	r3, #71	; 0x47
 8001f24:	d112      	bne.n	8001f4c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f2c:	484b      	ldr	r0, [pc, #300]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f00a fcff 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f38:	4848      	ldr	r0, [pc, #288]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f3a:	f00a fcf9 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f44:	4845      	ldr	r0, [pc, #276]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f46:	f00a fcf3 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001f4a:	e082      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b42      	cmp	r3, #66	; 0x42
 8001f50:	d112      	bne.n	8001f78 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f58:	4840      	ldr	r0, [pc, #256]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f00a fce9 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f64:	483d      	ldr	r0, [pc, #244]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f00a fce3 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f70:	483a      	ldr	r0, [pc, #232]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f72:	f00a fcdd 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001f76:	e06c      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b43      	cmp	r3, #67	; 0x43
 8001f7c:	d112      	bne.n	8001fa4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f84:	4835      	ldr	r0, [pc, #212]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f00a fcd3 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f90:	4832      	ldr	r0, [pc, #200]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f00a fccd 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9c:	482f      	ldr	r0, [pc, #188]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001f9e:	f00a fcc7 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001fa2:	e056      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fa8:	d112      	bne.n	8001fd0 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb0:	482a      	ldr	r0, [pc, #168]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f00a fcbd 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbc:	4827      	ldr	r0, [pc, #156]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f00a fcb7 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc8:	4824      	ldr	r0, [pc, #144]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001fca:	f00a fcb1 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001fce:	e040      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b59      	cmp	r3, #89	; 0x59
 8001fd4:	d112      	bne.n	8001ffc <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fdc:	481f      	ldr	r0, [pc, #124]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f00a fca7 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe8:	481c      	ldr	r0, [pc, #112]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f00a fca1 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	4819      	ldr	r0, [pc, #100]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8001ff6:	f00a fc9b 	bl	800c930 <HAL_GPIO_WritePin>
}
 8001ffa:	e02a      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	2b57      	cmp	r3, #87	; 0x57
 8002000:	d112      	bne.n	8002028 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002008:	4814      	ldr	r0, [pc, #80]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 800200a:	f00a fc91 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002014:	4811      	ldr	r0, [pc, #68]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8002016:	f00a fc8b 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002020:	480e      	ldr	r0, [pc, #56]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8002022:	f00a fc85 	bl	800c930 <HAL_GPIO_WritePin>
}
 8002026:	e014      	b.n	8002052 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b7e      	cmp	r3, #126	; 0x7e
 800202c:	d111      	bne.n	8002052 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8002036:	f00a fc7b 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 8002042:	f00a fc75 	bl	800c930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <_ZN3LED9fullColorEc+0x174>)
 800204e:	f00a fc6f 	bl	800c930 <HAL_GPIO_WritePin>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020000 	.word	0x40020000

08002060 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
 800206c:	4613      	mov	r3, r2
 800206e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	4813      	ldr	r0, [pc, #76]	; (80020cc <_ZN3LED2LREaa+0x6c>)
 8002080:	f00a fc56 	bl	800c930 <HAL_GPIO_WritePin>
 8002084:	e009      	b.n	800209a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <_ZN3LED2LREaa+0x6c>)
 8002096:	f00a fc4b 	bl	800c930 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800209a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d106      	bne.n	80020b0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a2:	2201      	movs	r2, #1
 80020a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a8:	4808      	ldr	r0, [pc, #32]	; (80020cc <_ZN3LED2LREaa+0x6c>)
 80020aa:	f00a fc41 	bl	800c930 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020ae:	e009      	b.n	80020c4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <_ZN3LED2LREaa+0x6c>)
 80020c0:	f00a fc36 	bl	800c930 <HAL_GPIO_WritePin>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40020000 	.word	0x40020000

080020d0 <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b092      	sub	sp, #72	; 0x48
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe92 	bl	8001e08 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	331c      	adds	r3, #28
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
 80020f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d008      	beq.n	800210c <_ZN10LineSensorC1Ev+0x3c>
 80020fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002106:	3302      	adds	r3, #2
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
 800210a:	e7f2      	b.n	80020f2 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	3338      	adds	r3, #56	; 0x38
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	429a      	cmp	r2, r3
 8002124:	d009      	beq.n	800213a <_ZN10LineSensorC1Ev+0x6a>
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	623b      	str	r3, [r7, #32]
		s = 0;
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002134:	3304      	adds	r3, #4
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
 8002138:	e7f1      	b.n	800211e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3338      	adds	r3, #56	; 0x38
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	429a      	cmp	r2, r3
 8002152:	d009      	beq.n	8002168 <_ZN10LineSensorC1Ev+0x98>
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	617b      	str	r3, [r7, #20]
		m = 0;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	3304      	adds	r3, #4
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002166:	e7f1      	b.n	800214c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3338      	adds	r3, #56	; 0x38
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	429a      	cmp	r2, r3
 8002180:	d009      	beq.n	8002196 <_ZN10LineSensorC1Ev+0xc6>
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800218c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	3304      	adds	r3, #4
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
 8002194:	e7f1      	b.n	800217a <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	3748      	adds	r7, #72	; 0x48
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	220e      	movs	r2, #14
 80021ac:	4619      	mov	r1, r3
 80021ae:	4803      	ldr	r0, [pc, #12]	; (80021bc <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021b0:	f009 f98e 	bl	800b4d0 <HAL_ADC_Start_DMA>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20049aec 	.word	0x20049aec

080021c0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b0d      	cmp	r3, #13
 80021d0:	dc2f      	bgt.n	8002232 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3392      	adds	r3, #146	; 0x92
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	ed93 7a00 	vldr	s14, [r3]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	33a0      	adds	r3, #160	; 0xa0
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	440b      	add	r3, r1
 800221e:	3306      	adds	r3, #6
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e7cc      	b.n	80021cc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800223c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b09      	cmp	r3, #9
 8002244:	d902      	bls.n	800224c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]


}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	200001fe 	.word	0x200001fe

0800225c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800225c:	b490      	push	{r4, r7}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800226a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800226e:	2b0d      	cmp	r3, #13
 8002270:	f200 8087 	bhi.w	8002382 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800227e:	2b09      	cmp	r3, #9
 8002280:	d81c      	bhi.n	80022bc <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002282:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002286:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800228a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4423      	add	r3, r4
 800229a:	3306      	adds	r3, #6
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4403      	add	r3, r0
 80022a0:	3304      	adds	r3, #4
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	008b      	lsls	r3, r1, #2
 80022a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022aa:	440b      	add	r3, r1
 80022ac:	3b30      	subs	r3, #48	; 0x30
 80022ae:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022b4:	3301      	adds	r3, #1
 80022b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ba:	e7de      	b.n	800227a <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d84d      	bhi.n	8002366 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ce:	3301      	adds	r3, #1
 80022d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d83e      	bhi.n	800235a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e6:	4413      	add	r3, r2
 80022e8:	3b30      	subs	r3, #48	; 0x30
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022f8:	4413      	add	r3, r2
 80022fa:	3b30      	subs	r3, #48	; 0x30
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d521      	bpl.n	800234e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800230a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002314:	4413      	add	r3, r2
 8002316:	3b30      	subs	r3, #48	; 0x30
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800231c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002320:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232a:	440a      	add	r2, r1
 800232c:	3a30      	subs	r2, #48	; 0x30
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002336:	440b      	add	r3, r1
 8002338:	3b30      	subs	r3, #48	; 0x30
 800233a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 800233c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002346:	4413      	add	r3, r2
 8002348:	3b30      	subs	r3, #48	; 0x30
 800234a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800234e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002352:	3301      	adds	r3, #1
 8002354:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002358:	e7bc      	b.n	80022d4 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800235a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800235e:	3301      	adds	r3, #1
 8002360:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002364:	e7ad      	b.n	80022c2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	33b0      	adds	r3, #176	; 0xb0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800237a:	3301      	adds	r3, #1
 800237c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002380:	e773      	b.n	800226a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bc90      	pop	{r4, r7}
 800238a:	4770      	bx	lr

0800238c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002398:	2303      	movs	r3, #3
 800239a:	81bb      	strh	r3, [r7, #12]
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d814      	bhi.n	80023cc <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80023a2:	89bb      	ldrh	r3, [r7, #12]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	33b0      	adds	r3, #176	; 0xb0
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002420 <_ZN10LineSensor13emergencyStopEv+0x94>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	db02      	blt.n	80023c4 <_ZN10LineSensor13emergencyStopEv+0x38>
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	3301      	adds	r3, #1
 80023c2:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	3301      	adds	r3, #1
 80023c8:	81bb      	strh	r3, [r7, #12]
 80023ca:	e7e7      	b.n	800239c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	2b07      	cmp	r3, #7
 80023d0:	d906      	bls.n	80023e0 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	e002      	b.n	80023e6 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b63      	cmp	r3, #99	; 0x63
 80023ec:	d903      	bls.n	80023f6 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e002      	b.n	80023fc <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	f242 720f 	movw	r2, #9999	; 0x270f
 8002404:	4293      	cmp	r3, r2
 8002406:	d903      	bls.n	8002410 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800240a:	f242 7210 	movw	r2, #10000	; 0x2710
 800240e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002412:	781b      	ldrb	r3, [r3, #0]

}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	44098000 	.word	0x44098000
 8002424:	20000200 	.word	0x20000200
 8002428:	20000202 	.word	0x20000202

0800242c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	ed87 0a01 	vstr	s0, [r7, #4]
 8002436:	edd7 7a01 	vldr	s15, [r7, #4]
 800243a:	eef0 7ae7 	vabs.f32	s15, s15
 800243e:	eeb0 0a67 	vmov.f32	s0, s15
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
				target_velocity_(0), max_velocity_(0), min_velocity_(0), max_velocity2_(0),  min_velocity2_(0), max_velocity3_(0),  min_velocity3_(0), max_velocity4_(0),  min_velocity4_(0),
				logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false),
				max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), max_acc3_(0), max_dec3_(0), max_acc4_(0), max_dec4_(0),
				correction_check_cnt_(0), store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80024f2:	331c      	adds	r3, #28
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800250c:	3362      	adds	r3, #98	; 0x62
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002518:	3364      	adds	r3, #100	; 0x64
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002524:	3328      	adds	r3, #40	; 0x28
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002530:	332c      	adds	r3, #44	; 0x2c
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800253c:	332e      	adds	r3, #46	; 0x2e
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002548:	3330      	adds	r3, #48	; 0x30
 800254a:	2200      	movs	r2, #0
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002554:	3332      	adds	r3, #50	; 0x32
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002560:	3333      	adds	r3, #51	; 0x33
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800256c:	3334      	adds	r3, #52	; 0x34
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002578:	3335      	adds	r3, #53	; 0x35
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002584:	3338      	adds	r3, #56	; 0x38
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002592:	333c      	adds	r3, #60	; 0x3c
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025ae:	3344      	adds	r3, #68	; 0x44
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025bc:	3348      	adds	r3, #72	; 0x48
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025ca:	334c      	adds	r3, #76	; 0x4c
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025d8:	3350      	adds	r3, #80	; 0x50
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025e6:	3354      	adds	r3, #84	; 0x54
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80025f4:	3358      	adds	r3, #88	; 0x58
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002600:	335a      	adds	r3, #90	; 0x5a
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800260c:	335c      	adds	r3, #92	; 0x5c
 800260e:	2200      	movs	r2, #0
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002618:	335e      	adds	r3, #94	; 0x5e
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002634:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002640:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002654:	2300      	movs	r3, #0
 8002656:	83fb      	strh	r3, [r7, #30]
 8002658:	8bfb      	ldrh	r3, [r7, #30]
 800265a:	f241 726f 	movw	r2, #5999	; 0x176f
 800265e:	4293      	cmp	r3, r2
 8002660:	d80d      	bhi.n	800267e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
		velocity_table_[i] = 0;
 8002662:	8bfb      	ldrh	r3, [r7, #30]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800266a:	3308      	adds	r3, #8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	3301      	adds	r3, #1
 800267a:	83fb      	strh	r3, [r7, #30]
 800267c:	e7ec      	b.n	8002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800267e:	2300      	movs	r3, #0
 8002680:	83bb      	strh	r3, [r7, #28]
 8002682:	8bbb      	ldrh	r3, [r7, #28]
 8002684:	2b63      	cmp	r3, #99	; 0x63
 8002686:	d80d      	bhi.n	80026a4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x258>
		crossline_distance_[i] = 0;
 8002688:	8bbb      	ldrh	r3, [r7, #28]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002690:	331a      	adds	r3, #26
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800269c:	8bbb      	ldrh	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	83bb      	strh	r3, [r7, #28]
 80026a2:	e7ee      	b.n	8002682 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x236>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	837b      	strh	r3, [r7, #26]
 80026a8:	8b7b      	ldrh	r3, [r7, #26]
 80026aa:	2b63      	cmp	r3, #99	; 0x63
 80026ac:	d80d      	bhi.n	80026ca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x27e>
		crossline_distance2_[i] = 0;
 80026ae:	8b7b      	ldrh	r3, [r7, #26]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80026b6:	333e      	adds	r3, #62	; 0x3e
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80026c2:	8b7b      	ldrh	r3, [r7, #26]
 80026c4:	3301      	adds	r3, #1
 80026c6:	837b      	strh	r3, [r7, #26]
 80026c8:	e7ee      	b.n	80026a8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x25c>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80026ca:	2300      	movs	r3, #0
 80026cc:	833b      	strh	r3, [r7, #24]
 80026ce:	8b3b      	ldrh	r3, [r7, #24]
 80026d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026d4:	d20d      	bcs.n	80026f2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2a6>
		sideline_distance_[i] = 0;
 80026d6:	8b3b      	ldrh	r3, [r7, #24]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80026de:	3322      	adds	r3, #34	; 0x22
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80026ea:	8b3b      	ldrh	r3, [r7, #24]
 80026ec:	3301      	adds	r3, #1
 80026ee:	833b      	strh	r3, [r7, #24]
 80026f0:	e7ed      	b.n	80026ce <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x282>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80026f2:	2300      	movs	r3, #0
 80026f4:	82fb      	strh	r3, [r7, #22]
 80026f6:	8afb      	ldrh	r3, [r7, #22]
 80026f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026fc:	d20d      	bcs.n	800271a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2ce>
		sideline_distance2_[i] = 0;
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002706:	3316      	adds	r3, #22
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	3301      	adds	r3, #1
 8002716:	82fb      	strh	r3, [r7, #22]
 8002718:	e7ed      	b.n	80026f6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2aa>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4618      	mov	r0, r3
 800271e:	3724      	adds	r7, #36	; 0x24
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002760:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800276c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002774:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	ee07 3a90 	vmov	s15, r3

}
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	0000      	movs	r0, r0
	...

08002790 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ffc5 	bl	8002728 <_ZN9LineTrace9calcErrorEv>
 800279e:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027c2:	3364      	adds	r3, #100	; 0x64
 80027c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d150      	bne.n	800286e <_ZN9LineTrace8pidTraceEv+0xde>
		p = kp_slow_ * diff;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80027d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_slow_ / 10) * (diff - pre_diff) / DELTA_T;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027ec:	4b5b      	ldr	r3, [pc, #364]	; (800295c <_ZN9LineTrace8pidTraceEv+0x1cc>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80027f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	ee17 0a90 	vmov	r0, s15
 8002802:	f7fd feb9 	bl	8000578 <__aeabi_f2d>
 8002806:	a352      	add	r3, pc, #328	; (adr r3, 8002950 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f836 	bl	800087c <__aeabi_ddiv>
 8002810:	4603      	mov	r3, r0
 8002812:	460c      	mov	r4, r1
 8002814:	4618      	mov	r0, r3
 8002816:	4621      	mov	r1, r4
 8002818:	f7fe f9fe 	bl	8000c18 <__aeabi_d2f>
 800281c:	4603      	mov	r3, r0
 800281e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fea7 	bl	8000578 <__aeabi_f2d>
 800282a:	4604      	mov	r4, r0
 800282c:	460d      	mov	r5, r1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002834:	edd7 7a03 	vldr	s15, [r7, #12]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	ee17 0a90 	vmov	r0, s15
 8002840:	f7fd fe9a 	bl	8000578 <__aeabi_f2d>
 8002844:	a342      	add	r3, pc, #264	; (adr r3, 8002950 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd feed 	bl	8000628 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fd31 	bl	80002bc <__adddf3>
 800285a:	4603      	mov	r3, r0
 800285c:	460c      	mov	r4, r1
 800285e:	4618      	mov	r0, r3
 8002860:	4621      	mov	r1, r4
 8002862:	f7fe f9d9 	bl	8000c18 <__aeabi_d2f>
 8002866:	4602      	mov	r2, r0
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e04f      	b.n	800290e <_ZN9LineTrace8pidTraceEv+0x17e>
	}
	else{
		p = kp_ * diff;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002874:	ed97 7a03 	vldr	s14, [r7, #12]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_ / 10) * (diff - pre_diff) / DELTA_T;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002886:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800288a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	edd7 6a03 	vldr	s13, [r7, #12]
 8002898:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800289c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a0:	ee17 0a90 	vmov	r0, s15
 80028a4:	f7fd fe68 	bl	8000578 <__aeabi_f2d>
 80028a8:	a329      	add	r3, pc, #164	; (adr r3, 8002950 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd ffe5 	bl	800087c <__aeabi_ddiv>
 80028b2:	4603      	mov	r3, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	4618      	mov	r0, r3
 80028b8:	4621      	mov	r1, r4
 80028ba:	f7fe f9ad 	bl	8000c18 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe56 	bl	8000578 <__aeabi_f2d>
 80028cc:	4604      	mov	r4, r0
 80028ce:	460d      	mov	r5, r1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80028d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	ee17 0a90 	vmov	r0, s15
 80028e2:	f7fd fe49 	bl	8000578 <__aeabi_f2d>
 80028e6:	a31a      	add	r3, pc, #104	; (adr r3, 8002950 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fe9c 	bl	8000628 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fce0 	bl	80002bc <__adddf3>
 80028fc:	4603      	mov	r3, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	4618      	mov	r0, r3
 8002902:	4621      	mov	r1, r4
 8002904:	f7fe f988 	bl	8000c18 <__aeabi_d2f>
 8002908:	4602      	mov	r2, r0
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 800290c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 800290e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002912:	edd7 7a04 	vldr	s15, [r7, #16]
 8002916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002932:	edd7 0a02 	vldr	s1, [r7, #8]
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	4610      	mov	r0, r2
 800293c:	f003 fb70 	bl	8006020 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6013      	str	r3, [r2, #0]

}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
 800294e:	bf00      	nop
 8002950:	d2f1a9fc 	.word	0xd2f1a9fc
 8002954:	3f50624d 	.word	0x3f50624d
 8002958:	20000214 	.word	0x20000214
 800295c:	20000210 	.word	0x20000210

08002960 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fe7e 	bl	800166e <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fd7f 	bl	800547a <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4618      	mov	r0, r3
 8002982:	f002 fa66 	bl	8004e52 <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fb2c 	bl	8005000 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029ca:	3328      	adds	r3, #40	; 0x28
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	461c      	mov	r4, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7fe fe2e 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 80029d6:	eef0 7a40 	vmov.f32	s15, s0
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80029e0:	331a      	adds	r3, #26
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f0:	3328      	adds	r3, #40	; 0x28
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029fe:	3328      	adds	r3, #40	; 0x28
 8002a00:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a08:	3328      	adds	r3, #40	; 0x28
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	2b63      	cmp	r3, #99	; 0x63
 8002a0e:	d905      	bls.n	8002a1c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a16:	3328      	adds	r3, #40	; 0x28
 8002a18:	2263      	movs	r2, #99	; 0x63
 8002a1a:	801a      	strh	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a36:	332a      	adds	r3, #42	; 0x2a
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f7fe fdf8 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002a42:	eef0 7a40 	vmov.f32	s15, s0
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002a4c:	333e      	adds	r3, #62	; 0x3e
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a5c:	332a      	adds	r3, #42	; 0x2a
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a6a:	332a      	adds	r3, #42	; 0x2a
 8002a6c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a74:	332a      	adds	r3, #42	; 0x2a
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	2b63      	cmp	r3, #99	; 0x63
 8002a7a:	d905      	bls.n	8002a88 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a82:	332a      	adds	r3, #42	; 0x2a
 8002a84:	2263      	movs	r2, #99	; 0x63
 8002a86:	801a      	strh	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}

08002a90 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aa2:	332c      	adds	r3, #44	; 0x2c
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe fdc2 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002aae:	eef0 7a40 	vmov.f32	s15, s0
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ab8:	3322      	adds	r3, #34	; 0x22
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ac8:	332c      	adds	r3, #44	; 0x2c
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ad6:	332c      	adds	r3, #44	; 0x2c
 8002ad8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ae0:	332c      	adds	r3, #44	; 0x2c
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ae8:	d306      	bcc.n	8002af8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002af0:	332c      	adds	r3, #44	; 0x2c
 8002af2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002af6:	801a      	strh	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b12:	332e      	adds	r3, #46	; 0x2e
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	461c      	mov	r4, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe fd8a 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002b28:	3316      	adds	r3, #22
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b38:	332e      	adds	r3, #46	; 0x2e
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b46:	332e      	adds	r3, #46	; 0x2e
 8002b48:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b50:	332e      	adds	r3, #46	; 0x2e
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b58:	d306      	bcc.n	8002b68 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b60:	332e      	adds	r3, #46	; 0x2e
 8002b62:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b66:	801a      	strh	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}

08002b70 <_ZN9LineTrace23clearCrossLineDistance2Ev>:
		c = 0;
	}
}

void LineTrace::clearCrossLineDistance2()
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	for(auto &c : crossline_distance2_){
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002b7e:	33f8      	adds	r3, #248	; 0xf8
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d009      	beq.n	8002baa <_ZN9LineTrace23clearCrossLineDistance2Ev+0x3a>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	60bb      	str	r3, [r7, #8]
		c = 0;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
	for(auto &c : crossline_distance2_){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e7f1      	b.n	8002b8e <_ZN9LineTrace23clearCrossLineDistance2Ev+0x1e>
	}

}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <_ZN9LineTrace22clearSideLineDistance2Ev>:
	}

}

void LineTrace::clearSideLineDistance2()
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
	for(auto &s : sideline_distance2_){
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8002bc4:	3358      	adds	r3, #88	; 0x58
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d009      	beq.n	8002bf0 <_ZN9LineTrace22clearSideLineDistance2Ev+0x3a>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	60bb      	str	r3, [r7, #8]
		s = 0;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
	for(auto &s : sideline_distance2_){
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3304      	adds	r3, #4
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e7f1      	b.n	8002bd4 <_ZN9LineTrace22clearSideLineDistance2Ev+0x1e>
	}

}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	ed2d 8b02 	vpush	{d8}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d046      	beq.n	8002ca0 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c18:	3364      	adds	r3, #100	; 0x64
 8002c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11c      	bne.n	8002c5c <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69dc      	ldr	r4, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fcf2 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8002c30:	eeb0 8a40 	vmov.f32	s16, s0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fc0d 	bl	8005458 <_ZN8Odometry13getDeltaThetaEv>
 8002c3e:	ec53 2b10 	vmov	r2, r3, d0
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ffe7 	bl	8000c18 <__aeabi_d2f>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	ee00 3a90 	vmov	s1, r3
 8002c50:	eeb0 0a48 	vmov.f32	s0, s16
 8002c54:	4620      	mov	r0, r4
 8002c56:	f002 f807 	bl	8004c68 <_ZN6Logger21storeDistanceAndThetaEff>
 8002c5a:	e01b      	b.n	8002c94 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69dc      	ldr	r4, [r3, #28]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fcd5 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8002c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fbf0 	bl	8005458 <_ZN8Odometry13getDeltaThetaEv>
 8002c78:	ec53 2b10 	vmov	r2, r3, d0
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fd ffca 	bl	8000c18 <__aeabi_d2f>
 8002c84:	4603      	mov	r3, r0
 8002c86:	ee00 3a90 	vmov	s1, r3
 8002c8a:	eeb0 0a48 	vmov.f32	s0, s16
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f001 ffea 	bl	8004c68 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002c9e:	801a      	strh	r2, [r3, #0]
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	ecbd 8b02 	vpop	{d8}
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	20000204 	.word	0x20000204

08002cb0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002cbe:	3328      	adds	r3, #40	; 0x28
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d85a      	bhi.n	8002d7c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ccc:	3328      	adds	r3, #40	; 0x28
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002cd6:	331a      	adds	r3, #26
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fca4 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002cea:	eeb0 7a40 	vmov.f32	s14, s0
 8002cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfa:	f7ff fb97 	bl	800242c <_ZSt3absf>
 8002cfe:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8002d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d06:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002da0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	d826      	bhi.n	8002d62 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d1a:	3358      	adds	r3, #88	; 0x58
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6959      	ldr	r1, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d2a:	3328      	adds	r3, #40	; 0x28
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002d34:	331a      	adds	r3, #26
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	4608      	mov	r0, r1
 8002d44:	f7fe fc84 	bl	8001650 <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d4e:	3328      	adds	r3, #40	; 0x28
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d5c:	3328      	adds	r3, #40	; 0x28
 8002d5e:	801a      	strh	r2, [r3, #0]
			break;
 8002d60:	e00c      	b.n	8002d7c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d68:	3328      	adds	r3, #40	; 0x28
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d76:	3328      	adds	r3, #40	; 0x28
 8002d78:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002d7a:	e79d      	b.n	8002cb8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d82:	3328      	adds	r3, #40	; 0x28
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	2b63      	cmp	r3, #99	; 0x63
 8002d88:	d905      	bls.n	8002d96 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d90:	3328      	adds	r3, #40	; 0x28
 8002d92:	2263      	movs	r2, #99	; 0x63
 8002d94:	801a      	strh	r2, [r3, #0]

}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	437a0000 	.word	0x437a0000

08002da4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002dac:	2300      	movs	r3, #0
 8002dae:	82fb      	strh	r3, [r7, #22]
 8002db0:	8afb      	ldrh	r3, [r7, #22]
 8002db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002db6:	d23d      	bcs.n	8002e34 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8002db8:	8afb      	ldrh	r3, [r7, #22]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002dc0:	3322      	adds	r3, #34	; 0x22
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fc2f 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 8002dd4:	eeb0 7a40 	vmov.f32	s14, s0
 8002dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	f7ff fb22 	bl	800242c <_ZSt3absf>
 8002de8:	ed87 0a03 	vstr	s0, [r7, #12]
		//if(diff <= 230){
		if(diff <= 550){
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002e5c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8002df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	d816      	bhi.n	8002e2c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e04:	3358      	adds	r3, #88	; 0x58
 8002e06:	2200      	movs	r2, #0
 8002e08:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6959      	ldr	r1, [r3, #20]
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002e16:	3322      	adds	r3, #34	; 0x22
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	4608      	mov	r0, r1
 8002e26:	f7fe fc13 	bl	8001650 <_ZN7Encoder16setTotalDistanceEf>
			break;
 8002e2a:	e003      	b.n	8002e34 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002e2c:	8afb      	ldrh	r3, [r7, #22]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	82fb      	strh	r3, [r7, #22]
 8002e32:	e7bd      	b.n	8002db0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3a:	332c      	adds	r3, #44	; 0x2c
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e42:	d306      	bcc.n	8002e52 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e4a:	332c      	adds	r3, #44	; 0x2c
 8002e4c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e50:	801a      	strh	r2, [r3, #0]

}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	44098000 	.word	0x44098000

08002e60 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e72:	3364      	adds	r3, #100	; 0x64
 8002e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d144      	bne.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8002e7c:	edd7 7a00 	vldr	s15, [r7]
 8002e80:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800311c <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8002e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d504      	bpl.n	8002e98 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e136      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 8002e98:	edd7 7a00 	vldr	s15, [r7]
 8002e9c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003120 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8002ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	d503      	bpl.n	8002eb2 <_ZN9LineTrace15radius2VelocityEf+0x52>
 8002eaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e129      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 8002eb2:	edd7 7a00 	vldr	s15, [r7]
 8002eb6:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003124 <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8002eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec2:	d503      	bpl.n	8002ecc <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8002ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e11c      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 8002ecc:	edd7 7a00 	vldr	s15, [r7]
 8002ed0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003128 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 8002ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002edc:	d502      	bpl.n	8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8002ede:	4b93      	ldr	r3, [pc, #588]	; (800312c <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e110      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.0;
 8002ee4:	edd7 7a00 	vldr	s15, [r7]
 8002ee8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003130 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 8002eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	d502      	bpl.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x9c>
 8002ef6:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e104      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity_;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e0ff      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f0c:	3364      	adds	r3, #100	; 0x64
 8002f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d144      	bne.n	8002fa0 <_ZN9LineTrace15radius2VelocityEf+0x140>
		if(radius < 400) velocity = min_velocity2_;
 8002f16:	edd7 7a00 	vldr	s15, [r7]
 8002f1a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800311c <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8002f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d504      	bpl.n	8002f32 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e0e9      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 8002f32:	edd7 7a00 	vldr	s15, [r7]
 8002f36:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003120 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8002f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f42:	d503      	bpl.n	8002f4c <_ZN9LineTrace15radius2VelocityEf+0xec>
 8002f44:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e0dc      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 8002f4c:	edd7 7a00 	vldr	s15, [r7]
 8002f50:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003124 <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8002f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d503      	bpl.n	8002f66 <_ZN9LineTrace15radius2VelocityEf+0x106>
 8002f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e0cf      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 8002f66:	edd7 7a00 	vldr	s15, [r7]
 8002f6a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003128 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 8002f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d502      	bpl.n	8002f7e <_ZN9LineTrace15radius2VelocityEf+0x11e>
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e0c3      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.3;
 8002f7e:	edd7 7a00 	vldr	s15, [r7]
 8002f82:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003130 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 8002f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	d502      	bpl.n	8002f96 <_ZN9LineTrace15radius2VelocityEf+0x136>
 8002f90:	4b69      	ldr	r3, [pc, #420]	; (8003138 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e0b7      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity2_;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e0b2      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fa6:	3364      	adds	r3, #100	; 0x64
 8002fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d150      	bne.n	8003052 <_ZN9LineTrace15radius2VelocityEf+0x1f2>
		if(radius < 400) velocity = min_velocity3_;
 8002fb0:	edd7 7a00 	vldr	s15, [r7]
 8002fb4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800311c <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8002fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	d504      	bpl.n	8002fcc <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e09c      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.0;
 8002fcc:	edd7 7a00 	vldr	s15, [r7]
 8002fd0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003120 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8002fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fdc:	d503      	bpl.n	8002fe6 <_ZN9LineTrace15radius2VelocityEf+0x186>
 8002fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e08f      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 8002fe6:	edd7 7a00 	vldr	s15, [r7]
 8002fea:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003124 <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8002fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	d503      	bpl.n	8003000 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8002ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e082      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800313c <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d502      	bpl.n	8003018 <_ZN9LineTrace15radius2VelocityEf+0x1b8>
 8003012:	4b48      	ldr	r3, [pc, #288]	; (8003134 <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e076      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.0;
 8003018:	edd7 7a00 	vldr	s15, [r7]
 800301c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003140 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d502      	bpl.n	8003030 <_ZN9LineTrace15radius2VelocityEf+0x1d0>
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e06a      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 3.5;
 8003030:	edd7 7a00 	vldr	s15, [r7]
 8003034:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003144 <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 8003038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	d502      	bpl.n	8003048 <_ZN9LineTrace15radius2VelocityEf+0x1e8>
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <_ZN9LineTrace15radius2VelocityEf+0x2e8>)
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e05e      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity3_;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e059      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003058:	3364      	adds	r3, #100	; 0x64
 800305a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d14f      	bne.n	8003102 <_ZN9LineTrace15radius2VelocityEf+0x2a2>
		if(radius < 400) velocity = min_velocity4_;
 8003062:	edd7 7a00 	vldr	s15, [r7]
 8003066:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800311c <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	d504      	bpl.n	800307e <_ZN9LineTrace15radius2VelocityEf+0x21e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e043      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.5;
 800307e:	edd7 7a00 	vldr	s15, [r7]
 8003082:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003120 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8003086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d502      	bpl.n	8003096 <_ZN9LineTrace15radius2VelocityEf+0x236>
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e037      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 3.0;
 8003096:	edd7 7a00 	vldr	s15, [r7]
 800309a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003124 <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 800309e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	d502      	bpl.n	80030ae <_ZN9LineTrace15radius2VelocityEf+0x24e>
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e02b      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 80030ae:	edd7 7a00 	vldr	s15, [r7]
 80030b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800313c <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 80030b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d502      	bpl.n	80030c6 <_ZN9LineTrace15radius2VelocityEf+0x266>
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e01f      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.3;
 80030c6:	edd7 7a00 	vldr	s15, [r7]
 80030ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003140 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 80030ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	d502      	bpl.n	80030de <_ZN9LineTrace15radius2VelocityEf+0x27e>
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e013      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 4.0;
 80030de:	edd7 7a00 	vldr	s15, [r7]
 80030e2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003144 <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 80030e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ee:	d503      	bpl.n	80030f8 <_ZN9LineTrace15radius2VelocityEf+0x298>
 80030f0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e006      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity4_;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else velocity = 1.3;
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <_ZN9LineTrace15radius2VelocityEf+0x2ec>)
 8003104:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	ee07 3a90 	vmov	s15, r3
}
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	43c80000 	.word	0x43c80000
 8003120:	43fa0000 	.word	0x43fa0000
 8003124:	44228000 	.word	0x44228000
 8003128:	44bb8000 	.word	0x44bb8000
 800312c:	40200000 	.word	0x40200000
 8003130:	44fa0000 	.word	0x44fa0000
 8003134:	40400000 	.word	0x40400000
 8003138:	40533333 	.word	0x40533333
 800313c:	44898000 	.word	0x44898000
 8003140:	44ed8000 	.word	0x44ed8000
 8003144:	451c4000 	.word	0x451c4000
 8003148:	40600000 	.word	0x40600000
 800314c:	3fa66666 	.word	0x3fa66666

08003150 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	ed87 0a02 	vstr	s0, [r7, #8]
 800315c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800315e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003162:	83fb      	strh	r3, [r7, #30]
 8003164:	8bfb      	ldrh	r3, [r7, #30]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 808d 	beq.w	8003286 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800316c:	8bfb      	ldrh	r3, [r7, #30]
 800316e:	3b01      	subs	r3, #1
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003176:	3308      	adds	r3, #8
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	ed93 7a00 	vldr	s14, [r3]
 8003180:	8bfb      	ldrh	r3, [r7, #30]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003188:	3308      	adds	r3, #8
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800319a:	edd7 7a06 	vldr	s15, [r7, #24]
 800319e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	dd6a      	ble.n	800327e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80031a8:	8bfb      	ldrh	r3, [r7, #30]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9e0 	bl	8000578 <__aeabi_f2d>
 80031b8:	a335      	add	r3, pc, #212	; (adr r3, 8003290 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd fa33 	bl	8000628 <__aeabi_dmul>
 80031c2:	4603      	mov	r3, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	4625      	mov	r5, r4
 80031c8:	461c      	mov	r4, r3
 80031ca:	69b8      	ldr	r0, [r7, #24]
 80031cc:	f7fd f9d4 	bl	8000578 <__aeabi_f2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4620      	mov	r0, r4
 80031d6:	4629      	mov	r1, r5
 80031d8:	f7fd fb50 	bl	800087c <__aeabi_ddiv>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	4618      	mov	r0, r3
 80031e2:	4621      	mov	r1, r4
 80031e4:	f7fd fd18 	bl	8000c18 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80031ec:	edd7 6a06 	vldr	s13, [r7, #24]
 80031f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80031fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003200:	edd7 7a02 	vldr	s15, [r7, #8]
 8003204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	dd37      	ble.n	800327e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800320e:	8bfb      	ldrh	r3, [r7, #30]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003216:	3308      	adds	r3, #8
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f9aa 	bl	8000578 <__aeabi_f2d>
 8003224:	4604      	mov	r4, r0
 8003226:	460d      	mov	r5, r1
 8003228:	8bfb      	ldrh	r3, [r7, #30]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	edd7 7a02 	vldr	s15, [r7, #8]
 8003238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323c:	ee17 0a90 	vmov	r0, s15
 8003240:	f7fd f99a 	bl	8000578 <__aeabi_f2d>
 8003244:	a312      	add	r3, pc, #72	; (adr r3, 8003290 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f7fd f9ed 	bl	8000628 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd f831 	bl	80002bc <__adddf3>
 800325a:	4603      	mov	r3, r0
 800325c:	460c      	mov	r4, r1
 800325e:	4619      	mov	r1, r3
 8003260:	4622      	mov	r2, r4
 8003262:	8bfb      	ldrh	r3, [r7, #30]
 8003264:	1e5c      	subs	r4, r3, #1
 8003266:	4608      	mov	r0, r1
 8003268:	4611      	mov	r1, r2
 800326a:	f7fd fcd5 	bl	8000c18 <__aeabi_d2f>
 800326e:	4601      	mov	r1, r0
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003276:	3308      	adds	r3, #8
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800327e:	8bfb      	ldrh	r3, [r7, #30]
 8003280:	3b01      	subs	r3, #1
 8003282:	83fb      	strh	r3, [r7, #30]
 8003284:	e76e      	b.n	8003164 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003286:	bf00      	nop
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bdb0      	pop	{r4, r5, r7, pc}
 800328e:	bf00      	nop
 8003290:	d2f1a9fc 	.word	0xd2f1a9fc
 8003294:	3f50624d 	.word	0x3f50624d

08003298 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032a4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80032a6:	2300      	movs	r3, #0
 80032a8:	83fb      	strh	r3, [r7, #30]
 80032aa:	8bfb      	ldrh	r3, [r7, #30]
 80032ac:	f241 726f 	movw	r2, #5999	; 0x176f
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f200 808d 	bhi.w	80033d0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80032b6:	8bfb      	ldrh	r3, [r7, #30]
 80032b8:	3301      	adds	r3, #1
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032c0:	3308      	adds	r3, #8
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	ed93 7a00 	vldr	s14, [r3]
 80032ca:	8bfb      	ldrh	r3, [r7, #30]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032d2:	3308      	adds	r3, #8
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f0:	dd6a      	ble.n	80033c8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80032f2:	8bfb      	ldrh	r3, [r7, #30]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd f93b 	bl	8000578 <__aeabi_f2d>
 8003302:	a335      	add	r3, pc, #212	; (adr r3, 80033d8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f7fd f98e 	bl	8000628 <__aeabi_dmul>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	4625      	mov	r5, r4
 8003312:	461c      	mov	r4, r3
 8003314:	69b8      	ldr	r0, [r7, #24]
 8003316:	f7fd f92f 	bl	8000578 <__aeabi_f2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fd faab 	bl	800087c <__aeabi_ddiv>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	4618      	mov	r0, r3
 800332c:	4621      	mov	r1, r4
 800332e:	f7fd fc73 	bl	8000c18 <__aeabi_d2f>
 8003332:	4603      	mov	r3, r0
 8003334:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003336:	edd7 6a06 	vldr	s13, [r7, #24]
 800333a:	ed97 7a05 	vldr	s14, [r7, #20]
 800333e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003342:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003346:	ed97 7a04 	vldr	s14, [r7, #16]
 800334a:	edd7 7a02 	vldr	s15, [r7, #8]
 800334e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	dd37      	ble.n	80033c8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003358:	8bfb      	ldrh	r3, [r7, #30]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003360:	3308      	adds	r3, #8
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f905 	bl	8000578 <__aeabi_f2d>
 800336e:	4604      	mov	r4, r0
 8003370:	460d      	mov	r5, r1
 8003372:	8bfb      	ldrh	r3, [r7, #30]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	ed93 7a00 	vldr	s14, [r3]
 800337e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003386:	ee17 0a90 	vmov	r0, s15
 800338a:	f7fd f8f5 	bl	8000578 <__aeabi_f2d>
 800338e:	a312      	add	r3, pc, #72	; (adr r3, 80033d8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f948 	bl	8000628 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fc ff8c 	bl	80002bc <__adddf3>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4619      	mov	r1, r3
 80033aa:	4622      	mov	r2, r4
 80033ac:	8bfb      	ldrh	r3, [r7, #30]
 80033ae:	1c5c      	adds	r4, r3, #1
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	f7fd fc30 	bl	8000c18 <__aeabi_d2f>
 80033b8:	4601      	mov	r1, r0
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033c0:	3308      	adds	r3, #8
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033c8:	8bfb      	ldrh	r3, [r7, #30]
 80033ca:	3301      	adds	r3, #1
 80033cc:	83fb      	strh	r3, [r7, #30]
 80033ce:	e76c      	b.n	80032aa <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80033d0:	bf00      	nop
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}
 80033d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033dc:	3f50624d 	.word	0x3f50624d

080033e0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe f94c 	bl	800168a <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033f8:	3360      	adds	r3, #96	; 0x60
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003404:	3362      	adds	r3, #98	; 0x62
 8003406:	2200      	movs	r2, #0
 8003408:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003410:	331c      	adds	r3, #28
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800342e:	3360      	adds	r3, #96	; 0x60
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800343a:	3362      	adds	r3, #98	; 0x62
 800343c:	2200      	movs	r2, #0
 800343e:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003446:	331c      	adds	r3, #28
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003468:	3360      	adds	r3, #96	; 0x60
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05e      	beq.n	800352e <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe f8dc 	bl	8001632 <_ZN7Encoder16getTotalDistanceEv>
 800347a:	eeb0 7a40 	vmov.f32	s14, s0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003484:	331c      	adds	r3, #28
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	bfac      	ite	ge
 8003494:	2301      	movge	r3, #1
 8003496:	2300      	movlt	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d025      	beq.n	80034ea <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80034a4:	331c      	adds	r3, #28
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034b0:	3362      	adds	r3, #98	; 0x62
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	3336      	adds	r3, #54	; 0x36
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80034cc:	331c      	adds	r3, #28
 80034ce:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034d8:	3362      	adds	r3, #98	; 0x62
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034e6:	3362      	adds	r3, #98	; 0x62
 80034e8:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034f0:	3362      	adds	r3, #98	; 0x62
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d906      	bls.n	800350a <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003502:	3362      	adds	r3, #98	; 0x62
 8003504:	f241 726f 	movw	r2, #5999	; 0x176f
 8003508:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003510:	3362      	adds	r3, #98	; 0x62
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800351a:	3308      	adds	r3, #8
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	eeb0 0a67 	vmov.f32	s0, s15
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb41 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe f862 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 8003550:	eeb0 7a40 	vmov.f32	s14, s0
 8003554:	edd7 7a00 	vldr	s15, [r7]
 8003558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	bf94      	ite	ls
 8003562:	2301      	movls	r3, #1
 8003564:	2300      	movhi	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003598:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800359c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80035b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c0:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	//static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <_ZN9LineTrace11isCrossLineEv+0x138>)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700 && encoder_->getCrossLineIgnoreDistance() >= 50){
 80035d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035d4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80036bc <_ZN9LineTrace11isCrossLineEv+0x140>
 80035d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d518      	bpl.n	8003614 <_ZN9LineTrace11isCrossLineEv+0x98>
 80035e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80036bc <_ZN9LineTrace11isCrossLineEv+0x140>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d50f      	bpl.n	8003614 <_ZN9LineTrace11isCrossLineEv+0x98>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f871 	bl	80016e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80035fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003602:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80036c0 <_ZN9LineTrace11isCrossLineEv+0x144>
 8003606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	db01      	blt.n	8003614 <_ZN9LineTrace11isCrossLineEv+0x98>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <_ZN9LineTrace11isCrossLineEv+0x9a>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	e002      	b.n	800362e <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003628:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800362a:	2200      	movs	r2, #0
 800362c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d938      	bls.n	80036a8 <_ZN9LineTrace11isCrossLineEv+0x12c>
			flag = true;
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
			//white_flag = true;
			cnt = 0;
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800363e:	2200      	movs	r2, #0
 8003640:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4618      	mov	r0, r3
 8003648:	f002 f9b2 	bl	80059b0 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe f837 	bl	80016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe f84f 	bl	80016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003666:	3335      	adds	r3, #53	; 0x35
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003672:	3364      	adds	r3, #100	; 0x64
 8003674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <_ZN9LineTrace11isCrossLineEv+0x114>
				store_check_cnt_ = 0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003682:	335a      	adds	r3, #90	; 0x5a
 8003684:	2200      	movs	r2, #0
 8003686:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff f995 	bl	80029b8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800368e:	e00b      	b.n	80036a8 <_ZN9LineTrace11isCrossLineEv+0x12c>
			}
			else{
				store_check_cnt_ = 0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003696:	335a      	adds	r3, #90	; 0x5a
 8003698:	2200      	movs	r2, #0
 800369a:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fb07 	bl	8002cb0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff f9be 	bl	8002a24 <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000208 	.word	0x20000208
 80036b8:	2000020c 	.word	0x2000020c
 80036bc:	442f0000 	.word	0x442f0000
 80036c0:	42480000 	.word	0x42480000
 80036c4:	20000218 	.word	0x20000218
 80036c8:	2000021a 	.word	0x2000021a

080036cc <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd ff99 	bl	8001614 <_ZN7Encoder15getDistance10mmEv>
 80036e2:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fea3 	bl	8005436 <_ZN8Odometry8getThetaEv>
 80036f0:	ec54 3b10 	vmov	r3, r4, d0
 80036f4:	4618      	mov	r0, r3
 80036f6:	4621      	mov	r1, r4
 80036f8:	f7fd fa8e 	bl	8000c18 <__aeabi_d2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003700:	edd7 7a04 	vldr	s15, [r7, #16]
 8003704:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	d101      	bne.n	8003712 <_ZN9LineTrace8isStableEv+0x46>
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <_ZN9LineTrace8isStableEv+0xd0>)
 8003710:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003712:	ed97 7a02 	vldr	s14, [r7, #8]
 8003716:	edd7 7a04 	vldr	s15, [r7, #16]
 800371a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800371e:	eeb0 0a66 	vmov.f32	s0, s13
 8003722:	f7fe fe83 	bl	800242c <_ZSt3absf>
 8003726:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800372a:	edd7 7a03 	vldr	s15, [r7, #12]
 800372e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80037a0 <_ZN9LineTrace8isStableEv+0xd4>
 8003732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	db01      	blt.n	8003740 <_ZN9LineTrace8isStableEv+0x74>
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <_ZN9LineTrace8isStableEv+0xd8>)
 800373e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003746:	3335      	adds	r3, #53	; 0x35
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003750:	2200      	movs	r2, #0
 8003752:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800375a:	3335      	adds	r3, #53	; 0x35
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003760:	edd7 7a03 	vldr	s15, [r7, #12]
 8003764:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80037ac <_ZN9LineTrace8isStableEv+0xe0>
 8003768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	db06      	blt.n	8003780 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <_ZN9LineTrace8isStableEv+0xdc>)
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	e002      	b.n	8003786 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003782:	2200      	movs	r2, #0
 8003784:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	2b18      	cmp	r3, #24
 800378c:	d901      	bls.n	8003792 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	3727c5ac 	.word	0x3727c5ac
 80037a0:	459c4000 	.word	0x459c4000
 80037a4:	459c4000 	.word	0x459c4000
 80037a8:	2000021c 	.word	0x2000021c
 80037ac:	44fa0000 	.word	0x44fa0000

080037b0 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b09a      	sub	sp, #104	; 0x68
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80037b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037bc:	2201      	movs	r2, #1
 80037be:	499e      	ldr	r1, [pc, #632]	; (8003a38 <_ZN9LineTrace4initEv+0x288>)
 80037c0:	489e      	ldr	r0, [pc, #632]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80037c2:	f7fe f82d 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80037c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037ca:	2201      	movs	r2, #1
 80037cc:	499c      	ldr	r1, [pc, #624]	; (8003a40 <_ZN9LineTrace4initEv+0x290>)
 80037ce:	489b      	ldr	r0, [pc, #620]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80037d0:	f7fe f826 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80037d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80037d8:	2201      	movs	r2, #1
 80037da:	499a      	ldr	r1, [pc, #616]	; (8003a44 <_ZN9LineTrace4initEv+0x294>)
 80037dc:	4897      	ldr	r0, [pc, #604]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80037de:	f7fe f81f 	bl	8001820 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80037e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80037e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80037ea:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80037ee:	eeb0 1a66 	vmov.f32	s2, s13
 80037f2:	eef0 0a47 	vmov.f32	s1, s14
 80037f6:	eeb0 0a67 	vmov.f32	s0, s15
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f94c 	bl	8003a98 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003804:	2201      	movs	r2, #1
 8003806:	4990      	ldr	r1, [pc, #576]	; (8003a48 <_ZN9LineTrace4initEv+0x298>)
 8003808:	488c      	ldr	r0, [pc, #560]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800380a:	f7fe f809 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 800380e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003812:	2201      	movs	r2, #1
 8003814:	498d      	ldr	r1, [pc, #564]	; (8003a4c <_ZN9LineTrace4initEv+0x29c>)
 8003816:	4889      	ldr	r0, [pc, #548]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003818:	f7fe f802 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 800381c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003820:	2201      	movs	r2, #1
 8003822:	498b      	ldr	r1, [pc, #556]	; (8003a50 <_ZN9LineTrace4initEv+0x2a0>)
 8003824:	4885      	ldr	r0, [pc, #532]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003826:	f7fd fffb 	bl	8001820 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 800382a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800382e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003832:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003836:	eeb0 1a66 	vmov.f32	s2, s13
 800383a:	eef0 0a47 	vmov.f32	s1, s14
 800383e:	eeb0 0a67 	vmov.f32	s0, s15
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f96e 	bl	8003b24 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_min_velocity, temp_max_velocity2, temp_min_velocity2,
		temp_max_velocity3, temp_min_velocity3, temp_max_velocity4, temp_min_velocity4;
	sd_read_array_float("PARAMS", "TARVEL.TXT", 1, &temp_velocity);
 8003848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800384c:	2201      	movs	r2, #1
 800384e:	4981      	ldr	r1, [pc, #516]	; (8003a54 <_ZN9LineTrace4initEv+0x2a4>)
 8003850:	487a      	ldr	r0, [pc, #488]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003852:	f7fd ffe5 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003856:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800385a:	2201      	movs	r2, #1
 800385c:	497e      	ldr	r1, [pc, #504]	; (8003a58 <_ZN9LineTrace4initEv+0x2a8>)
 800385e:	4877      	ldr	r0, [pc, #476]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003860:	f7fd ffde 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity);
 8003864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003868:	2201      	movs	r2, #1
 800386a:	497c      	ldr	r1, [pc, #496]	; (8003a5c <_ZN9LineTrace4initEv+0x2ac>)
 800386c:	4873      	ldr	r0, [pc, #460]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800386e:	f7fd ffd7 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003872:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003876:	2201      	movs	r2, #1
 8003878:	4979      	ldr	r1, [pc, #484]	; (8003a60 <_ZN9LineTrace4initEv+0x2b0>)
 800387a:	4870      	ldr	r0, [pc, #448]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800387c:	f7fd ffd0 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL3.TXT", 1, &temp_min_velocity2);
 8003880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003884:	2201      	movs	r2, #1
 8003886:	4977      	ldr	r1, [pc, #476]	; (8003a64 <_ZN9LineTrace4initEv+0x2b4>)
 8003888:	486c      	ldr	r0, [pc, #432]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800388a:	f7fd ffc9 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL4.TXT", 1, &temp_max_velocity3);
 800388e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003892:	2201      	movs	r2, #1
 8003894:	4974      	ldr	r1, [pc, #464]	; (8003a68 <_ZN9LineTrace4initEv+0x2b8>)
 8003896:	4869      	ldr	r0, [pc, #420]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003898:	f7fd ffc2 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL4.TXT", 1, &temp_min_velocity3);
 800389c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038a0:	2201      	movs	r2, #1
 80038a2:	4972      	ldr	r1, [pc, #456]	; (8003a6c <_ZN9LineTrace4initEv+0x2bc>)
 80038a4:	4865      	ldr	r0, [pc, #404]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80038a6:	f7fd ffbb 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL5.TXT", 1, &temp_max_velocity4);
 80038aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ae:	2201      	movs	r2, #1
 80038b0:	496f      	ldr	r1, [pc, #444]	; (8003a70 <_ZN9LineTrace4initEv+0x2c0>)
 80038b2:	4862      	ldr	r0, [pc, #392]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80038b4:	f7fd ffb4 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL5.TXT", 1, &temp_min_velocity4);
 80038b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038bc:	2201      	movs	r2, #1
 80038be:	496d      	ldr	r1, [pc, #436]	; (8003a74 <_ZN9LineTrace4initEv+0x2c4>)
 80038c0:	485e      	ldr	r0, [pc, #376]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80038c2:	f7fd ffad 	bl	8001820 <sd_read_array_float>

	setTargetVelocity(temp_velocity);
 80038c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f96e 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80038d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80038d8:	eeb0 0a67 	vmov.f32	s0, s15
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f977 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
	setMinVelocity(temp_min_velocity);
 80038e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038e6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f980 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80038f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038f4:	eeb0 0a67 	vmov.f32	s0, s15
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f989 	bl	8003c10 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity2(temp_min_velocity2);
 80038fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003902:	eeb0 0a67 	vmov.f32	s0, s15
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f992 	bl	8003c30 <_ZN9LineTrace15setMinVelocity2Ef>
	setMaxVelocity3(temp_max_velocity3);
 800390c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f99b 	bl	8003c50 <_ZN9LineTrace15setMaxVelocity3Ef>
	setMinVelocity3(temp_min_velocity3);
 800391a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800391e:	eeb0 0a67 	vmov.f32	s0, s15
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9a4 	bl	8003c70 <_ZN9LineTrace15setMinVelocity3Ef>
	setMaxVelocity4(temp_max_velocity4);
 8003928:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9ad 	bl	8003c90 <_ZN9LineTrace15setMaxVelocity4Ef>
	setMinVelocity4(temp_min_velocity4);
 8003936:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800393a:	eeb0 0a67 	vmov.f32	s0, s15
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9b6 	bl	8003cb0 <_ZN9LineTrace15setMinVelocity4Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003948:	2201      	movs	r2, #1
 800394a:	494b      	ldr	r1, [pc, #300]	; (8003a78 <_ZN9LineTrace4initEv+0x2c8>)
 800394c:	483b      	ldr	r0, [pc, #236]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800394e:	f7fd ff67 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003956:	2201      	movs	r2, #1
 8003958:	4948      	ldr	r1, [pc, #288]	; (8003a7c <_ZN9LineTrace4initEv+0x2cc>)
 800395a:	4838      	ldr	r0, [pc, #224]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800395c:	f7fd ff60 	bl	8001820 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003960:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003964:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003968:	eef0 0a47 	vmov.f32	s1, s14
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa3d 	bl	8003df0 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003982:	f107 0320 	add.w	r3, r7, #32
 8003986:	2201      	movs	r2, #1
 8003988:	493d      	ldr	r1, [pc, #244]	; (8003a80 <_ZN9LineTrace4initEv+0x2d0>)
 800398a:	482c      	ldr	r0, [pc, #176]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800398c:	f7fd ff48 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	2201      	movs	r2, #1
 8003996:	493b      	ldr	r1, [pc, #236]	; (8003a84 <_ZN9LineTrace4initEv+0x2d4>)
 8003998:	4828      	ldr	r0, [pc, #160]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 800399a:	f7fd ff41 	bl	8001820 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 800399e:	edd7 7a08 	vldr	s15, [r7, #32]
 80039a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a6:	eef0 0a47 	vmov.f32	s1, s14
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa38 	bl	8003e24 <_ZN9LineTrace13setMaxAccDec2Eff>

	float temp_acc3 = 0, temp_dec3 = 0;
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
	sd_read_array_float("PARAMS", "ACC3.TXT", 1, &temp_acc3);
 80039c0:	f107 0318 	add.w	r3, r7, #24
 80039c4:	2201      	movs	r2, #1
 80039c6:	4930      	ldr	r1, [pc, #192]	; (8003a88 <_ZN9LineTrace4initEv+0x2d8>)
 80039c8:	481c      	ldr	r0, [pc, #112]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80039ca:	f7fd ff29 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC3.TXT", 1, &temp_dec3);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	2201      	movs	r2, #1
 80039d4:	492d      	ldr	r1, [pc, #180]	; (8003a8c <_ZN9LineTrace4initEv+0x2dc>)
 80039d6:	4819      	ldr	r0, [pc, #100]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 80039d8:	f7fd ff22 	bl	8001820 <sd_read_array_float>
	setMaxAccDec3(temp_acc3, temp_dec3);
 80039dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80039e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80039e4:	eef0 0a47 	vmov.f32	s1, s14
 80039e8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fa33 	bl	8003e58 <_ZN9LineTrace13setMaxAccDec3Eff>

	float temp_acc4 = 0, temp_dec4 = 0;
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC4.TXT", 1, &temp_acc4);
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	2201      	movs	r2, #1
 8003a04:	4922      	ldr	r1, [pc, #136]	; (8003a90 <_ZN9LineTrace4initEv+0x2e0>)
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003a08:	f7fd ff0a 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC4.TXT", 1, &temp_dec4);
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	2201      	movs	r2, #1
 8003a12:	4920      	ldr	r1, [pc, #128]	; (8003a94 <_ZN9LineTrace4initEv+0x2e4>)
 8003a14:	4809      	ldr	r0, [pc, #36]	; (8003a3c <_ZN9LineTrace4initEv+0x28c>)
 8003a16:	f7fd ff03 	bl	8001820 <sd_read_array_float>
	setMaxAccDec4(temp_acc4, temp_dec4);
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a22:	eef0 0a47 	vmov.f32	s1, s14
 8003a26:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa2e 	bl	8003e8c <_ZN9LineTrace13setMaxAccDec4Eff>
}
 8003a30:	bf00      	nop
 8003a32:	3768      	adds	r7, #104	; 0x68
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	0801a380 	.word	0x0801a380
 8003a3c:	0801a388 	.word	0x0801a388
 8003a40:	0801a390 	.word	0x0801a390
 8003a44:	0801a398 	.word	0x0801a398
 8003a48:	0801a3a0 	.word	0x0801a3a0
 8003a4c:	0801a3ac 	.word	0x0801a3ac
 8003a50:	0801a3b8 	.word	0x0801a3b8
 8003a54:	0801a3c4 	.word	0x0801a3c4
 8003a58:	0801a3d0 	.word	0x0801a3d0
 8003a5c:	0801a3dc 	.word	0x0801a3dc
 8003a60:	0801a3e8 	.word	0x0801a3e8
 8003a64:	0801a3f4 	.word	0x0801a3f4
 8003a68:	0801a400 	.word	0x0801a400
 8003a6c:	0801a40c 	.word	0x0801a40c
 8003a70:	0801a418 	.word	0x0801a418
 8003a74:	0801a424 	.word	0x0801a424
 8003a78:	0801a430 	.word	0x0801a430
 8003a7c:	0801a438 	.word	0x0801a438
 8003a80:	0801a440 	.word	0x0801a440
 8003a84:	0801a44c 	.word	0x0801a44c
 8003a88:	0801a458 	.word	0x0801a458
 8003a8c:	0801a464 	.word	0x0801a464
 8003a90:	0801a470 	.word	0x0801a470
 8003a94:	0801a47c 	.word	0x0801a47c

08003a98 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003aa4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003aa8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
	return kp_;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	ee07 3a90 	vmov	s15, r3
}
 8003ada:	eeb0 0a67 	vmov.f32	s0, s15
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	return ki_;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	ee07 3a90 	vmov	s15, r3
}
 8003af8:	eeb0 0a67 	vmov.f32	s0, s15
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	ee07 3a90 	vmov	s15, r3
}
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b30:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b34:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	ee07 3a90 	vmov	s15, r3
}
 8003b66:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	ee07 3a90 	vmov	s15, r3
}
 8003b84:	eeb0 0a67 	vmov.f32	s0, s15
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	ee07 3a90 	vmov	s15, r3
}
 8003ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_ZN9LineTrace15setMaxVelocity3Ef>:

void LineTrace::setMaxVelocity3(float velocity)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	ed87 0a00 	vstr	s0, [r7]
	max_velocity3_ = velocity;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN9LineTrace15setMinVelocity3Ef>:

void LineTrace::setMinVelocity3(float velocity)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	ed87 0a00 	vstr	s0, [r7]
	min_velocity3_ = velocity;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_ZN9LineTrace15setMaxVelocity4Ef>:

void LineTrace::setMaxVelocity4(float velocity)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	ed87 0a00 	vstr	s0, [r7]
	max_velocity4_ = velocity;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZN9LineTrace15setMinVelocity4Ef>:

void LineTrace::setMinVelocity4(float velocity)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	ed87 0a00 	vstr	s0, [r7]
	min_velocity4_ = velocity;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cde:	ee07 3a90 	vmov	s15, r3
}
 8003ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cfe:	ee07 3a90 	vmov	s15, r3
}
 8003d02:	eeb0 0a67 	vmov.f32	s0, s15
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d1e:	ee07 3a90 	vmov	s15, r3
}
 8003d22:	eeb0 0a67 	vmov.f32	s0, s15
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d3e:	ee07 3a90 	vmov	s15, r3
}
 8003d42:	eeb0 0a67 	vmov.f32	s0, s15
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d5e:	ee07 3a90 	vmov	s15, r3
}
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN9LineTrace15getMaxVelocity3Ev>:

float LineTrace::getMaxVelocity3()
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	return max_velocity3_;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003d7e:	ee07 3a90 	vmov	s15, r3
}
 8003d82:	eeb0 0a67 	vmov.f32	s0, s15
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZN9LineTrace15getMinVelocity3Ev>:

float LineTrace::getMinVelocity3()
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	return min_velocity3_;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d9e:	ee07 3a90 	vmov	s15, r3
}
 8003da2:	eeb0 0a67 	vmov.f32	s0, s15
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN9LineTrace15getMaxVelocity4Ev>:

float LineTrace::getMaxVelocity4()

{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	return max_velocity4_;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003dbe:	ee07 3a90 	vmov	s15, r3
}
 8003dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_ZN9LineTrace15getMinVelocity4Ev>:

float LineTrace::getMinVelocity4()
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	return min_velocity4_;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003dde:	ee07 3a90 	vmov	s15, r3
}
 8003de2:	eeb0 0a67 	vmov.f32	s0, s15
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_ZN9LineTrace12setMaxAccDecEff>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dfc:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e06:	3338      	adds	r3, #56	; 0x38
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e30:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e3a:	3340      	adds	r3, #64	; 0x40
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e46:	3344      	adds	r3, #68	; 0x44
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_ZN9LineTrace13setMaxAccDec3Eff>:

void LineTrace::setMaxAccDec3(const float acc, const float dec)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e64:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc3_ = acc;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e6e:	3348      	adds	r3, #72	; 0x48
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	601a      	str	r2, [r3, #0]
	max_dec3_ = dec;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e7a:	334c      	adds	r3, #76	; 0x4c
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZN9LineTrace13setMaxAccDec4Eff>:

void LineTrace::setMaxAccDec4(const float acc, const float dec)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e98:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc4_ = acc;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ea2:	3350      	adds	r3, #80	; 0x50
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	601a      	str	r2, [r3, #0]
	max_dec4_ = dec;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003eae:	3354      	adds	r3, #84	; 0x54
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ece:	3338      	adds	r3, #56	; 0x38
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	ee07 3a90 	vmov	s15, r3
}
 8003ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ef2:	333c      	adds	r3, #60	; 0x3c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	ee07 3a90 	vmov	s15, r3
}
 8003efa:	eeb0 0a67 	vmov.f32	s0, s15
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f16:	3340      	adds	r3, #64	; 0x40
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	ee07 3a90 	vmov	s15, r3
}
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f3a:	3344      	adds	r3, #68	; 0x44
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	ee07 3a90 	vmov	s15, r3
}
 8003f42:	eeb0 0a67 	vmov.f32	s0, s15
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_ZN9LineTrace10getMaxAcc3Ev>:

float LineTrace::getMaxAcc3()
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	return max_acc3_;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f5e:	3348      	adds	r3, #72	; 0x48
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	ee07 3a90 	vmov	s15, r3
}
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_ZN9LineTrace10getMaxDec3Ev>:

float LineTrace::getMaxDec3()
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	return max_dec3_;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f82:	334c      	adds	r3, #76	; 0x4c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	ee07 3a90 	vmov	s15, r3
}
 8003f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZN9LineTrace10getMaxAcc4Ev>:

float LineTrace::getMaxAcc4()
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	return max_acc4_;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa6:	3350      	adds	r3, #80	; 0x50
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	ee07 3a90 	vmov	s15, r3
}
 8003fae:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_ZN9LineTrace10getMaxDec4Ev>:

float LineTrace::getMaxDec4()
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	return max_dec4_;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	ee07 3a90 	vmov	s15, r3
}
 8003fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80b4 	beq.w	800415c <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fe fbcb 	bl	8002790 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fa2d 	bl	800345a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8004000:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fa96 	bl	8003536 <_ZN9LineTrace16isTargetDistanceEf>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d028      	beq.n	8004062 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe fdf3 	bl	8002bfc <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fb58 	bl	80036cc <_ZN9LineTrace8isStableEv>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <_ZN9LineTrace4flipEv+0x5c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fc9a 	bl	8005960 <_ZN10SideSensor10getStatusLEv>
 800402c:	4603      	mov	r3, r0
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <_ZN9LineTrace4flipEv+0x5c>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <_ZN9LineTrace4flipEv+0x5e>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004048:	3333      	adds	r3, #51	; 0x33
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fb0b 	bl	800166e <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fa0c 	bl	800547a <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fa8a 	bl	800357c <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800406e:	3333      	adds	r3, #51	; 0x33
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <_ZN9LineTrace4flipEv+0xaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fc70 	bl	8005960 <_ZN10SideSensor10getStatusLEv>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <_ZN9LineTrace4flipEv+0xaa>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <_ZN9LineTrace4flipEv+0xac>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d02f      	beq.n	80040f0 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004096:	3364      	adds	r3, #100	; 0x64
 8004098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a6:	335a      	adds	r3, #90	; 0x5a
 80040a8:	2200      	movs	r2, #0
 80040aa:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fe fcef 	bl	8002a90 <_ZN9LineTrace21storeSideLineDistanceEv>
 80040b2:	e00b      	b.n	80040cc <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ba:	335a      	adds	r3, #90	; 0x5a
 80040bc:	2200      	movs	r2, #0
 80040be:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fe6f 	bl	8002da4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fe fd1a 	bl	8002b00 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d2:	3333      	adds	r3, #51	; 0x33
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040de:	3334      	adds	r3, #52	; 0x34
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ea:	3335      	adds	r3, #53	; 0x35
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fc75 	bl	80059e4 <_ZN10SideSensor13getIgnoreFlagEv>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00f      	beq.n	8004120 <_ZN9LineTrace4flipEv+0x140>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd face 	bl	80016a6 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 800410a:	eeb0 7a40 	vmov.f32	s14, s0
 800410e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004164 <_ZN9LineTrace4flipEv+0x184>
 8004112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	db01      	blt.n	8004120 <_ZN9LineTrace4flipEv+0x140>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <_ZN9LineTrace4flipEv+0x142>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fc4d 	bl	80059ca <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe f929 	bl	800238c <_ZN10LineSensor13emergencyStopEv>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	eddf 0a08 	vldr	s1, [pc, #32]	; 8004168 <_ZN9LineTrace4flipEv+0x188>
 8004148:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004168 <_ZN9LineTrace4flipEv+0x188>
 800414c:	4618      	mov	r0, r3
 800414e:	f001 ff67 	bl	8006020 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd f914 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	42c80000 	.word	0x42c80000
 8004168:	00000000 	.word	0x00000000

0800416c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800417e:	3364      	adds	r3, #100	; 0x64
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	801a      	strh	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 ff90 	bl	80060d2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fbea 	bl	8005990 <_ZN10SideSensor17resetWhiteLineCntEv>
	//clearSideLineDistance();
	clearSideLineDistance2();
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fe fcfa 	bl	8002bb6 <_ZN9LineTrace22clearSideLineDistance2Ev>
	//clearCrossLineDistance();
	clearCrossLineDistance2();
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe fcd4 	bl	8002b70 <_ZN9LineTrace23clearCrossLineDistance2Ev>
	crossline_idx_ = 0;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ce:	3328      	adds	r3, #40	; 0x28
 80041d0:	2200      	movs	r2, #0
 80041d2:	801a      	strh	r2, [r3, #0]
	crossline_idx2_ = 0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041da:	332a      	adds	r3, #42	; 0x2a
 80041dc:	2200      	movs	r2, #0
 80041de:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e6:	332c      	adds	r3, #44	; 0x2c
 80041e8:	2200      	movs	r2, #0
 80041ea:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041f2:	332e      	adds	r3, #46	; 0x2e
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041fe:	3330      	adds	r3, #48	; 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	801a      	strh	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004218:	2300      	movs	r3, #0
 800421a:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 800421c:	2300      	movs	r3, #0
 800421e:	733b      	strb	r3, [r7, #12]
	start();
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ffb5 	bl	8004190 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004226:	7b7b      	ldrb	r3, [r7, #13]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 815f 	bne.w	80044ec <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d03a      	beq.n	80042aa <_ZN9LineTrace7runningEv+0x9e>
 8004234:	2b0a      	cmp	r3, #10
 8004236:	d047      	beq.n	80042c8 <_ZN9LineTrace7runningEv+0xbc>
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 80c7 	bne.w	80043cc <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fb98 	bl	8005978 <_ZN10SideSensor10getStatusREv>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80b9 	beq.w	80043c2 <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fb85 	bl	8002960 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 feb1 	bl	8004fc2 <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004266:	3364      	adds	r3, #100	; 0x64
 8004268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff f8b5 	bl	80033e0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fa22 	bl	80016c4 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fa3a 	bl	80016fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd f9fb 	bl	800168a <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	330c      	adds	r3, #12
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fede 	bl	8002060 <_ZN3LED2LREaa>
				stage = 5;
 80042a4:	2305      	movs	r3, #5
 80042a6:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042a8:	e08b      	b.n	80043c2 <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 fb62 	bl	8005978 <_ZN10SideSensor10getStatusREv>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8082 	beq.w	80043c6 <_ZN9LineTrace7runningEv+0x1ba>
 80042c2:	230a      	movs	r3, #10
 80042c4:	81fb      	strh	r3, [r7, #14]

			break;
 80042c6:	e07e      	b.n	80043c6 <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fb47 	bl	8005960 <_ZN10SideSensor10getStatusLEv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00c      	beq.n	80042f2 <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 80042d8:	2300      	movs	r3, #0
 80042da:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd fa29 	bl	8001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	330c      	adds	r3, #12
 80042ea:	2142      	movs	r1, #66	; 0x42
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd fdfb 	bl	8001ee8 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 80042f2:	7b3b      	ldrb	r3, [r7, #12]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d017      	beq.n	800432e <_ZN9LineTrace7runningEv+0x122>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fb38 	bl	8005978 <_ZN10SideSensor10getStatusREv>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00f      	beq.n	800432e <_ZN9LineTrace7runningEv+0x122>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fa01 	bl	800171a <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004318:	eeb0 7a40 	vmov.f32	s14, s0
 800431c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	db01      	blt.n	800432e <_ZN9LineTrace7runningEv+0x122>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <_ZN9LineTrace7runningEv+0x124>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 8004334:	2301      	movs	r3, #1
 8004336:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd f9fb 	bl	8001738 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004348:	335c      	adds	r3, #92	; 0x5c
 800434a:	2200      	movs	r2, #0
 800434c:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	330c      	adds	r3, #12
 8004352:	2159      	movs	r1, #89	; 0x59
 8004354:	4618      	mov	r0, r3
 8004356:	f7fd fdc7 	bl	8001ee8 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 800435a:	e036      	b.n	80043ca <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 800435c:	7b3b      	ldrb	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00f      	beq.n	8004382 <_ZN9LineTrace7runningEv+0x176>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f9d7 	bl	800171a <_ZN7Encoder20getGoalJudgeDistanceEv>
 800436c:	eeb0 7a40 	vmov.f32	s14, s0
 8004370:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	db01      	blt.n	8004382 <_ZN9LineTrace7runningEv+0x176>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <_ZN9LineTrace7runningEv+0x178>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	330c      	adds	r3, #12
 800438c:	214d      	movs	r1, #77	; 0x4d
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fdaa 	bl	8001ee8 <_ZN3LED9fullColorEc>
				loggerStop();
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fe fafe 	bl	8002996 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff f840 	bl	8003420 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043a0:	2064      	movs	r0, #100	; 0x64
 80043a2:	f007 f82f 	bl	800b404 <HAL_Delay>
				setTargetVelocity(0);
 80043a6:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80044fc <_ZN9LineTrace7runningEv+0x2f0>
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fc00 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043b4:	f007 f826 	bl	800b404 <HAL_Delay>
				goal_flag = true;
 80043b8:	2301      	movs	r3, #1
 80043ba:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 80043bc:	2300      	movs	r3, #0
 80043be:	733b      	strb	r3, [r7, #12]
			break;
 80043c0:	e003      	b.n	80043ca <_ZN9LineTrace7runningEv+0x1be>
			break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80043ca:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043d2:	3358      	adds	r3, #88	; 0x58
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043e0:	3358      	adds	r3, #88	; 0x58
 80043e2:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ea:	3358      	adds	r3, #88	; 0x58
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d906      	bls.n	8004404 <_ZN9LineTrace7runningEv+0x1f8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043fc:	3358      	adds	r3, #88	; 0x58
 80043fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004402:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800440a:	3358      	adds	r3, #88	; 0x58
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004412:	d805      	bhi.n	8004420 <_ZN9LineTrace7runningEv+0x214>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	330c      	adds	r3, #12
 8004418:	2152      	movs	r1, #82	; 0x52
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd fd64 	bl	8001ee8 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004426:	335a      	adds	r3, #90	; 0x5a
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004434:	335a      	adds	r3, #90	; 0x5a
 8004436:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800443e:	335a      	adds	r3, #90	; 0x5a
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	f242 720f 	movw	r2, #9999	; 0x270f
 8004446:	4293      	cmp	r3, r2
 8004448:	d906      	bls.n	8004458 <_ZN9LineTrace7runningEv+0x24c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004450:	335a      	adds	r3, #90	; 0x5a
 8004452:	f242 7210 	movw	r2, #10000	; 0x2710
 8004456:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800445e:	335a      	adds	r3, #90	; 0x5a
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004466:	d808      	bhi.n	800447a <_ZN9LineTrace7runningEv+0x26e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	330c      	adds	r3, #12
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fdf4 	bl	8002060 <_ZN3LED2LREaa>
 8004478:	e007      	b.n	800448a <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	330c      	adds	r3, #12
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fdeb 	bl	8002060 <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004490:	335c      	adds	r3, #92	; 0x5c
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800449e:	335c      	adds	r3, #92	; 0x5c
 80044a0:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044a8:	335c      	adds	r3, #92	; 0x5c
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d906      	bls.n	80044c2 <_ZN9LineTrace7runningEv+0x2b6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044ba:	335c      	adds	r3, #92	; 0x5c
 80044bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80044c0:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044c8:	335c      	adds	r3, #92	; 0x5c
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2bc8      	cmp	r3, #200	; 0xc8
 80044ce:	d806      	bhi.n	80044de <_ZN9LineTrace7runningEv+0x2d2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	330c      	adds	r3, #12
 80044d4:	2159      	movs	r1, #89	; 0x59
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fd06 	bl	8001ee8 <_ZN3LED9fullColorEc>
 80044dc:	e6a3      	b.n	8004226 <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	330c      	adds	r3, #12
 80044e2:	2142      	movs	r1, #66	; 0x42
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fcff 	bl	8001ee8 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 80044ea:	e69c      	b.n	8004226 <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f807 	bl	8004500 <_ZN9LineTrace4stopEv>
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	00000000 	.word	0x00000000

08004500 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fdef 	bl	80060f8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	330c      	adds	r3, #12
 800451e:	2201      	movs	r2, #1
 8004520:	f04f 31ff 	mov.w	r1, #4294967295
 8004524:	4618      	mov	r0, r3
 8004526:	f7fd fd9b 	bl	8002060 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004530:	3364      	adds	r3, #100	; 0x64
 8004532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11e      	bne.n	8004578 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69d8      	ldr	r0, [r3, #28]
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <_ZN9LineTrace4stopEv+0xd8>)
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <_ZN9LineTrace4stopEv+0xdc>)
 8004542:	4927      	ldr	r1, [pc, #156]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 8004544:	f000 fc1f 	bl	8004d86 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800454e:	3368      	adds	r3, #104	; 0x68
 8004550:	2200      	movs	r2, #0
 8004552:	9200      	str	r2, [sp, #0]
 8004554:	2264      	movs	r2, #100	; 0x64
 8004556:	4923      	ldr	r1, [pc, #140]	; (80045e4 <_ZN9LineTrace4stopEv+0xe4>)
 8004558:	4821      	ldr	r0, [pc, #132]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 800455a:	f7fd f8fb 	bl	8001754 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004564:	3388      	adds	r3, #136	; 0x88
 8004566:	2200      	movs	r2, #0
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800456e:	491e      	ldr	r1, [pc, #120]	; (80045e8 <_ZN9LineTrace4stopEv+0xe8>)
 8004570:	481b      	ldr	r0, [pc, #108]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 8004572:	f7fd f8ef 	bl	8001754 <sd_write_array_float>
 8004576:	e01d      	b.n	80045b4 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69d8      	ldr	r0, [r3, #28]
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <_ZN9LineTrace4stopEv+0xec>)
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <_ZN9LineTrace4stopEv+0xf0>)
 8004580:	4917      	ldr	r1, [pc, #92]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 8004582:	f000 fc23 	bl	8004dcc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800458c:	33f8      	adds	r3, #248	; 0xf8
 800458e:	2200      	movs	r2, #0
 8004590:	9200      	str	r2, [sp, #0]
 8004592:	2264      	movs	r2, #100	; 0x64
 8004594:	4917      	ldr	r1, [pc, #92]	; (80045f4 <_ZN9LineTrace4stopEv+0xf4>)
 8004596:	4812      	ldr	r0, [pc, #72]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 8004598:	f7fd f8dc 	bl	8001754 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80045a2:	3358      	adds	r3, #88	; 0x58
 80045a4:	2200      	movs	r2, #0
 80045a6:	9200      	str	r2, [sp, #0]
 80045a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045ac:	4912      	ldr	r1, [pc, #72]	; (80045f8 <_ZN9LineTrace4stopEv+0xf8>)
 80045ae:	480c      	ldr	r0, [pc, #48]	; (80045e0 <_ZN9LineTrace4stopEv+0xe0>)
 80045b0:	f7fd f8d0 	bl	8001754 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	330c      	adds	r3, #12
 80045b8:	2200      	movs	r2, #0
 80045ba:	f04f 31ff 	mov.w	r1, #4294967295
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd fd4e 	bl	8002060 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fcdb 	bl	8004f84 <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	0801a488 	.word	0x0801a488
 80045dc:	0801a494 	.word	0x0801a494
 80045e0:	0801a4a4 	.word	0x0801a4a4
 80045e4:	0801a4b0 	.word	0x0801a4b0
 80045e8:	0801a4c0 	.word	0x0801a4c0
 80045ec:	0801a4cc 	.word	0x0801a4cc
 80045f0:	0801a4d8 	.word	0x0801a4d8
 80045f4:	0801a4e8 	.word	0x0801a4e8
 80045f8:	0801a4f8 	.word	0x0801a4f8

080045fc <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b08b      	sub	sp, #44	; 0x2c
 8004600:	af02      	add	r7, sp, #8
 8004602:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fb76 	bl	8004cfa <_ZN6Logger23getDistanceArrayPointerEv>
 800460e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fb7e 	bl	8004d16 <_ZN6Logger20getThetaArrayPointerEv>
 800461a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800461c:	2300      	movs	r3, #0
 800461e:	837b      	strh	r3, [r7, #26]
 8004620:	8b7b      	ldrh	r3, [r7, #26]
 8004622:	f241 726f 	movw	r2, #5999	; 0x176f
 8004626:	4293      	cmp	r3, r2
 8004628:	d84b      	bhi.n	80046c2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800462a:	8b7b      	ldrh	r3, [r7, #26]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004636:	8b7b      	ldrh	r3, [r7, #26]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004642:	edd7 7a07 	vldr	s15, [r7, #28]
 8004646:	eef5 7a40 	vcmp.f32	s15, #0.0
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	d101      	bne.n	8004654 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004650:	4b75      	ldr	r3, [pc, #468]	; (8004828 <_ZN9LineTrace20createVelocityTabeleEv+0x22c>)
 8004652:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004654:	ed97 7a02 	vldr	s14, [r7, #8]
 8004658:	edd7 7a07 	vldr	s15, [r7, #28]
 800465c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004660:	eeb0 0a66 	vmov.f32	s0, s13
 8004664:	f7fd fee2 	bl	800242c <_ZSt3absf>
 8004668:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800466c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004670:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800482c <_ZN9LineTrace20createVelocityTabeleEv+0x230>
 8004674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	db01      	blt.n	8004682 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800467e:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <_ZN9LineTrace20createVelocityTabeleEv+0x234>)
 8004680:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004682:	8b7c      	ldrh	r4, [r7, #26]
 8004684:	ed97 0a05 	vldr	s0, [r7, #20]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fe fbe9 	bl	8002e60 <_ZN9LineTrace15radius2VelocityEf>
 800468e:	eef0 7a40 	vmov.f32	s15, s0
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004698:	3308      	adds	r3, #8
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	441a      	add	r2, r3
 80046aa:	8b7b      	ldrh	r3, [r7, #26]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	3336      	adds	r3, #54	; 0x36
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	3304      	adds	r3, #4
 80046b8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046ba:	8b7b      	ldrh	r3, [r7, #26]
 80046bc:	3301      	adds	r3, #1
 80046be:	837b      	strh	r3, [r7, #26]
 80046c0:	e7ae      	b.n	8004620 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046c8:	3364      	adds	r3, #100	; 0x64
 80046ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d120      	bne.n	8004714 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046de:	3320      	adds	r3, #32
 80046e0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046e8:	333c      	adds	r3, #60	; 0x3c
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	eeb0 0a67 	vmov.f32	s0, s15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe fd2b 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004700:	3338      	adds	r3, #56	; 0x38
 8004702:	edd3 7a00 	vldr	s15, [r3]
 8004706:	6939      	ldr	r1, [r7, #16]
 8004708:	eeb0 0a67 	vmov.f32	s0, s15
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fe fdc3 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004712:	e079      	b.n	8004808 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800471a:	3364      	adds	r3, #100	; 0x64
 800471c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d120      	bne.n	8004766 <_ZN9LineTrace20createVelocityTabeleEv+0x16a>
		velocity_table_[0] = min_velocity2_;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004730:	3320      	adds	r3, #32
 8004732:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800473a:	3344      	adds	r3, #68	; 0x44
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	6939      	ldr	r1, [r7, #16]
 8004742:	eeb0 0a67 	vmov.f32	s0, s15
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fd02 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004752:	3340      	adds	r3, #64	; 0x40
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	6939      	ldr	r1, [r7, #16]
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fd9a 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004764:	e050      	b.n	8004808 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800476c:	3364      	adds	r3, #100	; 0x64
 800476e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d120      	bne.n	80047b8 <_ZN9LineTrace20createVelocityTabeleEv+0x1bc>
		velocity_table_[0] = min_velocity3_;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004782:	3320      	adds	r3, #32
 8004784:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800478c:	334c      	adds	r3, #76	; 0x4c
 800478e:	edd3 7a00 	vldr	s15, [r3]
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	eeb0 0a67 	vmov.f32	s0, s15
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fe fcd9 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047a4:	3348      	adds	r3, #72	; 0x48
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	6939      	ldr	r1, [r7, #16]
 80047ac:	eeb0 0a67 	vmov.f32	s0, s15
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fe fd71 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047b6:	e027      	b.n	8004808 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047be:	3364      	adds	r3, #100	; 0x64
 80047c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d11f      	bne.n	8004808 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
		velocity_table_[0] = min_velocity4_;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047d4:	3320      	adds	r3, #32
 80047d6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047de:	3354      	adds	r3, #84	; 0x54
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fe fcb0 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f6:	3350      	adds	r3, #80	; 0x50
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	6939      	ldr	r1, [r7, #16]
 80047fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fd48 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800480e:	3320      	adds	r3, #32
 8004810:	2200      	movs	r2, #0
 8004812:	9200      	str	r2, [sp, #0]
 8004814:	f241 7270 	movw	r2, #6000	; 0x1770
 8004818:	4906      	ldr	r1, [pc, #24]	; (8004834 <_ZN9LineTrace20createVelocityTabeleEv+0x238>)
 800481a:	4807      	ldr	r0, [pc, #28]	; (8004838 <_ZN9LineTrace20createVelocityTabeleEv+0x23c>)
 800481c:	f7fc ff9a 	bl	8001754 <sd_write_array_float>

}
 8004820:	bf00      	nop
 8004822:	3724      	adds	r7, #36	; 0x24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}
 8004828:	3727c5ac 	.word	0x3727c5ac
 800482c:	459c4000 	.word	0x459c4000
 8004830:	459c4000 	.word	0x459c4000
 8004834:	0801a508 	.word	0x0801a508
 8004838:	0801a4a4 	.word	0x0801a4a4

0800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b08b      	sub	sp, #44	; 0x2c
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69d8      	ldr	r0, [r3, #28]
 8004848:	4b94      	ldr	r3, [pc, #592]	; (8004a9c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x260>)
 800484a:	4a95      	ldr	r2, [pc, #596]	; (8004aa0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x264>)
 800484c:	4995      	ldr	r1, [pc, #596]	; (8004aa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 800484e:	f000 fae1 	bl	8004e14 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004858:	3368      	adds	r3, #104	; 0x68
 800485a:	2264      	movs	r2, #100	; 0x64
 800485c:	4992      	ldr	r1, [pc, #584]	; (8004aa8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x26c>)
 800485e:	4891      	ldr	r0, [pc, #580]	; (8004aa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004860:	f7fc ffde 	bl	8001820 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800486a:	3388      	adds	r3, #136	; 0x88
 800486c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004870:	498e      	ldr	r1, [pc, #568]	; (8004aac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x270>)
 8004872:	488c      	ldr	r0, [pc, #560]	; (8004aa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004874:	f7fc ffd4 	bl	8001820 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fa3c 	bl	8004cfa <_ZN6Logger23getDistanceArrayPointerEv>
 8004882:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fa44 	bl	8004d16 <_ZN6Logger20getThetaArrayPointerEv>
 800488e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004890:	2300      	movs	r3, #0
 8004892:	837b      	strh	r3, [r7, #26]
 8004894:	8b7b      	ldrh	r3, [r7, #26]
 8004896:	f241 726f 	movw	r2, #5999	; 0x176f
 800489a:	4293      	cmp	r3, r2
 800489c:	d84b      	bhi.n	8004936 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80048aa:	8b7b      	ldrh	r3, [r7, #26]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80048b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80048ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d101      	bne.n	80048c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80048c4:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x274>)
 80048c6:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80048c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80048cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80048d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048d4:	eeb0 0a66 	vmov.f32	s0, s13
 80048d8:	f7fd fda8 	bl	800242c <_ZSt3absf>
 80048dc:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80048e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048e4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004ab4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x278>
 80048e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	db01      	blt.n	80048f6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80048f2:	4b71      	ldr	r3, [pc, #452]	; (8004ab8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x27c>)
 80048f4:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80048f6:	8b7c      	ldrh	r4, [r7, #26]
 80048f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe faaf 	bl	8002e60 <_ZN9LineTrace15radius2VelocityEf>
 8004902:	eef0 7a40 	vmov.f32	s15, s0
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800490c:	3308      	adds	r3, #8
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004916:	8b7b      	ldrh	r3, [r7, #26]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	441a      	add	r2, r3
 800491e:	8b7b      	ldrh	r3, [r7, #26]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	3336      	adds	r3, #54	; 0x36
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3304      	adds	r3, #4
 800492c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800492e:	8b7b      	ldrh	r3, [r7, #26]
 8004930:	3301      	adds	r3, #1
 8004932:	837b      	strh	r3, [r7, #26]
 8004934:	e7ae      	b.n	8004894 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800493c:	3364      	adds	r3, #100	; 0x64
 800493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d120      	bne.n	8004988 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004952:	3320      	adds	r3, #32
 8004954:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800495c:	333c      	adds	r3, #60	; 0x3c
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	6939      	ldr	r1, [r7, #16]
 8004964:	eeb0 0a67 	vmov.f32	s0, s15
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fe fbf1 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004974:	3338      	adds	r3, #56	; 0x38
 8004976:	edd3 7a00 	vldr	s15, [r3]
 800497a:	6939      	ldr	r1, [r7, #16]
 800497c:	eeb0 0a67 	vmov.f32	s0, s15
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fe fc89 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004986:	e079      	b.n	8004a7c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800498e:	3364      	adds	r3, #100	; 0x64
 8004990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d120      	bne.n	80049da <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19e>
		velocity_table_[0] = min_velocity2_;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80049a4:	3320      	adds	r3, #32
 80049a6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80049ae:	3344      	adds	r3, #68	; 0x44
 80049b0:	edd3 7a00 	vldr	s15, [r3]
 80049b4:	6939      	ldr	r1, [r7, #16]
 80049b6:	eeb0 0a67 	vmov.f32	s0, s15
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe fbc8 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80049c6:	3340      	adds	r3, #64	; 0x40
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	6939      	ldr	r1, [r7, #16]
 80049ce:	eeb0 0a67 	vmov.f32	s0, s15
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fe fc60 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80049d8:	e050      	b.n	8004a7c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80049e0:	3364      	adds	r3, #100	; 0x64
 80049e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d120      	bne.n	8004a2c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f0>
		velocity_table_[0] = min_velocity3_;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80049f6:	3320      	adds	r3, #32
 80049f8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a00:	334c      	adds	r3, #76	; 0x4c
 8004a02:	edd3 7a00 	vldr	s15, [r3]
 8004a06:	6939      	ldr	r1, [r7, #16]
 8004a08:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe fb9f 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a18:	3348      	adds	r3, #72	; 0x48
 8004a1a:	edd3 7a00 	vldr	s15, [r3]
 8004a1e:	6939      	ldr	r1, [r7, #16]
 8004a20:	eeb0 0a67 	vmov.f32	s0, s15
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fe fc37 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004a2a:	e027      	b.n	8004a7c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004a32:	3364      	adds	r3, #100	; 0x64
 8004a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d11f      	bne.n	8004a7c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
		velocity_table_[0] = min_velocity4_;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004a48:	3320      	adds	r3, #32
 8004a4a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a52:	3354      	adds	r3, #84	; 0x54
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	6939      	ldr	r1, [r7, #16]
 8004a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe fb76 	bl	8003150 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004a6a:	3350      	adds	r3, #80	; 0x50
 8004a6c:	edd3 7a00 	vldr	s15, [r3]
 8004a70:	6939      	ldr	r1, [r7, #16]
 8004a72:	eeb0 0a67 	vmov.f32	s0, s15
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fe fc0e 	bl	8003298 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004a82:	3320      	adds	r3, #32
 8004a84:	2200      	movs	r2, #0
 8004a86:	9200      	str	r2, [sp, #0]
 8004a88:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a8c:	490b      	ldr	r1, [pc, #44]	; (8004abc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x280>)
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004a90:	f7fc fe60 	bl	8001754 <sd_write_array_float>

}
 8004a94:	bf00      	nop
 8004a96:	3724      	adds	r7, #36	; 0x24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd90      	pop	{r4, r7, pc}
 8004a9c:	0801a488 	.word	0x0801a488
 8004aa0:	0801a494 	.word	0x0801a494
 8004aa4:	0801a4a4 	.word	0x0801a4a4
 8004aa8:	0801a4b0 	.word	0x0801a4b0
 8004aac:	0801a4c0 	.word	0x0801a4c0
 8004ab0:	3727c5ac 	.word	0x3727c5ac
 8004ab4:	459c4000 	.word	0x459c4000
 8004ab8:	459c4000 	.word	0x459c4000
 8004abc:	0801a508 	.word	0x0801a508

08004ac0 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ace:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004adc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aea:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004aee:	2200      	movs	r2, #0
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004af8:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 8004afc:	2200      	movs	r2, #0
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b06:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b14:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b18:	2200      	movs	r2, #0
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <_ZN6Logger8storeLogEf>:
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
}
void Logger::storeLog(float data)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b3e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d034      	beq.n	8004bb2 <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b4e:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b64:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b74:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004b78:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b80:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <_ZN6Logger8storeLogEf+0x94>)
 8004b88:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <_ZN6Logger8storeLogEf+0x98>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b96:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d906      	bls.n	8004bb2 <_ZN6Logger8storeLogEf+0x86>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004baa:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	801a      	strh	r2, [r3, #0]
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	2000021e 	.word	0x2000021e
 8004bc4:	20000224 	.word	0x20000224

08004bc8 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bda:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d036      	beq.n	8004c52 <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bea:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c04:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c14:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004c18:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c20:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <_ZN6Logger9storeLog2Ef+0x98>)
 8004c28:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <_ZN6Logger9storeLog2Ef+0x9c>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c36:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d906      	bls.n	8004c52 <_ZN6Logger9storeLog2Ef+0x8a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c4a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004c4e:	2200      	movs	r2, #0
 8004c50:	801a      	strh	r2, [r3, #0]
	}
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000220 	.word	0x20000220
 8004c64:	20000228 	.word	0x20000228

08004c68 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c74:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c7e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8004c8a:	3328      	adds	r3, #40	; 0x28
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c9a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8004ca6:	3318      	adds	r3, #24
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004cb6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004cc6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004cca:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004cd2:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	f241 726f 	movw	r2, #5999	; 0x176f
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d906      	bls.n	8004cee <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ce6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]
	//}
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004d08:	33a0      	adds	r3, #160	; 0xa0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004d24:	3360      	adds	r3, #96	; 0x60
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af02      	add	r7, sp, #8
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	68b8      	ldr	r0, [r7, #8]
 8004d4e:	f7fc fd01 	bl	8001754 <sd_write_array_float>
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	2200      	movs	r2, #0
 8004d70:	9200      	str	r2, [sp, #0]
 8004d72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f7fc fceb 	bl	8001754 <sd_write_array_float>
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004d9a:	33a0      	adds	r3, #160	; 0xa0
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	9200      	str	r2, [sp, #0]
 8004da0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	68b8      	ldr	r0, [r7, #8]
 8004da8:	f7fc fcd4 	bl	8001754 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004db2:	3360      	adds	r3, #96	; 0x60
 8004db4:	2200      	movs	r2, #0
 8004db6:	9200      	str	r2, [sp, #0]
 8004db8:	f241 7270 	movw	r2, #6000	; 0x1770
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f7fc fcc8 	bl	8001754 <sd_write_array_float>
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004de0:	3320      	adds	r3, #32
 8004de2:	2200      	movs	r2, #0
 8004de4:	9200      	str	r2, [sp, #0]
 8004de6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	68b8      	ldr	r0, [r7, #8]
 8004dee:	f7fc fcb1 	bl	8001754 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004df8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	9200      	str	r2, [sp, #0]
 8004e00:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f7fc fca4 	bl	8001754 <sd_write_array_float>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004e28:	33a0      	adds	r3, #160	; 0xa0
 8004e2a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f7fc fcf5 	bl	8001820 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	68b8      	ldr	r0, [r7, #8]
 8004e46:	f7fc fceb 	bl	8001820 <sd_read_array_float>
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 8004e52:	b480      	push	{r7}
 8004e54:	b08b      	sub	sp, #44	; 0x2c
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004e60:	3320      	adds	r3, #32
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004e6e:	3340      	adds	r3, #64	; 0x40
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d009      	beq.n	8004e8e <_ZN6Logger13resetLogsDis2Ev+0x3c>
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	617b      	str	r3, [r7, #20]
		log = 0;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	3304      	adds	r3, #4
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e7f1      	b.n	8004e72 <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004e94:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ea4:	3340      	adds	r3, #64	; 0x40
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d009      	beq.n	8004ec4 <_ZN6Logger13resetLogsDis2Ev+0x72>
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	e7f1      	b.n	8004ea8 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004eca:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ece:	2200      	movs	r2, #0
 8004ed0:	801a      	strh	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	372c      	adds	r7, #44	; 0x2c
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004ef4:	3320      	adds	r3, #32
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d009      	beq.n	8004f14 <_ZN6Logger13resetLogsTim1Ev+0x36>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e7f1      	b.n	8004ef8 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f1a:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	801a      	strh	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d009      	beq.n	8004f6a <_ZN6Logger13resetLogsTim2Ev+0x3c>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3304      	adds	r3, #4
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e7f1      	b.n	8004f4e <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f70:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f74:	2200      	movs	r2, #0
 8004f76:	801a      	strh	r2, [r3, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f92:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f96:	2200      	movs	r2, #0
 8004f98:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fa0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fae:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fd0:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fde:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fec:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800500e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <_ZN7Logger2C1EP6sdCardt>:
 *      Author: Haruki Shimotori
 */

#include "Logger2.hpp"

Logger2::Logger2(sdCard *sd_card, uint16_t size) : sd_card_(sd_card), log_idx_(0), recording_flag_(false), max_log_size_(size)
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	809a      	strh	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	731a      	strb	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	81da      	strh	r2, [r3, #14]
{
	logs_ = new float[size];
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	4a09      	ldr	r2, [pc, #36]	; (8005074 <_ZN7Logger2C1EP6sdCardt+0x50>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d801      	bhi.n	8005056 <_ZN7Logger2C1EP6sdCardt+0x32>
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	e001      	b.n	800505a <_ZN7Logger2C1EP6sdCardt+0x36>
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	4618      	mov	r0, r3
 800505c:	f010 fecf 	bl	8015dfe <_Znaj>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	1ffffffe 	.word	0x1ffffffe

08005078 <_ZN7Logger29storeLogsEf>:

void Logger2::storeLogs(float data)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7b1b      	ldrb	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <_ZN7Logger29storeLogsEf+0x42>
		logs_[log_idx_] = data;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	889b      	ldrh	r3, [r3, #4]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	601a      	str	r2, [r3, #0]

		log_idx_++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	889b      	ldrh	r3, [r3, #4]
 80050a0:	3301      	adds	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	809a      	strh	r2, [r3, #4]

		if(log_idx_ >= max_log_size_) log_idx_ = 0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	889a      	ldrh	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	89db      	ldrh	r3, [r3, #14]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <_ZN7Logger29storeLogsEf+0x42>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	809a      	strh	r2, [r3, #4]
	}

}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <_ZN7Logger28saveLogsEPKcS1_>:
void Logger2::saveLogs(const char *directory_name, const char *file_name)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b086      	sub	sp, #24
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
	sd_card_->write_(directory_name, file_name, max_log_size_, logs_, OVER_WRITE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	89d9      	ldrh	r1, [r3, #14]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	460b      	mov	r3, r1
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	f002 f845 	bl	8007178 <_ZN6sdCard6write_EPKcS1_tPfc>
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <_ZN7Logger29clearLogsEv>:
void Logger2::clearLogs()
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < max_log_size_; i++){
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	89db      	ldrh	r3, [r3, #14]
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4293      	cmp	r3, r2
 800510c:	da0b      	bge.n	8005126 <_ZN7Logger29clearLogsEv+0x30>
		logs_[i] = 0;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_log_size_; i++){
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e7ed      	b.n	8005102 <_ZN7Logger29clearLogsEv+0xc>
	}

	log_idx_ = 0;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	809a      	strh	r2, [r3, #4]

}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_ZN7Logger25startEv>:

void Logger2::start()
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	731a      	strb	r2, [r3, #12]
	log_idx_ = 0;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	809a      	strh	r2, [r3, #4]

}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_ZN7Logger24stopEv>:

void Logger2::stop()
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	731a      	strb	r2, [r3, #12]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	801a      	strh	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	805a      	strh	r2, [r3, #2]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_ZN5Motor4initEv>:

void Motor::init()
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800519c:	2108      	movs	r1, #8
 800519e:	4805      	ldr	r0, [pc, #20]	; (80051b4 <_ZN5Motor4initEv+0x20>)
 80051a0:	f00b faf8 	bl	8010794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80051a4:	210c      	movs	r1, #12
 80051a6:	4803      	ldr	r0, [pc, #12]	; (80051b4 <_ZN5Motor4initEv+0x20>)
 80051a8:	f00b faf4 	bl	8010794 <HAL_TIM_PWM_Start>

}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20049aac 	.word	0x20049aac

080051b8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da0d      	bge.n	80051e6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80051ca:	2200      	movs	r2, #0
 80051cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051d0:	481f      	ldr	r0, [pc, #124]	; (8005250 <_ZN5Motor9motorCtrlEv+0x98>)
 80051d2:	f007 fbad 	bl	800c930 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	425b      	negs	r3, r3
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	81fb      	strh	r3, [r7, #14]
 80051e4:	e00a      	b.n	80051fc <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80051e6:	2201      	movs	r2, #1
 80051e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ec:	4818      	ldr	r0, [pc, #96]	; (8005250 <_ZN5Motor9motorCtrlEv+0x98>)
 80051ee:	f007 fb9f 	bl	800c930 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da0d      	bge.n	8005222 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8005206:	2201      	movs	r2, #1
 8005208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800520c:	4810      	ldr	r0, [pc, #64]	; (8005250 <_ZN5Motor9motorCtrlEv+0x98>)
 800520e:	f007 fb8f 	bl	800c930 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005218:	b29b      	uxth	r3, r3
 800521a:	425b      	negs	r3, r3
 800521c:	b29b      	uxth	r3, r3
 800521e:	81bb      	strh	r3, [r7, #12]
 8005220:	e00a      	b.n	8005238 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8005222:	2200      	movs	r2, #0
 8005224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005228:	4809      	ldr	r0, [pc, #36]	; (8005250 <_ZN5Motor9motorCtrlEv+0x98>)
 800522a:	f007 fb81 	bl	800c930 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005234:	b29b      	uxth	r3, r3
 8005236:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8005238:	89fa      	ldrh	r2, [r7, #14]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <_ZN5Motor9motorCtrlEv+0x9c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8005240:	89ba      	ldrh	r2, [r7, #12]
 8005242:	4b04      	ldr	r3, [pc, #16]	; (8005254 <_ZN5Motor9motorCtrlEv+0x9c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40020c00 	.word	0x40020c00
 8005254:	20049aac 	.word	0x20049aac

08005258 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6178      	str	r0, [r7, #20]
 8005260:	ed87 0b02 	vstr	d0, [r7, #8]
 8005264:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	4b30      	ldr	r3, [pc, #192]	; (8005330 <_ZN5Motor8setRatioEdd+0xd8>)
 800526e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005272:	f7fb fc69 	bl	8000b48 <__aeabi_dcmpgt>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <_ZN5Motor8setRatioEdd+0x30>
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	4c2b      	ldr	r4, [pc, #172]	; (8005330 <_ZN5Motor8setRatioEdd+0xd8>)
 8005282:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8005286:	e00e      	b.n	80052a6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	4b29      	ldr	r3, [pc, #164]	; (8005334 <_ZN5Motor8setRatioEdd+0xdc>)
 800528e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005292:	f7fb fc3b 	bl	8000b0c <__aeabi_dcmplt>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <_ZN5Motor8setRatioEdd+0x4e>
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	4c24      	ldr	r4, [pc, #144]	; (8005334 <_ZN5Motor8setRatioEdd+0xdc>)
 80052a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <_ZN5Motor8setRatioEdd+0xd8>)
 80052ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b0:	f7fb fc4a 	bl	8000b48 <__aeabi_dcmpgt>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <_ZN5Motor8setRatioEdd+0x6e>
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	4c1c      	ldr	r4, [pc, #112]	; (8005330 <_ZN5Motor8setRatioEdd+0xd8>)
 80052c0:	e9c7 3400 	strd	r3, r4, [r7]
 80052c4:	e00e      	b.n	80052e4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <_ZN5Motor8setRatioEdd+0xdc>)
 80052cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052d0:	f7fb fc1c 	bl	8000b0c <__aeabi_dcmplt>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <_ZN5Motor8setRatioEdd+0x8c>
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	4c15      	ldr	r4, [pc, #84]	; (8005334 <_ZN5Motor8setRatioEdd+0xdc>)
 80052e0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <_ZN5Motor8setRatioEdd+0xe0>)
 80052ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052ee:	f7fb f99b 	bl	8000628 <__aeabi_dmul>
 80052f2:	4603      	mov	r3, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	4618      	mov	r0, r3
 80052f8:	4621      	mov	r1, r4
 80052fa:	f7fb fc45 	bl	8000b88 <__aeabi_d2iz>
 80052fe:	4603      	mov	r3, r0
 8005300:	b21a      	sxth	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <_ZN5Motor8setRatioEdd+0xe0>)
 800530c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005310:	f7fb f98a 	bl	8000628 <__aeabi_dmul>
 8005314:	4603      	mov	r3, r0
 8005316:	460c      	mov	r4, r1
 8005318:	4618      	mov	r0, r3
 800531a:	4621      	mov	r1, r4
 800531c:	f7fb fc34 	bl	8000b88 <__aeabi_d2iz>
 8005320:	4603      	mov	r3, r0
 8005322:	b21a      	sxth	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	805a      	strh	r2, [r3, #2]

}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}
 8005330:	3ff00000 	.word	0x3ff00000
 8005334:	bff00000 	.word	0xbff00000
 8005338:	409c2000 	.word	0x409c2000

0800533c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800533c:	b490      	push	{r4, r7}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc90      	pop	{r4, r7}
 80053ac:	4770      	bx	lr
	...

080053b0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc fc67 	bl	8001c90 <_ZN3IMU8getOmegaEv>
 80053c2:	ee10 3a10 	vmov	r3, s0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb f8d6 	bl	8000578 <__aeabi_f2d>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 80053d4:	a310      	add	r3, pc, #64	; (adr r3, 8005418 <_ZN8Odometry12calcPotitionEv+0x68>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053de:	f7fb f923 	bl	8000628 <__aeabi_dmul>
 80053e2:	4603      	mov	r3, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80053f8:	461a      	mov	r2, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	f7fa ff5e 	bl	80002bc <__adddf3>
 8005400:	4603      	mov	r3, r0
 8005402:	460c      	mov	r4, r1
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bd90      	pop	{r4, r7, pc}
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	d2f1a9fc 	.word	0xd2f1a9fc
 800541c:	3f50624d 	.word	0x3f50624d

08005420 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ffc1 	bl	80053b0 <_ZN8Odometry12calcPotitionEv>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005436:	b490      	push	{r4, r7}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
	return theta_;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005444:	ec44 3b17 	vmov	d7, r3, r4
}
 8005448:	eeb0 0a47 	vmov.f32	s0, s14
 800544c:	eef0 0a67 	vmov.f32	s1, s15
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bc90      	pop	{r4, r7}
 8005456:	4770      	bx	lr

08005458 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005458:	b490      	push	{r4, r7}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005466:	ec44 3b17 	vmov	d7, r3, r4
}
 800546a:	eeb0 0a47 	vmov.f32	s0, s14
 800546e:	eef0 0a67 	vmov.f32	s1, s15
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bc90      	pop	{r4, r7}
 8005478:	4770      	bx	lr

0800547a <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 800547a:	b490      	push	{r4, r7}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	f04f 0400 	mov.w	r4, #0
 800548c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	f04f 0400 	mov.w	r4, #0
 800549a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc90      	pop	{r4, r7}
 80054b4:	4770      	bx	lr
	...

080054b8 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80054b8:	b490      	push	{r4, r7}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80054f6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80054fa:	2200      	movs	r2, #0
 80054fc:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80054fe:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <_ZN13PathFollowingC1Ev+0xec>)
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <_ZN13PathFollowingC1Ev+0xec>)
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800551a:	4a22      	ldr	r2, [pc, #136]	; (80055a4 <_ZN13PathFollowingC1Ev+0xec>)
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	f04f 0400 	mov.w	r4, #0
 8005540:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005560:	4a11      	ldr	r2, [pc, #68]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	f04f 0400 	mov.w	r4, #0
 8005578:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <_ZN13PathFollowingC1Ev+0xf4>)
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	f04f 0400 	mov.w	r4, #0
 8005586:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <_ZN13PathFollowingC1Ev+0xf4>)
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc90      	pop	{r4, r7}
 80055a2:	4770      	bx	lr
 80055a4:	20049fb0 	.word	0x20049fb0
 80055a8:	20049f40 	.word	0x20049f40
 80055ac:	20049fa0 	.word	0x20049fa0

080055b0 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80055b8:	f001 fd62 	bl	8007080 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80055bc:	f107 0318 	add.w	r3, r7, #24
 80055c0:	2201      	movs	r2, #1
 80055c2:	4915      	ldr	r1, [pc, #84]	; (8005618 <_ZN13PathFollowing4initEv+0x68>)
 80055c4:	4815      	ldr	r0, [pc, #84]	; (800561c <_ZN13PathFollowing4initEv+0x6c>)
 80055c6:	f7fc f971 	bl	80018ac <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80055ca:	f107 0310 	add.w	r3, r7, #16
 80055ce:	2201      	movs	r2, #1
 80055d0:	4913      	ldr	r1, [pc, #76]	; (8005620 <_ZN13PathFollowing4initEv+0x70>)
 80055d2:	4812      	ldr	r0, [pc, #72]	; (800561c <_ZN13PathFollowing4initEv+0x6c>)
 80055d4:	f7fc f96a 	bl	80018ac <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	2201      	movs	r2, #1
 80055de:	4911      	ldr	r1, [pc, #68]	; (8005624 <_ZN13PathFollowing4initEv+0x74>)
 80055e0:	480e      	ldr	r0, [pc, #56]	; (800561c <_ZN13PathFollowing4initEv+0x6c>)
 80055e2:	f7fc f963 	bl	80018ac <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80055e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80055ea:	ed97 6b04 	vldr	d6, [r7, #16]
 80055ee:	ed97 5b02 	vldr	d5, [r7, #8]
 80055f2:	eeb0 2a45 	vmov.f32	s4, s10
 80055f6:	eef0 2a65 	vmov.f32	s5, s11
 80055fa:	eeb0 1a46 	vmov.f32	s2, s12
 80055fe:	eef0 1a66 	vmov.f32	s3, s13
 8005602:	eeb0 0a47 	vmov.f32	s0, s14
 8005606:	eef0 0a67 	vmov.f32	s1, s15
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f80c 	bl	8005628 <_ZN13PathFollowing7setGainEddd>
}
 8005610:	bf00      	nop
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	0801a518 	.word	0x0801a518
 800561c:	0801a520 	.word	0x0801a520
 8005620:	0801a528 	.word	0x0801a528
 8005624:	0801a530 	.word	0x0801a530

08005628 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005628:	b490      	push	{r4, r7}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	61f8      	str	r0, [r7, #28]
 8005630:	ed87 0b04 	vstr	d0, [r7, #16]
 8005634:	ed87 1b02 	vstr	d1, [r7, #8]
 8005638:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 800563c:	4a09      	ldr	r2, [pc, #36]	; (8005664 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800563e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005642:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005648:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800564c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005652:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005656:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800565a:	bf00      	nop
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bc90      	pop	{r4, r7}
 8005662:	4770      	bx	lr
 8005664:	20049fb0 	.word	0x20049fb0

08005668 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005670:	2088      	movs	r0, #136	; 0x88
 8005672:	f7fc fbba 	bl	8001dea <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005676:	2080      	movs	r0, #128	; 0x80
 8005678:	f7fc fbb7 	bl	8001dea <INA260_init>
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	0000      	movs	r0, r0
	...

08005688 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005690:	2188      	movs	r1, #136	; 0x88
 8005692:	2002      	movs	r0, #2
 8005694:	f7fc fb46 	bl	8001d24 <INA260_read>
 8005698:	4603      	mov	r3, r0
 800569a:	4618      	mov	r0, r3
 800569c:	f7fa ff5a 	bl	8000554 <__aeabi_i2d>
 80056a0:	a30c      	add	r3, pc, #48	; (adr r3, 80056d4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fa ffbf 	bl	8000628 <__aeabi_dmul>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	4618      	mov	r0, r3
 80056b0:	4621      	mov	r1, r4
 80056b2:	f7fb fab1 	bl	8000c18 <__aeabi_d2f>
 80056b6:	4602      	mov	r2, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80056c2:	6013      	str	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd90      	pop	{r4, r7, pc}
 80056cc:	f3af 8000 	nop.w
 80056d0:	2000022c 	.word	0x2000022c
 80056d4:	47ae147b 	.word	0x47ae147b
 80056d8:	3f547ae1 	.word	0x3f547ae1

080056dc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	ee07 3a90 	vmov	s15, r3

}
 80056ec:	eeb0 0a67 	vmov.f32	s0, s15
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005708:	2102      	movs	r1, #2
 800570a:	4822      	ldr	r0, [pc, #136]	; (8005794 <_ZN12RotarySwitch8getValueEv+0x98>)
 800570c:	f007 f8f8 	bl	800c900 <HAL_GPIO_ReadPin>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005720:	89fb      	ldrh	r3, [r7, #14]
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005728:	2108      	movs	r1, #8
 800572a:	481a      	ldr	r0, [pc, #104]	; (8005794 <_ZN12RotarySwitch8getValueEv+0x98>)
 800572c:	f007 f8e8 	bl	800c900 <HAL_GPIO_ReadPin>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005748:	2110      	movs	r1, #16
 800574a:	4812      	ldr	r0, [pc, #72]	; (8005794 <_ZN12RotarySwitch8getValueEv+0x98>)
 800574c:	f007 f8d8 	bl	800c900 <HAL_GPIO_ReadPin>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	f043 0304 	orr.w	r3, r3, #4
 8005766:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	480a      	ldr	r0, [pc, #40]	; (8005794 <_ZN12RotarySwitch8getValueEv+0x98>)
 800576c:	f007 f8c8 	bl	800c900 <HAL_GPIO_ReadPin>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	f043 0308 	orr.w	r3, r3, #8
 8005786:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005788:	89fb      	ldrh	r3, [r7, #14]

}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40020c00 	.word	0x40020c00

08005798 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	709a      	strb	r2, [r3, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	70da      	strb	r2, [r3, #3]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	809a      	strh	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	80da      	strh	r2, [r3, #6]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	721a      	strb	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	815a      	strh	r2, [r3, #10]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	819a      	strh	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	739a      	strb	r2, [r3, #14]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	73da      	strb	r2, [r3, #15]
{

}
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 80057f4:	2104      	movs	r1, #4
 80057f6:	480e      	ldr	r0, [pc, #56]	; (8005830 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 80057f8:	f007 f882 	bl	800c900 <HAL_GPIO_ReadPin>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005818:	e005      	b.n	8005826 <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	739a      	strb	r2, [r3, #14]
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 800583c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005840:	480d      	ldr	r0, [pc, #52]	; (8005878 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005842:	f007 f85d 	bl	800c900 <HAL_GPIO_ReadPin>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 8005862:	e005      	b.n	8005870 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	73da      	strb	r2, [r3, #15]
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40020c00 	.word	0x40020c00

0800587c <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	timer_R_++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	895b      	ldrh	r3, [r3, #10]
 8005888:	3301      	adds	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	899b      	ldrh	r3, [r3, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	895b      	ldrh	r3, [r3, #10]
 80058a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d903      	bls.n	80058b0 <_ZN10SideSensor12updateStatusEv+0x34>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80058ae:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	899b      	ldrh	r3, [r3, #12]
 80058b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d903      	bls.n	80058c4 <_ZN10SideSensor12updateStatusEv+0x48>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f242 7210 	movw	r2, #10000	; 0x2710
 80058c2:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7a1b      	ldrb	r3, [r3, #8]
 80058c8:	f083 0301 	eor.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d019      	beq.n	8005906 <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7b9b      	ldrb	r3, [r3, #14]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <_ZN10SideSensor12updateStatusEv+0x6e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	895b      	ldrh	r3, [r3, #10]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d903      	bls.n	80058ea <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	70da      	strb	r2, [r3, #3]
 80058e8:	e00d      	b.n	8005906 <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7b9b      	ldrb	r3, [r3, #14]
 80058ee:	f083 0301 	eor.w	r3, r3, #1
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <_ZN10SideSensor12updateStatusEv+0x8a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	895b      	ldrh	r3, [r3, #10]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d902      	bls.n	8005906 <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7bdb      	ldrb	r3, [r3, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <_ZN10SideSensor12updateStatusEv+0xa2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	899b      	ldrh	r3, [r3, #12]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d903      	bls.n	800591e <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	709a      	strb	r2, [r3, #2]
 800591c:	e00d      	b.n	800593a <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7bdb      	ldrb	r3, [r3, #15]
 8005922:	f083 0301 	eor.w	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <_ZN10SideSensor12updateStatusEv+0xbe>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	899b      	ldrh	r3, [r3, #12]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d902      	bls.n	800593a <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	78da      	ldrb	r2, [r3, #3]
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005940:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	789a      	ldrb	r2, [r3, #2]
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005948:	701a      	strb	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000231 	.word	0x20000231
 800595c:	20000230 	.word	0x20000230

08005960 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	789b      	ldrb	r3, [r3, #2]
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	78db      	ldrb	r3, [r3, #3]
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	80da      	strh	r2, [r3, #6]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	721a      	strb	r2, [r3, #8]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	721a      	strb	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7a1b      	ldrb	r3, [r3, #8]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f010 fa58 	bl	8015ec8 <memset>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1e:	811a      	strh	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a26:	815a      	strh	r2, [r3, #10]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2e:	819a      	strh	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a36:	81da      	strh	r2, [r3, #14]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a3e:	821a      	strh	r2, [r3, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a46:	825a      	strh	r2, [r3, #18]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	829a      	strh	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	82da      	strh	r2, [r3, #22]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	831a      	strh	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	835a      	strh	r2, [r3, #26]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	839a      	strh	r2, [r3, #28]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	83da      	strh	r2, [r3, #30]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	841a      	strh	r2, [r3, #32]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a78:	845a      	strh	r2, [r3, #34]	; 0x22
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	849a      	strh	r2, [r3, #36]	; 0x24
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a86:	84da      	strh	r2, [r3, #38]	; 0x26
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aaa:	861a      	strh	r2, [r3, #48]	; 0x30
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	865a      	strh	r2, [r3, #50]	; 0x32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	869a      	strh	r2, [r3, #52]	; 0x34
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005abe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ac6:	871a      	strh	r2, [r3, #56]	; 0x38
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ba2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bbc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bce:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005be8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c02:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c0c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c1e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c28:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c3a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c44:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c4e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c70:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c7a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c84:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c8e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ca0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cdc:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cee:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d00:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d22:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d2c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d46:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d58:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	615a      	str	r2, [r3, #20]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	619a      	str	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	621a      	str	r2, [r3, #32]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	0000      	movs	r0, r0
 8005e24:	0000      	movs	r0, r0
	...

08005e28 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	f107 020c 	add.w	r2, r7, #12
 8005e38:	f107 0110 	add.w	r1, r7, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fb fbd5 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005e42:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e56:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f7fa fb8c 	bl	8000578 <__aeabi_f2d>
 8005e60:	a30e      	add	r3, pc, #56	; (adr r3, 8005e9c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fbdf 	bl	8000628 <__aeabi_dmul>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7fa fed1 	bl	8000c18 <__aeabi_d2f>
 8005e76:	4602      	mov	r2, r0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005e82:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	ee07 3a90 	vmov	s15, r3
}
 8005e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd90      	pop	{r4, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000234 	.word	0x20000234
 8005e9c:	1ab1d998 	.word	0x1ab1d998
 8005ea0:	3f7830b5 	.word	0x3f7830b5
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	ed93 7a00 	vldr	s14, [r3]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005ece:	4b48      	ldr	r3, [pc, #288]	; (8005ff0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ee4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eec:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005ef0:	4b3f      	ldr	r3, [pc, #252]	; (8005ff0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fa fb3f 	bl	8000578 <__aeabi_f2d>
 8005efa:	4604      	mov	r4, r0
 8005efc:	460d      	mov	r5, r1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	ed93 7a06 	vldr	s14, [r3, #24]
 8005f04:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0c:	ee17 0a90 	vmov	r0, s15
 8005f10:	f7fa fb32 	bl	8000578 <__aeabi_f2d>
 8005f14:	a334      	add	r3, pc, #208	; (adr r3, 8005fe8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa fb85 	bl	8000628 <__aeabi_dmul>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa f9c9 	bl	80002bc <__adddf3>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	4621      	mov	r1, r4
 8005f32:	f7fa fe71 	bl	8000c18 <__aeabi_d2f>
 8005f36:	4602      	mov	r2, r0
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f3a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005f42:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	edd7 6a05 	vldr	s13, [r7, #20]
 8005f4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f54:	ee17 0a90 	vmov	r0, s15
 8005f58:	f7fa fb0e 	bl	8000578 <__aeabi_f2d>
 8005f5c:	a322      	add	r3, pc, #136	; (adr r3, 8005fe8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f7fa fc8b 	bl	800087c <__aeabi_ddiv>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	f7fa fe53 	bl	8000c18 <__aeabi_d2f>
 8005f72:	4603      	mov	r3, r0
 8005f74:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005f76:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f8c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005f9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa2:	ee17 0a90 	vmov	r0, s15
 8005fa6:	f7fa fae7 	bl	8000578 <__aeabi_f2d>
 8005faa:	4605      	mov	r5, r0
 8005fac:	460e      	mov	r6, r1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005fb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8005fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fbc:	ee17 0a90 	vmov	r0, s15
 8005fc0:	f7fa fada 	bl	8000578 <__aeabi_f2d>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	ec43 2b11 	vmov	d1, r2, r3
 8005fcc:	ec46 5b10 	vmov	d0, r5, r6
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff f941 	bl	8005258 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005fec:	3f50624d 	.word	0x3f50624d
 8005ff0:	2000023c 	.word	0x2000023c
 8005ff4:	20000238 	.word	0x20000238

08005ff8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	ed87 0a02 	vstr	s0, [r7, #8]
 8006004:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	ed87 0a02 	vstr	s0, [r7, #8]
 800602c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	ed87 0a02 	vstr	s0, [r7, #8]
 8006054:	edc7 0a01 	vstr	s1, [r7, #4]
 8006058:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	615a      	str	r2, [r3, #20]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	ed87 0a02 	vstr	s0, [r7, #8]
 8006086:	edc7 0a01 	vstr	s1, [r7, #4]
 800608a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff feb7 	bl	8005e28 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff feef 	bl	8005ea8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006128 <_ZN12VelocityCtrl4stopEv+0x30>
 8006110:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006128 <_ZN12VelocityCtrl4stopEv+0x30>
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f89f 	bl	8005258 <_ZN5Motor8setRatioEdd>

}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	f3af 8000 	nop.w
	...

08006130 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	ee07 3a90 	vmov	s15, r3
}
 8006140:	eeb0 0a67 	vmov.f32	s0, s15
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	4603      	mov	r3, r0
 8006156:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	4618      	mov	r0, r3
 800615c:	f001 ffd8 	bl	8008110 <cppExit>
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 800617a:	f001 ffa1 	bl	80080c0 <cppFlip100ns>

		tim7_timer++;
 800617e:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006186:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d902      	bls.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x30>
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a17      	ldr	r2, [pc, #92]	; (80061fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80061a2:	f001 ff5d 	bl	8008060 <cppFlip1ms>

		tim6_timer++;
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3301      	adds	r3, #1
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061ae:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d902      	bls.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x58>
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a0f      	ldr	r2, [pc, #60]	; (8006204 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10e      	bne.n	80061e8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80061ca:	f001 ff83 	bl	80080d4 <cppFlip10ms>

		tim13_timer++;
 80061ce:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4a0c      	ldr	r2, [pc, #48]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061d6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d902      	bls.n	80061e8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
	}

}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40001400 	.word	0x40001400
 80061f4:	20049c60 	.word	0x20049c60
 80061f8:	0001869f 	.word	0x0001869f
 80061fc:	40001000 	.word	0x40001000
 8006200:	20049c1c 	.word	0x20049c1c
 8006204:	40001c00 	.word	0x40001c00
 8006208:	20049c64 	.word	0x20049c64

0800620c <init>:

void init()
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006210:	2201      	movs	r2, #1
 8006212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006216:	4808      	ldr	r0, [pc, #32]	; (8006238 <init+0x2c>)
 8006218:	f006 fb8a 	bl	800c930 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800621c:	4807      	ldr	r0, [pc, #28]	; (800623c <init+0x30>)
 800621e:	f00a fa6a 	bl	80106f6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8006222:	4807      	ldr	r0, [pc, #28]	; (8006240 <init+0x34>)
 8006224:	f00a fa67 	bl	80106f6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006228:	4806      	ldr	r0, [pc, #24]	; (8006244 <init+0x38>)
 800622a:	f00a fa64 	bl	80106f6 <HAL_TIM_Base_Start_IT>

	cppInit();
 800622e:	f001 fe5b 	bl	8007ee8 <cppInit>

	//path_following_initialize();

}
 8006232:	bf00      	nop
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	20049d48 	.word	0x20049d48
 8006240:	20049eec 	.word	0x20049eec
 8006244:	20049c68 	.word	0x20049c68

08006248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800624c:	f005 f868 	bl	800b320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006250:	f000 f82a 	bl	80062a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006254:	f000 fdbc 	bl	8006dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006258:	f000 fd8a 	bl	8006d70 <MX_DMA_Init>
  MX_I2C2_Init();
 800625c:	f000 f9e8 	bl	8006630 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006260:	f000 fa14 	bl	800668c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8006264:	f000 fa32 	bl	80066cc <MX_SPI2_Init>
  MX_TIM1_Init();
 8006268:	f000 fa66 	bl	8006738 <MX_TIM1_Init>
  MX_TIM4_Init();
 800626c:	f000 fb70 	bl	8006950 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006270:	f000 fc3c 	bl	8006aec <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8006274:	f000 fd52 	bl	8006d1c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006278:	f00c fa10 	bl	801269c <MX_FATFS_Init>
  MX_TIM6_Init();
 800627c:	f000 fbcc 	bl	8006a18 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006280:	f000 f9a8 	bl	80065d4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8006284:	f000 fb00 	bl	8006888 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006288:	f000 fc88 	bl	8006b9c <MX_TIM10_Init>
  MX_TIM11_Init();
 800628c:	f000 fcd4 	bl	8006c38 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006290:	f000 f898 	bl	80063c4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8006294:	f000 fbf6 	bl	8006a84 <MX_TIM7_Init>
  MX_TIM13_Init();
 8006298:	f000 fd1c 	bl	8006cd4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800629c:	f7ff ffb6 	bl	800620c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80062a0:	f001 ff52 	bl	8008148 <cppLoop>
 80062a4:	e7fc      	b.n	80062a0 <main+0x58>
	...

080062a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0a4      	sub	sp, #144	; 0x90
 80062ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80062b2:	2234      	movs	r2, #52	; 0x34
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f00f fe06 	bl	8015ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	60da      	str	r2, [r3, #12]
 80062ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062cc:	f107 030c 	add.w	r3, r7, #12
 80062d0:	223c      	movs	r2, #60	; 0x3c
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f00f fdf7 	bl	8015ec8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	4b37      	ldr	r3, [pc, #220]	; (80063bc <SystemClock_Config+0x114>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	4a36      	ldr	r2, [pc, #216]	; (80063bc <SystemClock_Config+0x114>)
 80062e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ea:	4b34      	ldr	r3, [pc, #208]	; (80063bc <SystemClock_Config+0x114>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f2:	60bb      	str	r3, [r7, #8]
 80062f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <SystemClock_Config+0x118>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <SystemClock_Config+0x118>)
 8006300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <SystemClock_Config+0x118>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006312:	2301      	movs	r3, #1
 8006314:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800631a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800631c:	2302      	movs	r3, #2
 800631e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006324:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006326:	2308      	movs	r3, #8
 8006328:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800632a:	23b4      	movs	r3, #180	; 0xb4
 800632c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006330:	2302      	movs	r3, #2
 8006332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006336:	2308      	movs	r3, #8
 8006338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800633c:	2302      	movs	r3, #2
 800633e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006346:	4618      	mov	r0, r3
 8006348:	f007 ff2c 	bl	800e1a4 <HAL_RCC_OscConfig>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006352:	f000 fe91 	bl	8007078 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006356:	f007 faa7 	bl	800d8a8 <HAL_PWREx_EnableOverDrive>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006360:	f000 fe8a 	bl	8007078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006364:	230f      	movs	r3, #15
 8006366:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006368:	2302      	movs	r3, #2
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800636c:	2300      	movs	r3, #0
 800636e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006370:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006374:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800637a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800637c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006380:	2105      	movs	r1, #5
 8006382:	4618      	mov	r0, r3
 8006384:	f007 fae0 	bl	800d948 <HAL_RCC_ClockConfig>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800638e:	f000 fe73 	bl	8007078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006392:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006396:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006398:	2300      	movs	r3, #0
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800639c:	2300      	movs	r3, #0
 800639e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	4618      	mov	r0, r3
 80063a6:	f007 fcbf 	bl	800dd28 <HAL_RCCEx_PeriphCLKConfig>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80063b0:	f000 fe62 	bl	8007078 <Error_Handler>
  }
}
 80063b4:	bf00      	nop
 80063b6:	3790      	adds	r7, #144	; 0x90
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40007000 	.word	0x40007000

080063c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063ca:	463b      	mov	r3, r7
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	609a      	str	r2, [r3, #8]
 80063d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80063d6:	4b7c      	ldr	r3, [pc, #496]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063d8:	4a7c      	ldr	r2, [pc, #496]	; (80065cc <MX_ADC2_Init+0x208>)
 80063da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80063dc:	4b7a      	ldr	r3, [pc, #488]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80063e4:	4b78      	ldr	r3, [pc, #480]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80063ea:	4b77      	ldr	r3, [pc, #476]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80063f0:	4b75      	ldr	r3, [pc, #468]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80063f6:	4b74      	ldr	r3, [pc, #464]	; (80065c8 <MX_ADC2_Init+0x204>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063fe:	4b72      	ldr	r3, [pc, #456]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006400:	2200      	movs	r2, #0
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006404:	4b70      	ldr	r3, [pc, #448]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006406:	4a72      	ldr	r2, [pc, #456]	; (80065d0 <MX_ADC2_Init+0x20c>)
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800640a:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <MX_ADC2_Init+0x204>)
 800640c:	2200      	movs	r2, #0
 800640e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006410:	4b6d      	ldr	r3, [pc, #436]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006412:	220e      	movs	r2, #14
 8006414:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006416:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800641e:	4b6a      	ldr	r3, [pc, #424]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006420:	2201      	movs	r2, #1
 8006422:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006424:	4868      	ldr	r0, [pc, #416]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006426:	f005 f80f 	bl	800b448 <HAL_ADC_Init>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006430:	f000 fe22 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006434:	230a      	movs	r3, #10
 8006436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006438:	2301      	movs	r3, #1
 800643a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800643c:	2306      	movs	r3, #6
 800643e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006440:	463b      	mov	r3, r7
 8006442:	4619      	mov	r1, r3
 8006444:	4860      	ldr	r0, [pc, #384]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006446:	f005 f953 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006450:	f000 fe12 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006454:	230b      	movs	r3, #11
 8006456:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006458:	2302      	movs	r3, #2
 800645a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800645c:	463b      	mov	r3, r7
 800645e:	4619      	mov	r1, r3
 8006460:	4859      	ldr	r0, [pc, #356]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006462:	f005 f945 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800646c:	f000 fe04 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006470:	230c      	movs	r3, #12
 8006472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006474:	2303      	movs	r3, #3
 8006476:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006478:	463b      	mov	r3, r7
 800647a:	4619      	mov	r1, r3
 800647c:	4852      	ldr	r0, [pc, #328]	; (80065c8 <MX_ADC2_Init+0x204>)
 800647e:	f005 f937 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006488:	f000 fdf6 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800648c:	230d      	movs	r3, #13
 800648e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006490:	2304      	movs	r3, #4
 8006492:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006494:	463b      	mov	r3, r7
 8006496:	4619      	mov	r1, r3
 8006498:	484b      	ldr	r0, [pc, #300]	; (80065c8 <MX_ADC2_Init+0x204>)
 800649a:	f005 f929 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80064a4:	f000 fde8 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80064ac:	2305      	movs	r3, #5
 80064ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064b0:	463b      	mov	r3, r7
 80064b2:	4619      	mov	r1, r3
 80064b4:	4844      	ldr	r0, [pc, #272]	; (80065c8 <MX_ADC2_Init+0x204>)
 80064b6:	f005 f91b 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80064c0:	f000 fdda 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80064c8:	2306      	movs	r3, #6
 80064ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064cc:	463b      	mov	r3, r7
 80064ce:	4619      	mov	r1, r3
 80064d0:	483d      	ldr	r0, [pc, #244]	; (80065c8 <MX_ADC2_Init+0x204>)
 80064d2:	f005 f90d 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80064dc:	f000 fdcc 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80064e0:	2302      	movs	r3, #2
 80064e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80064e4:	2307      	movs	r3, #7
 80064e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064e8:	463b      	mov	r3, r7
 80064ea:	4619      	mov	r1, r3
 80064ec:	4836      	ldr	r0, [pc, #216]	; (80065c8 <MX_ADC2_Init+0x204>)
 80064ee:	f005 f8ff 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80064f8:	f000 fdbe 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80064fc:	2303      	movs	r3, #3
 80064fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006500:	2308      	movs	r3, #8
 8006502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006504:	463b      	mov	r3, r7
 8006506:	4619      	mov	r1, r3
 8006508:	482f      	ldr	r0, [pc, #188]	; (80065c8 <MX_ADC2_Init+0x204>)
 800650a:	f005 f8f1 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006514:	f000 fdb0 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006518:	2304      	movs	r3, #4
 800651a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800651c:	2309      	movs	r3, #9
 800651e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006520:	463b      	mov	r3, r7
 8006522:	4619      	mov	r1, r3
 8006524:	4828      	ldr	r0, [pc, #160]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006526:	f005 f8e3 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006530:	f000 fda2 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006534:	2305      	movs	r3, #5
 8006536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006538:	230a      	movs	r3, #10
 800653a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800653c:	463b      	mov	r3, r7
 800653e:	4619      	mov	r1, r3
 8006540:	4821      	ldr	r0, [pc, #132]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006542:	f005 f8d5 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800654c:	f000 fd94 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006550:	2306      	movs	r3, #6
 8006552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006554:	230b      	movs	r3, #11
 8006556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006558:	463b      	mov	r3, r7
 800655a:	4619      	mov	r1, r3
 800655c:	481a      	ldr	r0, [pc, #104]	; (80065c8 <MX_ADC2_Init+0x204>)
 800655e:	f005 f8c7 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006568:	f000 fd86 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800656c:	2307      	movs	r3, #7
 800656e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006570:	230c      	movs	r3, #12
 8006572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006574:	463b      	mov	r3, r7
 8006576:	4619      	mov	r1, r3
 8006578:	4813      	ldr	r0, [pc, #76]	; (80065c8 <MX_ADC2_Init+0x204>)
 800657a:	f005 f8b9 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006584:	f000 fd78 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006588:	2308      	movs	r3, #8
 800658a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800658c:	230d      	movs	r3, #13
 800658e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006590:	463b      	mov	r3, r7
 8006592:	4619      	mov	r1, r3
 8006594:	480c      	ldr	r0, [pc, #48]	; (80065c8 <MX_ADC2_Init+0x204>)
 8006596:	f005 f8ab 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80065a0:	f000 fd6a 	bl	8007078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80065a4:	2309      	movs	r3, #9
 80065a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80065a8:	230e      	movs	r3, #14
 80065aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065ac:	463b      	mov	r3, r7
 80065ae:	4619      	mov	r1, r3
 80065b0:	4805      	ldr	r0, [pc, #20]	; (80065c8 <MX_ADC2_Init+0x204>)
 80065b2:	f005 f89d 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80065bc:	f000 fd5c 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20049aec 	.word	0x20049aec
 80065cc:	40012100 	.word	0x40012100
 80065d0:	0f000001 	.word	0x0f000001

080065d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <MX_I2C1_Init+0x50>)
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <MX_I2C1_Init+0x54>)
 80065dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <MX_I2C1_Init+0x50>)
 80065e0:	4a12      	ldr	r2, [pc, #72]	; (800662c <MX_I2C1_Init+0x58>)
 80065e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <MX_I2C1_Init+0x50>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <MX_I2C1_Init+0x50>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <MX_I2C1_Init+0x50>)
 80065f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <MX_I2C1_Init+0x50>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <MX_I2C1_Init+0x50>)
 8006600:	2200      	movs	r2, #0
 8006602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006604:	4b07      	ldr	r3, [pc, #28]	; (8006624 <MX_I2C1_Init+0x50>)
 8006606:	2200      	movs	r2, #0
 8006608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <MX_I2C1_Init+0x50>)
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006610:	4804      	ldr	r0, [pc, #16]	; (8006624 <MX_I2C1_Init+0x50>)
 8006612:	f006 f9bf 	bl	800c994 <HAL_I2C_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800661c:	f000 fd2c 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20049b34 	.word	0x20049b34
 8006628:	40005400 	.word	0x40005400
 800662c:	000186a0 	.word	0x000186a0

08006630 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <MX_I2C2_Init+0x50>)
 8006636:	4a13      	ldr	r2, [pc, #76]	; (8006684 <MX_I2C2_Init+0x54>)
 8006638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <MX_I2C2_Init+0x50>)
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <MX_I2C2_Init+0x58>)
 800663e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <MX_I2C2_Init+0x50>)
 8006642:	2200      	movs	r2, #0
 8006644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006646:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <MX_I2C2_Init+0x50>)
 8006648:	2200      	movs	r2, #0
 800664a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <MX_I2C2_Init+0x50>)
 800664e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <MX_I2C2_Init+0x50>)
 8006656:	2200      	movs	r2, #0
 8006658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <MX_I2C2_Init+0x50>)
 800665c:	2200      	movs	r2, #0
 800665e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <MX_I2C2_Init+0x50>)
 8006662:	2200      	movs	r2, #0
 8006664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <MX_I2C2_Init+0x50>)
 8006668:	2280      	movs	r2, #128	; 0x80
 800666a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800666c:	4804      	ldr	r0, [pc, #16]	; (8006680 <MX_I2C2_Init+0x50>)
 800666e:	f006 f991 	bl	800c994 <HAL_I2C_Init>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006678:	f000 fcfe 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20049bc8 	.word	0x20049bc8
 8006684:	40005800 	.word	0x40005800
 8006688:	000186a0 	.word	0x000186a0

0800668c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 8006692:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <MX_SDIO_SD_Init+0x3c>)
 8006694:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 8006698:	2200      	movs	r2, #0
 800669a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 800669e:	2200      	movs	r2, #0
 80066a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80066ae:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <MX_SDIO_SD_Init+0x38>)
 80066b6:	2204      	movs	r2, #4
 80066b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80066ba:	bf00      	nop
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20049dc8 	.word	0x20049dc8
 80066c8:	40012c00 	.word	0x40012c00

080066cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80066d0:	4b17      	ldr	r3, [pc, #92]	; (8006730 <MX_SPI2_Init+0x64>)
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <MX_SPI2_Init+0x68>)
 80066d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <MX_SPI2_Init+0x64>)
 80066d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80066de:	4b14      	ldr	r3, [pc, #80]	; (8006730 <MX_SPI2_Init+0x64>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <MX_SPI2_Init+0x64>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <MX_SPI2_Init+0x64>)
 80066ec:	2202      	movs	r2, #2
 80066ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <MX_SPI2_Init+0x64>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80066f6:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <MX_SPI2_Init+0x64>)
 80066f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <MX_SPI2_Init+0x64>)
 8006700:	2220      	movs	r2, #32
 8006702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <MX_SPI2_Init+0x64>)
 8006706:	2200      	movs	r2, #0
 8006708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <MX_SPI2_Init+0x64>)
 800670c:	2200      	movs	r2, #0
 800670e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <MX_SPI2_Init+0x64>)
 8006712:	2200      	movs	r2, #0
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <MX_SPI2_Init+0x64>)
 8006718:	220a      	movs	r2, #10
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800671c:	4804      	ldr	r0, [pc, #16]	; (8006730 <MX_SPI2_Init+0x64>)
 800671e:	f009 fa6b 	bl	800fbf8 <HAL_SPI_Init>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006728:	f000 fca6 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800672c:	bf00      	nop
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20049a14 	.word	0x20049a14
 8006734:	40003800 	.word	0x40003800

08006738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b09a      	sub	sp, #104	; 0x68
 800673c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800673e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006742:	2224      	movs	r2, #36	; 0x24
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f00f fbbe 	bl	8015ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800674c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006756:	f107 0320 	add.w	r3, r7, #32
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	609a      	str	r2, [r3, #8]
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	611a      	str	r2, [r3, #16]
 8006766:	615a      	str	r2, [r3, #20]
 8006768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800676a:	463b      	mov	r3, r7
 800676c:	2220      	movs	r2, #32
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f00f fba9 	bl	8015ec8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006776:	4b42      	ldr	r3, [pc, #264]	; (8006880 <MX_TIM1_Init+0x148>)
 8006778:	4a42      	ldr	r2, [pc, #264]	; (8006884 <MX_TIM1_Init+0x14c>)
 800677a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800677c:	4b40      	ldr	r3, [pc, #256]	; (8006880 <MX_TIM1_Init+0x148>)
 800677e:	2200      	movs	r2, #0
 8006780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006782:	4b3f      	ldr	r3, [pc, #252]	; (8006880 <MX_TIM1_Init+0x148>)
 8006784:	2200      	movs	r2, #0
 8006786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006788:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <MX_TIM1_Init+0x148>)
 800678a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800678e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006790:	4b3b      	ldr	r3, [pc, #236]	; (8006880 <MX_TIM1_Init+0x148>)
 8006792:	2200      	movs	r2, #0
 8006794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006796:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <MX_TIM1_Init+0x148>)
 8006798:	2200      	movs	r2, #0
 800679a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800679c:	4b38      	ldr	r3, [pc, #224]	; (8006880 <MX_TIM1_Init+0x148>)
 800679e:	2200      	movs	r2, #0
 80067a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80067a2:	4837      	ldr	r0, [pc, #220]	; (8006880 <MX_TIM1_Init+0x148>)
 80067a4:	f009 ffcb 	bl	801073e <HAL_TIM_PWM_Init>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80067ae:	f000 fc63 	bl	8007078 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80067b2:	2303      	movs	r3, #3
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80067b6:	2300      	movs	r3, #0
 80067b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80067ba:	2301      	movs	r3, #1
 80067bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80067be:	2300      	movs	r3, #0
 80067c0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80067c6:	2300      	movs	r3, #0
 80067c8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80067ca:	2301      	movs	r3, #1
 80067cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80067ce:	2300      	movs	r3, #0
 80067d0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80067d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067da:	4619      	mov	r1, r3
 80067dc:	4828      	ldr	r0, [pc, #160]	; (8006880 <MX_TIM1_Init+0x148>)
 80067de:	f00a f817 	bl	8010810 <HAL_TIM_Encoder_Init>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80067e8:	f000 fc46 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80067f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f8:	4619      	mov	r1, r3
 80067fa:	4821      	ldr	r0, [pc, #132]	; (8006880 <MX_TIM1_Init+0x148>)
 80067fc:	f00a fd3e 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006806:	f000 fc37 	bl	8007078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800680a:	2360      	movs	r3, #96	; 0x60
 800680c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006812:	2300      	movs	r3, #0
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006816:	2300      	movs	r3, #0
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800681a:	2300      	movs	r3, #0
 800681c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006822:	2300      	movs	r3, #0
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006826:	f107 0320 	add.w	r3, r7, #32
 800682a:	2208      	movs	r2, #8
 800682c:	4619      	mov	r1, r3
 800682e:	4814      	ldr	r0, [pc, #80]	; (8006880 <MX_TIM1_Init+0x148>)
 8006830:	f00a f9c0 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800683a:	f000 fc1d 	bl	8007078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800683e:	2300      	movs	r3, #0
 8006840:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800685c:	463b      	mov	r3, r7
 800685e:	4619      	mov	r1, r3
 8006860:	4807      	ldr	r0, [pc, #28]	; (8006880 <MX_TIM1_Init+0x148>)
 8006862:	f00a fd87 	bl	8011374 <HAL_TIMEx_ConfigBreakDeadTime>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800686c:	f000 fc04 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006870:	4803      	ldr	r0, [pc, #12]	; (8006880 <MX_TIM1_Init+0x148>)
 8006872:	f001 f925 	bl	8007ac0 <HAL_TIM_MspPostInit>

}
 8006876:	bf00      	nop
 8006878:	3768      	adds	r7, #104	; 0x68
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20049d88 	.word	0x20049d88
 8006884:	40010000 	.word	0x40010000

08006888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800688e:	f107 0320 	add.w	r3, r7, #32
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	609a      	str	r2, [r3, #8]
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	611a      	str	r2, [r3, #16]
 80068a6:	615a      	str	r2, [r3, #20]
 80068a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80068aa:	4b27      	ldr	r3, [pc, #156]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068ac:	4a27      	ldr	r2, [pc, #156]	; (800694c <MX_TIM3_Init+0xc4>)
 80068ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80068b0:	4b25      	ldr	r3, [pc, #148]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068be:	f241 1293 	movw	r2, #4499	; 0x1193
 80068c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068c4:	4b20      	ldr	r3, [pc, #128]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068ca:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80068d0:	481d      	ldr	r0, [pc, #116]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068d2:	f009 ff34 	bl	801073e <HAL_TIM_PWM_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80068dc:	f000 fbcc 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068e0:	2300      	movs	r3, #0
 80068e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80068e8:	f107 0320 	add.w	r3, r7, #32
 80068ec:	4619      	mov	r1, r3
 80068ee:	4816      	ldr	r0, [pc, #88]	; (8006948 <MX_TIM3_Init+0xc0>)
 80068f0:	f00a fcc4 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80068fa:	f000 fbbd 	bl	8007078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068fe:	2360      	movs	r3, #96	; 0x60
 8006900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2200      	movs	r2, #0
 8006912:	4619      	mov	r1, r3
 8006914:	480c      	ldr	r0, [pc, #48]	; (8006948 <MX_TIM3_Init+0xc0>)
 8006916:	f00a f94d 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006920:	f000 fbaa 	bl	8007078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	2204      	movs	r2, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4807      	ldr	r0, [pc, #28]	; (8006948 <MX_TIM3_Init+0xc0>)
 800692c:	f00a f942 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006936:	f000 fb9f 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800693a:	4803      	ldr	r0, [pc, #12]	; (8006948 <MX_TIM3_Init+0xc0>)
 800693c:	f001 f8c0 	bl	8007ac0 <HAL_TIM_MspPostInit>

}
 8006940:	bf00      	nop
 8006942:	3728      	adds	r7, #40	; 0x28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20049c20 	.word	0x20049c20
 800694c:	40000400 	.word	0x40000400

08006950 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	; 0x28
 8006954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006956:	f107 0320 	add.w	r3, r7, #32
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	609a      	str	r2, [r3, #8]
 800696a:	60da      	str	r2, [r3, #12]
 800696c:	611a      	str	r2, [r3, #16]
 800696e:	615a      	str	r2, [r3, #20]
 8006970:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006972:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <MX_TIM4_Init+0xc0>)
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <MX_TIM4_Init+0xc4>)
 8006976:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <MX_TIM4_Init+0xc0>)
 800697a:	2200      	movs	r2, #0
 800697c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800697e:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <MX_TIM4_Init+0xc0>)
 8006980:	2200      	movs	r2, #0
 8006982:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006984:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <MX_TIM4_Init+0xc0>)
 8006986:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800698a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800698c:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <MX_TIM4_Init+0xc0>)
 800698e:	2200      	movs	r2, #0
 8006990:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006992:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <MX_TIM4_Init+0xc0>)
 8006994:	2200      	movs	r2, #0
 8006996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006998:	481d      	ldr	r0, [pc, #116]	; (8006a10 <MX_TIM4_Init+0xc0>)
 800699a:	f009 fed0 	bl	801073e <HAL_TIM_PWM_Init>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80069a4:	f000 fb68 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80069b0:	f107 0320 	add.w	r3, r7, #32
 80069b4:	4619      	mov	r1, r3
 80069b6:	4816      	ldr	r0, [pc, #88]	; (8006a10 <MX_TIM4_Init+0xc0>)
 80069b8:	f00a fc60 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80069c2:	f000 fb59 	bl	8007078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069c6:	2360      	movs	r3, #96	; 0x60
 80069c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	2208      	movs	r2, #8
 80069da:	4619      	mov	r1, r3
 80069dc:	480c      	ldr	r0, [pc, #48]	; (8006a10 <MX_TIM4_Init+0xc0>)
 80069de:	f00a f8e9 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80069e8:	f000 fb46 	bl	8007078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	220c      	movs	r2, #12
 80069f0:	4619      	mov	r1, r3
 80069f2:	4807      	ldr	r0, [pc, #28]	; (8006a10 <MX_TIM4_Init+0xc0>)
 80069f4:	f00a f8de 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80069fe:	f000 fb3b 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006a02:	4803      	ldr	r0, [pc, #12]	; (8006a10 <MX_TIM4_Init+0xc0>)
 8006a04:	f001 f85c 	bl	8007ac0 <HAL_TIM_MspPostInit>

}
 8006a08:	bf00      	nop
 8006a0a:	3728      	adds	r7, #40	; 0x28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20049aac 	.word	0x20049aac
 8006a14:	40000800 	.word	0x40000800

08006a18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a1e:	463b      	mov	r3, r7
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a28:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <MX_TIM6_Init+0x68>)
 8006a2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006a2c:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a2e:	2259      	movs	r2, #89	; 0x59
 8006a30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a32:	4b12      	ldr	r3, [pc, #72]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006a3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a42:	2280      	movs	r2, #128	; 0x80
 8006a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a48:	f009 fe2a 	bl	80106a0 <HAL_TIM_Base_Init>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006a52:	f000 fb11 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a56:	2300      	movs	r3, #0
 8006a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4619      	mov	r1, r3
 8006a62:	4806      	ldr	r0, [pc, #24]	; (8006a7c <MX_TIM6_Init+0x64>)
 8006a64:	f00a fc0a 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006a6e:	f000 fb03 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20049d48 	.word	0x20049d48
 8006a80:	40001000 	.word	0x40001000

08006a84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <MX_TIM7_Init+0x64>)
 8006a96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006a9a:	22b3      	movs	r2, #179	; 0xb3
 8006a9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006aa4:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006aa6:	2231      	movs	r2, #49	; 0x31
 8006aa8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006aac:	2280      	movs	r2, #128	; 0x80
 8006aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006ab0:	480c      	ldr	r0, [pc, #48]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006ab2:	f009 fdf5 	bl	80106a0 <HAL_TIM_Base_Init>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006abc:	f000 fadc 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006ac8:	463b      	mov	r3, r7
 8006aca:	4619      	mov	r1, r3
 8006acc:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <MX_TIM7_Init+0x60>)
 8006ace:	f00a fbd5 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006ad8:	f000 face 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20049eec 	.word	0x20049eec
 8006ae8:	40001400 	.word	0x40001400

08006aec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f00f f9e4 	bl	8015ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006b08:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b0a:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <MX_TIM8_Init+0xac>)
 8006b0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006b0e:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006b14:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b16:	2210      	movs	r2, #16
 8006b18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b22:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b2e:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b34:	2303      	movs	r3, #3
 8006b36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	480d      	ldr	r0, [pc, #52]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b60:	f009 fe56 	bl	8010810 <HAL_TIM_Encoder_Init>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006b6a:	f000 fa85 	bl	8007078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4806      	ldr	r0, [pc, #24]	; (8006b94 <MX_TIM8_Init+0xa8>)
 8006b7c:	f00a fb7e 	bl	801127c <HAL_TIMEx_MasterConfigSynchronization>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006b86:	f000 fa77 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006b8a:	bf00      	nop
 8006b8c:	3730      	adds	r7, #48	; 0x30
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20049a6c 	.word	0x20049a6c
 8006b98:	40010400 	.word	0x40010400

08006b9c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	611a      	str	r2, [r3, #16]
 8006bb0:	615a      	str	r2, [r3, #20]
 8006bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bb6:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <MX_TIM10_Init+0x98>)
 8006bb8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bc8:	f242 3227 	movw	r2, #8999	; 0x2327
 8006bcc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bce:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bd4:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006bda:	4815      	ldr	r0, [pc, #84]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bdc:	f009 fd60 	bl	80106a0 <HAL_TIM_Base_Init>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006be6:	f000 fa47 	bl	8007078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006bea:	4811      	ldr	r0, [pc, #68]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006bec:	f009 fda7 	bl	801073e <HAL_TIM_PWM_Init>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006bf6:	f000 fa3f 	bl	8007078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bfa:	2360      	movs	r3, #96	; 0x60
 8006bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4807      	ldr	r0, [pc, #28]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006c12:	f009 ffcf 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006c1c:	f000 fa2c 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006c20:	4803      	ldr	r0, [pc, #12]	; (8006c30 <MX_TIM10_Init+0x94>)
 8006c22:	f000 ff4d 	bl	8007ac0 <HAL_TIM_MspPostInit>

}
 8006c26:	bf00      	nop
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20049b88 	.word	0x20049b88
 8006c34:	40014400 	.word	0x40014400

08006c38 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	609a      	str	r2, [r3, #8]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	611a      	str	r2, [r3, #16]
 8006c4c:	615a      	str	r2, [r3, #20]
 8006c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006c50:	4b1e      	ldr	r3, [pc, #120]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <MX_TIM11_Init+0x98>)
 8006c54:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c64:	f242 3227 	movw	r2, #8999	; 0x2327
 8006c68:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c6a:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c70:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006c76:	4815      	ldr	r0, [pc, #84]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c78:	f009 fd12 	bl	80106a0 <HAL_TIM_Base_Init>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006c82:	f000 f9f9 	bl	8007078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006c86:	4811      	ldr	r0, [pc, #68]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006c88:	f009 fd59 	bl	801073e <HAL_TIM_PWM_Init>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006c92:	f000 f9f1 	bl	8007078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c96:	2360      	movs	r3, #96	; 0x60
 8006c98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4619      	mov	r1, r3
 8006cac:	4807      	ldr	r0, [pc, #28]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006cae:	f009 ff81 	bl	8010bb4 <HAL_TIM_PWM_ConfigChannel>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006cb8:	f000 f9de 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006cbc:	4803      	ldr	r0, [pc, #12]	; (8006ccc <MX_TIM11_Init+0x94>)
 8006cbe:	f000 feff 	bl	8007ac0 <HAL_TIM_MspPostInit>

}
 8006cc2:	bf00      	nop
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20049ca8 	.word	0x20049ca8
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006cda:	4a0f      	ldr	r2, [pc, #60]	; (8006d18 <MX_TIM13_Init+0x44>)
 8006cdc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006ce0:	2259      	movs	r2, #89	; 0x59
 8006ce2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006cec:	f242 720f 	movw	r2, #9999	; 0x270f
 8006cf0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cf2:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006cfa:	2280      	movs	r2, #128	; 0x80
 8006cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006cfe:	4805      	ldr	r0, [pc, #20]	; (8006d14 <MX_TIM13_Init+0x40>)
 8006d00:	f009 fcce 	bl	80106a0 <HAL_TIM_Base_Init>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006d0a:	f000 f9b5 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006d0e:	bf00      	nop
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20049c68 	.word	0x20049c68
 8006d18:	40001c00 	.word	0x40001c00

08006d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006d20:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d22:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <MX_USART2_UART_Init+0x50>)
 8006d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d40:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d42:	220c      	movs	r2, #12
 8006d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d46:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d52:	4805      	ldr	r0, [pc, #20]	; (8006d68 <MX_USART2_UART_Init+0x4c>)
 8006d54:	f00a fb74 	bl	8011440 <HAL_UART_Init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006d5e:	f000 f98b 	bl	8007078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006d62:	bf00      	nop
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20049e4c 	.word	0x20049e4c
 8006d6c:	40004400 	.word	0x40004400

08006d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <MX_DMA_Init+0x5c>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <MX_DMA_Init+0x5c>)
 8006d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d84:	6313      	str	r3, [r2, #48]	; 0x30
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <MX_DMA_Init+0x5c>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006d92:	2200      	movs	r2, #0
 8006d94:	2100      	movs	r1, #0
 8006d96:	203a      	movs	r0, #58	; 0x3a
 8006d98:	f005 f835 	bl	800be06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006d9c:	203a      	movs	r0, #58	; 0x3a
 8006d9e:	f005 f84e 	bl	800be3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006da2:	2200      	movs	r2, #0
 8006da4:	2100      	movs	r1, #0
 8006da6:	203b      	movs	r0, #59	; 0x3b
 8006da8:	f005 f82d 	bl	800be06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006dac:	203b      	movs	r0, #59	; 0x3b
 8006dae:	f005 f846 	bl	800be3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	2045      	movs	r0, #69	; 0x45
 8006db8:	f005 f825 	bl	800be06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006dbc:	2045      	movs	r0, #69	; 0x45
 8006dbe:	f005 f83e 	bl	800be3e <HAL_NVIC_EnableIRQ>

}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800

08006dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd6:	f107 031c 	add.w	r3, r7, #28
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	4b9c      	ldr	r3, [pc, #624]	; (800705c <MX_GPIO_Init+0x28c>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	4a9b      	ldr	r2, [pc, #620]	; (800705c <MX_GPIO_Init+0x28c>)
 8006df0:	f043 0310 	orr.w	r3, r3, #16
 8006df4:	6313      	str	r3, [r2, #48]	; 0x30
 8006df6:	4b99      	ldr	r3, [pc, #612]	; (800705c <MX_GPIO_Init+0x28c>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	4b95      	ldr	r3, [pc, #596]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	4a94      	ldr	r2, [pc, #592]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	6313      	str	r3, [r2, #48]	; 0x30
 8006e12:	4b92      	ldr	r3, [pc, #584]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	4b8e      	ldr	r3, [pc, #568]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	4a8d      	ldr	r2, [pc, #564]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e28:	f043 0304 	orr.w	r3, r3, #4
 8006e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2e:	4b8b      	ldr	r3, [pc, #556]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	4b87      	ldr	r3, [pc, #540]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	4a86      	ldr	r2, [pc, #536]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6313      	str	r3, [r2, #48]	; 0x30
 8006e4a:	4b84      	ldr	r3, [pc, #528]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	4b80      	ldr	r3, [pc, #512]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	4a7f      	ldr	r2, [pc, #508]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	6313      	str	r3, [r2, #48]	; 0x30
 8006e66:	4b7d      	ldr	r3, [pc, #500]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	4b79      	ldr	r3, [pc, #484]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	4a78      	ldr	r2, [pc, #480]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	6313      	str	r3, [r2, #48]	; 0x30
 8006e82:	4b76      	ldr	r3, [pc, #472]	; (800705c <MX_GPIO_Init+0x28c>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	607b      	str	r3, [r7, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e94:	4872      	ldr	r0, [pc, #456]	; (8007060 <MX_GPIO_Init+0x290>)
 8006e96:	f005 fd4b 	bl	800c930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ea0:	4870      	ldr	r0, [pc, #448]	; (8007064 <MX_GPIO_Init+0x294>)
 8006ea2:	f005 fd45 	bl	800c930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006eac:	486e      	ldr	r0, [pc, #440]	; (8007068 <MX_GPIO_Init+0x298>)
 8006eae:	f005 fd3f 	bl	800c930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006eb8:	486c      	ldr	r0, [pc, #432]	; (800706c <MX_GPIO_Init+0x29c>)
 8006eba:	f005 fd39 	bl	800c930 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ec2:	4b6b      	ldr	r3, [pc, #428]	; (8007070 <MX_GPIO_Init+0x2a0>)
 8006ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006eca:	f107 031c 	add.w	r3, r7, #28
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4863      	ldr	r0, [pc, #396]	; (8007060 <MX_GPIO_Init+0x290>)
 8006ed2:	f005 fb6b 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ed6:	230f      	movs	r3, #15
 8006ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eda:	2303      	movs	r3, #3
 8006edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ee2:	f107 031c 	add.w	r3, r7, #28
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4862      	ldr	r0, [pc, #392]	; (8007074 <MX_GPIO_Init+0x2a4>)
 8006eea:	f005 fb5f 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006eee:	23e1      	movs	r3, #225	; 0xe1
 8006ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006efa:	f107 031c 	add.w	r3, r7, #28
 8006efe:	4619      	mov	r1, r3
 8006f00:	485a      	ldr	r0, [pc, #360]	; (800706c <MX_GPIO_Init+0x29c>)
 8006f02:	f005 fb53 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006f06:	2303      	movs	r3, #3
 8006f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f12:	f107 031c 	add.w	r3, r7, #28
 8006f16:	4619      	mov	r1, r3
 8006f18:	4852      	ldr	r0, [pc, #328]	; (8007064 <MX_GPIO_Init+0x294>)
 8006f1a:	f005 fb47 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f1e:	2304      	movs	r3, #4
 8006f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f26:	2301      	movs	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f2a:	f107 031c 	add.w	r3, r7, #28
 8006f2e:	4619      	mov	r1, r3
 8006f30:	484c      	ldr	r0, [pc, #304]	; (8007064 <MX_GPIO_Init+0x294>)
 8006f32:	f005 fb3b 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006f36:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f44:	f107 031c 	add.w	r3, r7, #28
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4845      	ldr	r0, [pc, #276]	; (8007060 <MX_GPIO_Init+0x290>)
 8006f4c:	f005 fb2e 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f56:	2301      	movs	r3, #1
 8006f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f62:	f107 031c 	add.w	r3, r7, #28
 8006f66:	4619      	mov	r1, r3
 8006f68:	483d      	ldr	r0, [pc, #244]	; (8007060 <MX_GPIO_Init+0x290>)
 8006f6a:	f005 fb1f 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f74:	2301      	movs	r3, #1
 8006f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f80:	f107 031c 	add.w	r3, r7, #28
 8006f84:	4619      	mov	r1, r3
 8006f86:	4837      	ldr	r0, [pc, #220]	; (8007064 <MX_GPIO_Init+0x294>)
 8006f88:	f005 fb10 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f92:	4b37      	ldr	r3, [pc, #220]	; (8007070 <MX_GPIO_Init+0x2a0>)
 8006f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f9a:	f107 031c 	add.w	r3, r7, #28
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4831      	ldr	r0, [pc, #196]	; (8007068 <MX_GPIO_Init+0x298>)
 8006fa2:	f005 fb03 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fac:	2301      	movs	r3, #1
 8006fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	482a      	ldr	r0, [pc, #168]	; (8007068 <MX_GPIO_Init+0x298>)
 8006fc0:	f005 faf4 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fd6:	f107 031c 	add.w	r3, r7, #28
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4822      	ldr	r0, [pc, #136]	; (8007068 <MX_GPIO_Init+0x298>)
 8006fde:	f005 fae5 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fe2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006fe6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff4:	f107 031c 	add.w	r3, r7, #28
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	481c      	ldr	r0, [pc, #112]	; (800706c <MX_GPIO_Init+0x29c>)
 8006ffc:	f005 fad6 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800700e:	f107 031c 	add.w	r3, r7, #28
 8007012:	4619      	mov	r1, r3
 8007014:	4815      	ldr	r0, [pc, #84]	; (800706c <MX_GPIO_Init+0x29c>)
 8007016:	f005 fac9 	bl	800c5ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800701a:	239b      	movs	r3, #155	; 0x9b
 800701c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800701e:	2300      	movs	r3, #0
 8007020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007022:	2301      	movs	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007026:	f107 031c 	add.w	r3, r7, #28
 800702a:	4619      	mov	r1, r3
 800702c:	480e      	ldr	r0, [pc, #56]	; (8007068 <MX_GPIO_Init+0x298>)
 800702e:	f005 fabd 	bl	800c5ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8007032:	2200      	movs	r2, #0
 8007034:	2100      	movs	r1, #0
 8007036:	2008      	movs	r0, #8
 8007038:	f004 fee5 	bl	800be06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800703c:	2008      	movs	r0, #8
 800703e:	f004 fefe 	bl	800be3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007042:	2200      	movs	r2, #0
 8007044:	2100      	movs	r1, #0
 8007046:	2017      	movs	r0, #23
 8007048:	f004 fedd 	bl	800be06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800704c:	2017      	movs	r0, #23
 800704e:	f004 fef6 	bl	800be3e <HAL_NVIC_EnableIRQ>

}
 8007052:	bf00      	nop
 8007054:	3730      	adds	r7, #48	; 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	40021000 	.word	0x40021000
 8007064:	40020400 	.word	0x40020400
 8007068:	40020c00 	.word	0x40020c00
 800706c:	40020000 	.word	0x40020000
 8007070:	10310000 	.word	0x10310000
 8007074:	40020800 	.word	0x40020800

08007078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800707c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800707e:	e7fe      	b.n	800707e <Error_Handler+0x6>

08007080 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8007084:	bf00      	nop
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <_ZN6sdCard9clearBuffEv>:
	f_open(&fil_, filepath_, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	f_chdir("..");
}

void sdCard::clearBuff()
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFF_SIZE; i++){
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b7f      	cmp	r3, #127	; 0x7f
 800709e:	dc0b      	bgt.n	80070b8 <_ZN6sdCard9clearBuffEv+0x2a>
		buffer_[i] = '\0';
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80070aa:	3329      	adds	r3, #41	; 0x29
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e7f0      	b.n	800709a <_ZN6sdCard9clearBuffEv+0xc>
	}
}
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <_ZN6sdCardC1Ev>:

sdCard::sdCard() : buffer_{0}, filepath_{0}, dirpath_{0}{}
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80070d2:	3329      	adds	r3, #41	; 0x29
 80070d4:	4618      	mov	r0, r3
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	461a      	mov	r2, r3
 80070da:	2100      	movs	r1, #0
 80070dc:	f00e fef4 	bl	8015ec8 <memset>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80070e6:	3304      	adds	r3, #4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ee:	461a      	mov	r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	f00e fee9 	bl	8015ec8 <memset>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80070fc:	3304      	adds	r3, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007104:	461a      	mov	r2, r3
 8007106:	2100      	movs	r1, #0
 8007108:	f00e fede 	bl	8015ec8 <memset>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <_ZN6sdCard4initEv>:

bool sdCard::init()
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
	if(mount_() == 1){
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f80a 	bl	8007138 <_ZN6sdCard6mount_Ev>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <_ZN6sdCard4initEv+0x18>
		return true;
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <_ZN6sdCard4initEv+0x1a>

	}
	else{
		return false;
 800712e:	2300      	movs	r3, #0
	}

}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZN6sdCard6mount_Ev>:


bool sdCard::mount_()
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]

	if(f_mount(&fs_, "", 1) == FR_OK) ret = true;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	490a      	ldr	r1, [pc, #40]	; (8007174 <_ZN6sdCard6mount_Ev+0x3c>)
 800714a:	4618      	mov	r0, r3
 800714c:	f00d fbc4 	bl	80148d8 <f_mount>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2300      	movne	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <_ZN6sdCard6mount_Ev+0x2e>
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
 8007164:	e001      	b.n	800716a <_ZN6sdCard6mount_Ev+0x32>
	else ret = false;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

	return ret;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	0801a568 	.word	0x0801a568

08007178 <_ZN6sdCard6write_EPKcS1_tPfc>:
void sdCard::userFclose_()
{
	f_close(&fil_);	//ファイル閉じる
}
void sdCard::write_(const char *p_folder_name, const char *p_file_name, uint16_t size, float *data, char state)
{
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b090      	sub	sp, #64	; 0x40
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	807b      	strh	r3, [r7, #2]
	//openFile(p_folder_name, p_file_name);

	static int num;
	char file_path1[6] = {'s', 'o', 'i', 'y', 'a', '\0'};
 8007186:	4a56      	ldr	r2, [pc, #344]	; (80072e0 <_ZN6sdCard6write_EPKcS1_tPfc+0x168>)
 8007188:	f107 0320 	add.w	r3, r7, #32
 800718c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007190:	6018      	str	r0, [r3, #0]
 8007192:	3304      	adds	r3, #4
 8007194:	8019      	strh	r1, [r3, #0]
	char *p1 = file_path1;
 8007196:	f107 0320 	add.w	r3, r7, #32
 800719a:	633b      	str	r3, [r7, #48]	; 0x30

	char file_path2[2] = {'1', '\0'};
 800719c:	2331      	movs	r3, #49	; 0x31
 800719e:	773b      	strb	r3, [r7, #28]
 80071a0:	2300      	movs	r3, #0
 80071a2:	777b      	strb	r3, [r7, #29]
	char *p2 = file_path2;
 80071a4:	f107 031c 	add.w	r3, r7, #28
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	char file_path3[5] = {'.', 't', 'x', 't', '\0'};
 80071aa:	4a4e      	ldr	r2, [pc, #312]	; (80072e4 <_ZN6sdCard6write_EPKcS1_tPfc+0x16c>)
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071b4:	6018      	str	r0, [r3, #0]
 80071b6:	3304      	adds	r3, #4
 80071b8:	7019      	strb	r1, [r3, #0]
	char *p3 = file_path3;
 80071ba:	f107 0314 	add.w	r3, r7, #20
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
	//sprintf(c, "%d", num);

	sprintf(dirpath_, "%s", p_folder_name);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80071c6:	3304      	adds	r3, #4
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f00f fe44 	bl	8016e58 <strcpy>
	//sprintf(filepath_, "%s", p_file_name);
	sprintf(filepath_, "%s%s%s", p1, p2, p3);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 5004 	add.w	r0, r3, #8448	; 0x2100
 80071d6:	3004      	adds	r0, #4
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e0:	4941      	ldr	r1, [pc, #260]	; (80072e8 <_ZN6sdCard6write_EPKcS1_tPfc+0x170>)
 80071e2:	f00f fded 	bl	8016dc0 <siprintf>

	strcpy(mon_c, filepath_);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	483e      	ldr	r0, [pc, #248]	; (80072ec <_ZN6sdCard6write_EPKcS1_tPfc+0x174>)
 80071f2:	f00f fe31 	bl	8016e58 <strcpy>
		//f_chdir(dirpath_);
		//f_unlink(filepath_);	//	一回消す
		//f_chdir("..");
	}

	f_mkdir(dirpath_);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80071fc:	3304      	adds	r3, #4
 80071fe:	4618      	mov	r0, r3
 8007200:	f00e fc4c 	bl	8015a9c <f_mkdir>
	f_chdir(dirpath_);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800720a:	3304      	adds	r3, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f00e f915 	bl	801543c <f_chdir>
	f_open(&fil_, filepath_, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007218:	3318      	adds	r3, #24
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f502 5104 	add.w	r1, r2, #8448	; 0x2100
 8007220:	3104      	adds	r1, #4
 8007222:	2213      	movs	r2, #19
 8007224:	4618      	mov	r0, r3
 8007226:	f00d fb9d 	bl	8014964 <f_open>
	f_chdir("..");
 800722a:	4831      	ldr	r0, [pc, #196]	; (80072f0 <_ZN6sdCard6write_EPKcS1_tPfc+0x178>)
 800722c:	f00e f906 	bl	801543c <f_chdir>

	for(short i = 0 ; i < size; i++){
 8007230:	2300      	movs	r3, #0
 8007232:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007234:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	429a      	cmp	r2, r3
 800723c:	da44      	bge.n	80072c8 <_ZN6sdCard6write_EPKcS1_tPfc+0x150>
		snprintf(buffer_, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 5401 	add.w	r4, r3, #8256	; 0x2040
 8007244:	3429      	adds	r4, #41	; 0x29
 8007246:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800724e:	4413      	add	r3, r2
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7f9 f990 	bl	8000578 <__aeabi_f2d>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9cd 2300 	strd	r2, r3, [sp]
 8007260:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <_ZN6sdCard6write_EPKcS1_tPfc+0x17c>)
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	4620      	mov	r0, r4
 8007266:	f00f fd77 	bl	8016d58 <sniprintf>

		f_lseek(&fil_, f_size(&fil_));	//	ファイルの最後に移動
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8007270:	3218      	adds	r2, #24
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007278:	3304      	adds	r3, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f00e f926 	bl	80154d0 <f_lseek>
		f_write(&fil_, buffer_, strlen(buffer_), &bw_);	//	書き込む
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 5481 	add.w	r4, r3, #4128	; 0x1020
 800728a:	3418      	adds	r4, #24
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 5501 	add.w	r5, r3, #8256	; 0x2040
 8007292:	3529      	adds	r5, #41	; 0x29
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800729a:	3329      	adds	r3, #41	; 0x29
 800729c:	4618      	mov	r0, r3
 800729e:	f7f8 ffaf 	bl	8000200 <strlen>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80072aa:	3330      	adds	r3, #48	; 0x30
 80072ac:	4629      	mov	r1, r5
 80072ae:	4620      	mov	r0, r4
 80072b0:	f00d fe85 	bl	8014fbe <f_write>

		clearBuff();	//	書き込み用のバッファをクリア
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff feea 	bl	800708e <_ZN6sdCard9clearBuffEv>
	for(short i = 0 ; i < size; i++){
 80072ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3301      	adds	r3, #1
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80072c6:	e7b5      	b.n	8007234 <_ZN6sdCard6write_EPKcS1_tPfc+0xbc>
	}

	f_close(&fil_);	//	ファイル閉じる
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80072ce:	3318      	adds	r3, #24
 80072d0:	4618      	mov	r0, r3
 80072d2:	f00e f889 	bl	80153e8 <f_close>

}
 80072d6:	bf00      	nop
 80072d8:	3738      	adds	r7, #56	; 0x38
 80072da:	46bd      	mov	sp, r7
 80072dc:	bdb0      	pop	{r4, r5, r7, pc}
 80072de:	bf00      	nop
 80072e0:	0801a578 	.word	0x0801a578
 80072e4:	0801a580 	.word	0x0801a580
 80072e8:	0801a56c 	.word	0x0801a56c
 80072ec:	20000240 	.word	0x20000240
 80072f0:	0801a55c 	.word	0x0801a55c
 80072f4:	0801a574 	.word	0x0801a574

080072f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <HAL_MspInit+0x4c>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	4a0f      	ldr	r2, [pc, #60]	; (8007344 <HAL_MspInit+0x4c>)
 8007308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800730c:	6453      	str	r3, [r2, #68]	; 0x44
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <HAL_MspInit+0x4c>)
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_MspInit+0x4c>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	4a08      	ldr	r2, [pc, #32]	; (8007344 <HAL_MspInit+0x4c>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007328:	6413      	str	r3, [r2, #64]	; 0x40
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_MspInit+0x4c>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40023800 	.word	0x40023800

08007348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007350:	f107 031c 	add.w	r3, r7, #28
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	60da      	str	r2, [r3, #12]
 800735e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a4a      	ldr	r2, [pc, #296]	; (8007490 <HAL_ADC_MspInit+0x148>)
 8007366:	4293      	cmp	r3, r2
 8007368:	f040 808e 	bne.w	8007488 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	4b48      	ldr	r3, [pc, #288]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	4a47      	ldr	r2, [pc, #284]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 8007376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800737a:	6453      	str	r3, [r2, #68]	; 0x44
 800737c:	4b45      	ldr	r3, [pc, #276]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	4b41      	ldr	r3, [pc, #260]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	4a40      	ldr	r2, [pc, #256]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 8007392:	f043 0304 	orr.w	r3, r3, #4
 8007396:	6313      	str	r3, [r2, #48]	; 0x30
 8007398:	4b3e      	ldr	r3, [pc, #248]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	4b3a      	ldr	r3, [pc, #232]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	4a39      	ldr	r2, [pc, #228]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6313      	str	r3, [r2, #48]	; 0x30
 80073b4:	4b37      	ldr	r3, [pc, #220]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	4b33      	ldr	r3, [pc, #204]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	4a32      	ldr	r2, [pc, #200]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	6313      	str	r3, [r2, #48]	; 0x30
 80073d0:	4b30      	ldr	r3, [pc, #192]	; (8007494 <HAL_ADC_MspInit+0x14c>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80073dc:	230f      	movs	r3, #15
 80073de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073e0:	2303      	movs	r3, #3
 80073e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073e8:	f107 031c 	add.w	r3, r7, #28
 80073ec:	4619      	mov	r1, r3
 80073ee:	482a      	ldr	r0, [pc, #168]	; (8007498 <HAL_ADC_MspInit+0x150>)
 80073f0:	f005 f8dc 	bl	800c5ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80073f4:	23ff      	movs	r3, #255	; 0xff
 80073f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073f8:	2303      	movs	r3, #3
 80073fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007400:	f107 031c 	add.w	r3, r7, #28
 8007404:	4619      	mov	r1, r3
 8007406:	4825      	ldr	r0, [pc, #148]	; (800749c <HAL_ADC_MspInit+0x154>)
 8007408:	f005 f8d0 	bl	800c5ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800740c:	2303      	movs	r3, #3
 800740e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007410:	2303      	movs	r3, #3
 8007412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	2300      	movs	r3, #0
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007418:	f107 031c 	add.w	r3, r7, #28
 800741c:	4619      	mov	r1, r3
 800741e:	4820      	ldr	r0, [pc, #128]	; (80074a0 <HAL_ADC_MspInit+0x158>)
 8007420:	f005 f8c4 	bl	800c5ac <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007424:	4b1f      	ldr	r3, [pc, #124]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007426:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <HAL_ADC_MspInit+0x160>)
 8007428:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 800742c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007430:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007434:	2200      	movs	r2, #0
 8007436:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 800743a:	2200      	movs	r2, #0
 800743c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007444:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007446:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800744c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007454:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800745c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007460:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007464:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007468:	2200      	movs	r2, #0
 800746a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800746c:	480d      	ldr	r0, [pc, #52]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 800746e:	f004 fd01 	bl	800be74 <HAL_DMA_Init>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8007478:	f7ff fdfe 	bl	8007078 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007480:	639a      	str	r2, [r3, #56]	; 0x38
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <HAL_ADC_MspInit+0x15c>)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007488:	bf00      	nop
 800748a:	3730      	adds	r7, #48	; 0x30
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40012100 	.word	0x40012100
 8007494:	40023800 	.word	0x40023800
 8007498:	40020800 	.word	0x40020800
 800749c:	40020000 	.word	0x40020000
 80074a0:	40020400 	.word	0x40020400
 80074a4:	20049e8c 	.word	0x20049e8c
 80074a8:	40026440 	.word	0x40026440

080074ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b4:	f107 031c 	add.w	r3, r7, #28
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	609a      	str	r2, [r3, #8]
 80074c0:	60da      	str	r2, [r3, #12]
 80074c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a32      	ldr	r2, [pc, #200]	; (8007594 <HAL_I2C_MspInit+0xe8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d12c      	bne.n	8007528 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	4b31      	ldr	r3, [pc, #196]	; (8007598 <HAL_I2C_MspInit+0xec>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	4a30      	ldr	r2, [pc, #192]	; (8007598 <HAL_I2C_MspInit+0xec>)
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	6313      	str	r3, [r2, #48]	; 0x30
 80074de:	4b2e      	ldr	r3, [pc, #184]	; (8007598 <HAL_I2C_MspInit+0xec>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074ea:	23c0      	movs	r3, #192	; 0xc0
 80074ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074ee:	2312      	movs	r3, #18
 80074f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074f2:	2301      	movs	r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	2303      	movs	r3, #3
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80074fa:	2304      	movs	r3, #4
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074fe:	f107 031c 	add.w	r3, r7, #28
 8007502:	4619      	mov	r1, r3
 8007504:	4825      	ldr	r0, [pc, #148]	; (800759c <HAL_I2C_MspInit+0xf0>)
 8007506:	f005 f851 	bl	800c5ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	4b22      	ldr	r3, [pc, #136]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	4a21      	ldr	r2, [pc, #132]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007518:	6413      	str	r3, [r2, #64]	; 0x40
 800751a:	4b1f      	ldr	r3, [pc, #124]	; (8007598 <HAL_I2C_MspInit+0xec>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007526:	e031      	b.n	800758c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <HAL_I2C_MspInit+0xf4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d12c      	bne.n	800758c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <HAL_I2C_MspInit+0xec>)
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	6313      	str	r3, [r2, #48]	; 0x30
 8007542:	4b15      	ldr	r3, [pc, #84]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800754e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007554:	2312      	movs	r3, #18
 8007556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007558:	2301      	movs	r3, #1
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755c:	2303      	movs	r3, #3
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007560:	2304      	movs	r3, #4
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007564:	f107 031c 	add.w	r3, r7, #28
 8007568:	4619      	mov	r1, r3
 800756a:	480c      	ldr	r0, [pc, #48]	; (800759c <HAL_I2C_MspInit+0xf0>)
 800756c:	f005 f81e 	bl	800c5ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	4a07      	ldr	r2, [pc, #28]	; (8007598 <HAL_I2C_MspInit+0xec>)
 800757a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800757e:	6413      	str	r3, [r2, #64]	; 0x40
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_I2C_MspInit+0xec>)
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	3730      	adds	r7, #48	; 0x30
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40005400 	.word	0x40005400
 8007598:	40023800 	.word	0x40023800
 800759c:	40020400 	.word	0x40020400
 80075a0:	40005800 	.word	0x40005800

080075a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a69      	ldr	r2, [pc, #420]	; (8007768 <HAL_SD_MspInit+0x1c4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f040 80cb 	bne.w	800775e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80075c8:	2300      	movs	r3, #0
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	4b67      	ldr	r3, [pc, #412]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d0:	4a66      	ldr	r2, [pc, #408]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075d6:	6453      	str	r3, [r2, #68]	; 0x44
 80075d8:	4b64      	ldr	r3, [pc, #400]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	4b60      	ldr	r3, [pc, #384]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	4a5f      	ldr	r2, [pc, #380]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075ee:	f043 0304 	orr.w	r3, r3, #4
 80075f2:	6313      	str	r3, [r2, #48]	; 0x30
 80075f4:	4b5d      	ldr	r3, [pc, #372]	; (800776c <HAL_SD_MspInit+0x1c8>)
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007600:	2300      	movs	r3, #0
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	4b59      	ldr	r3, [pc, #356]	; (800776c <HAL_SD_MspInit+0x1c8>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	4a58      	ldr	r2, [pc, #352]	; (800776c <HAL_SD_MspInit+0x1c8>)
 800760a:	f043 0308 	orr.w	r3, r3, #8
 800760e:	6313      	str	r3, [r2, #48]	; 0x30
 8007610:	4b56      	ldr	r3, [pc, #344]	; (800776c <HAL_SD_MspInit+0x1c8>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800761c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007620:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007622:	2302      	movs	r3, #2
 8007624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800762a:	2303      	movs	r3, #3
 800762c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800762e:	230c      	movs	r3, #12
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	4619      	mov	r1, r3
 8007638:	484d      	ldr	r0, [pc, #308]	; (8007770 <HAL_SD_MspInit+0x1cc>)
 800763a:	f004 ffb7 	bl	800c5ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800763e:	2304      	movs	r3, #4
 8007640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007642:	2302      	movs	r3, #2
 8007644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800764a:	2303      	movs	r3, #3
 800764c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800764e:	230c      	movs	r3, #12
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	4619      	mov	r1, r3
 8007658:	4846      	ldr	r0, [pc, #280]	; (8007774 <HAL_SD_MspInit+0x1d0>)
 800765a:	f004 ffa7 	bl	800c5ac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800765e:	4b46      	ldr	r3, [pc, #280]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007660:	4a46      	ldr	r2, [pc, #280]	; (800777c <HAL_SD_MspInit+0x1d8>)
 8007662:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007664:	4b44      	ldr	r3, [pc, #272]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800766a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800766c:	4b42      	ldr	r3, [pc, #264]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007672:	4b41      	ldr	r3, [pc, #260]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007674:	2200      	movs	r2, #0
 8007676:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007678:	4b3f      	ldr	r3, [pc, #252]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 800767a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800767e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007680:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007686:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007688:	4b3b      	ldr	r3, [pc, #236]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 800768a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800768e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007690:	4b39      	ldr	r3, [pc, #228]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007692:	2220      	movs	r2, #32
 8007694:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007696:	4b38      	ldr	r3, [pc, #224]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 8007698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800769c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800769e:	4b36      	ldr	r3, [pc, #216]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076a0:	2204      	movs	r2, #4
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80076a4:	4b34      	ldr	r3, [pc, #208]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076a6:	2203      	movs	r2, #3
 80076a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80076aa:	4b33      	ldr	r3, [pc, #204]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80076b2:	4b31      	ldr	r3, [pc, #196]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80076ba:	482f      	ldr	r0, [pc, #188]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076bc:	f004 fbda 	bl	800be74 <HAL_DMA_Init>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80076c6:	f7ff fcd7 	bl	8007078 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40
 80076d0:	4a29      	ldr	r2, [pc, #164]	; (8007778 <HAL_SD_MspInit+0x1d4>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076d8:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <HAL_SD_MspInit+0x1e0>)
 80076da:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80076dc:	4b28      	ldr	r3, [pc, #160]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076e4:	4b26      	ldr	r3, [pc, #152]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ea:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076f0:	4b23      	ldr	r3, [pc, #140]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80076f8:	4b21      	ldr	r3, [pc, #132]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 80076fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007700:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007706:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007708:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 800770a:	2220      	movs	r2, #32
 800770c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800770e:	4b1c      	ldr	r3, [pc, #112]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007710:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007714:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007716:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007718:	2204      	movs	r2, #4
 800771a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800771c:	4b18      	ldr	r3, [pc, #96]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 800771e:	2203      	movs	r2, #3
 8007720:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 800772c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007732:	4813      	ldr	r0, [pc, #76]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007734:	f004 fb9e 	bl	800be74 <HAL_DMA_Init>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800773e:	f7ff fc9b 	bl	8007078 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a0e      	ldr	r2, [pc, #56]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 8007746:	63da      	str	r2, [r3, #60]	; 0x3c
 8007748:	4a0d      	ldr	r2, [pc, #52]	; (8007780 <HAL_SD_MspInit+0x1dc>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	2031      	movs	r0, #49	; 0x31
 8007754:	f004 fb57 	bl	800be06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007758:	2031      	movs	r0, #49	; 0x31
 800775a:	f004 fb70 	bl	800be3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800775e:	bf00      	nop
 8007760:	3728      	adds	r7, #40	; 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40023800 	.word	0x40023800
 8007770:	40020800 	.word	0x40020800
 8007774:	40020c00 	.word	0x40020c00
 8007778:	200499b4 	.word	0x200499b4
 800777c:	40026458 	.word	0x40026458
 8007780:	20049ce8 	.word	0x20049ce8
 8007784:	400264a0 	.word	0x400264a0

08007788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	609a      	str	r2, [r3, #8]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a19      	ldr	r2, [pc, #100]	; (800780c <HAL_SPI_MspInit+0x84>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d12c      	bne.n	8007804 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	4b18      	ldr	r3, [pc, #96]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	4a17      	ldr	r2, [pc, #92]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077b8:	6413      	str	r3, [r2, #64]	; 0x40
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	4b11      	ldr	r3, [pc, #68]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	4a10      	ldr	r2, [pc, #64]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6313      	str	r3, [r2, #48]	; 0x30
 80077d6:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <HAL_SPI_MspInit+0x88>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80077e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80077e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e8:	2302      	movs	r3, #2
 80077ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f0:	2303      	movs	r3, #3
 80077f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077f4:	2305      	movs	r3, #5
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	4619      	mov	r1, r3
 80077fe:	4805      	ldr	r0, [pc, #20]	; (8007814 <HAL_SPI_MspInit+0x8c>)
 8007800:	f004 fed4 	bl	800c5ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007804:	bf00      	nop
 8007806:	3728      	adds	r7, #40	; 0x28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40003800 	.word	0x40003800
 8007810:	40023800 	.word	0x40023800
 8007814:	40020400 	.word	0x40020400

08007818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007820:	f107 031c 	add.w	r3, r7, #28
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a2d      	ldr	r2, [pc, #180]	; (80078ec <HAL_TIM_PWM_MspInit+0xd4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d12d      	bne.n	8007896 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6453      	str	r3, [r2, #68]	; 0x44
 800784a:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007860:	f043 0310 	orr.w	r3, r3, #16
 8007864:	6313      	str	r3, [r2, #48]	; 0x30
 8007866:	4b22      	ldr	r3, [pc, #136]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007872:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007878:	2302      	movs	r3, #2
 800787a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787c:	2300      	movs	r3, #0
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007880:	2300      	movs	r3, #0
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007884:	2301      	movs	r3, #1
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007888:	f107 031c 	add.w	r3, r7, #28
 800788c:	4619      	mov	r1, r3
 800788e:	4819      	ldr	r0, [pc, #100]	; (80078f4 <HAL_TIM_PWM_MspInit+0xdc>)
 8007890:	f004 fe8c 	bl	800c5ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007894:	e026      	b.n	80078e4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <HAL_TIM_PWM_MspInit+0xe0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10e      	bne.n	80078be <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80078a0:	2300      	movs	r3, #0
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078aa:	f043 0302 	orr.w	r3, r3, #2
 80078ae:	6413      	str	r3, [r2, #64]	; 0x40
 80078b0:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	693b      	ldr	r3, [r7, #16]
}
 80078bc:	e012      	b.n	80078e4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a0e      	ldr	r2, [pc, #56]	; (80078fc <HAL_TIM_PWM_MspInit+0xe4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d10d      	bne.n	80078e4 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	4a07      	ldr	r2, [pc, #28]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078d2:	f043 0304 	orr.w	r3, r3, #4
 80078d6:	6413      	str	r3, [r2, #64]	; 0x40
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <HAL_TIM_PWM_MspInit+0xd8>)
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	bf00      	nop
 80078e6:	3730      	adds	r7, #48	; 0x30
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40023800 	.word	0x40023800
 80078f4:	40021000 	.word	0x40021000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800

08007900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a3e      	ldr	r2, [pc, #248]	; (8007a08 <HAL_TIM_Base_MspInit+0x108>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d116      	bne.n	8007940 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	4b3d      	ldr	r3, [pc, #244]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	4a3c      	ldr	r2, [pc, #240]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 800791c:	f043 0310 	orr.w	r3, r3, #16
 8007920:	6413      	str	r3, [r2, #64]	; 0x40
 8007922:	4b3a      	ldr	r3, [pc, #232]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800792e:	2200      	movs	r2, #0
 8007930:	2101      	movs	r1, #1
 8007932:	2036      	movs	r0, #54	; 0x36
 8007934:	f004 fa67 	bl	800be06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007938:	2036      	movs	r0, #54	; 0x36
 800793a:	f004 fa80 	bl	800be3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800793e:	e05e      	b.n	80079fe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a32      	ldr	r2, [pc, #200]	; (8007a10 <HAL_TIM_Base_MspInit+0x110>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d116      	bne.n	8007978 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	4b2f      	ldr	r3, [pc, #188]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	4a2e      	ldr	r2, [pc, #184]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007954:	f043 0320 	orr.w	r3, r3, #32
 8007958:	6413      	str	r3, [r2, #64]	; 0x40
 800795a:	4b2c      	ldr	r3, [pc, #176]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007966:	2200      	movs	r2, #0
 8007968:	2100      	movs	r1, #0
 800796a:	2037      	movs	r0, #55	; 0x37
 800796c:	f004 fa4b 	bl	800be06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007970:	2037      	movs	r0, #55	; 0x37
 8007972:	f004 fa64 	bl	800be3e <HAL_NVIC_EnableIRQ>
}
 8007976:	e042      	b.n	80079fe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <HAL_TIM_Base_MspInit+0x114>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	4b21      	ldr	r3, [pc, #132]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 800798c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007990:	6453      	str	r3, [r2, #68]	; 0x44
 8007992:	4b1e      	ldr	r3, [pc, #120]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	697b      	ldr	r3, [r7, #20]
}
 800799e:	e02e      	b.n	80079fe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <HAL_TIM_Base_MspInit+0x118>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10e      	bne.n	80079c8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b2:	4a16      	ldr	r2, [pc, #88]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079b8:	6453      	str	r3, [r2, #68]	; 0x44
 80079ba:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	693b      	ldr	r3, [r7, #16]
}
 80079c6:	e01a      	b.n	80079fe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <HAL_TIM_Base_MspInit+0x11c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d115      	bne.n	80079fe <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e0:	6413      	str	r3, [r2, #64]	; 0x40
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <HAL_TIM_Base_MspInit+0x10c>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	202c      	movs	r0, #44	; 0x2c
 80079f4:	f004 fa07 	bl	800be06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80079f8:	202c      	movs	r0, #44	; 0x2c
 80079fa:	f004 fa20 	bl	800be3e <HAL_NVIC_EnableIRQ>
}
 80079fe:	bf00      	nop
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40001000 	.word	0x40001000
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	40001400 	.word	0x40001400
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800
 8007a1c:	40001c00 	.word	0x40001c00

08007a20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	605a      	str	r2, [r3, #4]
 8007a32:	609a      	str	r2, [r3, #8]
 8007a34:	60da      	str	r2, [r3, #12]
 8007a36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1d      	ldr	r2, [pc, #116]	; (8007ab4 <HAL_TIM_Encoder_MspInit+0x94>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d133      	bne.n	8007aaa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	4b1c      	ldr	r3, [pc, #112]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	6453      	str	r3, [r2, #68]	; 0x44
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a6e:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a7a:	23c0      	movs	r3, #192	; 0xc0
 8007a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a86:	2300      	movs	r3, #0
 8007a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	4619      	mov	r1, r3
 8007a94:	4809      	ldr	r0, [pc, #36]	; (8007abc <HAL_TIM_Encoder_MspInit+0x9c>)
 8007a96:	f004 fd89 	bl	800c5ac <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	202c      	movs	r0, #44	; 0x2c
 8007aa0:	f004 f9b1 	bl	800be06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007aa4:	202c      	movs	r0, #44	; 0x2c
 8007aa6:	f004 f9ca 	bl	800be3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007aaa:	bf00      	nop
 8007aac:	3728      	adds	r7, #40	; 0x28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40010400 	.word	0x40010400
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	40020800 	.word	0x40020800

08007ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac8:	f107 031c 	add.w	r3, r7, #28
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a5c      	ldr	r2, [pc, #368]	; (8007c50 <HAL_TIM_MspPostInit+0x190>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d11f      	bne.n	8007b22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	4b5b      	ldr	r3, [pc, #364]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	4a5a      	ldr	r2, [pc, #360]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007aec:	f043 0310 	orr.w	r3, r3, #16
 8007af0:	6313      	str	r3, [r2, #48]	; 0x30
 8007af2:	4b58      	ldr	r3, [pc, #352]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b04:	2302      	movs	r3, #2
 8007b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b14:	f107 031c 	add.w	r3, r7, #28
 8007b18:	4619      	mov	r1, r3
 8007b1a:	484f      	ldr	r0, [pc, #316]	; (8007c58 <HAL_TIM_MspPostInit+0x198>)
 8007b1c:	f004 fd46 	bl	800c5ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007b20:	e091      	b.n	8007c46 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a4d      	ldr	r2, [pc, #308]	; (8007c5c <HAL_TIM_MspPostInit+0x19c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d11e      	bne.n	8007b6a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	4b48      	ldr	r3, [pc, #288]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b34:	4a47      	ldr	r2, [pc, #284]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b3c:	4b45      	ldr	r3, [pc, #276]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007b48:	2330      	movs	r3, #48	; 0x30
 8007b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b54:	2300      	movs	r3, #0
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b5c:	f107 031c 	add.w	r3, r7, #28
 8007b60:	4619      	mov	r1, r3
 8007b62:	483f      	ldr	r0, [pc, #252]	; (8007c60 <HAL_TIM_MspPostInit+0x1a0>)
 8007b64:	f004 fd22 	bl	800c5ac <HAL_GPIO_Init>
}
 8007b68:	e06d      	b.n	8007c46 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a3d      	ldr	r2, [pc, #244]	; (8007c64 <HAL_TIM_MspPostInit+0x1a4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d11f      	bne.n	8007bb4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	4a35      	ldr	r2, [pc, #212]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b7e:	f043 0308 	orr.w	r3, r3, #8
 8007b82:	6313      	str	r3, [r2, #48]	; 0x30
 8007b84:	4b33      	ldr	r3, [pc, #204]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007b90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b96:	2302      	movs	r3, #2
 8007b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ba6:	f107 031c 	add.w	r3, r7, #28
 8007baa:	4619      	mov	r1, r3
 8007bac:	482e      	ldr	r0, [pc, #184]	; (8007c68 <HAL_TIM_MspPostInit+0x1a8>)
 8007bae:	f004 fcfd 	bl	800c5ac <HAL_GPIO_Init>
}
 8007bb2:	e048      	b.n	8007c46 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2c      	ldr	r2, [pc, #176]	; (8007c6c <HAL_TIM_MspPostInit+0x1ac>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d11f      	bne.n	8007bfe <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	4b24      	ldr	r3, [pc, #144]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	4a23      	ldr	r2, [pc, #140]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bce:	4b21      	ldr	r3, [pc, #132]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be0:	2302      	movs	r3, #2
 8007be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be8:	2300      	movs	r3, #0
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007bec:	2303      	movs	r3, #3
 8007bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bf0:	f107 031c 	add.w	r3, r7, #28
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	481a      	ldr	r0, [pc, #104]	; (8007c60 <HAL_TIM_MspPostInit+0x1a0>)
 8007bf8:	f004 fcd8 	bl	800c5ac <HAL_GPIO_Init>
}
 8007bfc:	e023      	b.n	8007c46 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <HAL_TIM_MspPostInit+0x1b0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d11e      	bne.n	8007c46 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	4a10      	ldr	r2, [pc, #64]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007c12:	f043 0302 	orr.w	r3, r3, #2
 8007c16:	6313      	str	r3, [r2, #48]	; 0x30
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <HAL_TIM_MspPostInit+0x194>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c32:	2300      	movs	r3, #0
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007c36:	2303      	movs	r3, #3
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c3a:	f107 031c 	add.w	r3, r7, #28
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4807      	ldr	r0, [pc, #28]	; (8007c60 <HAL_TIM_MspPostInit+0x1a0>)
 8007c42:	f004 fcb3 	bl	800c5ac <HAL_GPIO_Init>
}
 8007c46:	bf00      	nop
 8007c48:	3730      	adds	r7, #48	; 0x30
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40023800 	.word	0x40023800
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40020400 	.word	0x40020400
 8007c64:	40000800 	.word	0x40000800
 8007c68:	40020c00 	.word	0x40020c00
 8007c6c:	40014400 	.word	0x40014400
 8007c70:	40014800 	.word	0x40014800

08007c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	; 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	609a      	str	r2, [r3, #8]
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a19      	ldr	r2, [pc, #100]	; (8007cf8 <HAL_UART_MspInit+0x84>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d12b      	bne.n	8007cee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4a10      	ldr	r2, [pc, #64]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007cbc:	f043 0308 	orr.w	r3, r3, #8
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <HAL_UART_MspInit+0x88>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007cce:	2360      	movs	r3, #96	; 0x60
 8007cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007cde:	2307      	movs	r3, #7
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ce2:	f107 0314 	add.w	r3, r7, #20
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4805      	ldr	r0, [pc, #20]	; (8007d00 <HAL_UART_MspInit+0x8c>)
 8007cea:	f004 fc5f 	bl	800c5ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007cee:	bf00      	nop
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40020c00 	.word	0x40020c00

08007d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d08:	e7fe      	b.n	8007d08 <NMI_Handler+0x4>

08007d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d0e:	e7fe      	b.n	8007d0e <HardFault_Handler+0x4>

08007d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d14:	e7fe      	b.n	8007d14 <MemManage_Handler+0x4>

08007d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d16:	b480      	push	{r7}
 8007d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d1a:	e7fe      	b.n	8007d1a <BusFault_Handler+0x4>

08007d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d20:	e7fe      	b.n	8007d20 <UsageFault_Handler+0x4>

08007d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d22:	b480      	push	{r7}
 8007d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d42:	bf00      	nop
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d50:	f003 fb38 	bl	800b3c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d54:	bf00      	nop
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007d5c:	2004      	movs	r0, #4
 8007d5e:	f004 fe01 	bl	800c964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007d6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007d6e:	f004 fdf9 	bl	800c964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007d7c:	4803      	ldr	r0, [pc, #12]	; (8007d8c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007d7e:	f008 fe10 	bl	80109a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007d82:	4803      	ldr	r0, [pc, #12]	; (8007d90 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007d84:	f008 fe0d 	bl	80109a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007d88:	bf00      	nop
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20049a6c 	.word	0x20049a6c
 8007d90:	20049c68 	.word	0x20049c68

08007d94 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007d98:	4802      	ldr	r0, [pc, #8]	; (8007da4 <SDIO_IRQHandler+0x10>)
 8007d9a:	f006 fea9 	bl	800eaf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20049dc8 	.word	0x20049dc8

08007da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007dac:	4802      	ldr	r0, [pc, #8]	; (8007db8 <TIM6_DAC_IRQHandler+0x10>)
 8007dae:	f008 fdf8 	bl	80109a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007db2:	bf00      	nop
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20049d48 	.word	0x20049d48

08007dbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007dc0:	4802      	ldr	r0, [pc, #8]	; (8007dcc <TIM7_IRQHandler+0x10>)
 8007dc2:	f008 fdee 	bl	80109a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20049eec 	.word	0x20049eec

08007dd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007dd4:	4802      	ldr	r0, [pc, #8]	; (8007de0 <DMA2_Stream2_IRQHandler+0x10>)
 8007dd6:	f004 f975 	bl	800c0c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007dda:	bf00      	nop
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20049e8c 	.word	0x20049e8c

08007de4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007de8:	4802      	ldr	r0, [pc, #8]	; (8007df4 <DMA2_Stream3_IRQHandler+0x10>)
 8007dea:	f004 f96b 	bl	800c0c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200499b4 	.word	0x200499b4

08007df8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007dfc:	4802      	ldr	r0, [pc, #8]	; (8007e08 <DMA2_Stream6_IRQHandler+0x10>)
 8007dfe:	f004 f961 	bl	800c0c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20049ce8 	.word	0x20049ce8

08007e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
	return 1;
 8007e10:	2301      	movs	r3, #1
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_kill>:

int _kill(int pid, int sig)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007e26:	f00e f81d 	bl	8015e64 <__errno>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	2316      	movs	r3, #22
 8007e2e:	6013      	str	r3, [r2, #0]
	return -1;
 8007e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <_exit>:

void _exit (int status)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007e44:	f04f 31ff 	mov.w	r1, #4294967295
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ffe7 	bl	8007e1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8007e4e:	e7fe      	b.n	8007e4e <_exit+0x12>

08007e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <_sbrk+0x5c>)
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <_sbrk+0x60>)
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <_sbrk+0x64>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e6c:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <_sbrk+0x64>)
 8007e6e:	4a12      	ldr	r2, [pc, #72]	; (8007eb8 <_sbrk+0x68>)
 8007e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <_sbrk+0x64>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4413      	add	r3, r2
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d207      	bcs.n	8007e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007e80:	f00d fff0 	bl	8015e64 <__errno>
 8007e84:	4602      	mov	r2, r0
 8007e86:	230c      	movs	r3, #12
 8007e88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e009      	b.n	8007ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <_sbrk+0x64>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <_sbrk+0x64>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4a05      	ldr	r2, [pc, #20]	; (8007eb4 <_sbrk+0x64>)
 8007ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20050000 	.word	0x20050000
 8007eb0:	00000800 	.word	0x00000800
 8007eb4:	20000260 	.word	0x20000260
 8007eb8:	2004c040 	.word	0x2004c040

08007ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ec0:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <SystemInit+0x28>)
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec6:	4a07      	ldr	r2, [pc, #28]	; (8007ee4 <SystemInit+0x28>)
 8007ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <SystemInit+0x28>)
 8007ed2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ed6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ed8:	bf00      	nop
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007ee8:	b598      	push	{r3, r4, r7, lr}
 8007eea:	af00      	add	r7, sp, #0
	lcd_init();
 8007eec:	f7f9 f894 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007ef0:	4845      	ldr	r0, [pc, #276]	; (8008008 <cppInit+0x120>)
 8007ef2:	f7fd fbb9 	bl	8005668 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007ef6:	2064      	movs	r0, #100	; 0x64
 8007ef8:	f003 fa84 	bl	800b404 <HAL_Delay>
	power_sensor.updateValues();
 8007efc:	4842      	ldr	r0, [pc, #264]	; (8008008 <cppInit+0x120>)
 8007efe:	f7fd fbc3 	bl	8005688 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007f02:	f7f9 f8cd 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007f06:	2100      	movs	r1, #0
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f7f9 f8d9 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007f0e:	483f      	ldr	r0, [pc, #252]	; (800800c <cppInit+0x124>)
 8007f10:	f7f9 f900 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007f14:	2101      	movs	r1, #1
 8007f16:	2000      	movs	r0, #0
 8007f18:	f7f9 f8d2 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007f1c:	483a      	ldr	r0, [pc, #232]	; (8008008 <cppInit+0x120>)
 8007f1e:	f7fd fbdd 	bl	80056dc <_ZN11PowerSensor17getButteryVoltageEv>
 8007f22:	ee10 3a10 	vmov	r3, s0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7f8 fb26 	bl	8000578 <__aeabi_f2d>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	461a      	mov	r2, r3
 8007f32:	4623      	mov	r3, r4
 8007f34:	4836      	ldr	r0, [pc, #216]	; (8008010 <cppInit+0x128>)
 8007f36:	f7f9 f8ed 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 8007f3a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007f3e:	f003 fa61 	bl	800b404 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//

	if(sd_card.init() == true){
 8007f42:	4834      	ldr	r0, [pc, #208]	; (8008014 <cppInit+0x12c>)
 8007f44:	f7ff f8e7 	bl	8007116 <_ZN6sdCard4initEv>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d014      	beq.n	8007f78 <cppInit+0x90>
	  lcd_clear();
 8007f4e:	f7f9 f8a7 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8007f52:	2100      	movs	r1, #0
 8007f54:	2000      	movs	r0, #0
 8007f56:	f7f9 f8b3 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8007f5a:	482f      	ldr	r0, [pc, #188]	; (8008018 <cppInit+0x130>)
 8007f5c:	f7f9 f8da 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8007f60:	2101      	movs	r1, #1
 8007f62:	2000      	movs	r0, #0
 8007f64:	f7f9 f8ac 	bl	80010c0 <lcd_locate>
	  lcd_printf("Success");
 8007f68:	482c      	ldr	r0, [pc, #176]	; (800801c <cppInit+0x134>)
 8007f6a:	f7f9 f8d3 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8007f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f72:	f003 fa47 	bl	800b404 <HAL_Delay>
 8007f76:	e013      	b.n	8007fa0 <cppInit+0xb8>

	}
	else{
	  lcd_clear();
 8007f78:	f7f9 f892 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f7f9 f89e 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8007f84:	4824      	ldr	r0, [pc, #144]	; (8008018 <cppInit+0x130>)
 8007f86:	f7f9 f8c5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	f7f9 f897 	bl	80010c0 <lcd_locate>
	  lcd_printf("Fail");
 8007f92:	4823      	ldr	r0, [pc, #140]	; (8008020 <cppInit+0x138>)
 8007f94:	f7f9 f8be 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8007f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f9c:	f003 fa32 	bl	800b404 <HAL_Delay>
		led.fullColor('R');
		HAL_Delay(100);
	}
	*/

	line_sensor.ADCStart();
 8007fa0:	4820      	ldr	r0, [pc, #128]	; (8008024 <cppInit+0x13c>)
 8007fa2:	f7fa f8fd 	bl	80021a0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007fa6:	4820      	ldr	r0, [pc, #128]	; (8008028 <cppInit+0x140>)
 8007fa8:	f7fd f8f4 	bl	8005194 <_ZN5Motor4initEv>
	encoder.init();
 8007fac:	481f      	ldr	r0, [pc, #124]	; (800802c <cppInit+0x144>)
 8007fae:	f7f9 fa41 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 8007fb2:	481f      	ldr	r0, [pc, #124]	; (8008030 <cppInit+0x148>)
 8007fb4:	f7f9 fdec 	bl	8001b90 <_ZN3IMU4initEv>
	line_trace.init();
 8007fb8:	481e      	ldr	r0, [pc, #120]	; (8008034 <cppInit+0x14c>)
 8007fba:	f7fb fbf9 	bl	80037b0 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8007fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fc2:	f003 fa1f 	bl	800b404 <HAL_Delay>

	led.fullColor('M');
 8007fc6:	214d      	movs	r1, #77	; 0x4d
 8007fc8:	481b      	ldr	r0, [pc, #108]	; (8008038 <cppInit+0x150>)
 8007fca:	f7f9 ff8d 	bl	8001ee8 <_ZN3LED9fullColorEc>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007fce:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800803c <cppInit+0x154>
 8007fd2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008040 <cppInit+0x158>
 8007fd6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8008044 <cppInit+0x15c>
 8007fda:	481b      	ldr	r0, [pc, #108]	; (8008048 <cppInit+0x160>)
 8007fdc:	f7fe f834 	bl	8006048 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007fe0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800803c <cppInit+0x154>
 8007fe4:	eddf 0a19 	vldr	s1, [pc, #100]	; 800804c <cppInit+0x164>
 8007fe8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008050 <cppInit+0x168>
 8007fec:	4816      	ldr	r0, [pc, #88]	; (8008048 <cppInit+0x160>)
 8007fee:	f7fe f844 	bl	800607a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007ff2:	4818      	ldr	r0, [pc, #96]	; (8008054 <cppInit+0x16c>)
 8007ff4:	f7fd fa41 	bl	800547a <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007ff8:	4817      	ldr	r0, [pc, #92]	; (8008058 <cppInit+0x170>)
 8007ffa:	f7fd fad9 	bl	80055b0 <_ZN13PathFollowing4initEv>

	esc.init();
 8007ffe:	4817      	ldr	r0, [pc, #92]	; (800805c <cppInit+0x174>)
 8008000:	f7f9 f8f4 	bl	80011ec <_ZN3ESC4initEv>

}
 8008004:	bf00      	nop
 8008006:	bd98      	pop	{r3, r4, r7, pc}
 8008008:	2000057c 	.word	0x2000057c
 800800c:	0801a598 	.word	0x0801a598
 8008010:	0801a5a0 	.word	0x0801a5a0
 8008014:	20045288 	.word	0x20045288
 8008018:	0801a5a4 	.word	0x0801a5a4
 800801c:	0801a5b0 	.word	0x0801a5b0
 8008020:	0801a5b8 	.word	0x0801a5b8
 8008024:	20000264 	.word	0x20000264
 8008028:	20000574 	.word	0x20000574
 800802c:	20020948 	.word	0x20020948
 8008030:	20000588 	.word	0x20000588
 8008034:	200209f4 	.word	0x200209f4
 8008038:	20000578 	.word	0x20000578
 800803c:	00000000 	.word	0x00000000
 8008040:	4129999a 	.word	0x4129999a
 8008044:	3f99999a 	.word	0x3f99999a
 8008048:	20020970 	.word	0x20020970
 800804c:	3f5e3fbc 	.word	0x3f5e3fbc
 8008050:	3d75c28f 	.word	0x3d75c28f
 8008054:	200209b0 	.word	0x200209b0
 8008058:	2002db60 	.word	0x2002db60
 800805c:	200209f0 	.word	0x200209f0

08008060 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8008064:	480e      	ldr	r0, [pc, #56]	; (80080a0 <cppFlip1ms+0x40>)
 8008066:	f7fa f8f9 	bl	800225c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800806a:	480e      	ldr	r0, [pc, #56]	; (80080a4 <cppFlip1ms+0x44>)
 800806c:	f7f9 fdb8 	bl	8001be0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8008070:	480d      	ldr	r0, [pc, #52]	; (80080a8 <cppFlip1ms+0x48>)
 8008072:	f7f9 fa01 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8008076:	480d      	ldr	r0, [pc, #52]	; (80080ac <cppFlip1ms+0x4c>)
 8008078:	f7fb ffb2 	bl	8003fe0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800807c:	480c      	ldr	r0, [pc, #48]	; (80080b0 <cppFlip1ms+0x50>)
 800807e:	f7fe f815 	bl	80060ac <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8008082:	480c      	ldr	r0, [pc, #48]	; (80080b4 <cppFlip1ms+0x54>)
 8008084:	f7fd f9cc 	bl	8005420 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8008088:	480b      	ldr	r0, [pc, #44]	; (80080b8 <cppFlip1ms+0x58>)
 800808a:	f7fd fbf7 	bl	800587c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800808e:	480b      	ldr	r0, [pc, #44]	; (80080bc <cppFlip1ms+0x5c>)
 8008090:	f7fd f892 	bl	80051b8 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8008094:	4804      	ldr	r0, [pc, #16]	; (80080a8 <cppFlip1ms+0x48>)
 8008096:	f7f9 fa87 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 800809a:	bf00      	nop
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000264 	.word	0x20000264
 80080a4:	20000588 	.word	0x20000588
 80080a8:	20020948 	.word	0x20020948
 80080ac:	200209f4 	.word	0x200209f4
 80080b0:	20020970 	.word	0x20020970
 80080b4:	200209b0 	.word	0x200209b0
 80080b8:	2000055c 	.word	0x2000055c
 80080bc:	20000574 	.word	0x20000574

080080c0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80080c4:	4802      	ldr	r0, [pc, #8]	; (80080d0 <cppFlip100ns+0x10>)
 80080c6:	f7fa f87b 	bl	80021c0 <_ZN10LineSensor17storeSensorValuesEv>
}
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000264 	.word	0x20000264

080080d4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 80080d8:	480a      	ldr	r0, [pc, #40]	; (8008104 <cppFlip10ms+0x30>)
 80080da:	f7fb fdf9 	bl	8003cd0 <_ZN9LineTrace17getTargetVelocityEv>
 80080de:	eef0 7a40 	vmov.f32	s15, s0
 80080e2:	eeb0 0a67 	vmov.f32	s0, s15
 80080e6:	4808      	ldr	r0, [pc, #32]	; (8008108 <cppFlip10ms+0x34>)
 80080e8:	f7fc fd20 	bl	8004b2c <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 80080ec:	4807      	ldr	r0, [pc, #28]	; (800810c <cppFlip10ms+0x38>)
 80080ee:	f7fe f81f 	bl	8006130 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80080f2:	eef0 7a40 	vmov.f32	s15, s0
 80080f6:	eeb0 0a67 	vmov.f32	s0, s15
 80080fa:	4803      	ldr	r0, [pc, #12]	; (8008108 <cppFlip10ms+0x34>)
 80080fc:	f7fc fd64 	bl	8004bc8 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200209f4 	.word	0x200209f4
 8008108:	2000059c 	.word	0x2000059c
 800810c:	20020970 	.word	0x20020970

08008110 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	2b04      	cmp	r3, #4
 800811e:	d103      	bne.n	8008128 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8008120:	4807      	ldr	r0, [pc, #28]	; (8008140 <cppExit+0x30>)
 8008122:	f7fd fb63 	bl	80057ec <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8008126:	e006      	b.n	8008136 <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812e:	d102      	bne.n	8008136 <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8008130:	4803      	ldr	r0, [pc, #12]	; (8008140 <cppExit+0x30>)
 8008132:	f7fd fb7f 	bl	8005834 <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	2000055c 	.word	0x2000055c
 8008144:	00000000 	.word	0x00000000

08008148 <cppLoop>:

void cppLoop(void)
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	b085      	sub	sp, #20
 800814c:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc;
	static int16_t selector_vel;

	static float adj_kp = line_trace.getKp();
 800814e:	4baf      	ldr	r3, [pc, #700]	; (800840c <cppLoop+0x2c4>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f3bf 8f5b 	dmb	ish
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d015      	beq.n	8008196 <cppLoop+0x4e>
 800816a:	48a8      	ldr	r0, [pc, #672]	; (800840c <cppLoop+0x2c4>)
 800816c:	f00d fe5a 	bl	8015e24 <__cxa_guard_acquire>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	bf14      	ite	ne
 8008176:	2301      	movne	r3, #1
 8008178:	2300      	moveq	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <cppLoop+0x4e>
 8008180:	48a3      	ldr	r0, [pc, #652]	; (8008410 <cppLoop+0x2c8>)
 8008182:	f7fb fca2 	bl	8003aca <_ZN9LineTrace5getKpEv>
 8008186:	eef0 7a40 	vmov.f32	s15, s0
 800818a:	4ba2      	ldr	r3, [pc, #648]	; (8008414 <cppLoop+0x2cc>)
 800818c:	edc3 7a00 	vstr	s15, [r3]
 8008190:	489e      	ldr	r0, [pc, #632]	; (800840c <cppLoop+0x2c4>)
 8008192:	f00d fe53 	bl	8015e3c <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8008196:	4ba0      	ldr	r3, [pc, #640]	; (8008418 <cppLoop+0x2d0>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f3bf 8f5b 	dmb	ish
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bf0c      	ite	eq
 80081a8:	2301      	moveq	r3, #1
 80081aa:	2300      	movne	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d015      	beq.n	80081de <cppLoop+0x96>
 80081b2:	4899      	ldr	r0, [pc, #612]	; (8008418 <cppLoop+0x2d0>)
 80081b4:	f00d fe36 	bl	8015e24 <__cxa_guard_acquire>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bf14      	ite	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	2300      	moveq	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <cppLoop+0x96>
 80081c8:	4891      	ldr	r0, [pc, #580]	; (8008410 <cppLoop+0x2c8>)
 80081ca:	f7fb fc8d 	bl	8003ae8 <_ZN9LineTrace5getKiEv>
 80081ce:	eef0 7a40 	vmov.f32	s15, s0
 80081d2:	4b92      	ldr	r3, [pc, #584]	; (800841c <cppLoop+0x2d4>)
 80081d4:	edc3 7a00 	vstr	s15, [r3]
 80081d8:	488f      	ldr	r0, [pc, #572]	; (8008418 <cppLoop+0x2d0>)
 80081da:	f00d fe2f 	bl	8015e3c <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80081de:	4b90      	ldr	r3, [pc, #576]	; (8008420 <cppLoop+0x2d8>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f3bf 8f5b 	dmb	ish
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <cppLoop+0xde>
 80081fa:	4889      	ldr	r0, [pc, #548]	; (8008420 <cppLoop+0x2d8>)
 80081fc:	f00d fe12 	bl	8015e24 <__cxa_guard_acquire>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	bf14      	ite	ne
 8008206:	2301      	movne	r3, #1
 8008208:	2300      	moveq	r3, #0
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <cppLoop+0xde>
 8008210:	487f      	ldr	r0, [pc, #508]	; (8008410 <cppLoop+0x2c8>)
 8008212:	f7fb fc78 	bl	8003b06 <_ZN9LineTrace5getKdEv>
 8008216:	eef0 7a40 	vmov.f32	s15, s0
 800821a:	4b82      	ldr	r3, [pc, #520]	; (8008424 <cppLoop+0x2dc>)
 800821c:	edc3 7a00 	vstr	s15, [r3]
 8008220:	487f      	ldr	r0, [pc, #508]	; (8008420 <cppLoop+0x2d8>)
 8008222:	f00d fe0b 	bl	8015e3c <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8008226:	4b80      	ldr	r3, [pc, #512]	; (8008428 <cppLoop+0x2e0>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	f3bf 8f5b 	dmb	ish
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	bf0c      	ite	eq
 8008238:	2301      	moveq	r3, #1
 800823a:	2300      	movne	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d015      	beq.n	800826e <cppLoop+0x126>
 8008242:	4879      	ldr	r0, [pc, #484]	; (8008428 <cppLoop+0x2e0>)
 8008244:	f00d fdee 	bl	8015e24 <__cxa_guard_acquire>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf14      	ite	ne
 800824e:	2301      	movne	r3, #1
 8008250:	2300      	moveq	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <cppLoop+0x126>
 8008258:	486d      	ldr	r0, [pc, #436]	; (8008410 <cppLoop+0x2c8>)
 800825a:	f7fb fc7c 	bl	8003b56 <_ZN9LineTrace9getKpSlowEv>
 800825e:	eef0 7a40 	vmov.f32	s15, s0
 8008262:	4b72      	ldr	r3, [pc, #456]	; (800842c <cppLoop+0x2e4>)
 8008264:	edc3 7a00 	vstr	s15, [r3]
 8008268:	486f      	ldr	r0, [pc, #444]	; (8008428 <cppLoop+0x2e0>)
 800826a:	f00d fde7 	bl	8015e3c <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 800826e:	4b70      	ldr	r3, [pc, #448]	; (8008430 <cppLoop+0x2e8>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f3bf 8f5b 	dmb	ish
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	bf0c      	ite	eq
 8008280:	2301      	moveq	r3, #1
 8008282:	2300      	movne	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d015      	beq.n	80082b6 <cppLoop+0x16e>
 800828a:	4869      	ldr	r0, [pc, #420]	; (8008430 <cppLoop+0x2e8>)
 800828c:	f00d fdca 	bl	8015e24 <__cxa_guard_acquire>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <cppLoop+0x16e>
 80082a0:	485b      	ldr	r0, [pc, #364]	; (8008410 <cppLoop+0x2c8>)
 80082a2:	f7fb fc67 	bl	8003b74 <_ZN9LineTrace9getKiSlowEv>
 80082a6:	eef0 7a40 	vmov.f32	s15, s0
 80082aa:	4b62      	ldr	r3, [pc, #392]	; (8008434 <cppLoop+0x2ec>)
 80082ac:	edc3 7a00 	vstr	s15, [r3]
 80082b0:	485f      	ldr	r0, [pc, #380]	; (8008430 <cppLoop+0x2e8>)
 80082b2:	f00d fdc3 	bl	8015e3c <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 80082b6:	4b60      	ldr	r3, [pc, #384]	; (8008438 <cppLoop+0x2f0>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	f3bf 8f5b 	dmb	ish
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d015      	beq.n	80082fe <cppLoop+0x1b6>
 80082d2:	4859      	ldr	r0, [pc, #356]	; (8008438 <cppLoop+0x2f0>)
 80082d4:	f00d fda6 	bl	8015e24 <__cxa_guard_acquire>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bf14      	ite	ne
 80082de:	2301      	movne	r3, #1
 80082e0:	2300      	moveq	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <cppLoop+0x1b6>
 80082e8:	4849      	ldr	r0, [pc, #292]	; (8008410 <cppLoop+0x2c8>)
 80082ea:	f7fb fc52 	bl	8003b92 <_ZN9LineTrace9getKdSlowEv>
 80082ee:	eef0 7a40 	vmov.f32	s15, s0
 80082f2:	4b52      	ldr	r3, [pc, #328]	; (800843c <cppLoop+0x2f4>)
 80082f4:	edc3 7a00 	vstr	s15, [r3]
 80082f8:	484f      	ldr	r0, [pc, #316]	; (8008438 <cppLoop+0x2f0>)
 80082fa:	f00d fd9f 	bl	8015e3c <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80082fe:	4b50      	ldr	r3, [pc, #320]	; (8008440 <cppLoop+0x2f8>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	f3bf 8f5b 	dmb	ish
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d015      	beq.n	8008346 <cppLoop+0x1fe>
 800831a:	4849      	ldr	r0, [pc, #292]	; (8008440 <cppLoop+0x2f8>)
 800831c:	f00d fd82 	bl	8015e24 <__cxa_guard_acquire>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <cppLoop+0x1fe>
 8008330:	4837      	ldr	r0, [pc, #220]	; (8008410 <cppLoop+0x2c8>)
 8008332:	f7fb fccd 	bl	8003cd0 <_ZN9LineTrace17getTargetVelocityEv>
 8008336:	eef0 7a40 	vmov.f32	s15, s0
 800833a:	4b42      	ldr	r3, [pc, #264]	; (8008444 <cppLoop+0x2fc>)
 800833c:	edc3 7a00 	vstr	s15, [r3]
 8008340:	483f      	ldr	r0, [pc, #252]	; (8008440 <cppLoop+0x2f8>)
 8008342:	f00d fd7b 	bl	8015e3c <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8008346:	4b40      	ldr	r3, [pc, #256]	; (8008448 <cppLoop+0x300>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	f3bf 8f5b 	dmb	ish
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d015      	beq.n	800838e <cppLoop+0x246>
 8008362:	4839      	ldr	r0, [pc, #228]	; (8008448 <cppLoop+0x300>)
 8008364:	f00d fd5e 	bl	8015e24 <__cxa_guard_acquire>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <cppLoop+0x246>
 8008378:	4825      	ldr	r0, [pc, #148]	; (8008410 <cppLoop+0x2c8>)
 800837a:	f7fb fcb9 	bl	8003cf0 <_ZN9LineTrace14getMaxVelocityEv>
 800837e:	eef0 7a40 	vmov.f32	s15, s0
 8008382:	4b32      	ldr	r3, [pc, #200]	; (800844c <cppLoop+0x304>)
 8008384:	edc3 7a00 	vstr	s15, [r3]
 8008388:	482f      	ldr	r0, [pc, #188]	; (8008448 <cppLoop+0x300>)
 800838a:	f00d fd57 	bl	8015e3c <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800838e:	4b30      	ldr	r3, [pc, #192]	; (8008450 <cppLoop+0x308>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f3bf 8f5b 	dmb	ish
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d015      	beq.n	80083d6 <cppLoop+0x28e>
 80083aa:	4829      	ldr	r0, [pc, #164]	; (8008450 <cppLoop+0x308>)
 80083ac:	f00d fd3a 	bl	8015e24 <__cxa_guard_acquire>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <cppLoop+0x28e>
 80083c0:	4813      	ldr	r0, [pc, #76]	; (8008410 <cppLoop+0x2c8>)
 80083c2:	f7fb fca5 	bl	8003d10 <_ZN9LineTrace14getMinVelocityEv>
 80083c6:	eef0 7a40 	vmov.f32	s15, s0
 80083ca:	4b22      	ldr	r3, [pc, #136]	; (8008454 <cppLoop+0x30c>)
 80083cc:	edc3 7a00 	vstr	s15, [r3]
 80083d0:	481f      	ldr	r0, [pc, #124]	; (8008450 <cppLoop+0x308>)
 80083d2:	f00d fd33 	bl	8015e3c <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <cppLoop+0x310>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	f3bf 8f5b 	dmb	ish
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d03f      	beq.n	8008472 <cppLoop+0x32a>
 80083f2:	4819      	ldr	r0, [pc, #100]	; (8008458 <cppLoop+0x310>)
 80083f4:	f00d fd16 	bl	8015e24 <__cxa_guard_acquire>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d034      	beq.n	8008472 <cppLoop+0x32a>
 8008408:	e028      	b.n	800845c <cppLoop+0x314>
 800840a:	bf00      	nop
 800840c:	200475a8 	.word	0x200475a8
 8008410:	200209f4 	.word	0x200209f4
 8008414:	200475a4 	.word	0x200475a4
 8008418:	200475b0 	.word	0x200475b0
 800841c:	200475ac 	.word	0x200475ac
 8008420:	200475b8 	.word	0x200475b8
 8008424:	200475b4 	.word	0x200475b4
 8008428:	200475c0 	.word	0x200475c0
 800842c:	200475bc 	.word	0x200475bc
 8008430:	200475c8 	.word	0x200475c8
 8008434:	200475c4 	.word	0x200475c4
 8008438:	200475d0 	.word	0x200475d0
 800843c:	200475cc 	.word	0x200475cc
 8008440:	200475d8 	.word	0x200475d8
 8008444:	200475d4 	.word	0x200475d4
 8008448:	200475e0 	.word	0x200475e0
 800844c:	200475dc 	.word	0x200475dc
 8008450:	200475e8 	.word	0x200475e8
 8008454:	200475e4 	.word	0x200475e4
 8008458:	200475f0 	.word	0x200475f0
 800845c:	48ae      	ldr	r0, [pc, #696]	; (8008718 <cppLoop+0x5d0>)
 800845e:	f7fb fc67 	bl	8003d30 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008462:	eef0 7a40 	vmov.f32	s15, s0
 8008466:	4bad      	ldr	r3, [pc, #692]	; (800871c <cppLoop+0x5d4>)
 8008468:	edc3 7a00 	vstr	s15, [r3]
 800846c:	48ac      	ldr	r0, [pc, #688]	; (8008720 <cppLoop+0x5d8>)
 800846e:	f00d fce5 	bl	8015e3c <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8008472:	4bac      	ldr	r3, [pc, #688]	; (8008724 <cppLoop+0x5dc>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f3bf 8f5b 	dmb	ish
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d015      	beq.n	80084ba <cppLoop+0x372>
 800848e:	48a5      	ldr	r0, [pc, #660]	; (8008724 <cppLoop+0x5dc>)
 8008490:	f00d fcc8 	bl	8015e24 <__cxa_guard_acquire>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2301      	movne	r3, #1
 800849c:	2300      	moveq	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <cppLoop+0x372>
 80084a4:	489c      	ldr	r0, [pc, #624]	; (8008718 <cppLoop+0x5d0>)
 80084a6:	f7fb fc53 	bl	8003d50 <_ZN9LineTrace15getMinVelocity2Ev>
 80084aa:	eef0 7a40 	vmov.f32	s15, s0
 80084ae:	4b9e      	ldr	r3, [pc, #632]	; (8008728 <cppLoop+0x5e0>)
 80084b0:	edc3 7a00 	vstr	s15, [r3]
 80084b4:	489b      	ldr	r0, [pc, #620]	; (8008724 <cppLoop+0x5dc>)
 80084b6:	f00d fcc1 	bl	8015e3c <__cxa_guard_release>
	static float adj_max_velocity3 = line_trace.getMaxVelocity3();
 80084ba:	4b9c      	ldr	r3, [pc, #624]	; (800872c <cppLoop+0x5e4>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f3bf 8f5b 	dmb	ish
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d015      	beq.n	8008502 <cppLoop+0x3ba>
 80084d6:	4895      	ldr	r0, [pc, #596]	; (800872c <cppLoop+0x5e4>)
 80084d8:	f00d fca4 	bl	8015e24 <__cxa_guard_acquire>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf14      	ite	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	2300      	moveq	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <cppLoop+0x3ba>
 80084ec:	488a      	ldr	r0, [pc, #552]	; (8008718 <cppLoop+0x5d0>)
 80084ee:	f7fb fc3f 	bl	8003d70 <_ZN9LineTrace15getMaxVelocity3Ev>
 80084f2:	eef0 7a40 	vmov.f32	s15, s0
 80084f6:	4b8e      	ldr	r3, [pc, #568]	; (8008730 <cppLoop+0x5e8>)
 80084f8:	edc3 7a00 	vstr	s15, [r3]
 80084fc:	488b      	ldr	r0, [pc, #556]	; (800872c <cppLoop+0x5e4>)
 80084fe:	f00d fc9d 	bl	8015e3c <__cxa_guard_release>
	static float adj_min_velocity3 = line_trace.getMinVelocity3();
 8008502:	4b8c      	ldr	r3, [pc, #560]	; (8008734 <cppLoop+0x5ec>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f3bf 8f5b 	dmb	ish
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	bf0c      	ite	eq
 8008514:	2301      	moveq	r3, #1
 8008516:	2300      	movne	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d015      	beq.n	800854a <cppLoop+0x402>
 800851e:	4885      	ldr	r0, [pc, #532]	; (8008734 <cppLoop+0x5ec>)
 8008520:	f00d fc80 	bl	8015e24 <__cxa_guard_acquire>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	bf14      	ite	ne
 800852a:	2301      	movne	r3, #1
 800852c:	2300      	moveq	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <cppLoop+0x402>
 8008534:	4878      	ldr	r0, [pc, #480]	; (8008718 <cppLoop+0x5d0>)
 8008536:	f7fb fc2b 	bl	8003d90 <_ZN9LineTrace15getMinVelocity3Ev>
 800853a:	eef0 7a40 	vmov.f32	s15, s0
 800853e:	4b7e      	ldr	r3, [pc, #504]	; (8008738 <cppLoop+0x5f0>)
 8008540:	edc3 7a00 	vstr	s15, [r3]
 8008544:	487b      	ldr	r0, [pc, #492]	; (8008734 <cppLoop+0x5ec>)
 8008546:	f00d fc79 	bl	8015e3c <__cxa_guard_release>
	static float adj_max_velocity4 = line_trace.getMaxVelocity4();
 800854a:	4b7c      	ldr	r3, [pc, #496]	; (800873c <cppLoop+0x5f4>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f3bf 8f5b 	dmb	ish
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d015      	beq.n	8008592 <cppLoop+0x44a>
 8008566:	4875      	ldr	r0, [pc, #468]	; (800873c <cppLoop+0x5f4>)
 8008568:	f00d fc5c 	bl	8015e24 <__cxa_guard_acquire>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf14      	ite	ne
 8008572:	2301      	movne	r3, #1
 8008574:	2300      	moveq	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <cppLoop+0x44a>
 800857c:	4866      	ldr	r0, [pc, #408]	; (8008718 <cppLoop+0x5d0>)
 800857e:	f7fb fc17 	bl	8003db0 <_ZN9LineTrace15getMaxVelocity4Ev>
 8008582:	eef0 7a40 	vmov.f32	s15, s0
 8008586:	4b6e      	ldr	r3, [pc, #440]	; (8008740 <cppLoop+0x5f8>)
 8008588:	edc3 7a00 	vstr	s15, [r3]
 800858c:	486b      	ldr	r0, [pc, #428]	; (800873c <cppLoop+0x5f4>)
 800858e:	f00d fc55 	bl	8015e3c <__cxa_guard_release>
	static float adj_min_velocity4 = line_trace.getMinVelocity4();
 8008592:	4b6c      	ldr	r3, [pc, #432]	; (8008744 <cppLoop+0x5fc>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f3bf 8f5b 	dmb	ish
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <cppLoop+0x492>
 80085ae:	4865      	ldr	r0, [pc, #404]	; (8008744 <cppLoop+0x5fc>)
 80085b0:	f00d fc38 	bl	8015e24 <__cxa_guard_acquire>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bf14      	ite	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	2300      	moveq	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <cppLoop+0x492>
 80085c4:	4854      	ldr	r0, [pc, #336]	; (8008718 <cppLoop+0x5d0>)
 80085c6:	f7fb fc03 	bl	8003dd0 <_ZN9LineTrace15getMinVelocity4Ev>
 80085ca:	eef0 7a40 	vmov.f32	s15, s0
 80085ce:	4b5e      	ldr	r3, [pc, #376]	; (8008748 <cppLoop+0x600>)
 80085d0:	edc3 7a00 	vstr	s15, [r3]
 80085d4:	485b      	ldr	r0, [pc, #364]	; (8008744 <cppLoop+0x5fc>)
 80085d6:	f00d fc31 	bl	8015e3c <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80085da:	4b5c      	ldr	r3, [pc, #368]	; (800874c <cppLoop+0x604>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	f3bf 8f5b 	dmb	ish
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d015      	beq.n	8008622 <cppLoop+0x4da>
 80085f6:	4855      	ldr	r0, [pc, #340]	; (800874c <cppLoop+0x604>)
 80085f8:	f00d fc14 	bl	8015e24 <__cxa_guard_acquire>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bf14      	ite	ne
 8008602:	2301      	movne	r3, #1
 8008604:	2300      	moveq	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <cppLoop+0x4da>
 800860c:	4842      	ldr	r0, [pc, #264]	; (8008718 <cppLoop+0x5d0>)
 800860e:	f7fb fc57 	bl	8003ec0 <_ZN9LineTrace9getMaxAccEv>
 8008612:	eef0 7a40 	vmov.f32	s15, s0
 8008616:	4b4e      	ldr	r3, [pc, #312]	; (8008750 <cppLoop+0x608>)
 8008618:	edc3 7a00 	vstr	s15, [r3]
 800861c:	484b      	ldr	r0, [pc, #300]	; (800874c <cppLoop+0x604>)
 800861e:	f00d fc0d 	bl	8015e3c <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8008622:	4b4c      	ldr	r3, [pc, #304]	; (8008754 <cppLoop+0x60c>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f3bf 8f5b 	dmb	ish
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d015      	beq.n	800866a <cppLoop+0x522>
 800863e:	4845      	ldr	r0, [pc, #276]	; (8008754 <cppLoop+0x60c>)
 8008640:	f00d fbf0 	bl	8015e24 <__cxa_guard_acquire>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf14      	ite	ne
 800864a:	2301      	movne	r3, #1
 800864c:	2300      	moveq	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <cppLoop+0x522>
 8008654:	4830      	ldr	r0, [pc, #192]	; (8008718 <cppLoop+0x5d0>)
 8008656:	f7fb fc45 	bl	8003ee4 <_ZN9LineTrace9getMaxDecEv>
 800865a:	eef0 7a40 	vmov.f32	s15, s0
 800865e:	4b3e      	ldr	r3, [pc, #248]	; (8008758 <cppLoop+0x610>)
 8008660:	edc3 7a00 	vstr	s15, [r3]
 8008664:	483b      	ldr	r0, [pc, #236]	; (8008754 <cppLoop+0x60c>)
 8008666:	f00d fbe9 	bl	8015e3c <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800866a:	4b3c      	ldr	r3, [pc, #240]	; (800875c <cppLoop+0x614>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f3bf 8f5b 	dmb	ish
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	bf0c      	ite	eq
 800867c:	2301      	moveq	r3, #1
 800867e:	2300      	movne	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d015      	beq.n	80086b2 <cppLoop+0x56a>
 8008686:	4835      	ldr	r0, [pc, #212]	; (800875c <cppLoop+0x614>)
 8008688:	f00d fbcc 	bl	8015e24 <__cxa_guard_acquire>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	bf14      	ite	ne
 8008692:	2301      	movne	r3, #1
 8008694:	2300      	moveq	r3, #0
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <cppLoop+0x56a>
 800869c:	481e      	ldr	r0, [pc, #120]	; (8008718 <cppLoop+0x5d0>)
 800869e:	f7fb fc33 	bl	8003f08 <_ZN9LineTrace10getMaxAcc2Ev>
 80086a2:	eef0 7a40 	vmov.f32	s15, s0
 80086a6:	4b2e      	ldr	r3, [pc, #184]	; (8008760 <cppLoop+0x618>)
 80086a8:	edc3 7a00 	vstr	s15, [r3]
 80086ac:	482b      	ldr	r0, [pc, #172]	; (800875c <cppLoop+0x614>)
 80086ae:	f00d fbc5 	bl	8015e3c <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 80086b2:	4b2c      	ldr	r3, [pc, #176]	; (8008764 <cppLoop+0x61c>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f3bf 8f5b 	dmb	ish
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bf0c      	ite	eq
 80086c4:	2301      	moveq	r3, #1
 80086c6:	2300      	movne	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d015      	beq.n	80086fa <cppLoop+0x5b2>
 80086ce:	4825      	ldr	r0, [pc, #148]	; (8008764 <cppLoop+0x61c>)
 80086d0:	f00d fba8 	bl	8015e24 <__cxa_guard_acquire>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	2300      	moveq	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <cppLoop+0x5b2>
 80086e4:	480c      	ldr	r0, [pc, #48]	; (8008718 <cppLoop+0x5d0>)
 80086e6:	f7fb fc21 	bl	8003f2c <_ZN9LineTrace10getMaxDec2Ev>
 80086ea:	eef0 7a40 	vmov.f32	s15, s0
 80086ee:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <cppLoop+0x620>)
 80086f0:	edc3 7a00 	vstr	s15, [r3]
 80086f4:	481b      	ldr	r0, [pc, #108]	; (8008764 <cppLoop+0x61c>)
 80086f6:	f00d fba1 	bl	8015e3c <__cxa_guard_release>
	static float adj_acc3 = line_trace.getMaxAcc3();
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <cppLoop+0x624>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f3bf 8f5b 	dmb	ish
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf0c      	ite	eq
 800870c:	2301      	moveq	r3, #1
 800870e:	2300      	movne	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d042      	beq.n	800879c <cppLoop+0x654>
 8008716:	e02b      	b.n	8008770 <cppLoop+0x628>
 8008718:	200209f4 	.word	0x200209f4
 800871c:	200475ec 	.word	0x200475ec
 8008720:	200475f0 	.word	0x200475f0
 8008724:	200475f8 	.word	0x200475f8
 8008728:	200475f4 	.word	0x200475f4
 800872c:	20047600 	.word	0x20047600
 8008730:	200475fc 	.word	0x200475fc
 8008734:	20047608 	.word	0x20047608
 8008738:	20047604 	.word	0x20047604
 800873c:	20047610 	.word	0x20047610
 8008740:	2004760c 	.word	0x2004760c
 8008744:	20047618 	.word	0x20047618
 8008748:	20047614 	.word	0x20047614
 800874c:	20047620 	.word	0x20047620
 8008750:	2004761c 	.word	0x2004761c
 8008754:	20047628 	.word	0x20047628
 8008758:	20047624 	.word	0x20047624
 800875c:	20047630 	.word	0x20047630
 8008760:	2004762c 	.word	0x2004762c
 8008764:	20047638 	.word	0x20047638
 8008768:	20047634 	.word	0x20047634
 800876c:	20047640 	.word	0x20047640
 8008770:	48bf      	ldr	r0, [pc, #764]	; (8008a70 <cppLoop+0x928>)
 8008772:	f00d fb57 	bl	8015e24 <__cxa_guard_acquire>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	bf14      	ite	ne
 800877c:	2301      	movne	r3, #1
 800877e:	2300      	moveq	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <cppLoop+0x654>
 8008786:	48bb      	ldr	r0, [pc, #748]	; (8008a74 <cppLoop+0x92c>)
 8008788:	f7fb fbe2 	bl	8003f50 <_ZN9LineTrace10getMaxAcc3Ev>
 800878c:	eef0 7a40 	vmov.f32	s15, s0
 8008790:	4bb9      	ldr	r3, [pc, #740]	; (8008a78 <cppLoop+0x930>)
 8008792:	edc3 7a00 	vstr	s15, [r3]
 8008796:	48b6      	ldr	r0, [pc, #728]	; (8008a70 <cppLoop+0x928>)
 8008798:	f00d fb50 	bl	8015e3c <__cxa_guard_release>
	static float adj_dec3 = line_trace.getMaxDec3();
 800879c:	4bb7      	ldr	r3, [pc, #732]	; (8008a7c <cppLoop+0x934>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f3bf 8f5b 	dmb	ish
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d015      	beq.n	80087e4 <cppLoop+0x69c>
 80087b8:	48b0      	ldr	r0, [pc, #704]	; (8008a7c <cppLoop+0x934>)
 80087ba:	f00d fb33 	bl	8015e24 <__cxa_guard_acquire>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bf14      	ite	ne
 80087c4:	2301      	movne	r3, #1
 80087c6:	2300      	moveq	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <cppLoop+0x69c>
 80087ce:	48a9      	ldr	r0, [pc, #676]	; (8008a74 <cppLoop+0x92c>)
 80087d0:	f7fb fbd0 	bl	8003f74 <_ZN9LineTrace10getMaxDec3Ev>
 80087d4:	eef0 7a40 	vmov.f32	s15, s0
 80087d8:	4ba9      	ldr	r3, [pc, #676]	; (8008a80 <cppLoop+0x938>)
 80087da:	edc3 7a00 	vstr	s15, [r3]
 80087de:	48a7      	ldr	r0, [pc, #668]	; (8008a7c <cppLoop+0x934>)
 80087e0:	f00d fb2c 	bl	8015e3c <__cxa_guard_release>
	static float adj_acc4 = line_trace.getMaxAcc4();
 80087e4:	4ba7      	ldr	r3, [pc, #668]	; (8008a84 <cppLoop+0x93c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f3bf 8f5b 	dmb	ish
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d015      	beq.n	800882c <cppLoop+0x6e4>
 8008800:	48a0      	ldr	r0, [pc, #640]	; (8008a84 <cppLoop+0x93c>)
 8008802:	f00d fb0f 	bl	8015e24 <__cxa_guard_acquire>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <cppLoop+0x6e4>
 8008816:	4897      	ldr	r0, [pc, #604]	; (8008a74 <cppLoop+0x92c>)
 8008818:	f7fb fbbe 	bl	8003f98 <_ZN9LineTrace10getMaxAcc4Ev>
 800881c:	eef0 7a40 	vmov.f32	s15, s0
 8008820:	4b99      	ldr	r3, [pc, #612]	; (8008a88 <cppLoop+0x940>)
 8008822:	edc3 7a00 	vstr	s15, [r3]
 8008826:	4897      	ldr	r0, [pc, #604]	; (8008a84 <cppLoop+0x93c>)
 8008828:	f00d fb08 	bl	8015e3c <__cxa_guard_release>
	static float adj_dec4 = line_trace.getMaxDec4();
 800882c:	4b97      	ldr	r3, [pc, #604]	; (8008a8c <cppLoop+0x944>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	f3bf 8f5b 	dmb	ish
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	bf0c      	ite	eq
 800883e:	2301      	moveq	r3, #1
 8008840:	2300      	movne	r3, #0
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d015      	beq.n	8008874 <cppLoop+0x72c>
 8008848:	4890      	ldr	r0, [pc, #576]	; (8008a8c <cppLoop+0x944>)
 800884a:	f00d faeb 	bl	8015e24 <__cxa_guard_acquire>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	bf14      	ite	ne
 8008854:	2301      	movne	r3, #1
 8008856:	2300      	moveq	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <cppLoop+0x72c>
 800885e:	4885      	ldr	r0, [pc, #532]	; (8008a74 <cppLoop+0x92c>)
 8008860:	f7fb fbac 	bl	8003fbc <_ZN9LineTrace10getMaxDec4Ev>
 8008864:	eef0 7a40 	vmov.f32	s15, s0
 8008868:	4b89      	ldr	r3, [pc, #548]	; (8008a90 <cppLoop+0x948>)
 800886a:	edc3 7a00 	vstr	s15, [r3]
 800886e:	4887      	ldr	r0, [pc, #540]	; (8008a8c <cppLoop+0x944>)
 8008870:	f00d fae4 	bl	8015e3c <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8008874:	4887      	ldr	r0, [pc, #540]	; (8008a94 <cppLoop+0x94c>)
 8008876:	f7fc ff41 	bl	80056fc <_ZN12RotarySwitch8getValueEv>
 800887a:	4603      	mov	r3, r0
 800887c:	2b0f      	cmp	r3, #15
 800887e:	f202 8469 	bhi.w	800b154 <cppLoop+0x300c>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <cppLoop+0x740>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088c9 	.word	0x080088c9
 800888c:	08008c55 	.word	0x08008c55
 8008890:	08009015 	.word	0x08009015
 8008894:	080092cd 	.word	0x080092cd
 8008898:	080096b3 	.word	0x080096b3
 800889c:	08009afd 	.word	0x08009afd
 80088a0:	08009f01 	.word	0x08009f01
 80088a4:	0800a315 	.word	0x0800a315
 80088a8:	0800a59f 	.word	0x0800a59f
 80088ac:	0800a82b 	.word	0x0800a82b
 80088b0:	0800aab1 	.word	0x0800aab1
 80088b4:	0800ad3d 	.word	0x0800ad3d
 80088b8:	0800addd 	.word	0x0800addd
 80088bc:	0800ae79 	.word	0x0800ae79
 80088c0:	0800af3f 	.word	0x0800af3f
 80088c4:	0800b07d 	.word	0x0800b07d
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 80088c8:	2157      	movs	r1, #87	; 0x57
 80088ca:	4873      	ldr	r0, [pc, #460]	; (8008a98 <cppLoop+0x950>)
 80088cc:	f7f9 fb0c 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088d0:	f7f8 fbe6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088d4:	2100      	movs	r1, #0
 80088d6:	2000      	movs	r0, #0
 80088d8:	f7f8 fbf2 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 80088dc:	4865      	ldr	r0, [pc, #404]	; (8008a74 <cppLoop+0x92c>)
 80088de:	f7fb f93a 	bl	8003b56 <_ZN9LineTrace9getKpSlowEv>
 80088e2:	eeb0 7a40 	vmov.f32	s14, s0
 80088e6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008a9c <cppLoop+0x954>
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	eeb0 0a67 	vmov.f32	s0, s15
 80088f2:	f7f9 fd9b 	bl	800242c <_ZSt3absf>
 80088f6:	ee10 3a10 	vmov	r3, s0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f7 fe3c 	bl	8000578 <__aeabi_f2d>
 8008900:	4603      	mov	r3, r0
 8008902:	460c      	mov	r4, r1
 8008904:	461a      	mov	r2, r3
 8008906:	4623      	mov	r3, r4
 8008908:	4865      	ldr	r0, [pc, #404]	; (8008aa0 <cppLoop+0x958>)
 800890a:	f7f8 fc03 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800890e:	2101      	movs	r1, #1
 8008910:	2000      	movs	r0, #0
 8008912:	f7f8 fbd5 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*10000));
 8008916:	4857      	ldr	r0, [pc, #348]	; (8008a74 <cppLoop+0x92c>)
 8008918:	f7fb f92c 	bl	8003b74 <_ZN9LineTrace9getKiSlowEv>
 800891c:	eeb0 7a40 	vmov.f32	s14, s0
 8008920:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008aa4 <cppLoop+0x95c>
 8008924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008928:	eeb0 0a67 	vmov.f32	s0, s15
 800892c:	f7f9 fd7e 	bl	800242c <_ZSt3absf>
 8008930:	ee10 3a10 	vmov	r3, s0
 8008934:	4618      	mov	r0, r3
 8008936:	f7f7 fe1f 	bl	8000578 <__aeabi_f2d>
 800893a:	4605      	mov	r5, r0
 800893c:	460e      	mov	r6, r1
 800893e:	484d      	ldr	r0, [pc, #308]	; (8008a74 <cppLoop+0x92c>)
 8008940:	f7fb f927 	bl	8003b92 <_ZN9LineTrace9getKdSlowEv>
 8008944:	eeb0 7a40 	vmov.f32	s14, s0
 8008948:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008a9c <cppLoop+0x954>
 800894c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008950:	eeb0 0a67 	vmov.f32	s0, s15
 8008954:	f7f9 fd6a 	bl	800242c <_ZSt3absf>
 8008958:	ee10 3a10 	vmov	r3, s0
 800895c:	4618      	mov	r0, r3
 800895e:	f7f7 fe0b 	bl	8000578 <__aeabi_f2d>
 8008962:	4603      	mov	r3, r0
 8008964:	460c      	mov	r4, r1
 8008966:	e9cd 3400 	strd	r3, r4, [sp]
 800896a:	462a      	mov	r2, r5
 800896c:	4633      	mov	r3, r6
 800896e:	484e      	ldr	r0, [pc, #312]	; (8008aa8 <cppLoop+0x960>)
 8008970:	f7f8 fbd0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008974:	484d      	ldr	r0, [pc, #308]	; (8008aac <cppLoop+0x964>)
 8008976:	f7f9 fa53 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800897a:	4603      	mov	r3, r0
 800897c:	2b04      	cmp	r3, #4
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d022      	beq.n	80089d0 <cppLoop+0x888>
			led.LR(-1, 1);
 800898a:	2201      	movs	r2, #1
 800898c:	f04f 31ff 	mov.w	r1, #4294967295
 8008990:	4841      	ldr	r0, [pc, #260]	; (8008a98 <cppLoop+0x950>)
 8008992:	f7f9 fb65 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800899a:	f002 fd33 	bl	800b404 <HAL_Delay>

			selector_gain++;
 800899e:	4b44      	ldr	r3, [pc, #272]	; (8008ab0 <cppLoop+0x968>)
 80089a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3301      	adds	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	b21a      	sxth	r2, r3
 80089ac:	4b40      	ldr	r3, [pc, #256]	; (8008ab0 <cppLoop+0x968>)
 80089ae:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 80089b0:	4b3f      	ldr	r3, [pc, #252]	; (8008ab0 <cppLoop+0x968>)
 80089b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	dd02      	ble.n	80089c0 <cppLoop+0x878>
 80089ba:	4b3d      	ldr	r3, [pc, #244]	; (8008ab0 <cppLoop+0x968>)
 80089bc:	2200      	movs	r2, #0
 80089be:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	f04f 31ff 	mov.w	r1, #4294967295
 80089c6:	4834      	ldr	r0, [pc, #208]	; (8008a98 <cppLoop+0x950>)
 80089c8:	f7f9 fb4a 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80089cc:	f002 bbc4 	b.w	800b158 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_R){
 80089d0:	4836      	ldr	r0, [pc, #216]	; (8008aac <cppLoop+0x964>)
 80089d2:	f7f9 fa25 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b10      	cmp	r3, #16
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 8089 	beq.w	8008afa <cppLoop+0x9b2>
			led.LR(-1, 1);
 80089e8:	2201      	movs	r2, #1
 80089ea:	f04f 31ff 	mov.w	r1, #4294967295
 80089ee:	482a      	ldr	r0, [pc, #168]	; (8008a98 <cppLoop+0x950>)
 80089f0:	f7f9 fb36 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089f4:	2064      	movs	r0, #100	; 0x64
 80089f6:	f002 fd05 	bl	800b404 <HAL_Delay>
			if(selector_gain == 0){
 80089fa:	4b2d      	ldr	r3, [pc, #180]	; (8008ab0 <cppLoop+0x968>)
 80089fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d113      	bne.n	8008a2c <cppLoop+0x8e4>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008a04:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <cppLoop+0x96c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fdb5 	bl	8000578 <__aeabi_f2d>
 8008a0e:	a314      	add	r3, pc, #80	; (adr r3, 8008a60 <cppLoop+0x918>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fc52 	bl	80002bc <__adddf3>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f7f8 f8fa 	bl	8000c18 <__aeabi_d2f>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <cppLoop+0x96c>)
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	e05a      	b.n	8008ae2 <cppLoop+0x99a>
			else if(selector_gain == 1){
 8008a2c:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <cppLoop+0x968>)
 8008a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d142      	bne.n	8008abc <cppLoop+0x974>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008a36:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <cppLoop+0x970>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7f7 fd9c 	bl	8000578 <__aeabi_f2d>
 8008a40:	a309      	add	r3, pc, #36	; (adr r3, 8008a68 <cppLoop+0x920>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fc39 	bl	80002bc <__adddf3>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	4621      	mov	r1, r4
 8008a52:	f7f8 f8e1 	bl	8000c18 <__aeabi_d2f>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b17      	ldr	r3, [pc, #92]	; (8008ab8 <cppLoop+0x970>)
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e041      	b.n	8008ae2 <cppLoop+0x99a>
 8008a5e:	bf00      	nop
 8008a60:	a0b5ed8d 	.word	0xa0b5ed8d
 8008a64:	3eb0c6f7 	.word	0x3eb0c6f7
 8008a68:	88e368f1 	.word	0x88e368f1
 8008a6c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008a70:	20047640 	.word	0x20047640
 8008a74:	200209f4 	.word	0x200209f4
 8008a78:	2004763c 	.word	0x2004763c
 8008a7c:	20047648 	.word	0x20047648
 8008a80:	20047644 	.word	0x20047644
 8008a84:	20047650 	.word	0x20047650
 8008a88:	2004764c 	.word	0x2004764c
 8008a8c:	20047658 	.word	0x20047658
 8008a90:	20047654 	.word	0x20047654
 8008a94:	20000570 	.word	0x20000570
 8008a98:	20000578 	.word	0x20000578
 8008a9c:	461c4000 	.word	0x461c4000
 8008aa0:	0801a5c0 	.word	0x0801a5c0
 8008aa4:	447a0000 	.word	0x447a0000
 8008aa8:	0801a5cc 	.word	0x0801a5cc
 8008aac:	2000056c 	.word	0x2000056c
 8008ab0:	2004759c 	.word	0x2004759c
 8008ab4:	200475bc 	.word	0x200475bc
 8008ab8:	200475c4 	.word	0x200475c4
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008abc:	4bc2      	ldr	r3, [pc, #776]	; (8008dc8 <cppLoop+0xc80>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f7 fd59 	bl	8000578 <__aeabi_f2d>
 8008ac6:	a3bc      	add	r3, pc, #752	; (adr r3, 8008db8 <cppLoop+0xc70>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fbf6 	bl	80002bc <__adddf3>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f7f8 f89e 	bl	8000c18 <__aeabi_d2f>
 8008adc:	4602      	mov	r2, r0
 8008ade:	4bba      	ldr	r3, [pc, #744]	; (8008dc8 <cppLoop+0xc80>)
 8008ae0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008ae2:	2152      	movs	r1, #82	; 0x52
 8008ae4:	48b9      	ldr	r0, [pc, #740]	; (8008dcc <cppLoop+0xc84>)
 8008ae6:	f7f9 f9ff 	bl	8001ee8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008aea:	2200      	movs	r2, #0
 8008aec:	f04f 31ff 	mov.w	r1, #4294967295
 8008af0:	48b6      	ldr	r0, [pc, #728]	; (8008dcc <cppLoop+0xc84>)
 8008af2:	f7f9 fab5 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008af6:	f002 bb2f 	b.w	800b158 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_L){
 8008afa:	48b5      	ldr	r0, [pc, #724]	; (8008dd0 <cppLoop+0xc88>)
 8008afc:	f7f9 f990 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	bf0c      	ite	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	2300      	movne	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d059      	beq.n	8008bc4 <cppLoop+0xa7c>
			led.LR(-1, 1);
 8008b10:	2201      	movs	r2, #1
 8008b12:	f04f 31ff 	mov.w	r1, #4294967295
 8008b16:	48ad      	ldr	r0, [pc, #692]	; (8008dcc <cppLoop+0xc84>)
 8008b18:	f7f9 faa2 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b1c:	2064      	movs	r0, #100	; 0x64
 8008b1e:	f002 fc71 	bl	800b404 <HAL_Delay>
			if(selector_gain == 0){
 8008b22:	4bac      	ldr	r3, [pc, #688]	; (8008dd4 <cppLoop+0xc8c>)
 8008b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d113      	bne.n	8008b54 <cppLoop+0xa0c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008b2c:	4baa      	ldr	r3, [pc, #680]	; (8008dd8 <cppLoop+0xc90>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fd21 	bl	8000578 <__aeabi_f2d>
 8008b36:	a3a0      	add	r3, pc, #640	; (adr r3, 8008db8 <cppLoop+0xc70>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fbbc 	bl	80002b8 <__aeabi_dsub>
 8008b40:	4603      	mov	r3, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4618      	mov	r0, r3
 8008b46:	4621      	mov	r1, r4
 8008b48:	f7f8 f866 	bl	8000c18 <__aeabi_d2f>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	4ba2      	ldr	r3, [pc, #648]	; (8008dd8 <cppLoop+0xc90>)
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e02b      	b.n	8008bac <cppLoop+0xa64>
			else if(selector_gain == 1){
 8008b54:	4b9f      	ldr	r3, [pc, #636]	; (8008dd4 <cppLoop+0xc8c>)
 8008b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d113      	bne.n	8008b86 <cppLoop+0xa3e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008b5e:	4b9f      	ldr	r3, [pc, #636]	; (8008ddc <cppLoop+0xc94>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fd08 	bl	8000578 <__aeabi_f2d>
 8008b68:	a395      	add	r3, pc, #596	; (adr r3, 8008dc0 <cppLoop+0xc78>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fba3 	bl	80002b8 <__aeabi_dsub>
 8008b72:	4603      	mov	r3, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	4618      	mov	r0, r3
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7f8 f84d 	bl	8000c18 <__aeabi_d2f>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b96      	ldr	r3, [pc, #600]	; (8008ddc <cppLoop+0xc94>)
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e012      	b.n	8008bac <cppLoop+0xa64>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008b86:	4b90      	ldr	r3, [pc, #576]	; (8008dc8 <cppLoop+0xc80>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f7 fcf4 	bl	8000578 <__aeabi_f2d>
 8008b90:	a389      	add	r3, pc, #548	; (adr r3, 8008db8 <cppLoop+0xc70>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb8f 	bl	80002b8 <__aeabi_dsub>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f7f8 f839 	bl	8000c18 <__aeabi_d2f>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b87      	ldr	r3, [pc, #540]	; (8008dc8 <cppLoop+0xc80>)
 8008baa:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008bac:	2152      	movs	r1, #82	; 0x52
 8008bae:	4887      	ldr	r0, [pc, #540]	; (8008dcc <cppLoop+0xc84>)
 8008bb0:	f7f9 f99a 	bl	8001ee8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bba:	4884      	ldr	r0, [pc, #528]	; (8008dcc <cppLoop+0xc84>)
 8008bbc:	f7f9 fa50 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008bc0:	f002 baca 	b.w	800b158 <cppLoop+0x3010>
		else if(joy_stick.getValue() == JOY_C){
 8008bc4:	4882      	ldr	r0, [pc, #520]	; (8008dd0 <cppLoop+0xc88>)
 8008bc6:	f7f9 f92b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	bf0c      	ite	eq
 8008bd0:	2301      	moveq	r3, #1
 8008bd2:	2300      	movne	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f002 82be 	beq.w	800b158 <cppLoop+0x3010>
			led.LR(-1, 1);
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f04f 31ff 	mov.w	r1, #4294967295
 8008be2:	487a      	ldr	r0, [pc, #488]	; (8008dcc <cppLoop+0xc84>)
 8008be4:	f7f9 fa3c 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008be8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bec:	f002 fc0a 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4b78      	ldr	r3, [pc, #480]	; (8008dd8 <cppLoop+0xc90>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4979      	ldr	r1, [pc, #484]	; (8008de0 <cppLoop+0xc98>)
 8008bfa:	487a      	ldr	r0, [pc, #488]	; (8008de4 <cppLoop+0xc9c>)
 8008bfc:	f7f8 fdaa 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4b75      	ldr	r3, [pc, #468]	; (8008ddc <cppLoop+0xc94>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	4977      	ldr	r1, [pc, #476]	; (8008de8 <cppLoop+0xca0>)
 8008c0a:	4876      	ldr	r0, [pc, #472]	; (8008de4 <cppLoop+0xc9c>)
 8008c0c:	f7f8 fda2 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008c10:	2300      	movs	r3, #0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4b6c      	ldr	r3, [pc, #432]	; (8008dc8 <cppLoop+0xc80>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	4974      	ldr	r1, [pc, #464]	; (8008dec <cppLoop+0xca4>)
 8008c1a:	4872      	ldr	r0, [pc, #456]	; (8008de4 <cppLoop+0xc9c>)
 8008c1c:	f7f8 fd9a 	bl	8001754 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008c20:	4b6d      	ldr	r3, [pc, #436]	; (8008dd8 <cppLoop+0xc90>)
 8008c22:	edd3 7a00 	vldr	s15, [r3]
 8008c26:	4b6d      	ldr	r3, [pc, #436]	; (8008ddc <cppLoop+0xc94>)
 8008c28:	ed93 7a00 	vldr	s14, [r3]
 8008c2c:	4b66      	ldr	r3, [pc, #408]	; (8008dc8 <cppLoop+0xc80>)
 8008c2e:	edd3 6a00 	vldr	s13, [r3]
 8008c32:	eeb0 1a66 	vmov.f32	s2, s13
 8008c36:	eef0 0a47 	vmov.f32	s1, s14
 8008c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3e:	486c      	ldr	r0, [pc, #432]	; (8008df0 <cppLoop+0xca8>)
 8008c40:	f7fa ff70 	bl	8003b24 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	f04f 31ff 	mov.w	r1, #4294967295
 8008c4a:	4860      	ldr	r0, [pc, #384]	; (8008dcc <cppLoop+0xc84>)
 8008c4c:	f7f9 fa08 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008c50:	f002 ba82 	b.w	800b158 <cppLoop+0x3010>
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 8008c54:	2157      	movs	r1, #87	; 0x57
 8008c56:	485d      	ldr	r0, [pc, #372]	; (8008dcc <cppLoop+0xc84>)
 8008c58:	f7f9 f946 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c5c:	f7f8 fa20 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c60:	2100      	movs	r1, #0
 8008c62:	2000      	movs	r0, #0
 8008c64:	f7f8 fa2c 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8008c68:	4861      	ldr	r0, [pc, #388]	; (8008df0 <cppLoop+0xca8>)
 8008c6a:	f7fa ff2e 	bl	8003aca <_ZN9LineTrace5getKpEv>
 8008c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8008c72:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008df4 <cppLoop+0xcac>
 8008c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c7e:	f7f9 fbd5 	bl	800242c <_ZSt3absf>
 8008c82:	ee10 3a10 	vmov	r3, s0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 fc76 	bl	8000578 <__aeabi_f2d>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	461a      	mov	r2, r3
 8008c92:	4623      	mov	r3, r4
 8008c94:	4858      	ldr	r0, [pc, #352]	; (8008df8 <cppLoop+0xcb0>)
 8008c96:	f7f8 fa3d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	f7f8 fa0f 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*10000));
 8008ca2:	4853      	ldr	r0, [pc, #332]	; (8008df0 <cppLoop+0xca8>)
 8008ca4:	f7fa ff20 	bl	8003ae8 <_ZN9LineTrace5getKiEv>
 8008ca8:	eeb0 7a40 	vmov.f32	s14, s0
 8008cac:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008dfc <cppLoop+0xcb4>
 8008cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8008cb8:	f7f9 fbb8 	bl	800242c <_ZSt3absf>
 8008cbc:	ee10 3a10 	vmov	r3, s0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fc59 	bl	8000578 <__aeabi_f2d>
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	460e      	mov	r6, r1
 8008cca:	4849      	ldr	r0, [pc, #292]	; (8008df0 <cppLoop+0xca8>)
 8008ccc:	f7fa ff1b 	bl	8003b06 <_ZN9LineTrace5getKdEv>
 8008cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8008cd4:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008df4 <cppLoop+0xcac>
 8008cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce0:	f7f9 fba4 	bl	800242c <_ZSt3absf>
 8008ce4:	ee10 3a10 	vmov	r3, s0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7f7 fc45 	bl	8000578 <__aeabi_f2d>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	e9cd 3400 	strd	r3, r4, [sp]
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	4633      	mov	r3, r6
 8008cfa:	4841      	ldr	r0, [pc, #260]	; (8008e00 <cppLoop+0xcb8>)
 8008cfc:	f7f8 fa0a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008d00:	4833      	ldr	r0, [pc, #204]	; (8008dd0 <cppLoop+0xc88>)
 8008d02:	f7f9 f88d 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2301      	moveq	r3, #1
 8008d0e:	2300      	movne	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d022      	beq.n	8008d5c <cppLoop+0xc14>
			led.LR(-1, 1);
 8008d16:	2201      	movs	r2, #1
 8008d18:	f04f 31ff 	mov.w	r1, #4294967295
 8008d1c:	482b      	ldr	r0, [pc, #172]	; (8008dcc <cppLoop+0xc84>)
 8008d1e:	f7f9 f99f 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d26:	f002 fb6d 	bl	800b404 <HAL_Delay>

			selector_gain++;
 8008d2a:	4b2a      	ldr	r3, [pc, #168]	; (8008dd4 <cppLoop+0xc8c>)
 8008d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3301      	adds	r3, #1
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	b21a      	sxth	r2, r3
 8008d38:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <cppLoop+0xc8c>)
 8008d3a:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008d3c:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <cppLoop+0xc8c>)
 8008d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	dd02      	ble.n	8008d4c <cppLoop+0xc04>
 8008d46:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <cppLoop+0xc8c>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d52:	481e      	ldr	r0, [pc, #120]	; (8008dcc <cppLoop+0xc84>)
 8008d54:	f7f9 f984 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008d58:	f002 ba00 	b.w	800b15c <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_R){
 8008d5c:	481c      	ldr	r0, [pc, #112]	; (8008dd0 <cppLoop+0xc88>)
 8008d5e:	f7f9 f85f 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	bf0c      	ite	eq
 8008d68:	2301      	moveq	r3, #1
 8008d6a:	2300      	movne	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8082 	beq.w	8008e78 <cppLoop+0xd30>
			led.LR(-1, 1);
 8008d74:	2201      	movs	r2, #1
 8008d76:	f04f 31ff 	mov.w	r1, #4294967295
 8008d7a:	4814      	ldr	r0, [pc, #80]	; (8008dcc <cppLoop+0xc84>)
 8008d7c:	f7f9 f970 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d80:	2064      	movs	r0, #100	; 0x64
 8008d82:	f002 fb3f 	bl	800b404 <HAL_Delay>
			if(selector_gain == 0){
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <cppLoop+0xc8c>)
 8008d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d13b      	bne.n	8008e08 <cppLoop+0xcc0>
				adj_kp = adj_kp + 0.000001;
 8008d90:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <cppLoop+0xcbc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7f7 fbef 	bl	8000578 <__aeabi_f2d>
 8008d9a:	a307      	add	r3, pc, #28	; (adr r3, 8008db8 <cppLoop+0xc70>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f7f7 fa8c 	bl	80002bc <__adddf3>
 8008da4:	4603      	mov	r3, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4618      	mov	r0, r3
 8008daa:	4621      	mov	r1, r4
 8008dac:	f7f7 ff34 	bl	8000c18 <__aeabi_d2f>
 8008db0:	4602      	mov	r2, r0
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <cppLoop+0xcbc>)
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e053      	b.n	8008e60 <cppLoop+0xd18>
 8008db8:	a0b5ed8d 	.word	0xa0b5ed8d
 8008dbc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008dc0:	88e368f1 	.word	0x88e368f1
 8008dc4:	3ee4f8b5 	.word	0x3ee4f8b5
 8008dc8:	200475cc 	.word	0x200475cc
 8008dcc:	20000578 	.word	0x20000578
 8008dd0:	2000056c 	.word	0x2000056c
 8008dd4:	2004759c 	.word	0x2004759c
 8008dd8:	200475bc 	.word	0x200475bc
 8008ddc:	200475c4 	.word	0x200475c4
 8008de0:	0801a5dc 	.word	0x0801a5dc
 8008de4:	0801a5e8 	.word	0x0801a5e8
 8008de8:	0801a5f0 	.word	0x0801a5f0
 8008dec:	0801a5fc 	.word	0x0801a5fc
 8008df0:	200209f4 	.word	0x200209f4
 8008df4:	461c4000 	.word	0x461c4000
 8008df8:	0801a608 	.word	0x0801a608
 8008dfc:	447a0000 	.word	0x447a0000
 8008e00:	0801a5cc 	.word	0x0801a5cc
 8008e04:	200475a4 	.word	0x200475a4
			else if(selector_gain == 1){
 8008e08:	4b77      	ldr	r3, [pc, #476]	; (8008fe8 <cppLoop+0xea0>)
 8008e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d113      	bne.n	8008e3a <cppLoop+0xcf2>
				adj_ki = adj_ki + 0.00001;
 8008e12:	4b76      	ldr	r3, [pc, #472]	; (8008fec <cppLoop+0xea4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f7 fbae 	bl	8000578 <__aeabi_f2d>
 8008e1c:	a36e      	add	r3, pc, #440	; (adr r3, 8008fd8 <cppLoop+0xe90>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fa4b 	bl	80002bc <__adddf3>
 8008e26:	4603      	mov	r3, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f7f7 fef3 	bl	8000c18 <__aeabi_d2f>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b6d      	ldr	r3, [pc, #436]	; (8008fec <cppLoop+0xea4>)
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e012      	b.n	8008e60 <cppLoop+0xd18>
				adj_kd = adj_kd + 0.000001;
 8008e3a:	4b6d      	ldr	r3, [pc, #436]	; (8008ff0 <cppLoop+0xea8>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f7 fb9a 	bl	8000578 <__aeabi_f2d>
 8008e44:	a366      	add	r3, pc, #408	; (adr r3, 8008fe0 <cppLoop+0xe98>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fa37 	bl	80002bc <__adddf3>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	4618      	mov	r0, r3
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7f7 fedf 	bl	8000c18 <__aeabi_d2f>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b64      	ldr	r3, [pc, #400]	; (8008ff0 <cppLoop+0xea8>)
 8008e5e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008e60:	2152      	movs	r1, #82	; 0x52
 8008e62:	4864      	ldr	r0, [pc, #400]	; (8008ff4 <cppLoop+0xeac>)
 8008e64:	f7f9 f840 	bl	8001ee8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e6e:	4861      	ldr	r0, [pc, #388]	; (8008ff4 <cppLoop+0xeac>)
 8008e70:	f7f9 f8f6 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008e74:	f002 b972 	b.w	800b15c <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_L){
 8008e78:	485f      	ldr	r0, [pc, #380]	; (8008ff8 <cppLoop+0xeb0>)
 8008e7a:	f7f8 ffd1 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d059      	beq.n	8008f42 <cppLoop+0xdfa>
			led.LR(-1, 1);
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f04f 31ff 	mov.w	r1, #4294967295
 8008e94:	4857      	ldr	r0, [pc, #348]	; (8008ff4 <cppLoop+0xeac>)
 8008e96:	f7f9 f8e3 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e9a:	2064      	movs	r0, #100	; 0x64
 8008e9c:	f002 fab2 	bl	800b404 <HAL_Delay>
			if(selector_gain == 0){
 8008ea0:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <cppLoop+0xea0>)
 8008ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d113      	bne.n	8008ed2 <cppLoop+0xd8a>
				adj_kp = adj_kp - 0.000001;
 8008eaa:	4b54      	ldr	r3, [pc, #336]	; (8008ffc <cppLoop+0xeb4>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f7 fb62 	bl	8000578 <__aeabi_f2d>
 8008eb4:	a34a      	add	r3, pc, #296	; (adr r3, 8008fe0 <cppLoop+0xe98>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 f9fd 	bl	80002b8 <__aeabi_dsub>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7f7 fea7 	bl	8000c18 <__aeabi_d2f>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b4b      	ldr	r3, [pc, #300]	; (8008ffc <cppLoop+0xeb4>)
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e02b      	b.n	8008f2a <cppLoop+0xde2>
			else if(selector_gain == 1){
 8008ed2:	4b45      	ldr	r3, [pc, #276]	; (8008fe8 <cppLoop+0xea0>)
 8008ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d113      	bne.n	8008f04 <cppLoop+0xdbc>
				adj_ki = adj_ki - 0.00001;
 8008edc:	4b43      	ldr	r3, [pc, #268]	; (8008fec <cppLoop+0xea4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7f7 fb49 	bl	8000578 <__aeabi_f2d>
 8008ee6:	a33c      	add	r3, pc, #240	; (adr r3, 8008fd8 <cppLoop+0xe90>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 f9e4 	bl	80002b8 <__aeabi_dsub>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7f7 fe8e 	bl	8000c18 <__aeabi_d2f>
 8008efc:	4602      	mov	r2, r0
 8008efe:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <cppLoop+0xea4>)
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e012      	b.n	8008f2a <cppLoop+0xde2>
				adj_kd = adj_kd - 0.000001;
 8008f04:	4b3a      	ldr	r3, [pc, #232]	; (8008ff0 <cppLoop+0xea8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7f7 fb35 	bl	8000578 <__aeabi_f2d>
 8008f0e:	a334      	add	r3, pc, #208	; (adr r3, 8008fe0 <cppLoop+0xe98>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 f9d0 	bl	80002b8 <__aeabi_dsub>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	4621      	mov	r1, r4
 8008f20:	f7f7 fe7a 	bl	8000c18 <__aeabi_d2f>
 8008f24:	4602      	mov	r2, r0
 8008f26:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <cppLoop+0xea8>)
 8008f28:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f2a:	2152      	movs	r1, #82	; 0x52
 8008f2c:	4831      	ldr	r0, [pc, #196]	; (8008ff4 <cppLoop+0xeac>)
 8008f2e:	f7f8 ffdb 	bl	8001ee8 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f32:	2200      	movs	r2, #0
 8008f34:	f04f 31ff 	mov.w	r1, #4294967295
 8008f38:	482e      	ldr	r0, [pc, #184]	; (8008ff4 <cppLoop+0xeac>)
 8008f3a:	f7f9 f891 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008f3e:	f002 b90d 	b.w	800b15c <cppLoop+0x3014>
		else if(joy_stick.getValue() == JOY_C){
 8008f42:	482d      	ldr	r0, [pc, #180]	; (8008ff8 <cppLoop+0xeb0>)
 8008f44:	f7f8 ff6c 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f002 8101 	beq.w	800b15c <cppLoop+0x3014>
			led.LR(-1, 1);
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f60:	4824      	ldr	r0, [pc, #144]	; (8008ff4 <cppLoop+0xeac>)
 8008f62:	f7f9 f87d 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f6a:	f002 fa4b 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	4b22      	ldr	r3, [pc, #136]	; (8008ffc <cppLoop+0xeb4>)
 8008f74:	2201      	movs	r2, #1
 8008f76:	4922      	ldr	r1, [pc, #136]	; (8009000 <cppLoop+0xeb8>)
 8008f78:	4822      	ldr	r0, [pc, #136]	; (8009004 <cppLoop+0xebc>)
 8008f7a:	f7f8 fbeb 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <cppLoop+0xea4>)
 8008f84:	2201      	movs	r2, #1
 8008f86:	4920      	ldr	r1, [pc, #128]	; (8009008 <cppLoop+0xec0>)
 8008f88:	481e      	ldr	r0, [pc, #120]	; (8009004 <cppLoop+0xebc>)
 8008f8a:	f7f8 fbe3 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <cppLoop+0xea8>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	491d      	ldr	r1, [pc, #116]	; (800900c <cppLoop+0xec4>)
 8008f98:	481a      	ldr	r0, [pc, #104]	; (8009004 <cppLoop+0xebc>)
 8008f9a:	f7f8 fbdb 	bl	8001754 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008f9e:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <cppLoop+0xeb4>)
 8008fa0:	edd3 7a00 	vldr	s15, [r3]
 8008fa4:	4b11      	ldr	r3, [pc, #68]	; (8008fec <cppLoop+0xea4>)
 8008fa6:	ed93 7a00 	vldr	s14, [r3]
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <cppLoop+0xea8>)
 8008fac:	edd3 6a00 	vldr	s13, [r3]
 8008fb0:	eeb0 1a66 	vmov.f32	s2, s13
 8008fb4:	eef0 0a47 	vmov.f32	s1, s14
 8008fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008fbc:	4814      	ldr	r0, [pc, #80]	; (8009010 <cppLoop+0xec8>)
 8008fbe:	f7fa fd6b 	bl	8003a98 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc8:	480a      	ldr	r0, [pc, #40]	; (8008ff4 <cppLoop+0xeac>)
 8008fca:	f7f9 f849 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8008fce:	f002 b8c5 	b.w	800b15c <cppLoop+0x3014>
 8008fd2:	bf00      	nop
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	88e368f1 	.word	0x88e368f1
 8008fdc:	3ee4f8b5 	.word	0x3ee4f8b5
 8008fe0:	a0b5ed8d 	.word	0xa0b5ed8d
 8008fe4:	3eb0c6f7 	.word	0x3eb0c6f7
 8008fe8:	2004759c 	.word	0x2004759c
 8008fec:	200475ac 	.word	0x200475ac
 8008ff0:	200475b4 	.word	0x200475b4
 8008ff4:	20000578 	.word	0x20000578
 8008ff8:	2000056c 	.word	0x2000056c
 8008ffc:	200475a4 	.word	0x200475a4
 8009000:	0801a614 	.word	0x0801a614
 8009004:	0801a5e8 	.word	0x0801a5e8
 8009008:	0801a61c 	.word	0x0801a61c
 800900c:	0801a624 	.word	0x0801a624
 8009010:	200209f4 	.word	0x200209f4

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 8009014:	2143      	movs	r1, #67	; 0x43
 8009016:	489e      	ldr	r0, [pc, #632]	; (8009290 <cppLoop+0x1148>)
 8009018:	f7f8 ff66 	bl	8001ee8 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 800901c:	489d      	ldr	r0, [pc, #628]	; (8009294 <cppLoop+0x114c>)
 800901e:	f7f8 feff 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009022:	4603      	mov	r3, r0
 8009024:	2b04      	cmp	r3, #4
 8009026:	bf0c      	ite	eq
 8009028:	2301      	moveq	r3, #1
 800902a:	2300      	movne	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d020      	beq.n	8009074 <cppLoop+0xf2c>
			led.LR(-1, 1);
 8009032:	2201      	movs	r2, #1
 8009034:	f04f 31ff 	mov.w	r1, #4294967295
 8009038:	4895      	ldr	r0, [pc, #596]	; (8009290 <cppLoop+0x1148>)
 800903a:	f7f9 f811 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800903e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009042:	f002 f9df 	bl	800b404 <HAL_Delay>

			selector_run++;
 8009046:	4b94      	ldr	r3, [pc, #592]	; (8009298 <cppLoop+0x1150>)
 8009048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800904c:	b29b      	uxth	r3, r3
 800904e:	3301      	adds	r3, #1
 8009050:	b29b      	uxth	r3, r3
 8009052:	b21a      	sxth	r2, r3
 8009054:	4b90      	ldr	r3, [pc, #576]	; (8009298 <cppLoop+0x1150>)
 8009056:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009058:	4b8f      	ldr	r3, [pc, #572]	; (8009298 <cppLoop+0x1150>)
 800905a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800905e:	2b01      	cmp	r3, #1
 8009060:	dd02      	ble.n	8009068 <cppLoop+0xf20>
 8009062:	4b8d      	ldr	r3, [pc, #564]	; (8009298 <cppLoop+0x1150>)
 8009064:	2200      	movs	r2, #0
 8009066:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009068:	2200      	movs	r2, #0
 800906a:	f04f 31ff 	mov.w	r1, #4294967295
 800906e:	4888      	ldr	r0, [pc, #544]	; (8009290 <cppLoop+0x1148>)
 8009070:	f7f8 fff6 	bl	8002060 <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009074:	4b88      	ldr	r3, [pc, #544]	; (8009298 <cppLoop+0x1150>)
 8009076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d15c      	bne.n	8009138 <cppLoop+0xff0>
			lcd_clear();
 800907e:	f7f8 f80f 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009082:	2100      	movs	r1, #0
 8009084:	2000      	movs	r0, #0
 8009086:	f7f8 f81b 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 800908a:	4884      	ldr	r0, [pc, #528]	; (800929c <cppLoop+0x1154>)
 800908c:	f7f8 f842 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009090:	2101      	movs	r1, #1
 8009092:	2000      	movs	r0, #0
 8009094:	f7f8 f814 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 8009098:	4b81      	ldr	r3, [pc, #516]	; (80092a0 <cppLoop+0x1158>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f7f7 fa6b 	bl	8000578 <__aeabi_f2d>
 80090a2:	4603      	mov	r3, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	461a      	mov	r2, r3
 80090a8:	4623      	mov	r3, r4
 80090aa:	487e      	ldr	r0, [pc, #504]	; (80092a4 <cppLoop+0x115c>)
 80090ac:	f7f8 f832 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 80090b0:	4878      	ldr	r0, [pc, #480]	; (8009294 <cppLoop+0x114c>)
 80090b2:	f7f8 feb5 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	bf0c      	ite	eq
 80090bc:	2301      	moveq	r3, #1
 80090be:	2300      	movne	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f002 804c 	beq.w	800b160 <cppLoop+0x3018>
				HAL_Delay(500);
 80090c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090cc:	f002 f99a 	bl	800b404 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 80090d0:	4b73      	ldr	r3, [pc, #460]	; (80092a0 <cppLoop+0x1158>)
 80090d2:	edd3 7a00 	vldr	s15, [r3]
 80090d6:	eeb0 0a67 	vmov.f32	s0, s15
 80090da:	4873      	ldr	r0, [pc, #460]	; (80092a8 <cppLoop+0x1160>)
 80090dc:	f7fa fd68 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 80090e0:	f04f 32ff 	mov.w	r2, #4294967295
 80090e4:	2101      	movs	r1, #1
 80090e6:	486a      	ldr	r0, [pc, #424]	; (8009290 <cppLoop+0x1148>)
 80090e8:	f7f8 ffba 	bl	8002060 <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 80090ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090f0:	f002 f988 	bl	800b404 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 80090f4:	2100      	movs	r1, #0
 80090f6:	486c      	ldr	r0, [pc, #432]	; (80092a8 <cppLoop+0x1160>)
 80090f8:	f7fb f838 	bl	800416c <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 80090fc:	486b      	ldr	r0, [pc, #428]	; (80092ac <cppLoop+0x1164>)
 80090fe:	f7fb feee 	bl	8004ede <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 8009102:	486a      	ldr	r0, [pc, #424]	; (80092ac <cppLoop+0x1164>)
 8009104:	f7fb ff13 	bl	8004f2e <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 8009108:	4867      	ldr	r0, [pc, #412]	; (80092a8 <cppLoop+0x1160>)
 800910a:	f7fb f87f 	bl	800420c <_ZN9LineTrace7runningEv>

				logger.stop();
 800910e:	4867      	ldr	r0, [pc, #412]	; (80092ac <cppLoop+0x1164>)
 8009110:	f7fb ff76 	bl	8005000 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009114:	4a66      	ldr	r2, [pc, #408]	; (80092b0 <cppLoop+0x1168>)
 8009116:	4967      	ldr	r1, [pc, #412]	; (80092b4 <cppLoop+0x116c>)
 8009118:	4864      	ldr	r0, [pc, #400]	; (80092ac <cppLoop+0x1164>)
 800911a:	f7fb fe0a 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800911e:	4a66      	ldr	r2, [pc, #408]	; (80092b8 <cppLoop+0x1170>)
 8009120:	4964      	ldr	r1, [pc, #400]	; (80092b4 <cppLoop+0x116c>)
 8009122:	4862      	ldr	r0, [pc, #392]	; (80092ac <cppLoop+0x1164>)
 8009124:	f7fb fe19 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 8009128:	f04f 32ff 	mov.w	r2, #4294967295
 800912c:	2100      	movs	r1, #0
 800912e:	4858      	ldr	r0, [pc, #352]	; (8009290 <cppLoop+0x1148>)
 8009130:	f7f8 ff96 	bl	8002060 <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 8009134:	f002 b814 	b.w	800b160 <cppLoop+0x3018>
			lcd_clear();
 8009138:	f7f7 ffb2 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800913c:	2100      	movs	r1, #0
 800913e:	2000      	movs	r0, #0
 8009140:	f7f7 ffbe 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 8009144:	485d      	ldr	r0, [pc, #372]	; (80092bc <cppLoop+0x1174>)
 8009146:	f7f7 ffe5 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800914a:	2101      	movs	r1, #1
 800914c:	2000      	movs	r0, #0
 800914e:	f7f7 ffb7 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 8009152:	4b53      	ldr	r3, [pc, #332]	; (80092a0 <cppLoop+0x1158>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f7f7 fa0e 	bl	8000578 <__aeabi_f2d>
 800915c:	4603      	mov	r3, r0
 800915e:	460c      	mov	r4, r1
 8009160:	461a      	mov	r2, r3
 8009162:	4623      	mov	r3, r4
 8009164:	4856      	ldr	r0, [pc, #344]	; (80092c0 <cppLoop+0x1178>)
 8009166:	f7f7 ffd5 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 800916a:	484a      	ldr	r0, [pc, #296]	; (8009294 <cppLoop+0x114c>)
 800916c:	f7f8 fe58 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009170:	4603      	mov	r3, r0
 8009172:	2b10      	cmp	r3, #16
 8009174:	bf0c      	ite	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	2300      	movne	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d023      	beq.n	80091c8 <cppLoop+0x1080>
				led.LR(-1, 1);
 8009180:	2201      	movs	r2, #1
 8009182:	f04f 31ff 	mov.w	r1, #4294967295
 8009186:	4842      	ldr	r0, [pc, #264]	; (8009290 <cppLoop+0x1148>)
 8009188:	f7f8 ff6a 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 800918c:	2064      	movs	r0, #100	; 0x64
 800918e:	f002 f939 	bl	800b404 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 8009192:	4b43      	ldr	r3, [pc, #268]	; (80092a0 <cppLoop+0x1158>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9ee 	bl	8000578 <__aeabi_f2d>
 800919c:	a33a      	add	r3, pc, #232	; (adr r3, 8009288 <cppLoop+0x1140>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f88b 	bl	80002bc <__adddf3>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	4618      	mov	r0, r3
 80091ac:	4621      	mov	r1, r4
 80091ae:	f7f7 fd33 	bl	8000c18 <__aeabi_d2f>
 80091b2:	4602      	mov	r2, r0
 80091b4:	4b3a      	ldr	r3, [pc, #232]	; (80092a0 <cppLoop+0x1158>)
 80091b6:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80091b8:	2200      	movs	r2, #0
 80091ba:	f04f 31ff 	mov.w	r1, #4294967295
 80091be:	4834      	ldr	r0, [pc, #208]	; (8009290 <cppLoop+0x1148>)
 80091c0:	f7f8 ff4e 	bl	8002060 <_ZN3LED2LREaa>
		break;
 80091c4:	f001 bfcc 	b.w	800b160 <cppLoop+0x3018>
			else if(joy_stick.getValue() == JOY_L){
 80091c8:	4832      	ldr	r0, [pc, #200]	; (8009294 <cppLoop+0x114c>)
 80091ca:	f7f8 fe29 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	bf0c      	ite	eq
 80091d4:	2301      	moveq	r3, #1
 80091d6:	2300      	movne	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d023      	beq.n	8009226 <cppLoop+0x10de>
				led.LR(-1, 1);
 80091de:	2201      	movs	r2, #1
 80091e0:	f04f 31ff 	mov.w	r1, #4294967295
 80091e4:	482a      	ldr	r0, [pc, #168]	; (8009290 <cppLoop+0x1148>)
 80091e6:	f7f8 ff3b 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 80091ea:	2064      	movs	r0, #100	; 0x64
 80091ec:	f002 f90a 	bl	800b404 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 80091f0:	4b2b      	ldr	r3, [pc, #172]	; (80092a0 <cppLoop+0x1158>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 f9bf 	bl	8000578 <__aeabi_f2d>
 80091fa:	a323      	add	r3, pc, #140	; (adr r3, 8009288 <cppLoop+0x1140>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f7 f85a 	bl	80002b8 <__aeabi_dsub>
 8009204:	4603      	mov	r3, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4618      	mov	r0, r3
 800920a:	4621      	mov	r1, r4
 800920c:	f7f7 fd04 	bl	8000c18 <__aeabi_d2f>
 8009210:	4602      	mov	r2, r0
 8009212:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <cppLoop+0x1158>)
 8009214:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009216:	2200      	movs	r2, #0
 8009218:	f04f 31ff 	mov.w	r1, #4294967295
 800921c:	481c      	ldr	r0, [pc, #112]	; (8009290 <cppLoop+0x1148>)
 800921e:	f7f8 ff1f 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009222:	f001 bf9d 	b.w	800b160 <cppLoop+0x3018>
			else if(joy_stick.getValue() == JOY_C){
 8009226:	481b      	ldr	r0, [pc, #108]	; (8009294 <cppLoop+0x114c>)
 8009228:	f7f8 fdfa 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800922c:	4603      	mov	r3, r0
 800922e:	2b02      	cmp	r3, #2
 8009230:	bf0c      	ite	eq
 8009232:	2301      	moveq	r3, #1
 8009234:	2300      	movne	r3, #0
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	f001 8791 	beq.w	800b160 <cppLoop+0x3018>
				led.LR(-1, 1);
 800923e:	2201      	movs	r2, #1
 8009240:	f04f 31ff 	mov.w	r1, #4294967295
 8009244:	4812      	ldr	r0, [pc, #72]	; (8009290 <cppLoop+0x1148>)
 8009246:	f7f8 ff0b 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 800924a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800924e:	f002 f8d9 	bl	800b404 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL.TXT", 1, &adj_velocity, OVER_WRITE);
 8009252:	2300      	movs	r3, #0
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <cppLoop+0x1158>)
 8009258:	2201      	movs	r2, #1
 800925a:	491a      	ldr	r1, [pc, #104]	; (80092c4 <cppLoop+0x117c>)
 800925c:	481a      	ldr	r0, [pc, #104]	; (80092c8 <cppLoop+0x1180>)
 800925e:	f7f8 fa79 	bl	8001754 <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 8009262:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <cppLoop+0x1158>)
 8009264:	edd3 7a00 	vldr	s15, [r3]
 8009268:	eeb0 0a67 	vmov.f32	s0, s15
 800926c:	480e      	ldr	r0, [pc, #56]	; (80092a8 <cppLoop+0x1160>)
 800926e:	f7fa fc9f 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 8009272:	2200      	movs	r2, #0
 8009274:	f04f 31ff 	mov.w	r1, #4294967295
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <cppLoop+0x1148>)
 800927a:	f7f8 fef1 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800927e:	f001 bf6f 	b.w	800b160 <cppLoop+0x3018>
 8009282:	bf00      	nop
 8009284:	f3af 8000 	nop.w
 8009288:	9999999a 	.word	0x9999999a
 800928c:	3fb99999 	.word	0x3fb99999
 8009290:	20000578 	.word	0x20000578
 8009294:	2000056c 	.word	0x2000056c
 8009298:	2004759e 	.word	0x2004759e
 800929c:	0801a62c 	.word	0x0801a62c
 80092a0:	200475d4 	.word	0x200475d4
 80092a4:	0801a634 	.word	0x0801a634
 80092a8:	200209f4 	.word	0x200209f4
 80092ac:	2000059c 	.word	0x2000059c
 80092b0:	0801a640 	.word	0x0801a640
 80092b4:	0801a64c 	.word	0x0801a64c
 80092b8:	0801a658 	.word	0x0801a658
 80092bc:	0801a664 	.word	0x0801a664
 80092c0:	0801a668 	.word	0x0801a668
 80092c4:	0801a674 	.word	0x0801a674
 80092c8:	0801a5e8 	.word	0x0801a5e8

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 80092cc:	2159      	movs	r1, #89	; 0x59
 80092ce:	48be      	ldr	r0, [pc, #760]	; (80095c8 <cppLoop+0x1480>)
 80092d0:	f7f8 fe0a 	bl	8001ee8 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80092d4:	48bd      	ldr	r0, [pc, #756]	; (80095cc <cppLoop+0x1484>)
 80092d6:	f7f8 fda3 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b04      	cmp	r3, #4
 80092de:	bf0c      	ite	eq
 80092e0:	2301      	moveq	r3, #1
 80092e2:	2300      	movne	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d020      	beq.n	800932c <cppLoop+0x11e4>
			led.LR(-1, 1);
 80092ea:	2201      	movs	r2, #1
 80092ec:	f04f 31ff 	mov.w	r1, #4294967295
 80092f0:	48b5      	ldr	r0, [pc, #724]	; (80095c8 <cppLoop+0x1480>)
 80092f2:	f7f8 feb5 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092fa:	f002 f883 	bl	800b404 <HAL_Delay>

			selector_run++;
 80092fe:	4bb4      	ldr	r3, [pc, #720]	; (80095d0 <cppLoop+0x1488>)
 8009300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009304:	b29b      	uxth	r3, r3
 8009306:	3301      	adds	r3, #1
 8009308:	b29b      	uxth	r3, r3
 800930a:	b21a      	sxth	r2, r3
 800930c:	4bb0      	ldr	r3, [pc, #704]	; (80095d0 <cppLoop+0x1488>)
 800930e:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009310:	4baf      	ldr	r3, [pc, #700]	; (80095d0 <cppLoop+0x1488>)
 8009312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009316:	2b01      	cmp	r3, #1
 8009318:	dd02      	ble.n	8009320 <cppLoop+0x11d8>
 800931a:	4bad      	ldr	r3, [pc, #692]	; (80095d0 <cppLoop+0x1488>)
 800931c:	2200      	movs	r2, #0
 800931e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009320:	2200      	movs	r2, #0
 8009322:	f04f 31ff 	mov.w	r1, #4294967295
 8009326:	48a8      	ldr	r0, [pc, #672]	; (80095c8 <cppLoop+0x1480>)
 8009328:	f7f8 fe9a 	bl	8002060 <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800932c:	4ba8      	ldr	r3, [pc, #672]	; (80095d0 <cppLoop+0x1488>)
 800932e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d178      	bne.n	8009428 <cppLoop+0x12e0>
			lcd_clear();
 8009336:	f7f7 feb3 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800933a:	2100      	movs	r1, #0
 800933c:	2000      	movs	r0, #0
 800933e:	f7f7 febf 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 8009342:	4ba4      	ldr	r3, [pc, #656]	; (80095d4 <cppLoop+0x148c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f7 f916 	bl	8000578 <__aeabi_f2d>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	461a      	mov	r2, r3
 8009352:	4623      	mov	r3, r4
 8009354:	48a0      	ldr	r0, [pc, #640]	; (80095d8 <cppLoop+0x1490>)
 8009356:	f7f7 fedd 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800935a:	2101      	movs	r1, #1
 800935c:	2000      	movs	r0, #0
 800935e:	f7f7 feaf 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 8009362:	4b9e      	ldr	r3, [pc, #632]	; (80095dc <cppLoop+0x1494>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f7f7 f906 	bl	8000578 <__aeabi_f2d>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	461a      	mov	r2, r3
 8009372:	4623      	mov	r3, r4
 8009374:	489a      	ldr	r0, [pc, #616]	; (80095e0 <cppLoop+0x1498>)
 8009376:	f7f7 fecd 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 800937a:	4894      	ldr	r0, [pc, #592]	; (80095cc <cppLoop+0x1484>)
 800937c:	f7f8 fd50 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009380:	4603      	mov	r3, r0
 8009382:	2b02      	cmp	r3, #2
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2300      	movne	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	f001 86e9 	beq.w	800b164 <cppLoop+0x301c>
				HAL_Delay(500);
 8009392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009396:	f002 f835 	bl	800b404 <HAL_Delay>

				led.LR(1, -1);
 800939a:	f04f 32ff 	mov.w	r2, #4294967295
 800939e:	2101      	movs	r1, #1
 80093a0:	4889      	ldr	r0, [pc, #548]	; (80095c8 <cppLoop+0x1480>)
 80093a2:	f7f8 fe5d 	bl	8002060 <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 80093a6:	2101      	movs	r1, #1
 80093a8:	488e      	ldr	r0, [pc, #568]	; (80095e4 <cppLoop+0x149c>)
 80093aa:	f7fa fedf 	bl	800416c <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 80093ae:	4b8b      	ldr	r3, [pc, #556]	; (80095dc <cppLoop+0x1494>)
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	eeb0 0a67 	vmov.f32	s0, s15
 80093b8:	488a      	ldr	r0, [pc, #552]	; (80095e4 <cppLoop+0x149c>)
 80093ba:	f7fa fbf9 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 80093be:	4b85      	ldr	r3, [pc, #532]	; (80095d4 <cppLoop+0x148c>)
 80093c0:	edd3 7a00 	vldr	s15, [r3]
 80093c4:	eeb0 0a67 	vmov.f32	s0, s15
 80093c8:	4886      	ldr	r0, [pc, #536]	; (80095e4 <cppLoop+0x149c>)
 80093ca:	f7fa fc01 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 80093ce:	4b83      	ldr	r3, [pc, #524]	; (80095dc <cppLoop+0x1494>)
 80093d0:	edd3 7a00 	vldr	s15, [r3]
 80093d4:	eeb0 0a67 	vmov.f32	s0, s15
 80093d8:	4882      	ldr	r0, [pc, #520]	; (80095e4 <cppLoop+0x149c>)
 80093da:	f7fa fc09 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 80093de:	4881      	ldr	r0, [pc, #516]	; (80095e4 <cppLoop+0x149c>)
 80093e0:	f7fb f90c 	bl	80045fc <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 80093e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093e8:	f002 f80c 	bl	800b404 <HAL_Delay>

				logger.resetLogsTim1();
 80093ec:	487e      	ldr	r0, [pc, #504]	; (80095e8 <cppLoop+0x14a0>)
 80093ee:	f7fb fd76 	bl	8004ede <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 80093f2:	487d      	ldr	r0, [pc, #500]	; (80095e8 <cppLoop+0x14a0>)
 80093f4:	f7fb fd9b 	bl	8004f2e <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 80093f8:	487a      	ldr	r0, [pc, #488]	; (80095e4 <cppLoop+0x149c>)
 80093fa:	f7fa ff07 	bl	800420c <_ZN9LineTrace7runningEv>

				logger.stop();
 80093fe:	487a      	ldr	r0, [pc, #488]	; (80095e8 <cppLoop+0x14a0>)
 8009400:	f7fb fdfe 	bl	8005000 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009404:	4a79      	ldr	r2, [pc, #484]	; (80095ec <cppLoop+0x14a4>)
 8009406:	497a      	ldr	r1, [pc, #488]	; (80095f0 <cppLoop+0x14a8>)
 8009408:	4877      	ldr	r0, [pc, #476]	; (80095e8 <cppLoop+0x14a0>)
 800940a:	f7fb fc92 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800940e:	4a79      	ldr	r2, [pc, #484]	; (80095f4 <cppLoop+0x14ac>)
 8009410:	4977      	ldr	r1, [pc, #476]	; (80095f0 <cppLoop+0x14a8>)
 8009412:	4875      	ldr	r0, [pc, #468]	; (80095e8 <cppLoop+0x14a0>)
 8009414:	f7fb fca1 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	2100      	movs	r1, #0
 800941e:	486a      	ldr	r0, [pc, #424]	; (80095c8 <cppLoop+0x1480>)
 8009420:	f7f8 fe1e 	bl	8002060 <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 8009424:	f001 be9e 	b.w	800b164 <cppLoop+0x301c>
			lcd_clear();
 8009428:	f7f7 fe3a 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800942c:	2100      	movs	r1, #0
 800942e:	2000      	movs	r0, #0
 8009430:	f7f7 fe46 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8009434:	486b      	ldr	r0, [pc, #428]	; (80095e4 <cppLoop+0x149c>)
 8009436:	f7fa fc5b 	bl	8003cf0 <_ZN9LineTrace14getMaxVelocityEv>
 800943a:	ee10 3a10 	vmov	r3, s0
 800943e:	4618      	mov	r0, r3
 8009440:	f7f7 f89a 	bl	8000578 <__aeabi_f2d>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	461a      	mov	r2, r3
 800944a:	4623      	mov	r3, r4
 800944c:	4862      	ldr	r0, [pc, #392]	; (80095d8 <cppLoop+0x1490>)
 800944e:	f7f7 fe61 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009452:	2101      	movs	r1, #1
 8009454:	2000      	movs	r0, #0
 8009456:	f7f7 fe33 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800945a:	4862      	ldr	r0, [pc, #392]	; (80095e4 <cppLoop+0x149c>)
 800945c:	f7fa fc58 	bl	8003d10 <_ZN9LineTrace14getMinVelocityEv>
 8009460:	ee10 3a10 	vmov	r3, s0
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 f887 	bl	8000578 <__aeabi_f2d>
 800946a:	4603      	mov	r3, r0
 800946c:	460c      	mov	r4, r1
 800946e:	461a      	mov	r2, r3
 8009470:	4623      	mov	r3, r4
 8009472:	4861      	ldr	r0, [pc, #388]	; (80095f8 <cppLoop+0x14b0>)
 8009474:	f7f7 fe4e 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009478:	4854      	ldr	r0, [pc, #336]	; (80095cc <cppLoop+0x1484>)
 800947a:	f7f8 fcd1 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800947e:	4603      	mov	r3, r0
 8009480:	2b08      	cmp	r3, #8
 8009482:	bf0c      	ite	eq
 8009484:	2301      	moveq	r3, #1
 8009486:	2300      	movne	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d022      	beq.n	80094d4 <cppLoop+0x138c>
				led.LR(-1, 1);
 800948e:	2201      	movs	r2, #1
 8009490:	f04f 31ff 	mov.w	r1, #4294967295
 8009494:	484c      	ldr	r0, [pc, #304]	; (80095c8 <cppLoop+0x1480>)
 8009496:	f7f8 fde3 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 800949a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800949e:	f001 ffb1 	bl	800b404 <HAL_Delay>
				selector_vel++;
 80094a2:	4b56      	ldr	r3, [pc, #344]	; (80095fc <cppLoop+0x14b4>)
 80094a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	3301      	adds	r3, #1
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	b21a      	sxth	r2, r3
 80094b0:	4b52      	ldr	r3, [pc, #328]	; (80095fc <cppLoop+0x14b4>)
 80094b2:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 80094b4:	4b51      	ldr	r3, [pc, #324]	; (80095fc <cppLoop+0x14b4>)
 80094b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	dd02      	ble.n	80094c4 <cppLoop+0x137c>
 80094be:	4b4f      	ldr	r3, [pc, #316]	; (80095fc <cppLoop+0x14b4>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80094c4:	2200      	movs	r2, #0
 80094c6:	f04f 31ff 	mov.w	r1, #4294967295
 80094ca:	483f      	ldr	r0, [pc, #252]	; (80095c8 <cppLoop+0x1480>)
 80094cc:	f7f8 fdc8 	bl	8002060 <_ZN3LED2LREaa>
		break;
 80094d0:	f001 be48 	b.w	800b164 <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_R){
 80094d4:	483d      	ldr	r0, [pc, #244]	; (80095cc <cppLoop+0x1484>)
 80094d6:	f7f8 fca3 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b10      	cmp	r3, #16
 80094de:	bf0c      	ite	eq
 80094e0:	2301      	moveq	r3, #1
 80094e2:	2300      	movne	r3, #0
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d03c      	beq.n	8009564 <cppLoop+0x141c>
				led.LR(-1, 1);
 80094ea:	2201      	movs	r2, #1
 80094ec:	f04f 31ff 	mov.w	r1, #4294967295
 80094f0:	4835      	ldr	r0, [pc, #212]	; (80095c8 <cppLoop+0x1480>)
 80094f2:	f7f8 fdb5 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 80094f6:	2064      	movs	r0, #100	; 0x64
 80094f8:	f001 ff84 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 80094fc:	4b3f      	ldr	r3, [pc, #252]	; (80095fc <cppLoop+0x14b4>)
 80094fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d113      	bne.n	800952e <cppLoop+0x13e6>
					adj_max_velocity = adj_max_velocity + 0.1;
 8009506:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <cppLoop+0x148c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7f7 f834 	bl	8000578 <__aeabi_f2d>
 8009510:	a32b      	add	r3, pc, #172	; (adr r3, 80095c0 <cppLoop+0x1478>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f6 fed1 	bl	80002bc <__adddf3>
 800951a:	4603      	mov	r3, r0
 800951c:	460c      	mov	r4, r1
 800951e:	4618      	mov	r0, r3
 8009520:	4621      	mov	r1, r4
 8009522:	f7f7 fb79 	bl	8000c18 <__aeabi_d2f>
 8009526:	4602      	mov	r2, r0
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <cppLoop+0x148c>)
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	e012      	b.n	8009554 <cppLoop+0x140c>
					adj_min_velocity = adj_min_velocity + 0.1;
 800952e:	4b2b      	ldr	r3, [pc, #172]	; (80095dc <cppLoop+0x1494>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f7f7 f820 	bl	8000578 <__aeabi_f2d>
 8009538:	a321      	add	r3, pc, #132	; (adr r3, 80095c0 <cppLoop+0x1478>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 febd 	bl	80002bc <__adddf3>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	4618      	mov	r0, r3
 8009548:	4621      	mov	r1, r4
 800954a:	f7f7 fb65 	bl	8000c18 <__aeabi_d2f>
 800954e:	4602      	mov	r2, r0
 8009550:	4b22      	ldr	r3, [pc, #136]	; (80095dc <cppLoop+0x1494>)
 8009552:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009554:	2200      	movs	r2, #0
 8009556:	f04f 31ff 	mov.w	r1, #4294967295
 800955a:	481b      	ldr	r0, [pc, #108]	; (80095c8 <cppLoop+0x1480>)
 800955c:	f7f8 fd80 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009560:	f001 be00 	b.w	800b164 <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_L){
 8009564:	4819      	ldr	r0, [pc, #100]	; (80095cc <cppLoop+0x1484>)
 8009566:	f7f8 fc5b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800956a:	4603      	mov	r3, r0
 800956c:	2b01      	cmp	r3, #1
 800956e:	bf0c      	ite	eq
 8009570:	2301      	moveq	r3, #1
 8009572:	2300      	movne	r3, #0
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d05d      	beq.n	8009636 <cppLoop+0x14ee>
				led.LR(-1, 1);
 800957a:	2201      	movs	r2, #1
 800957c:	f04f 31ff 	mov.w	r1, #4294967295
 8009580:	4811      	ldr	r0, [pc, #68]	; (80095c8 <cppLoop+0x1480>)
 8009582:	f7f8 fd6d 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009586:	2064      	movs	r0, #100	; 0x64
 8009588:	f001 ff3c 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 800958c:	4b1b      	ldr	r3, [pc, #108]	; (80095fc <cppLoop+0x14b4>)
 800958e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d134      	bne.n	8009600 <cppLoop+0x14b8>
					adj_max_velocity = adj_max_velocity - 0.1;
 8009596:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <cppLoop+0x148c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f7f6 ffec 	bl	8000578 <__aeabi_f2d>
 80095a0:	a307      	add	r3, pc, #28	; (adr r3, 80095c0 <cppLoop+0x1478>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f6 fe87 	bl	80002b8 <__aeabi_dsub>
 80095aa:	4603      	mov	r3, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	4618      	mov	r0, r3
 80095b0:	4621      	mov	r1, r4
 80095b2:	f7f7 fb31 	bl	8000c18 <__aeabi_d2f>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <cppLoop+0x148c>)
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e033      	b.n	8009626 <cppLoop+0x14de>
 80095be:	bf00      	nop
 80095c0:	9999999a 	.word	0x9999999a
 80095c4:	3fb99999 	.word	0x3fb99999
 80095c8:	20000578 	.word	0x20000578
 80095cc:	2000056c 	.word	0x2000056c
 80095d0:	2004759e 	.word	0x2004759e
 80095d4:	200475dc 	.word	0x200475dc
 80095d8:	0801a680 	.word	0x0801a680
 80095dc:	200475e4 	.word	0x200475e4
 80095e0:	0801a634 	.word	0x0801a634
 80095e4:	200209f4 	.word	0x200209f4
 80095e8:	2000059c 	.word	0x2000059c
 80095ec:	0801a640 	.word	0x0801a640
 80095f0:	0801a64c 	.word	0x0801a64c
 80095f4:	0801a658 	.word	0x0801a658
 80095f8:	0801a668 	.word	0x0801a668
 80095fc:	200475a2 	.word	0x200475a2
					adj_min_velocity = adj_min_velocity - 0.1;
 8009600:	4bb5      	ldr	r3, [pc, #724]	; (80098d8 <cppLoop+0x1790>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	f7f6 ffb7 	bl	8000578 <__aeabi_f2d>
 800960a:	a3b1      	add	r3, pc, #708	; (adr r3, 80098d0 <cppLoop+0x1788>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f7f6 fe52 	bl	80002b8 <__aeabi_dsub>
 8009614:	4603      	mov	r3, r0
 8009616:	460c      	mov	r4, r1
 8009618:	4618      	mov	r0, r3
 800961a:	4621      	mov	r1, r4
 800961c:	f7f7 fafc 	bl	8000c18 <__aeabi_d2f>
 8009620:	4602      	mov	r2, r0
 8009622:	4bad      	ldr	r3, [pc, #692]	; (80098d8 <cppLoop+0x1790>)
 8009624:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009626:	2200      	movs	r2, #0
 8009628:	f04f 31ff 	mov.w	r1, #4294967295
 800962c:	48ab      	ldr	r0, [pc, #684]	; (80098dc <cppLoop+0x1794>)
 800962e:	f7f8 fd17 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009632:	f001 bd97 	b.w	800b164 <cppLoop+0x301c>
			else if(joy_stick.getValue() == JOY_C){
 8009636:	48aa      	ldr	r0, [pc, #680]	; (80098e0 <cppLoop+0x1798>)
 8009638:	f7f8 fbf2 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800963c:	4603      	mov	r3, r0
 800963e:	2b02      	cmp	r3, #2
 8009640:	bf0c      	ite	eq
 8009642:	2301      	moveq	r3, #1
 8009644:	2300      	movne	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	f001 858b 	beq.w	800b164 <cppLoop+0x301c>
				led.LR(-1, 1);
 800964e:	2201      	movs	r2, #1
 8009650:	f04f 31ff 	mov.w	r1, #4294967295
 8009654:	48a1      	ldr	r0, [pc, #644]	; (80098dc <cppLoop+0x1794>)
 8009656:	f7f8 fd03 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 800965a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800965e:	f001 fed1 	bl	800b404 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8009662:	2300      	movs	r3, #0
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	4b9f      	ldr	r3, [pc, #636]	; (80098e4 <cppLoop+0x179c>)
 8009668:	2201      	movs	r2, #1
 800966a:	499f      	ldr	r1, [pc, #636]	; (80098e8 <cppLoop+0x17a0>)
 800966c:	489f      	ldr	r0, [pc, #636]	; (80098ec <cppLoop+0x17a4>)
 800966e:	f7f8 f871 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8009672:	2300      	movs	r3, #0
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4b98      	ldr	r3, [pc, #608]	; (80098d8 <cppLoop+0x1790>)
 8009678:	2201      	movs	r2, #1
 800967a:	499d      	ldr	r1, [pc, #628]	; (80098f0 <cppLoop+0x17a8>)
 800967c:	489b      	ldr	r0, [pc, #620]	; (80098ec <cppLoop+0x17a4>)
 800967e:	f7f8 f869 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 8009682:	4b98      	ldr	r3, [pc, #608]	; (80098e4 <cppLoop+0x179c>)
 8009684:	edd3 7a00 	vldr	s15, [r3]
 8009688:	eeb0 0a67 	vmov.f32	s0, s15
 800968c:	4899      	ldr	r0, [pc, #612]	; (80098f4 <cppLoop+0x17ac>)
 800968e:	f7fa fa9f 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8009692:	4b91      	ldr	r3, [pc, #580]	; (80098d8 <cppLoop+0x1790>)
 8009694:	edd3 7a00 	vldr	s15, [r3]
 8009698:	eeb0 0a67 	vmov.f32	s0, s15
 800969c:	4895      	ldr	r0, [pc, #596]	; (80098f4 <cppLoop+0x17ac>)
 800969e:	f7fa faa7 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 80096a2:	2200      	movs	r2, #0
 80096a4:	f04f 31ff 	mov.w	r1, #4294967295
 80096a8:	488c      	ldr	r0, [pc, #560]	; (80098dc <cppLoop+0x1794>)
 80096aa:	f7f8 fcd9 	bl	8002060 <_ZN3LED2LREaa>
		break;
 80096ae:	f001 bd59 	b.w	800b164 <cppLoop+0x301c>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 80096b2:	214d      	movs	r1, #77	; 0x4d
 80096b4:	4889      	ldr	r0, [pc, #548]	; (80098dc <cppLoop+0x1794>)
 80096b6:	f7f8 fc17 	bl	8001ee8 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80096ba:	4889      	ldr	r0, [pc, #548]	; (80098e0 <cppLoop+0x1798>)
 80096bc:	f7f8 fbb0 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	bf0c      	ite	eq
 80096c6:	2301      	moveq	r3, #1
 80096c8:	2300      	movne	r3, #0
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d020      	beq.n	8009712 <cppLoop+0x15ca>
			led.LR(-1, 1);
 80096d0:	2201      	movs	r2, #1
 80096d2:	f04f 31ff 	mov.w	r1, #4294967295
 80096d6:	4881      	ldr	r0, [pc, #516]	; (80098dc <cppLoop+0x1794>)
 80096d8:	f7f8 fcc2 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80096dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80096e0:	f001 fe90 	bl	800b404 <HAL_Delay>

			selector_run++;
 80096e4:	4b84      	ldr	r3, [pc, #528]	; (80098f8 <cppLoop+0x17b0>)
 80096e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3301      	adds	r3, #1
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	b21a      	sxth	r2, r3
 80096f2:	4b81      	ldr	r3, [pc, #516]	; (80098f8 <cppLoop+0x17b0>)
 80096f4:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80096f6:	4b80      	ldr	r3, [pc, #512]	; (80098f8 <cppLoop+0x17b0>)
 80096f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	dd02      	ble.n	8009706 <cppLoop+0x15be>
 8009700:	4b7d      	ldr	r3, [pc, #500]	; (80098f8 <cppLoop+0x17b0>)
 8009702:	2200      	movs	r2, #0
 8009704:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009706:	2200      	movs	r2, #0
 8009708:	f04f 31ff 	mov.w	r1, #4294967295
 800970c:	4873      	ldr	r0, [pc, #460]	; (80098dc <cppLoop+0x1794>)
 800970e:	f7f8 fca7 	bl	8002060 <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009712:	4b79      	ldr	r3, [pc, #484]	; (80098f8 <cppLoop+0x17b0>)
 8009714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 8081 	bne.w	8009820 <cppLoop+0x16d8>
			lcd_clear();
 800971e:	f7f7 fcbf 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009722:	2100      	movs	r1, #0
 8009724:	2000      	movs	r0, #0
 8009726:	f7f7 fccb 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 800972a:	4b74      	ldr	r3, [pc, #464]	; (80098fc <cppLoop+0x17b4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f7f6 ff22 	bl	8000578 <__aeabi_f2d>
 8009734:	4603      	mov	r3, r0
 8009736:	460c      	mov	r4, r1
 8009738:	461a      	mov	r2, r3
 800973a:	4623      	mov	r3, r4
 800973c:	4870      	ldr	r0, [pc, #448]	; (8009900 <cppLoop+0x17b8>)
 800973e:	f7f7 fce9 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009742:	2101      	movs	r1, #1
 8009744:	2000      	movs	r0, #0
 8009746:	f7f7 fcbb 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 800974a:	4b6e      	ldr	r3, [pc, #440]	; (8009904 <cppLoop+0x17bc>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f7f6 ff12 	bl	8000578 <__aeabi_f2d>
 8009754:	4603      	mov	r3, r0
 8009756:	460c      	mov	r4, r1
 8009758:	461a      	mov	r2, r3
 800975a:	4623      	mov	r3, r4
 800975c:	486a      	ldr	r0, [pc, #424]	; (8009908 <cppLoop+0x17c0>)
 800975e:	f7f7 fcd9 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009762:	485f      	ldr	r0, [pc, #380]	; (80098e0 <cppLoop+0x1798>)
 8009764:	f7f8 fb5c 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009768:	4603      	mov	r3, r0
 800976a:	2b02      	cmp	r3, #2
 800976c:	bf0c      	ite	eq
 800976e:	2301      	moveq	r3, #1
 8009770:	2300      	movne	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	f001 84f7 	beq.w	800b168 <cppLoop+0x3020>
				HAL_Delay(500);
 800977a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800977e:	f001 fe41 	bl	800b404 <HAL_Delay>

				led.LR(1, -1);
 8009782:	f04f 32ff 	mov.w	r2, #4294967295
 8009786:	2101      	movs	r1, #1
 8009788:	4854      	ldr	r0, [pc, #336]	; (80098dc <cppLoop+0x1794>)
 800978a:	f7f8 fc69 	bl	8002060 <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800978e:	4b5f      	ldr	r3, [pc, #380]	; (800990c <cppLoop+0x17c4>)
 8009790:	edd3 7a00 	vldr	s15, [r3]
 8009794:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <cppLoop+0x17c8>)
 8009796:	ed93 7a00 	vldr	s14, [r3]
 800979a:	4b5e      	ldr	r3, [pc, #376]	; (8009914 <cppLoop+0x17cc>)
 800979c:	edd3 6a00 	vldr	s13, [r3]
 80097a0:	eeb0 1a66 	vmov.f32	s2, s13
 80097a4:	eef0 0a47 	vmov.f32	s1, s14
 80097a8:	eeb0 0a67 	vmov.f32	s0, s15
 80097ac:	4851      	ldr	r0, [pc, #324]	; (80098f4 <cppLoop+0x17ac>)
 80097ae:	f7fa f973 	bl	8003a98 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 80097b2:	2102      	movs	r1, #2
 80097b4:	484f      	ldr	r0, [pc, #316]	; (80098f4 <cppLoop+0x17ac>)
 80097b6:	f7fa fcd9 	bl	800416c <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 80097ba:	4b52      	ldr	r3, [pc, #328]	; (8009904 <cppLoop+0x17bc>)
 80097bc:	edd3 7a00 	vldr	s15, [r3]
 80097c0:	eeb0 0a67 	vmov.f32	s0, s15
 80097c4:	484b      	ldr	r0, [pc, #300]	; (80098f4 <cppLoop+0x17ac>)
 80097c6:	f7fa f9f3 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 80097ca:	4b4c      	ldr	r3, [pc, #304]	; (80098fc <cppLoop+0x17b4>)
 80097cc:	edd3 7a00 	vldr	s15, [r3]
 80097d0:	eeb0 0a67 	vmov.f32	s0, s15
 80097d4:	4847      	ldr	r0, [pc, #284]	; (80098f4 <cppLoop+0x17ac>)
 80097d6:	f7fa fa1b 	bl	8003c10 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 80097da:	4b4a      	ldr	r3, [pc, #296]	; (8009904 <cppLoop+0x17bc>)
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	eeb0 0a67 	vmov.f32	s0, s15
 80097e4:	4843      	ldr	r0, [pc, #268]	; (80098f4 <cppLoop+0x17ac>)
 80097e6:	f7fa fa23 	bl	8003c30 <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 80097ea:	4842      	ldr	r0, [pc, #264]	; (80098f4 <cppLoop+0x17ac>)
 80097ec:	f7fa ff06 	bl	80045fc <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 80097f0:	4840      	ldr	r0, [pc, #256]	; (80098f4 <cppLoop+0x17ac>)
 80097f2:	f7fa fd0b 	bl	800420c <_ZN9LineTrace7runningEv>

				logger.stop();
 80097f6:	4848      	ldr	r0, [pc, #288]	; (8009918 <cppLoop+0x17d0>)
 80097f8:	f7fb fc02 	bl	8005000 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80097fc:	4a47      	ldr	r2, [pc, #284]	; (800991c <cppLoop+0x17d4>)
 80097fe:	4948      	ldr	r1, [pc, #288]	; (8009920 <cppLoop+0x17d8>)
 8009800:	4845      	ldr	r0, [pc, #276]	; (8009918 <cppLoop+0x17d0>)
 8009802:	f7fb fa96 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009806:	4a47      	ldr	r2, [pc, #284]	; (8009924 <cppLoop+0x17dc>)
 8009808:	4945      	ldr	r1, [pc, #276]	; (8009920 <cppLoop+0x17d8>)
 800980a:	4843      	ldr	r0, [pc, #268]	; (8009918 <cppLoop+0x17d0>)
 800980c:	f7fb faa5 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	2100      	movs	r1, #0
 8009816:	4831      	ldr	r0, [pc, #196]	; (80098dc <cppLoop+0x1794>)
 8009818:	f7f8 fc22 	bl	8002060 <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800981c:	f001 bca4 	b.w	800b168 <cppLoop+0x3020>
			lcd_clear();
 8009820:	f7f7 fc3e 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009824:	2100      	movs	r1, #0
 8009826:	2000      	movs	r0, #0
 8009828:	f7f7 fc4a 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800982c:	4831      	ldr	r0, [pc, #196]	; (80098f4 <cppLoop+0x17ac>)
 800982e:	f7fa fa7f 	bl	8003d30 <_ZN9LineTrace15getMaxVelocity2Ev>
 8009832:	ee10 3a10 	vmov	r3, s0
 8009836:	4618      	mov	r0, r3
 8009838:	f7f6 fe9e 	bl	8000578 <__aeabi_f2d>
 800983c:	4603      	mov	r3, r0
 800983e:	460c      	mov	r4, r1
 8009840:	461a      	mov	r2, r3
 8009842:	4623      	mov	r3, r4
 8009844:	482e      	ldr	r0, [pc, #184]	; (8009900 <cppLoop+0x17b8>)
 8009846:	f7f7 fc65 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800984a:	2101      	movs	r1, #1
 800984c:	2000      	movs	r0, #0
 800984e:	f7f7 fc37 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8009852:	4828      	ldr	r0, [pc, #160]	; (80098f4 <cppLoop+0x17ac>)
 8009854:	f7fa fa7c 	bl	8003d50 <_ZN9LineTrace15getMinVelocity2Ev>
 8009858:	ee10 3a10 	vmov	r3, s0
 800985c:	4618      	mov	r0, r3
 800985e:	f7f6 fe8b 	bl	8000578 <__aeabi_f2d>
 8009862:	4603      	mov	r3, r0
 8009864:	460c      	mov	r4, r1
 8009866:	461a      	mov	r2, r3
 8009868:	4623      	mov	r3, r4
 800986a:	482f      	ldr	r0, [pc, #188]	; (8009928 <cppLoop+0x17e0>)
 800986c:	f7f7 fc52 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009870:	481b      	ldr	r0, [pc, #108]	; (80098e0 <cppLoop+0x1798>)
 8009872:	f7f8 fad5 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009876:	4603      	mov	r3, r0
 8009878:	2b08      	cmp	r3, #8
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d054      	beq.n	8009930 <cppLoop+0x17e8>
				led.LR(-1, 1);
 8009886:	2201      	movs	r2, #1
 8009888:	f04f 31ff 	mov.w	r1, #4294967295
 800988c:	4813      	ldr	r0, [pc, #76]	; (80098dc <cppLoop+0x1794>)
 800988e:	f7f8 fbe7 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009896:	f001 fdb5 	bl	800b404 <HAL_Delay>
				selector_vel++;
 800989a:	4b24      	ldr	r3, [pc, #144]	; (800992c <cppLoop+0x17e4>)
 800989c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3301      	adds	r3, #1
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	b21a      	sxth	r2, r3
 80098a8:	4b20      	ldr	r3, [pc, #128]	; (800992c <cppLoop+0x17e4>)
 80098aa:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 80098ac:	4b1f      	ldr	r3, [pc, #124]	; (800992c <cppLoop+0x17e4>)
 80098ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	dd02      	ble.n	80098bc <cppLoop+0x1774>
 80098b6:	4b1d      	ldr	r3, [pc, #116]	; (800992c <cppLoop+0x17e4>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80098bc:	2200      	movs	r2, #0
 80098be:	f04f 31ff 	mov.w	r1, #4294967295
 80098c2:	4806      	ldr	r0, [pc, #24]	; (80098dc <cppLoop+0x1794>)
 80098c4:	f7f8 fbcc 	bl	8002060 <_ZN3LED2LREaa>
		break;
 80098c8:	f001 bc4e 	b.w	800b168 <cppLoop+0x3020>
 80098cc:	f3af 8000 	nop.w
 80098d0:	9999999a 	.word	0x9999999a
 80098d4:	3fb99999 	.word	0x3fb99999
 80098d8:	200475e4 	.word	0x200475e4
 80098dc:	20000578 	.word	0x20000578
 80098e0:	2000056c 	.word	0x2000056c
 80098e4:	200475dc 	.word	0x200475dc
 80098e8:	0801a68c 	.word	0x0801a68c
 80098ec:	0801a5e8 	.word	0x0801a5e8
 80098f0:	0801a698 	.word	0x0801a698
 80098f4:	200209f4 	.word	0x200209f4
 80098f8:	2004759e 	.word	0x2004759e
 80098fc:	200475ec 	.word	0x200475ec
 8009900:	0801a6a4 	.word	0x0801a6a4
 8009904:	200475f4 	.word	0x200475f4
 8009908:	0801a634 	.word	0x0801a634
 800990c:	200475a4 	.word	0x200475a4
 8009910:	200475ac 	.word	0x200475ac
 8009914:	200475b4 	.word	0x200475b4
 8009918:	2000059c 	.word	0x2000059c
 800991c:	0801a640 	.word	0x0801a640
 8009920:	0801a64c 	.word	0x0801a64c
 8009924:	0801a658 	.word	0x0801a658
 8009928:	0801a668 	.word	0x0801a668
 800992c:	200475a2 	.word	0x200475a2
			else if(joy_stick.getValue() == JOY_R){
 8009930:	4869      	ldr	r0, [pc, #420]	; (8009ad8 <cppLoop+0x1990>)
 8009932:	f7f8 fa75 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009936:	4603      	mov	r3, r0
 8009938:	2b10      	cmp	r3, #16
 800993a:	bf0c      	ite	eq
 800993c:	2301      	moveq	r3, #1
 800993e:	2300      	movne	r3, #0
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d03c      	beq.n	80099c0 <cppLoop+0x1878>
				led.LR(-1, 1);
 8009946:	2201      	movs	r2, #1
 8009948:	f04f 31ff 	mov.w	r1, #4294967295
 800994c:	4863      	ldr	r0, [pc, #396]	; (8009adc <cppLoop+0x1994>)
 800994e:	f7f8 fb87 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009952:	2064      	movs	r0, #100	; 0x64
 8009954:	f001 fd56 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 8009958:	4b61      	ldr	r3, [pc, #388]	; (8009ae0 <cppLoop+0x1998>)
 800995a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d113      	bne.n	800998a <cppLoop+0x1842>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8009962:	4b60      	ldr	r3, [pc, #384]	; (8009ae4 <cppLoop+0x199c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f7f6 fe06 	bl	8000578 <__aeabi_f2d>
 800996c:	a358      	add	r3, pc, #352	; (adr r3, 8009ad0 <cppLoop+0x1988>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fca3 	bl	80002bc <__adddf3>
 8009976:	4603      	mov	r3, r0
 8009978:	460c      	mov	r4, r1
 800997a:	4618      	mov	r0, r3
 800997c:	4621      	mov	r1, r4
 800997e:	f7f7 f94b 	bl	8000c18 <__aeabi_d2f>
 8009982:	4602      	mov	r2, r0
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <cppLoop+0x199c>)
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e012      	b.n	80099b0 <cppLoop+0x1868>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800998a:	4b57      	ldr	r3, [pc, #348]	; (8009ae8 <cppLoop+0x19a0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7f6 fdf2 	bl	8000578 <__aeabi_f2d>
 8009994:	a34e      	add	r3, pc, #312	; (adr r3, 8009ad0 <cppLoop+0x1988>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc8f 	bl	80002bc <__adddf3>
 800999e:	4603      	mov	r3, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	4618      	mov	r0, r3
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7f7 f937 	bl	8000c18 <__aeabi_d2f>
 80099aa:	4602      	mov	r2, r0
 80099ac:	4b4e      	ldr	r3, [pc, #312]	; (8009ae8 <cppLoop+0x19a0>)
 80099ae:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80099b0:	2200      	movs	r2, #0
 80099b2:	f04f 31ff 	mov.w	r1, #4294967295
 80099b6:	4849      	ldr	r0, [pc, #292]	; (8009adc <cppLoop+0x1994>)
 80099b8:	f7f8 fb52 	bl	8002060 <_ZN3LED2LREaa>
		break;
 80099bc:	f001 bbd4 	b.w	800b168 <cppLoop+0x3020>
			else if(joy_stick.getValue() == JOY_L){
 80099c0:	4845      	ldr	r0, [pc, #276]	; (8009ad8 <cppLoop+0x1990>)
 80099c2:	f7f8 fa2d 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	bf0c      	ite	eq
 80099cc:	2301      	moveq	r3, #1
 80099ce:	2300      	movne	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d03c      	beq.n	8009a50 <cppLoop+0x1908>
				led.LR(-1, 1);
 80099d6:	2201      	movs	r2, #1
 80099d8:	f04f 31ff 	mov.w	r1, #4294967295
 80099dc:	483f      	ldr	r0, [pc, #252]	; (8009adc <cppLoop+0x1994>)
 80099de:	f7f8 fb3f 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 80099e2:	2064      	movs	r0, #100	; 0x64
 80099e4:	f001 fd0e 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 80099e8:	4b3d      	ldr	r3, [pc, #244]	; (8009ae0 <cppLoop+0x1998>)
 80099ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d113      	bne.n	8009a1a <cppLoop+0x18d2>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80099f2:	4b3c      	ldr	r3, [pc, #240]	; (8009ae4 <cppLoop+0x199c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f6 fdbe 	bl	8000578 <__aeabi_f2d>
 80099fc:	a334      	add	r3, pc, #208	; (adr r3, 8009ad0 <cppLoop+0x1988>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	f7f6 fc59 	bl	80002b8 <__aeabi_dsub>
 8009a06:	4603      	mov	r3, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f7f7 f903 	bl	8000c18 <__aeabi_d2f>
 8009a12:	4602      	mov	r2, r0
 8009a14:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <cppLoop+0x199c>)
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	e012      	b.n	8009a40 <cppLoop+0x18f8>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8009a1a:	4b33      	ldr	r3, [pc, #204]	; (8009ae8 <cppLoop+0x19a0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fdaa 	bl	8000578 <__aeabi_f2d>
 8009a24:	a32a      	add	r3, pc, #168	; (adr r3, 8009ad0 <cppLoop+0x1988>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 fc45 	bl	80002b8 <__aeabi_dsub>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	460c      	mov	r4, r1
 8009a32:	4618      	mov	r0, r3
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7f7 f8ef 	bl	8000c18 <__aeabi_d2f>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <cppLoop+0x19a0>)
 8009a3e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009a40:	2200      	movs	r2, #0
 8009a42:	f04f 31ff 	mov.w	r1, #4294967295
 8009a46:	4825      	ldr	r0, [pc, #148]	; (8009adc <cppLoop+0x1994>)
 8009a48:	f7f8 fb0a 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009a4c:	f001 bb8c 	b.w	800b168 <cppLoop+0x3020>
			else if(joy_stick.getValue() == JOY_C){
 8009a50:	4821      	ldr	r0, [pc, #132]	; (8009ad8 <cppLoop+0x1990>)
 8009a52:	f7f8 f9e5 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	bf0c      	ite	eq
 8009a5c:	2301      	moveq	r3, #1
 8009a5e:	2300      	movne	r3, #0
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f001 8380 	beq.w	800b168 <cppLoop+0x3020>
				led.LR(-1, 1);
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a6e:	481b      	ldr	r0, [pc, #108]	; (8009adc <cppLoop+0x1994>)
 8009a70:	f7f8 faf6 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009a74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a78:	f001 fcc4 	bl	800b404 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4b18      	ldr	r3, [pc, #96]	; (8009ae4 <cppLoop+0x199c>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	4919      	ldr	r1, [pc, #100]	; (8009aec <cppLoop+0x19a4>)
 8009a86:	481a      	ldr	r0, [pc, #104]	; (8009af0 <cppLoop+0x19a8>)
 8009a88:	f7f7 fe64 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL3.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <cppLoop+0x19a0>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	4917      	ldr	r1, [pc, #92]	; (8009af4 <cppLoop+0x19ac>)
 8009a96:	4816      	ldr	r0, [pc, #88]	; (8009af0 <cppLoop+0x19a8>)
 8009a98:	f7f7 fe5c 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009a9c:	4b11      	ldr	r3, [pc, #68]	; (8009ae4 <cppLoop+0x199c>)
 8009a9e:	edd3 7a00 	vldr	s15, [r3]
 8009aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa6:	4814      	ldr	r0, [pc, #80]	; (8009af8 <cppLoop+0x19b0>)
 8009aa8:	f7fa f8b2 	bl	8003c10 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009aac:	4b0e      	ldr	r3, [pc, #56]	; (8009ae8 <cppLoop+0x19a0>)
 8009aae:	edd3 7a00 	vldr	s15, [r3]
 8009ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ab6:	4810      	ldr	r0, [pc, #64]	; (8009af8 <cppLoop+0x19b0>)
 8009ab8:	f7fa f8ba 	bl	8003c30 <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac2:	4806      	ldr	r0, [pc, #24]	; (8009adc <cppLoop+0x1994>)
 8009ac4:	f7f8 facc 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009ac8:	f001 bb4e 	b.w	800b168 <cppLoop+0x3020>
 8009acc:	f3af 8000 	nop.w
 8009ad0:	9999999a 	.word	0x9999999a
 8009ad4:	3fb99999 	.word	0x3fb99999
 8009ad8:	2000056c 	.word	0x2000056c
 8009adc:	20000578 	.word	0x20000578
 8009ae0:	200475a2 	.word	0x200475a2
 8009ae4:	200475ec 	.word	0x200475ec
 8009ae8:	200475f4 	.word	0x200475f4
 8009aec:	0801a6b0 	.word	0x0801a6b0
 8009af0:	0801a5e8 	.word	0x0801a5e8
 8009af4:	0801a6bc 	.word	0x0801a6bc
 8009af8:	200209f4 	.word	0x200209f4

	case 5:
		led.fullColor('B');
 8009afc:	2142      	movs	r1, #66	; 0x42
 8009afe:	48ac      	ldr	r0, [pc, #688]	; (8009db0 <cppLoop+0x1c68>)
 8009b00:	f7f8 f9f2 	bl	8001ee8 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009b04:	48ab      	ldr	r0, [pc, #684]	; (8009db4 <cppLoop+0x1c6c>)
 8009b06:	f7f8 f98b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	bf0c      	ite	eq
 8009b10:	2301      	moveq	r3, #1
 8009b12:	2300      	movne	r3, #0
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d020      	beq.n	8009b5c <cppLoop+0x1a14>
			led.LR(-1, 1);
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b20:	48a3      	ldr	r0, [pc, #652]	; (8009db0 <cppLoop+0x1c68>)
 8009b22:	f7f8 fa9d 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009b26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b2a:	f001 fc6b 	bl	800b404 <HAL_Delay>

			selector_run++;
 8009b2e:	4ba2      	ldr	r3, [pc, #648]	; (8009db8 <cppLoop+0x1c70>)
 8009b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3301      	adds	r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	b21a      	sxth	r2, r3
 8009b3c:	4b9e      	ldr	r3, [pc, #632]	; (8009db8 <cppLoop+0x1c70>)
 8009b3e:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009b40:	4b9d      	ldr	r3, [pc, #628]	; (8009db8 <cppLoop+0x1c70>)
 8009b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	dd02      	ble.n	8009b50 <cppLoop+0x1a08>
 8009b4a:	4b9b      	ldr	r3, [pc, #620]	; (8009db8 <cppLoop+0x1c70>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	f04f 31ff 	mov.w	r1, #4294967295
 8009b56:	4896      	ldr	r0, [pc, #600]	; (8009db0 <cppLoop+0x1c68>)
 8009b58:	f7f8 fa82 	bl	8002060 <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009b5c:	4b96      	ldr	r3, [pc, #600]	; (8009db8 <cppLoop+0x1c70>)
 8009b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 8081 	bne.w	8009c6a <cppLoop+0x1b22>
			lcd_clear();
 8009b68:	f7f7 fa9a 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2000      	movs	r0, #0
 8009b70:	f7f7 faa6 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", adj_max_velocity3);
 8009b74:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <cppLoop+0x1c74>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f6 fcfd 	bl	8000578 <__aeabi_f2d>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	461a      	mov	r2, r3
 8009b84:	4623      	mov	r3, r4
 8009b86:	488e      	ldr	r0, [pc, #568]	; (8009dc0 <cppLoop+0x1c78>)
 8009b88:	f7f7 fac4 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7f7 fa96 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity3);
 8009b94:	4b8b      	ldr	r3, [pc, #556]	; (8009dc4 <cppLoop+0x1c7c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f6 fced 	bl	8000578 <__aeabi_f2d>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	4888      	ldr	r0, [pc, #544]	; (8009dc8 <cppLoop+0x1c80>)
 8009ba8:	f7f7 fab4 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009bac:	4881      	ldr	r0, [pc, #516]	; (8009db4 <cppLoop+0x1c6c>)
 8009bae:	f7f8 f937 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2301      	moveq	r3, #1
 8009bba:	2300      	movne	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f001 82d4 	beq.w	800b16c <cppLoop+0x3024>
				HAL_Delay(500);
 8009bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bc8:	f001 fc1c 	bl	800b404 <HAL_Delay>

				led.LR(1, -1);
 8009bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	4877      	ldr	r0, [pc, #476]	; (8009db0 <cppLoop+0x1c68>)
 8009bd4:	f7f8 fa44 	bl	8002060 <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009bd8:	4b7c      	ldr	r3, [pc, #496]	; (8009dcc <cppLoop+0x1c84>)
 8009bda:	edd3 7a00 	vldr	s15, [r3]
 8009bde:	4b7c      	ldr	r3, [pc, #496]	; (8009dd0 <cppLoop+0x1c88>)
 8009be0:	ed93 7a00 	vldr	s14, [r3]
 8009be4:	4b7b      	ldr	r3, [pc, #492]	; (8009dd4 <cppLoop+0x1c8c>)
 8009be6:	edd3 6a00 	vldr	s13, [r3]
 8009bea:	eeb0 1a66 	vmov.f32	s2, s13
 8009bee:	eef0 0a47 	vmov.f32	s1, s14
 8009bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf6:	4878      	ldr	r0, [pc, #480]	; (8009dd8 <cppLoop+0x1c90>)
 8009bf8:	f7f9 ff4e 	bl	8003a98 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FOURTH_RUNNING);
 8009bfc:	2103      	movs	r1, #3
 8009bfe:	4876      	ldr	r0, [pc, #472]	; (8009dd8 <cppLoop+0x1c90>)
 8009c00:	f7fa fab4 	bl	800416c <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity3);
 8009c04:	4b6f      	ldr	r3, [pc, #444]	; (8009dc4 <cppLoop+0x1c7c>)
 8009c06:	edd3 7a00 	vldr	s15, [r3]
 8009c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c0e:	4872      	ldr	r0, [pc, #456]	; (8009dd8 <cppLoop+0x1c90>)
 8009c10:	f7f9 ffce 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009c14:	4b69      	ldr	r3, [pc, #420]	; (8009dbc <cppLoop+0x1c74>)
 8009c16:	edd3 7a00 	vldr	s15, [r3]
 8009c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1e:	486e      	ldr	r0, [pc, #440]	; (8009dd8 <cppLoop+0x1c90>)
 8009c20:	f7fa f816 	bl	8003c50 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009c24:	4b67      	ldr	r3, [pc, #412]	; (8009dc4 <cppLoop+0x1c7c>)
 8009c26:	edd3 7a00 	vldr	s15, [r3]
 8009c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c2e:	486a      	ldr	r0, [pc, #424]	; (8009dd8 <cppLoop+0x1c90>)
 8009c30:	f7fa f81e 	bl	8003c70 <_ZN9LineTrace15setMinVelocity3Ef>
				line_trace.createVelocityTabele();
 8009c34:	4868      	ldr	r0, [pc, #416]	; (8009dd8 <cppLoop+0x1c90>)
 8009c36:	f7fa fce1 	bl	80045fc <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009c3a:	4867      	ldr	r0, [pc, #412]	; (8009dd8 <cppLoop+0x1c90>)
 8009c3c:	f7fa fae6 	bl	800420c <_ZN9LineTrace7runningEv>

				logger.stop();
 8009c40:	4866      	ldr	r0, [pc, #408]	; (8009ddc <cppLoop+0x1c94>)
 8009c42:	f7fb f9dd 	bl	8005000 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009c46:	4a66      	ldr	r2, [pc, #408]	; (8009de0 <cppLoop+0x1c98>)
 8009c48:	4966      	ldr	r1, [pc, #408]	; (8009de4 <cppLoop+0x1c9c>)
 8009c4a:	4864      	ldr	r0, [pc, #400]	; (8009ddc <cppLoop+0x1c94>)
 8009c4c:	f7fb f871 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009c50:	4a65      	ldr	r2, [pc, #404]	; (8009de8 <cppLoop+0x1ca0>)
 8009c52:	4964      	ldr	r1, [pc, #400]	; (8009de4 <cppLoop+0x1c9c>)
 8009c54:	4861      	ldr	r0, [pc, #388]	; (8009ddc <cppLoop+0x1c94>)
 8009c56:	f7fb f880 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4853      	ldr	r0, [pc, #332]	; (8009db0 <cppLoop+0x1c68>)
 8009c62:	f7f8 f9fd 	bl	8002060 <_ZN3LED2LREaa>
				led.LR(-1, 0);
			}

		}

		break;
 8009c66:	f001 ba81 	b.w	800b16c <cppLoop+0x3024>
			lcd_clear();
 8009c6a:	f7f7 fa19 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009c6e:	2100      	movs	r1, #0
 8009c70:	2000      	movs	r0, #0
 8009c72:	f7f7 fa25 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", line_trace.getMaxVelocity3());
 8009c76:	4858      	ldr	r0, [pc, #352]	; (8009dd8 <cppLoop+0x1c90>)
 8009c78:	f7fa f87a 	bl	8003d70 <_ZN9LineTrace15getMaxVelocity3Ev>
 8009c7c:	ee10 3a10 	vmov	r3, s0
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7f6 fc79 	bl	8000578 <__aeabi_f2d>
 8009c86:	4603      	mov	r3, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	484c      	ldr	r0, [pc, #304]	; (8009dc0 <cppLoop+0x1c78>)
 8009c90:	f7f7 fa40 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009c94:	2101      	movs	r1, #1
 8009c96:	2000      	movs	r0, #0
 8009c98:	f7f7 fa12 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity3());
 8009c9c:	484e      	ldr	r0, [pc, #312]	; (8009dd8 <cppLoop+0x1c90>)
 8009c9e:	f7fa f877 	bl	8003d90 <_ZN9LineTrace15getMinVelocity3Ev>
 8009ca2:	ee10 3a10 	vmov	r3, s0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7f6 fc66 	bl	8000578 <__aeabi_f2d>
 8009cac:	4603      	mov	r3, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4623      	mov	r3, r4
 8009cb4:	484d      	ldr	r0, [pc, #308]	; (8009dec <cppLoop+0x1ca4>)
 8009cb6:	f7f7 fa2d 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009cba:	483e      	ldr	r0, [pc, #248]	; (8009db4 <cppLoop+0x1c6c>)
 8009cbc:	f7f8 f8b0 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b08      	cmp	r3, #8
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2301      	moveq	r3, #1
 8009cc8:	2300      	movne	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d022      	beq.n	8009d16 <cppLoop+0x1bce>
				led.LR(-1, 1);
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8009cd6:	4836      	ldr	r0, [pc, #216]	; (8009db0 <cppLoop+0x1c68>)
 8009cd8:	f7f8 f9c2 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009ce0:	f001 fb90 	bl	800b404 <HAL_Delay>
				selector_vel++;
 8009ce4:	4b42      	ldr	r3, [pc, #264]	; (8009df0 <cppLoop+0x1ca8>)
 8009ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3301      	adds	r3, #1
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	b21a      	sxth	r2, r3
 8009cf2:	4b3f      	ldr	r3, [pc, #252]	; (8009df0 <cppLoop+0x1ca8>)
 8009cf4:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8009cf6:	4b3e      	ldr	r3, [pc, #248]	; (8009df0 <cppLoop+0x1ca8>)
 8009cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	dd02      	ble.n	8009d06 <cppLoop+0x1bbe>
 8009d00:	4b3b      	ldr	r3, [pc, #236]	; (8009df0 <cppLoop+0x1ca8>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8009d06:	2200      	movs	r2, #0
 8009d08:	f04f 31ff 	mov.w	r1, #4294967295
 8009d0c:	4828      	ldr	r0, [pc, #160]	; (8009db0 <cppLoop+0x1c68>)
 8009d0e:	f7f8 f9a7 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009d12:	f001 ba2b 	b.w	800b16c <cppLoop+0x3024>
			else if(joy_stick.getValue() == JOY_R){
 8009d16:	4827      	ldr	r0, [pc, #156]	; (8009db4 <cppLoop+0x1c6c>)
 8009d18:	f7f8 f882 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	bf0c      	ite	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	2300      	movne	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d063      	beq.n	8009df4 <cppLoop+0x1cac>
				led.LR(-1, 1);
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8009d32:	481f      	ldr	r0, [pc, #124]	; (8009db0 <cppLoop+0x1c68>)
 8009d34:	f7f8 f994 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009d38:	2064      	movs	r0, #100	; 0x64
 8009d3a:	f001 fb63 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 8009d3e:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <cppLoop+0x1ca8>)
 8009d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d113      	bne.n	8009d70 <cppLoop+0x1c28>
					adj_max_velocity3 = adj_max_velocity3 + 0.1;
 8009d48:	4b1c      	ldr	r3, [pc, #112]	; (8009dbc <cppLoop+0x1c74>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7f6 fc13 	bl	8000578 <__aeabi_f2d>
 8009d52:	a315      	add	r3, pc, #84	; (adr r3, 8009da8 <cppLoop+0x1c60>)
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fab0 	bl	80002bc <__adddf3>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	4618      	mov	r0, r3
 8009d62:	4621      	mov	r1, r4
 8009d64:	f7f6 ff58 	bl	8000c18 <__aeabi_d2f>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <cppLoop+0x1c74>)
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e012      	b.n	8009d96 <cppLoop+0x1c4e>
					adj_min_velocity3 = adj_min_velocity3 + 0.1;
 8009d70:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <cppLoop+0x1c7c>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f6 fbff 	bl	8000578 <__aeabi_f2d>
 8009d7a:	a30b      	add	r3, pc, #44	; (adr r3, 8009da8 <cppLoop+0x1c60>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fa9c 	bl	80002bc <__adddf3>
 8009d84:	4603      	mov	r3, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4618      	mov	r0, r3
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	f7f6 ff44 	bl	8000c18 <__aeabi_d2f>
 8009d90:	4602      	mov	r2, r0
 8009d92:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <cppLoop+0x1c7c>)
 8009d94:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009d96:	2200      	movs	r2, #0
 8009d98:	f04f 31ff 	mov.w	r1, #4294967295
 8009d9c:	4804      	ldr	r0, [pc, #16]	; (8009db0 <cppLoop+0x1c68>)
 8009d9e:	f7f8 f95f 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009da2:	f001 b9e3 	b.w	800b16c <cppLoop+0x3024>
 8009da6:	bf00      	nop
 8009da8:	9999999a 	.word	0x9999999a
 8009dac:	3fb99999 	.word	0x3fb99999
 8009db0:	20000578 	.word	0x20000578
 8009db4:	2000056c 	.word	0x2000056c
 8009db8:	2004759e 	.word	0x2004759e
 8009dbc:	200475fc 	.word	0x200475fc
 8009dc0:	0801a6c8 	.word	0x0801a6c8
 8009dc4:	20047604 	.word	0x20047604
 8009dc8:	0801a634 	.word	0x0801a634
 8009dcc:	200475a4 	.word	0x200475a4
 8009dd0:	200475ac 	.word	0x200475ac
 8009dd4:	200475b4 	.word	0x200475b4
 8009dd8:	200209f4 	.word	0x200209f4
 8009ddc:	2000059c 	.word	0x2000059c
 8009de0:	0801a640 	.word	0x0801a640
 8009de4:	0801a64c 	.word	0x0801a64c
 8009de8:	0801a658 	.word	0x0801a658
 8009dec:	0801a668 	.word	0x0801a668
 8009df0:	200475a2 	.word	0x200475a2
			else if(joy_stick.getValue() == JOY_L){
 8009df4:	48a0      	ldr	r0, [pc, #640]	; (800a078 <cppLoop+0x1f30>)
 8009df6:	f7f8 f813 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	bf0c      	ite	eq
 8009e00:	2301      	moveq	r3, #1
 8009e02:	2300      	movne	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d03c      	beq.n	8009e84 <cppLoop+0x1d3c>
				led.LR(-1, 1);
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e10:	489a      	ldr	r0, [pc, #616]	; (800a07c <cppLoop+0x1f34>)
 8009e12:	f7f8 f925 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009e16:	2064      	movs	r0, #100	; 0x64
 8009e18:	f001 faf4 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 8009e1c:	4b98      	ldr	r3, [pc, #608]	; (800a080 <cppLoop+0x1f38>)
 8009e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d113      	bne.n	8009e4e <cppLoop+0x1d06>
					adj_max_velocity3 = adj_max_velocity3 - 0.1;
 8009e26:	4b97      	ldr	r3, [pc, #604]	; (800a084 <cppLoop+0x1f3c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f6 fba4 	bl	8000578 <__aeabi_f2d>
 8009e30:	a38f      	add	r3, pc, #572	; (adr r3, 800a070 <cppLoop+0x1f28>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fa3f 	bl	80002b8 <__aeabi_dsub>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	4621      	mov	r1, r4
 8009e42:	f7f6 fee9 	bl	8000c18 <__aeabi_d2f>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4b8e      	ldr	r3, [pc, #568]	; (800a084 <cppLoop+0x1f3c>)
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	e012      	b.n	8009e74 <cppLoop+0x1d2c>
					adj_min_velocity3 = adj_min_velocity3 - 0.1;
 8009e4e:	4b8e      	ldr	r3, [pc, #568]	; (800a088 <cppLoop+0x1f40>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f6 fb90 	bl	8000578 <__aeabi_f2d>
 8009e58:	a385      	add	r3, pc, #532	; (adr r3, 800a070 <cppLoop+0x1f28>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 fa2b 	bl	80002b8 <__aeabi_dsub>
 8009e62:	4603      	mov	r3, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	4618      	mov	r0, r3
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f7f6 fed5 	bl	8000c18 <__aeabi_d2f>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	4b85      	ldr	r3, [pc, #532]	; (800a088 <cppLoop+0x1f40>)
 8009e72:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009e74:	2200      	movs	r2, #0
 8009e76:	f04f 31ff 	mov.w	r1, #4294967295
 8009e7a:	4880      	ldr	r0, [pc, #512]	; (800a07c <cppLoop+0x1f34>)
 8009e7c:	f7f8 f8f0 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009e80:	f001 b974 	b.w	800b16c <cppLoop+0x3024>
			else if(joy_stick.getValue() == JOY_C){
 8009e84:	487c      	ldr	r0, [pc, #496]	; (800a078 <cppLoop+0x1f30>)
 8009e86:	f7f7 ffcb 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	bf0c      	ite	eq
 8009e90:	2301      	moveq	r3, #1
 8009e92:	2300      	movne	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f001 8168 	beq.w	800b16c <cppLoop+0x3024>
				led.LR(-1, 1);
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8009ea2:	4876      	ldr	r0, [pc, #472]	; (800a07c <cppLoop+0x1f34>)
 8009ea4:	f7f8 f8dc 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009ea8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009eac:	f001 faaa 	bl	800b404 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL4.TXT", 1, &adj_max_velocity3, OVER_WRITE);
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	4b73      	ldr	r3, [pc, #460]	; (800a084 <cppLoop+0x1f3c>)
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	4974      	ldr	r1, [pc, #464]	; (800a08c <cppLoop+0x1f44>)
 8009eba:	4875      	ldr	r0, [pc, #468]	; (800a090 <cppLoop+0x1f48>)
 8009ebc:	f7f7 fc4a 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL4.TXT", 1, &adj_min_velocity3, OVER_WRITE);
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4b70      	ldr	r3, [pc, #448]	; (800a088 <cppLoop+0x1f40>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4972      	ldr	r1, [pc, #456]	; (800a094 <cppLoop+0x1f4c>)
 8009eca:	4871      	ldr	r0, [pc, #452]	; (800a090 <cppLoop+0x1f48>)
 8009ecc:	f7f7 fc42 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009ed0:	4b6c      	ldr	r3, [pc, #432]	; (800a084 <cppLoop+0x1f3c>)
 8009ed2:	edd3 7a00 	vldr	s15, [r3]
 8009ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eda:	486f      	ldr	r0, [pc, #444]	; (800a098 <cppLoop+0x1f50>)
 8009edc:	f7f9 feb8 	bl	8003c50 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009ee0:	4b69      	ldr	r3, [pc, #420]	; (800a088 <cppLoop+0x1f40>)
 8009ee2:	edd3 7a00 	vldr	s15, [r3]
 8009ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eea:	486b      	ldr	r0, [pc, #428]	; (800a098 <cppLoop+0x1f50>)
 8009eec:	f7f9 fec0 	bl	8003c70 <_ZN9LineTrace15setMinVelocity3Ef>
				led.LR(-1, 0);
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ef6:	4861      	ldr	r0, [pc, #388]	; (800a07c <cppLoop+0x1f34>)
 8009ef8:	f7f8 f8b2 	bl	8002060 <_ZN3LED2LREaa>
		break;
 8009efc:	f001 b936 	b.w	800b16c <cppLoop+0x3024>

	case 6:
		led.fullColor('R');
 8009f00:	2152      	movs	r1, #82	; 0x52
 8009f02:	485e      	ldr	r0, [pc, #376]	; (800a07c <cppLoop+0x1f34>)
 8009f04:	f7f7 fff0 	bl	8001ee8 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009f08:	485b      	ldr	r0, [pc, #364]	; (800a078 <cppLoop+0x1f30>)
 8009f0a:	f7f7 ff89 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	bf0c      	ite	eq
 8009f14:	2301      	moveq	r3, #1
 8009f16:	2300      	movne	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d020      	beq.n	8009f60 <cppLoop+0x1e18>
			led.LR(-1, 1);
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f04f 31ff 	mov.w	r1, #4294967295
 8009f24:	4855      	ldr	r0, [pc, #340]	; (800a07c <cppLoop+0x1f34>)
 8009f26:	f7f8 f89b 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009f2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009f2e:	f001 fa69 	bl	800b404 <HAL_Delay>

			selector_run++;
 8009f32:	4b5a      	ldr	r3, [pc, #360]	; (800a09c <cppLoop+0x1f54>)
 8009f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	b21a      	sxth	r2, r3
 8009f40:	4b56      	ldr	r3, [pc, #344]	; (800a09c <cppLoop+0x1f54>)
 8009f42:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009f44:	4b55      	ldr	r3, [pc, #340]	; (800a09c <cppLoop+0x1f54>)
 8009f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	dd02      	ble.n	8009f54 <cppLoop+0x1e0c>
 8009f4e:	4b53      	ldr	r3, [pc, #332]	; (800a09c <cppLoop+0x1f54>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009f54:	2200      	movs	r2, #0
 8009f56:	f04f 31ff 	mov.w	r1, #4294967295
 8009f5a:	4848      	ldr	r0, [pc, #288]	; (800a07c <cppLoop+0x1f34>)
 8009f5c:	f7f8 f880 	bl	8002060 <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009f60:	4b4e      	ldr	r3, [pc, #312]	; (800a09c <cppLoop+0x1f54>)
 8009f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f040 80b0 	bne.w	800a0cc <cppLoop+0x1f84>
			lcd_clear();
 8009f6c:	f7f7 f898 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009f70:	2100      	movs	r1, #0
 8009f72:	2000      	movs	r0, #0
 8009f74:	f7f7 f8a4 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", adj_max_velocity4);
 8009f78:	4b49      	ldr	r3, [pc, #292]	; (800a0a0 <cppLoop+0x1f58>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f6 fafb 	bl	8000578 <__aeabi_f2d>
 8009f82:	4603      	mov	r3, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	461a      	mov	r2, r3
 8009f88:	4623      	mov	r3, r4
 8009f8a:	4846      	ldr	r0, [pc, #280]	; (800a0a4 <cppLoop+0x1f5c>)
 8009f8c:	f7f7 f8c2 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009f90:	2101      	movs	r1, #1
 8009f92:	2000      	movs	r0, #0
 8009f94:	f7f7 f894 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity4);
 8009f98:	4b43      	ldr	r3, [pc, #268]	; (800a0a8 <cppLoop+0x1f60>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f6 faeb 	bl	8000578 <__aeabi_f2d>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4623      	mov	r3, r4
 8009faa:	4840      	ldr	r0, [pc, #256]	; (800a0ac <cppLoop+0x1f64>)
 8009fac:	f7f7 f8b2 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009fb0:	4831      	ldr	r0, [pc, #196]	; (800a078 <cppLoop+0x1f30>)
 8009fb2:	f7f7 ff35 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	bf0c      	ite	eq
 8009fbc:	2301      	moveq	r3, #1
 8009fbe:	2300      	movne	r3, #0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f001 80d4 	beq.w	800b170 <cppLoop+0x3028>
				HAL_Delay(500);
 8009fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009fcc:	f001 fa1a 	bl	800b404 <HAL_Delay>

				led.LR(1, -1);
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4829      	ldr	r0, [pc, #164]	; (800a07c <cppLoop+0x1f34>)
 8009fd8:	f7f8 f842 	bl	8002060 <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009fdc:	4b34      	ldr	r3, [pc, #208]	; (800a0b0 <cppLoop+0x1f68>)
 8009fde:	edd3 7a00 	vldr	s15, [r3]
 8009fe2:	4b34      	ldr	r3, [pc, #208]	; (800a0b4 <cppLoop+0x1f6c>)
 8009fe4:	ed93 7a00 	vldr	s14, [r3]
 8009fe8:	4b33      	ldr	r3, [pc, #204]	; (800a0b8 <cppLoop+0x1f70>)
 8009fea:	edd3 6a00 	vldr	s13, [r3]
 8009fee:	eeb0 1a66 	vmov.f32	s2, s13
 8009ff2:	eef0 0a47 	vmov.f32	s1, s14
 8009ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8009ffa:	4827      	ldr	r0, [pc, #156]	; (800a098 <cppLoop+0x1f50>)
 8009ffc:	f7f9 fd4c 	bl	8003a98 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FIFTH_RUNNING);
 800a000:	2104      	movs	r1, #4
 800a002:	4825      	ldr	r0, [pc, #148]	; (800a098 <cppLoop+0x1f50>)
 800a004:	f7fa f8b2 	bl	800416c <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity4);
 800a008:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <cppLoop+0x1f60>)
 800a00a:	edd3 7a00 	vldr	s15, [r3]
 800a00e:	eeb0 0a67 	vmov.f32	s0, s15
 800a012:	4821      	ldr	r0, [pc, #132]	; (800a098 <cppLoop+0x1f50>)
 800a014:	f7f9 fdcc 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a018:	4b21      	ldr	r3, [pc, #132]	; (800a0a0 <cppLoop+0x1f58>)
 800a01a:	edd3 7a00 	vldr	s15, [r3]
 800a01e:	eeb0 0a67 	vmov.f32	s0, s15
 800a022:	481d      	ldr	r0, [pc, #116]	; (800a098 <cppLoop+0x1f50>)
 800a024:	f7f9 fe34 	bl	8003c90 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a028:	4b1f      	ldr	r3, [pc, #124]	; (800a0a8 <cppLoop+0x1f60>)
 800a02a:	edd3 7a00 	vldr	s15, [r3]
 800a02e:	eeb0 0a67 	vmov.f32	s0, s15
 800a032:	4819      	ldr	r0, [pc, #100]	; (800a098 <cppLoop+0x1f50>)
 800a034:	f7f9 fe3c 	bl	8003cb0 <_ZN9LineTrace15setMinVelocity4Ef>
				line_trace.createVelocityTabele();
 800a038:	4817      	ldr	r0, [pc, #92]	; (800a098 <cppLoop+0x1f50>)
 800a03a:	f7fa fadf 	bl	80045fc <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 800a03e:	4816      	ldr	r0, [pc, #88]	; (800a098 <cppLoop+0x1f50>)
 800a040:	f7fa f8e4 	bl	800420c <_ZN9LineTrace7runningEv>

				logger.stop();
 800a044:	481d      	ldr	r0, [pc, #116]	; (800a0bc <cppLoop+0x1f74>)
 800a046:	f7fa ffdb 	bl	8005000 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800a04a:	4a1d      	ldr	r2, [pc, #116]	; (800a0c0 <cppLoop+0x1f78>)
 800a04c:	491d      	ldr	r1, [pc, #116]	; (800a0c4 <cppLoop+0x1f7c>)
 800a04e:	481b      	ldr	r0, [pc, #108]	; (800a0bc <cppLoop+0x1f74>)
 800a050:	f7fa fe6f 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800a054:	4a1c      	ldr	r2, [pc, #112]	; (800a0c8 <cppLoop+0x1f80>)
 800a056:	491b      	ldr	r1, [pc, #108]	; (800a0c4 <cppLoop+0x1f7c>)
 800a058:	4818      	ldr	r0, [pc, #96]	; (800a0bc <cppLoop+0x1f74>)
 800a05a:	f7fa fe7e 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	2100      	movs	r1, #0
 800a064:	4805      	ldr	r0, [pc, #20]	; (800a07c <cppLoop+0x1f34>)
 800a066:	f7f7 fffb 	bl	8002060 <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800a06a:	f001 b881 	b.w	800b170 <cppLoop+0x3028>
 800a06e:	bf00      	nop
 800a070:	9999999a 	.word	0x9999999a
 800a074:	3fb99999 	.word	0x3fb99999
 800a078:	2000056c 	.word	0x2000056c
 800a07c:	20000578 	.word	0x20000578
 800a080:	200475a2 	.word	0x200475a2
 800a084:	200475fc 	.word	0x200475fc
 800a088:	20047604 	.word	0x20047604
 800a08c:	0801a6d4 	.word	0x0801a6d4
 800a090:	0801a5e8 	.word	0x0801a5e8
 800a094:	0801a6e0 	.word	0x0801a6e0
 800a098:	200209f4 	.word	0x200209f4
 800a09c:	2004759e 	.word	0x2004759e
 800a0a0:	2004760c 	.word	0x2004760c
 800a0a4:	0801a6ec 	.word	0x0801a6ec
 800a0a8:	20047614 	.word	0x20047614
 800a0ac:	0801a634 	.word	0x0801a634
 800a0b0:	200475a4 	.word	0x200475a4
 800a0b4:	200475ac 	.word	0x200475ac
 800a0b8:	200475b4 	.word	0x200475b4
 800a0bc:	2000059c 	.word	0x2000059c
 800a0c0:	0801a640 	.word	0x0801a640
 800a0c4:	0801a64c 	.word	0x0801a64c
 800a0c8:	0801a658 	.word	0x0801a658
			lcd_clear();
 800a0cc:	f7f6 ffe8 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f7f6 fff4 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", line_trace.getMaxVelocity4());
 800a0d8:	48bd      	ldr	r0, [pc, #756]	; (800a3d0 <cppLoop+0x2288>)
 800a0da:	f7f9 fe69 	bl	8003db0 <_ZN9LineTrace15getMaxVelocity4Ev>
 800a0de:	ee10 3a10 	vmov	r3, s0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 fa48 	bl	8000578 <__aeabi_f2d>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4623      	mov	r3, r4
 800a0f0:	48b8      	ldr	r0, [pc, #736]	; (800a3d4 <cppLoop+0x228c>)
 800a0f2:	f7f7 f80f 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f7f6 ffe1 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity4());
 800a0fe:	48b4      	ldr	r0, [pc, #720]	; (800a3d0 <cppLoop+0x2288>)
 800a100:	f7f9 fe66 	bl	8003dd0 <_ZN9LineTrace15getMinVelocity4Ev>
 800a104:	ee10 3a10 	vmov	r3, s0
 800a108:	4618      	mov	r0, r3
 800a10a:	f7f6 fa35 	bl	8000578 <__aeabi_f2d>
 800a10e:	4603      	mov	r3, r0
 800a110:	460c      	mov	r4, r1
 800a112:	461a      	mov	r2, r3
 800a114:	4623      	mov	r3, r4
 800a116:	48b0      	ldr	r0, [pc, #704]	; (800a3d8 <cppLoop+0x2290>)
 800a118:	f7f6 fffc 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 800a11c:	48af      	ldr	r0, [pc, #700]	; (800a3dc <cppLoop+0x2294>)
 800a11e:	f7f7 fe7f 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a122:	4603      	mov	r3, r0
 800a124:	2b08      	cmp	r3, #8
 800a126:	bf0c      	ite	eq
 800a128:	2301      	moveq	r3, #1
 800a12a:	2300      	movne	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d022      	beq.n	800a178 <cppLoop+0x2030>
				led.LR(-1, 1);
 800a132:	2201      	movs	r2, #1
 800a134:	f04f 31ff 	mov.w	r1, #4294967295
 800a138:	48a9      	ldr	r0, [pc, #676]	; (800a3e0 <cppLoop+0x2298>)
 800a13a:	f7f7 ff91 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a13e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a142:	f001 f95f 	bl	800b404 <HAL_Delay>
				selector_vel++;
 800a146:	4ba7      	ldr	r3, [pc, #668]	; (800a3e4 <cppLoop+0x229c>)
 800a148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3301      	adds	r3, #1
 800a150:	b29b      	uxth	r3, r3
 800a152:	b21a      	sxth	r2, r3
 800a154:	4ba3      	ldr	r3, [pc, #652]	; (800a3e4 <cppLoop+0x229c>)
 800a156:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800a158:	4ba2      	ldr	r3, [pc, #648]	; (800a3e4 <cppLoop+0x229c>)
 800a15a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	dd02      	ble.n	800a168 <cppLoop+0x2020>
 800a162:	4ba0      	ldr	r3, [pc, #640]	; (800a3e4 <cppLoop+0x229c>)
 800a164:	2200      	movs	r2, #0
 800a166:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800a168:	2200      	movs	r2, #0
 800a16a:	f04f 31ff 	mov.w	r1, #4294967295
 800a16e:	489c      	ldr	r0, [pc, #624]	; (800a3e0 <cppLoop+0x2298>)
 800a170:	f7f7 ff76 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a174:	f000 bffc 	b.w	800b170 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_R){
 800a178:	4898      	ldr	r0, [pc, #608]	; (800a3dc <cppLoop+0x2294>)
 800a17a:	f7f7 fe51 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b10      	cmp	r3, #16
 800a182:	bf0c      	ite	eq
 800a184:	2301      	moveq	r3, #1
 800a186:	2300      	movne	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d03c      	beq.n	800a208 <cppLoop+0x20c0>
				led.LR(-1, 1);
 800a18e:	2201      	movs	r2, #1
 800a190:	f04f 31ff 	mov.w	r1, #4294967295
 800a194:	4892      	ldr	r0, [pc, #584]	; (800a3e0 <cppLoop+0x2298>)
 800a196:	f7f7 ff63 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a19a:	2064      	movs	r0, #100	; 0x64
 800a19c:	f001 f932 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 800a1a0:	4b90      	ldr	r3, [pc, #576]	; (800a3e4 <cppLoop+0x229c>)
 800a1a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d113      	bne.n	800a1d2 <cppLoop+0x208a>
					adj_max_velocity4 = adj_max_velocity4 + 0.1;
 800a1aa:	4b8f      	ldr	r3, [pc, #572]	; (800a3e8 <cppLoop+0x22a0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 f9e2 	bl	8000578 <__aeabi_f2d>
 800a1b4:	a384      	add	r3, pc, #528	; (adr r3, 800a3c8 <cppLoop+0x2280>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 f87f 	bl	80002bc <__adddf3>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	f7f6 fd27 	bl	8000c18 <__aeabi_d2f>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	4b86      	ldr	r3, [pc, #536]	; (800a3e8 <cppLoop+0x22a0>)
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e012      	b.n	800a1f8 <cppLoop+0x20b0>
					adj_min_velocity4 = adj_min_velocity4 + 0.1;
 800a1d2:	4b86      	ldr	r3, [pc, #536]	; (800a3ec <cppLoop+0x22a4>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f6 f9ce 	bl	8000578 <__aeabi_f2d>
 800a1dc:	a37a      	add	r3, pc, #488	; (adr r3, 800a3c8 <cppLoop+0x2280>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f86b 	bl	80002bc <__adddf3>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7f6 fd13 	bl	8000c18 <__aeabi_d2f>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b7d      	ldr	r3, [pc, #500]	; (800a3ec <cppLoop+0x22a4>)
 800a1f6:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f04f 31ff 	mov.w	r1, #4294967295
 800a1fe:	4878      	ldr	r0, [pc, #480]	; (800a3e0 <cppLoop+0x2298>)
 800a200:	f7f7 ff2e 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a204:	f000 bfb4 	b.w	800b170 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_L){
 800a208:	4874      	ldr	r0, [pc, #464]	; (800a3dc <cppLoop+0x2294>)
 800a20a:	f7f7 fe09 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b01      	cmp	r3, #1
 800a212:	bf0c      	ite	eq
 800a214:	2301      	moveq	r3, #1
 800a216:	2300      	movne	r3, #0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d03c      	beq.n	800a298 <cppLoop+0x2150>
				led.LR(-1, 1);
 800a21e:	2201      	movs	r2, #1
 800a220:	f04f 31ff 	mov.w	r1, #4294967295
 800a224:	486e      	ldr	r0, [pc, #440]	; (800a3e0 <cppLoop+0x2298>)
 800a226:	f7f7 ff1b 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a22a:	2064      	movs	r0, #100	; 0x64
 800a22c:	f001 f8ea 	bl	800b404 <HAL_Delay>
				if(selector_vel == 0)
 800a230:	4b6c      	ldr	r3, [pc, #432]	; (800a3e4 <cppLoop+0x229c>)
 800a232:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d113      	bne.n	800a262 <cppLoop+0x211a>
					adj_max_velocity4 = adj_max_velocity4 - 0.1;
 800a23a:	4b6b      	ldr	r3, [pc, #428]	; (800a3e8 <cppLoop+0x22a0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f6 f99a 	bl	8000578 <__aeabi_f2d>
 800a244:	a360      	add	r3, pc, #384	; (adr r3, 800a3c8 <cppLoop+0x2280>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f835 	bl	80002b8 <__aeabi_dsub>
 800a24e:	4603      	mov	r3, r0
 800a250:	460c      	mov	r4, r1
 800a252:	4618      	mov	r0, r3
 800a254:	4621      	mov	r1, r4
 800a256:	f7f6 fcdf 	bl	8000c18 <__aeabi_d2f>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4b62      	ldr	r3, [pc, #392]	; (800a3e8 <cppLoop+0x22a0>)
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e012      	b.n	800a288 <cppLoop+0x2140>
					adj_min_velocity4 = adj_min_velocity4 - 0.1;
 800a262:	4b62      	ldr	r3, [pc, #392]	; (800a3ec <cppLoop+0x22a4>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7f6 f986 	bl	8000578 <__aeabi_f2d>
 800a26c:	a356      	add	r3, pc, #344	; (adr r3, 800a3c8 <cppLoop+0x2280>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 f821 	bl	80002b8 <__aeabi_dsub>
 800a276:	4603      	mov	r3, r0
 800a278:	460c      	mov	r4, r1
 800a27a:	4618      	mov	r0, r3
 800a27c:	4621      	mov	r1, r4
 800a27e:	f7f6 fccb 	bl	8000c18 <__aeabi_d2f>
 800a282:	4602      	mov	r2, r0
 800a284:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <cppLoop+0x22a4>)
 800a286:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a288:	2200      	movs	r2, #0
 800a28a:	f04f 31ff 	mov.w	r1, #4294967295
 800a28e:	4854      	ldr	r0, [pc, #336]	; (800a3e0 <cppLoop+0x2298>)
 800a290:	f7f7 fee6 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a294:	f000 bf6c 	b.w	800b170 <cppLoop+0x3028>
			else if(joy_stick.getValue() == JOY_C){
 800a298:	4850      	ldr	r0, [pc, #320]	; (800a3dc <cppLoop+0x2294>)
 800a29a:	f7f7 fdc1 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	bf0c      	ite	eq
 800a2a4:	2301      	moveq	r3, #1
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 8760 	beq.w	800b170 <cppLoop+0x3028>
				led.LR(-1, 1);
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b6:	484a      	ldr	r0, [pc, #296]	; (800a3e0 <cppLoop+0x2298>)
 800a2b8:	f7f7 fed2 	bl	8002060 <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a2bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a2c0:	f001 f8a0 	bl	800b404 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL5.TXT", 1, &adj_max_velocity4, OVER_WRITE);
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4b47      	ldr	r3, [pc, #284]	; (800a3e8 <cppLoop+0x22a0>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4948      	ldr	r1, [pc, #288]	; (800a3f0 <cppLoop+0x22a8>)
 800a2ce:	4849      	ldr	r0, [pc, #292]	; (800a3f4 <cppLoop+0x22ac>)
 800a2d0:	f7f7 fa40 	bl	8001754 <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL5.TXT", 1, &adj_min_velocity4, OVER_WRITE);
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4b44      	ldr	r3, [pc, #272]	; (800a3ec <cppLoop+0x22a4>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	4946      	ldr	r1, [pc, #280]	; (800a3f8 <cppLoop+0x22b0>)
 800a2de:	4845      	ldr	r0, [pc, #276]	; (800a3f4 <cppLoop+0x22ac>)
 800a2e0:	f7f7 fa38 	bl	8001754 <sd_write_array_float>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a2e4:	4b40      	ldr	r3, [pc, #256]	; (800a3e8 <cppLoop+0x22a0>)
 800a2e6:	edd3 7a00 	vldr	s15, [r3]
 800a2ea:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ee:	4838      	ldr	r0, [pc, #224]	; (800a3d0 <cppLoop+0x2288>)
 800a2f0:	f7f9 fcce 	bl	8003c90 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a2f4:	4b3d      	ldr	r3, [pc, #244]	; (800a3ec <cppLoop+0x22a4>)
 800a2f6:	edd3 7a00 	vldr	s15, [r3]
 800a2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800a2fe:	4834      	ldr	r0, [pc, #208]	; (800a3d0 <cppLoop+0x2288>)
 800a300:	f7f9 fcd6 	bl	8003cb0 <_ZN9LineTrace15setMinVelocity4Ef>
				led.LR(-1, 0);
 800a304:	2200      	movs	r2, #0
 800a306:	f04f 31ff 	mov.w	r1, #4294967295
 800a30a:	4835      	ldr	r0, [pc, #212]	; (800a3e0 <cppLoop+0x2298>)
 800a30c:	f7f7 fea8 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a310:	f000 bf2e 	b.w	800b170 <cppLoop+0x3028>
	case 7:
		led.fullColor('W');
 800a314:	2157      	movs	r1, #87	; 0x57
 800a316:	4832      	ldr	r0, [pc, #200]	; (800a3e0 <cppLoop+0x2298>)
 800a318:	f7f7 fde6 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a31c:	f7f6 fec0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a320:	2100      	movs	r1, #0
 800a322:	2000      	movs	r0, #0
 800a324:	f7f6 fecc 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc());
 800a328:	4829      	ldr	r0, [pc, #164]	; (800a3d0 <cppLoop+0x2288>)
 800a32a:	f7f9 fdc9 	bl	8003ec0 <_ZN9LineTrace9getMaxAccEv>
 800a32e:	ee10 3a10 	vmov	r3, s0
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 f920 	bl	8000578 <__aeabi_f2d>
 800a338:	4603      	mov	r3, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	461a      	mov	r2, r3
 800a33e:	4623      	mov	r3, r4
 800a340:	482e      	ldr	r0, [pc, #184]	; (800a3fc <cppLoop+0x22b4>)
 800a342:	f7f6 fee7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a346:	2101      	movs	r1, #1
 800a348:	2000      	movs	r0, #0
 800a34a:	f7f6 feb9 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec());
 800a34e:	4820      	ldr	r0, [pc, #128]	; (800a3d0 <cppLoop+0x2288>)
 800a350:	f7f9 fdc8 	bl	8003ee4 <_ZN9LineTrace9getMaxDecEv>
 800a354:	ee10 3a10 	vmov	r3, s0
 800a358:	4618      	mov	r0, r3
 800a35a:	f7f6 f90d 	bl	8000578 <__aeabi_f2d>
 800a35e:	4603      	mov	r3, r0
 800a360:	460c      	mov	r4, r1
 800a362:	461a      	mov	r2, r3
 800a364:	4623      	mov	r3, r4
 800a366:	4826      	ldr	r0, [pc, #152]	; (800a400 <cppLoop+0x22b8>)
 800a368:	f7f6 fed4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a36c:	481b      	ldr	r0, [pc, #108]	; (800a3dc <cppLoop+0x2294>)
 800a36e:	f7f7 fd57 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a372:	4603      	mov	r3, r0
 800a374:	2b04      	cmp	r3, #4
 800a376:	bf0c      	ite	eq
 800a378:	2301      	moveq	r3, #1
 800a37a:	2300      	movne	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d042      	beq.n	800a408 <cppLoop+0x22c0>
			led.LR(-1, 1);
 800a382:	2201      	movs	r2, #1
 800a384:	f04f 31ff 	mov.w	r1, #4294967295
 800a388:	4815      	ldr	r0, [pc, #84]	; (800a3e0 <cppLoop+0x2298>)
 800a38a:	f7f7 fe69 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a38e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a392:	f001 f837 	bl	800b404 <HAL_Delay>

			selector_acc++;
 800a396:	4b1b      	ldr	r3, [pc, #108]	; (800a404 <cppLoop+0x22bc>)
 800a398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	b21a      	sxth	r2, r3
 800a3a4:	4b17      	ldr	r3, [pc, #92]	; (800a404 <cppLoop+0x22bc>)
 800a3a6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a3a8:	4b16      	ldr	r3, [pc, #88]	; (800a404 <cppLoop+0x22bc>)
 800a3aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	dd02      	ble.n	800a3b8 <cppLoop+0x2270>
 800a3b2:	4b14      	ldr	r3, [pc, #80]	; (800a404 <cppLoop+0x22bc>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a3be:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <cppLoop+0x2298>)
 800a3c0:	f7f7 fe4e 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800a3c4:	f000 bed6 	b.w	800b174 <cppLoop+0x302c>
 800a3c8:	9999999a 	.word	0x9999999a
 800a3cc:	3fb99999 	.word	0x3fb99999
 800a3d0:	200209f4 	.word	0x200209f4
 800a3d4:	0801a6ec 	.word	0x0801a6ec
 800a3d8:	0801a668 	.word	0x0801a668
 800a3dc:	2000056c 	.word	0x2000056c
 800a3e0:	20000578 	.word	0x20000578
 800a3e4:	200475a2 	.word	0x200475a2
 800a3e8:	2004760c 	.word	0x2004760c
 800a3ec:	20047614 	.word	0x20047614
 800a3f0:	0801a6f8 	.word	0x0801a6f8
 800a3f4:	0801a5e8 	.word	0x0801a5e8
 800a3f8:	0801a704 	.word	0x0801a704
 800a3fc:	0801a710 	.word	0x0801a710
 800a400:	0801a71c 	.word	0x0801a71c
 800a404:	200475a0 	.word	0x200475a0
		else if(joy_stick.getValue() == JOY_R){
 800a408:	48b9      	ldr	r0, [pc, #740]	; (800a6f0 <cppLoop+0x25a8>)
 800a40a:	f7f7 fd09 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b10      	cmp	r3, #16
 800a412:	bf0c      	ite	eq
 800a414:	2301      	moveq	r3, #1
 800a416:	2300      	movne	r3, #0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d03c      	beq.n	800a498 <cppLoop+0x2350>
			led.LR(-1, 1);
 800a41e:	2201      	movs	r2, #1
 800a420:	f04f 31ff 	mov.w	r1, #4294967295
 800a424:	48b3      	ldr	r0, [pc, #716]	; (800a6f4 <cppLoop+0x25ac>)
 800a426:	f7f7 fe1b 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a42a:	2064      	movs	r0, #100	; 0x64
 800a42c:	f000 ffea 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a430:	4bb1      	ldr	r3, [pc, #708]	; (800a6f8 <cppLoop+0x25b0>)
 800a432:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d113      	bne.n	800a462 <cppLoop+0x231a>
				adj_acc = adj_acc + 0.1;
 800a43a:	4bb0      	ldr	r3, [pc, #704]	; (800a6fc <cppLoop+0x25b4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7f6 f89a 	bl	8000578 <__aeabi_f2d>
 800a444:	a3a8      	add	r3, pc, #672	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 ff37 	bl	80002bc <__adddf3>
 800a44e:	4603      	mov	r3, r0
 800a450:	460c      	mov	r4, r1
 800a452:	4618      	mov	r0, r3
 800a454:	4621      	mov	r1, r4
 800a456:	f7f6 fbdf 	bl	8000c18 <__aeabi_d2f>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4ba7      	ldr	r3, [pc, #668]	; (800a6fc <cppLoop+0x25b4>)
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e012      	b.n	800a488 <cppLoop+0x2340>
				adj_dec = adj_dec + 0.1;
 800a462:	4ba7      	ldr	r3, [pc, #668]	; (800a700 <cppLoop+0x25b8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7f6 f886 	bl	8000578 <__aeabi_f2d>
 800a46c:	a39e      	add	r3, pc, #632	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 ff23 	bl	80002bc <__adddf3>
 800a476:	4603      	mov	r3, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	4618      	mov	r0, r3
 800a47c:	4621      	mov	r1, r4
 800a47e:	f7f6 fbcb 	bl	8000c18 <__aeabi_d2f>
 800a482:	4602      	mov	r2, r0
 800a484:	4b9e      	ldr	r3, [pc, #632]	; (800a700 <cppLoop+0x25b8>)
 800a486:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a488:	2200      	movs	r2, #0
 800a48a:	f04f 31ff 	mov.w	r1, #4294967295
 800a48e:	4899      	ldr	r0, [pc, #612]	; (800a6f4 <cppLoop+0x25ac>)
 800a490:	f7f7 fde6 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a494:	f000 be6e 	b.w	800b174 <cppLoop+0x302c>
		else if(joy_stick.getValue() == JOY_L){
 800a498:	4895      	ldr	r0, [pc, #596]	; (800a6f0 <cppLoop+0x25a8>)
 800a49a:	f7f7 fcc1 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2301      	moveq	r3, #1
 800a4a6:	2300      	movne	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d03c      	beq.n	800a528 <cppLoop+0x23e0>
			led.LR(-1, 1);
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b4:	488f      	ldr	r0, [pc, #572]	; (800a6f4 <cppLoop+0x25ac>)
 800a4b6:	f7f7 fdd3 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a4ba:	2064      	movs	r0, #100	; 0x64
 800a4bc:	f000 ffa2 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a4c0:	4b8d      	ldr	r3, [pc, #564]	; (800a6f8 <cppLoop+0x25b0>)
 800a4c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d113      	bne.n	800a4f2 <cppLoop+0x23aa>
				adj_acc = adj_acc - 0.1;
 800a4ca:	4b8c      	ldr	r3, [pc, #560]	; (800a6fc <cppLoop+0x25b4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f6 f852 	bl	8000578 <__aeabi_f2d>
 800a4d4:	a384      	add	r3, pc, #528	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 feed 	bl	80002b8 <__aeabi_dsub>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f7f6 fb97 	bl	8000c18 <__aeabi_d2f>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b83      	ldr	r3, [pc, #524]	; (800a6fc <cppLoop+0x25b4>)
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e012      	b.n	800a518 <cppLoop+0x23d0>
				adj_dec = adj_dec - 0.1;
 800a4f2:	4b83      	ldr	r3, [pc, #524]	; (800a700 <cppLoop+0x25b8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f6 f83e 	bl	8000578 <__aeabi_f2d>
 800a4fc:	a37a      	add	r3, pc, #488	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fed9 	bl	80002b8 <__aeabi_dsub>
 800a506:	4603      	mov	r3, r0
 800a508:	460c      	mov	r4, r1
 800a50a:	4618      	mov	r0, r3
 800a50c:	4621      	mov	r1, r4
 800a50e:	f7f6 fb83 	bl	8000c18 <__aeabi_d2f>
 800a512:	4602      	mov	r2, r0
 800a514:	4b7a      	ldr	r3, [pc, #488]	; (800a700 <cppLoop+0x25b8>)
 800a516:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a518:	2200      	movs	r2, #0
 800a51a:	f04f 31ff 	mov.w	r1, #4294967295
 800a51e:	4875      	ldr	r0, [pc, #468]	; (800a6f4 <cppLoop+0x25ac>)
 800a520:	f7f7 fd9e 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a524:	f000 be26 	b.w	800b174 <cppLoop+0x302c>
		else if(joy_stick.getValue() == JOY_C){
 800a528:	4871      	ldr	r0, [pc, #452]	; (800a6f0 <cppLoop+0x25a8>)
 800a52a:	f7f7 fc79 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b02      	cmp	r3, #2
 800a532:	bf0c      	ite	eq
 800a534:	2301      	moveq	r3, #1
 800a536:	2300      	movne	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 861a 	beq.w	800b174 <cppLoop+0x302c>
			led.LR(-1, 1);
 800a540:	2201      	movs	r2, #1
 800a542:	f04f 31ff 	mov.w	r1, #4294967295
 800a546:	486b      	ldr	r0, [pc, #428]	; (800a6f4 <cppLoop+0x25ac>)
 800a548:	f7f7 fd8a 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a54c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a550:	f000 ff58 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800a554:	2300      	movs	r3, #0
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4b68      	ldr	r3, [pc, #416]	; (800a6fc <cppLoop+0x25b4>)
 800a55a:	2201      	movs	r2, #1
 800a55c:	4969      	ldr	r1, [pc, #420]	; (800a704 <cppLoop+0x25bc>)
 800a55e:	486a      	ldr	r0, [pc, #424]	; (800a708 <cppLoop+0x25c0>)
 800a560:	f7f7 f8f8 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800a564:	2300      	movs	r3, #0
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4b65      	ldr	r3, [pc, #404]	; (800a700 <cppLoop+0x25b8>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	4967      	ldr	r1, [pc, #412]	; (800a70c <cppLoop+0x25c4>)
 800a56e:	4866      	ldr	r0, [pc, #408]	; (800a708 <cppLoop+0x25c0>)
 800a570:	f7f7 f8f0 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800a574:	4b61      	ldr	r3, [pc, #388]	; (800a6fc <cppLoop+0x25b4>)
 800a576:	edd3 7a00 	vldr	s15, [r3]
 800a57a:	4b61      	ldr	r3, [pc, #388]	; (800a700 <cppLoop+0x25b8>)
 800a57c:	ed93 7a00 	vldr	s14, [r3]
 800a580:	eef0 0a47 	vmov.f32	s1, s14
 800a584:	eeb0 0a67 	vmov.f32	s0, s15
 800a588:	4861      	ldr	r0, [pc, #388]	; (800a710 <cppLoop+0x25c8>)
 800a58a:	f7f9 fc31 	bl	8003df0 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800a58e:	2200      	movs	r2, #0
 800a590:	f04f 31ff 	mov.w	r1, #4294967295
 800a594:	4857      	ldr	r0, [pc, #348]	; (800a6f4 <cppLoop+0x25ac>)
 800a596:	f7f7 fd63 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a59a:	f000 bdeb 	b.w	800b174 <cppLoop+0x302c>

	case 8 :
		led.fullColor('W');
 800a59e:	2157      	movs	r1, #87	; 0x57
 800a5a0:	4854      	ldr	r0, [pc, #336]	; (800a6f4 <cppLoop+0x25ac>)
 800a5a2:	f7f7 fca1 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a5a6:	f7f6 fd7b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7f6 fd87 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC3:%3.1f", line_trace.getMaxAcc2());
 800a5b2:	4857      	ldr	r0, [pc, #348]	; (800a710 <cppLoop+0x25c8>)
 800a5b4:	f7f9 fca8 	bl	8003f08 <_ZN9LineTrace10getMaxAcc2Ev>
 800a5b8:	ee10 3a10 	vmov	r3, s0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f5 ffdb 	bl	8000578 <__aeabi_f2d>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	4852      	ldr	r0, [pc, #328]	; (800a714 <cppLoop+0x25cc>)
 800a5cc:	f7f6 fda2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	f7f6 fd74 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC3:%3.1f", line_trace.getMaxDec2());
 800a5d8:	484d      	ldr	r0, [pc, #308]	; (800a710 <cppLoop+0x25c8>)
 800a5da:	f7f9 fca7 	bl	8003f2c <_ZN9LineTrace10getMaxDec2Ev>
 800a5de:	ee10 3a10 	vmov	r3, s0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f5 ffc8 	bl	8000578 <__aeabi_f2d>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4623      	mov	r3, r4
 800a5f0:	4849      	ldr	r0, [pc, #292]	; (800a718 <cppLoop+0x25d0>)
 800a5f2:	f7f6 fd8f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a5f6:	483e      	ldr	r0, [pc, #248]	; (800a6f0 <cppLoop+0x25a8>)
 800a5f8:	f7f7 fc12 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	bf0c      	ite	eq
 800a602:	2301      	moveq	r3, #1
 800a604:	2300      	movne	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d022      	beq.n	800a652 <cppLoop+0x250a>
			led.LR(-1, 1);
 800a60c:	2201      	movs	r2, #1
 800a60e:	f04f 31ff 	mov.w	r1, #4294967295
 800a612:	4838      	ldr	r0, [pc, #224]	; (800a6f4 <cppLoop+0x25ac>)
 800a614:	f7f7 fd24 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a618:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a61c:	f000 fef2 	bl	800b404 <HAL_Delay>

			selector_acc++;
 800a620:	4b35      	ldr	r3, [pc, #212]	; (800a6f8 <cppLoop+0x25b0>)
 800a622:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a626:	b29b      	uxth	r3, r3
 800a628:	3301      	adds	r3, #1
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	b21a      	sxth	r2, r3
 800a62e:	4b32      	ldr	r3, [pc, #200]	; (800a6f8 <cppLoop+0x25b0>)
 800a630:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a632:	4b31      	ldr	r3, [pc, #196]	; (800a6f8 <cppLoop+0x25b0>)
 800a634:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	dd02      	ble.n	800a642 <cppLoop+0x24fa>
 800a63c:	4b2e      	ldr	r3, [pc, #184]	; (800a6f8 <cppLoop+0x25b0>)
 800a63e:	2200      	movs	r2, #0
 800a640:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a642:	2200      	movs	r2, #0
 800a644:	f04f 31ff 	mov.w	r1, #4294967295
 800a648:	482a      	ldr	r0, [pc, #168]	; (800a6f4 <cppLoop+0x25ac>)
 800a64a:	f7f7 fd09 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800a64e:	f000 bd93 	b.w	800b178 <cppLoop+0x3030>
		else if(joy_stick.getValue() == JOY_R){
 800a652:	4827      	ldr	r0, [pc, #156]	; (800a6f0 <cppLoop+0x25a8>)
 800a654:	f7f7 fbe4 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b10      	cmp	r3, #16
 800a65c:	bf0c      	ite	eq
 800a65e:	2301      	moveq	r3, #1
 800a660:	2300      	movne	r3, #0
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	d05d      	beq.n	800a724 <cppLoop+0x25dc>
			led.LR(-1, 1);
 800a668:	2201      	movs	r2, #1
 800a66a:	f04f 31ff 	mov.w	r1, #4294967295
 800a66e:	4821      	ldr	r0, [pc, #132]	; (800a6f4 <cppLoop+0x25ac>)
 800a670:	f7f7 fcf6 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a674:	2064      	movs	r0, #100	; 0x64
 800a676:	f000 fec5 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a67a:	4b1f      	ldr	r3, [pc, #124]	; (800a6f8 <cppLoop+0x25b0>)
 800a67c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d113      	bne.n	800a6ac <cppLoop+0x2564>
				adj_acc2 = adj_acc2 + 0.1;
 800a684:	4b25      	ldr	r3, [pc, #148]	; (800a71c <cppLoop+0x25d4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f5 ff75 	bl	8000578 <__aeabi_f2d>
 800a68e:	a316      	add	r3, pc, #88	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fe12 	bl	80002bc <__adddf3>
 800a698:	4603      	mov	r3, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4618      	mov	r0, r3
 800a69e:	4621      	mov	r1, r4
 800a6a0:	f7f6 faba 	bl	8000c18 <__aeabi_d2f>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <cppLoop+0x25d4>)
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e012      	b.n	800a6d2 <cppLoop+0x258a>
				adj_dec2 = adj_dec2 + 0.1;
 800a6ac:	4b1c      	ldr	r3, [pc, #112]	; (800a720 <cppLoop+0x25d8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f5 ff61 	bl	8000578 <__aeabi_f2d>
 800a6b6:	a30c      	add	r3, pc, #48	; (adr r3, 800a6e8 <cppLoop+0x25a0>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f7f5 fdfe 	bl	80002bc <__adddf3>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f7f6 faa6 	bl	8000c18 <__aeabi_d2f>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <cppLoop+0x25d8>)
 800a6d0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a6d8:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <cppLoop+0x25ac>)
 800a6da:	f7f7 fcc1 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a6de:	f000 bd4b 	b.w	800b178 <cppLoop+0x3030>
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	9999999a 	.word	0x9999999a
 800a6ec:	3fb99999 	.word	0x3fb99999
 800a6f0:	2000056c 	.word	0x2000056c
 800a6f4:	20000578 	.word	0x20000578
 800a6f8:	200475a0 	.word	0x200475a0
 800a6fc:	2004761c 	.word	0x2004761c
 800a700:	20047624 	.word	0x20047624
 800a704:	0801a728 	.word	0x0801a728
 800a708:	0801a5e8 	.word	0x0801a5e8
 800a70c:	0801a730 	.word	0x0801a730
 800a710:	200209f4 	.word	0x200209f4
 800a714:	0801a738 	.word	0x0801a738
 800a718:	0801a744 	.word	0x0801a744
 800a71c:	2004762c 	.word	0x2004762c
 800a720:	20047634 	.word	0x20047634
		else if(joy_stick.getValue() == JOY_L){
 800a724:	48b8      	ldr	r0, [pc, #736]	; (800aa08 <cppLoop+0x28c0>)
 800a726:	f7f7 fb7b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	bf0c      	ite	eq
 800a730:	2301      	moveq	r3, #1
 800a732:	2300      	movne	r3, #0
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d03c      	beq.n	800a7b4 <cppLoop+0x266c>
			led.LR(-1, 1);
 800a73a:	2201      	movs	r2, #1
 800a73c:	f04f 31ff 	mov.w	r1, #4294967295
 800a740:	48b2      	ldr	r0, [pc, #712]	; (800aa0c <cppLoop+0x28c4>)
 800a742:	f7f7 fc8d 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a746:	2064      	movs	r0, #100	; 0x64
 800a748:	f000 fe5c 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a74c:	4bb0      	ldr	r3, [pc, #704]	; (800aa10 <cppLoop+0x28c8>)
 800a74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d113      	bne.n	800a77e <cppLoop+0x2636>
				adj_acc2 = adj_acc2 - 0.1;
 800a756:	4baf      	ldr	r3, [pc, #700]	; (800aa14 <cppLoop+0x28cc>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f5 ff0c 	bl	8000578 <__aeabi_f2d>
 800a760:	a3a7      	add	r3, pc, #668	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fda7 	bl	80002b8 <__aeabi_dsub>
 800a76a:	4603      	mov	r3, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	4618      	mov	r0, r3
 800a770:	4621      	mov	r1, r4
 800a772:	f7f6 fa51 	bl	8000c18 <__aeabi_d2f>
 800a776:	4602      	mov	r2, r0
 800a778:	4ba6      	ldr	r3, [pc, #664]	; (800aa14 <cppLoop+0x28cc>)
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	e012      	b.n	800a7a4 <cppLoop+0x265c>
				adj_dec2 = adj_dec2 - 0.1;
 800a77e:	4ba6      	ldr	r3, [pc, #664]	; (800aa18 <cppLoop+0x28d0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f7f5 fef8 	bl	8000578 <__aeabi_f2d>
 800a788:	a39d      	add	r3, pc, #628	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 fd93 	bl	80002b8 <__aeabi_dsub>
 800a792:	4603      	mov	r3, r0
 800a794:	460c      	mov	r4, r1
 800a796:	4618      	mov	r0, r3
 800a798:	4621      	mov	r1, r4
 800a79a:	f7f6 fa3d 	bl	8000c18 <__aeabi_d2f>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	4b9d      	ldr	r3, [pc, #628]	; (800aa18 <cppLoop+0x28d0>)
 800a7a2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a7aa:	4898      	ldr	r0, [pc, #608]	; (800aa0c <cppLoop+0x28c4>)
 800a7ac:	f7f7 fc58 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a7b0:	f000 bce2 	b.w	800b178 <cppLoop+0x3030>
		else if(joy_stick.getValue() == JOY_C){
 800a7b4:	4894      	ldr	r0, [pc, #592]	; (800aa08 <cppLoop+0x28c0>)
 800a7b6:	f7f7 fb33 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	bf0c      	ite	eq
 800a7c0:	2301      	moveq	r3, #1
 800a7c2:	2300      	movne	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 84d6 	beq.w	800b178 <cppLoop+0x3030>
			led.LR(-1, 1);
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a7d2:	488e      	ldr	r0, [pc, #568]	; (800aa0c <cppLoop+0x28c4>)
 800a7d4:	f7f7 fc44 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a7d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a7dc:	f000 fe12 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4b8b      	ldr	r3, [pc, #556]	; (800aa14 <cppLoop+0x28cc>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	498c      	ldr	r1, [pc, #560]	; (800aa1c <cppLoop+0x28d4>)
 800a7ea:	488d      	ldr	r0, [pc, #564]	; (800aa20 <cppLoop+0x28d8>)
 800a7ec:	f7f6 ffb2 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	4b88      	ldr	r3, [pc, #544]	; (800aa18 <cppLoop+0x28d0>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	498a      	ldr	r1, [pc, #552]	; (800aa24 <cppLoop+0x28dc>)
 800a7fa:	4889      	ldr	r0, [pc, #548]	; (800aa20 <cppLoop+0x28d8>)
 800a7fc:	f7f6 ffaa 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800a800:	4b84      	ldr	r3, [pc, #528]	; (800aa14 <cppLoop+0x28cc>)
 800a802:	edd3 7a00 	vldr	s15, [r3]
 800a806:	4b84      	ldr	r3, [pc, #528]	; (800aa18 <cppLoop+0x28d0>)
 800a808:	ed93 7a00 	vldr	s14, [r3]
 800a80c:	eef0 0a47 	vmov.f32	s1, s14
 800a810:	eeb0 0a67 	vmov.f32	s0, s15
 800a814:	4884      	ldr	r0, [pc, #528]	; (800aa28 <cppLoop+0x28e0>)
 800a816:	f7f9 fb05 	bl	8003e24 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800a81a:	2200      	movs	r2, #0
 800a81c:	f04f 31ff 	mov.w	r1, #4294967295
 800a820:	487a      	ldr	r0, [pc, #488]	; (800aa0c <cppLoop+0x28c4>)
 800a822:	f7f7 fc1d 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a826:	f000 bca7 	b.w	800b178 <cppLoop+0x3030>


	case 9:
		led.fullColor('W');
 800a82a:	2157      	movs	r1, #87	; 0x57
 800a82c:	4877      	ldr	r0, [pc, #476]	; (800aa0c <cppLoop+0x28c4>)
 800a82e:	f7f7 fb5b 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a832:	f7f6 fc35 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a836:	2100      	movs	r1, #0
 800a838:	2000      	movs	r0, #0
 800a83a:	f7f6 fc41 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC4:%3.1f", line_trace.getMaxAcc3());
 800a83e:	487a      	ldr	r0, [pc, #488]	; (800aa28 <cppLoop+0x28e0>)
 800a840:	f7f9 fb86 	bl	8003f50 <_ZN9LineTrace10getMaxAcc3Ev>
 800a844:	ee10 3a10 	vmov	r3, s0
 800a848:	4618      	mov	r0, r3
 800a84a:	f7f5 fe95 	bl	8000578 <__aeabi_f2d>
 800a84e:	4603      	mov	r3, r0
 800a850:	460c      	mov	r4, r1
 800a852:	461a      	mov	r2, r3
 800a854:	4623      	mov	r3, r4
 800a856:	4875      	ldr	r0, [pc, #468]	; (800aa2c <cppLoop+0x28e4>)
 800a858:	f7f6 fc5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a85c:	2101      	movs	r1, #1
 800a85e:	2000      	movs	r0, #0
 800a860:	f7f6 fc2e 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC4:%3.1f", line_trace.getMaxDec3());
 800a864:	4870      	ldr	r0, [pc, #448]	; (800aa28 <cppLoop+0x28e0>)
 800a866:	f7f9 fb85 	bl	8003f74 <_ZN9LineTrace10getMaxDec3Ev>
 800a86a:	ee10 3a10 	vmov	r3, s0
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f5 fe82 	bl	8000578 <__aeabi_f2d>
 800a874:	4603      	mov	r3, r0
 800a876:	460c      	mov	r4, r1
 800a878:	461a      	mov	r2, r3
 800a87a:	4623      	mov	r3, r4
 800a87c:	486c      	ldr	r0, [pc, #432]	; (800aa30 <cppLoop+0x28e8>)
 800a87e:	f7f6 fc49 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a882:	4861      	ldr	r0, [pc, #388]	; (800aa08 <cppLoop+0x28c0>)
 800a884:	f7f7 facc 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	bf0c      	ite	eq
 800a88e:	2301      	moveq	r3, #1
 800a890:	2300      	movne	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d022      	beq.n	800a8de <cppLoop+0x2796>
			led.LR(-1, 1);
 800a898:	2201      	movs	r2, #1
 800a89a:	f04f 31ff 	mov.w	r1, #4294967295
 800a89e:	485b      	ldr	r0, [pc, #364]	; (800aa0c <cppLoop+0x28c4>)
 800a8a0:	f7f7 fbde 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a8a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a8a8:	f000 fdac 	bl	800b404 <HAL_Delay>

			selector_acc++;
 800a8ac:	4b58      	ldr	r3, [pc, #352]	; (800aa10 <cppLoop+0x28c8>)
 800a8ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	b21a      	sxth	r2, r3
 800a8ba:	4b55      	ldr	r3, [pc, #340]	; (800aa10 <cppLoop+0x28c8>)
 800a8bc:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a8be:	4b54      	ldr	r3, [pc, #336]	; (800aa10 <cppLoop+0x28c8>)
 800a8c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	dd02      	ble.n	800a8ce <cppLoop+0x2786>
 800a8c8:	4b51      	ldr	r3, [pc, #324]	; (800aa10 <cppLoop+0x28c8>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d4:	484d      	ldr	r0, [pc, #308]	; (800aa0c <cppLoop+0x28c4>)
 800a8d6:	f7f7 fbc3 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);

			led.LR(-1, 0);
		}
		break;
 800a8da:	f000 bc4f 	b.w	800b17c <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_R){
 800a8de:	484a      	ldr	r0, [pc, #296]	; (800aa08 <cppLoop+0x28c0>)
 800a8e0:	f7f7 fa9e 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b10      	cmp	r3, #16
 800a8e8:	bf0c      	ite	eq
 800a8ea:	2301      	moveq	r3, #1
 800a8ec:	2300      	movne	r3, #0
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d03c      	beq.n	800a96e <cppLoop+0x2826>
			led.LR(-1, 1);
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a8fa:	4844      	ldr	r0, [pc, #272]	; (800aa0c <cppLoop+0x28c4>)
 800a8fc:	f7f7 fbb0 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a900:	2064      	movs	r0, #100	; 0x64
 800a902:	f000 fd7f 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a906:	4b42      	ldr	r3, [pc, #264]	; (800aa10 <cppLoop+0x28c8>)
 800a908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d113      	bne.n	800a938 <cppLoop+0x27f0>
				adj_acc3 = adj_acc3 + 0.1;
 800a910:	4b48      	ldr	r3, [pc, #288]	; (800aa34 <cppLoop+0x28ec>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4618      	mov	r0, r3
 800a916:	f7f5 fe2f 	bl	8000578 <__aeabi_f2d>
 800a91a:	a339      	add	r3, pc, #228	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fccc 	bl	80002bc <__adddf3>
 800a924:	4603      	mov	r3, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4618      	mov	r0, r3
 800a92a:	4621      	mov	r1, r4
 800a92c:	f7f6 f974 	bl	8000c18 <__aeabi_d2f>
 800a930:	4602      	mov	r2, r0
 800a932:	4b40      	ldr	r3, [pc, #256]	; (800aa34 <cppLoop+0x28ec>)
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	e012      	b.n	800a95e <cppLoop+0x2816>
				adj_dec3 = adj_dec3 + 0.1;
 800a938:	4b3f      	ldr	r3, [pc, #252]	; (800aa38 <cppLoop+0x28f0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7f5 fe1b 	bl	8000578 <__aeabi_f2d>
 800a942:	a32f      	add	r3, pc, #188	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fcb8 	bl	80002bc <__adddf3>
 800a94c:	4603      	mov	r3, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4618      	mov	r0, r3
 800a952:	4621      	mov	r1, r4
 800a954:	f7f6 f960 	bl	8000c18 <__aeabi_d2f>
 800a958:	4602      	mov	r2, r0
 800a95a:	4b37      	ldr	r3, [pc, #220]	; (800aa38 <cppLoop+0x28f0>)
 800a95c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a95e:	2200      	movs	r2, #0
 800a960:	f04f 31ff 	mov.w	r1, #4294967295
 800a964:	4829      	ldr	r0, [pc, #164]	; (800aa0c <cppLoop+0x28c4>)
 800a966:	f7f7 fb7b 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a96a:	f000 bc07 	b.w	800b17c <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_L){
 800a96e:	4826      	ldr	r0, [pc, #152]	; (800aa08 <cppLoop+0x28c0>)
 800a970:	f7f7 fa56 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800a974:	4603      	mov	r3, r0
 800a976:	2b01      	cmp	r3, #1
 800a978:	bf0c      	ite	eq
 800a97a:	2301      	moveq	r3, #1
 800a97c:	2300      	movne	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d05b      	beq.n	800aa3c <cppLoop+0x28f4>
			led.LR(-1, 1);
 800a984:	2201      	movs	r2, #1
 800a986:	f04f 31ff 	mov.w	r1, #4294967295
 800a98a:	4820      	ldr	r0, [pc, #128]	; (800aa0c <cppLoop+0x28c4>)
 800a98c:	f7f7 fb68 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a990:	2064      	movs	r0, #100	; 0x64
 800a992:	f000 fd37 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800a996:	4b1e      	ldr	r3, [pc, #120]	; (800aa10 <cppLoop+0x28c8>)
 800a998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d113      	bne.n	800a9c8 <cppLoop+0x2880>
				adj_acc3 = adj_acc3 - 0.1;
 800a9a0:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <cppLoop+0x28ec>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f5 fde7 	bl	8000578 <__aeabi_f2d>
 800a9aa:	a315      	add	r3, pc, #84	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fc82 	bl	80002b8 <__aeabi_dsub>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f7f6 f92c 	bl	8000c18 <__aeabi_d2f>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <cppLoop+0x28ec>)
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	e012      	b.n	800a9ee <cppLoop+0x28a6>
				adj_dec3 = adj_dec3 - 0.1;
 800a9c8:	4b1b      	ldr	r3, [pc, #108]	; (800aa38 <cppLoop+0x28f0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7f5 fdd3 	bl	8000578 <__aeabi_f2d>
 800a9d2:	a30b      	add	r3, pc, #44	; (adr r3, 800aa00 <cppLoop+0x28b8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fc6e 	bl	80002b8 <__aeabi_dsub>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	f7f6 f918 	bl	8000c18 <__aeabi_d2f>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <cppLoop+0x28f0>)
 800a9ec:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9f4:	4805      	ldr	r0, [pc, #20]	; (800aa0c <cppLoop+0x28c4>)
 800a9f6:	f7f7 fb33 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800a9fa:	e3bf      	b.n	800b17c <cppLoop+0x3034>
 800a9fc:	f3af 8000 	nop.w
 800aa00:	9999999a 	.word	0x9999999a
 800aa04:	3fb99999 	.word	0x3fb99999
 800aa08:	2000056c 	.word	0x2000056c
 800aa0c:	20000578 	.word	0x20000578
 800aa10:	200475a0 	.word	0x200475a0
 800aa14:	2004762c 	.word	0x2004762c
 800aa18:	20047634 	.word	0x20047634
 800aa1c:	0801a750 	.word	0x0801a750
 800aa20:	0801a5e8 	.word	0x0801a5e8
 800aa24:	0801a75c 	.word	0x0801a75c
 800aa28:	200209f4 	.word	0x200209f4
 800aa2c:	0801a768 	.word	0x0801a768
 800aa30:	0801a774 	.word	0x0801a774
 800aa34:	2004763c 	.word	0x2004763c
 800aa38:	20047644 	.word	0x20047644
		else if(joy_stick.getValue() == JOY_C){
 800aa3c:	48b0      	ldr	r0, [pc, #704]	; (800ad00 <cppLoop+0x2bb8>)
 800aa3e:	f7f7 f9ef 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	bf0c      	ite	eq
 800aa48:	2301      	moveq	r3, #1
 800aa4a:	2300      	movne	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 8394 	beq.w	800b17c <cppLoop+0x3034>
			led.LR(-1, 1);
 800aa54:	2201      	movs	r2, #1
 800aa56:	f04f 31ff 	mov.w	r1, #4294967295
 800aa5a:	48aa      	ldr	r0, [pc, #680]	; (800ad04 <cppLoop+0x2bbc>)
 800aa5c:	f7f7 fb00 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800aa60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800aa64:	f000 fcce 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC3.TXT", 1, &adj_acc3, OVER_WRITE);
 800aa68:	2300      	movs	r3, #0
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	4ba6      	ldr	r3, [pc, #664]	; (800ad08 <cppLoop+0x2bc0>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	49a6      	ldr	r1, [pc, #664]	; (800ad0c <cppLoop+0x2bc4>)
 800aa72:	48a7      	ldr	r0, [pc, #668]	; (800ad10 <cppLoop+0x2bc8>)
 800aa74:	f7f6 fe6e 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	4ba5      	ldr	r3, [pc, #660]	; (800ad14 <cppLoop+0x2bcc>)
 800aa7e:	2201      	movs	r2, #1
 800aa80:	49a5      	ldr	r1, [pc, #660]	; (800ad18 <cppLoop+0x2bd0>)
 800aa82:	48a3      	ldr	r0, [pc, #652]	; (800ad10 <cppLoop+0x2bc8>)
 800aa84:	f7f6 fe66 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);
 800aa88:	4b9f      	ldr	r3, [pc, #636]	; (800ad08 <cppLoop+0x2bc0>)
 800aa8a:	edd3 7a00 	vldr	s15, [r3]
 800aa8e:	4ba1      	ldr	r3, [pc, #644]	; (800ad14 <cppLoop+0x2bcc>)
 800aa90:	ed93 7a00 	vldr	s14, [r3]
 800aa94:	eef0 0a47 	vmov.f32	s1, s14
 800aa98:	eeb0 0a67 	vmov.f32	s0, s15
 800aa9c:	489f      	ldr	r0, [pc, #636]	; (800ad1c <cppLoop+0x2bd4>)
 800aa9e:	f7f9 f9db 	bl	8003e58 <_ZN9LineTrace13setMaxAccDec3Eff>
			led.LR(-1, 0);
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f04f 31ff 	mov.w	r1, #4294967295
 800aaa8:	4896      	ldr	r0, [pc, #600]	; (800ad04 <cppLoop+0x2bbc>)
 800aaaa:	f7f7 fad9 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800aaae:	e365      	b.n	800b17c <cppLoop+0x3034>

	case 10:
		led.fullColor('W');
 800aab0:	2157      	movs	r1, #87	; 0x57
 800aab2:	4894      	ldr	r0, [pc, #592]	; (800ad04 <cppLoop+0x2bbc>)
 800aab4:	f7f7 fa18 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800aab8:	f7f6 faf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800aabc:	2100      	movs	r1, #0
 800aabe:	2000      	movs	r0, #0
 800aac0:	f7f6 fafe 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC5:%3.1f", line_trace.getMaxAcc4());
 800aac4:	4895      	ldr	r0, [pc, #596]	; (800ad1c <cppLoop+0x2bd4>)
 800aac6:	f7f9 fa67 	bl	8003f98 <_ZN9LineTrace10getMaxAcc4Ev>
 800aaca:	ee10 3a10 	vmov	r3, s0
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f5 fd52 	bl	8000578 <__aeabi_f2d>
 800aad4:	4603      	mov	r3, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	461a      	mov	r2, r3
 800aada:	4623      	mov	r3, r4
 800aadc:	4890      	ldr	r0, [pc, #576]	; (800ad20 <cppLoop+0x2bd8>)
 800aade:	f7f6 fb19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800aae2:	2101      	movs	r1, #1
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f6 faeb 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC5:%3.1f", line_trace.getMaxDec4());
 800aaea:	488c      	ldr	r0, [pc, #560]	; (800ad1c <cppLoop+0x2bd4>)
 800aaec:	f7f9 fa66 	bl	8003fbc <_ZN9LineTrace10getMaxDec4Ev>
 800aaf0:	ee10 3a10 	vmov	r3, s0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f5 fd3f 	bl	8000578 <__aeabi_f2d>
 800aafa:	4603      	mov	r3, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	461a      	mov	r2, r3
 800ab00:	4623      	mov	r3, r4
 800ab02:	4888      	ldr	r0, [pc, #544]	; (800ad24 <cppLoop+0x2bdc>)
 800ab04:	f7f6 fb06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800ab08:	487d      	ldr	r0, [pc, #500]	; (800ad00 <cppLoop+0x2bb8>)
 800ab0a:	f7f7 f989 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	bf0c      	ite	eq
 800ab14:	2301      	moveq	r3, #1
 800ab16:	2300      	movne	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d021      	beq.n	800ab62 <cppLoop+0x2a1a>
			led.LR(-1, 1);
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f04f 31ff 	mov.w	r1, #4294967295
 800ab24:	4877      	ldr	r0, [pc, #476]	; (800ad04 <cppLoop+0x2bbc>)
 800ab26:	f7f7 fa9b 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ab2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ab2e:	f000 fc69 	bl	800b404 <HAL_Delay>

			selector_acc++;
 800ab32:	4b7d      	ldr	r3, [pc, #500]	; (800ad28 <cppLoop+0x2be0>)
 800ab34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	b21a      	sxth	r2, r3
 800ab40:	4b79      	ldr	r3, [pc, #484]	; (800ad28 <cppLoop+0x2be0>)
 800ab42:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800ab44:	4b78      	ldr	r3, [pc, #480]	; (800ad28 <cppLoop+0x2be0>)
 800ab46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	dd02      	ble.n	800ab54 <cppLoop+0x2a0c>
 800ab4e:	4b76      	ldr	r3, [pc, #472]	; (800ad28 <cppLoop+0x2be0>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800ab54:	2200      	movs	r2, #0
 800ab56:	f04f 31ff 	mov.w	r1, #4294967295
 800ab5a:	486a      	ldr	r0, [pc, #424]	; (800ad04 <cppLoop+0x2bbc>)
 800ab5c:	f7f7 fa80 	bl	8002060 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);

			led.LR(-1, 0);
		}
		break;
 800ab60:	e30e      	b.n	800b180 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_R){
 800ab62:	4867      	ldr	r0, [pc, #412]	; (800ad00 <cppLoop+0x2bb8>)
 800ab64:	f7f7 f95c 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b10      	cmp	r3, #16
 800ab6c:	bf0c      	ite	eq
 800ab6e:	2301      	moveq	r3, #1
 800ab70:	2300      	movne	r3, #0
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d03b      	beq.n	800abf0 <cppLoop+0x2aa8>
			led.LR(-1, 1);
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ab7e:	4861      	ldr	r0, [pc, #388]	; (800ad04 <cppLoop+0x2bbc>)
 800ab80:	f7f7 fa6e 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ab84:	2064      	movs	r0, #100	; 0x64
 800ab86:	f000 fc3d 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800ab8a:	4b67      	ldr	r3, [pc, #412]	; (800ad28 <cppLoop+0x2be0>)
 800ab8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d113      	bne.n	800abbc <cppLoop+0x2a74>
				adj_acc4 = adj_acc4 + 0.1;
 800ab94:	4b65      	ldr	r3, [pc, #404]	; (800ad2c <cppLoop+0x2be4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f5 fced 	bl	8000578 <__aeabi_f2d>
 800ab9e:	a356      	add	r3, pc, #344	; (adr r3, 800acf8 <cppLoop+0x2bb0>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb8a 	bl	80002bc <__adddf3>
 800aba8:	4603      	mov	r3, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	4618      	mov	r0, r3
 800abae:	4621      	mov	r1, r4
 800abb0:	f7f6 f832 	bl	8000c18 <__aeabi_d2f>
 800abb4:	4602      	mov	r2, r0
 800abb6:	4b5d      	ldr	r3, [pc, #372]	; (800ad2c <cppLoop+0x2be4>)
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	e012      	b.n	800abe2 <cppLoop+0x2a9a>
				adj_dec4 = adj_dec4 + 0.1;
 800abbc:	4b5c      	ldr	r3, [pc, #368]	; (800ad30 <cppLoop+0x2be8>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7f5 fcd9 	bl	8000578 <__aeabi_f2d>
 800abc6:	a34c      	add	r3, pc, #304	; (adr r3, 800acf8 <cppLoop+0x2bb0>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fb76 	bl	80002bc <__adddf3>
 800abd0:	4603      	mov	r3, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	4618      	mov	r0, r3
 800abd6:	4621      	mov	r1, r4
 800abd8:	f7f6 f81e 	bl	8000c18 <__aeabi_d2f>
 800abdc:	4602      	mov	r2, r0
 800abde:	4b54      	ldr	r3, [pc, #336]	; (800ad30 <cppLoop+0x2be8>)
 800abe0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800abe2:	2200      	movs	r2, #0
 800abe4:	f04f 31ff 	mov.w	r1, #4294967295
 800abe8:	4846      	ldr	r0, [pc, #280]	; (800ad04 <cppLoop+0x2bbc>)
 800abea:	f7f7 fa39 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800abee:	e2c7      	b.n	800b180 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_L){
 800abf0:	4843      	ldr	r0, [pc, #268]	; (800ad00 <cppLoop+0x2bb8>)
 800abf2:	f7f7 f915 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	bf0c      	ite	eq
 800abfc:	2301      	moveq	r3, #1
 800abfe:	2300      	movne	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d03b      	beq.n	800ac7e <cppLoop+0x2b36>
			led.LR(-1, 1);
 800ac06:	2201      	movs	r2, #1
 800ac08:	f04f 31ff 	mov.w	r1, #4294967295
 800ac0c:	483d      	ldr	r0, [pc, #244]	; (800ad04 <cppLoop+0x2bbc>)
 800ac0e:	f7f7 fa27 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ac12:	2064      	movs	r0, #100	; 0x64
 800ac14:	f000 fbf6 	bl	800b404 <HAL_Delay>
			if(selector_acc == 0){
 800ac18:	4b43      	ldr	r3, [pc, #268]	; (800ad28 <cppLoop+0x2be0>)
 800ac1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d113      	bne.n	800ac4a <cppLoop+0x2b02>
				adj_acc4 = adj_acc4 - 0.1;
 800ac22:	4b42      	ldr	r3, [pc, #264]	; (800ad2c <cppLoop+0x2be4>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f5 fca6 	bl	8000578 <__aeabi_f2d>
 800ac2c:	a332      	add	r3, pc, #200	; (adr r3, 800acf8 <cppLoop+0x2bb0>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fb41 	bl	80002b8 <__aeabi_dsub>
 800ac36:	4603      	mov	r3, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7f5 ffeb 	bl	8000c18 <__aeabi_d2f>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b39      	ldr	r3, [pc, #228]	; (800ad2c <cppLoop+0x2be4>)
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	e012      	b.n	800ac70 <cppLoop+0x2b28>
				adj_dec4 = adj_dec4 - 0.1;
 800ac4a:	4b39      	ldr	r3, [pc, #228]	; (800ad30 <cppLoop+0x2be8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f5 fc92 	bl	8000578 <__aeabi_f2d>
 800ac54:	a328      	add	r3, pc, #160	; (adr r3, 800acf8 <cppLoop+0x2bb0>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f7f5 fb2d 	bl	80002b8 <__aeabi_dsub>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	4618      	mov	r0, r3
 800ac64:	4621      	mov	r1, r4
 800ac66:	f7f5 ffd7 	bl	8000c18 <__aeabi_d2f>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4b30      	ldr	r3, [pc, #192]	; (800ad30 <cppLoop+0x2be8>)
 800ac6e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ac70:	2200      	movs	r2, #0
 800ac72:	f04f 31ff 	mov.w	r1, #4294967295
 800ac76:	4823      	ldr	r0, [pc, #140]	; (800ad04 <cppLoop+0x2bbc>)
 800ac78:	f7f7 f9f2 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800ac7c:	e280      	b.n	800b180 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_C){
 800ac7e:	4820      	ldr	r0, [pc, #128]	; (800ad00 <cppLoop+0x2bb8>)
 800ac80:	f7f7 f8ce 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	bf0c      	ite	eq
 800ac8a:	2301      	moveq	r3, #1
 800ac8c:	2300      	movne	r3, #0
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8275 	beq.w	800b180 <cppLoop+0x3038>
			led.LR(-1, 1);
 800ac96:	2201      	movs	r2, #1
 800ac98:	f04f 31ff 	mov.w	r1, #4294967295
 800ac9c:	4819      	ldr	r0, [pc, #100]	; (800ad04 <cppLoop+0x2bbc>)
 800ac9e:	f7f7 f9df 	bl	8002060 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800aca2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800aca6:	f000 fbad 	bl	800b404 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC4.TXT", 1, &adj_acc4, OVER_WRITE);
 800acaa:	2300      	movs	r3, #0
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4b1f      	ldr	r3, [pc, #124]	; (800ad2c <cppLoop+0x2be4>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	4920      	ldr	r1, [pc, #128]	; (800ad34 <cppLoop+0x2bec>)
 800acb4:	4816      	ldr	r0, [pc, #88]	; (800ad10 <cppLoop+0x2bc8>)
 800acb6:	f7f6 fd4d 	bl	8001754 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
 800acba:	2300      	movs	r3, #0
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	4b1c      	ldr	r3, [pc, #112]	; (800ad30 <cppLoop+0x2be8>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	491d      	ldr	r1, [pc, #116]	; (800ad38 <cppLoop+0x2bf0>)
 800acc4:	4812      	ldr	r0, [pc, #72]	; (800ad10 <cppLoop+0x2bc8>)
 800acc6:	f7f6 fd45 	bl	8001754 <sd_write_array_float>
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);
 800acca:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <cppLoop+0x2be4>)
 800accc:	edd3 7a00 	vldr	s15, [r3]
 800acd0:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <cppLoop+0x2be8>)
 800acd2:	ed93 7a00 	vldr	s14, [r3]
 800acd6:	eef0 0a47 	vmov.f32	s1, s14
 800acda:	eeb0 0a67 	vmov.f32	s0, s15
 800acde:	480f      	ldr	r0, [pc, #60]	; (800ad1c <cppLoop+0x2bd4>)
 800ace0:	f7f9 f8d4 	bl	8003e8c <_ZN9LineTrace13setMaxAccDec4Eff>
			led.LR(-1, 0);
 800ace4:	2200      	movs	r2, #0
 800ace6:	f04f 31ff 	mov.w	r1, #4294967295
 800acea:	4806      	ldr	r0, [pc, #24]	; (800ad04 <cppLoop+0x2bbc>)
 800acec:	f7f7 f9b8 	bl	8002060 <_ZN3LED2LREaa>
		break;
 800acf0:	e246      	b.n	800b180 <cppLoop+0x3038>
 800acf2:	bf00      	nop
 800acf4:	f3af 8000 	nop.w
 800acf8:	9999999a 	.word	0x9999999a
 800acfc:	3fb99999 	.word	0x3fb99999
 800ad00:	2000056c 	.word	0x2000056c
 800ad04:	20000578 	.word	0x20000578
 800ad08:	2004763c 	.word	0x2004763c
 800ad0c:	0801a780 	.word	0x0801a780
 800ad10:	0801a5e8 	.word	0x0801a5e8
 800ad14:	20047644 	.word	0x20047644
 800ad18:	0801a78c 	.word	0x0801a78c
 800ad1c:	200209f4 	.word	0x200209f4
 800ad20:	0801a798 	.word	0x0801a798
 800ad24:	0801a7a4 	.word	0x0801a7a4
 800ad28:	200475a0 	.word	0x200475a0
 800ad2c:	2004764c 	.word	0x2004764c
 800ad30:	20047654 	.word	0x20047654
 800ad34:	0801a7b0 	.word	0x0801a7b0
 800ad38:	0801a7bc 	.word	0x0801a7bc

	case 11:
		led.fullColor('~');
 800ad3c:	217e      	movs	r1, #126	; 0x7e
 800ad3e:	48b6      	ldr	r0, [pc, #728]	; (800b018 <cppLoop+0x2ed0>)
 800ad40:	f7f7 f8d2 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ad44:	f7f6 f9ac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ad48:	2100      	movs	r1, #0
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	f7f6 f9b8 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800ad50:	48b2      	ldr	r0, [pc, #712]	; (800b01c <cppLoop+0x2ed4>)
 800ad52:	f7f6 f9df 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ad56:	2101      	movs	r1, #1
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f7f6 f9b1 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800ad5e:	48b0      	ldr	r0, [pc, #704]	; (800b020 <cppLoop+0x2ed8>)
 800ad60:	f7f6 f9d8 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800ad64:	48af      	ldr	r0, [pc, #700]	; (800b024 <cppLoop+0x2edc>)
 800ad66:	f7f7 f85b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	bf0c      	ite	eq
 800ad70:	2301      	moveq	r3, #1
 800ad72:	2300      	movne	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 8204 	beq.w	800b184 <cppLoop+0x303c>
			HAL_Delay(500);
 800ad7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad80:	f000 fb40 	bl	800b404 <HAL_Delay>
			led.LR(-1, 1);
 800ad84:	2201      	movs	r2, #1
 800ad86:	f04f 31ff 	mov.w	r1, #4294967295
 800ad8a:	48a3      	ldr	r0, [pc, #652]	; (800b018 <cppLoop+0x2ed0>)
 800ad8c:	f7f7 f968 	bl	8002060 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800ad90:	2102      	movs	r1, #2
 800ad92:	48a5      	ldr	r0, [pc, #660]	; (800b028 <cppLoop+0x2ee0>)
 800ad94:	f7f9 f9ea 	bl	800416c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800ad98:	4ba4      	ldr	r3, [pc, #656]	; (800b02c <cppLoop+0x2ee4>)
 800ad9a:	edd3 7a00 	vldr	s15, [r3]
 800ad9e:	eeb0 0a67 	vmov.f32	s0, s15
 800ada2:	48a1      	ldr	r0, [pc, #644]	; (800b028 <cppLoop+0x2ee0>)
 800ada4:	f7f8 ff04 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800ada8:	4ba0      	ldr	r3, [pc, #640]	; (800b02c <cppLoop+0x2ee4>)
 800adaa:	edd3 7a00 	vldr	s15, [r3]
 800adae:	eeb0 0a67 	vmov.f32	s0, s15
 800adb2:	489d      	ldr	r0, [pc, #628]	; (800b028 <cppLoop+0x2ee0>)
 800adb4:	f7f8 ff0c 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800adb8:	4b9c      	ldr	r3, [pc, #624]	; (800b02c <cppLoop+0x2ee4>)
 800adba:	edd3 7a00 	vldr	s15, [r3]
 800adbe:	eeb0 0a67 	vmov.f32	s0, s15
 800adc2:	4899      	ldr	r0, [pc, #612]	; (800b028 <cppLoop+0x2ee0>)
 800adc4:	f7f8 ff14 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800adc8:	4897      	ldr	r0, [pc, #604]	; (800b028 <cppLoop+0x2ee0>)
 800adca:	f7f9 fd37 	bl	800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800adce:	2200      	movs	r2, #0
 800add0:	f04f 31ff 	mov.w	r1, #4294967295
 800add4:	4890      	ldr	r0, [pc, #576]	; (800b018 <cppLoop+0x2ed0>)
 800add6:	f7f7 f943 	bl	8002060 <_ZN3LED2LREaa>
		}

		break;
 800adda:	e1d3      	b.n	800b184 <cppLoop+0x303c>

	case 12:
		led.fullColor('~');
 800addc:	217e      	movs	r1, #126	; 0x7e
 800adde:	488e      	ldr	r0, [pc, #568]	; (800b018 <cppLoop+0x2ed0>)
 800ade0:	f7f7 f882 	bl	8001ee8 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		lcd_clear();
 800ade4:	f7f6 f95c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ade8:	2100      	movs	r1, #0
 800adea:	2000      	movs	r0, #0
 800adec:	f7f6 f968 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 800adf0:	488f      	ldr	r0, [pc, #572]	; (800b030 <cppLoop+0x2ee8>)
 800adf2:	f7f6 f98f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800adf6:	2101      	movs	r1, #1
 800adf8:	2000      	movs	r0, #0
 800adfa:	f7f6 f961 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800adfe:	488d      	ldr	r0, [pc, #564]	; (800b034 <cppLoop+0x2eec>)
 800ae00:	f7f6 f988 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800ae04:	4887      	ldr	r0, [pc, #540]	; (800b024 <cppLoop+0x2edc>)
 800ae06:	f7f7 f80b 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	bf0c      	ite	eq
 800ae10:	2301      	moveq	r3, #1
 800ae12:	2300      	movne	r3, #0
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 81b6 	beq.w	800b188 <cppLoop+0x3040>
			led.fullColor('R');
 800ae1c:	2152      	movs	r1, #82	; 0x52
 800ae1e:	487e      	ldr	r0, [pc, #504]	; (800b018 <cppLoop+0x2ed0>)
 800ae20:	f7f7 f862 	bl	8001ee8 <_ZN3LED9fullColorEc>
			test_logger.clearLogs();
 800ae24:	4884      	ldr	r0, [pc, #528]	; (800b038 <cppLoop+0x2ef0>)
 800ae26:	f7fa f966 	bl	80050f6 <_ZN7Logger29clearLogsEv>
			test_logger.start();
 800ae2a:	4883      	ldr	r0, [pc, #524]	; (800b038 <cppLoop+0x2ef0>)
 800ae2c:	f7fa f984 	bl	8005138 <_ZN7Logger25startEv>

			for(int i = 1; i < 10; i++){
 800ae30:	2301      	movs	r3, #1
 800ae32:	607b      	str	r3, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	dc0d      	bgt.n	800ae56 <cppLoop+0x2d0e>
				test_logger.storeLogs(float(i));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	ee07 3a90 	vmov	s15, r3
 800ae40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae44:	eeb0 0a67 	vmov.f32	s0, s15
 800ae48:	487b      	ldr	r0, [pc, #492]	; (800b038 <cppLoop+0x2ef0>)
 800ae4a:	f7fa f915 	bl	8005078 <_ZN7Logger29storeLogsEf>
			for(int i = 1; i < 10; i++){
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3301      	adds	r3, #1
 800ae52:	607b      	str	r3, [r7, #4]
 800ae54:	e7ee      	b.n	800ae34 <cppLoop+0x2cec>
			}
			HAL_Delay(1000);
 800ae56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae5a:	f000 fad3 	bl	800b404 <HAL_Delay>

			test_logger.stop();
 800ae5e:	4876      	ldr	r0, [pc, #472]	; (800b038 <cppLoop+0x2ef0>)
 800ae60:	f7fa f97a 	bl	8005158 <_ZN7Logger24stopEv>
			test_logger.saveLogs("TEST", "SoIyA.txt");
 800ae64:	4a75      	ldr	r2, [pc, #468]	; (800b03c <cppLoop+0x2ef4>)
 800ae66:	4973      	ldr	r1, [pc, #460]	; (800b034 <cppLoop+0x2eec>)
 800ae68:	4873      	ldr	r0, [pc, #460]	; (800b038 <cppLoop+0x2ef0>)
 800ae6a:	f7fa f92c 	bl	80050c6 <_ZN7Logger28saveLogsEPKcS1_>
			led.fullColor('~');
 800ae6e:	217e      	movs	r1, #126	; 0x7e
 800ae70:	4869      	ldr	r0, [pc, #420]	; (800b018 <cppLoop+0x2ed0>)
 800ae72:	f7f7 f839 	bl	8001ee8 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		break;
 800ae76:	e187      	b.n	800b188 <cppLoop+0x3040>

	case 13:
		led.fullColor('~');
 800ae78:	217e      	movs	r1, #126	; 0x7e
 800ae7a:	4867      	ldr	r0, [pc, #412]	; (800b018 <cppLoop+0x2ed0>)
 800ae7c:	f7f7 f834 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ae80:	f7f6 f90e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ae84:	2100      	movs	r1, #0
 800ae86:	2000      	movs	r0, #0
 800ae88:	f7f6 f91a 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800ae8c:	486c      	ldr	r0, [pc, #432]	; (800b040 <cppLoop+0x2ef8>)
 800ae8e:	f7f6 f941 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ae92:	2101      	movs	r1, #1
 800ae94:	2000      	movs	r0, #0
 800ae96:	f7f6 f913 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800ae9a:	486a      	ldr	r0, [pc, #424]	; (800b044 <cppLoop+0x2efc>)
 800ae9c:	f7f6 f93a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800aea0:	4860      	ldr	r0, [pc, #384]	; (800b024 <cppLoop+0x2edc>)
 800aea2:	f7f6 ffbd 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	bf0c      	ite	eq
 800aeac:	2301      	moveq	r3, #1
 800aeae:	2300      	movne	r3, #0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 816a 	beq.w	800b18c <cppLoop+0x3044>
			HAL_Delay(1500);
 800aeb8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800aebc:	f000 faa2 	bl	800b404 <HAL_Delay>
			led.LR(-1, 1);
 800aec0:	2201      	movs	r2, #1
 800aec2:	f04f 31ff 	mov.w	r1, #4294967295
 800aec6:	4854      	ldr	r0, [pc, #336]	; (800b018 <cppLoop+0x2ed0>)
 800aec8:	f7f7 f8ca 	bl	8002060 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800aecc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aed0:	f000 fa98 	bl	800b404 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800aed4:	eddf 1a5c 	vldr	s3, [pc, #368]	; 800b048 <cppLoop+0x2f00>
 800aed8:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800b048 <cppLoop+0x2f00>
 800aedc:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800b048 <cppLoop+0x2f00>
 800aee0:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800b048 <cppLoop+0x2f00>
 800aee4:	4859      	ldr	r0, [pc, #356]	; (800b04c <cppLoop+0x2f04>)
 800aee6:	f7f6 f9b3 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800aeea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aeee:	f000 fa89 	bl	800b404 <HAL_Delay>

			logger.start();
 800aef2:	4857      	ldr	r0, [pc, #348]	; (800b050 <cppLoop+0x2f08>)
 800aef4:	f7fa f865 	bl	8004fc2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800aef8:	4856      	ldr	r0, [pc, #344]	; (800b054 <cppLoop+0x2f0c>)
 800aefa:	f7fb f8ea 	bl	80060d2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800aefe:	eddf 0a56 	vldr	s1, [pc, #344]	; 800b058 <cppLoop+0x2f10>
 800af02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af06:	4853      	ldr	r0, [pc, #332]	; (800b054 <cppLoop+0x2f0c>)
 800af08:	f7fb f876 	bl	8005ff8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800af0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af10:	f000 fa78 	bl	800b404 <HAL_Delay>

			logger.stop();
 800af14:	484e      	ldr	r0, [pc, #312]	; (800b050 <cppLoop+0x2f08>)
 800af16:	f7fa f873 	bl	8005000 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800af1a:	484e      	ldr	r0, [pc, #312]	; (800b054 <cppLoop+0x2f0c>)
 800af1c:	f7fb f8ec 	bl	80060f8 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800af20:	484a      	ldr	r0, [pc, #296]	; (800b04c <cppLoop+0x2f04>)
 800af22:	f7f6 fa2f 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800af26:	4a4d      	ldr	r2, [pc, #308]	; (800b05c <cppLoop+0x2f14>)
 800af28:	494d      	ldr	r1, [pc, #308]	; (800b060 <cppLoop+0x2f18>)
 800af2a:	4849      	ldr	r0, [pc, #292]	; (800b050 <cppLoop+0x2f08>)
 800af2c:	f7f9 ff01 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800af30:	2200      	movs	r2, #0
 800af32:	f04f 31ff 	mov.w	r1, #4294967295
 800af36:	4838      	ldr	r0, [pc, #224]	; (800b018 <cppLoop+0x2ed0>)
 800af38:	f7f7 f892 	bl	8002060 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800af3c:	e126      	b.n	800b18c <cppLoop+0x3044>

	case 14:

		led.fullColor('W');
 800af3e:	2157      	movs	r1, #87	; 0x57
 800af40:	4835      	ldr	r0, [pc, #212]	; (800b018 <cppLoop+0x2ed0>)
 800af42:	f7f6 ffd1 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800af46:	f7f6 f8ab 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800af4a:	2100      	movs	r1, #0
 800af4c:	2000      	movs	r0, #0
 800af4e:	f7f6 f8b7 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 800af52:	4844      	ldr	r0, [pc, #272]	; (800b064 <cppLoop+0x2f1c>)
 800af54:	f7f6 f8de 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800af58:	2101      	movs	r1, #1
 800af5a:	2000      	movs	r0, #0
 800af5c:	f7f6 f8b0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800af60:	4b32      	ldr	r3, [pc, #200]	; (800b02c <cppLoop+0x2ee4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f5 fb07 	bl	8000578 <__aeabi_f2d>
 800af6a:	4603      	mov	r3, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	461a      	mov	r2, r3
 800af70:	4623      	mov	r3, r4
 800af72:	483d      	ldr	r0, [pc, #244]	; (800b068 <cppLoop+0x2f20>)
 800af74:	f7f6 f8ce 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800af78:	482a      	ldr	r0, [pc, #168]	; (800b024 <cppLoop+0x2edc>)
 800af7a:	f7f6 ff51 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b02      	cmp	r3, #2
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8100 	beq.w	800b190 <cppLoop+0x3048>
			HAL_Delay(500);
 800af90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af94:	f000 fa36 	bl	800b404 <HAL_Delay>

			led.LR(1, -1);
 800af98:	f04f 32ff 	mov.w	r2, #4294967295
 800af9c:	2101      	movs	r1, #1
 800af9e:	481e      	ldr	r0, [pc, #120]	; (800b018 <cppLoop+0x2ed0>)
 800afa0:	f7f7 f85e 	bl	8002060 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800afa4:	2102      	movs	r1, #2
 800afa6:	4820      	ldr	r0, [pc, #128]	; (800b028 <cppLoop+0x2ee0>)
 800afa8:	f7f9 f8e0 	bl	800416c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800afac:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <cppLoop+0x2f24>)
 800afae:	edd3 7a00 	vldr	s15, [r3]
 800afb2:	eeb0 0a67 	vmov.f32	s0, s15
 800afb6:	481c      	ldr	r0, [pc, #112]	; (800b028 <cppLoop+0x2ee0>)
 800afb8:	f7f8 fdfa 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800afbc:	4b1b      	ldr	r3, [pc, #108]	; (800b02c <cppLoop+0x2ee4>)
 800afbe:	edd3 7a00 	vldr	s15, [r3]
 800afc2:	eeb0 0a67 	vmov.f32	s0, s15
 800afc6:	4818      	ldr	r0, [pc, #96]	; (800b028 <cppLoop+0x2ee0>)
 800afc8:	f7f8 fe02 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800afcc:	4b17      	ldr	r3, [pc, #92]	; (800b02c <cppLoop+0x2ee4>)
 800afce:	edd3 7a00 	vldr	s15, [r3]
 800afd2:	eeb0 0a67 	vmov.f32	s0, s15
 800afd6:	4814      	ldr	r0, [pc, #80]	; (800b028 <cppLoop+0x2ee0>)
 800afd8:	f7f8 fe0a 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800afdc:	4812      	ldr	r0, [pc, #72]	; (800b028 <cppLoop+0x2ee0>)
 800afde:	f7f9 fc2d 	bl	800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800afe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800afe6:	f000 fa0d 	bl	800b404 <HAL_Delay>

			line_trace.running();
 800afea:	480f      	ldr	r0, [pc, #60]	; (800b028 <cppLoop+0x2ee0>)
 800afec:	f7f9 f90e 	bl	800420c <_ZN9LineTrace7runningEv>
			logger.stop();
 800aff0:	4817      	ldr	r0, [pc, #92]	; (800b050 <cppLoop+0x2f08>)
 800aff2:	f7fa f805 	bl	8005000 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800aff6:	4a1e      	ldr	r2, [pc, #120]	; (800b070 <cppLoop+0x2f28>)
 800aff8:	491e      	ldr	r1, [pc, #120]	; (800b074 <cppLoop+0x2f2c>)
 800affa:	4815      	ldr	r0, [pc, #84]	; (800b050 <cppLoop+0x2f08>)
 800affc:	f7f9 fe99 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b000:	4a1d      	ldr	r2, [pc, #116]	; (800b078 <cppLoop+0x2f30>)
 800b002:	491c      	ldr	r1, [pc, #112]	; (800b074 <cppLoop+0x2f2c>)
 800b004:	4812      	ldr	r0, [pc, #72]	; (800b050 <cppLoop+0x2f08>)
 800b006:	f7f9 fea8 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800b00a:	f04f 32ff 	mov.w	r2, #4294967295
 800b00e:	2100      	movs	r1, #0
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <cppLoop+0x2ed0>)
 800b012:	f7f7 f825 	bl	8002060 <_ZN3LED2LREaa>
		}

		break;
 800b016:	e0bb      	b.n	800b190 <cppLoop+0x3048>
 800b018:	20000578 	.word	0x20000578
 800b01c:	0801a7c8 	.word	0x0801a7c8
 800b020:	0801a7d4 	.word	0x0801a7d4
 800b024:	2000056c 	.word	0x2000056c
 800b028:	200209f4 	.word	0x200209f4
 800b02c:	200475ec 	.word	0x200475ec
 800b030:	0801a7e0 	.word	0x0801a7e0
 800b034:	0801a7e4 	.word	0x0801a7e4
 800b038:	2004758c 	.word	0x2004758c
 800b03c:	0801a7ec 	.word	0x0801a7ec
 800b040:	0801a7f8 	.word	0x0801a7f8
 800b044:	0801a7fc 	.word	0x0801a7fc
 800b048:	3ea3d70a 	.word	0x3ea3d70a
 800b04c:	200209f0 	.word	0x200209f0
 800b050:	2000059c 	.word	0x2000059c
 800b054:	20020970 	.word	0x20020970
 800b058:	00000000 	.word	0x00000000
 800b05c:	0801a808 	.word	0x0801a808
 800b060:	0801a814 	.word	0x0801a814
 800b064:	0801a820 	.word	0x0801a820
 800b068:	0801a634 	.word	0x0801a634
 800b06c:	200475f4 	.word	0x200475f4
 800b070:	0801a640 	.word	0x0801a640
 800b074:	0801a64c 	.word	0x0801a64c
 800b078:	0801a658 	.word	0x0801a658

	case 15:
		led.fullColor('W');
 800b07c:	2157      	movs	r1, #87	; 0x57
 800b07e:	4849      	ldr	r0, [pc, #292]	; (800b1a4 <cppLoop+0x305c>)
 800b080:	f7f6 ff32 	bl	8001ee8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b084:	f7f6 f80c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b088:	2100      	movs	r1, #0
 800b08a:	2000      	movs	r0, #0
 800b08c:	f7f6 f818 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800b090:	4845      	ldr	r0, [pc, #276]	; (800b1a8 <cppLoop+0x3060>)
 800b092:	f7f6 f83f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b096:	2101      	movs	r1, #1
 800b098:	2000      	movs	r0, #0
 800b09a:	f7f6 f811 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800b09e:	4b43      	ldr	r3, [pc, #268]	; (800b1ac <cppLoop+0x3064>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7f5 fa68 	bl	8000578 <__aeabi_f2d>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	483f      	ldr	r0, [pc, #252]	; (800b1b0 <cppLoop+0x3068>)
 800b0b2:	f7f6 f82f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b0b6:	483f      	ldr	r0, [pc, #252]	; (800b1b4 <cppLoop+0x306c>)
 800b0b8:	f7f6 feb2 	bl	8001e20 <_ZN8JoyStick8getValueEv>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	bf0c      	ite	eq
 800b0c2:	2301      	moveq	r3, #1
 800b0c4:	2300      	movne	r3, #0
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d063      	beq.n	800b194 <cppLoop+0x304c>
			HAL_Delay(500);
 800b0cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0d0:	f000 f998 	bl	800b404 <HAL_Delay>

			led.LR(1, -1);
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	2101      	movs	r1, #1
 800b0da:	4832      	ldr	r0, [pc, #200]	; (800b1a4 <cppLoop+0x305c>)
 800b0dc:	f7f6 ffc0 	bl	8002060 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	4835      	ldr	r0, [pc, #212]	; (800b1b8 <cppLoop+0x3070>)
 800b0e4:	f7f9 f842 	bl	800416c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800b0e8:	4b34      	ldr	r3, [pc, #208]	; (800b1bc <cppLoop+0x3074>)
 800b0ea:	edd3 7a00 	vldr	s15, [r3]
 800b0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b0f2:	4831      	ldr	r0, [pc, #196]	; (800b1b8 <cppLoop+0x3070>)
 800b0f4:	f7f8 fd5c 	bl	8003bb0 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800b0f8:	4b2c      	ldr	r3, [pc, #176]	; (800b1ac <cppLoop+0x3064>)
 800b0fa:	edd3 7a00 	vldr	s15, [r3]
 800b0fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b102:	482d      	ldr	r0, [pc, #180]	; (800b1b8 <cppLoop+0x3070>)
 800b104:	f7f8 fd64 	bl	8003bd0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800b108:	4b2c      	ldr	r3, [pc, #176]	; (800b1bc <cppLoop+0x3074>)
 800b10a:	edd3 7a00 	vldr	s15, [r3]
 800b10e:	eeb0 0a67 	vmov.f32	s0, s15
 800b112:	4829      	ldr	r0, [pc, #164]	; (800b1b8 <cppLoop+0x3070>)
 800b114:	f7f8 fd6c 	bl	8003bf0 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b118:	4827      	ldr	r0, [pc, #156]	; (800b1b8 <cppLoop+0x3070>)
 800b11a:	f7f9 fb8f 	bl	800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b11e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b122:	f000 f96f 	bl	800b404 <HAL_Delay>

			line_trace.running();
 800b126:	4824      	ldr	r0, [pc, #144]	; (800b1b8 <cppLoop+0x3070>)
 800b128:	f7f9 f870 	bl	800420c <_ZN9LineTrace7runningEv>

			logger.stop();
 800b12c:	4824      	ldr	r0, [pc, #144]	; (800b1c0 <cppLoop+0x3078>)
 800b12e:	f7f9 ff67 	bl	8005000 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b132:	4a24      	ldr	r2, [pc, #144]	; (800b1c4 <cppLoop+0x307c>)
 800b134:	4924      	ldr	r1, [pc, #144]	; (800b1c8 <cppLoop+0x3080>)
 800b136:	4822      	ldr	r0, [pc, #136]	; (800b1c0 <cppLoop+0x3078>)
 800b138:	f7f9 fdfb 	bl	8004d32 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b13c:	4a23      	ldr	r2, [pc, #140]	; (800b1cc <cppLoop+0x3084>)
 800b13e:	4922      	ldr	r1, [pc, #136]	; (800b1c8 <cppLoop+0x3080>)
 800b140:	481f      	ldr	r0, [pc, #124]	; (800b1c0 <cppLoop+0x3078>)
 800b142:	f7f9 fe0a 	bl	8004d5a <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800b146:	f04f 32ff 	mov.w	r2, #4294967295
 800b14a:	2100      	movs	r1, #0
 800b14c:	4815      	ldr	r0, [pc, #84]	; (800b1a4 <cppLoop+0x305c>)
 800b14e:	f7f6 ff87 	bl	8002060 <_ZN3LED2LREaa>
		}

		break;
 800b152:	e01f      	b.n	800b194 <cppLoop+0x304c>


	default:
		break;
 800b154:	bf00      	nop
 800b156:	e01e      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b158:	bf00      	nop
 800b15a:	e01c      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b15c:	bf00      	nop
 800b15e:	e01a      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b160:	bf00      	nop
 800b162:	e018      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b164:	bf00      	nop
 800b166:	e016      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b168:	bf00      	nop
 800b16a:	e014      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b16c:	bf00      	nop
 800b16e:	e012      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b170:	bf00      	nop
 800b172:	e010      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b174:	bf00      	nop
 800b176:	e00e      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b178:	bf00      	nop
 800b17a:	e00c      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b17c:	bf00      	nop
 800b17e:	e00a      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b180:	bf00      	nop
 800b182:	e008      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b184:	bf00      	nop
 800b186:	e006      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b188:	bf00      	nop
 800b18a:	e004      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b18c:	bf00      	nop
 800b18e:	e002      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b190:	bf00      	nop
 800b192:	e000      	b.n	800b196 <cppLoop+0x304e>
		break;
 800b194:	bf00      	nop

	}

	HAL_Delay(30);
 800b196:	201e      	movs	r0, #30
 800b198:	f000 f934 	bl	800b404 <HAL_Delay>

}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a4:	20000578 	.word	0x20000578
 800b1a8:	0801a82c 	.word	0x0801a82c
 800b1ac:	200475dc 	.word	0x200475dc
 800b1b0:	0801a634 	.word	0x0801a634
 800b1b4:	2000056c 	.word	0x2000056c
 800b1b8:	200209f4 	.word	0x200209f4
 800b1bc:	200475e4 	.word	0x200475e4
 800b1c0:	2000059c 	.word	0x2000059c
 800b1c4:	0801a640 	.word	0x0801a640
 800b1c8:	0801a64c 	.word	0x0801a64c
 800b1cc:	0801a658 	.word	0x0801a658

0800b1d0 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af06      	add	r7, sp, #24
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d14a      	bne.n	800b276 <_Z41__static_initialization_and_destruction_0ii+0xa6>
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d145      	bne.n	800b276 <_Z41__static_initialization_and_destruction_0ii+0xa6>
LineSensor line_sensor;
 800b1ea:	4825      	ldr	r0, [pc, #148]	; (800b280 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b1ec:	f7f6 ff70 	bl	80020d0 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800b1f0:	4824      	ldr	r0, [pc, #144]	; (800b284 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b1f2:	f7fa fad1 	bl	8005798 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800b1f6:	4824      	ldr	r0, [pc, #144]	; (800b288 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b1f8:	f7f6 fe06 	bl	8001e08 <_ZN8JoyStickC1Ev>
Motor motor;
 800b1fc:	4823      	ldr	r0, [pc, #140]	; (800b28c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b1fe:	f7f9 ffb8 	bl	8005172 <_ZN5MotorC1Ev>
IMU imu;
 800b202:	4823      	ldr	r0, [pc, #140]	; (800b290 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b204:	f7f6 fca2 	bl	8001b4c <_ZN3IMUC1Ev>
Logger logger;
 800b208:	4822      	ldr	r0, [pc, #136]	; (800b294 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b20a:	f7f9 fc59 	bl	8004ac0 <_ZN6LoggerC1Ev>
Encoder encoder;
 800b20e:	4822      	ldr	r0, [pc, #136]	; (800b298 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b210:	f7f6 f8dc 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800b214:	4b1e      	ldr	r3, [pc, #120]	; (800b290 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b216:	4a20      	ldr	r2, [pc, #128]	; (800b298 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b218:	491c      	ldr	r1, [pc, #112]	; (800b28c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b21a:	4820      	ldr	r0, [pc, #128]	; (800b29c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b21c:	f7fa fdb6 	bl	8005d8c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800b220:	4b1e      	ldr	r3, [pc, #120]	; (800b29c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b222:	4a1b      	ldr	r2, [pc, #108]	; (800b290 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b224:	491c      	ldr	r1, [pc, #112]	; (800b298 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b226:	481e      	ldr	r0, [pc, #120]	; (800b2a0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b228:	f7fa f888 	bl	800533c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800b22c:	481d      	ldr	r0, [pc, #116]	; (800b2a4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800b22e:	f7f5 ffd1 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800b232:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	4b16      	ldr	r3, [pc, #88]	; (800b290 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b238:	9304      	str	r3, [sp, #16]
 800b23a:	4b16      	ldr	r3, [pc, #88]	; (800b294 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b240:	9302      	str	r3, [sp, #8]
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	4b14      	ldr	r3, [pc, #80]	; (800b29c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b24c:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b24e:	490f      	ldr	r1, [pc, #60]	; (800b28c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b250:	4815      	ldr	r0, [pc, #84]	; (800b2a8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800b252:	f7f7 f8fb 	bl	800244c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800b256:	4a0d      	ldr	r2, [pc, #52]	; (800b28c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b258:	490e      	ldr	r1, [pc, #56]	; (800b294 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b25a:	4814      	ldr	r0, [pc, #80]	; (800b2ac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800b25c:	f7fa fbce 	bl	80059fc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800b260:	4813      	ldr	r0, [pc, #76]	; (800b2b0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800b262:	f7fa f929 	bl	80054b8 <_ZN13PathFollowingC1Ev>
sdCard sd_card;
 800b266:	4813      	ldr	r0, [pc, #76]	; (800b2b4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800b268:	f7fb ff2c 	bl	80070c4 <_ZN6sdCardC1Ev>
Logger2 test_logger(&sd_card, 10);
 800b26c:	220a      	movs	r2, #10
 800b26e:	4911      	ldr	r1, [pc, #68]	; (800b2b4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800b270:	4811      	ldr	r0, [pc, #68]	; (800b2b8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800b272:	f7f9 fed7 	bl	8005024 <_ZN7Logger2C1EP6sdCardt>
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	20000264 	.word	0x20000264
 800b284:	2000055c 	.word	0x2000055c
 800b288:	2000056c 	.word	0x2000056c
 800b28c:	20000574 	.word	0x20000574
 800b290:	20000588 	.word	0x20000588
 800b294:	2000059c 	.word	0x2000059c
 800b298:	20020948 	.word	0x20020948
 800b29c:	20020970 	.word	0x20020970
 800b2a0:	200209b0 	.word	0x200209b0
 800b2a4:	200209f0 	.word	0x200209f0
 800b2a8:	200209f4 	.word	0x200209f4
 800b2ac:	2002d954 	.word	0x2002d954
 800b2b0:	2002db60 	.word	0x2002db60
 800b2b4:	20045288 	.word	0x20045288
 800b2b8:	2004758c 	.word	0x2004758c

0800b2bc <_GLOBAL__sub_I_line_sensor>:
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b2c4:	2001      	movs	r0, #1
 800b2c6:	f7ff ff83 	bl	800b1d0 <_Z41__static_initialization_and_destruction_0ii>
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b2cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b2d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b2d2:	e003      	b.n	800b2dc <LoopCopyDataInit>

0800b2d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b2d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b2d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b2da:	3104      	adds	r1, #4

0800b2dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b2dc:	480b      	ldr	r0, [pc, #44]	; (800b30c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b2de:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b2e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b2e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b2e4:	d3f6      	bcc.n	800b2d4 <CopyDataInit>
  ldr  r2, =_sbss
 800b2e6:	4a0b      	ldr	r2, [pc, #44]	; (800b314 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b2e8:	e002      	b.n	800b2f0 <LoopFillZerobss>

0800b2ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b2ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b2ec:	f842 3b04 	str.w	r3, [r2], #4

0800b2f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b2f0:	4b09      	ldr	r3, [pc, #36]	; (800b318 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b2f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b2f4:	d3f9      	bcc.n	800b2ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b2f6:	f7fc fde1 	bl	8007ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b2fa:	f00a fdb9 	bl	8015e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b2fe:	f7fa ffa3 	bl	8006248 <main>
  bx  lr    
 800b302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b304:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b308:	0801ac48 	.word	0x0801ac48
  ldr  r0, =_sdata
 800b30c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b310:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b314:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800b318:	2004c040 	.word	0x2004c040

0800b31c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b31c:	e7fe      	b.n	800b31c <ADC_IRQHandler>
	...

0800b320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <HAL_Init+0x40>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a0d      	ldr	r2, [pc, #52]	; (800b360 <HAL_Init+0x40>)
 800b32a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b32e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <HAL_Init+0x40>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <HAL_Init+0x40>)
 800b336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b33a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <HAL_Init+0x40>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a07      	ldr	r2, [pc, #28]	; (800b360 <HAL_Init+0x40>)
 800b342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b348:	2003      	movs	r0, #3
 800b34a:	f000 fd51 	bl	800bdf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b34e:	2000      	movs	r0, #0
 800b350:	f000 f808 	bl	800b364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b354:	f7fb ffd0 	bl	80072f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	40023c00 	.word	0x40023c00

0800b364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b36c:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <HAL_InitTick+0x54>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <HAL_InitTick+0x58>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	4619      	mov	r1, r3
 800b376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b37a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	4618      	mov	r0, r3
 800b384:	f000 fd69 	bl	800be5a <HAL_SYSTICK_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e00e      	b.n	800b3b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b0f      	cmp	r3, #15
 800b396:	d80a      	bhi.n	800b3ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b398:	2200      	movs	r2, #0
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	f000 fd31 	bl	800be06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b3a4:	4a06      	ldr	r2, [pc, #24]	; (800b3c0 <HAL_InitTick+0x5c>)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e000      	b.n	800b3b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20000000 	.word	0x20000000
 800b3bc:	20000008 	.word	0x20000008
 800b3c0:	20000004 	.word	0x20000004

0800b3c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <HAL_IncTick+0x20>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <HAL_IncTick+0x24>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <HAL_IncTick+0x24>)
 800b3d6:	6013      	str	r3, [r2, #0]
}
 800b3d8:	bf00      	nop
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	20000008 	.word	0x20000008
 800b3e8:	20049fc8 	.word	0x20049fc8

0800b3ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
  return uwTick;
 800b3f0:	4b03      	ldr	r3, [pc, #12]	; (800b400 <HAL_GetTick+0x14>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	20049fc8 	.word	0x20049fc8

0800b404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b40c:	f7ff ffee 	bl	800b3ec <HAL_GetTick>
 800b410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41c:	d005      	beq.n	800b42a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <HAL_Delay+0x40>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4413      	add	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b42a:	bf00      	nop
 800b42c:	f7ff ffde 	bl	800b3ec <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d8f7      	bhi.n	800b42c <HAL_Delay+0x28>
  {
  }
}
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	20000008 	.word	0x20000008

0800b448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e033      	b.n	800b4c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b462:	2b00      	cmp	r3, #0
 800b464:	d109      	bne.n	800b47a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fb ff6e 	bl	8007348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47e:	f003 0310 	and.w	r3, r3, #16
 800b482:	2b00      	cmp	r3, #0
 800b484:	d118      	bne.n	800b4b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b48e:	f023 0302 	bic.w	r3, r3, #2
 800b492:	f043 0202 	orr.w	r2, r3, #2
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa5a 	bl	800b954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4aa:	f023 0303 	bic.w	r3, r3, #3
 800b4ae:	f043 0201 	orr.w	r2, r3, #1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	641a      	str	r2, [r3, #64]	; 0x40
 800b4b6:	e001      	b.n	800b4bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d101      	bne.n	800b4ee <HAL_ADC_Start_DMA+0x1e>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e0cc      	b.n	800b688 <HAL_ADC_Start_DMA+0x1b8>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b01      	cmp	r3, #1
 800b502:	d018      	beq.n	800b536 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0201 	orr.w	r2, r2, #1
 800b512:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b514:	4b5e      	ldr	r3, [pc, #376]	; (800b690 <HAL_ADC_Start_DMA+0x1c0>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a5e      	ldr	r2, [pc, #376]	; (800b694 <HAL_ADC_Start_DMA+0x1c4>)
 800b51a:	fba2 2303 	umull	r2, r3, r2, r3
 800b51e:	0c9a      	lsrs	r2, r3, #18
 800b520:	4613      	mov	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4413      	add	r3, r2
 800b526:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b528:	e002      	b.n	800b530 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1f9      	bne.n	800b52a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b01      	cmp	r3, #1
 800b542:	f040 80a0 	bne.w	800b686 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b54e:	f023 0301 	bic.w	r3, r3, #1
 800b552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b564:	2b00      	cmp	r3, #0
 800b566:	d007      	beq.n	800b578 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b570:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b584:	d106      	bne.n	800b594 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58a:	f023 0206 	bic.w	r2, r3, #6
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	645a      	str	r2, [r3, #68]	; 0x44
 800b592:	e002      	b.n	800b59a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b5a2:	4b3d      	ldr	r3, [pc, #244]	; (800b698 <HAL_ADC_Start_DMA+0x1c8>)
 800b5a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	4a3c      	ldr	r2, [pc, #240]	; (800b69c <HAL_ADC_Start_DMA+0x1cc>)
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b2:	4a3b      	ldr	r2, [pc, #236]	; (800b6a0 <HAL_ADC_Start_DMA+0x1d0>)
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	4a3a      	ldr	r2, [pc, #232]	; (800b6a4 <HAL_ADC_Start_DMA+0x1d4>)
 800b5bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b5c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b5d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689a      	ldr	r2, [r3, #8]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	334c      	adds	r3, #76	; 0x4c
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f000 fcea 	bl	800bfd0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f003 031f 	and.w	r3, r3, #31
 800b604:	2b00      	cmp	r3, #0
 800b606:	d12a      	bne.n	800b65e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a26      	ldr	r2, [pc, #152]	; (800b6a8 <HAL_ADC_Start_DMA+0x1d8>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d015      	beq.n	800b63e <HAL_ADC_Start_DMA+0x16e>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a25      	ldr	r2, [pc, #148]	; (800b6ac <HAL_ADC_Start_DMA+0x1dc>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d105      	bne.n	800b628 <HAL_ADC_Start_DMA+0x158>
 800b61c:	4b1e      	ldr	r3, [pc, #120]	; (800b698 <HAL_ADC_Start_DMA+0x1c8>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	f003 031f 	and.w	r3, r3, #31
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a20      	ldr	r2, [pc, #128]	; (800b6b0 <HAL_ADC_Start_DMA+0x1e0>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d129      	bne.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
 800b632:	4b19      	ldr	r3, [pc, #100]	; (800b698 <HAL_ADC_Start_DMA+0x1c8>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f003 031f 	and.w	r3, r3, #31
 800b63a:	2b0f      	cmp	r3, #15
 800b63c:	d823      	bhi.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d11c      	bne.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689a      	ldr	r2, [r3, #8]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	e013      	b.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a11      	ldr	r2, [pc, #68]	; (800b6a8 <HAL_ADC_Start_DMA+0x1d8>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d10e      	bne.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d107      	bne.n	800b686 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b684:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000000 	.word	0x20000000
 800b694:	431bde83 	.word	0x431bde83
 800b698:	40012300 	.word	0x40012300
 800b69c:	0800bb4d 	.word	0x0800bb4d
 800b6a0:	0800bc07 	.word	0x0800bc07
 800b6a4:	0800bc23 	.word	0x0800bc23
 800b6a8:	40012000 	.word	0x40012000
 800b6ac:	40012100 	.word	0x40012100
 800b6b0:	40012200 	.word	0x40012200

0800b6b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_ADC_ConfigChannel+0x1c>
 800b708:	2302      	movs	r3, #2
 800b70a:	e113      	b.n	800b934 <HAL_ADC_ConfigChannel+0x244>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b09      	cmp	r3, #9
 800b71a:	d925      	bls.n	800b768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68d9      	ldr	r1, [r3, #12]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	b29b      	uxth	r3, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	4613      	mov	r3, r2
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4413      	add	r3, r2
 800b730:	3b1e      	subs	r3, #30
 800b732:	2207      	movs	r2, #7
 800b734:	fa02 f303 	lsl.w	r3, r2, r3
 800b738:	43da      	mvns	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	400a      	ands	r2, r1
 800b740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68d9      	ldr	r1, [r3, #12]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	b29b      	uxth	r3, r3
 800b752:	4618      	mov	r0, r3
 800b754:	4603      	mov	r3, r0
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	4403      	add	r3, r0
 800b75a:	3b1e      	subs	r3, #30
 800b75c:	409a      	lsls	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	e022      	b.n	800b7ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6919      	ldr	r1, [r3, #16]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	b29b      	uxth	r3, r3
 800b774:	461a      	mov	r2, r3
 800b776:	4613      	mov	r3, r2
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	4413      	add	r3, r2
 800b77c:	2207      	movs	r2, #7
 800b77e:	fa02 f303 	lsl.w	r3, r2, r3
 800b782:	43da      	mvns	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	400a      	ands	r2, r1
 800b78a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6919      	ldr	r1, [r3, #16]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4618      	mov	r0, r3
 800b79e:	4603      	mov	r3, r0
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	4403      	add	r3, r0
 800b7a4:	409a      	lsls	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2b06      	cmp	r3, #6
 800b7b4:	d824      	bhi.n	800b800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	3b05      	subs	r3, #5
 800b7c8:	221f      	movs	r2, #31
 800b7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ce:	43da      	mvns	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	400a      	ands	r2, r1
 800b7d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3b05      	subs	r3, #5
 800b7f2:	fa00 f203 	lsl.w	r2, r0, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	635a      	str	r2, [r3, #52]	; 0x34
 800b7fe:	e04c      	b.n	800b89a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	2b0c      	cmp	r3, #12
 800b806:	d824      	bhi.n	800b852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	3b23      	subs	r3, #35	; 0x23
 800b81a:	221f      	movs	r2, #31
 800b81c:	fa02 f303 	lsl.w	r3, r2, r3
 800b820:	43da      	mvns	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	400a      	ands	r2, r1
 800b828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	b29b      	uxth	r3, r3
 800b836:	4618      	mov	r0, r3
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	3b23      	subs	r3, #35	; 0x23
 800b844:	fa00 f203 	lsl.w	r2, r0, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	631a      	str	r2, [r3, #48]	; 0x30
 800b850:	e023      	b.n	800b89a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	3b41      	subs	r3, #65	; 0x41
 800b864:	221f      	movs	r2, #31
 800b866:	fa02 f303 	lsl.w	r3, r2, r3
 800b86a:	43da      	mvns	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	400a      	ands	r2, r1
 800b872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4618      	mov	r0, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	3b41      	subs	r3, #65	; 0x41
 800b88e:	fa00 f203 	lsl.w	r2, r0, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b89a:	4b29      	ldr	r3, [pc, #164]	; (800b940 <HAL_ADC_ConfigChannel+0x250>)
 800b89c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a28      	ldr	r2, [pc, #160]	; (800b944 <HAL_ADC_ConfigChannel+0x254>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d10f      	bne.n	800b8c8 <HAL_ADC_ConfigChannel+0x1d8>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b12      	cmp	r3, #18
 800b8ae:	d10b      	bne.n	800b8c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <HAL_ADC_ConfigChannel+0x254>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d12b      	bne.n	800b92a <HAL_ADC_ConfigChannel+0x23a>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a1c      	ldr	r2, [pc, #112]	; (800b948 <HAL_ADC_ConfigChannel+0x258>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d003      	beq.n	800b8e4 <HAL_ADC_ConfigChannel+0x1f4>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b11      	cmp	r3, #17
 800b8e2:	d122      	bne.n	800b92a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <HAL_ADC_ConfigChannel+0x258>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d111      	bne.n	800b92a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b906:	4b11      	ldr	r3, [pc, #68]	; (800b94c <HAL_ADC_ConfigChannel+0x25c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a11      	ldr	r2, [pc, #68]	; (800b950 <HAL_ADC_ConfigChannel+0x260>)
 800b90c:	fba2 2303 	umull	r2, r3, r2, r3
 800b910:	0c9a      	lsrs	r2, r3, #18
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b91c:	e002      	b.n	800b924 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	3b01      	subs	r3, #1
 800b922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f9      	bne.n	800b91e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	40012300 	.word	0x40012300
 800b944:	40012000 	.word	0x40012000
 800b948:	10000012 	.word	0x10000012
 800b94c:	20000000 	.word	0x20000000
 800b950:	431bde83 	.word	0x431bde83

0800b954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b95c:	4b79      	ldr	r3, [pc, #484]	; (800bb44 <ADC_Init+0x1f0>)
 800b95e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	431a      	orrs	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6859      	ldr	r1, [r3, #4]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	021a      	lsls	r2, r3, #8
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b9ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6859      	ldr	r1, [r3, #4]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689a      	ldr	r2, [r3, #8]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	430a      	orrs	r2, r1
 800b9be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6899      	ldr	r1, [r3, #8]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	4a58      	ldr	r2, [pc, #352]	; (800bb48 <ADC_Init+0x1f4>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d022      	beq.n	800ba32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b9fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6899      	ldr	r1, [r3, #8]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ba1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6899      	ldr	r1, [r3, #8]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	609a      	str	r2, [r3, #8]
 800ba30:	e00f      	b.n	800ba52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ba40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ba50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f022 0202 	bic.w	r2, r2, #2
 800ba60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6899      	ldr	r1, [r3, #8]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7e1b      	ldrb	r3, [r3, #24]
 800ba6c:	005a      	lsls	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d01b      	beq.n	800bab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ba9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6859      	ldr	r1, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	3b01      	subs	r3, #1
 800baac:	035a      	lsls	r2, r3, #13
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	e007      	b.n	800bac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	051a      	lsls	r2, r3, #20
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bafc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6899      	ldr	r1, [r3, #8]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb0a:	025a      	lsls	r2, r3, #9
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6899      	ldr	r1, [r3, #8]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	029a      	lsls	r2, r3, #10
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	609a      	str	r2, [r3, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	40012300 	.word	0x40012300
 800bb48:	0f000001 	.word	0x0f000001

0800bb4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d13c      	bne.n	800bbe0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d12b      	bne.n	800bbd8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d127      	bne.n	800bbd8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d006      	beq.n	800bba4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d119      	bne.n	800bbd8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0220 	bic.w	r2, r2, #32
 800bbb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d105      	bne.n	800bbd8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	f043 0201 	orr.w	r2, r3, #1
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff fd6b 	bl	800b6b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bbde:	e00e      	b.n	800bbfe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe4:	f003 0310 	and.w	r3, r3, #16
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d003      	beq.n	800bbf4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff fd75 	bl	800b6dc <HAL_ADC_ErrorCallback>
}
 800bbf2:	e004      	b.n	800bbfe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	4798      	blx	r3
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7ff fd57 	bl	800b6c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bc1a:	bf00      	nop
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2240      	movs	r2, #64	; 0x40
 800bc34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	f043 0204 	orr.w	r2, r3, #4
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7ff fd4a 	bl	800b6dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc60:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <__NVIC_SetPriorityGrouping+0x44>)
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bc78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bc7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc82:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <__NVIC_SetPriorityGrouping+0x44>)
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	60d3      	str	r3, [r2, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	e000ed00 	.word	0xe000ed00

0800bc98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <__NVIC_GetPriorityGrouping+0x18>)
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	0a1b      	lsrs	r3, r3, #8
 800bca2:	f003 0307 	and.w	r3, r3, #7
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	e000ed00 	.word	0xe000ed00

0800bcb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	db0b      	blt.n	800bcde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	f003 021f 	and.w	r2, r3, #31
 800bccc:	4907      	ldr	r1, [pc, #28]	; (800bcec <__NVIC_EnableIRQ+0x38>)
 800bcce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd2:	095b      	lsrs	r3, r3, #5
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	fa00 f202 	lsl.w	r2, r0, r2
 800bcda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bcde:	bf00      	nop
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	e000e100 	.word	0xe000e100

0800bcf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	6039      	str	r1, [r7, #0]
 800bcfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	db0a      	blt.n	800bd1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	490c      	ldr	r1, [pc, #48]	; (800bd3c <__NVIC_SetPriority+0x4c>)
 800bd0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd0e:	0112      	lsls	r2, r2, #4
 800bd10:	b2d2      	uxtb	r2, r2
 800bd12:	440b      	add	r3, r1
 800bd14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bd18:	e00a      	b.n	800bd30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	4908      	ldr	r1, [pc, #32]	; (800bd40 <__NVIC_SetPriority+0x50>)
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	3b04      	subs	r3, #4
 800bd28:	0112      	lsls	r2, r2, #4
 800bd2a:	b2d2      	uxtb	r2, r2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	761a      	strb	r2, [r3, #24]
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	e000e100 	.word	0xe000e100
 800bd40:	e000ed00 	.word	0xe000ed00

0800bd44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b089      	sub	sp, #36	; 0x24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f003 0307 	and.w	r3, r3, #7
 800bd56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	f1c3 0307 	rsb	r3, r3, #7
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	bf28      	it	cs
 800bd62:	2304      	movcs	r3, #4
 800bd64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	2b06      	cmp	r3, #6
 800bd6c:	d902      	bls.n	800bd74 <NVIC_EncodePriority+0x30>
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	3b03      	subs	r3, #3
 800bd72:	e000      	b.n	800bd76 <NVIC_EncodePriority+0x32>
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd82:	43da      	mvns	r2, r3
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	401a      	ands	r2, r3
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd8c:	f04f 31ff 	mov.w	r1, #4294967295
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	fa01 f303 	lsl.w	r3, r1, r3
 800bd96:	43d9      	mvns	r1, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd9c:	4313      	orrs	r3, r2
         );
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3724      	adds	r7, #36	; 0x24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
	...

0800bdac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdbc:	d301      	bcc.n	800bdc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e00f      	b.n	800bde2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bdc2:	4a0a      	ldr	r2, [pc, #40]	; (800bdec <SysTick_Config+0x40>)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bdca:	210f      	movs	r1, #15
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	f7ff ff8e 	bl	800bcf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bdd4:	4b05      	ldr	r3, [pc, #20]	; (800bdec <SysTick_Config+0x40>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bdda:	4b04      	ldr	r3, [pc, #16]	; (800bdec <SysTick_Config+0x40>)
 800bddc:	2207      	movs	r2, #7
 800bdde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	e000e010 	.word	0xe000e010

0800bdf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff ff29 	bl	800bc50 <__NVIC_SetPriorityGrouping>
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800be06:	b580      	push	{r7, lr}
 800be08:	b086      	sub	sp, #24
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	4603      	mov	r3, r0
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
 800be12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800be18:	f7ff ff3e 	bl	800bc98 <__NVIC_GetPriorityGrouping>
 800be1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	68b9      	ldr	r1, [r7, #8]
 800be22:	6978      	ldr	r0, [r7, #20]
 800be24:	f7ff ff8e 	bl	800bd44 <NVIC_EncodePriority>
 800be28:	4602      	mov	r2, r0
 800be2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff ff5d 	bl	800bcf0 <__NVIC_SetPriority>
}
 800be36:	bf00      	nop
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	4603      	mov	r3, r0
 800be46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ff31 	bl	800bcb4 <__NVIC_EnableIRQ>
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff ffa2 	bl	800bdac <SysTick_Config>
 800be68:	4603      	mov	r3, r0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800be80:	f7ff fab4 	bl	800b3ec <HAL_GetTick>
 800be84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	e099      	b.n	800bfc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0201 	bic.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800beb0:	e00f      	b.n	800bed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800beb2:	f7ff fa9b 	bl	800b3ec <HAL_GetTick>
 800beb6:	4602      	mov	r2, r0
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	2b05      	cmp	r3, #5
 800bebe:	d908      	bls.n	800bed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2220      	movs	r2, #32
 800bec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2203      	movs	r2, #3
 800beca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e078      	b.n	800bfc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e8      	bne.n	800beb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	4b38      	ldr	r3, [pc, #224]	; (800bfcc <HAL_DMA_Init+0x158>)
 800beec:	4013      	ands	r3, r2
 800beee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800befe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	d107      	bne.n	800bf3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf34:	4313      	orrs	r3, r2
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f023 0307 	bic.w	r3, r3, #7
 800bf52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d117      	bne.n	800bf96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00e      	beq.n	800bf96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa9d 	bl	800c4b8 <DMA_CheckFifoParam>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d008      	beq.n	800bf96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2240      	movs	r2, #64	; 0x40
 800bf88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bf92:	2301      	movs	r3, #1
 800bf94:	e016      	b.n	800bfc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fa54 	bl	800c44c <DMA_CalcBaseAndBitshift>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfac:	223f      	movs	r2, #63	; 0x3f
 800bfae:	409a      	lsls	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	f010803f 	.word	0xf010803f

0800bfd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <HAL_DMA_Start_IT+0x26>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e040      	b.n	800c078 <HAL_DMA_Start_IT+0xa8>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b01      	cmp	r3, #1
 800c008:	d12f      	bne.n	800c06a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2202      	movs	r2, #2
 800c00e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 f9e6 	bl	800c3f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c028:	223f      	movs	r2, #63	; 0x3f
 800c02a:	409a      	lsls	r2, r3
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f042 0216 	orr.w	r2, r2, #22
 800c03e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f042 0208 	orr.w	r2, r2, #8
 800c056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0201 	orr.w	r2, r2, #1
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	e005      	b.n	800c076 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c072:	2302      	movs	r3, #2
 800c074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b02      	cmp	r3, #2
 800c092:	d004      	beq.n	800c09e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2280      	movs	r2, #128	; 0x80
 800c098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e00c      	b.n	800c0b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2205      	movs	r2, #5
 800c0a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0201 	bic.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c0d0:	4b92      	ldr	r3, [pc, #584]	; (800c31c <HAL_DMA_IRQHandler+0x258>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a92      	ldr	r2, [pc, #584]	; (800c320 <HAL_DMA_IRQHandler+0x25c>)
 800c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0da:	0a9b      	lsrs	r3, r3, #10
 800c0dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ee:	2208      	movs	r2, #8
 800c0f0:	409a      	lsls	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d01a      	beq.n	800c130 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0304 	and.w	r3, r3, #4
 800c104:	2b00      	cmp	r3, #0
 800c106:	d013      	beq.n	800c130 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 0204 	bic.w	r2, r2, #4
 800c116:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c11c:	2208      	movs	r2, #8
 800c11e:	409a      	lsls	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c128:	f043 0201 	orr.w	r2, r3, #1
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c134:	2201      	movs	r2, #1
 800c136:	409a      	lsls	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d012      	beq.n	800c166 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c152:	2201      	movs	r2, #1
 800c154:	409a      	lsls	r2, r3
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15e:	f043 0202 	orr.w	r2, r3, #2
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c16a:	2204      	movs	r2, #4
 800c16c:	409a      	lsls	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4013      	ands	r3, r2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d012      	beq.n	800c19c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c188:	2204      	movs	r2, #4
 800c18a:	409a      	lsls	r2, r3
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c194:	f043 0204 	orr.w	r2, r3, #4
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1a0:	2210      	movs	r2, #16
 800c1a2:	409a      	lsls	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d043      	beq.n	800c234 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0308 	and.w	r3, r3, #8
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d03c      	beq.n	800c234 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1be:	2210      	movs	r2, #16
 800c1c0:	409a      	lsls	r2, r3
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d018      	beq.n	800c206 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d108      	bne.n	800c1f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d024      	beq.n	800c234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	4798      	blx	r3
 800c1f2:	e01f      	b.n	800c234 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d01b      	beq.n	800c234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	4798      	blx	r3
 800c204:	e016      	b.n	800c234 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c210:	2b00      	cmp	r3, #0
 800c212:	d107      	bne.n	800c224 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0208 	bic.w	r2, r2, #8
 800c222:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c238:	2220      	movs	r2, #32
 800c23a:	409a      	lsls	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4013      	ands	r3, r2
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 808e 	beq.w	800c362 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0310 	and.w	r3, r3, #16
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 8086 	beq.w	800c362 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25a:	2220      	movs	r2, #32
 800c25c:	409a      	lsls	r2, r3
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	d136      	bne.n	800c2dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f022 0216 	bic.w	r2, r2, #22
 800c27c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695a      	ldr	r2, [r3, #20]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c28c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c292:	2b00      	cmp	r3, #0
 800c294:	d103      	bne.n	800c29e <HAL_DMA_IRQHandler+0x1da>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f022 0208 	bic.w	r2, r2, #8
 800c2ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2b2:	223f      	movs	r2, #63	; 0x3f
 800c2b4:	409a      	lsls	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d07d      	beq.n	800c3ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	4798      	blx	r3
        }
        return;
 800c2da:	e078      	b.n	800c3ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d01c      	beq.n	800c324 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d108      	bne.n	800c30a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d030      	beq.n	800c362 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	4798      	blx	r3
 800c308:	e02b      	b.n	800c362 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d027      	beq.n	800c362 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	4798      	blx	r3
 800c31a:	e022      	b.n	800c362 <HAL_DMA_IRQHandler+0x29e>
 800c31c:	20000000 	.word	0x20000000
 800c320:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10f      	bne.n	800c352 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 0210 	bic.w	r2, r2, #16
 800c340:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c366:	2b00      	cmp	r3, #0
 800c368:	d032      	beq.n	800c3d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b00      	cmp	r3, #0
 800c374:	d022      	beq.n	800c3bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2205      	movs	r2, #5
 800c37a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0201 	bic.w	r2, r2, #1
 800c38c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	3301      	adds	r3, #1
 800c392:	60bb      	str	r3, [r7, #8]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	429a      	cmp	r2, r3
 800c398:	d307      	bcc.n	800c3aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0301 	and.w	r3, r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1f2      	bne.n	800c38e <HAL_DMA_IRQHandler+0x2ca>
 800c3a8:	e000      	b.n	800c3ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c3aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	4798      	blx	r3
 800c3cc:	e000      	b.n	800c3d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c3ce:	bf00      	nop
    }
  }
}
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop

0800c3d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c40c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	d108      	bne.n	800c430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c42e:	e007      	b.n	800c440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	60da      	str	r2, [r3, #12]
}
 800c440:	bf00      	nop
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	3b10      	subs	r3, #16
 800c45c:	4a14      	ldr	r2, [pc, #80]	; (800c4b0 <DMA_CalcBaseAndBitshift+0x64>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	091b      	lsrs	r3, r3, #4
 800c464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c466:	4a13      	ldr	r2, [pc, #76]	; (800c4b4 <DMA_CalcBaseAndBitshift+0x68>)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b03      	cmp	r3, #3
 800c478:	d909      	bls.n	800c48e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c482:	f023 0303 	bic.w	r3, r3, #3
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	659a      	str	r2, [r3, #88]	; 0x58
 800c48c:	e007      	b.n	800c49e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c496:	f023 0303 	bic.w	r3, r3, #3
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	aaaaaaab 	.word	0xaaaaaaab
 800c4b4:	0801a86c 	.word	0x0801a86c

0800c4b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d11f      	bne.n	800c512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d855      	bhi.n	800c584 <DMA_CheckFifoParam+0xcc>
 800c4d8:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <DMA_CheckFifoParam+0x28>)
 800c4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4de:	bf00      	nop
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c503 	.word	0x0800c503
 800c4e8:	0800c4f1 	.word	0x0800c4f1
 800c4ec:	0800c585 	.word	0x0800c585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d045      	beq.n	800c588 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c500:	e042      	b.n	800c588 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c50a:	d13f      	bne.n	800c58c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c510:	e03c      	b.n	800c58c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c51a:	d121      	bne.n	800c560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d836      	bhi.n	800c590 <DMA_CheckFifoParam+0xd8>
 800c522:	a201      	add	r2, pc, #4	; (adr r2, 800c528 <DMA_CheckFifoParam+0x70>)
 800c524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c528:	0800c539 	.word	0x0800c539
 800c52c:	0800c53f 	.word	0x0800c53f
 800c530:	0800c539 	.word	0x0800c539
 800c534:	0800c551 	.word	0x0800c551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
      break;
 800c53c:	e02f      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d024      	beq.n	800c594 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c54e:	e021      	b.n	800c594 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c558:	d11e      	bne.n	800c598 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c55e:	e01b      	b.n	800c598 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d902      	bls.n	800c56c <DMA_CheckFifoParam+0xb4>
 800c566:	2b03      	cmp	r3, #3
 800c568:	d003      	beq.n	800c572 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c56a:	e018      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73fb      	strb	r3, [r7, #15]
      break;
 800c570:	e015      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00e      	beq.n	800c59c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	73fb      	strb	r3, [r7, #15]
      break;
 800c582:	e00b      	b.n	800c59c <DMA_CheckFifoParam+0xe4>
      break;
 800c584:	bf00      	nop
 800c586:	e00a      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;
 800c588:	bf00      	nop
 800c58a:	e008      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;
 800c58c:	bf00      	nop
 800c58e:	e006      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;
 800c590:	bf00      	nop
 800c592:	e004      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;
 800c594:	bf00      	nop
 800c596:	e002      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;   
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <DMA_CheckFifoParam+0xe6>
      break;
 800c59c:	bf00      	nop
    }
  } 
  
  return status; 
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b089      	sub	sp, #36	; 0x24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	e177      	b.n	800c8b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	4013      	ands	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	f040 8166 	bne.w	800c8b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d00b      	beq.n	800c606 <HAL_GPIO_Init+0x5a>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d007      	beq.n	800c606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c5fa:	2b11      	cmp	r3, #17
 800c5fc:	d003      	beq.n	800c606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	2b12      	cmp	r3, #18
 800c604:	d130      	bne.n	800c668 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	2203      	movs	r2, #3
 800c612:	fa02 f303 	lsl.w	r3, r2, r3
 800c616:	43db      	mvns	r3, r3
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	4013      	ands	r3, r2
 800c61c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	68da      	ldr	r2, [r3, #12]
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	fa02 f303 	lsl.w	r3, r2, r3
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c63c:	2201      	movs	r2, #1
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	fa02 f303 	lsl.w	r3, r2, r3
 800c644:	43db      	mvns	r3, r3
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	4013      	ands	r3, r2
 800c64a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	091b      	lsrs	r3, r3, #4
 800c652:	f003 0201 	and.w	r2, r3, #1
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	fa02 f303 	lsl.w	r3, r2, r3
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	4313      	orrs	r3, r2
 800c660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	2203      	movs	r2, #3
 800c674:	fa02 f303 	lsl.w	r3, r2, r3
 800c678:	43db      	mvns	r3, r3
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	4013      	ands	r3, r2
 800c67e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	fa02 f303 	lsl.w	r3, r2, r3
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	4313      	orrs	r3, r2
 800c690:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	69ba      	ldr	r2, [r7, #24]
 800c696:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d003      	beq.n	800c6a8 <HAL_GPIO_Init+0xfc>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	2b12      	cmp	r3, #18
 800c6a6:	d123      	bne.n	800c6f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	08da      	lsrs	r2, r3, #3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3208      	adds	r2, #8
 800c6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	220f      	movs	r2, #15
 800c6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c4:	43db      	mvns	r3, r3
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691a      	ldr	r2, [r3, #16]
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	f003 0307 	and.w	r3, r3, #7
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	08da      	lsrs	r2, r3, #3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3208      	adds	r2, #8
 800c6ea:	69b9      	ldr	r1, [r7, #24]
 800c6ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c700:	43db      	mvns	r3, r3
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	4013      	ands	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f003 0203 	and.w	r2, r3, #3
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 80c0 	beq.w	800c8b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	4b65      	ldr	r3, [pc, #404]	; (800c8cc <HAL_GPIO_Init+0x320>)
 800c738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c73a:	4a64      	ldr	r2, [pc, #400]	; (800c8cc <HAL_GPIO_Init+0x320>)
 800c73c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c740:	6453      	str	r3, [r2, #68]	; 0x44
 800c742:	4b62      	ldr	r3, [pc, #392]	; (800c8cc <HAL_GPIO_Init+0x320>)
 800c744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c74e:	4a60      	ldr	r2, [pc, #384]	; (800c8d0 <HAL_GPIO_Init+0x324>)
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	089b      	lsrs	r3, r3, #2
 800c754:	3302      	adds	r3, #2
 800c756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c75a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0303 	and.w	r3, r3, #3
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	220f      	movs	r2, #15
 800c766:	fa02 f303 	lsl.w	r3, r2, r3
 800c76a:	43db      	mvns	r3, r3
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	4013      	ands	r3, r2
 800c770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a57      	ldr	r2, [pc, #348]	; (800c8d4 <HAL_GPIO_Init+0x328>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d037      	beq.n	800c7ea <HAL_GPIO_Init+0x23e>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a56      	ldr	r2, [pc, #344]	; (800c8d8 <HAL_GPIO_Init+0x32c>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d031      	beq.n	800c7e6 <HAL_GPIO_Init+0x23a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a55      	ldr	r2, [pc, #340]	; (800c8dc <HAL_GPIO_Init+0x330>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d02b      	beq.n	800c7e2 <HAL_GPIO_Init+0x236>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a54      	ldr	r2, [pc, #336]	; (800c8e0 <HAL_GPIO_Init+0x334>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d025      	beq.n	800c7de <HAL_GPIO_Init+0x232>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a53      	ldr	r2, [pc, #332]	; (800c8e4 <HAL_GPIO_Init+0x338>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d01f      	beq.n	800c7da <HAL_GPIO_Init+0x22e>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a52      	ldr	r2, [pc, #328]	; (800c8e8 <HAL_GPIO_Init+0x33c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d019      	beq.n	800c7d6 <HAL_GPIO_Init+0x22a>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a51      	ldr	r2, [pc, #324]	; (800c8ec <HAL_GPIO_Init+0x340>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d013      	beq.n	800c7d2 <HAL_GPIO_Init+0x226>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a50      	ldr	r2, [pc, #320]	; (800c8f0 <HAL_GPIO_Init+0x344>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d00d      	beq.n	800c7ce <HAL_GPIO_Init+0x222>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a4f      	ldr	r2, [pc, #316]	; (800c8f4 <HAL_GPIO_Init+0x348>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d007      	beq.n	800c7ca <HAL_GPIO_Init+0x21e>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a4e      	ldr	r2, [pc, #312]	; (800c8f8 <HAL_GPIO_Init+0x34c>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d101      	bne.n	800c7c6 <HAL_GPIO_Init+0x21a>
 800c7c2:	2309      	movs	r3, #9
 800c7c4:	e012      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7c6:	230a      	movs	r3, #10
 800c7c8:	e010      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7ca:	2308      	movs	r3, #8
 800c7cc:	e00e      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7ce:	2307      	movs	r3, #7
 800c7d0:	e00c      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7d2:	2306      	movs	r3, #6
 800c7d4:	e00a      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7d6:	2305      	movs	r3, #5
 800c7d8:	e008      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7da:	2304      	movs	r3, #4
 800c7dc:	e006      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e004      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	e002      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e000      	b.n	800c7ec <HAL_GPIO_Init+0x240>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	f002 0203 	and.w	r2, r2, #3
 800c7f2:	0092      	lsls	r2, r2, #2
 800c7f4:	4093      	lsls	r3, r2
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c7fc:	4934      	ldr	r1, [pc, #208]	; (800c8d0 <HAL_GPIO_Init+0x324>)
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	089b      	lsrs	r3, r3, #2
 800c802:	3302      	adds	r3, #2
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c80a:	4b3c      	ldr	r3, [pc, #240]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	43db      	mvns	r3, r3
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	4013      	ands	r3, r2
 800c818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c82e:	4a33      	ldr	r2, [pc, #204]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c834:	4b31      	ldr	r3, [pc, #196]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	43db      	mvns	r3, r3
 800c83e:	69ba      	ldr	r2, [r7, #24]
 800c840:	4013      	ands	r3, r2
 800c842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c850:	69ba      	ldr	r2, [r7, #24]
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	4313      	orrs	r3, r2
 800c856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c858:	4a28      	ldr	r2, [pc, #160]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c85e:	4b27      	ldr	r3, [pc, #156]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	43db      	mvns	r3, r3
 800c868:	69ba      	ldr	r2, [r7, #24]
 800c86a:	4013      	ands	r3, r2
 800c86c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	4313      	orrs	r3, r2
 800c880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c882:	4a1e      	ldr	r2, [pc, #120]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c888:	4b1c      	ldr	r3, [pc, #112]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	43db      	mvns	r3, r3
 800c892:	69ba      	ldr	r2, [r7, #24]
 800c894:	4013      	ands	r3, r2
 800c896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c8a4:	69ba      	ldr	r2, [r7, #24]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c8ac:	4a13      	ldr	r2, [pc, #76]	; (800c8fc <HAL_GPIO_Init+0x350>)
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	61fb      	str	r3, [r7, #28]
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	2b0f      	cmp	r3, #15
 800c8bc:	f67f ae84 	bls.w	800c5c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	3724      	adds	r7, #36	; 0x24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	40023800 	.word	0x40023800
 800c8d0:	40013800 	.word	0x40013800
 800c8d4:	40020000 	.word	0x40020000
 800c8d8:	40020400 	.word	0x40020400
 800c8dc:	40020800 	.word	0x40020800
 800c8e0:	40020c00 	.word	0x40020c00
 800c8e4:	40021000 	.word	0x40021000
 800c8e8:	40021400 	.word	0x40021400
 800c8ec:	40021800 	.word	0x40021800
 800c8f0:	40021c00 	.word	0x40021c00
 800c8f4:	40022000 	.word	0x40022000
 800c8f8:	40022400 	.word	0x40022400
 800c8fc:	40013c00 	.word	0x40013c00

0800c900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	691a      	ldr	r2, [r3, #16]
 800c910:	887b      	ldrh	r3, [r7, #2]
 800c912:	4013      	ands	r3, r2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c918:	2301      	movs	r3, #1
 800c91a:	73fb      	strb	r3, [r7, #15]
 800c91c:	e001      	b.n	800c922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	807b      	strh	r3, [r7, #2]
 800c93c:	4613      	mov	r3, r2
 800c93e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c940:	787b      	ldrb	r3, [r7, #1]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c946:	887a      	ldrh	r2, [r7, #2]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c94c:	e003      	b.n	800c956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c94e:	887b      	ldrh	r3, [r7, #2]
 800c950:	041a      	lsls	r2, r3, #16
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	619a      	str	r2, [r3, #24]
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
	...

0800c964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c96e:	4b08      	ldr	r3, [pc, #32]	; (800c990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c970:	695a      	ldr	r2, [r3, #20]
 800c972:	88fb      	ldrh	r3, [r7, #6]
 800c974:	4013      	ands	r3, r2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c97a:	4a05      	ldr	r2, [pc, #20]	; (800c990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c97c:	88fb      	ldrh	r3, [r7, #6]
 800c97e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c980:	88fb      	ldrh	r3, [r7, #6]
 800c982:	4618      	mov	r0, r3
 800c984:	f7f9 fbe3 	bl	800614e <HAL_GPIO_EXTI_Callback>
  }
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	40013c00 	.word	0x40013c00

0800c994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e11f      	b.n	800cbe6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7fa fd76 	bl	80074ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2224      	movs	r2, #36	; 0x24
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 0201 	bic.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c9f8:	f001 f96e 	bl	800dcd8 <HAL_RCC_GetPCLK1Freq>
 800c9fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	4a7b      	ldr	r2, [pc, #492]	; (800cbf0 <HAL_I2C_Init+0x25c>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d807      	bhi.n	800ca18 <HAL_I2C_Init+0x84>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a7a      	ldr	r2, [pc, #488]	; (800cbf4 <HAL_I2C_Init+0x260>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	bf94      	ite	ls
 800ca10:	2301      	movls	r3, #1
 800ca12:	2300      	movhi	r3, #0
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	e006      	b.n	800ca26 <HAL_I2C_Init+0x92>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	4a77      	ldr	r2, [pc, #476]	; (800cbf8 <HAL_I2C_Init+0x264>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	bf94      	ite	ls
 800ca20:	2301      	movls	r3, #1
 800ca22:	2300      	movhi	r3, #0
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e0db      	b.n	800cbe6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	4a72      	ldr	r2, [pc, #456]	; (800cbfc <HAL_I2C_Init+0x268>)
 800ca32:	fba2 2303 	umull	r2, r3, r2, r3
 800ca36:	0c9b      	lsrs	r3, r3, #18
 800ca38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	430a      	orrs	r2, r1
 800ca4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	4a64      	ldr	r2, [pc, #400]	; (800cbf0 <HAL_I2C_Init+0x25c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d802      	bhi.n	800ca68 <HAL_I2C_Init+0xd4>
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	3301      	adds	r3, #1
 800ca66:	e009      	b.n	800ca7c <HAL_I2C_Init+0xe8>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ca6e:	fb02 f303 	mul.w	r3, r2, r3
 800ca72:	4a63      	ldr	r2, [pc, #396]	; (800cc00 <HAL_I2C_Init+0x26c>)
 800ca74:	fba2 2303 	umull	r2, r3, r2, r3
 800ca78:	099b      	lsrs	r3, r3, #6
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	6812      	ldr	r2, [r2, #0]
 800ca80:	430b      	orrs	r3, r1
 800ca82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ca8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	4956      	ldr	r1, [pc, #344]	; (800cbf0 <HAL_I2C_Init+0x25c>)
 800ca98:	428b      	cmp	r3, r1
 800ca9a:	d80d      	bhi.n	800cab8 <HAL_I2C_Init+0x124>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	1e59      	subs	r1, r3, #1
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	fbb1 f3f3 	udiv	r3, r1, r3
 800caaa:	3301      	adds	r3, #1
 800caac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	bf38      	it	cc
 800cab4:	2304      	movcc	r3, #4
 800cab6:	e04f      	b.n	800cb58 <HAL_I2C_Init+0x1c4>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d111      	bne.n	800cae4 <HAL_I2C_Init+0x150>
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	1e58      	subs	r0, r3, #1
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6859      	ldr	r1, [r3, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	440b      	add	r3, r1
 800cace:	fbb0 f3f3 	udiv	r3, r0, r3
 800cad2:	3301      	adds	r3, #1
 800cad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf0c      	ite	eq
 800cadc:	2301      	moveq	r3, #1
 800cade:	2300      	movne	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	e012      	b.n	800cb0a <HAL_I2C_Init+0x176>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	1e58      	subs	r0, r3, #1
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6859      	ldr	r1, [r3, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	0099      	lsls	r1, r3, #2
 800caf4:	440b      	add	r3, r1
 800caf6:	fbb0 f3f3 	udiv	r3, r0, r3
 800cafa:	3301      	adds	r3, #1
 800cafc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	bf0c      	ite	eq
 800cb04:	2301      	moveq	r3, #1
 800cb06:	2300      	movne	r3, #0
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <HAL_I2C_Init+0x17e>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e022      	b.n	800cb58 <HAL_I2C_Init+0x1c4>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10e      	bne.n	800cb38 <HAL_I2C_Init+0x1a4>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	1e58      	subs	r0, r3, #1
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6859      	ldr	r1, [r3, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	440b      	add	r3, r1
 800cb28:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb36:	e00f      	b.n	800cb58 <HAL_I2C_Init+0x1c4>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	1e58      	subs	r0, r3, #1
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6859      	ldr	r1, [r3, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	440b      	add	r3, r1
 800cb46:	0099      	lsls	r1, r3, #2
 800cb48:	440b      	add	r3, r1
 800cb4a:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb4e:	3301      	adds	r3, #1
 800cb50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	6809      	ldr	r1, [r1, #0]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	69da      	ldr	r2, [r3, #28]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a1b      	ldr	r3, [r3, #32]
 800cb72:	431a      	orrs	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cb86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	6911      	ldr	r1, [r2, #16]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	68d2      	ldr	r2, [r2, #12]
 800cb92:	4311      	orrs	r1, r2
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	6812      	ldr	r2, [r2, #0]
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	695a      	ldr	r2, [r3, #20]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	431a      	orrs	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f042 0201 	orr.w	r2, r2, #1
 800cbc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	000186a0 	.word	0x000186a0
 800cbf4:	001e847f 	.word	0x001e847f
 800cbf8:	003d08ff 	.word	0x003d08ff
 800cbfc:	431bde83 	.word	0x431bde83
 800cc00:	10624dd3 	.word	0x10624dd3

0800cc04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	460b      	mov	r3, r1
 800cc12:	817b      	strh	r3, [r7, #10]
 800cc14:	4613      	mov	r3, r2
 800cc16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cc18:	f7fe fbe8 	bl	800b3ec <HAL_GetTick>
 800cc1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	f040 80e0 	bne.w	800cdec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	2319      	movs	r3, #25
 800cc32:	2201      	movs	r2, #1
 800cc34:	4970      	ldr	r1, [pc, #448]	; (800cdf8 <HAL_I2C_Master_Transmit+0x1f4>)
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fc58 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
 800cc44:	e0d3      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d101      	bne.n	800cc54 <HAL_I2C_Master_Transmit+0x50>
 800cc50:	2302      	movs	r3, #2
 800cc52:	e0cc      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0301 	and.w	r3, r3, #1
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d007      	beq.n	800cc7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f042 0201 	orr.w	r2, r2, #1
 800cc78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2221      	movs	r2, #33	; 0x21
 800cc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2210      	movs	r2, #16
 800cc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	893a      	ldrh	r2, [r7, #8]
 800ccaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4a50      	ldr	r2, [pc, #320]	; (800cdfc <HAL_I2C_Master_Transmit+0x1f8>)
 800ccba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ccbc:	8979      	ldrh	r1, [r7, #10]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	6a3a      	ldr	r2, [r7, #32]
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 fac2 	bl	800d24c <I2C_MasterRequestWrite>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e08d      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	613b      	str	r3, [r7, #16]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	695b      	ldr	r3, [r3, #20]
 800ccdc:	613b      	str	r3, [r7, #16]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	613b      	str	r3, [r7, #16]
 800cce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800cce8:	e066      	b.n	800cdb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	6a39      	ldr	r1, [r7, #32]
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 fcd2 	bl	800d698 <I2C_WaitOnTXEFlagUntilTimeout>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00d      	beq.n	800cd16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	d107      	bne.n	800cd12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e06b      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d11b      	bne.n	800cd8c <HAL_I2C_Master_Transmit+0x188>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d017      	beq.n	800cd8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	6a39      	ldr	r1, [r7, #32]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 fcc2 	bl	800d71a <I2C_WaitOnBTFFlagUntilTimeout>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00d      	beq.n	800cdb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda0:	2b04      	cmp	r3, #4
 800cda2:	d107      	bne.n	800cdb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e01a      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d194      	bne.n	800ccea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	e000      	b.n	800cdee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800cdec:	2302      	movs	r3, #2
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3718      	adds	r7, #24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	00100002 	.word	0x00100002
 800cdfc:	ffff0000 	.word	0xffff0000

0800ce00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08c      	sub	sp, #48	; 0x30
 800ce04:	af02      	add	r7, sp, #8
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	607a      	str	r2, [r7, #4]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	817b      	strh	r3, [r7, #10]
 800ce10:	4613      	mov	r3, r2
 800ce12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce14:	f7fe faea 	bl	800b3ec <HAL_GetTick>
 800ce18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b20      	cmp	r3, #32
 800ce24:	f040 820b 	bne.w	800d23e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	2319      	movs	r3, #25
 800ce2e:	2201      	movs	r2, #1
 800ce30:	497c      	ldr	r1, [pc, #496]	; (800d024 <HAL_I2C_Master_Receive+0x224>)
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 fb5a 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ce3e:	2302      	movs	r3, #2
 800ce40:	e1fe      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_I2C_Master_Receive+0x50>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e1f7      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d007      	beq.n	800ce76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f042 0201 	orr.w	r2, r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2222      	movs	r2, #34	; 0x22
 800ce8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2210      	movs	r2, #16
 800ce92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	893a      	ldrh	r2, [r7, #8]
 800cea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4a5c      	ldr	r2, [pc, #368]	; (800d028 <HAL_I2C_Master_Receive+0x228>)
 800ceb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ceb8:	8979      	ldrh	r1, [r7, #10]
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fa46 	bl	800d350 <I2C_MasterRequestRead>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e1b8      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d113      	bne.n	800cefe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ced6:	2300      	movs	r3, #0
 800ced8:	623b      	str	r3, [r7, #32]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	623b      	str	r3, [r7, #32]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	623b      	str	r3, [r7, #32]
 800ceea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	e18c      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d11b      	bne.n	800cf3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf16:	2300      	movs	r3, #0
 800cf18:	61fb      	str	r3, [r7, #28]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	61fb      	str	r3, [r7, #28]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	61fb      	str	r3, [r7, #28]
 800cf2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	e16c      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d11b      	bne.n	800cf7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf66:	2300      	movs	r3, #0
 800cf68:	61bb      	str	r3, [r7, #24]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	61bb      	str	r3, [r7, #24]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	61bb      	str	r3, [r7, #24]
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	e14c      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	617b      	str	r3, [r7, #20]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cfa4:	e138      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	f200 80f1 	bhi.w	800d192 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d123      	bne.n	800d000 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 fbed 	bl	800d79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e139      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	691a      	ldr	r2, [r3, #16]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd6:	b2d2      	uxtb	r2, r2
 800cfd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	3b01      	subs	r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cffe:	e10b      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d004:	2b02      	cmp	r3, #2
 800d006:	d14e      	bne.n	800d0a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	2200      	movs	r2, #0
 800d010:	4906      	ldr	r1, [pc, #24]	; (800d02c <HAL_I2C_Master_Receive+0x22c>)
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f000 fa6a 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d008      	beq.n	800d030 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e10e      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
 800d022:	bf00      	nop
 800d024:	00100002 	.word	0x00100002
 800d028:	ffff0000 	.word	0xffff0000
 800d02c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d03e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	691a      	ldr	r2, [r3, #16]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d05c:	3b01      	subs	r3, #1
 800d05e:	b29a      	uxth	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d068:	b29b      	uxth	r3, r3
 800d06a:	3b01      	subs	r3, #1
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	691a      	ldr	r2, [r3, #16]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	b2d2      	uxtb	r2, r2
 800d07e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d08e:	3b01      	subs	r3, #1
 800d090:	b29a      	uxth	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0a4:	e0b8      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4966      	ldr	r1, [pc, #408]	; (800d248 <HAL_I2C_Master_Receive+0x448>)
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 fa1b 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e0bf      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	691a      	ldr	r2, [r3, #16]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	b2d2      	uxtb	r2, r2
 800d0dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	2200      	movs	r2, #0
 800d10a:	494f      	ldr	r1, [pc, #316]	; (800d248 <HAL_I2C_Master_Receive+0x448>)
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f9ed 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e091      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d12a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	691a      	ldr	r2, [r3, #16]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	b29a      	uxth	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d17a:	3b01      	subs	r3, #1
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d186:	b29b      	uxth	r3, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d190:	e042      	b.n	800d218 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fb00 	bl	800d79c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e04c      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	f003 0304 	and.w	r3, r3, #4
 800d1e2:	2b04      	cmp	r3, #4
 800d1e4:	d118      	bne.n	800d218 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	691a      	ldr	r2, [r3, #16]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f0:	b2d2      	uxtb	r2, r2
 800d1f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d202:	3b01      	subs	r3, #1
 800d204:	b29a      	uxth	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d20e:	b29b      	uxth	r3, r3
 800d210:	3b01      	subs	r3, #1
 800d212:	b29a      	uxth	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f47f aec2 	bne.w	800cfa6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2220      	movs	r2, #32
 800d226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e000      	b.n	800d240 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d23e:	2302      	movs	r3, #2
  }
}
 800d240:	4618      	mov	r0, r3
 800d242:	3728      	adds	r7, #40	; 0x28
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	00010004 	.word	0x00010004

0800d24c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	603b      	str	r3, [r7, #0]
 800d258:	460b      	mov	r3, r1
 800d25a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2b08      	cmp	r3, #8
 800d266:	d006      	beq.n	800d276 <I2C_MasterRequestWrite+0x2a>
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d003      	beq.n	800d276 <I2C_MasterRequestWrite+0x2a>
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d274:	d108      	bne.n	800d288 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	e00b      	b.n	800d2a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28c:	2b12      	cmp	r3, #18
 800d28e:	d107      	bne.n	800d2a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d29e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f000 f91d 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00d      	beq.n	800d2d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2c6:	d103      	bne.n	800d2d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e035      	b.n	800d340 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2dc:	d108      	bne.n	800d2f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d2de:	897b      	ldrh	r3, [r7, #10]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d2ec:	611a      	str	r2, [r3, #16]
 800d2ee:	e01b      	b.n	800d328 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d2f0:	897b      	ldrh	r3, [r7, #10]
 800d2f2:	11db      	asrs	r3, r3, #7
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0306 	and.w	r3, r3, #6
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f063 030f 	orn	r3, r3, #15
 800d300:	b2da      	uxtb	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	490e      	ldr	r1, [pc, #56]	; (800d348 <I2C_MasterRequestWrite+0xfc>)
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f000 f943 	bl	800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e010      	b.n	800d340 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d31e:	897b      	ldrh	r3, [r7, #10]
 800d320:	b2da      	uxtb	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	4907      	ldr	r1, [pc, #28]	; (800d34c <I2C_MasterRequestWrite+0x100>)
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 f933 	bl	800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	00010008 	.word	0x00010008
 800d34c:	00010002 	.word	0x00010002

0800d350 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af02      	add	r7, sp, #8
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	607a      	str	r2, [r7, #4]
 800d35a:	603b      	str	r3, [r7, #0]
 800d35c:	460b      	mov	r3, r1
 800d35e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d374:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d006      	beq.n	800d38a <I2C_MasterRequestRead+0x3a>
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d003      	beq.n	800d38a <I2C_MasterRequestRead+0x3a>
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d388:	d108      	bne.n	800d39c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d398:	601a      	str	r2, [r3, #0]
 800d39a:	e00b      	b.n	800d3b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a0:	2b11      	cmp	r3, #17
 800d3a2:	d107      	bne.n	800d3b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 f893 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00d      	beq.n	800d3e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3da:	d103      	bne.n	800d3e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e079      	b.n	800d4dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3f0:	d108      	bne.n	800d404 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d3f2:	897b      	ldrh	r3, [r7, #10]
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	611a      	str	r2, [r3, #16]
 800d402:	e05f      	b.n	800d4c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d404:	897b      	ldrh	r3, [r7, #10]
 800d406:	11db      	asrs	r3, r3, #7
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	f003 0306 	and.w	r3, r3, #6
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	f063 030f 	orn	r3, r3, #15
 800d414:	b2da      	uxtb	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	4930      	ldr	r1, [pc, #192]	; (800d4e4 <I2C_MasterRequestRead+0x194>)
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 f8b9 	bl	800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e054      	b.n	800d4dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d432:	897b      	ldrh	r3, [r7, #10]
 800d434:	b2da      	uxtb	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4929      	ldr	r1, [pc, #164]	; (800d4e8 <I2C_MasterRequestRead+0x198>)
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f000 f8a9 	bl	800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e044      	b.n	800d4dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d452:	2300      	movs	r3, #0
 800d454:	613b      	str	r3, [r7, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	613b      	str	r3, [r7, #16]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	613b      	str	r3, [r7, #16]
 800d466:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d476:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 f831 	bl	800d4ec <I2C_WaitOnFlagUntilTimeout>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00d      	beq.n	800d4ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d49e:	d103      	bne.n	800d4a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e017      	b.n	800d4dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d4ac:	897b      	ldrh	r3, [r7, #10]
 800d4ae:	11db      	asrs	r3, r3, #7
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	f003 0306 	and.w	r3, r3, #6
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f063 030e 	orn	r3, r3, #14
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	4907      	ldr	r1, [pc, #28]	; (800d4e8 <I2C_MasterRequestRead+0x198>)
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f000 f865 	bl	800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	00010008 	.word	0x00010008
 800d4e8:	00010002 	.word	0x00010002

0800d4ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	603b      	str	r3, [r7, #0]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4fc:	e025      	b.n	800d54a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d504:	d021      	beq.n	800d54a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d506:	f7fd ff71 	bl	800b3ec <HAL_GetTick>
 800d50a:	4602      	mov	r2, r0
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d302      	bcc.n	800d51c <I2C_WaitOnFlagUntilTimeout+0x30>
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d116      	bne.n	800d54a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2220      	movs	r2, #32
 800d526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d536:	f043 0220 	orr.w	r2, r3, #32
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e023      	b.n	800d592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	0c1b      	lsrs	r3, r3, #16
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b01      	cmp	r3, #1
 800d552:	d10d      	bne.n	800d570 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	43da      	mvns	r2, r3
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	4013      	ands	r3, r2
 800d560:	b29b      	uxth	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	bf0c      	ite	eq
 800d566:	2301      	moveq	r3, #1
 800d568:	2300      	movne	r3, #0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	461a      	mov	r2, r3
 800d56e:	e00c      	b.n	800d58a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	43da      	mvns	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	4013      	ands	r3, r2
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bf0c      	ite	eq
 800d582:	2301      	moveq	r3, #1
 800d584:	2300      	movne	r3, #0
 800d586:	b2db      	uxtb	r3, r3
 800d588:	461a      	mov	r2, r3
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d0b6      	beq.n	800d4fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
 800d5a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d5a8:	e051      	b.n	800d64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5b8:	d123      	bne.n	800d602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d5d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	f043 0204 	orr.w	r2, r3, #4
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e046      	b.n	800d690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d021      	beq.n	800d64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d60a:	f7fd feef 	bl	800b3ec <HAL_GetTick>
 800d60e:	4602      	mov	r2, r0
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d302      	bcc.n	800d620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d116      	bne.n	800d64e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2220      	movs	r2, #32
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63a:	f043 0220 	orr.w	r2, r3, #32
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e020      	b.n	800d690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	0c1b      	lsrs	r3, r3, #16
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b01      	cmp	r3, #1
 800d656:	d10c      	bne.n	800d672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	43da      	mvns	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4013      	ands	r3, r2
 800d664:	b29b      	uxth	r3, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	bf14      	ite	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	2300      	moveq	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	e00b      	b.n	800d68a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	43da      	mvns	r2, r3
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	4013      	ands	r3, r2
 800d67e:	b29b      	uxth	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	bf14      	ite	ne
 800d684:	2301      	movne	r3, #1
 800d686:	2300      	moveq	r3, #0
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d18d      	bne.n	800d5aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d6a4:	e02d      	b.n	800d702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f000 f8ce 	bl	800d848 <I2C_IsAcknowledgeFailed>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e02d      	b.n	800d712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d021      	beq.n	800d702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6be:	f7fd fe95 	bl	800b3ec <HAL_GetTick>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d302      	bcc.n	800d6d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d116      	bne.n	800d702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2220      	movs	r2, #32
 800d6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ee:	f043 0220 	orr.w	r2, r3, #32
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e007      	b.n	800d712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d70c:	2b80      	cmp	r3, #128	; 0x80
 800d70e:	d1ca      	bne.n	800d6a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	60b9      	str	r1, [r7, #8]
 800d724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d726:	e02d      	b.n	800d784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f88d 	bl	800d848 <I2C_IsAcknowledgeFailed>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e02d      	b.n	800d794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d021      	beq.n	800d784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d740:	f7fd fe54 	bl	800b3ec <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d302      	bcc.n	800d756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d116      	bne.n	800d784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2220      	movs	r2, #32
 800d760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d770:	f043 0220 	orr.w	r2, r3, #32
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e007      	b.n	800d794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	f003 0304 	and.w	r3, r3, #4
 800d78e:	2b04      	cmp	r3, #4
 800d790:	d1ca      	bne.n	800d728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d7a8:	e042      	b.n	800d830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	f003 0310 	and.w	r3, r3, #16
 800d7b4:	2b10      	cmp	r3, #16
 800d7b6:	d119      	bne.n	800d7ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f06f 0210 	mvn.w	r2, #16
 800d7c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e029      	b.n	800d840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7ec:	f7fd fdfe 	bl	800b3ec <HAL_GetTick>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d302      	bcc.n	800d802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d116      	bne.n	800d830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2220      	movs	r2, #32
 800d80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d81c:	f043 0220 	orr.w	r2, r3, #32
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e007      	b.n	800d840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83a:	2b40      	cmp	r3, #64	; 0x40
 800d83c:	d1b5      	bne.n	800d7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d85a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d85e:	d11b      	bne.n	800d898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2220      	movs	r2, #32
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d884:	f043 0204 	orr.w	r2, r3, #4
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e000      	b.n	800d89a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
	...

0800d8a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	603b      	str	r3, [r7, #0]
 800d8b6:	4b20      	ldr	r3, [pc, #128]	; (800d938 <HAL_PWREx_EnableOverDrive+0x90>)
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	4a1f      	ldr	r2, [pc, #124]	; (800d938 <HAL_PWREx_EnableOverDrive+0x90>)
 800d8bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8c0:	6413      	str	r3, [r2, #64]	; 0x40
 800d8c2:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <HAL_PWREx_EnableOverDrive+0x90>)
 800d8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d8ce:	4b1b      	ldr	r3, [pc, #108]	; (800d93c <HAL_PWREx_EnableOverDrive+0x94>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d8d4:	f7fd fd8a 	bl	800b3ec <HAL_GetTick>
 800d8d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d8da:	e009      	b.n	800d8f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d8dc:	f7fd fd86 	bl	800b3ec <HAL_GetTick>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8ea:	d901      	bls.n	800d8f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e01f      	b.n	800d930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d8f0:	4b13      	ldr	r3, [pc, #76]	; (800d940 <HAL_PWREx_EnableOverDrive+0x98>)
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8fc:	d1ee      	bne.n	800d8dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d8fe:	4b11      	ldr	r3, [pc, #68]	; (800d944 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d900:	2201      	movs	r2, #1
 800d902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d904:	f7fd fd72 	bl	800b3ec <HAL_GetTick>
 800d908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d90a:	e009      	b.n	800d920 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d90c:	f7fd fd6e 	bl	800b3ec <HAL_GetTick>
 800d910:	4602      	mov	r2, r0
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d91a:	d901      	bls.n	800d920 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e007      	b.n	800d930 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d920:	4b07      	ldr	r3, [pc, #28]	; (800d940 <HAL_PWREx_EnableOverDrive+0x98>)
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d92c:	d1ee      	bne.n	800d90c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	40023800 	.word	0x40023800
 800d93c:	420e0040 	.word	0x420e0040
 800d940:	40007000 	.word	0x40007000
 800d944:	420e0044 	.word	0x420e0044

0800d948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	e0cc      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d95c:	4b68      	ldr	r3, [pc, #416]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 030f 	and.w	r3, r3, #15
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	d90c      	bls.n	800d984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d96a:	4b65      	ldr	r3, [pc, #404]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	b2d2      	uxtb	r2, r2
 800d970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d972:	4b63      	ldr	r3, [pc, #396]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 030f 	and.w	r3, r3, #15
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d001      	beq.n	800d984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	e0b8      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d020      	beq.n	800d9d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 0304 	and.w	r3, r3, #4
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d99c:	4b59      	ldr	r3, [pc, #356]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	4a58      	ldr	r2, [pc, #352]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d9a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0308 	and.w	r3, r3, #8
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d005      	beq.n	800d9c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d9b4:	4b53      	ldr	r3, [pc, #332]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	4a52      	ldr	r2, [pc, #328]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d9be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9c0:	4b50      	ldr	r3, [pc, #320]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	494d      	ldr	r1, [pc, #308]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d044      	beq.n	800da68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d107      	bne.n	800d9f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9e6:	4b47      	ldr	r3, [pc, #284]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d119      	bne.n	800da26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e07f      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d003      	beq.n	800da06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da02:	2b03      	cmp	r3, #3
 800da04:	d107      	bne.n	800da16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da06:	4b3f      	ldr	r3, [pc, #252]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e06f      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da16:	4b3b      	ldr	r3, [pc, #236]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e067      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da26:	4b37      	ldr	r3, [pc, #220]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	f023 0203 	bic.w	r2, r3, #3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	4934      	ldr	r1, [pc, #208]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da34:	4313      	orrs	r3, r2
 800da36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800da38:	f7fd fcd8 	bl	800b3ec <HAL_GetTick>
 800da3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da3e:	e00a      	b.n	800da56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da40:	f7fd fcd4 	bl	800b3ec <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da4e:	4293      	cmp	r3, r2
 800da50:	d901      	bls.n	800da56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800da52:	2303      	movs	r3, #3
 800da54:	e04f      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da56:	4b2b      	ldr	r3, [pc, #172]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f003 020c 	and.w	r2, r3, #12
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	429a      	cmp	r2, r3
 800da66:	d1eb      	bne.n	800da40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d20c      	bcs.n	800da90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da76:	4b22      	ldr	r3, [pc, #136]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	b2d2      	uxtb	r2, r2
 800da7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da7e:	4b20      	ldr	r3, [pc, #128]	; (800db00 <HAL_RCC_ClockConfig+0x1b8>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f003 030f 	and.w	r3, r3, #15
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d001      	beq.n	800da90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e032      	b.n	800daf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d008      	beq.n	800daae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da9c:	4b19      	ldr	r3, [pc, #100]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	4916      	ldr	r1, [pc, #88]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800daaa:	4313      	orrs	r3, r2
 800daac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f003 0308 	and.w	r3, r3, #8
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d009      	beq.n	800dace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800daba:	4b12      	ldr	r3, [pc, #72]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	490e      	ldr	r1, [pc, #56]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800daca:	4313      	orrs	r3, r2
 800dacc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dace:	f000 f821 	bl	800db14 <HAL_RCC_GetSysClockFreq>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <HAL_RCC_ClockConfig+0x1bc>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	091b      	lsrs	r3, r3, #4
 800dada:	f003 030f 	and.w	r3, r3, #15
 800dade:	4a0a      	ldr	r2, [pc, #40]	; (800db08 <HAL_RCC_ClockConfig+0x1c0>)
 800dae0:	5cd3      	ldrb	r3, [r2, r3]
 800dae2:	fa21 f303 	lsr.w	r3, r1, r3
 800dae6:	4a09      	ldr	r2, [pc, #36]	; (800db0c <HAL_RCC_ClockConfig+0x1c4>)
 800dae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <HAL_RCC_ClockConfig+0x1c8>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd fc38 	bl	800b364 <HAL_InitTick>

  return HAL_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	40023c00 	.word	0x40023c00
 800db04:	40023800 	.word	0x40023800
 800db08:	0801a854 	.word	0x0801a854
 800db0c:	20000000 	.word	0x20000000
 800db10:	20000004 	.word	0x20000004

0800db14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800db1a:	2300      	movs	r3, #0
 800db1c:	607b      	str	r3, [r7, #4]
 800db1e:	2300      	movs	r3, #0
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	2300      	movs	r3, #0
 800db24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db2a:	4b63      	ldr	r3, [pc, #396]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f003 030c 	and.w	r3, r3, #12
 800db32:	2b04      	cmp	r3, #4
 800db34:	d007      	beq.n	800db46 <HAL_RCC_GetSysClockFreq+0x32>
 800db36:	2b08      	cmp	r3, #8
 800db38:	d008      	beq.n	800db4c <HAL_RCC_GetSysClockFreq+0x38>
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f040 80b4 	bne.w	800dca8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800db40:	4b5e      	ldr	r3, [pc, #376]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800db42:	60bb      	str	r3, [r7, #8]
       break;
 800db44:	e0b3      	b.n	800dcae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800db46:	4b5d      	ldr	r3, [pc, #372]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800db48:	60bb      	str	r3, [r7, #8]
      break;
 800db4a:	e0b0      	b.n	800dcae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800db4c:	4b5a      	ldr	r3, [pc, #360]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800db56:	4b58      	ldr	r3, [pc, #352]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d04a      	beq.n	800dbf8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db62:	4b55      	ldr	r3, [pc, #340]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	099b      	lsrs	r3, r3, #6
 800db68:	f04f 0400 	mov.w	r4, #0
 800db6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800db70:	f04f 0200 	mov.w	r2, #0
 800db74:	ea03 0501 	and.w	r5, r3, r1
 800db78:	ea04 0602 	and.w	r6, r4, r2
 800db7c:	4629      	mov	r1, r5
 800db7e:	4632      	mov	r2, r6
 800db80:	f04f 0300 	mov.w	r3, #0
 800db84:	f04f 0400 	mov.w	r4, #0
 800db88:	0154      	lsls	r4, r2, #5
 800db8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800db8e:	014b      	lsls	r3, r1, #5
 800db90:	4619      	mov	r1, r3
 800db92:	4622      	mov	r2, r4
 800db94:	1b49      	subs	r1, r1, r5
 800db96:	eb62 0206 	sbc.w	r2, r2, r6
 800db9a:	f04f 0300 	mov.w	r3, #0
 800db9e:	f04f 0400 	mov.w	r4, #0
 800dba2:	0194      	lsls	r4, r2, #6
 800dba4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dba8:	018b      	lsls	r3, r1, #6
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	eb64 0402 	sbc.w	r4, r4, r2
 800dbb0:	f04f 0100 	mov.w	r1, #0
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	00e2      	lsls	r2, r4, #3
 800dbba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dbbe:	00d9      	lsls	r1, r3, #3
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	195b      	adds	r3, r3, r5
 800dbc6:	eb44 0406 	adc.w	r4, r4, r6
 800dbca:	f04f 0100 	mov.w	r1, #0
 800dbce:	f04f 0200 	mov.w	r2, #0
 800dbd2:	02a2      	lsls	r2, r4, #10
 800dbd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dbd8:	0299      	lsls	r1, r3, #10
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4614      	mov	r4, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f04f 0400 	mov.w	r4, #0
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4623      	mov	r3, r4
 800dbec:	f7f3 f864 	bl	8000cb8 <__aeabi_uldivmod>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	60fb      	str	r3, [r7, #12]
 800dbf6:	e049      	b.n	800dc8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dbf8:	4b2f      	ldr	r3, [pc, #188]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	099b      	lsrs	r3, r3, #6
 800dbfe:	f04f 0400 	mov.w	r4, #0
 800dc02:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc06:	f04f 0200 	mov.w	r2, #0
 800dc0a:	ea03 0501 	and.w	r5, r3, r1
 800dc0e:	ea04 0602 	and.w	r6, r4, r2
 800dc12:	4629      	mov	r1, r5
 800dc14:	4632      	mov	r2, r6
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	f04f 0400 	mov.w	r4, #0
 800dc1e:	0154      	lsls	r4, r2, #5
 800dc20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dc24:	014b      	lsls	r3, r1, #5
 800dc26:	4619      	mov	r1, r3
 800dc28:	4622      	mov	r2, r4
 800dc2a:	1b49      	subs	r1, r1, r5
 800dc2c:	eb62 0206 	sbc.w	r2, r2, r6
 800dc30:	f04f 0300 	mov.w	r3, #0
 800dc34:	f04f 0400 	mov.w	r4, #0
 800dc38:	0194      	lsls	r4, r2, #6
 800dc3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dc3e:	018b      	lsls	r3, r1, #6
 800dc40:	1a5b      	subs	r3, r3, r1
 800dc42:	eb64 0402 	sbc.w	r4, r4, r2
 800dc46:	f04f 0100 	mov.w	r1, #0
 800dc4a:	f04f 0200 	mov.w	r2, #0
 800dc4e:	00e2      	lsls	r2, r4, #3
 800dc50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dc54:	00d9      	lsls	r1, r3, #3
 800dc56:	460b      	mov	r3, r1
 800dc58:	4614      	mov	r4, r2
 800dc5a:	195b      	adds	r3, r3, r5
 800dc5c:	eb44 0406 	adc.w	r4, r4, r6
 800dc60:	f04f 0100 	mov.w	r1, #0
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	02a2      	lsls	r2, r4, #10
 800dc6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dc6e:	0299      	lsls	r1, r3, #10
 800dc70:	460b      	mov	r3, r1
 800dc72:	4614      	mov	r4, r2
 800dc74:	4618      	mov	r0, r3
 800dc76:	4621      	mov	r1, r4
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f04f 0400 	mov.w	r4, #0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4623      	mov	r3, r4
 800dc82:	f7f3 f819 	bl	8000cb8 <__aeabi_uldivmod>
 800dc86:	4603      	mov	r3, r0
 800dc88:	460c      	mov	r4, r1
 800dc8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dc8c:	4b0a      	ldr	r3, [pc, #40]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	0c1b      	lsrs	r3, r3, #16
 800dc92:	f003 0303 	and.w	r3, r3, #3
 800dc96:	3301      	adds	r3, #1
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca4:	60bb      	str	r3, [r7, #8]
      break;
 800dca6:	e002      	b.n	800dcae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dca8:	4b04      	ldr	r3, [pc, #16]	; (800dcbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dcaa:	60bb      	str	r3, [r7, #8]
      break;
 800dcac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dcae:	68bb      	ldr	r3, [r7, #8]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb8:	40023800 	.word	0x40023800
 800dcbc:	00f42400 	.word	0x00f42400

0800dcc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dcc4:	4b03      	ldr	r3, [pc, #12]	; (800dcd4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	20000000 	.word	0x20000000

0800dcd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dcdc:	f7ff fff0 	bl	800dcc0 <HAL_RCC_GetHCLKFreq>
 800dce0:	4601      	mov	r1, r0
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	0a9b      	lsrs	r3, r3, #10
 800dce8:	f003 0307 	and.w	r3, r3, #7
 800dcec:	4a03      	ldr	r2, [pc, #12]	; (800dcfc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dcee:	5cd3      	ldrb	r3, [r2, r3]
 800dcf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	40023800 	.word	0x40023800
 800dcfc:	0801a864 	.word	0x0801a864

0800dd00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dd04:	f7ff ffdc 	bl	800dcc0 <HAL_RCC_GetHCLKFreq>
 800dd08:	4601      	mov	r1, r0
 800dd0a:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	0b5b      	lsrs	r3, r3, #13
 800dd10:	f003 0307 	and.w	r3, r3, #7
 800dd14:	4a03      	ldr	r2, [pc, #12]	; (800dd24 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dd16:	5cd3      	ldrb	r3, [r2, r3]
 800dd18:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	40023800 	.word	0x40023800
 800dd24:	0801a864 	.word	0x0801a864

0800dd28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b088      	sub	sp, #32
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800dd34:	2300      	movs	r3, #0
 800dd36:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dd50:	4b66      	ldr	r3, [pc, #408]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd56:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5e:	4963      	ldr	r1, [pc, #396]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dd60:	4313      	orrs	r3, r2
 800dd62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00a      	beq.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800dd72:	4b5e      	ldr	r3, [pc, #376]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	495a      	ldr	r1, [pc, #360]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10b      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d105      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d075      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ddac:	4b50      	ldr	r3, [pc, #320]	; (800def0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ddb2:	f7fd fb1b 	bl	800b3ec <HAL_GetTick>
 800ddb6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ddb8:	e008      	b.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ddba:	f7fd fb17 	bl	800b3ec <HAL_GetTick>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d901      	bls.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e1dc      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ddcc:	4b47      	ldr	r3, [pc, #284]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f0      	bne.n	800ddba <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d009      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	019a      	lsls	r2, r3, #6
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	071b      	lsls	r3, r3, #28
 800ddf0:	493e      	ldr	r1, [pc, #248]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01f      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800de04:	4b39      	ldr	r3, [pc, #228]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de0a:	0f1b      	lsrs	r3, r3, #28
 800de0c:	f003 0307 	and.w	r3, r3, #7
 800de10:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	019a      	lsls	r2, r3, #6
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	061b      	lsls	r3, r3, #24
 800de1e:	431a      	orrs	r2, r3
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	071b      	lsls	r3, r3, #28
 800de24:	4931      	ldr	r1, [pc, #196]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de26:	4313      	orrs	r3, r2
 800de28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800de2c:	4b2f      	ldr	r3, [pc, #188]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de32:	f023 021f 	bic.w	r2, r3, #31
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	3b01      	subs	r3, #1
 800de3c:	492b      	ldr	r1, [pc, #172]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de3e:	4313      	orrs	r3, r2
 800de40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00d      	beq.n	800de6c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	019a      	lsls	r2, r3, #6
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	061b      	lsls	r3, r3, #24
 800de5c:	431a      	orrs	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	071b      	lsls	r3, r3, #28
 800de64:	4921      	ldr	r1, [pc, #132]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de66:	4313      	orrs	r3, r2
 800de68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800de6c:	4b20      	ldr	r3, [pc, #128]	; (800def0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800de6e:	2201      	movs	r2, #1
 800de70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800de72:	f7fd fabb 	bl	800b3ec <HAL_GetTick>
 800de76:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800de78:	e008      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800de7a:	f7fd fab7 	bl	800b3ec <HAL_GetTick>
 800de7e:	4602      	mov	r2, r0
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	1ad3      	subs	r3, r2, r3
 800de84:	2b02      	cmp	r3, #2
 800de86:	d901      	bls.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800de88:	2303      	movs	r3, #3
 800de8a:	e17c      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800de8c:	4b17      	ldr	r3, [pc, #92]	; (800deec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0f0      	beq.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d112      	bne.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10c      	bne.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 80ce 	beq.w	800e05a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800dec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dec6:	f040 80c8 	bne.w	800e05a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800deca:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800decc:	2200      	movs	r2, #0
 800dece:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ded0:	f7fd fa8c 	bl	800b3ec <HAL_GetTick>
 800ded4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ded6:	e00f      	b.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ded8:	f7fd fa88 	bl	800b3ec <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d908      	bls.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e14d      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800deea:	bf00      	nop
 800deec:	40023800 	.word	0x40023800
 800def0:	42470068 	.word	0x42470068
 800def4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800def8:	4ba5      	ldr	r3, [pc, #660]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df04:	d0e8      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f003 0304 	and.w	r3, r3, #4
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d02e      	beq.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800df12:	4b9f      	ldr	r3, [pc, #636]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df18:	0c1b      	lsrs	r3, r3, #16
 800df1a:	f003 0303 	and.w	r3, r3, #3
 800df1e:	3301      	adds	r3, #1
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800df24:	4b9a      	ldr	r3, [pc, #616]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df2a:	0f1b      	lsrs	r3, r3, #28
 800df2c:	f003 0307 	and.w	r3, r3, #7
 800df30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	019a      	lsls	r2, r3, #6
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	085b      	lsrs	r3, r3, #1
 800df3c:	3b01      	subs	r3, #1
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	431a      	orrs	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	061b      	lsls	r3, r3, #24
 800df48:	431a      	orrs	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	071b      	lsls	r3, r3, #28
 800df4e:	4990      	ldr	r1, [pc, #576]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df50:	4313      	orrs	r3, r2
 800df52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800df56:	4b8e      	ldr	r3, [pc, #568]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df64:	3b01      	subs	r3, #1
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	4989      	ldr	r1, [pc, #548]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df6a:	4313      	orrs	r3, r2
 800df6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 0308 	and.w	r3, r3, #8
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d02c      	beq.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800df7c:	4b84      	ldr	r3, [pc, #528]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df82:	0c1b      	lsrs	r3, r3, #16
 800df84:	f003 0303 	and.w	r3, r3, #3
 800df88:	3301      	adds	r3, #1
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800df8e:	4b80      	ldr	r3, [pc, #512]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800df90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df94:	0e1b      	lsrs	r3, r3, #24
 800df96:	f003 030f 	and.w	r3, r3, #15
 800df9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	019a      	lsls	r2, r3, #6
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	085b      	lsrs	r3, r3, #1
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	041b      	lsls	r3, r3, #16
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	061b      	lsls	r3, r3, #24
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	69db      	ldr	r3, [r3, #28]
 800dfb6:	071b      	lsls	r3, r3, #28
 800dfb8:	4975      	ldr	r1, [pc, #468]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800dfc0:	4b73      	ldr	r3, [pc, #460]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfce:	4970      	ldr	r1, [pc, #448]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d024      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800dfe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dfea:	d11f      	bne.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dfec:	4b68      	ldr	r3, [pc, #416]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dff2:	0e1b      	lsrs	r3, r3, #24
 800dff4:	f003 030f 	and.w	r3, r3, #15
 800dff8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dffa:	4b65      	ldr	r3, [pc, #404]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e000:	0f1b      	lsrs	r3, r3, #28
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	019a      	lsls	r2, r3, #6
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	085b      	lsrs	r3, r3, #1
 800e014:	3b01      	subs	r3, #1
 800e016:	041b      	lsls	r3, r3, #16
 800e018:	431a      	orrs	r2, r3
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	061b      	lsls	r3, r3, #24
 800e01e:	431a      	orrs	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	071b      	lsls	r3, r3, #28
 800e024:	495a      	ldr	r1, [pc, #360]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e026:	4313      	orrs	r3, r2
 800e028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e02c:	4b59      	ldr	r3, [pc, #356]	; (800e194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e02e:	2201      	movs	r2, #1
 800e030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e032:	f7fd f9db 	bl	800b3ec <HAL_GetTick>
 800e036:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e038:	e008      	b.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e03a:	f7fd f9d7 	bl	800b3ec <HAL_GetTick>
 800e03e:	4602      	mov	r2, r0
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	2b02      	cmp	r3, #2
 800e046:	d901      	bls.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e048:	2303      	movs	r3, #3
 800e04a:	e09c      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e058:	d1ef      	bne.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0320 	and.w	r3, r3, #32
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 8083 	beq.w	800e16e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e068:	2300      	movs	r3, #0
 800e06a:	60bb      	str	r3, [r7, #8]
 800e06c:	4b48      	ldr	r3, [pc, #288]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e070:	4a47      	ldr	r2, [pc, #284]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e076:	6413      	str	r3, [r2, #64]	; 0x40
 800e078:	4b45      	ldr	r3, [pc, #276]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e080:	60bb      	str	r3, [r7, #8]
 800e082:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e084:	4b44      	ldr	r3, [pc, #272]	; (800e198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a43      	ldr	r2, [pc, #268]	; (800e198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e08e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e090:	f7fd f9ac 	bl	800b3ec <HAL_GetTick>
 800e094:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e096:	e008      	b.n	800e0aa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e098:	f7fd f9a8 	bl	800b3ec <HAL_GetTick>
 800e09c:	4602      	mov	r2, r0
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d901      	bls.n	800e0aa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	e06d      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e0aa:	4b3b      	ldr	r3, [pc, #236]	; (800e198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d0f0      	beq.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e0b6:	4b36      	ldr	r3, [pc, #216]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0be:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d02f      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d028      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0d4:	4b2e      	ldr	r3, [pc, #184]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0dc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e0de:	4b2f      	ldr	r3, [pc, #188]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e0e4:	4b2d      	ldr	r3, [pc, #180]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e0ea:	4a29      	ldr	r2, [pc, #164]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e0f0:	4b27      	ldr	r3, [pc, #156]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d114      	bne.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e0fc:	f7fd f976 	bl	800b3ec <HAL_GetTick>
 800e100:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e102:	e00a      	b.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e104:	f7fd f972 	bl	800b3ec <HAL_GetTick>
 800e108:	4602      	mov	r2, r0
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e112:	4293      	cmp	r3, r2
 800e114:	d901      	bls.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800e116:	2303      	movs	r3, #3
 800e118:	e035      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e11a:	4b1d      	ldr	r3, [pc, #116]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11e:	f003 0302 	and.w	r3, r3, #2
 800e122:	2b00      	cmp	r3, #0
 800e124:	d0ee      	beq.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e132:	d10d      	bne.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e134:	4b16      	ldr	r3, [pc, #88]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e140:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e148:	4911      	ldr	r1, [pc, #68]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e14a:	4313      	orrs	r3, r2
 800e14c:	608b      	str	r3, [r1, #8]
 800e14e:	e005      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e150:	4b0f      	ldr	r3, [pc, #60]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	4a0e      	ldr	r2, [pc, #56]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e156:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e15a:	6093      	str	r3, [r2, #8]
 800e15c:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e15e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e168:	4909      	ldr	r1, [pc, #36]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e16a:	4313      	orrs	r3, r2
 800e16c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 0310 	and.w	r3, r3, #16
 800e176:	2b00      	cmp	r3, #0
 800e178:	d004      	beq.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800e182:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	40023800 	.word	0x40023800
 800e194:	42470070 	.word	0x42470070
 800e198:	40007000 	.word	0x40007000
 800e19c:	42470e40 	.word	0x42470e40
 800e1a0:	424711e0 	.word	0x424711e0

0800e1a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d075      	beq.n	800e2a8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e1bc:	4ba2      	ldr	r3, [pc, #648]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f003 030c 	and.w	r3, r3, #12
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d00c      	beq.n	800e1e2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1c8:	4b9f      	ldr	r3, [pc, #636]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e1d0:	2b08      	cmp	r3, #8
 800e1d2:	d112      	bne.n	800e1fa <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1d4:	4b9c      	ldr	r3, [pc, #624]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1e0:	d10b      	bne.n	800e1fa <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e1e2:	4b99      	ldr	r3, [pc, #612]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d05b      	beq.n	800e2a6 <HAL_RCC_OscConfig+0x102>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d157      	bne.n	800e2a6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e20b      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e202:	d106      	bne.n	800e212 <HAL_RCC_OscConfig+0x6e>
 800e204:	4b90      	ldr	r3, [pc, #576]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a8f      	ldr	r2, [pc, #572]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e20a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	e01d      	b.n	800e24e <HAL_RCC_OscConfig+0xaa>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e21a:	d10c      	bne.n	800e236 <HAL_RCC_OscConfig+0x92>
 800e21c:	4b8a      	ldr	r3, [pc, #552]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a89      	ldr	r2, [pc, #548]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e226:	6013      	str	r3, [r2, #0]
 800e228:	4b87      	ldr	r3, [pc, #540]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a86      	ldr	r2, [pc, #536]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e22e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	e00b      	b.n	800e24e <HAL_RCC_OscConfig+0xaa>
 800e236:	4b84      	ldr	r3, [pc, #528]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a83      	ldr	r2, [pc, #524]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e23c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e240:	6013      	str	r3, [r2, #0]
 800e242:	4b81      	ldr	r3, [pc, #516]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a80      	ldr	r2, [pc, #512]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e24c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d013      	beq.n	800e27e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e256:	f7fd f8c9 	bl	800b3ec <HAL_GetTick>
 800e25a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e25c:	e008      	b.n	800e270 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e25e:	f7fd f8c5 	bl	800b3ec <HAL_GetTick>
 800e262:	4602      	mov	r2, r0
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	2b64      	cmp	r3, #100	; 0x64
 800e26a:	d901      	bls.n	800e270 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e1d0      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e270:	4b75      	ldr	r3, [pc, #468]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d0f0      	beq.n	800e25e <HAL_RCC_OscConfig+0xba>
 800e27c:	e014      	b.n	800e2a8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e27e:	f7fd f8b5 	bl	800b3ec <HAL_GetTick>
 800e282:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e284:	e008      	b.n	800e298 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e286:	f7fd f8b1 	bl	800b3ec <HAL_GetTick>
 800e28a:	4602      	mov	r2, r0
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	2b64      	cmp	r3, #100	; 0x64
 800e292:	d901      	bls.n	800e298 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800e294:	2303      	movs	r3, #3
 800e296:	e1bc      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e298:	4b6b      	ldr	r3, [pc, #428]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1f0      	bne.n	800e286 <HAL_RCC_OscConfig+0xe2>
 800e2a4:	e000      	b.n	800e2a8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f003 0302 	and.w	r3, r3, #2
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d063      	beq.n	800e37c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e2b4:	4b64      	ldr	r3, [pc, #400]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f003 030c 	and.w	r3, r3, #12
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2c0:	4b61      	ldr	r3, [pc, #388]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e2c8:	2b08      	cmp	r3, #8
 800e2ca:	d11c      	bne.n	800e306 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2cc:	4b5e      	ldr	r3, [pc, #376]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d116      	bne.n	800e306 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2d8:	4b5b      	ldr	r3, [pc, #364]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f003 0302 	and.w	r3, r3, #2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x14c>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d001      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e190      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e2f0:	4b55      	ldr	r3, [pc, #340]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	4952      	ldr	r1, [pc, #328]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e300:	4313      	orrs	r3, r2
 800e302:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e304:	e03a      	b.n	800e37c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d020      	beq.n	800e350 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e30e:	4b4f      	ldr	r3, [pc, #316]	; (800e44c <HAL_RCC_OscConfig+0x2a8>)
 800e310:	2201      	movs	r2, #1
 800e312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e314:	f7fd f86a 	bl	800b3ec <HAL_GetTick>
 800e318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e31a:	e008      	b.n	800e32e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e31c:	f7fd f866 	bl	800b3ec <HAL_GetTick>
 800e320:	4602      	mov	r2, r0
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	2b02      	cmp	r3, #2
 800e328:	d901      	bls.n	800e32e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800e32a:	2303      	movs	r3, #3
 800e32c:	e171      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e32e:	4b46      	ldr	r3, [pc, #280]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0f0      	beq.n	800e31c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e33a:	4b43      	ldr	r3, [pc, #268]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	493f      	ldr	r1, [pc, #252]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	600b      	str	r3, [r1, #0]
 800e34e:	e015      	b.n	800e37c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e350:	4b3e      	ldr	r3, [pc, #248]	; (800e44c <HAL_RCC_OscConfig+0x2a8>)
 800e352:	2200      	movs	r2, #0
 800e354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e356:	f7fd f849 	bl	800b3ec <HAL_GetTick>
 800e35a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e35c:	e008      	b.n	800e370 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e35e:	f7fd f845 	bl	800b3ec <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d901      	bls.n	800e370 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e36c:	2303      	movs	r3, #3
 800e36e:	e150      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e370:	4b35      	ldr	r3, [pc, #212]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f003 0302 	and.w	r3, r3, #2
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1f0      	bne.n	800e35e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f003 0308 	and.w	r3, r3, #8
 800e384:	2b00      	cmp	r3, #0
 800e386:	d030      	beq.n	800e3ea <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	695b      	ldr	r3, [r3, #20]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d016      	beq.n	800e3be <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e390:	4b2f      	ldr	r3, [pc, #188]	; (800e450 <HAL_RCC_OscConfig+0x2ac>)
 800e392:	2201      	movs	r2, #1
 800e394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e396:	f7fd f829 	bl	800b3ec <HAL_GetTick>
 800e39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e39c:	e008      	b.n	800e3b0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e39e:	f7fd f825 	bl	800b3ec <HAL_GetTick>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d901      	bls.n	800e3b0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	e130      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e3b0:	4b25      	ldr	r3, [pc, #148]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b4:	f003 0302 	and.w	r3, r3, #2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0f0      	beq.n	800e39e <HAL_RCC_OscConfig+0x1fa>
 800e3bc:	e015      	b.n	800e3ea <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e3be:	4b24      	ldr	r3, [pc, #144]	; (800e450 <HAL_RCC_OscConfig+0x2ac>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3c4:	f7fd f812 	bl	800b3ec <HAL_GetTick>
 800e3c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3ca:	e008      	b.n	800e3de <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e3cc:	f7fd f80e 	bl	800b3ec <HAL_GetTick>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d901      	bls.n	800e3de <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	e119      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3de:	4b1a      	ldr	r3, [pc, #104]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e2:	f003 0302 	and.w	r3, r3, #2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1f0      	bne.n	800e3cc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f003 0304 	and.w	r3, r3, #4
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f000 809f 	beq.w	800e536 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e3fc:	4b12      	ldr	r3, [pc, #72]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10f      	bne.n	800e428 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e408:	2300      	movs	r3, #0
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e410:	4a0d      	ldr	r2, [pc, #52]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e416:	6413      	str	r3, [r2, #64]	; 0x40
 800e418:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <HAL_RCC_OscConfig+0x2a4>)
 800e41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e424:	2301      	movs	r3, #1
 800e426:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e428:	4b0a      	ldr	r3, [pc, #40]	; (800e454 <HAL_RCC_OscConfig+0x2b0>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e430:	2b00      	cmp	r3, #0
 800e432:	d120      	bne.n	800e476 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e434:	4b07      	ldr	r3, [pc, #28]	; (800e454 <HAL_RCC_OscConfig+0x2b0>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a06      	ldr	r2, [pc, #24]	; (800e454 <HAL_RCC_OscConfig+0x2b0>)
 800e43a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e43e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e440:	f7fc ffd4 	bl	800b3ec <HAL_GetTick>
 800e444:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e446:	e010      	b.n	800e46a <HAL_RCC_OscConfig+0x2c6>
 800e448:	40023800 	.word	0x40023800
 800e44c:	42470000 	.word	0x42470000
 800e450:	42470e80 	.word	0x42470e80
 800e454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e458:	f7fc ffc8 	bl	800b3ec <HAL_GetTick>
 800e45c:	4602      	mov	r2, r0
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	2b02      	cmp	r3, #2
 800e464:	d901      	bls.n	800e46a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e0d3      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e46a:	4b6c      	ldr	r3, [pc, #432]	; (800e61c <HAL_RCC_OscConfig+0x478>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e472:	2b00      	cmp	r3, #0
 800e474:	d0f0      	beq.n	800e458 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d106      	bne.n	800e48c <HAL_RCC_OscConfig+0x2e8>
 800e47e:	4b68      	ldr	r3, [pc, #416]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e482:	4a67      	ldr	r2, [pc, #412]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e484:	f043 0301 	orr.w	r3, r3, #1
 800e488:	6713      	str	r3, [r2, #112]	; 0x70
 800e48a:	e01c      	b.n	800e4c6 <HAL_RCC_OscConfig+0x322>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	2b05      	cmp	r3, #5
 800e492:	d10c      	bne.n	800e4ae <HAL_RCC_OscConfig+0x30a>
 800e494:	4b62      	ldr	r3, [pc, #392]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e498:	4a61      	ldr	r2, [pc, #388]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e49a:	f043 0304 	orr.w	r3, r3, #4
 800e49e:	6713      	str	r3, [r2, #112]	; 0x70
 800e4a0:	4b5f      	ldr	r3, [pc, #380]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4a4:	4a5e      	ldr	r2, [pc, #376]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	6713      	str	r3, [r2, #112]	; 0x70
 800e4ac:	e00b      	b.n	800e4c6 <HAL_RCC_OscConfig+0x322>
 800e4ae:	4b5c      	ldr	r3, [pc, #368]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b2:	4a5b      	ldr	r2, [pc, #364]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4b4:	f023 0301 	bic.w	r3, r3, #1
 800e4b8:	6713      	str	r3, [r2, #112]	; 0x70
 800e4ba:	4b59      	ldr	r3, [pc, #356]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4be:	4a58      	ldr	r2, [pc, #352]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4c0:	f023 0304 	bic.w	r3, r3, #4
 800e4c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d015      	beq.n	800e4fa <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4ce:	f7fc ff8d 	bl	800b3ec <HAL_GetTick>
 800e4d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4d4:	e00a      	b.n	800e4ec <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e4d6:	f7fc ff89 	bl	800b3ec <HAL_GetTick>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d901      	bls.n	800e4ec <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	e092      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4ec:	4b4c      	ldr	r3, [pc, #304]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f0:	f003 0302 	and.w	r3, r3, #2
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d0ee      	beq.n	800e4d6 <HAL_RCC_OscConfig+0x332>
 800e4f8:	e014      	b.n	800e524 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4fa:	f7fc ff77 	bl	800b3ec <HAL_GetTick>
 800e4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e500:	e00a      	b.n	800e518 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e502:	f7fc ff73 	bl	800b3ec <HAL_GetTick>
 800e506:	4602      	mov	r2, r0
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e510:	4293      	cmp	r3, r2
 800e512:	d901      	bls.n	800e518 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800e514:	2303      	movs	r3, #3
 800e516:	e07c      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e518:	4b41      	ldr	r3, [pc, #260]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1ee      	bne.n	800e502 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e524:	7dfb      	ldrb	r3, [r7, #23]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d105      	bne.n	800e536 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e52a:	4b3d      	ldr	r3, [pc, #244]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52e:	4a3c      	ldr	r2, [pc, #240]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d068      	beq.n	800e610 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e53e:	4b38      	ldr	r3, [pc, #224]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f003 030c 	and.w	r3, r3, #12
 800e546:	2b08      	cmp	r3, #8
 800e548:	d060      	beq.n	800e60c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d145      	bne.n	800e5de <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e552:	4b34      	ldr	r3, [pc, #208]	; (800e624 <HAL_RCC_OscConfig+0x480>)
 800e554:	2200      	movs	r2, #0
 800e556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e558:	f7fc ff48 	bl	800b3ec <HAL_GetTick>
 800e55c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e55e:	e008      	b.n	800e572 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e560:	f7fc ff44 	bl	800b3ec <HAL_GetTick>
 800e564:	4602      	mov	r2, r0
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d901      	bls.n	800e572 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800e56e:	2303      	movs	r3, #3
 800e570:	e04f      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e572:	4b2b      	ldr	r3, [pc, #172]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1f0      	bne.n	800e560 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	69da      	ldr	r2, [r3, #28]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6a1b      	ldr	r3, [r3, #32]
 800e586:	431a      	orrs	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58c:	019b      	lsls	r3, r3, #6
 800e58e:	431a      	orrs	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e594:	085b      	lsrs	r3, r3, #1
 800e596:	3b01      	subs	r3, #1
 800e598:	041b      	lsls	r3, r3, #16
 800e59a:	431a      	orrs	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	061b      	lsls	r3, r3, #24
 800e5a2:	431a      	orrs	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a8:	071b      	lsls	r3, r3, #28
 800e5aa:	491d      	ldr	r1, [pc, #116]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5b0:	4b1c      	ldr	r3, [pc, #112]	; (800e624 <HAL_RCC_OscConfig+0x480>)
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5b6:	f7fc ff19 	bl	800b3ec <HAL_GetTick>
 800e5ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5bc:	e008      	b.n	800e5d0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e5be:	f7fc ff15 	bl	800b3ec <HAL_GetTick>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d901      	bls.n	800e5d0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800e5cc:	2303      	movs	r3, #3
 800e5ce:	e020      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5d0:	4b13      	ldr	r3, [pc, #76]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d0f0      	beq.n	800e5be <HAL_RCC_OscConfig+0x41a>
 800e5dc:	e018      	b.n	800e610 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e5de:	4b11      	ldr	r3, [pc, #68]	; (800e624 <HAL_RCC_OscConfig+0x480>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5e4:	f7fc ff02 	bl	800b3ec <HAL_GetTick>
 800e5e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5ea:	e008      	b.n	800e5fe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e5ec:	f7fc fefe 	bl	800b3ec <HAL_GetTick>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d901      	bls.n	800e5fe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	e009      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5fe:	4b08      	ldr	r3, [pc, #32]	; (800e620 <HAL_RCC_OscConfig+0x47c>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1f0      	bne.n	800e5ec <HAL_RCC_OscConfig+0x448>
 800e60a:	e001      	b.n	800e610 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	40007000 	.word	0x40007000
 800e620:	40023800 	.word	0x40023800
 800e624:	42470060 	.word	0x42470060

0800e628 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	e022      	b.n	800e680 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d105      	bne.n	800e652 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7f8 ffa9 	bl	80075a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2203      	movs	r2, #3
 800e656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f814 	bl	800e688 <HAL_SD_InitCard>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e00a      	b.n	800e680 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e688:	b5b0      	push	{r4, r5, r7, lr}
 800e68a:	b08e      	sub	sp, #56	; 0x38
 800e68c:	af04      	add	r7, sp, #16
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e690:	2300      	movs	r3, #0
 800e692:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e694:	2300      	movs	r3, #0
 800e696:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e698:	2300      	movs	r3, #0
 800e69a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e69c:	2300      	movs	r3, #0
 800e69e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e6a4:	2376      	movs	r3, #118	; 0x76
 800e6a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681d      	ldr	r5, [r3, #0]
 800e6ac:	466c      	mov	r4, sp
 800e6ae:	f107 0314 	add.w	r3, r7, #20
 800e6b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e6ba:	f107 0308 	add.w	r3, r7, #8
 800e6be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f003 fa87 	bl	8011bd4 <SDIO_Init>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e031      	b.n	800e73c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	; (800e744 <HAL_SD_InitCard+0xbc>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f003 fabf 	bl	8011c66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e6e8:	4b16      	ldr	r3, [pc, #88]	; (800e744 <HAL_SD_InitCard+0xbc>)
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 ffc6 	bl	800f680 <SD_PowerON>
 800e6f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00b      	beq.n	800e714 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e708:	6a3b      	ldr	r3, [r7, #32]
 800e70a:	431a      	orrs	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e710:	2301      	movs	r3, #1
 800e712:	e013      	b.n	800e73c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fee5 	bl	800f4e4 <SD_InitCard>
 800e71a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e71c:	6a3b      	ldr	r3, [r7, #32]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00b      	beq.n	800e73a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2201      	movs	r2, #1
 800e726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	431a      	orrs	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	e000      	b.n	800e73c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3728      	adds	r7, #40	; 0x28
 800e740:	46bd      	mov	sp, r7
 800e742:	bdb0      	pop	{r4, r5, r7, pc}
 800e744:	422580a0 	.word	0x422580a0

0800e748 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08c      	sub	sp, #48	; 0x30
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
 800e754:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d107      	bne.n	800e770 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e764:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e0c7      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b01      	cmp	r3, #1
 800e77a:	f040 80c0 	bne.w	800e8fe <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	441a      	add	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e78e:	429a      	cmp	r2, r3
 800e790:	d907      	bls.n	800e7a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e0ae      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2203      	movs	r2, #3
 800e7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e7c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	4a50      	ldr	r2, [pc, #320]	; (800e908 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e7c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ce:	4a4f      	ldr	r2, [pc, #316]	; (800e90c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e7d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3380      	adds	r3, #128	; 0x80
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	025b      	lsls	r3, r3, #9
 800e7ec:	089b      	lsrs	r3, r3, #2
 800e7ee:	f7fd fbef 	bl	800bfd0 <HAL_DMA_Start_IT>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d017      	beq.n	800e828 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e806:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a40      	ldr	r2, [pc, #256]	; (800e910 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e80e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	e06b      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e828:	4b3a      	ldr	r3, [pc, #232]	; (800e914 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e82a:	2201      	movs	r2, #1
 800e82c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e832:	2b01      	cmp	r3, #1
 800e834:	d002      	beq.n	800e83c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	025b      	lsls	r3, r3, #9
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e844:	4618      	mov	r0, r3
 800e846:	f003 faa1 	bl	8011d8c <SDMMC_CmdBlockLength>
 800e84a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00f      	beq.n	800e872 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a2e      	ldr	r2, [pc, #184]	; (800e910 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e858:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	431a      	orrs	r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e046      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	025b      	lsls	r3, r3, #9
 800e87c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e87e:	2390      	movs	r3, #144	; 0x90
 800e880:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e882:	2302      	movs	r3, #2
 800e884:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e886:	2300      	movs	r3, #0
 800e888:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e88a:	2301      	movs	r3, #1
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f107 0210 	add.w	r2, r7, #16
 800e896:	4611      	mov	r1, r2
 800e898:	4618      	mov	r0, r3
 800e89a:	f003 fa4b 	bl	8011d34 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d90a      	bls.n	800e8ba <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2282      	movs	r2, #130	; 0x82
 800e8a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f003 faaf 	bl	8011e14 <SDMMC_CmdReadMultiBlock>
 800e8b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e8b8:	e009      	b.n	800e8ce <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2281      	movs	r2, #129	; 0x81
 800e8be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f003 fa82 	bl	8011dd0 <SDMMC_CmdReadSingleBlock>
 800e8cc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d012      	beq.n	800e8fa <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a0d      	ldr	r2, [pc, #52]	; (800e910 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	431a      	orrs	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e002      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e000      	b.n	800e900 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800e8fe:	2302      	movs	r3, #2
  }
}
 800e900:	4618      	mov	r0, r3
 800e902:	3730      	adds	r7, #48	; 0x30
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	0800f2f3 	.word	0x0800f2f3
 800e90c:	0800f365 	.word	0x0800f365
 800e910:	004005ff 	.word	0x004005ff
 800e914:	4225858c 	.word	0x4225858c

0800e918 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08c      	sub	sp, #48	; 0x30
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d107      	bne.n	800e940 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e934:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e93c:	2301      	movs	r3, #1
 800e93e:	e0ca      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b01      	cmp	r3, #1
 800e94a:	f040 80c3 	bne.w	800ead4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	441a      	add	r2, r3
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e95e:	429a      	cmp	r2, r3
 800e960:	d907      	bls.n	800e972 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e966:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e0b1      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2203      	movs	r2, #3
 800e976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f042 021a 	orr.w	r2, r2, #26
 800e990:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	4a52      	ldr	r2, [pc, #328]	; (800eae0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e99e:	4a51      	ldr	r2, [pc, #324]	; (800eae4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800e9a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d002      	beq.n	800e9b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	025b      	lsls	r3, r3, #9
 800e9b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f003 f9e3 	bl	8011d8c <SDMMC_CmdBlockLength>
 800e9c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00f      	beq.n	800e9ee <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a45      	ldr	r2, [pc, #276]	; (800eae8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800e9d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e073      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d90a      	bls.n	800ea0a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	22a0      	movs	r2, #160	; 0xa0
 800e9f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea00:	4618      	mov	r0, r3
 800ea02:	f003 fa4b 	bl	8011e9c <SDMMC_CmdWriteMultiBlock>
 800ea06:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ea08:	e009      	b.n	800ea1e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2290      	movs	r2, #144	; 0x90
 800ea0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea16:	4618      	mov	r0, r3
 800ea18:	f003 fa1e 	bl	8011e58 <SDMMC_CmdWriteSingleBlock>
 800ea1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d012      	beq.n	800ea4a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a2f      	ldr	r2, [pc, #188]	; (800eae8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ea2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	431a      	orrs	r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e045      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ea4a:	4b28      	ldr	r3, [pc, #160]	; (800eaec <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3380      	adds	r3, #128	; 0x80
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	025b      	lsls	r3, r3, #9
 800ea62:	089b      	lsrs	r3, r3, #2
 800ea64:	f7fd fab4 	bl	800bfd0 <HAL_DMA_Start_IT>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d01a      	beq.n	800eaa4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f022 021a 	bic.w	r2, r2, #26
 800ea7c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a19      	ldr	r2, [pc, #100]	; (800eae8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ea84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e018      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	025b      	lsls	r3, r3, #9
 800eaae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800eab0:	2390      	movs	r3, #144	; 0x90
 800eab2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800eab4:	2300      	movs	r3, #0
 800eab6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800eabc:	2301      	movs	r3, #1
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f107 0210 	add.w	r2, r7, #16
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f003 f932 	bl	8011d34 <SDIO_ConfigData>

      return HAL_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	e000      	b.n	800ead6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ead4:	2302      	movs	r3, #2
  }
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3730      	adds	r7, #48	; 0x30
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	0800f2c9 	.word	0x0800f2c9
 800eae4:	0800f365 	.word	0x0800f365
 800eae8:	004005ff 	.word	0x004005ff
 800eaec:	4225858c 	.word	0x4225858c

0800eaf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d008      	beq.n	800eb1e <HAL_SD_IRQHandler+0x2e>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f003 0308 	and.w	r3, r3, #8
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d003      	beq.n	800eb1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 ffc8 	bl	800faac <SD_Read_IT>
 800eb1c:	e155      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f000 808f 	beq.w	800ec4c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	6812      	ldr	r2, [r2, #0]
 800eb42:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800eb46:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800eb4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f022 0201 	bic.w	r2, r2, #1
 800eb5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f003 0308 	and.w	r3, r3, #8
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d039      	beq.n	800ebda <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d104      	bne.n	800eb7a <HAL_SD_IRQHandler+0x8a>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f003 0320 	and.w	r3, r3, #32
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d011      	beq.n	800eb9e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f003 f9ae 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800eb84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	431a      	orrs	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f91f 	bl	800eddc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f240 523a 	movw	r2, #1338	; 0x53a
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d104      	bne.n	800ebca <HAL_SD_IRQHandler+0xda>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f003 0302 	and.w	r3, r3, #2
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f003 fe04 	bl	80127d8 <HAL_SD_RxCpltCallback>
 800ebd0:	e0fb      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f003 fdf6 	bl	80127c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ebd8:	e0f7      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 80f2 	beq.w	800edca <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f003 0320 	and.w	r3, r3, #32
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d011      	beq.n	800ec14 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f003 f973 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800ebfa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d008      	beq.n	800ec14 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 f8e4 	bl	800eddc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f040 80d5 	bne.w	800edca <HAL_SD_IRQHandler+0x2da>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f003 0302 	and.w	r3, r3, #2
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f040 80cf 	bne.w	800edca <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f022 0208 	bic.w	r2, r2, #8
 800ec3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f003 fdbd 	bl	80127c4 <HAL_SD_TxCpltCallback>
}
 800ec4a:	e0be      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d008      	beq.n	800ec6c <HAL_SD_IRQHandler+0x17c>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f003 0308 	and.w	r3, r3, #8
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d003      	beq.n	800ec6c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 ff72 	bl	800fb4e <SD_Write_IT>
 800ec6a:	e0ae      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec72:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 80a7 	beq.w	800edca <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec82:	f003 0302 	and.w	r3, r3, #2
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d005      	beq.n	800ec96 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8e:	f043 0202 	orr.w	r2, r3, #2
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9c:	f003 0308 	and.w	r3, r3, #8
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d005      	beq.n	800ecb0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca8:	f043 0208 	orr.w	r2, r3, #8
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb6:	f003 0320 	and.w	r3, r3, #32
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d005      	beq.n	800ecca <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc2:	f043 0220 	orr.w	r2, r3, #32
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d005      	beq.n	800ece4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecdc:	f043 0210 	orr.w	r2, r3, #16
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f240 523a 	movw	r2, #1338	; 0x53a
 800ecec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ecfc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f003 f8ec 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f003 0308 	and.w	r3, r3, #8
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00a      	beq.n	800ed34 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 f855 	bl	800eddc <HAL_SD_ErrorCallback>
}
 800ed32:	e04a      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d045      	beq.n	800edca <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f003 0310 	and.w	r3, r3, #16
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <HAL_SD_IRQHandler+0x262>
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f003 0320 	and.w	r3, r3, #32
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d011      	beq.n	800ed76 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed56:	4a1f      	ldr	r2, [pc, #124]	; (800edd4 <HAL_SD_IRQHandler+0x2e4>)
 800ed58:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd f98e 	bl	800c080 <HAL_DMA_Abort_IT>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d02f      	beq.n	800edca <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 fb4a 	bl	800f408 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ed74:	e029      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d104      	bne.n	800ed8a <HAL_SD_IRQHandler+0x29a>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d011      	beq.n	800edae <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8e:	4a12      	ldr	r2, [pc, #72]	; (800edd8 <HAL_SD_IRQHandler+0x2e8>)
 800ed90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fd f972 	bl	800c080 <HAL_DMA_Abort_IT>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d013      	beq.n	800edca <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 fb65 	bl	800f476 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800edac:	e00d      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f003 fcf4 	bl	80127b0 <HAL_SD_AbortCallback>
}
 800edc8:	e7ff      	b.n	800edca <HAL_SD_IRQHandler+0x2da>
 800edca:	bf00      	nop
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	0800f409 	.word	0x0800f409
 800edd8:	0800f477 	.word	0x0800f477

0800eddc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ede4:	bf00      	nop
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edfe:	0f9b      	lsrs	r3, r3, #30
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee0a:	0e9b      	lsrs	r3, r3, #26
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 030f 	and.w	r3, r3, #15
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee1c:	0e1b      	lsrs	r3, r3, #24
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	b2da      	uxtb	r2, r3
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee2e:	0c1b      	lsrs	r3, r3, #16
 800ee30:	b2da      	uxtb	r2, r3
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee3a:	0a1b      	lsrs	r3, r3, #8
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee46:	b2da      	uxtb	r2, r3
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee50:	0d1b      	lsrs	r3, r3, #20
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee5c:	0c1b      	lsrs	r3, r3, #16
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f003 030f 	and.w	r3, r3, #15
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee6e:	0bdb      	lsrs	r3, r3, #15
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	f003 0301 	and.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee80:	0b9b      	lsrs	r3, r3, #14
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	f003 0301 	and.w	r3, r3, #1
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee92:	0b5b      	lsrs	r3, r3, #13
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eea4:	0b1b      	lsrs	r3, r3, #12
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	f003 0301 	and.w	r3, r3, #1
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d163      	bne.n	800ef88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eec4:	009a      	lsls	r2, r3, #2
 800eec6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800eeca:	4013      	ands	r3, r2
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800eed0:	0f92      	lsrs	r2, r2, #30
 800eed2:	431a      	orrs	r2, r3
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eedc:	0edb      	lsrs	r3, r3, #27
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	f003 0307 	and.w	r3, r3, #7
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeee:	0e1b      	lsrs	r3, r3, #24
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0307 	and.w	r3, r3, #7
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef00:	0d5b      	lsrs	r3, r3, #21
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	f003 0307 	and.w	r3, r3, #7
 800ef08:	b2da      	uxtb	r2, r3
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef12:	0c9b      	lsrs	r3, r3, #18
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	f003 0307 	and.w	r3, r3, #7
 800ef1a:	b2da      	uxtb	r2, r3
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef24:	0bdb      	lsrs	r3, r3, #15
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	f003 0307 	and.w	r3, r3, #7
 800ef2c:	b2da      	uxtb	r2, r3
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	7e1b      	ldrb	r3, [r3, #24]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	f003 0307 	and.w	r3, r3, #7
 800ef46:	3302      	adds	r3, #2
 800ef48:	2201      	movs	r2, #1
 800ef4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ef52:	fb02 f203 	mul.w	r2, r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	7a1b      	ldrb	r3, [r3, #8]
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	f003 030f 	and.w	r3, r3, #15
 800ef64:	2201      	movs	r2, #1
 800ef66:	409a      	lsls	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ef74:	0a52      	lsrs	r2, r2, #9
 800ef76:	fb02 f203 	mul.w	r2, r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef84:	661a      	str	r2, [r3, #96]	; 0x60
 800ef86:	e031      	b.n	800efec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d11d      	bne.n	800efcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef94:	041b      	lsls	r3, r3, #16
 800ef96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef9e:	0c1b      	lsrs	r3, r3, #16
 800efa0:	431a      	orrs	r2, r3
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	3301      	adds	r3, #1
 800efac:	029a      	lsls	r2, r3, #10
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	661a      	str	r2, [r3, #96]	; 0x60
 800efca:	e00f      	b.n	800efec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a58      	ldr	r2, [pc, #352]	; (800f134 <HAL_SD_GetCardCSD+0x344>)
 800efd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800efe8:	2301      	movs	r3, #1
 800efea:	e09d      	b.n	800f128 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff0:	0b9b      	lsrs	r3, r3, #14
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	b2da      	uxtb	r2, r3
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f002:	09db      	lsrs	r3, r3, #7
 800f004:	b2db      	uxtb	r3, r3
 800f006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f00a:	b2da      	uxtb	r2, r3
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f014:	b2db      	uxtb	r3, r3
 800f016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f024:	0fdb      	lsrs	r3, r3, #31
 800f026:	b2da      	uxtb	r2, r3
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f030:	0f5b      	lsrs	r3, r3, #29
 800f032:	b2db      	uxtb	r3, r3
 800f034:	f003 0303 	and.w	r3, r3, #3
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f042:	0e9b      	lsrs	r3, r3, #26
 800f044:	b2db      	uxtb	r3, r3
 800f046:	f003 0307 	and.w	r3, r3, #7
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f054:	0d9b      	lsrs	r3, r3, #22
 800f056:	b2db      	uxtb	r3, r3
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f066:	0d5b      	lsrs	r3, r3, #21
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	b2da      	uxtb	r2, r3
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f082:	0c1b      	lsrs	r3, r3, #16
 800f084:	b2db      	uxtb	r3, r3
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f096:	0bdb      	lsrs	r3, r3, #15
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0aa:	0b9b      	lsrs	r3, r3, #14
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	b2da      	uxtb	r2, r3
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0be:	0b5b      	lsrs	r3, r3, #13
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	b2da      	uxtb	r2, r3
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d2:	0b1b      	lsrs	r3, r3, #12
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	b2da      	uxtb	r2, r3
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e6:	0a9b      	lsrs	r3, r3, #10
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	f003 0303 	and.w	r3, r3, #3
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0fa:	0a1b      	lsrs	r3, r3, #8
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	f003 0303 	and.w	r3, r3, #3
 800f102:	b2da      	uxtb	r2, r3
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f10e:	085b      	lsrs	r3, r3, #1
 800f110:	b2db      	uxtb	r3, r3
 800f112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f116:	b2da      	uxtb	r2, r3
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	2201      	movs	r2, #1
 800f122:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr
 800f134:	004005ff 	.word	0x004005ff

0800f138 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f190:	b5b0      	push	{r4, r5, r7, lr}
 800f192:	b08e      	sub	sp, #56	; 0x38
 800f194:	af04      	add	r7, sp, #16
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2203      	movs	r2, #3
 800f19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d02e      	beq.n	800f208 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1b0:	d106      	bne.n	800f1c0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f1be:	e029      	b.n	800f214 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f1c6:	d10a      	bne.n	800f1de <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fb0f 	bl	800f7ec <SD_WideBus_Enable>
 800f1ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	639a      	str	r2, [r3, #56]	; 0x38
 800f1dc:	e01a      	b.n	800f214 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 fb4c 	bl	800f882 <SD_WideBus_Disable>
 800f1ea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	639a      	str	r2, [r3, #56]	; 0x38
 800f1f8:	e00c      	b.n	800f214 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	639a      	str	r2, [r3, #56]	; 0x38
 800f206:	e005      	b.n	800f214 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d009      	beq.n	800f230 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a18      	ldr	r2, [pc, #96]	; (800f284 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800f222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	e024      	b.n	800f27a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681d      	ldr	r5, [r3, #0]
 800f256:	466c      	mov	r4, sp
 800f258:	f107 0318 	add.w	r3, r7, #24
 800f25c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f264:	f107 030c 	add.w	r3, r7, #12
 800f268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f26a:	4628      	mov	r0, r5
 800f26c:	f002 fcb2 	bl	8011bd4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3728      	adds	r7, #40	; 0x28
 800f27e:	46bd      	mov	sp, r7
 800f280:	bdb0      	pop	{r4, r5, r7, pc}
 800f282:	bf00      	nop
 800f284:	004005ff 	.word	0x004005ff

0800f288 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b086      	sub	sp, #24
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f294:	f107 030c 	add.w	r3, r7, #12
 800f298:	4619      	mov	r1, r3
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fa7e 	bl	800f79c <SD_SendStatus>
 800f2a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d005      	beq.n	800f2b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	0a5b      	lsrs	r3, r3, #9
 800f2b8:	f003 030f 	and.w	r3, r3, #15
 800f2bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f2be:	693b      	ldr	r3, [r7, #16]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f2e6:	bf00      	nop
 800f2e8:	3714      	adds	r7, #20
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f304:	2b82      	cmp	r3, #130	; 0x82
 800f306:	d111      	bne.n	800f32c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f002 fde7 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800f312:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d008      	beq.n	800f32c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	431a      	orrs	r2, r3
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f7ff fd58 	bl	800eddc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f022 0208 	bic.w	r2, r2, #8
 800f33a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f240 523a 	movw	r2, #1338	; 0x53a
 800f344:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f003 fa3f 	bl	80127d8 <HAL_SD_RxCpltCallback>
#endif
}
 800f35a:	bf00      	nop
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f370:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7fd f830 	bl	800c3d8 <HAL_DMA_GetError>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d03e      	beq.n	800f3fc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f384:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d002      	beq.n	800f39a <SD_DMAError+0x36>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d12d      	bne.n	800f3f6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a19      	ldr	r2, [pc, #100]	; (800f404 <SD_DMAError+0xa0>)
 800f3a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f3b0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f3be:	6978      	ldr	r0, [r7, #20]
 800f3c0:	f7ff ff62 	bl	800f288 <HAL_SD_GetCardState>
 800f3c4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b06      	cmp	r3, #6
 800f3ca:	d002      	beq.n	800f3d2 <SD_DMAError+0x6e>
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	2b05      	cmp	r3, #5
 800f3d0:	d10a      	bne.n	800f3e8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f002 fd82 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3e2:	431a      	orrs	r2, r3
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f3f6:	6978      	ldr	r0, [r7, #20]
 800f3f8:	f7ff fcf0 	bl	800eddc <HAL_SD_ErrorCallback>
#endif
  }
}
 800f3fc:	bf00      	nop
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	004005ff 	.word	0x004005ff

0800f408 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f414:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f41e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f7ff ff31 	bl	800f288 <HAL_SD_GetCardState>
 800f426:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2200      	movs	r2, #0
 800f434:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b06      	cmp	r3, #6
 800f43a:	d002      	beq.n	800f442 <SD_DMATxAbort+0x3a>
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b05      	cmp	r3, #5
 800f440:	d10a      	bne.n	800f458 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4618      	mov	r0, r3
 800f448:	f002 fd4a 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800f44c:	4602      	mov	r2, r0
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f452:	431a      	orrs	r2, r3
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d103      	bne.n	800f468 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f003 f9a5 	bl	80127b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f466:	e002      	b.n	800f46e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7ff fcb7 	bl	800eddc <HAL_SD_ErrorCallback>
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f482:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f240 523a 	movw	r2, #1338	; 0x53a
 800f48c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fefa 	bl	800f288 <HAL_SD_GetCardState>
 800f494:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2b06      	cmp	r3, #6
 800f4a8:	d002      	beq.n	800f4b0 <SD_DMARxAbort+0x3a>
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b05      	cmp	r3, #5
 800f4ae:	d10a      	bne.n	800f4c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f002 fd13 	bl	8011ee0 <SDMMC_CmdStopTransfer>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c0:	431a      	orrs	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d103      	bne.n	800f4d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f003 f96e 	bl	80127b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f4d4:	e002      	b.n	800f4dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f7ff fc80 	bl	800eddc <HAL_SD_ErrorCallback>
}
 800f4dc:	bf00      	nop
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f4e4:	b5b0      	push	{r4, r5, r7, lr}
 800f4e6:	b094      	sub	sp, #80	; 0x50
 800f4e8:	af04      	add	r7, sp, #16
 800f4ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f002 fbc5 	bl	8011c84 <SDIO_GetPowerState>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d102      	bne.n	800f506 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f500:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f504:	e0b7      	b.n	800f676 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f50a:	2b03      	cmp	r3, #3
 800f50c:	d02f      	beq.n	800f56e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4618      	mov	r0, r3
 800f514:	f002 fdee 	bl	80120f4 <SDMMC_CmdSendCID>
 800f518:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <SD_InitCard+0x40>
    {
      return errorstate;
 800f520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f522:	e0a8      	b.n	800f676 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2100      	movs	r1, #0
 800f52a:	4618      	mov	r0, r3
 800f52c:	f002 fbef 	bl	8011d0e <SDIO_GetResponse>
 800f530:	4602      	mov	r2, r0
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2104      	movs	r1, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f002 fbe6 	bl	8011d0e <SDIO_GetResponse>
 800f542:	4602      	mov	r2, r0
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2108      	movs	r1, #8
 800f54e:	4618      	mov	r0, r3
 800f550:	f002 fbdd 	bl	8011d0e <SDIO_GetResponse>
 800f554:	4602      	mov	r2, r0
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	210c      	movs	r1, #12
 800f560:	4618      	mov	r0, r3
 800f562:	f002 fbd4 	bl	8011d0e <SDIO_GetResponse>
 800f566:	4602      	mov	r2, r0
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f572:	2b03      	cmp	r3, #3
 800f574:	d00d      	beq.n	800f592 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f107 020e 	add.w	r2, r7, #14
 800f57e:	4611      	mov	r1, r2
 800f580:	4618      	mov	r0, r3
 800f582:	f002 fdf4 	bl	801216e <SDMMC_CmdSetRelAdd>
 800f586:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <SD_InitCard+0xae>
    {
      return errorstate;
 800f58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f590:	e071      	b.n	800f676 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f596:	2b03      	cmp	r3, #3
 800f598:	d036      	beq.n	800f608 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f59a:	89fb      	ldrh	r3, [r7, #14]
 800f59c:	461a      	mov	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5aa:	041b      	lsls	r3, r3, #16
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	f002 fdbe 	bl	8012130 <SDMMC_CmdSendCSD>
 800f5b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5be:	e05a      	b.n	800f676 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f002 fba1 	bl	8011d0e <SDIO_GetResponse>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2104      	movs	r1, #4
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f002 fb98 	bl	8011d0e <SDIO_GetResponse>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2108      	movs	r1, #8
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f002 fb8f 	bl	8011d0e <SDIO_GetResponse>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	210c      	movs	r1, #12
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f002 fb86 	bl	8011d0e <SDIO_GetResponse>
 800f602:	4602      	mov	r2, r0
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2104      	movs	r1, #4
 800f60e:	4618      	mov	r0, r3
 800f610:	f002 fb7d 	bl	8011d0e <SDIO_GetResponse>
 800f614:	4603      	mov	r3, r0
 800f616:	0d1a      	lsrs	r2, r3, #20
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f61c:	f107 0310 	add.w	r3, r7, #16
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff fbe4 	bl	800edf0 <HAL_SD_GetCardCSD>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f62e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f632:	e020      	b.n	800f676 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6819      	ldr	r1, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f63c:	041b      	lsls	r3, r3, #16
 800f63e:	f04f 0400 	mov.w	r4, #0
 800f642:	461a      	mov	r2, r3
 800f644:	4623      	mov	r3, r4
 800f646:	4608      	mov	r0, r1
 800f648:	f002 fc6c 	bl	8011f24 <SDMMC_CmdSelDesel>
 800f64c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <SD_InitCard+0x174>
  {
    return errorstate;
 800f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f656:	e00e      	b.n	800f676 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681d      	ldr	r5, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	466c      	mov	r4, sp
 800f660:	f103 0210 	add.w	r2, r3, #16
 800f664:	ca07      	ldmia	r2, {r0, r1, r2}
 800f666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f66a:	3304      	adds	r3, #4
 800f66c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f66e:	4628      	mov	r0, r5
 800f670:	f002 fab0 	bl	8011bd4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3740      	adds	r7, #64	; 0x40
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f680 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f688:	2300      	movs	r3, #0
 800f68a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f68c:	2300      	movs	r3, #0
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	2300      	movs	r3, #0
 800f692:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f002 fc66 	bl	8011f6a <SDMMC_CmdGoIdleState>
 800f69e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <SD_PowerON+0x2a>
  {
    return errorstate;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	e072      	b.n	800f790 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f002 fc79 	bl	8011fa6 <SDMMC_CmdOperCond>
 800f6b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00d      	beq.n	800f6d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f002 fc4f 	bl	8011f6a <SDMMC_CmdGoIdleState>
 800f6cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d004      	beq.n	800f6de <SD_PowerON+0x5e>
    {
      return errorstate;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	e05b      	b.n	800f790 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d137      	bne.n	800f756 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f002 fc79 	bl	8011fe4 <SDMMC_CmdAppCommand>
 800f6f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d02d      	beq.n	800f756 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f6fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f6fe:	e047      	b.n	800f790 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2100      	movs	r1, #0
 800f706:	4618      	mov	r0, r3
 800f708:	f002 fc6c 	bl	8011fe4 <SDMMC_CmdAppCommand>
 800f70c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <SD_PowerON+0x98>
    {
      return errorstate;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	e03b      	b.n	800f790 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	491e      	ldr	r1, [pc, #120]	; (800f798 <SD_PowerON+0x118>)
 800f71e:	4618      	mov	r0, r3
 800f720:	f002 fc82 	bl	8012028 <SDMMC_CmdAppOperCommand>
 800f724:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f72c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f730:	e02e      	b.n	800f790 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2100      	movs	r1, #0
 800f738:	4618      	mov	r0, r3
 800f73a:	f002 fae8 	bl	8011d0e <SDIO_GetResponse>
 800f73e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	0fdb      	lsrs	r3, r3, #31
 800f744:	2b01      	cmp	r3, #1
 800f746:	d101      	bne.n	800f74c <SD_PowerON+0xcc>
 800f748:	2301      	movs	r3, #1
 800f74a:	e000      	b.n	800f74e <SD_PowerON+0xce>
 800f74c:	2300      	movs	r3, #0
 800f74e:	613b      	str	r3, [r7, #16]

    count++;
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	3301      	adds	r3, #1
 800f754:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d802      	bhi.n	800f766 <SD_PowerON+0xe6>
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d0cc      	beq.n	800f700 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d902      	bls.n	800f776 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f774:	e00c      	b.n	800f790 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	645a      	str	r2, [r3, #68]	; 0x44
 800f786:	e002      	b.n	800f78e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	c1100000 	.word	0xc1100000

0800f79c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d102      	bne.n	800f7b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f7ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7b0:	e018      	b.n	800f7e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7ba:	041b      	lsls	r3, r3, #16
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4610      	mov	r0, r2
 800f7c0:	f002 fcf6 	bl	80121b0 <SDMMC_CmdSendStatus>
 800f7c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	e009      	b.n	800f7e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f002 fa99 	bl	8011d0e <SDIO_GetResponse>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2100      	movs	r1, #0
 800f802:	4618      	mov	r0, r3
 800f804:	f002 fa83 	bl	8011d0e <SDIO_GetResponse>
 800f808:	4603      	mov	r3, r0
 800f80a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f80e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f812:	d102      	bne.n	800f81a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f818:	e02f      	b.n	800f87a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f81a:	f107 030c 	add.w	r3, r7, #12
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 f879 	bl	800f918 <SD_FindSCR>
 800f826:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	e023      	b.n	800f87a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d01c      	beq.n	800f876 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f844:	041b      	lsls	r3, r3, #16
 800f846:	4619      	mov	r1, r3
 800f848:	4610      	mov	r0, r2
 800f84a:	f002 fbcb 	bl	8011fe4 <SDMMC_CmdAppCommand>
 800f84e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	e00f      	b.n	800f87a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2102      	movs	r1, #2
 800f860:	4618      	mov	r0, r3
 800f862:	f002 fc04 	bl	801206e <SDMMC_CmdBusWidth>
 800f866:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	e003      	b.n	800f87a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f872:	2300      	movs	r3, #0
 800f874:	e001      	b.n	800f87a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b086      	sub	sp, #24
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2100      	movs	r1, #0
 800f898:	4618      	mov	r0, r3
 800f89a:	f002 fa38 	bl	8011d0e <SDIO_GetResponse>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8a8:	d102      	bne.n	800f8b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f8aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8ae:	e02f      	b.n	800f910 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f8b0:	f107 030c 	add.w	r3, r7, #12
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f82e 	bl	800f918 <SD_FindSCR>
 800f8bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d001      	beq.n	800f8c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	e023      	b.n	800f910 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d01c      	beq.n	800f90c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8da:	041b      	lsls	r3, r3, #16
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f002 fb80 	bl	8011fe4 <SDMMC_CmdAppCommand>
 800f8e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	e00f      	b.n	800f910 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f002 fbb9 	bl	801206e <SDMMC_CmdBusWidth>
 800f8fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	e003      	b.n	800f910 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f908:	2300      	movs	r3, #0
 800f90a:	e001      	b.n	800f910 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f90c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f910:	4618      	mov	r0, r3
 800f912:	3718      	adds	r7, #24
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f918:	b590      	push	{r4, r7, lr}
 800f91a:	b08f      	sub	sp, #60	; 0x3c
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f922:	f7fb fd63 	bl	800b3ec <HAL_GetTick>
 800f926:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f928:	2300      	movs	r3, #0
 800f92a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f92c:	2300      	movs	r3, #0
 800f92e:	60bb      	str	r3, [r7, #8]
 800f930:	2300      	movs	r3, #0
 800f932:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2108      	movs	r1, #8
 800f93e:	4618      	mov	r0, r3
 800f940:	f002 fa24 	bl	8011d8c <SDMMC_CmdBlockLength>
 800f944:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d001      	beq.n	800f950 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	e0a9      	b.n	800faa4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f958:	041b      	lsls	r3, r3, #16
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f002 fb41 	bl	8011fe4 <SDMMC_CmdAppCommand>
 800f962:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <SD_FindSCR+0x56>
  {
    return errorstate;
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	e09a      	b.n	800faa4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f96e:	f04f 33ff 	mov.w	r3, #4294967295
 800f972:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f974:	2308      	movs	r3, #8
 800f976:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800f978:	2330      	movs	r3, #48	; 0x30
 800f97a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f97c:	2302      	movs	r3, #2
 800f97e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f980:	2300      	movs	r3, #0
 800f982:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800f984:	2301      	movs	r3, #1
 800f986:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f107 0210 	add.w	r2, r7, #16
 800f990:	4611      	mov	r1, r2
 800f992:	4618      	mov	r0, r3
 800f994:	f002 f9ce 	bl	8011d34 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f002 fb88 	bl	80120b2 <SDMMC_CmdSendSCR>
 800f9a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d022      	beq.n	800f9f0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	e07a      	b.n	800faa4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00e      	beq.n	800f9da <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6819      	ldr	r1, [r3, #0]
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	f107 0208 	add.w	r2, r7, #8
 800f9c8:	18d4      	adds	r4, r2, r3
 800f9ca:	4608      	mov	r0, r1
 800f9cc:	f002 f92d 	bl	8011c2a <SDIO_ReadFIFO>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	6023      	str	r3, [r4, #0]
      index++;
 800f9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f9da:	f7fb fd07 	bl	800b3ec <HAL_GetTick>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e8:	d102      	bne.n	800f9f0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f9ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9ee:	e059      	b.n	800faa4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9f6:	f240 432a 	movw	r3, #1066	; 0x42a
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d0d6      	beq.n	800f9ae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa06:	f003 0308 	and.w	r3, r3, #8
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d005      	beq.n	800fa1a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2208      	movs	r2, #8
 800fa14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fa16:	2308      	movs	r3, #8
 800fa18:	e044      	b.n	800faa4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa20:	f003 0302 	and.w	r3, r3, #2
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa30:	2302      	movs	r3, #2
 800fa32:	e037      	b.n	800faa4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa3a:	f003 0320 	and.w	r3, r3, #32
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d005      	beq.n	800fa4e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2220      	movs	r2, #32
 800fa48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fa4a:	2320      	movs	r3, #32
 800fa4c:	e02a      	b.n	800faa4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f240 523a 	movw	r2, #1338	; 0x53a
 800fa56:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	061a      	lsls	r2, r3, #24
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	021b      	lsls	r3, r3, #8
 800fa60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	0a1b      	lsrs	r3, r3, #8
 800fa6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fa6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	0e1b      	lsrs	r3, r3, #24
 800fa74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa78:	601a      	str	r2, [r3, #0]
    scr++;
 800fa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	061a      	lsls	r2, r3, #24
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	021b      	lsls	r3, r3, #8
 800fa88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	0a1b      	lsrs	r3, r3, #8
 800fa92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fa96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	0e1b      	lsrs	r3, r3, #24
 800fa9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800faa2:	2300      	movs	r3, #0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	373c      	adds	r7, #60	; 0x3c
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd90      	pop	{r4, r7, pc}

0800faac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fabe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d03f      	beq.n	800fb46 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800fac6:	2300      	movs	r3, #0
 800fac8:	617b      	str	r3, [r7, #20]
 800faca:	e033      	b.n	800fb34 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f002 f8aa 	bl	8011c2a <SDIO_ReadFIFO>
 800fad6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	3301      	adds	r3, #1
 800fae4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3b01      	subs	r3, #1
 800faea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	0a1b      	lsrs	r3, r3, #8
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3301      	adds	r3, #1
 800fafa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	3b01      	subs	r3, #1
 800fb00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	0c1b      	lsrs	r3, r3, #16
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	3b01      	subs	r3, #1
 800fb16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	0e1b      	lsrs	r3, r3, #24
 800fb1c:	b2da      	uxtb	r2, r3
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3301      	adds	r3, #1
 800fb26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	3301      	adds	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	2b07      	cmp	r3, #7
 800fb38:	d9c8      	bls.n	800facc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800fb46:	bf00      	nop
 800fb48:	3718      	adds	r7, #24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b086      	sub	sp, #24
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb60:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d043      	beq.n	800fbf0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	617b      	str	r3, [r7, #20]
 800fb6c:	e037      	b.n	800fbde <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	3301      	adds	r3, #1
 800fb78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	021a      	lsls	r2, r3, #8
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	041a      	lsls	r2, r3, #16
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	3301      	adds	r3, #1
 800fba8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	061a      	lsls	r2, r3, #24
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f107 0208 	add.w	r2, r7, #8
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f002 f836 	bl	8011c44 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	617b      	str	r3, [r7, #20]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	2b07      	cmp	r3, #7
 800fbe2:	d9c4      	bls.n	800fb6e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fbf0:	bf00      	nop
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d101      	bne.n	800fc0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e056      	b.n	800fcb8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7f7 fdaf 	bl	8007788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	431a      	orrs	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	431a      	orrs	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	431a      	orrs	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	431a      	orrs	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	699b      	ldr	r3, [r3, #24]
 800fc62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc66:	431a      	orrs	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	69db      	ldr	r3, [r3, #28]
 800fc6c:	431a      	orrs	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	ea42 0103 	orr.w	r1, r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	699b      	ldr	r3, [r3, #24]
 800fc86:	0c1b      	lsrs	r3, r3, #16
 800fc88:	f003 0104 	and.w	r1, r3, #4
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	430a      	orrs	r2, r1
 800fc96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	69da      	ldr	r2, [r3, #28]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fca6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b088      	sub	sp, #32
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	603b      	str	r3, [r7, #0]
 800fccc:	4613      	mov	r3, r2
 800fcce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d101      	bne.n	800fce2 <HAL_SPI_Transmit+0x22>
 800fcde:	2302      	movs	r3, #2
 800fce0:	e11e      	b.n	800ff20 <HAL_SPI_Transmit+0x260>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2201      	movs	r2, #1
 800fce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcea:	f7fb fb7f 	bl	800b3ec <HAL_GetTick>
 800fcee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fcf0:	88fb      	ldrh	r3, [r7, #6]
 800fcf2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d002      	beq.n	800fd06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fd00:	2302      	movs	r3, #2
 800fd02:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fd04:	e103      	b.n	800ff0e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <HAL_SPI_Transmit+0x52>
 800fd0c:	88fb      	ldrh	r3, [r7, #6]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d102      	bne.n	800fd18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fd12:	2301      	movs	r3, #1
 800fd14:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fd16:	e0fa      	b.n	800ff0e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2203      	movs	r2, #3
 800fd1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2200      	movs	r2, #0
 800fd24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	88fa      	ldrh	r2, [r7, #6]
 800fd30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	88fa      	ldrh	r2, [r7, #6]
 800fd36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2200      	movs	r2, #0
 800fd42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	689b      	ldr	r3, [r3, #8]
 800fd5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd5e:	d107      	bne.n	800fd70 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd7a:	2b40      	cmp	r3, #64	; 0x40
 800fd7c:	d007      	beq.n	800fd8e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd96:	d14b      	bne.n	800fe30 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <HAL_SPI_Transmit+0xe6>
 800fda0:	8afb      	ldrh	r3, [r7, #22]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d13e      	bne.n	800fe24 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdaa:	881a      	ldrh	r2, [r3, #0]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb6:	1c9a      	adds	r2, r3, #2
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fdca:	e02b      	b.n	800fe24 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	689b      	ldr	r3, [r3, #8]
 800fdd2:	f003 0302 	and.w	r3, r3, #2
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d112      	bne.n	800fe00 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdde:	881a      	ldrh	r2, [r3, #0]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdea:	1c9a      	adds	r2, r3, #2
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	86da      	strh	r2, [r3, #54]	; 0x36
 800fdfe:	e011      	b.n	800fe24 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe00:	f7fb faf4 	bl	800b3ec <HAL_GetTick>
 800fe04:	4602      	mov	r2, r0
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d803      	bhi.n	800fe18 <HAL_SPI_Transmit+0x158>
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe16:	d102      	bne.n	800fe1e <HAL_SPI_Transmit+0x15e>
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fe22:	e074      	b.n	800ff0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1ce      	bne.n	800fdcc <HAL_SPI_Transmit+0x10c>
 800fe2e:	e04c      	b.n	800feca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <HAL_SPI_Transmit+0x17e>
 800fe38:	8afb      	ldrh	r3, [r7, #22]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d140      	bne.n	800fec0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	330c      	adds	r3, #12
 800fe48:	7812      	ldrb	r2, [r2, #0]
 800fe4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fe64:	e02c      	b.n	800fec0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d113      	bne.n	800fe9c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	330c      	adds	r3, #12
 800fe7e:	7812      	ldrb	r2, [r2, #0]
 800fe80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe86:	1c5a      	adds	r2, r3, #1
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	3b01      	subs	r3, #1
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	86da      	strh	r2, [r3, #54]	; 0x36
 800fe9a:	e011      	b.n	800fec0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe9c:	f7fb faa6 	bl	800b3ec <HAL_GetTick>
 800fea0:	4602      	mov	r2, r0
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d803      	bhi.n	800feb4 <HAL_SPI_Transmit+0x1f4>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb2:	d102      	bne.n	800feba <HAL_SPI_Transmit+0x1fa>
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d102      	bne.n	800fec0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800feba:	2303      	movs	r3, #3
 800febc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800febe:	e026      	b.n	800ff0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1cd      	bne.n	800fe66 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800feca:	69ba      	ldr	r2, [r7, #24]
 800fecc:	6839      	ldr	r1, [r7, #0]
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	f000 fba4 	bl	801061c <SPI_EndRxTxTransaction>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2220      	movs	r2, #32
 800fede:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	689b      	ldr	r3, [r3, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fee8:	2300      	movs	r3, #0
 800feea:	613b      	str	r3, [r7, #16]
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	613b      	str	r3, [r7, #16]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	613b      	str	r3, [r7, #16]
 800fefc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d002      	beq.n	800ff0c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ff06:	2301      	movs	r3, #1
 800ff08:	77fb      	strb	r3, [r7, #31]
 800ff0a:	e000      	b.n	800ff0e <HAL_SPI_Transmit+0x24e>
  }

error:
 800ff0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ff1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3720      	adds	r7, #32
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	603b      	str	r3, [r7, #0]
 800ff34:	4613      	mov	r3, r2
 800ff36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff44:	d112      	bne.n	800ff6c <HAL_SPI_Receive+0x44>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10e      	bne.n	800ff6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2204      	movs	r2, #4
 800ff52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ff56:	88fa      	ldrh	r2, [r7, #6]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	68b9      	ldr	r1, [r7, #8]
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 f8e9 	bl	801013a <HAL_SPI_TransmitReceive>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	e0e2      	b.n	8010132 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d101      	bne.n	800ff7a <HAL_SPI_Receive+0x52>
 800ff76:	2302      	movs	r3, #2
 800ff78:	e0db      	b.n	8010132 <HAL_SPI_Receive+0x20a>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff82:	f7fb fa33 	bl	800b3ec <HAL_GetTick>
 800ff86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d002      	beq.n	800ff9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ff94:	2302      	movs	r3, #2
 800ff96:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ff98:	e0c2      	b.n	8010120 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <HAL_SPI_Receive+0x7e>
 800ffa0:	88fb      	ldrh	r3, [r7, #6]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d102      	bne.n	800ffac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ffaa:	e0b9      	b.n	8010120 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2204      	movs	r2, #4
 800ffb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	68ba      	ldr	r2, [r7, #8]
 800ffbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	88fa      	ldrh	r2, [r7, #6]
 800ffc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	88fa      	ldrh	r2, [r7, #6]
 800ffca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fff2:	d107      	bne.n	8010004 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010002:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801000e:	2b40      	cmp	r3, #64	; 0x40
 8010010:	d007      	beq.n	8010022 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010020:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d162      	bne.n	80100f0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801002a:	e02e      	b.n	801008a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b01      	cmp	r3, #1
 8010038:	d115      	bne.n	8010066 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f103 020c 	add.w	r2, r3, #12
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010046:	7812      	ldrb	r2, [r2, #0]
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801005a:	b29b      	uxth	r3, r3
 801005c:	3b01      	subs	r3, #1
 801005e:	b29a      	uxth	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010064:	e011      	b.n	801008a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010066:	f7fb f9c1 	bl	800b3ec <HAL_GetTick>
 801006a:	4602      	mov	r2, r0
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	683a      	ldr	r2, [r7, #0]
 8010072:	429a      	cmp	r2, r3
 8010074:	d803      	bhi.n	801007e <HAL_SPI_Receive+0x156>
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007c:	d102      	bne.n	8010084 <HAL_SPI_Receive+0x15c>
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8010084:	2303      	movs	r3, #3
 8010086:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010088:	e04a      	b.n	8010120 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801008e:	b29b      	uxth	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d1cb      	bne.n	801002c <HAL_SPI_Receive+0x104>
 8010094:	e031      	b.n	80100fa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	f003 0301 	and.w	r3, r3, #1
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d113      	bne.n	80100cc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68da      	ldr	r2, [r3, #12]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ae:	b292      	uxth	r2, r2
 80100b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b6:	1c9a      	adds	r2, r3, #2
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	3b01      	subs	r3, #1
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80100ca:	e011      	b.n	80100f0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100cc:	f7fb f98e 	bl	800b3ec <HAL_GetTick>
 80100d0:	4602      	mov	r2, r0
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	683a      	ldr	r2, [r7, #0]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d803      	bhi.n	80100e4 <HAL_SPI_Receive+0x1bc>
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e2:	d102      	bne.n	80100ea <HAL_SPI_Receive+0x1c2>
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d102      	bne.n	80100f0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80100ea:	2303      	movs	r3, #3
 80100ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80100ee:	e017      	b.n	8010120 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1cd      	bne.n	8010096 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80100fa:	693a      	ldr	r2, [r7, #16]
 80100fc:	6839      	ldr	r1, [r7, #0]
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f000 fa27 	bl	8010552 <SPI_EndRxTransaction>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2220      	movs	r2, #32
 801010e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8010118:	2301      	movs	r3, #1
 801011a:	75fb      	strb	r3, [r7, #23]
 801011c:	e000      	b.n	8010120 <HAL_SPI_Receive+0x1f8>
  }

error :
 801011e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2200      	movs	r2, #0
 801012c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010130:	7dfb      	ldrb	r3, [r7, #23]
}
 8010132:	4618      	mov	r0, r3
 8010134:	3718      	adds	r7, #24
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b08c      	sub	sp, #48	; 0x30
 801013e:	af00      	add	r7, sp, #0
 8010140:	60f8      	str	r0, [r7, #12]
 8010142:	60b9      	str	r1, [r7, #8]
 8010144:	607a      	str	r2, [r7, #4]
 8010146:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010148:	2301      	movs	r3, #1
 801014a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010158:	2b01      	cmp	r3, #1
 801015a:	d101      	bne.n	8010160 <HAL_SPI_TransmitReceive+0x26>
 801015c:	2302      	movs	r3, #2
 801015e:	e18a      	b.n	8010476 <HAL_SPI_TransmitReceive+0x33c>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2201      	movs	r2, #1
 8010164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010168:	f7fb f940 	bl	800b3ec <HAL_GetTick>
 801016c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801017e:	887b      	ldrh	r3, [r7, #2]
 8010180:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010186:	2b01      	cmp	r3, #1
 8010188:	d00f      	beq.n	80101aa <HAL_SPI_TransmitReceive+0x70>
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010190:	d107      	bne.n	80101a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d103      	bne.n	80101a2 <HAL_SPI_TransmitReceive+0x68>
 801019a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d003      	beq.n	80101aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80101a2:	2302      	movs	r3, #2
 80101a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101a8:	e15b      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d005      	beq.n	80101bc <HAL_SPI_TransmitReceive+0x82>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d002      	beq.n	80101bc <HAL_SPI_TransmitReceive+0x82>
 80101b6:	887b      	ldrh	r3, [r7, #2]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d103      	bne.n	80101c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80101bc:	2301      	movs	r3, #1
 80101be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101c2:	e14e      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b04      	cmp	r3, #4
 80101ce:	d003      	beq.n	80101d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2205      	movs	r2, #5
 80101d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2200      	movs	r2, #0
 80101dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	887a      	ldrh	r2, [r7, #2]
 80101e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	887a      	ldrh	r2, [r7, #2]
 80101ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	887a      	ldrh	r2, [r7, #2]
 80101fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	887a      	ldrh	r2, [r7, #2]
 8010200:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2200      	movs	r2, #0
 8010206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2200      	movs	r2, #0
 801020c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010218:	2b40      	cmp	r3, #64	; 0x40
 801021a:	d007      	beq.n	801022c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801022a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010234:	d178      	bne.n	8010328 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d002      	beq.n	8010244 <HAL_SPI_TransmitReceive+0x10a>
 801023e:	8b7b      	ldrh	r3, [r7, #26]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d166      	bne.n	8010312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010248:	881a      	ldrh	r2, [r3, #0]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010254:	1c9a      	adds	r2, r3, #2
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801025e:	b29b      	uxth	r3, r3
 8010260:	3b01      	subs	r3, #1
 8010262:	b29a      	uxth	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010268:	e053      	b.n	8010312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b02      	cmp	r3, #2
 8010276:	d11b      	bne.n	80102b0 <HAL_SPI_TransmitReceive+0x176>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801027c:	b29b      	uxth	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d016      	beq.n	80102b0 <HAL_SPI_TransmitReceive+0x176>
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	2b01      	cmp	r3, #1
 8010286:	d113      	bne.n	80102b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028c:	881a      	ldrh	r2, [r3, #0]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010298:	1c9a      	adds	r2, r3, #2
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	3b01      	subs	r3, #1
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80102ac:	2300      	movs	r3, #0
 80102ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d119      	bne.n	80102f2 <HAL_SPI_TransmitReceive+0x1b8>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d014      	beq.n	80102f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68da      	ldr	r2, [r3, #12]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d2:	b292      	uxth	r2, r2
 80102d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102da:	1c9a      	adds	r2, r3, #2
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	3b01      	subs	r3, #1
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80102ee:	2301      	movs	r3, #1
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80102f2:	f7fb f87b 	bl	800b3ec <HAL_GetTick>
 80102f6:	4602      	mov	r2, r0
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102fe:	429a      	cmp	r2, r3
 8010300:	d807      	bhi.n	8010312 <HAL_SPI_TransmitReceive+0x1d8>
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010308:	d003      	beq.n	8010312 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801030a:	2303      	movs	r3, #3
 801030c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010310:	e0a7      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010316:	b29b      	uxth	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1a6      	bne.n	801026a <HAL_SPI_TransmitReceive+0x130>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010320:	b29b      	uxth	r3, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d1a1      	bne.n	801026a <HAL_SPI_TransmitReceive+0x130>
 8010326:	e07c      	b.n	8010422 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <HAL_SPI_TransmitReceive+0x1fc>
 8010330:	8b7b      	ldrh	r3, [r7, #26]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d16b      	bne.n	801040e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	330c      	adds	r3, #12
 8010340:	7812      	ldrb	r2, [r2, #0]
 8010342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010348:	1c5a      	adds	r2, r3, #1
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010352:	b29b      	uxth	r3, r3
 8010354:	3b01      	subs	r3, #1
 8010356:	b29a      	uxth	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801035c:	e057      	b.n	801040e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f003 0302 	and.w	r3, r3, #2
 8010368:	2b02      	cmp	r3, #2
 801036a:	d11c      	bne.n	80103a6 <HAL_SPI_TransmitReceive+0x26c>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010370:	b29b      	uxth	r3, r3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d017      	beq.n	80103a6 <HAL_SPI_TransmitReceive+0x26c>
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	2b01      	cmp	r3, #1
 801037a:	d114      	bne.n	80103a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	330c      	adds	r3, #12
 8010386:	7812      	ldrb	r2, [r2, #0]
 8010388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010398:	b29b      	uxth	r3, r3
 801039a:	3b01      	subs	r3, #1
 801039c:	b29a      	uxth	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80103a2:	2300      	movs	r3, #0
 80103a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d119      	bne.n	80103e8 <HAL_SPI_TransmitReceive+0x2ae>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d014      	beq.n	80103e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	68da      	ldr	r2, [r3, #12]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c8:	b2d2      	uxtb	r2, r2
 80103ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103da:	b29b      	uxth	r3, r3
 80103dc:	3b01      	subs	r3, #1
 80103de:	b29a      	uxth	r2, r3
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80103e4:	2301      	movs	r3, #1
 80103e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80103e8:	f7fb f800 	bl	800b3ec <HAL_GetTick>
 80103ec:	4602      	mov	r2, r0
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d803      	bhi.n	8010400 <HAL_SPI_TransmitReceive+0x2c6>
 80103f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103fe:	d102      	bne.n	8010406 <HAL_SPI_TransmitReceive+0x2cc>
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	2b00      	cmp	r3, #0
 8010404:	d103      	bne.n	801040e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010406:	2303      	movs	r3, #3
 8010408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801040c:	e029      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010412:	b29b      	uxth	r3, r3
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1a2      	bne.n	801035e <HAL_SPI_TransmitReceive+0x224>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801041c:	b29b      	uxth	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d19d      	bne.n	801035e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f000 f8f8 	bl	801061c <SPI_EndRxTxTransaction>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d006      	beq.n	8010440 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010432:	2301      	movs	r3, #1
 8010434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2220      	movs	r2, #32
 801043c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801043e:	e010      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10b      	bne.n	8010460 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	617b      	str	r3, [r7, #20]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	617b      	str	r3, [r7, #20]
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	e000      	b.n	8010462 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010460:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2201      	movs	r2, #1
 8010466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010476:	4618      	mov	r0, r3
 8010478:	3730      	adds	r7, #48	; 0x30
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b084      	sub	sp, #16
 8010482:	af00      	add	r7, sp, #0
 8010484:	60f8      	str	r0, [r7, #12]
 8010486:	60b9      	str	r1, [r7, #8]
 8010488:	603b      	str	r3, [r7, #0]
 801048a:	4613      	mov	r3, r2
 801048c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801048e:	e04c      	b.n	801052a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010496:	d048      	beq.n	801052a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010498:	f7fa ffa8 	bl	800b3ec <HAL_GetTick>
 801049c:	4602      	mov	r2, r0
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d902      	bls.n	80104ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d13d      	bne.n	801052a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80104bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104c6:	d111      	bne.n	80104ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104d0:	d004      	beq.n	80104dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104da:	d107      	bne.n	80104ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104f4:	d10f      	bne.n	8010516 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010526:	2303      	movs	r3, #3
 8010528:	e00f      	b.n	801054a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	689a      	ldr	r2, [r3, #8]
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	4013      	ands	r3, r2
 8010534:	68ba      	ldr	r2, [r7, #8]
 8010536:	429a      	cmp	r2, r3
 8010538:	bf0c      	ite	eq
 801053a:	2301      	moveq	r3, #1
 801053c:	2300      	movne	r3, #0
 801053e:	b2db      	uxtb	r3, r3
 8010540:	461a      	mov	r2, r3
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	429a      	cmp	r2, r3
 8010546:	d1a3      	bne.n	8010490 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b086      	sub	sp, #24
 8010556:	af02      	add	r7, sp, #8
 8010558:	60f8      	str	r0, [r7, #12]
 801055a:	60b9      	str	r1, [r7, #8]
 801055c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010566:	d111      	bne.n	801058c <SPI_EndRxTransaction+0x3a>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010570:	d004      	beq.n	801057c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801057a:	d107      	bne.n	801058c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801058a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010594:	d12a      	bne.n	80105ec <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	689b      	ldr	r3, [r3, #8]
 801059a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801059e:	d012      	beq.n	80105c6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2200      	movs	r2, #0
 80105a8:	2180      	movs	r1, #128	; 0x80
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f7ff ff67 	bl	801047e <SPI_WaitFlagStateUntilTimeout>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d02d      	beq.n	8010612 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105ba:	f043 0220 	orr.w	r2, r3, #32
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80105c2:	2303      	movs	r3, #3
 80105c4:	e026      	b.n	8010614 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2200      	movs	r2, #0
 80105ce:	2101      	movs	r1, #1
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f7ff ff54 	bl	801047e <SPI_WaitFlagStateUntilTimeout>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d01a      	beq.n	8010612 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105e0:	f043 0220 	orr.w	r2, r3, #32
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80105e8:	2303      	movs	r3, #3
 80105ea:	e013      	b.n	8010614 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2200      	movs	r2, #0
 80105f4:	2101      	movs	r1, #1
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f7ff ff41 	bl	801047e <SPI_WaitFlagStateUntilTimeout>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d007      	beq.n	8010612 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010606:	f043 0220 	orr.w	r2, r3, #32
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801060e:	2303      	movs	r3, #3
 8010610:	e000      	b.n	8010614 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b088      	sub	sp, #32
 8010620:	af02      	add	r7, sp, #8
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010628:	4b1b      	ldr	r3, [pc, #108]	; (8010698 <SPI_EndRxTxTransaction+0x7c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a1b      	ldr	r2, [pc, #108]	; (801069c <SPI_EndRxTxTransaction+0x80>)
 801062e:	fba2 2303 	umull	r2, r3, r2, r3
 8010632:	0d5b      	lsrs	r3, r3, #21
 8010634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010638:	fb02 f303 	mul.w	r3, r2, r3
 801063c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010646:	d112      	bne.n	801066e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	2200      	movs	r2, #0
 8010650:	2180      	movs	r1, #128	; 0x80
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7ff ff13 	bl	801047e <SPI_WaitFlagStateUntilTimeout>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d016      	beq.n	801068c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010662:	f043 0220 	orr.w	r2, r3, #32
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801066a:	2303      	movs	r3, #3
 801066c:	e00f      	b.n	801068e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d00a      	beq.n	801068a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	3b01      	subs	r3, #1
 8010678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010684:	2b80      	cmp	r3, #128	; 0x80
 8010686:	d0f2      	beq.n	801066e <SPI_EndRxTxTransaction+0x52>
 8010688:	e000      	b.n	801068c <SPI_EndRxTxTransaction+0x70>
        break;
 801068a:	bf00      	nop
  }

  return HAL_OK;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3718      	adds	r7, #24
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20000000 	.word	0x20000000
 801069c:	165e9f81 	.word	0x165e9f81

080106a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d101      	bne.n	80106b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e01d      	b.n	80106ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7f7 f91a 	bl	8007900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2202      	movs	r2, #2
 80106d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3304      	adds	r3, #4
 80106dc:	4619      	mov	r1, r3
 80106de:	4610      	mov	r0, r2
 80106e0:	f000 fb56 	bl	8010d90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2201      	movs	r2, #1
 80106e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b085      	sub	sp, #20
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68da      	ldr	r2, [r3, #12]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f042 0201 	orr.w	r2, r2, #1
 801070c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	f003 0307 	and.w	r3, r3, #7
 8010718:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b06      	cmp	r3, #6
 801071e:	d007      	beq.n	8010730 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f042 0201 	orr.w	r2, r2, #1
 801072e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3714      	adds	r7, #20
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d101      	bne.n	8010750 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801074c:	2301      	movs	r3, #1
 801074e:	e01d      	b.n	801078c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010756:	b2db      	uxtb	r3, r3
 8010758:	2b00      	cmp	r3, #0
 801075a:	d106      	bne.n	801076a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7f7 f857 	bl	8007818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2202      	movs	r2, #2
 801076e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	3304      	adds	r3, #4
 801077a:	4619      	mov	r1, r3
 801077c:	4610      	mov	r0, r2
 801077e:	f000 fb07 	bl	8010d90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2201      	movs	r2, #1
 80107a4:	6839      	ldr	r1, [r7, #0]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 fd42 	bl	8011230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a15      	ldr	r2, [pc, #84]	; (8010808 <HAL_TIM_PWM_Start+0x74>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d004      	beq.n	80107c0 <HAL_TIM_PWM_Start+0x2c>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a14      	ldr	r2, [pc, #80]	; (801080c <HAL_TIM_PWM_Start+0x78>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d101      	bne.n	80107c4 <HAL_TIM_PWM_Start+0x30>
 80107c0:	2301      	movs	r3, #1
 80107c2:	e000      	b.n	80107c6 <HAL_TIM_PWM_Start+0x32>
 80107c4:	2300      	movs	r3, #0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d007      	beq.n	80107da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80107d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	f003 0307 	and.w	r3, r3, #7
 80107e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b06      	cmp	r3, #6
 80107ea:	d007      	beq.n	80107fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f042 0201 	orr.w	r2, r2, #1
 80107fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	40010000 	.word	0x40010000
 801080c:	40010400 	.word	0x40010400

08010810 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d101      	bne.n	8010824 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	e083      	b.n	801092c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801082a:	b2db      	uxtb	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	d106      	bne.n	801083e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7f7 f8f1 	bl	8007a20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2202      	movs	r2, #2
 8010842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	6812      	ldr	r2, [r2, #0]
 8010850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010854:	f023 0307 	bic.w	r3, r3, #7
 8010858:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	3304      	adds	r3, #4
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	f000 fa93 	bl	8010d90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	699b      	ldr	r3, [r3, #24]
 8010878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	6a1b      	ldr	r3, [r3, #32]
 8010880:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	697a      	ldr	r2, [r7, #20]
 8010888:	4313      	orrs	r3, r2
 801088a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010892:	f023 0303 	bic.w	r3, r3, #3
 8010896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	689a      	ldr	r2, [r3, #8]
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	699b      	ldr	r3, [r3, #24]
 80108a0:	021b      	lsls	r3, r3, #8
 80108a2:	4313      	orrs	r3, r2
 80108a4:	693a      	ldr	r2, [r7, #16]
 80108a6:	4313      	orrs	r3, r2
 80108a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80108b0:	f023 030c 	bic.w	r3, r3, #12
 80108b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80108bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80108c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	68da      	ldr	r2, [r3, #12]
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	69db      	ldr	r3, [r3, #28]
 80108ca:	021b      	lsls	r3, r3, #8
 80108cc:	4313      	orrs	r3, r2
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	4313      	orrs	r3, r2
 80108d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	011a      	lsls	r2, r3, #4
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	6a1b      	ldr	r3, [r3, #32]
 80108de:	031b      	lsls	r3, r3, #12
 80108e0:	4313      	orrs	r3, r2
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	4313      	orrs	r3, r2
 80108e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80108ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80108f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	695b      	ldr	r3, [r3, #20]
 8010900:	011b      	lsls	r3, r3, #4
 8010902:	4313      	orrs	r3, r2
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	4313      	orrs	r3, r2
 8010908:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	697a      	ldr	r2, [r7, #20]
 8010910:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	693a      	ldr	r2, [r7, #16]
 8010918:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2201      	movs	r2, #1
 8010926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801092a:	2300      	movs	r3, #0
}
 801092c:	4618      	mov	r0, r3
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <HAL_TIM_Encoder_Start+0x16>
 8010944:	2b04      	cmp	r3, #4
 8010946:	d008      	beq.n	801095a <HAL_TIM_Encoder_Start+0x26>
 8010948:	e00f      	b.n	801096a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2201      	movs	r2, #1
 8010950:	2100      	movs	r1, #0
 8010952:	4618      	mov	r0, r3
 8010954:	f000 fc6c 	bl	8011230 <TIM_CCxChannelCmd>
      break;
 8010958:	e016      	b.n	8010988 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2201      	movs	r2, #1
 8010960:	2104      	movs	r1, #4
 8010962:	4618      	mov	r0, r3
 8010964:	f000 fc64 	bl	8011230 <TIM_CCxChannelCmd>
      break;
 8010968:	e00e      	b.n	8010988 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2201      	movs	r2, #1
 8010970:	2100      	movs	r1, #0
 8010972:	4618      	mov	r0, r3
 8010974:	f000 fc5c 	bl	8011230 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2201      	movs	r2, #1
 801097e:	2104      	movs	r1, #4
 8010980:	4618      	mov	r0, r3
 8010982:	f000 fc55 	bl	8011230 <TIM_CCxChannelCmd>
      break;
 8010986:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f042 0201 	orr.w	r2, r2, #1
 8010996:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	f003 0302 	and.w	r3, r3, #2
 80109b4:	2b02      	cmp	r3, #2
 80109b6:	d122      	bne.n	80109fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	f003 0302 	and.w	r3, r3, #2
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d11b      	bne.n	80109fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f06f 0202 	mvn.w	r2, #2
 80109ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2201      	movs	r2, #1
 80109d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	f003 0303 	and.w	r3, r3, #3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d003      	beq.n	80109ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f9b5 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 80109ea:	e005      	b.n	80109f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f9a7 	bl	8010d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f9b8 	bl	8010d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	f003 0304 	and.w	r3, r3, #4
 8010a08:	2b04      	cmp	r3, #4
 8010a0a:	d122      	bne.n	8010a52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	f003 0304 	and.w	r3, r3, #4
 8010a16:	2b04      	cmp	r3, #4
 8010a18:	d11b      	bne.n	8010a52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f06f 0204 	mvn.w	r2, #4
 8010a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2202      	movs	r2, #2
 8010a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d003      	beq.n	8010a40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 f98b 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 8010a3e:	e005      	b.n	8010a4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f97d 	bl	8010d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f98e 	bl	8010d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	691b      	ldr	r3, [r3, #16]
 8010a58:	f003 0308 	and.w	r3, r3, #8
 8010a5c:	2b08      	cmp	r3, #8
 8010a5e:	d122      	bne.n	8010aa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	f003 0308 	and.w	r3, r3, #8
 8010a6a:	2b08      	cmp	r3, #8
 8010a6c:	d11b      	bne.n	8010aa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f06f 0208 	mvn.w	r2, #8
 8010a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2204      	movs	r2, #4
 8010a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	69db      	ldr	r3, [r3, #28]
 8010a84:	f003 0303 	and.w	r3, r3, #3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 f961 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 8010a92:	e005      	b.n	8010aa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f953 	bl	8010d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f964 	bl	8010d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	f003 0310 	and.w	r3, r3, #16
 8010ab0:	2b10      	cmp	r3, #16
 8010ab2:	d122      	bne.n	8010afa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	f003 0310 	and.w	r3, r3, #16
 8010abe:	2b10      	cmp	r3, #16
 8010ac0:	d11b      	bne.n	8010afa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f06f 0210 	mvn.w	r2, #16
 8010aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2208      	movs	r2, #8
 8010ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	69db      	ldr	r3, [r3, #28]
 8010ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d003      	beq.n	8010ae8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 f937 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 8010ae6:	e005      	b.n	8010af4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f929 	bl	8010d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f93a 	bl	8010d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2200      	movs	r2, #0
 8010af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d10e      	bne.n	8010b26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	f003 0301 	and.w	r3, r3, #1
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d107      	bne.n	8010b26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f06f 0201 	mvn.w	r2, #1
 8010b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7f5 fb21 	bl	8006168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b30:	2b80      	cmp	r3, #128	; 0x80
 8010b32:	d10e      	bne.n	8010b52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b3e:	2b80      	cmp	r3, #128	; 0x80
 8010b40:	d107      	bne.n	8010b52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 fc6d 	bl	801142c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	691b      	ldr	r3, [r3, #16]
 8010b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b5c:	2b40      	cmp	r3, #64	; 0x40
 8010b5e:	d10e      	bne.n	8010b7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b6a:	2b40      	cmp	r3, #64	; 0x40
 8010b6c:	d107      	bne.n	8010b7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 f8ff 	bl	8010d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	f003 0320 	and.w	r3, r3, #32
 8010b88:	2b20      	cmp	r3, #32
 8010b8a:	d10e      	bne.n	8010baa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	f003 0320 	and.w	r3, r3, #32
 8010b96:	2b20      	cmp	r3, #32
 8010b98:	d107      	bne.n	8010baa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f06f 0220 	mvn.w	r2, #32
 8010ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 fc37 	bl	8011418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010baa:	bf00      	nop
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d101      	bne.n	8010bce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010bca:	2302      	movs	r3, #2
 8010bcc:	e0b4      	b.n	8010d38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2202      	movs	r2, #2
 8010bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b0c      	cmp	r3, #12
 8010be2:	f200 809f 	bhi.w	8010d24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010be6:	a201      	add	r2, pc, #4	; (adr r2, 8010bec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bec:	08010c21 	.word	0x08010c21
 8010bf0:	08010d25 	.word	0x08010d25
 8010bf4:	08010d25 	.word	0x08010d25
 8010bf8:	08010d25 	.word	0x08010d25
 8010bfc:	08010c61 	.word	0x08010c61
 8010c00:	08010d25 	.word	0x08010d25
 8010c04:	08010d25 	.word	0x08010d25
 8010c08:	08010d25 	.word	0x08010d25
 8010c0c:	08010ca3 	.word	0x08010ca3
 8010c10:	08010d25 	.word	0x08010d25
 8010c14:	08010d25 	.word	0x08010d25
 8010c18:	08010d25 	.word	0x08010d25
 8010c1c:	08010ce3 	.word	0x08010ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68b9      	ldr	r1, [r7, #8]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f000 f952 	bl	8010ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	699a      	ldr	r2, [r3, #24]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f042 0208 	orr.w	r2, r2, #8
 8010c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	699a      	ldr	r2, [r3, #24]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f022 0204 	bic.w	r2, r2, #4
 8010c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6999      	ldr	r1, [r3, #24]
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	691a      	ldr	r2, [r3, #16]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	430a      	orrs	r2, r1
 8010c5c:	619a      	str	r2, [r3, #24]
      break;
 8010c5e:	e062      	b.n	8010d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68b9      	ldr	r1, [r7, #8]
 8010c66:	4618      	mov	r0, r3
 8010c68:	f000 f9a2 	bl	8010fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	699a      	ldr	r2, [r3, #24]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	699a      	ldr	r2, [r3, #24]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6999      	ldr	r1, [r3, #24]
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	691b      	ldr	r3, [r3, #16]
 8010c96:	021a      	lsls	r2, r3, #8
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	430a      	orrs	r2, r1
 8010c9e:	619a      	str	r2, [r3, #24]
      break;
 8010ca0:	e041      	b.n	8010d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	68b9      	ldr	r1, [r7, #8]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 f9f7 	bl	801109c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	69da      	ldr	r2, [r3, #28]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f042 0208 	orr.w	r2, r2, #8
 8010cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	69da      	ldr	r2, [r3, #28]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f022 0204 	bic.w	r2, r2, #4
 8010ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	69d9      	ldr	r1, [r3, #28]
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	691a      	ldr	r2, [r3, #16]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	61da      	str	r2, [r3, #28]
      break;
 8010ce0:	e021      	b.n	8010d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	68b9      	ldr	r1, [r7, #8]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 fa4b 	bl	8011184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	69da      	ldr	r2, [r3, #28]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	69da      	ldr	r2, [r3, #28]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	69d9      	ldr	r1, [r3, #28]
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	021a      	lsls	r2, r3, #8
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	430a      	orrs	r2, r1
 8010d20:	61da      	str	r2, [r3, #28]
      break;
 8010d22:	e000      	b.n	8010d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8010d24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2201      	movs	r2, #1
 8010d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010d48:	bf00      	nop
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010d5c:	bf00      	nop
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d70:	bf00      	nop
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a40      	ldr	r2, [pc, #256]	; (8010ea4 <TIM_Base_SetConfig+0x114>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d013      	beq.n	8010dd0 <TIM_Base_SetConfig+0x40>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dae:	d00f      	beq.n	8010dd0 <TIM_Base_SetConfig+0x40>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a3d      	ldr	r2, [pc, #244]	; (8010ea8 <TIM_Base_SetConfig+0x118>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d00b      	beq.n	8010dd0 <TIM_Base_SetConfig+0x40>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4a3c      	ldr	r2, [pc, #240]	; (8010eac <TIM_Base_SetConfig+0x11c>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d007      	beq.n	8010dd0 <TIM_Base_SetConfig+0x40>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4a3b      	ldr	r2, [pc, #236]	; (8010eb0 <TIM_Base_SetConfig+0x120>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d003      	beq.n	8010dd0 <TIM_Base_SetConfig+0x40>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4a3a      	ldr	r2, [pc, #232]	; (8010eb4 <TIM_Base_SetConfig+0x124>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d108      	bne.n	8010de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	4313      	orrs	r3, r2
 8010de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4a2f      	ldr	r2, [pc, #188]	; (8010ea4 <TIM_Base_SetConfig+0x114>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d02b      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010df0:	d027      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a2c      	ldr	r2, [pc, #176]	; (8010ea8 <TIM_Base_SetConfig+0x118>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d023      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4a2b      	ldr	r2, [pc, #172]	; (8010eac <TIM_Base_SetConfig+0x11c>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d01f      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4a2a      	ldr	r2, [pc, #168]	; (8010eb0 <TIM_Base_SetConfig+0x120>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d01b      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4a29      	ldr	r2, [pc, #164]	; (8010eb4 <TIM_Base_SetConfig+0x124>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d017      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4a28      	ldr	r2, [pc, #160]	; (8010eb8 <TIM_Base_SetConfig+0x128>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d013      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a27      	ldr	r2, [pc, #156]	; (8010ebc <TIM_Base_SetConfig+0x12c>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d00f      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a26      	ldr	r2, [pc, #152]	; (8010ec0 <TIM_Base_SetConfig+0x130>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d00b      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a25      	ldr	r2, [pc, #148]	; (8010ec4 <TIM_Base_SetConfig+0x134>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d007      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4a24      	ldr	r2, [pc, #144]	; (8010ec8 <TIM_Base_SetConfig+0x138>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d003      	beq.n	8010e42 <TIM_Base_SetConfig+0xb2>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4a23      	ldr	r2, [pc, #140]	; (8010ecc <TIM_Base_SetConfig+0x13c>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d108      	bne.n	8010e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	4313      	orrs	r3, r2
 8010e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	689a      	ldr	r2, [r3, #8]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ea4 <TIM_Base_SetConfig+0x114>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d003      	beq.n	8010e88 <TIM_Base_SetConfig+0xf8>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a0c      	ldr	r2, [pc, #48]	; (8010eb4 <TIM_Base_SetConfig+0x124>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d103      	bne.n	8010e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	691a      	ldr	r2, [r3, #16]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2201      	movs	r2, #1
 8010e94:	615a      	str	r2, [r3, #20]
}
 8010e96:	bf00      	nop
 8010e98:	3714      	adds	r7, #20
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	40010000 	.word	0x40010000
 8010ea8:	40000400 	.word	0x40000400
 8010eac:	40000800 	.word	0x40000800
 8010eb0:	40000c00 	.word	0x40000c00
 8010eb4:	40010400 	.word	0x40010400
 8010eb8:	40014000 	.word	0x40014000
 8010ebc:	40014400 	.word	0x40014400
 8010ec0:	40014800 	.word	0x40014800
 8010ec4:	40001800 	.word	0x40001800
 8010ec8:	40001c00 	.word	0x40001c00
 8010ecc:	40002000 	.word	0x40002000

08010ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b087      	sub	sp, #28
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	f023 0201 	bic.w	r2, r3, #1
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	699b      	ldr	r3, [r3, #24]
 8010ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f023 0303 	bic.w	r3, r3, #3
 8010f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	f023 0302 	bic.w	r3, r3, #2
 8010f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	4313      	orrs	r3, r2
 8010f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4a20      	ldr	r2, [pc, #128]	; (8010fa8 <TIM_OC1_SetConfig+0xd8>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d003      	beq.n	8010f34 <TIM_OC1_SetConfig+0x64>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4a1f      	ldr	r2, [pc, #124]	; (8010fac <TIM_OC1_SetConfig+0xdc>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d10c      	bne.n	8010f4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	f023 0308 	bic.w	r3, r3, #8
 8010f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	f023 0304 	bic.w	r3, r3, #4
 8010f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4a15      	ldr	r2, [pc, #84]	; (8010fa8 <TIM_OC1_SetConfig+0xd8>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d003      	beq.n	8010f5e <TIM_OC1_SetConfig+0x8e>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a14      	ldr	r2, [pc, #80]	; (8010fac <TIM_OC1_SetConfig+0xdc>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d111      	bne.n	8010f82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	693a      	ldr	r2, [r7, #16]
 8010f74:	4313      	orrs	r3, r2
 8010f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	699b      	ldr	r3, [r3, #24]
 8010f7c:	693a      	ldr	r2, [r7, #16]
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	68fa      	ldr	r2, [r7, #12]
 8010f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	697a      	ldr	r2, [r7, #20]
 8010f9a:	621a      	str	r2, [r3, #32]
}
 8010f9c:	bf00      	nop
 8010f9e:	371c      	adds	r7, #28
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr
 8010fa8:	40010000 	.word	0x40010000
 8010fac:	40010400 	.word	0x40010400

08010fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b087      	sub	sp, #28
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a1b      	ldr	r3, [r3, #32]
 8010fbe:	f023 0210 	bic.w	r2, r3, #16
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a1b      	ldr	r3, [r3, #32]
 8010fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	699b      	ldr	r3, [r3, #24]
 8010fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	021b      	lsls	r3, r3, #8
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	4313      	orrs	r3, r2
 8010ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f023 0320 	bic.w	r3, r3, #32
 8010ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	011b      	lsls	r3, r3, #4
 8011002:	697a      	ldr	r2, [r7, #20]
 8011004:	4313      	orrs	r3, r2
 8011006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	4a22      	ldr	r2, [pc, #136]	; (8011094 <TIM_OC2_SetConfig+0xe4>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d003      	beq.n	8011018 <TIM_OC2_SetConfig+0x68>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4a21      	ldr	r2, [pc, #132]	; (8011098 <TIM_OC2_SetConfig+0xe8>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d10d      	bne.n	8011034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801101e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	011b      	lsls	r3, r3, #4
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	4313      	orrs	r3, r2
 801102a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	4a17      	ldr	r2, [pc, #92]	; (8011094 <TIM_OC2_SetConfig+0xe4>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d003      	beq.n	8011044 <TIM_OC2_SetConfig+0x94>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	4a16      	ldr	r2, [pc, #88]	; (8011098 <TIM_OC2_SetConfig+0xe8>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d113      	bne.n	801106c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801104a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	695b      	ldr	r3, [r3, #20]
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	693a      	ldr	r2, [r7, #16]
 801105c:	4313      	orrs	r3, r2
 801105e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	699b      	ldr	r3, [r3, #24]
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	693a      	ldr	r2, [r7, #16]
 8011068:	4313      	orrs	r3, r2
 801106a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	697a      	ldr	r2, [r7, #20]
 8011084:	621a      	str	r2, [r3, #32]
}
 8011086:	bf00      	nop
 8011088:	371c      	adds	r7, #28
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	40010000 	.word	0x40010000
 8011098:	40010400 	.word	0x40010400

0801109c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801109c:	b480      	push	{r7}
 801109e:	b087      	sub	sp, #28
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f023 0303 	bic.w	r3, r3, #3
 80110d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	4313      	orrs	r3, r2
 80110dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	021b      	lsls	r3, r3, #8
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	4313      	orrs	r3, r2
 80110f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a21      	ldr	r2, [pc, #132]	; (801117c <TIM_OC3_SetConfig+0xe0>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d003      	beq.n	8011102 <TIM_OC3_SetConfig+0x66>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a20      	ldr	r2, [pc, #128]	; (8011180 <TIM_OC3_SetConfig+0xe4>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d10d      	bne.n	801111e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	021b      	lsls	r3, r3, #8
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	4313      	orrs	r3, r2
 8011114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801111c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a16      	ldr	r2, [pc, #88]	; (801117c <TIM_OC3_SetConfig+0xe0>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d003      	beq.n	801112e <TIM_OC3_SetConfig+0x92>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a15      	ldr	r2, [pc, #84]	; (8011180 <TIM_OC3_SetConfig+0xe4>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d113      	bne.n	8011156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801113c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	695b      	ldr	r3, [r3, #20]
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	4313      	orrs	r3, r2
 8011148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	011b      	lsls	r3, r3, #4
 8011150:	693a      	ldr	r2, [r7, #16]
 8011152:	4313      	orrs	r3, r2
 8011154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	693a      	ldr	r2, [r7, #16]
 801115a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	621a      	str	r2, [r3, #32]
}
 8011170:	bf00      	nop
 8011172:	371c      	adds	r7, #28
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr
 801117c:	40010000 	.word	0x40010000
 8011180:	40010400 	.word	0x40010400

08011184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011184:	b480      	push	{r7}
 8011186:	b087      	sub	sp, #28
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6a1b      	ldr	r3, [r3, #32]
 8011192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	69db      	ldr	r3, [r3, #28]
 80111aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	021b      	lsls	r3, r3, #8
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	031b      	lsls	r3, r3, #12
 80111d6:	693a      	ldr	r2, [r7, #16]
 80111d8:	4313      	orrs	r3, r2
 80111da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4a12      	ldr	r2, [pc, #72]	; (8011228 <TIM_OC4_SetConfig+0xa4>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d003      	beq.n	80111ec <TIM_OC4_SetConfig+0x68>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4a11      	ldr	r2, [pc, #68]	; (801122c <TIM_OC4_SetConfig+0xa8>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d109      	bne.n	8011200 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80111f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	695b      	ldr	r3, [r3, #20]
 80111f8:	019b      	lsls	r3, r3, #6
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	697a      	ldr	r2, [r7, #20]
 8011204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	685a      	ldr	r2, [r3, #4]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	693a      	ldr	r2, [r7, #16]
 8011218:	621a      	str	r2, [r3, #32]
}
 801121a:	bf00      	nop
 801121c:	371c      	adds	r7, #28
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	40010000 	.word	0x40010000
 801122c:	40010400 	.word	0x40010400

08011230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011230:	b480      	push	{r7}
 8011232:	b087      	sub	sp, #28
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	f003 031f 	and.w	r3, r3, #31
 8011242:	2201      	movs	r2, #1
 8011244:	fa02 f303 	lsl.w	r3, r2, r3
 8011248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6a1a      	ldr	r2, [r3, #32]
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	43db      	mvns	r3, r3
 8011252:	401a      	ands	r2, r3
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	6a1a      	ldr	r2, [r3, #32]
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f003 031f 	and.w	r3, r3, #31
 8011262:	6879      	ldr	r1, [r7, #4]
 8011264:	fa01 f303 	lsl.w	r3, r1, r3
 8011268:	431a      	orrs	r2, r3
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	621a      	str	r2, [r3, #32]
}
 801126e:	bf00      	nop
 8011270:	371c      	adds	r7, #28
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
	...

0801127c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801128c:	2b01      	cmp	r3, #1
 801128e:	d101      	bne.n	8011294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011290:	2302      	movs	r3, #2
 8011292:	e05a      	b.n	801134a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2202      	movs	r2, #2
 80112a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	4313      	orrs	r3, r2
 80112c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a21      	ldr	r2, [pc, #132]	; (8011358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d022      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112e0:	d01d      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a1d      	ldr	r2, [pc, #116]	; (801135c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d018      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a1b      	ldr	r2, [pc, #108]	; (8011360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d013      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4a1a      	ldr	r2, [pc, #104]	; (8011364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d00e      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a18      	ldr	r2, [pc, #96]	; (8011368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d009      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a17      	ldr	r2, [pc, #92]	; (801136c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d004      	beq.n	801131e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a15      	ldr	r2, [pc, #84]	; (8011370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d10c      	bne.n	8011338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	4313      	orrs	r3, r2
 801132e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2201      	movs	r2, #1
 801133c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3714      	adds	r7, #20
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	40010000 	.word	0x40010000
 801135c:	40000400 	.word	0x40000400
 8011360:	40000800 	.word	0x40000800
 8011364:	40000c00 	.word	0x40000c00
 8011368:	40010400 	.word	0x40010400
 801136c:	40014000 	.word	0x40014000
 8011370:	40001800 	.word	0x40001800

08011374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011374:	b480      	push	{r7}
 8011376:	b085      	sub	sp, #20
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801137e:	2300      	movs	r3, #0
 8011380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011388:	2b01      	cmp	r3, #1
 801138a:	d101      	bne.n	8011390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801138c:	2302      	movs	r3, #2
 801138e:	e03d      	b.n	801140c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2201      	movs	r2, #1
 8011394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	4313      	orrs	r3, r2
 80113c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4313      	orrs	r3, r2
 80113ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	4313      	orrs	r3, r2
 80113dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	695b      	ldr	r3, [r3, #20]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	69db      	ldr	r3, [r3, #28]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68fa      	ldr	r2, [r7, #12]
 8011400:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011418:	b480      	push	{r7}
 801141a:	b083      	sub	sp, #12
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011420:	bf00      	nop
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr

0801142c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011434:	bf00      	nop
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d101      	bne.n	8011452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801144e:	2301      	movs	r3, #1
 8011450:	e03f      	b.n	80114d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	d106      	bne.n	801146c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7f6 fc04 	bl	8007c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2224      	movs	r2, #36	; 0x24
 8011470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68da      	ldr	r2, [r3, #12]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 f829 	bl	80114dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	691a      	ldr	r2, [r3, #16]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	695a      	ldr	r2, [r3, #20]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80114a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68da      	ldr	r2, [r3, #12]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2220      	movs	r2, #32
 80114c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2220      	movs	r2, #32
 80114cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
	...

080114dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80114dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e0:	b085      	sub	sp, #20
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	691b      	ldr	r3, [r3, #16]
 80114ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	68da      	ldr	r2, [r3, #12]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	430a      	orrs	r2, r1
 80114fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	689a      	ldr	r2, [r3, #8]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	691b      	ldr	r3, [r3, #16]
 8011504:	431a      	orrs	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	431a      	orrs	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	4313      	orrs	r3, r2
 8011512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801151e:	f023 030c 	bic.w	r3, r3, #12
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	6812      	ldr	r2, [r2, #0]
 8011526:	68f9      	ldr	r1, [r7, #12]
 8011528:	430b      	orrs	r3, r1
 801152a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	699a      	ldr	r2, [r3, #24]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	430a      	orrs	r2, r1
 8011540:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	69db      	ldr	r3, [r3, #28]
 8011546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801154a:	f040 818b 	bne.w	8011864 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4ac1      	ldr	r2, [pc, #772]	; (8011858 <UART_SetConfig+0x37c>)
 8011554:	4293      	cmp	r3, r2
 8011556:	d005      	beq.n	8011564 <UART_SetConfig+0x88>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4abf      	ldr	r2, [pc, #764]	; (801185c <UART_SetConfig+0x380>)
 801155e:	4293      	cmp	r3, r2
 8011560:	f040 80bd 	bne.w	80116de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011564:	f7fc fbcc 	bl	800dd00 <HAL_RCC_GetPCLK2Freq>
 8011568:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	461d      	mov	r5, r3
 801156e:	f04f 0600 	mov.w	r6, #0
 8011572:	46a8      	mov	r8, r5
 8011574:	46b1      	mov	r9, r6
 8011576:	eb18 0308 	adds.w	r3, r8, r8
 801157a:	eb49 0409 	adc.w	r4, r9, r9
 801157e:	4698      	mov	r8, r3
 8011580:	46a1      	mov	r9, r4
 8011582:	eb18 0805 	adds.w	r8, r8, r5
 8011586:	eb49 0906 	adc.w	r9, r9, r6
 801158a:	f04f 0100 	mov.w	r1, #0
 801158e:	f04f 0200 	mov.w	r2, #0
 8011592:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011596:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801159a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801159e:	4688      	mov	r8, r1
 80115a0:	4691      	mov	r9, r2
 80115a2:	eb18 0005 	adds.w	r0, r8, r5
 80115a6:	eb49 0106 	adc.w	r1, r9, r6
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	461d      	mov	r5, r3
 80115b0:	f04f 0600 	mov.w	r6, #0
 80115b4:	196b      	adds	r3, r5, r5
 80115b6:	eb46 0406 	adc.w	r4, r6, r6
 80115ba:	461a      	mov	r2, r3
 80115bc:	4623      	mov	r3, r4
 80115be:	f7ef fb7b 	bl	8000cb8 <__aeabi_uldivmod>
 80115c2:	4603      	mov	r3, r0
 80115c4:	460c      	mov	r4, r1
 80115c6:	461a      	mov	r2, r3
 80115c8:	4ba5      	ldr	r3, [pc, #660]	; (8011860 <UART_SetConfig+0x384>)
 80115ca:	fba3 2302 	umull	r2, r3, r3, r2
 80115ce:	095b      	lsrs	r3, r3, #5
 80115d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	461d      	mov	r5, r3
 80115d8:	f04f 0600 	mov.w	r6, #0
 80115dc:	46a9      	mov	r9, r5
 80115de:	46b2      	mov	sl, r6
 80115e0:	eb19 0309 	adds.w	r3, r9, r9
 80115e4:	eb4a 040a 	adc.w	r4, sl, sl
 80115e8:	4699      	mov	r9, r3
 80115ea:	46a2      	mov	sl, r4
 80115ec:	eb19 0905 	adds.w	r9, r9, r5
 80115f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80115f4:	f04f 0100 	mov.w	r1, #0
 80115f8:	f04f 0200 	mov.w	r2, #0
 80115fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011608:	4689      	mov	r9, r1
 801160a:	4692      	mov	sl, r2
 801160c:	eb19 0005 	adds.w	r0, r9, r5
 8011610:	eb4a 0106 	adc.w	r1, sl, r6
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	461d      	mov	r5, r3
 801161a:	f04f 0600 	mov.w	r6, #0
 801161e:	196b      	adds	r3, r5, r5
 8011620:	eb46 0406 	adc.w	r4, r6, r6
 8011624:	461a      	mov	r2, r3
 8011626:	4623      	mov	r3, r4
 8011628:	f7ef fb46 	bl	8000cb8 <__aeabi_uldivmod>
 801162c:	4603      	mov	r3, r0
 801162e:	460c      	mov	r4, r1
 8011630:	461a      	mov	r2, r3
 8011632:	4b8b      	ldr	r3, [pc, #556]	; (8011860 <UART_SetConfig+0x384>)
 8011634:	fba3 1302 	umull	r1, r3, r3, r2
 8011638:	095b      	lsrs	r3, r3, #5
 801163a:	2164      	movs	r1, #100	; 0x64
 801163c:	fb01 f303 	mul.w	r3, r1, r3
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	00db      	lsls	r3, r3, #3
 8011644:	3332      	adds	r3, #50	; 0x32
 8011646:	4a86      	ldr	r2, [pc, #536]	; (8011860 <UART_SetConfig+0x384>)
 8011648:	fba2 2303 	umull	r2, r3, r2, r3
 801164c:	095b      	lsrs	r3, r3, #5
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011654:	4498      	add	r8, r3
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	461d      	mov	r5, r3
 801165a:	f04f 0600 	mov.w	r6, #0
 801165e:	46a9      	mov	r9, r5
 8011660:	46b2      	mov	sl, r6
 8011662:	eb19 0309 	adds.w	r3, r9, r9
 8011666:	eb4a 040a 	adc.w	r4, sl, sl
 801166a:	4699      	mov	r9, r3
 801166c:	46a2      	mov	sl, r4
 801166e:	eb19 0905 	adds.w	r9, r9, r5
 8011672:	eb4a 0a06 	adc.w	sl, sl, r6
 8011676:	f04f 0100 	mov.w	r1, #0
 801167a:	f04f 0200 	mov.w	r2, #0
 801167e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801168a:	4689      	mov	r9, r1
 801168c:	4692      	mov	sl, r2
 801168e:	eb19 0005 	adds.w	r0, r9, r5
 8011692:	eb4a 0106 	adc.w	r1, sl, r6
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	461d      	mov	r5, r3
 801169c:	f04f 0600 	mov.w	r6, #0
 80116a0:	196b      	adds	r3, r5, r5
 80116a2:	eb46 0406 	adc.w	r4, r6, r6
 80116a6:	461a      	mov	r2, r3
 80116a8:	4623      	mov	r3, r4
 80116aa:	f7ef fb05 	bl	8000cb8 <__aeabi_uldivmod>
 80116ae:	4603      	mov	r3, r0
 80116b0:	460c      	mov	r4, r1
 80116b2:	461a      	mov	r2, r3
 80116b4:	4b6a      	ldr	r3, [pc, #424]	; (8011860 <UART_SetConfig+0x384>)
 80116b6:	fba3 1302 	umull	r1, r3, r3, r2
 80116ba:	095b      	lsrs	r3, r3, #5
 80116bc:	2164      	movs	r1, #100	; 0x64
 80116be:	fb01 f303 	mul.w	r3, r1, r3
 80116c2:	1ad3      	subs	r3, r2, r3
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	3332      	adds	r3, #50	; 0x32
 80116c8:	4a65      	ldr	r2, [pc, #404]	; (8011860 <UART_SetConfig+0x384>)
 80116ca:	fba2 2303 	umull	r2, r3, r2, r3
 80116ce:	095b      	lsrs	r3, r3, #5
 80116d0:	f003 0207 	and.w	r2, r3, #7
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4442      	add	r2, r8
 80116da:	609a      	str	r2, [r3, #8]
 80116dc:	e26f      	b.n	8011bbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80116de:	f7fc fafb 	bl	800dcd8 <HAL_RCC_GetPCLK1Freq>
 80116e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	461d      	mov	r5, r3
 80116e8:	f04f 0600 	mov.w	r6, #0
 80116ec:	46a8      	mov	r8, r5
 80116ee:	46b1      	mov	r9, r6
 80116f0:	eb18 0308 	adds.w	r3, r8, r8
 80116f4:	eb49 0409 	adc.w	r4, r9, r9
 80116f8:	4698      	mov	r8, r3
 80116fa:	46a1      	mov	r9, r4
 80116fc:	eb18 0805 	adds.w	r8, r8, r5
 8011700:	eb49 0906 	adc.w	r9, r9, r6
 8011704:	f04f 0100 	mov.w	r1, #0
 8011708:	f04f 0200 	mov.w	r2, #0
 801170c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011710:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011714:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011718:	4688      	mov	r8, r1
 801171a:	4691      	mov	r9, r2
 801171c:	eb18 0005 	adds.w	r0, r8, r5
 8011720:	eb49 0106 	adc.w	r1, r9, r6
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	461d      	mov	r5, r3
 801172a:	f04f 0600 	mov.w	r6, #0
 801172e:	196b      	adds	r3, r5, r5
 8011730:	eb46 0406 	adc.w	r4, r6, r6
 8011734:	461a      	mov	r2, r3
 8011736:	4623      	mov	r3, r4
 8011738:	f7ef fabe 	bl	8000cb8 <__aeabi_uldivmod>
 801173c:	4603      	mov	r3, r0
 801173e:	460c      	mov	r4, r1
 8011740:	461a      	mov	r2, r3
 8011742:	4b47      	ldr	r3, [pc, #284]	; (8011860 <UART_SetConfig+0x384>)
 8011744:	fba3 2302 	umull	r2, r3, r3, r2
 8011748:	095b      	lsrs	r3, r3, #5
 801174a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	461d      	mov	r5, r3
 8011752:	f04f 0600 	mov.w	r6, #0
 8011756:	46a9      	mov	r9, r5
 8011758:	46b2      	mov	sl, r6
 801175a:	eb19 0309 	adds.w	r3, r9, r9
 801175e:	eb4a 040a 	adc.w	r4, sl, sl
 8011762:	4699      	mov	r9, r3
 8011764:	46a2      	mov	sl, r4
 8011766:	eb19 0905 	adds.w	r9, r9, r5
 801176a:	eb4a 0a06 	adc.w	sl, sl, r6
 801176e:	f04f 0100 	mov.w	r1, #0
 8011772:	f04f 0200 	mov.w	r2, #0
 8011776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801177a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801177e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011782:	4689      	mov	r9, r1
 8011784:	4692      	mov	sl, r2
 8011786:	eb19 0005 	adds.w	r0, r9, r5
 801178a:	eb4a 0106 	adc.w	r1, sl, r6
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	461d      	mov	r5, r3
 8011794:	f04f 0600 	mov.w	r6, #0
 8011798:	196b      	adds	r3, r5, r5
 801179a:	eb46 0406 	adc.w	r4, r6, r6
 801179e:	461a      	mov	r2, r3
 80117a0:	4623      	mov	r3, r4
 80117a2:	f7ef fa89 	bl	8000cb8 <__aeabi_uldivmod>
 80117a6:	4603      	mov	r3, r0
 80117a8:	460c      	mov	r4, r1
 80117aa:	461a      	mov	r2, r3
 80117ac:	4b2c      	ldr	r3, [pc, #176]	; (8011860 <UART_SetConfig+0x384>)
 80117ae:	fba3 1302 	umull	r1, r3, r3, r2
 80117b2:	095b      	lsrs	r3, r3, #5
 80117b4:	2164      	movs	r1, #100	; 0x64
 80117b6:	fb01 f303 	mul.w	r3, r1, r3
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	3332      	adds	r3, #50	; 0x32
 80117c0:	4a27      	ldr	r2, [pc, #156]	; (8011860 <UART_SetConfig+0x384>)
 80117c2:	fba2 2303 	umull	r2, r3, r2, r3
 80117c6:	095b      	lsrs	r3, r3, #5
 80117c8:	005b      	lsls	r3, r3, #1
 80117ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80117ce:	4498      	add	r8, r3
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	461d      	mov	r5, r3
 80117d4:	f04f 0600 	mov.w	r6, #0
 80117d8:	46a9      	mov	r9, r5
 80117da:	46b2      	mov	sl, r6
 80117dc:	eb19 0309 	adds.w	r3, r9, r9
 80117e0:	eb4a 040a 	adc.w	r4, sl, sl
 80117e4:	4699      	mov	r9, r3
 80117e6:	46a2      	mov	sl, r4
 80117e8:	eb19 0905 	adds.w	r9, r9, r5
 80117ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80117f0:	f04f 0100 	mov.w	r1, #0
 80117f4:	f04f 0200 	mov.w	r2, #0
 80117f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011804:	4689      	mov	r9, r1
 8011806:	4692      	mov	sl, r2
 8011808:	eb19 0005 	adds.w	r0, r9, r5
 801180c:	eb4a 0106 	adc.w	r1, sl, r6
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	461d      	mov	r5, r3
 8011816:	f04f 0600 	mov.w	r6, #0
 801181a:	196b      	adds	r3, r5, r5
 801181c:	eb46 0406 	adc.w	r4, r6, r6
 8011820:	461a      	mov	r2, r3
 8011822:	4623      	mov	r3, r4
 8011824:	f7ef fa48 	bl	8000cb8 <__aeabi_uldivmod>
 8011828:	4603      	mov	r3, r0
 801182a:	460c      	mov	r4, r1
 801182c:	461a      	mov	r2, r3
 801182e:	4b0c      	ldr	r3, [pc, #48]	; (8011860 <UART_SetConfig+0x384>)
 8011830:	fba3 1302 	umull	r1, r3, r3, r2
 8011834:	095b      	lsrs	r3, r3, #5
 8011836:	2164      	movs	r1, #100	; 0x64
 8011838:	fb01 f303 	mul.w	r3, r1, r3
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	3332      	adds	r3, #50	; 0x32
 8011842:	4a07      	ldr	r2, [pc, #28]	; (8011860 <UART_SetConfig+0x384>)
 8011844:	fba2 2303 	umull	r2, r3, r2, r3
 8011848:	095b      	lsrs	r3, r3, #5
 801184a:	f003 0207 	and.w	r2, r3, #7
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4442      	add	r2, r8
 8011854:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011856:	e1b2      	b.n	8011bbe <UART_SetConfig+0x6e2>
 8011858:	40011000 	.word	0x40011000
 801185c:	40011400 	.word	0x40011400
 8011860:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4ad7      	ldr	r2, [pc, #860]	; (8011bc8 <UART_SetConfig+0x6ec>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d005      	beq.n	801187a <UART_SetConfig+0x39e>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4ad6      	ldr	r2, [pc, #856]	; (8011bcc <UART_SetConfig+0x6f0>)
 8011874:	4293      	cmp	r3, r2
 8011876:	f040 80d1 	bne.w	8011a1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801187a:	f7fc fa41 	bl	800dd00 <HAL_RCC_GetPCLK2Freq>
 801187e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	469a      	mov	sl, r3
 8011884:	f04f 0b00 	mov.w	fp, #0
 8011888:	46d0      	mov	r8, sl
 801188a:	46d9      	mov	r9, fp
 801188c:	eb18 0308 	adds.w	r3, r8, r8
 8011890:	eb49 0409 	adc.w	r4, r9, r9
 8011894:	4698      	mov	r8, r3
 8011896:	46a1      	mov	r9, r4
 8011898:	eb18 080a 	adds.w	r8, r8, sl
 801189c:	eb49 090b 	adc.w	r9, r9, fp
 80118a0:	f04f 0100 	mov.w	r1, #0
 80118a4:	f04f 0200 	mov.w	r2, #0
 80118a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80118ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80118b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80118b4:	4688      	mov	r8, r1
 80118b6:	4691      	mov	r9, r2
 80118b8:	eb1a 0508 	adds.w	r5, sl, r8
 80118bc:	eb4b 0609 	adc.w	r6, fp, r9
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	4619      	mov	r1, r3
 80118c6:	f04f 0200 	mov.w	r2, #0
 80118ca:	f04f 0300 	mov.w	r3, #0
 80118ce:	f04f 0400 	mov.w	r4, #0
 80118d2:	0094      	lsls	r4, r2, #2
 80118d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80118d8:	008b      	lsls	r3, r1, #2
 80118da:	461a      	mov	r2, r3
 80118dc:	4623      	mov	r3, r4
 80118de:	4628      	mov	r0, r5
 80118e0:	4631      	mov	r1, r6
 80118e2:	f7ef f9e9 	bl	8000cb8 <__aeabi_uldivmod>
 80118e6:	4603      	mov	r3, r0
 80118e8:	460c      	mov	r4, r1
 80118ea:	461a      	mov	r2, r3
 80118ec:	4bb8      	ldr	r3, [pc, #736]	; (8011bd0 <UART_SetConfig+0x6f4>)
 80118ee:	fba3 2302 	umull	r2, r3, r3, r2
 80118f2:	095b      	lsrs	r3, r3, #5
 80118f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	469b      	mov	fp, r3
 80118fc:	f04f 0c00 	mov.w	ip, #0
 8011900:	46d9      	mov	r9, fp
 8011902:	46e2      	mov	sl, ip
 8011904:	eb19 0309 	adds.w	r3, r9, r9
 8011908:	eb4a 040a 	adc.w	r4, sl, sl
 801190c:	4699      	mov	r9, r3
 801190e:	46a2      	mov	sl, r4
 8011910:	eb19 090b 	adds.w	r9, r9, fp
 8011914:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011918:	f04f 0100 	mov.w	r1, #0
 801191c:	f04f 0200 	mov.w	r2, #0
 8011920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011924:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011928:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801192c:	4689      	mov	r9, r1
 801192e:	4692      	mov	sl, r2
 8011930:	eb1b 0509 	adds.w	r5, fp, r9
 8011934:	eb4c 060a 	adc.w	r6, ip, sl
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	685b      	ldr	r3, [r3, #4]
 801193c:	4619      	mov	r1, r3
 801193e:	f04f 0200 	mov.w	r2, #0
 8011942:	f04f 0300 	mov.w	r3, #0
 8011946:	f04f 0400 	mov.w	r4, #0
 801194a:	0094      	lsls	r4, r2, #2
 801194c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011950:	008b      	lsls	r3, r1, #2
 8011952:	461a      	mov	r2, r3
 8011954:	4623      	mov	r3, r4
 8011956:	4628      	mov	r0, r5
 8011958:	4631      	mov	r1, r6
 801195a:	f7ef f9ad 	bl	8000cb8 <__aeabi_uldivmod>
 801195e:	4603      	mov	r3, r0
 8011960:	460c      	mov	r4, r1
 8011962:	461a      	mov	r2, r3
 8011964:	4b9a      	ldr	r3, [pc, #616]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011966:	fba3 1302 	umull	r1, r3, r3, r2
 801196a:	095b      	lsrs	r3, r3, #5
 801196c:	2164      	movs	r1, #100	; 0x64
 801196e:	fb01 f303 	mul.w	r3, r1, r3
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	011b      	lsls	r3, r3, #4
 8011976:	3332      	adds	r3, #50	; 0x32
 8011978:	4a95      	ldr	r2, [pc, #596]	; (8011bd0 <UART_SetConfig+0x6f4>)
 801197a:	fba2 2303 	umull	r2, r3, r2, r3
 801197e:	095b      	lsrs	r3, r3, #5
 8011980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011984:	4498      	add	r8, r3
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	469b      	mov	fp, r3
 801198a:	f04f 0c00 	mov.w	ip, #0
 801198e:	46d9      	mov	r9, fp
 8011990:	46e2      	mov	sl, ip
 8011992:	eb19 0309 	adds.w	r3, r9, r9
 8011996:	eb4a 040a 	adc.w	r4, sl, sl
 801199a:	4699      	mov	r9, r3
 801199c:	46a2      	mov	sl, r4
 801199e:	eb19 090b 	adds.w	r9, r9, fp
 80119a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80119a6:	f04f 0100 	mov.w	r1, #0
 80119aa:	f04f 0200 	mov.w	r2, #0
 80119ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80119b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80119b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80119ba:	4689      	mov	r9, r1
 80119bc:	4692      	mov	sl, r2
 80119be:	eb1b 0509 	adds.w	r5, fp, r9
 80119c2:	eb4c 060a 	adc.w	r6, ip, sl
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	4619      	mov	r1, r3
 80119cc:	f04f 0200 	mov.w	r2, #0
 80119d0:	f04f 0300 	mov.w	r3, #0
 80119d4:	f04f 0400 	mov.w	r4, #0
 80119d8:	0094      	lsls	r4, r2, #2
 80119da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80119de:	008b      	lsls	r3, r1, #2
 80119e0:	461a      	mov	r2, r3
 80119e2:	4623      	mov	r3, r4
 80119e4:	4628      	mov	r0, r5
 80119e6:	4631      	mov	r1, r6
 80119e8:	f7ef f966 	bl	8000cb8 <__aeabi_uldivmod>
 80119ec:	4603      	mov	r3, r0
 80119ee:	460c      	mov	r4, r1
 80119f0:	461a      	mov	r2, r3
 80119f2:	4b77      	ldr	r3, [pc, #476]	; (8011bd0 <UART_SetConfig+0x6f4>)
 80119f4:	fba3 1302 	umull	r1, r3, r3, r2
 80119f8:	095b      	lsrs	r3, r3, #5
 80119fa:	2164      	movs	r1, #100	; 0x64
 80119fc:	fb01 f303 	mul.w	r3, r1, r3
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	3332      	adds	r3, #50	; 0x32
 8011a06:	4a72      	ldr	r2, [pc, #456]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011a08:	fba2 2303 	umull	r2, r3, r2, r3
 8011a0c:	095b      	lsrs	r3, r3, #5
 8011a0e:	f003 020f 	and.w	r2, r3, #15
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	4442      	add	r2, r8
 8011a18:	609a      	str	r2, [r3, #8]
 8011a1a:	e0d0      	b.n	8011bbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011a1c:	f7fc f95c 	bl	800dcd8 <HAL_RCC_GetPCLK1Freq>
 8011a20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	469a      	mov	sl, r3
 8011a26:	f04f 0b00 	mov.w	fp, #0
 8011a2a:	46d0      	mov	r8, sl
 8011a2c:	46d9      	mov	r9, fp
 8011a2e:	eb18 0308 	adds.w	r3, r8, r8
 8011a32:	eb49 0409 	adc.w	r4, r9, r9
 8011a36:	4698      	mov	r8, r3
 8011a38:	46a1      	mov	r9, r4
 8011a3a:	eb18 080a 	adds.w	r8, r8, sl
 8011a3e:	eb49 090b 	adc.w	r9, r9, fp
 8011a42:	f04f 0100 	mov.w	r1, #0
 8011a46:	f04f 0200 	mov.w	r2, #0
 8011a4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011a4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011a52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011a56:	4688      	mov	r8, r1
 8011a58:	4691      	mov	r9, r2
 8011a5a:	eb1a 0508 	adds.w	r5, sl, r8
 8011a5e:	eb4b 0609 	adc.w	r6, fp, r9
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	4619      	mov	r1, r3
 8011a68:	f04f 0200 	mov.w	r2, #0
 8011a6c:	f04f 0300 	mov.w	r3, #0
 8011a70:	f04f 0400 	mov.w	r4, #0
 8011a74:	0094      	lsls	r4, r2, #2
 8011a76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011a7a:	008b      	lsls	r3, r1, #2
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	4623      	mov	r3, r4
 8011a80:	4628      	mov	r0, r5
 8011a82:	4631      	mov	r1, r6
 8011a84:	f7ef f918 	bl	8000cb8 <__aeabi_uldivmod>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4b50      	ldr	r3, [pc, #320]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011a90:	fba3 2302 	umull	r2, r3, r3, r2
 8011a94:	095b      	lsrs	r3, r3, #5
 8011a96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	469b      	mov	fp, r3
 8011a9e:	f04f 0c00 	mov.w	ip, #0
 8011aa2:	46d9      	mov	r9, fp
 8011aa4:	46e2      	mov	sl, ip
 8011aa6:	eb19 0309 	adds.w	r3, r9, r9
 8011aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8011aae:	4699      	mov	r9, r3
 8011ab0:	46a2      	mov	sl, r4
 8011ab2:	eb19 090b 	adds.w	r9, r9, fp
 8011ab6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011aba:	f04f 0100 	mov.w	r1, #0
 8011abe:	f04f 0200 	mov.w	r2, #0
 8011ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011ace:	4689      	mov	r9, r1
 8011ad0:	4692      	mov	sl, r2
 8011ad2:	eb1b 0509 	adds.w	r5, fp, r9
 8011ad6:	eb4c 060a 	adc.w	r6, ip, sl
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	4619      	mov	r1, r3
 8011ae0:	f04f 0200 	mov.w	r2, #0
 8011ae4:	f04f 0300 	mov.w	r3, #0
 8011ae8:	f04f 0400 	mov.w	r4, #0
 8011aec:	0094      	lsls	r4, r2, #2
 8011aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011af2:	008b      	lsls	r3, r1, #2
 8011af4:	461a      	mov	r2, r3
 8011af6:	4623      	mov	r3, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	4631      	mov	r1, r6
 8011afc:	f7ef f8dc 	bl	8000cb8 <__aeabi_uldivmod>
 8011b00:	4603      	mov	r3, r0
 8011b02:	460c      	mov	r4, r1
 8011b04:	461a      	mov	r2, r3
 8011b06:	4b32      	ldr	r3, [pc, #200]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011b08:	fba3 1302 	umull	r1, r3, r3, r2
 8011b0c:	095b      	lsrs	r3, r3, #5
 8011b0e:	2164      	movs	r1, #100	; 0x64
 8011b10:	fb01 f303 	mul.w	r3, r1, r3
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	011b      	lsls	r3, r3, #4
 8011b18:	3332      	adds	r3, #50	; 0x32
 8011b1a:	4a2d      	ldr	r2, [pc, #180]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011b20:	095b      	lsrs	r3, r3, #5
 8011b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b26:	4498      	add	r8, r3
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	469b      	mov	fp, r3
 8011b2c:	f04f 0c00 	mov.w	ip, #0
 8011b30:	46d9      	mov	r9, fp
 8011b32:	46e2      	mov	sl, ip
 8011b34:	eb19 0309 	adds.w	r3, r9, r9
 8011b38:	eb4a 040a 	adc.w	r4, sl, sl
 8011b3c:	4699      	mov	r9, r3
 8011b3e:	46a2      	mov	sl, r4
 8011b40:	eb19 090b 	adds.w	r9, r9, fp
 8011b44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011b48:	f04f 0100 	mov.w	r1, #0
 8011b4c:	f04f 0200 	mov.w	r2, #0
 8011b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011b5c:	4689      	mov	r9, r1
 8011b5e:	4692      	mov	sl, r2
 8011b60:	eb1b 0509 	adds.w	r5, fp, r9
 8011b64:	eb4c 060a 	adc.w	r6, ip, sl
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	f04f 0200 	mov.w	r2, #0
 8011b72:	f04f 0300 	mov.w	r3, #0
 8011b76:	f04f 0400 	mov.w	r4, #0
 8011b7a:	0094      	lsls	r4, r2, #2
 8011b7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011b80:	008b      	lsls	r3, r1, #2
 8011b82:	461a      	mov	r2, r3
 8011b84:	4623      	mov	r3, r4
 8011b86:	4628      	mov	r0, r5
 8011b88:	4631      	mov	r1, r6
 8011b8a:	f7ef f895 	bl	8000cb8 <__aeabi_uldivmod>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	460c      	mov	r4, r1
 8011b92:	461a      	mov	r2, r3
 8011b94:	4b0e      	ldr	r3, [pc, #56]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011b96:	fba3 1302 	umull	r1, r3, r3, r2
 8011b9a:	095b      	lsrs	r3, r3, #5
 8011b9c:	2164      	movs	r1, #100	; 0x64
 8011b9e:	fb01 f303 	mul.w	r3, r1, r3
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	011b      	lsls	r3, r3, #4
 8011ba6:	3332      	adds	r3, #50	; 0x32
 8011ba8:	4a09      	ldr	r2, [pc, #36]	; (8011bd0 <UART_SetConfig+0x6f4>)
 8011baa:	fba2 2303 	umull	r2, r3, r2, r3
 8011bae:	095b      	lsrs	r3, r3, #5
 8011bb0:	f003 020f 	and.w	r2, r3, #15
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4442      	add	r2, r8
 8011bba:	609a      	str	r2, [r3, #8]
}
 8011bbc:	e7ff      	b.n	8011bbe <UART_SetConfig+0x6e2>
 8011bbe:	bf00      	nop
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc8:	40011000 	.word	0x40011000
 8011bcc:	40011400 	.word	0x40011400
 8011bd0:	51eb851f 	.word	0x51eb851f

08011bd4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011bd4:	b084      	sub	sp, #16
 8011bd6:	b480      	push	{r7}
 8011bd8:	b085      	sub	sp, #20
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	f107 001c 	add.w	r0, r7, #28
 8011be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011bea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011bec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011bee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011bf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011c00:	68fa      	ldr	r2, [r7, #12]
 8011c02:	4313      	orrs	r3, r2
 8011c04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011c0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	431a      	orrs	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3714      	adds	r7, #20
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	b004      	add	sp, #16
 8011c28:	4770      	bx	lr

08011c2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b083      	sub	sp, #12
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	370c      	adds	r7, #12
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	370c      	adds	r7, #12
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr

08011c66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b082      	sub	sp, #8
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2203      	movs	r2, #3
 8011c72:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011c74:	2002      	movs	r0, #2
 8011c76:	f7f9 fbc5 	bl	800b404 <HAL_Delay>
  
  return HAL_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3708      	adds	r7, #8
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f003 0303 	and.w	r3, r3, #3
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	681a      	ldr	r2, [r3, #0]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011cbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011cc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011cca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011cda:	f023 030f 	bic.w	r3, r3, #15
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	431a      	orrs	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011ce6:	2300      	movs	r3, #0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	b2db      	uxtb	r3, r3
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011d0e:	b480      	push	{r7}
 8011d10:	b085      	sub	sp, #20
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
 8011d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	3314      	adds	r3, #20
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	4413      	add	r3, r2
 8011d22:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
}  
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	685a      	ldr	r2, [r3, #4]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011d60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011d66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d72:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0

}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3714      	adds	r7, #20
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b088      	sub	sp, #32
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011d9a:	2310      	movs	r3, #16
 8011d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011d9e:	2340      	movs	r3, #64	; 0x40
 8011da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011da2:	2300      	movs	r3, #0
 8011da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011daa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011dac:	f107 0308 	add.w	r3, r7, #8
 8011db0:	4619      	mov	r1, r3
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff ff74 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dbc:	2110      	movs	r1, #16
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 fa40 	bl	8012244 <SDMMC_GetCmdResp1>
 8011dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3720      	adds	r7, #32
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011dde:	2311      	movs	r3, #17
 8011de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011de2:	2340      	movs	r3, #64	; 0x40
 8011de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011de6:	2300      	movs	r3, #0
 8011de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011df0:	f107 0308 	add.w	r3, r7, #8
 8011df4:	4619      	mov	r1, r3
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7ff ff52 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e00:	2111      	movs	r1, #17
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fa1e 	bl	8012244 <SDMMC_GetCmdResp1>
 8011e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e0a:	69fb      	ldr	r3, [r7, #28]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3720      	adds	r7, #32
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b088      	sub	sp, #32
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011e22:	2312      	movs	r3, #18
 8011e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e26:	2340      	movs	r3, #64	; 0x40
 8011e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e34:	f107 0308 	add.w	r3, r7, #8
 8011e38:	4619      	mov	r1, r3
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7ff ff30 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e44:	2112      	movs	r1, #18
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f9fc 	bl	8012244 <SDMMC_GetCmdResp1>
 8011e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e4e:	69fb      	ldr	r3, [r7, #28]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3720      	adds	r7, #32
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b088      	sub	sp, #32
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011e66:	2318      	movs	r3, #24
 8011e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e6a:	2340      	movs	r3, #64	; 0x40
 8011e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e78:	f107 0308 	add.w	r3, r7, #8
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ff ff0e 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e88:	2118      	movs	r1, #24
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f9da 	bl	8012244 <SDMMC_GetCmdResp1>
 8011e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e92:	69fb      	ldr	r3, [r7, #28]
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3720      	adds	r7, #32
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b088      	sub	sp, #32
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011eaa:	2319      	movs	r3, #25
 8011eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011eae:	2340      	movs	r3, #64	; 0x40
 8011eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ebc:	f107 0308 	add.w	r3, r7, #8
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f7ff feec 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ecc:	2119      	movs	r1, #25
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 f9b8 	bl	8012244 <SDMMC_GetCmdResp1>
 8011ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ed6:	69fb      	ldr	r3, [r7, #28]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3720      	adds	r7, #32
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b088      	sub	sp, #32
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011eec:	230c      	movs	r3, #12
 8011eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011ef0:	2340      	movs	r3, #64	; 0x40
 8011ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011efc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7ff fecb 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8011f0a:	4a05      	ldr	r2, [pc, #20]	; (8011f20 <SDMMC_CmdStopTransfer+0x40>)
 8011f0c:	210c      	movs	r1, #12
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f998 	bl	8012244 <SDMMC_GetCmdResp1>
 8011f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f16:	69fb      	ldr	r3, [r7, #28]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3720      	adds	r7, #32
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	05f5e100 	.word	0x05f5e100

08011f24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08a      	sub	sp, #40	; 0x28
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011f34:	2307      	movs	r3, #7
 8011f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f38:	2340      	movs	r3, #64	; 0x40
 8011f3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f46:	f107 0310 	add.w	r3, r7, #16
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7ff fea7 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f56:	2107      	movs	r1, #7
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	f000 f973 	bl	8012244 <SDMMC_GetCmdResp1>
 8011f5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3728      	adds	r7, #40	; 0x28
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}

08011f6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8011f6a:	b580      	push	{r7, lr}
 8011f6c:	b088      	sub	sp, #32
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011f72:	2300      	movs	r3, #0
 8011f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011f76:	2300      	movs	r3, #0
 8011f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f88:	f107 0308 	add.w	r3, r7, #8
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7ff fe86 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 f92d 	bl	80121f4 <SDMMC_GetCmdError>
 8011f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f9c:	69fb      	ldr	r3, [r7, #28]
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3720      	adds	r7, #32
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}

08011fa6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b088      	sub	sp, #32
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011fae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011fb4:	2308      	movs	r3, #8
 8011fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fb8:	2340      	movs	r3, #64	; 0x40
 8011fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fe67 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fb16 	bl	8012604 <SDMMC_GetCmdResp7>
 8011fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fda:	69fb      	ldr	r3, [r7, #28]
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3720      	adds	r7, #32
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011ff2:	2337      	movs	r3, #55	; 0x37
 8011ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011ff6:	2340      	movs	r3, #64	; 0x40
 8011ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012004:	f107 0308 	add.w	r3, r7, #8
 8012008:	4619      	mov	r1, r3
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff fe48 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8012010:	f241 3288 	movw	r2, #5000	; 0x1388
 8012014:	2137      	movs	r1, #55	; 0x37
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 f914 	bl	8012244 <SDMMC_GetCmdResp1>
 801201c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801201e:	69fb      	ldr	r3, [r7, #28]
}
 8012020:	4618      	mov	r0, r3
 8012022:	3720      	adds	r7, #32
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b088      	sub	sp, #32
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801203c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801203e:	2329      	movs	r3, #41	; 0x29
 8012040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012042:	2340      	movs	r3, #64	; 0x40
 8012044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012046:	2300      	movs	r3, #0
 8012048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801204e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012050:	f107 0308 	add.w	r3, r7, #8
 8012054:	4619      	mov	r1, r3
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7ff fe22 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fa23 	bl	80124a8 <SDMMC_GetCmdResp3>
 8012062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012064:	69fb      	ldr	r3, [r7, #28]
}
 8012066:	4618      	mov	r0, r3
 8012068:	3720      	adds	r7, #32
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}

0801206e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801206e:	b580      	push	{r7, lr}
 8012070:	b088      	sub	sp, #32
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801207c:	2306      	movs	r3, #6
 801207e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012080:	2340      	movs	r3, #64	; 0x40
 8012082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012084:	2300      	movs	r3, #0
 8012086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801208c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801208e:	f107 0308 	add.w	r3, r7, #8
 8012092:	4619      	mov	r1, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff fe03 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801209a:	f241 3288 	movw	r2, #5000	; 0x1388
 801209e:	2106      	movs	r1, #6
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 f8cf 	bl	8012244 <SDMMC_GetCmdResp1>
 80120a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120a8:	69fb      	ldr	r3, [r7, #28]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3720      	adds	r7, #32
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b088      	sub	sp, #32
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80120ba:	2300      	movs	r3, #0
 80120bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80120be:	2333      	movs	r3, #51	; 0x33
 80120c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120c2:	2340      	movs	r3, #64	; 0x40
 80120c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120c6:	2300      	movs	r3, #0
 80120c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120d0:	f107 0308 	add.w	r3, r7, #8
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff fde2 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80120dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80120e0:	2133      	movs	r1, #51	; 0x33
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 f8ae 	bl	8012244 <SDMMC_GetCmdResp1>
 80120e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120ea:	69fb      	ldr	r3, [r7, #28]
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3720      	adds	r7, #32
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b088      	sub	sp, #32
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80120fc:	2300      	movs	r3, #0
 80120fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012100:	2302      	movs	r3, #2
 8012102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012104:	23c0      	movs	r3, #192	; 0xc0
 8012106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012112:	f107 0308 	add.w	r3, r7, #8
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff fdc1 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 f97c 	bl	801241c <SDMMC_GetCmdResp2>
 8012124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012126:	69fb      	ldr	r3, [r7, #28]
}
 8012128:	4618      	mov	r0, r3
 801212a:	3720      	adds	r7, #32
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b088      	sub	sp, #32
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801213e:	2309      	movs	r3, #9
 8012140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012142:	23c0      	movs	r3, #192	; 0xc0
 8012144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801214a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801214e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012150:	f107 0308 	add.w	r3, r7, #8
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff fda2 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 f95d 	bl	801241c <SDMMC_GetCmdResp2>
 8012162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012164:	69fb      	ldr	r3, [r7, #28]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3720      	adds	r7, #32
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b088      	sub	sp, #32
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
 8012176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012178:	2300      	movs	r3, #0
 801217a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801217c:	2303      	movs	r3, #3
 801217e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012180:	2340      	movs	r3, #64	; 0x40
 8012182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012184:	2300      	movs	r3, #0
 8012186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801218c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801218e:	f107 0308 	add.w	r3, r7, #8
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7ff fd83 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	2103      	movs	r1, #3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 f9bc 	bl	801251c <SDMMC_GetCmdResp6>
 80121a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a6:	69fb      	ldr	r3, [r7, #28]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3720      	adds	r7, #32
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80121be:	230d      	movs	r3, #13
 80121c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121c2:	2340      	movs	r3, #64	; 0x40
 80121c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121c6:	2300      	movs	r3, #0
 80121c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121d0:	f107 0308 	add.w	r3, r7, #8
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7ff fd62 	bl	8011ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80121dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80121e0:	210d      	movs	r1, #13
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 f82e 	bl	8012244 <SDMMC_GetCmdResp1>
 80121e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ea:	69fb      	ldr	r3, [r7, #28]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3720      	adds	r7, #32
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80121f4:	b490      	push	{r4, r7}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80121fc:	4b0f      	ldr	r3, [pc, #60]	; (801223c <SDMMC_GetCmdError+0x48>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a0f      	ldr	r2, [pc, #60]	; (8012240 <SDMMC_GetCmdError+0x4c>)
 8012202:	fba2 2303 	umull	r2, r3, r2, r3
 8012206:	0a5b      	lsrs	r3, r3, #9
 8012208:	f241 3288 	movw	r2, #5000	; 0x1388
 801220c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012210:	4623      	mov	r3, r4
 8012212:	1e5c      	subs	r4, r3, #1
 8012214:	2b00      	cmp	r3, #0
 8012216:	d102      	bne.n	801221e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801221c:	e009      	b.n	8012232 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012226:	2b00      	cmp	r3, #0
 8012228:	d0f2      	beq.n	8012210 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	22c5      	movs	r2, #197	; 0xc5
 801222e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bc90      	pop	{r4, r7}
 801223a:	4770      	bx	lr
 801223c:	20000000 	.word	0x20000000
 8012240:	10624dd3 	.word	0x10624dd3

08012244 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012244:	b590      	push	{r4, r7, lr}
 8012246:	b087      	sub	sp, #28
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	460b      	mov	r3, r1
 801224e:	607a      	str	r2, [r7, #4]
 8012250:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012252:	4b6f      	ldr	r3, [pc, #444]	; (8012410 <SDMMC_GetCmdResp1+0x1cc>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	4a6f      	ldr	r2, [pc, #444]	; (8012414 <SDMMC_GetCmdResp1+0x1d0>)
 8012258:	fba2 2303 	umull	r2, r3, r2, r3
 801225c:	0a5b      	lsrs	r3, r3, #9
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012264:	4623      	mov	r3, r4
 8012266:	1e5c      	subs	r4, r3, #1
 8012268:	2b00      	cmp	r3, #0
 801226a:	d102      	bne.n	8012272 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801226c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012270:	e0c9      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012276:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801227e:	2b00      	cmp	r3, #0
 8012280:	d0f0      	beq.n	8012264 <SDMMC_GetCmdResp1+0x20>
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1eb      	bne.n	8012264 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	2b00      	cmp	r3, #0
 8012296:	d004      	beq.n	80122a2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2204      	movs	r2, #4
 801229c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801229e:	2304      	movs	r3, #4
 80122a0:	e0b1      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d004      	beq.n	80122b8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2201      	movs	r2, #1
 80122b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122b4:	2301      	movs	r3, #1
 80122b6:	e0a6      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	22c5      	movs	r2, #197	; 0xc5
 80122bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7ff fd18 	bl	8011cf4 <SDIO_GetCommandResponse>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461a      	mov	r2, r3
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d001      	beq.n	80122d2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122ce:	2301      	movs	r3, #1
 80122d0:	e099      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80122d2:	2100      	movs	r1, #0
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f7ff fd1a 	bl	8011d0e <SDIO_GetResponse>
 80122da:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80122dc:	693a      	ldr	r2, [r7, #16]
 80122de:	4b4e      	ldr	r3, [pc, #312]	; (8012418 <SDMMC_GetCmdResp1+0x1d4>)
 80122e0:	4013      	ands	r3, r2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	e08d      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	da02      	bge.n	80122f6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80122f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80122f4:	e087      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012300:	2340      	movs	r3, #64	; 0x40
 8012302:	e080      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801230e:	2380      	movs	r3, #128	; 0x80
 8012310:	e079      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801231c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012320:	e071      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012330:	e069      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012340:	e061      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801234c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012350:	e059      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801235c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012360:	e051      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012368:	2b00      	cmp	r3, #0
 801236a:	d002      	beq.n	8012372 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801236c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012370:	e049      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012378:	2b00      	cmp	r3, #0
 801237a:	d002      	beq.n	8012382 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801237c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012380:	e041      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801238c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012390:	e039      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801239c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80123a0:	e031      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80123ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80123b0:	e029      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80123bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80123c0:	e021      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80123cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80123d0:	e019      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d002      	beq.n	80123e2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80123dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80123e0:	e011      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80123ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80123f0:	e009      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	f003 0308 	and.w	r3, r3, #8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80123fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012400:	e001      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012406:	4618      	mov	r0, r3
 8012408:	371c      	adds	r7, #28
 801240a:	46bd      	mov	sp, r7
 801240c:	bd90      	pop	{r4, r7, pc}
 801240e:	bf00      	nop
 8012410:	20000000 	.word	0x20000000
 8012414:	10624dd3 	.word	0x10624dd3
 8012418:	fdffe008 	.word	0xfdffe008

0801241c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801241c:	b490      	push	{r4, r7}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012424:	4b1e      	ldr	r3, [pc, #120]	; (80124a0 <SDMMC_GetCmdResp2+0x84>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4a1e      	ldr	r2, [pc, #120]	; (80124a4 <SDMMC_GetCmdResp2+0x88>)
 801242a:	fba2 2303 	umull	r2, r3, r2, r3
 801242e:	0a5b      	lsrs	r3, r3, #9
 8012430:	f241 3288 	movw	r2, #5000	; 0x1388
 8012434:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012438:	4623      	mov	r3, r4
 801243a:	1e5c      	subs	r4, r3, #1
 801243c:	2b00      	cmp	r3, #0
 801243e:	d102      	bne.n	8012446 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012444:	e026      	b.n	8012494 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801244a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012452:	2b00      	cmp	r3, #0
 8012454:	d0f0      	beq.n	8012438 <SDMMC_GetCmdResp2+0x1c>
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801245c:	2b00      	cmp	r3, #0
 801245e:	d1eb      	bne.n	8012438 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012464:	f003 0304 	and.w	r3, r3, #4
 8012468:	2b00      	cmp	r3, #0
 801246a:	d004      	beq.n	8012476 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2204      	movs	r2, #4
 8012470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012472:	2304      	movs	r3, #4
 8012474:	e00e      	b.n	8012494 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801247a:	f003 0301 	and.w	r3, r3, #1
 801247e:	2b00      	cmp	r3, #0
 8012480:	d004      	beq.n	801248c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2201      	movs	r2, #1
 8012486:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012488:	2301      	movs	r3, #1
 801248a:	e003      	b.n	8012494 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	22c5      	movs	r2, #197	; 0xc5
 8012490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012492:	2300      	movs	r3, #0
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bc90      	pop	{r4, r7}
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	20000000 	.word	0x20000000
 80124a4:	10624dd3 	.word	0x10624dd3

080124a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80124a8:	b490      	push	{r4, r7}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80124b0:	4b18      	ldr	r3, [pc, #96]	; (8012514 <SDMMC_GetCmdResp3+0x6c>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a18      	ldr	r2, [pc, #96]	; (8012518 <SDMMC_GetCmdResp3+0x70>)
 80124b6:	fba2 2303 	umull	r2, r3, r2, r3
 80124ba:	0a5b      	lsrs	r3, r3, #9
 80124bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80124c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80124c4:	4623      	mov	r3, r4
 80124c6:	1e5c      	subs	r4, r3, #1
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d102      	bne.n	80124d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124d0:	e01b      	b.n	801250a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d0f0      	beq.n	80124c4 <SDMMC_GetCmdResp3+0x1c>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1eb      	bne.n	80124c4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f0:	f003 0304 	and.w	r3, r3, #4
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d004      	beq.n	8012502 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2204      	movs	r2, #4
 80124fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80124fe:	2304      	movs	r3, #4
 8012500:	e003      	b.n	801250a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	22c5      	movs	r2, #197	; 0xc5
 8012506:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012508:	2300      	movs	r3, #0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3710      	adds	r7, #16
 801250e:	46bd      	mov	sp, r7
 8012510:	bc90      	pop	{r4, r7}
 8012512:	4770      	bx	lr
 8012514:	20000000 	.word	0x20000000
 8012518:	10624dd3 	.word	0x10624dd3

0801251c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801251c:	b590      	push	{r4, r7, lr}
 801251e:	b087      	sub	sp, #28
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	460b      	mov	r3, r1
 8012526:	607a      	str	r2, [r7, #4]
 8012528:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801252a:	4b34      	ldr	r3, [pc, #208]	; (80125fc <SDMMC_GetCmdResp6+0xe0>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4a34      	ldr	r2, [pc, #208]	; (8012600 <SDMMC_GetCmdResp6+0xe4>)
 8012530:	fba2 2303 	umull	r2, r3, r2, r3
 8012534:	0a5b      	lsrs	r3, r3, #9
 8012536:	f241 3288 	movw	r2, #5000	; 0x1388
 801253a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801253e:	4623      	mov	r3, r4
 8012540:	1e5c      	subs	r4, r3, #1
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012546:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801254a:	e052      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012550:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012558:	2b00      	cmp	r3, #0
 801255a:	d0f0      	beq.n	801253e <SDMMC_GetCmdResp6+0x22>
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012562:	2b00      	cmp	r3, #0
 8012564:	d1eb      	bne.n	801253e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801256a:	f003 0304 	and.w	r3, r3, #4
 801256e:	2b00      	cmp	r3, #0
 8012570:	d004      	beq.n	801257c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2204      	movs	r2, #4
 8012576:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012578:	2304      	movs	r3, #4
 801257a:	e03a      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	d004      	beq.n	8012592 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2201      	movs	r2, #1
 801258c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801258e:	2301      	movs	r3, #1
 8012590:	e02f      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f7ff fbae 	bl	8011cf4 <SDIO_GetCommandResponse>
 8012598:	4603      	mov	r3, r0
 801259a:	461a      	mov	r2, r3
 801259c:	7afb      	ldrb	r3, [r7, #11]
 801259e:	4293      	cmp	r3, r2
 80125a0:	d001      	beq.n	80125a6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125a2:	2301      	movs	r3, #1
 80125a4:	e025      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	22c5      	movs	r2, #197	; 0xc5
 80125aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80125ac:	2100      	movs	r1, #0
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f7ff fbad 	bl	8011d0e <SDIO_GetResponse>
 80125b4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d106      	bne.n	80125ce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	0c1b      	lsrs	r3, r3, #16
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80125ca:	2300      	movs	r3, #0
 80125cc:	e011      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d002      	beq.n	80125de <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80125d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80125dc:	e009      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80125e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125ec:	e001      	b.n	80125f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	371c      	adds	r7, #28
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd90      	pop	{r4, r7, pc}
 80125fa:	bf00      	nop
 80125fc:	20000000 	.word	0x20000000
 8012600:	10624dd3 	.word	0x10624dd3

08012604 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012604:	b490      	push	{r4, r7}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801260c:	4b21      	ldr	r3, [pc, #132]	; (8012694 <SDMMC_GetCmdResp7+0x90>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4a21      	ldr	r2, [pc, #132]	; (8012698 <SDMMC_GetCmdResp7+0x94>)
 8012612:	fba2 2303 	umull	r2, r3, r2, r3
 8012616:	0a5b      	lsrs	r3, r3, #9
 8012618:	f241 3288 	movw	r2, #5000	; 0x1388
 801261c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012620:	4623      	mov	r3, r4
 8012622:	1e5c      	subs	r4, r3, #1
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801262c:	e02c      	b.n	8012688 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012632:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801263a:	2b00      	cmp	r3, #0
 801263c:	d0f0      	beq.n	8012620 <SDMMC_GetCmdResp7+0x1c>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1eb      	bne.n	8012620 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801264c:	f003 0304 	and.w	r3, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	d004      	beq.n	801265e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2204      	movs	r2, #4
 8012658:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801265a:	2304      	movs	r3, #4
 801265c:	e014      	b.n	8012688 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012662:	f003 0301 	and.w	r3, r3, #1
 8012666:	2b00      	cmp	r3, #0
 8012668:	d004      	beq.n	8012674 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2201      	movs	r2, #1
 801266e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012670:	2301      	movs	r3, #1
 8012672:	e009      	b.n	8012688 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2240      	movs	r2, #64	; 0x40
 8012684:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012686:	2300      	movs	r3, #0
  
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bc90      	pop	{r4, r7}
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	20000000 	.word	0x20000000
 8012698:	10624dd3 	.word	0x10624dd3

0801269c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80126a0:	4904      	ldr	r1, [pc, #16]	; (80126b4 <MX_FATFS_Init+0x18>)
 80126a2:	4805      	ldr	r0, [pc, #20]	; (80126b8 <MX_FATFS_Init+0x1c>)
 80126a4:	f003 fb9c 	bl	8015de0 <FATFS_LinkDriver>
 80126a8:	4603      	mov	r3, r0
 80126aa:	461a      	mov	r2, r3
 80126ac:	4b03      	ldr	r3, [pc, #12]	; (80126bc <MX_FATFS_Init+0x20>)
 80126ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80126b0:	bf00      	nop
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	20049fd0 	.word	0x20049fd0
 80126b8:	0801a874 	.word	0x0801a874
 80126bc:	20049fcc 	.word	0x20049fcc

080126c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80126c6:	2300      	movs	r3, #0
 80126c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80126ca:	f000 f896 	bl	80127fa <BSP_SD_IsDetected>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d001      	beq.n	80126d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	e012      	b.n	80126fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80126d8:	480b      	ldr	r0, [pc, #44]	; (8012708 <BSP_SD_Init+0x48>)
 80126da:	f7fb ffa5 	bl	800e628 <HAL_SD_Init>
 80126de:	4603      	mov	r3, r0
 80126e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80126e2:	79fb      	ldrb	r3, [r7, #7]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d109      	bne.n	80126fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80126e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80126ec:	4806      	ldr	r0, [pc, #24]	; (8012708 <BSP_SD_Init+0x48>)
 80126ee:	f7fc fd4f 	bl	800f190 <HAL_SD_ConfigWideBusOperation>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d001      	beq.n	80126fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80126f8:	2301      	movs	r3, #1
 80126fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80126fc:	79fb      	ldrb	r3, [r7, #7]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	20049dc8 	.word	0x20049dc8

0801270c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012718:	2300      	movs	r3, #0
 801271a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	68f9      	ldr	r1, [r7, #12]
 8012722:	4806      	ldr	r0, [pc, #24]	; (801273c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012724:	f7fc f810 	bl	800e748 <HAL_SD_ReadBlocks_DMA>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d001      	beq.n	8012732 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801272e:	2301      	movs	r3, #1
 8012730:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012732:	7dfb      	ldrb	r3, [r7, #23]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	20049dc8 	.word	0x20049dc8

08012740 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b086      	sub	sp, #24
 8012744:	af00      	add	r7, sp, #0
 8012746:	60f8      	str	r0, [r7, #12]
 8012748:	60b9      	str	r1, [r7, #8]
 801274a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801274c:	2300      	movs	r3, #0
 801274e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	68ba      	ldr	r2, [r7, #8]
 8012754:	68f9      	ldr	r1, [r7, #12]
 8012756:	4806      	ldr	r0, [pc, #24]	; (8012770 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012758:	f7fc f8de 	bl	800e918 <HAL_SD_WriteBlocks_DMA>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012762:	2301      	movs	r3, #1
 8012764:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012766:	7dfb      	ldrb	r3, [r7, #23]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3718      	adds	r7, #24
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	20049dc8 	.word	0x20049dc8

08012774 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012778:	4805      	ldr	r0, [pc, #20]	; (8012790 <BSP_SD_GetCardState+0x1c>)
 801277a:	f7fc fd85 	bl	800f288 <HAL_SD_GetCardState>
 801277e:	4603      	mov	r3, r0
 8012780:	2b04      	cmp	r3, #4
 8012782:	bf14      	ite	ne
 8012784:	2301      	movne	r3, #1
 8012786:	2300      	moveq	r3, #0
 8012788:	b2db      	uxtb	r3, r3
}
 801278a:	4618      	mov	r0, r3
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20049dc8 	.word	0x20049dc8

08012794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801279c:	6879      	ldr	r1, [r7, #4]
 801279e:	4803      	ldr	r0, [pc, #12]	; (80127ac <BSP_SD_GetCardInfo+0x18>)
 80127a0:	f7fc fcca 	bl	800f138 <HAL_SD_GetCardInfo>
}
 80127a4:	bf00      	nop
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	20049dc8 	.word	0x20049dc8

080127b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80127b8:	f000 f818 	bl	80127ec <BSP_SD_AbortCallback>
}
 80127bc:	bf00      	nop
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80127cc:	f000 f9a8 	bl	8012b20 <BSP_SD_WriteCpltCallback>
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80127e0:	f000 f9aa 	bl	8012b38 <BSP_SD_ReadCpltCallback>
}
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80127ec:	b480      	push	{r7}
 80127ee:	af00      	add	r7, sp, #0

}
 80127f0:	bf00      	nop
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr

080127fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b082      	sub	sp, #8
 80127fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012800:	2301      	movs	r3, #1
 8012802:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012804:	f000 f80c 	bl	8012820 <BSP_PlatformIsDetected>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d101      	bne.n	8012812 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801280e:	2300      	movs	r3, #0
 8012810:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012812:	79fb      	ldrb	r3, [r7, #7]
 8012814:	b2db      	uxtb	r3, r3
}
 8012816:	4618      	mov	r0, r3
 8012818:	3708      	adds	r7, #8
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
	...

08012820 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012826:	2301      	movs	r3, #1
 8012828:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801282a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801282e:	4806      	ldr	r0, [pc, #24]	; (8012848 <BSP_PlatformIsDetected+0x28>)
 8012830:	f7fa f866 	bl	800c900 <HAL_GPIO_ReadPin>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d001      	beq.n	801283e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801283a:	2300      	movs	r3, #0
 801283c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801283e:	79fb      	ldrb	r3, [r7, #7]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	40020000 	.word	0x40020000

0801284c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012854:	f7f8 fdca 	bl	800b3ec <HAL_GetTick>
 8012858:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801285a:	e006      	b.n	801286a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801285c:	f7ff ff8a 	bl	8012774 <BSP_SD_GetCardState>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012866:	2300      	movs	r3, #0
 8012868:	e009      	b.n	801287e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801286a:	f7f8 fdbf 	bl	800b3ec <HAL_GetTick>
 801286e:	4602      	mov	r2, r0
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	1ad3      	subs	r3, r2, r3
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	429a      	cmp	r2, r3
 8012878:	d8f0      	bhi.n	801285c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	4603      	mov	r3, r0
 8012890:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012892:	4b0b      	ldr	r3, [pc, #44]	; (80128c0 <SD_CheckStatus+0x38>)
 8012894:	2201      	movs	r2, #1
 8012896:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012898:	f7ff ff6c 	bl	8012774 <BSP_SD_GetCardState>
 801289c:	4603      	mov	r3, r0
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d107      	bne.n	80128b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80128a2:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <SD_CheckStatus+0x38>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	f023 0301 	bic.w	r3, r3, #1
 80128ac:	b2da      	uxtb	r2, r3
 80128ae:	4b04      	ldr	r3, [pc, #16]	; (80128c0 <SD_CheckStatus+0x38>)
 80128b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80128b2:	4b03      	ldr	r3, [pc, #12]	; (80128c0 <SD_CheckStatus+0x38>)
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	b2db      	uxtb	r3, r3
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	20000009 	.word	0x20000009

080128c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	4603      	mov	r3, r0
 80128cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80128ce:	f7ff fef7 	bl	80126c0 <BSP_SD_Init>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d107      	bne.n	80128e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80128d8:	79fb      	ldrb	r3, [r7, #7]
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff ffd4 	bl	8012888 <SD_CheckStatus>
 80128e0:	4603      	mov	r3, r0
 80128e2:	461a      	mov	r2, r3
 80128e4:	4b04      	ldr	r3, [pc, #16]	; (80128f8 <SD_initialize+0x34>)
 80128e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80128e8:	4b03      	ldr	r3, [pc, #12]	; (80128f8 <SD_initialize+0x34>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	b2db      	uxtb	r3, r3
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3708      	adds	r7, #8
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	20000009 	.word	0x20000009

080128fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	4603      	mov	r3, r0
 8012904:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012906:	79fb      	ldrb	r3, [r7, #7]
 8012908:	4618      	mov	r0, r3
 801290a:	f7ff ffbd 	bl	8012888 <SD_CheckStatus>
 801290e:	4603      	mov	r3, r0
}
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	60b9      	str	r1, [r7, #8]
 8012920:	607a      	str	r2, [r7, #4]
 8012922:	603b      	str	r3, [r7, #0]
 8012924:	4603      	mov	r3, r0
 8012926:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012928:	2301      	movs	r3, #1
 801292a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801292c:	f247 5030 	movw	r0, #30000	; 0x7530
 8012930:	f7ff ff8c 	bl	801284c <SD_CheckStatusWithTimeout>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	da01      	bge.n	801293e <SD_read+0x26>
  {
    return res;
 801293a:	7dfb      	ldrb	r3, [r7, #23]
 801293c:	e03b      	b.n	80129b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	6879      	ldr	r1, [r7, #4]
 8012942:	68b8      	ldr	r0, [r7, #8]
 8012944:	f7ff fee2 	bl	801270c <BSP_SD_ReadBlocks_DMA>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d132      	bne.n	80129b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801294e:	4b1c      	ldr	r3, [pc, #112]	; (80129c0 <SD_read+0xa8>)
 8012950:	2200      	movs	r2, #0
 8012952:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012954:	f7f8 fd4a 	bl	800b3ec <HAL_GetTick>
 8012958:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801295a:	bf00      	nop
 801295c:	4b18      	ldr	r3, [pc, #96]	; (80129c0 <SD_read+0xa8>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d108      	bne.n	8012976 <SD_read+0x5e>
 8012964:	f7f8 fd42 	bl	800b3ec <HAL_GetTick>
 8012968:	4602      	mov	r2, r0
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012972:	4293      	cmp	r3, r2
 8012974:	d9f2      	bls.n	801295c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012976:	4b12      	ldr	r3, [pc, #72]	; (80129c0 <SD_read+0xa8>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d102      	bne.n	8012984 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801297e:	2301      	movs	r3, #1
 8012980:	75fb      	strb	r3, [r7, #23]
 8012982:	e017      	b.n	80129b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012984:	4b0e      	ldr	r3, [pc, #56]	; (80129c0 <SD_read+0xa8>)
 8012986:	2200      	movs	r2, #0
 8012988:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801298a:	f7f8 fd2f 	bl	800b3ec <HAL_GetTick>
 801298e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012990:	e007      	b.n	80129a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012992:	f7ff feef 	bl	8012774 <BSP_SD_GetCardState>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d102      	bne.n	80129a2 <SD_read+0x8a>
          {
            res = RES_OK;
 801299c:	2300      	movs	r3, #0
 801299e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80129a0:	e008      	b.n	80129b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80129a2:	f7f8 fd23 	bl	800b3ec <HAL_GetTick>
 80129a6:	4602      	mov	r2, r0
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d9ee      	bls.n	8012992 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80129b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3718      	adds	r7, #24
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	20047660 	.word	0x20047660

080129c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b086      	sub	sp, #24
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60b9      	str	r1, [r7, #8]
 80129cc:	607a      	str	r2, [r7, #4]
 80129ce:	603b      	str	r3, [r7, #0]
 80129d0:	4603      	mov	r3, r0
 80129d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80129d4:	2301      	movs	r3, #1
 80129d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80129d8:	4b24      	ldr	r3, [pc, #144]	; (8012a6c <SD_write+0xa8>)
 80129da:	2200      	movs	r2, #0
 80129dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80129de:	f247 5030 	movw	r0, #30000	; 0x7530
 80129e2:	f7ff ff33 	bl	801284c <SD_CheckStatusWithTimeout>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	da01      	bge.n	80129f0 <SD_write+0x2c>
  {
    return res;
 80129ec:	7dfb      	ldrb	r3, [r7, #23]
 80129ee:	e038      	b.n	8012a62 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80129f0:	683a      	ldr	r2, [r7, #0]
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	68b8      	ldr	r0, [r7, #8]
 80129f6:	f7ff fea3 	bl	8012740 <BSP_SD_WriteBlocks_DMA>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d12f      	bne.n	8012a60 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012a00:	f7f8 fcf4 	bl	800b3ec <HAL_GetTick>
 8012a04:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012a06:	bf00      	nop
 8012a08:	4b18      	ldr	r3, [pc, #96]	; (8012a6c <SD_write+0xa8>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d108      	bne.n	8012a22 <SD_write+0x5e>
 8012a10:	f7f8 fcec 	bl	800b3ec <HAL_GetTick>
 8012a14:	4602      	mov	r2, r0
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d9f2      	bls.n	8012a08 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8012a22:	4b12      	ldr	r3, [pc, #72]	; (8012a6c <SD_write+0xa8>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d102      	bne.n	8012a30 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	75fb      	strb	r3, [r7, #23]
 8012a2e:	e017      	b.n	8012a60 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012a30:	4b0e      	ldr	r3, [pc, #56]	; (8012a6c <SD_write+0xa8>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012a36:	f7f8 fcd9 	bl	800b3ec <HAL_GetTick>
 8012a3a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a3c:	e007      	b.n	8012a4e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012a3e:	f7ff fe99 	bl	8012774 <BSP_SD_GetCardState>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d102      	bne.n	8012a4e <SD_write+0x8a>
          {
            res = RES_OK;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8012a4c:	e008      	b.n	8012a60 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a4e:	f7f8 fccd 	bl	800b3ec <HAL_GetTick>
 8012a52:	4602      	mov	r2, r0
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	f247 522f 	movw	r2, #29999	; 0x752f
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d9ee      	bls.n	8012a3e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3718      	adds	r7, #24
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	2004765c 	.word	0x2004765c

08012a70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b08c      	sub	sp, #48	; 0x30
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	4603      	mov	r3, r0
 8012a78:	603a      	str	r2, [r7, #0]
 8012a7a:	71fb      	strb	r3, [r7, #7]
 8012a7c:	460b      	mov	r3, r1
 8012a7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012a80:	2301      	movs	r3, #1
 8012a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012a86:	4b25      	ldr	r3, [pc, #148]	; (8012b1c <SD_ioctl+0xac>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d001      	beq.n	8012a98 <SD_ioctl+0x28>
 8012a94:	2303      	movs	r3, #3
 8012a96:	e03c      	b.n	8012b12 <SD_ioctl+0xa2>

  switch (cmd)
 8012a98:	79bb      	ldrb	r3, [r7, #6]
 8012a9a:	2b03      	cmp	r3, #3
 8012a9c:	d834      	bhi.n	8012b08 <SD_ioctl+0x98>
 8012a9e:	a201      	add	r2, pc, #4	; (adr r2, 8012aa4 <SD_ioctl+0x34>)
 8012aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa4:	08012ab5 	.word	0x08012ab5
 8012aa8:	08012abd 	.word	0x08012abd
 8012aac:	08012ad5 	.word	0x08012ad5
 8012ab0:	08012aef 	.word	0x08012aef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012aba:	e028      	b.n	8012b0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012abc:	f107 030c 	add.w	r3, r7, #12
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff fe67 	bl	8012794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012acc:	2300      	movs	r3, #0
 8012ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012ad2:	e01c      	b.n	8012b0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012ad4:	f107 030c 	add.w	r3, r7, #12
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7ff fe5b 	bl	8012794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012aec:	e00f      	b.n	8012b0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012aee:	f107 030c 	add.w	r3, r7, #12
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7ff fe4e 	bl	8012794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afa:	0a5a      	lsrs	r2, r3, #9
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012b00:	2300      	movs	r3, #0
 8012b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012b06:	e002      	b.n	8012b0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012b08:	2304      	movs	r3, #4
 8012b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3730      	adds	r7, #48	; 0x30
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	20000009 	.word	0x20000009

08012b20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012b20:	b480      	push	{r7}
 8012b22:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012b24:	4b03      	ldr	r3, [pc, #12]	; (8012b34 <BSP_SD_WriteCpltCallback+0x14>)
 8012b26:	2201      	movs	r2, #1
 8012b28:	601a      	str	r2, [r3, #0]
}
 8012b2a:	bf00      	nop
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	2004765c 	.word	0x2004765c

08012b38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012b3c:	4b03      	ldr	r3, [pc, #12]	; (8012b4c <BSP_SD_ReadCpltCallback+0x14>)
 8012b3e:	2201      	movs	r2, #1
 8012b40:	601a      	str	r2, [r3, #0]
}
 8012b42:	bf00      	nop
 8012b44:	46bd      	mov	sp, r7
 8012b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4a:	4770      	bx	lr
 8012b4c:	20047660 	.word	0x20047660

08012b50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012b5a:	79fb      	ldrb	r3, [r7, #7]
 8012b5c:	4a08      	ldr	r2, [pc, #32]	; (8012b80 <disk_status+0x30>)
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	4413      	add	r3, r2
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	79fa      	ldrb	r2, [r7, #7]
 8012b68:	4905      	ldr	r1, [pc, #20]	; (8012b80 <disk_status+0x30>)
 8012b6a:	440a      	add	r2, r1
 8012b6c:	7a12      	ldrb	r2, [r2, #8]
 8012b6e:	4610      	mov	r0, r2
 8012b70:	4798      	blx	r3
 8012b72:	4603      	mov	r3, r0
 8012b74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3710      	adds	r7, #16
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	2004768c 	.word	0x2004768c

08012b84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012b92:	79fb      	ldrb	r3, [r7, #7]
 8012b94:	4a0d      	ldr	r2, [pc, #52]	; (8012bcc <disk_initialize+0x48>)
 8012b96:	5cd3      	ldrb	r3, [r2, r3]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d111      	bne.n	8012bc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012b9c:	79fb      	ldrb	r3, [r7, #7]
 8012b9e:	4a0b      	ldr	r2, [pc, #44]	; (8012bcc <disk_initialize+0x48>)
 8012ba0:	2101      	movs	r1, #1
 8012ba2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	4a09      	ldr	r2, [pc, #36]	; (8012bcc <disk_initialize+0x48>)
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	4413      	add	r3, r2
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	79fa      	ldrb	r2, [r7, #7]
 8012bb2:	4906      	ldr	r1, [pc, #24]	; (8012bcc <disk_initialize+0x48>)
 8012bb4:	440a      	add	r2, r1
 8012bb6:	7a12      	ldrb	r2, [r2, #8]
 8012bb8:	4610      	mov	r0, r2
 8012bba:	4798      	blx	r3
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	2004768c 	.word	0x2004768c

08012bd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012bd0:	b590      	push	{r4, r7, lr}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60b9      	str	r1, [r7, #8]
 8012bd8:	607a      	str	r2, [r7, #4]
 8012bda:	603b      	str	r3, [r7, #0]
 8012bdc:	4603      	mov	r3, r0
 8012bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012be0:	7bfb      	ldrb	r3, [r7, #15]
 8012be2:	4a0a      	ldr	r2, [pc, #40]	; (8012c0c <disk_read+0x3c>)
 8012be4:	009b      	lsls	r3, r3, #2
 8012be6:	4413      	add	r3, r2
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	689c      	ldr	r4, [r3, #8]
 8012bec:	7bfb      	ldrb	r3, [r7, #15]
 8012bee:	4a07      	ldr	r2, [pc, #28]	; (8012c0c <disk_read+0x3c>)
 8012bf0:	4413      	add	r3, r2
 8012bf2:	7a18      	ldrb	r0, [r3, #8]
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	68b9      	ldr	r1, [r7, #8]
 8012bfa:	47a0      	blx	r4
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	371c      	adds	r7, #28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd90      	pop	{r4, r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	2004768c 	.word	0x2004768c

08012c10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60b9      	str	r1, [r7, #8]
 8012c18:	607a      	str	r2, [r7, #4]
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
 8012c22:	4a0a      	ldr	r2, [pc, #40]	; (8012c4c <disk_write+0x3c>)
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	4413      	add	r3, r2
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	68dc      	ldr	r4, [r3, #12]
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	4a07      	ldr	r2, [pc, #28]	; (8012c4c <disk_write+0x3c>)
 8012c30:	4413      	add	r3, r2
 8012c32:	7a18      	ldrb	r0, [r3, #8]
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	68b9      	ldr	r1, [r7, #8]
 8012c3a:	47a0      	blx	r4
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	371c      	adds	r7, #28
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd90      	pop	{r4, r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	2004768c 	.word	0x2004768c

08012c50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4603      	mov	r3, r0
 8012c58:	603a      	str	r2, [r7, #0]
 8012c5a:	71fb      	strb	r3, [r7, #7]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012c60:	79fb      	ldrb	r3, [r7, #7]
 8012c62:	4a09      	ldr	r2, [pc, #36]	; (8012c88 <disk_ioctl+0x38>)
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	79fa      	ldrb	r2, [r7, #7]
 8012c6e:	4906      	ldr	r1, [pc, #24]	; (8012c88 <disk_ioctl+0x38>)
 8012c70:	440a      	add	r2, r1
 8012c72:	7a10      	ldrb	r0, [r2, #8]
 8012c74:	79b9      	ldrb	r1, [r7, #6]
 8012c76:	683a      	ldr	r2, [r7, #0]
 8012c78:	4798      	blx	r3
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	2004768c 	.word	0x2004768c

08012c8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	3301      	adds	r3, #1
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012c9c:	89fb      	ldrh	r3, [r7, #14]
 8012c9e:	021b      	lsls	r3, r3, #8
 8012ca0:	b21a      	sxth	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	b21b      	sxth	r3, r3
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012cae:	89fb      	ldrh	r3, [r7, #14]
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3714      	adds	r7, #20
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr

08012cbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	3303      	adds	r3, #3
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	021b      	lsls	r3, r3, #8
 8012cd0:	687a      	ldr	r2, [r7, #4]
 8012cd2:	3202      	adds	r2, #2
 8012cd4:	7812      	ldrb	r2, [r2, #0]
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	021b      	lsls	r3, r3, #8
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	3201      	adds	r2, #1
 8012ce2:	7812      	ldrb	r2, [r2, #0]
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	021b      	lsls	r3, r3, #8
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	7812      	ldrb	r2, [r2, #0]
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	60fb      	str	r3, [r7, #12]
	return rv;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012d02:	b480      	push	{r7}
 8012d04:	b083      	sub	sp, #12
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	1c5a      	adds	r2, r3, #1
 8012d12:	607a      	str	r2, [r7, #4]
 8012d14:	887a      	ldrh	r2, [r7, #2]
 8012d16:	b2d2      	uxtb	r2, r2
 8012d18:	701a      	strb	r2, [r3, #0]
 8012d1a:	887b      	ldrh	r3, [r7, #2]
 8012d1c:	0a1b      	lsrs	r3, r3, #8
 8012d1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	1c5a      	adds	r2, r3, #1
 8012d24:	607a      	str	r2, [r7, #4]
 8012d26:	887a      	ldrh	r2, [r7, #2]
 8012d28:	b2d2      	uxtb	r2, r2
 8012d2a:	701a      	strb	r2, [r3, #0]
}
 8012d2c:	bf00      	nop
 8012d2e:	370c      	adds	r7, #12
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr

08012d38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	1c5a      	adds	r2, r3, #1
 8012d46:	607a      	str	r2, [r7, #4]
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	b2d2      	uxtb	r2, r2
 8012d4c:	701a      	strb	r2, [r3, #0]
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	0a1b      	lsrs	r3, r3, #8
 8012d52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	607a      	str	r2, [r7, #4]
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	0a1b      	lsrs	r3, r3, #8
 8012d64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	683a      	ldr	r2, [r7, #0]
 8012d6e:	b2d2      	uxtb	r2, r2
 8012d70:	701a      	strb	r2, [r3, #0]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	0a1b      	lsrs	r3, r3, #8
 8012d76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	607a      	str	r2, [r7, #4]
 8012d7e:	683a      	ldr	r2, [r7, #0]
 8012d80:	b2d2      	uxtb	r2, r2
 8012d82:	701a      	strb	r2, [r3, #0]
}
 8012d84:	bf00      	nop
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012d90:	b480      	push	{r7}
 8012d92:	b087      	sub	sp, #28
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00d      	beq.n	8012dc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012daa:	693a      	ldr	r2, [r7, #16]
 8012dac:	1c53      	adds	r3, r2, #1
 8012dae:	613b      	str	r3, [r7, #16]
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	1c59      	adds	r1, r3, #1
 8012db4:	6179      	str	r1, [r7, #20]
 8012db6:	7812      	ldrb	r2, [r2, #0]
 8012db8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	607b      	str	r3, [r7, #4]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1f1      	bne.n	8012daa <mem_cpy+0x1a>
	}
}
 8012dc6:	bf00      	nop
 8012dc8:	371c      	adds	r7, #28
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012dd2:	b480      	push	{r7}
 8012dd4:	b087      	sub	sp, #28
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	60f8      	str	r0, [r7, #12]
 8012dda:	60b9      	str	r1, [r7, #8]
 8012ddc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	617a      	str	r2, [r7, #20]
 8012de8:	68ba      	ldr	r2, [r7, #8]
 8012dea:	b2d2      	uxtb	r2, r2
 8012dec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3b01      	subs	r3, #1
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d1f3      	bne.n	8012de2 <mem_set+0x10>
}
 8012dfa:	bf00      	nop
 8012dfc:	371c      	adds	r7, #28
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012e06:	b480      	push	{r7}
 8012e08:	b089      	sub	sp, #36	; 0x24
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	60f8      	str	r0, [r7, #12]
 8012e0e:	60b9      	str	r1, [r7, #8]
 8012e10:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	61fb      	str	r3, [r7, #28]
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	1c5a      	adds	r2, r3, #1
 8012e22:	61fa      	str	r2, [r7, #28]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	4619      	mov	r1, r3
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	61ba      	str	r2, [r7, #24]
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	1acb      	subs	r3, r1, r3
 8012e32:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	3b01      	subs	r3, #1
 8012e38:	607b      	str	r3, [r7, #4]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d002      	beq.n	8012e46 <mem_cmp+0x40>
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d0eb      	beq.n	8012e1e <mem_cmp+0x18>

	return r;
 8012e46:	697b      	ldr	r3, [r7, #20]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3724      	adds	r7, #36	; 0x24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012e5e:	e002      	b.n	8012e66 <chk_chr+0x12>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	3301      	adds	r3, #1
 8012e64:	607b      	str	r3, [r7, #4]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d005      	beq.n	8012e7a <chk_chr+0x26>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	461a      	mov	r2, r3
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d1f2      	bne.n	8012e60 <chk_chr+0xc>
	return *str;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
	...

08012e8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012e96:	2300      	movs	r3, #0
 8012e98:	60bb      	str	r3, [r7, #8]
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	e029      	b.n	8012ef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012ea0:	4a27      	ldr	r2, [pc, #156]	; (8012f40 <chk_lock+0xb4>)
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	011b      	lsls	r3, r3, #4
 8012ea6:	4413      	add	r3, r2
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d01d      	beq.n	8012eea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012eae:	4a24      	ldr	r2, [pc, #144]	; (8012f40 <chk_lock+0xb4>)
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	011b      	lsls	r3, r3, #4
 8012eb4:	4413      	add	r3, r2
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d116      	bne.n	8012eee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012ec0:	4a1f      	ldr	r2, [pc, #124]	; (8012f40 <chk_lock+0xb4>)
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	011b      	lsls	r3, r3, #4
 8012ec6:	4413      	add	r3, r2
 8012ec8:	3304      	adds	r3, #4
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d10c      	bne.n	8012eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012ed4:	4a1a      	ldr	r2, [pc, #104]	; (8012f40 <chk_lock+0xb4>)
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	011b      	lsls	r3, r3, #4
 8012eda:	4413      	add	r3, r2
 8012edc:	3308      	adds	r3, #8
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d102      	bne.n	8012eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012ee8:	e007      	b.n	8012efa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012eea:	2301      	movs	r3, #1
 8012eec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d9d2      	bls.n	8012ea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2b02      	cmp	r3, #2
 8012efe:	d109      	bne.n	8012f14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d102      	bne.n	8012f0c <chk_lock+0x80>
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	d101      	bne.n	8012f10 <chk_lock+0x84>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	e010      	b.n	8012f32 <chk_lock+0xa6>
 8012f10:	2312      	movs	r3, #18
 8012f12:	e00e      	b.n	8012f32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d108      	bne.n	8012f2c <chk_lock+0xa0>
 8012f1a:	4a09      	ldr	r2, [pc, #36]	; (8012f40 <chk_lock+0xb4>)
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	011b      	lsls	r3, r3, #4
 8012f20:	4413      	add	r3, r2
 8012f22:	330c      	adds	r3, #12
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f2a:	d101      	bne.n	8012f30 <chk_lock+0xa4>
 8012f2c:	2310      	movs	r3, #16
 8012f2e:	e000      	b.n	8012f32 <chk_lock+0xa6>
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3714      	adds	r7, #20
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop
 8012f40:	2004766c 	.word	0x2004766c

08012f44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	607b      	str	r3, [r7, #4]
 8012f4e:	e002      	b.n	8012f56 <enq_lock+0x12>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	3301      	adds	r3, #1
 8012f54:	607b      	str	r3, [r7, #4]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d806      	bhi.n	8012f6a <enq_lock+0x26>
 8012f5c:	4a09      	ldr	r2, [pc, #36]	; (8012f84 <enq_lock+0x40>)
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	011b      	lsls	r3, r3, #4
 8012f62:	4413      	add	r3, r2
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1f2      	bne.n	8012f50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	bf14      	ite	ne
 8012f70:	2301      	movne	r3, #1
 8012f72:	2300      	moveq	r3, #0
 8012f74:	b2db      	uxtb	r3, r3
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	370c      	adds	r7, #12
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr
 8012f82:	bf00      	nop
 8012f84:	2004766c 	.word	0x2004766c

08012f88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012f92:	2300      	movs	r3, #0
 8012f94:	60fb      	str	r3, [r7, #12]
 8012f96:	e01f      	b.n	8012fd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012f98:	4a41      	ldr	r2, [pc, #260]	; (80130a0 <inc_lock+0x118>)
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	011b      	lsls	r3, r3, #4
 8012f9e:	4413      	add	r3, r2
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d113      	bne.n	8012fd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012faa:	4a3d      	ldr	r2, [pc, #244]	; (80130a0 <inc_lock+0x118>)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	011b      	lsls	r3, r3, #4
 8012fb0:	4413      	add	r3, r2
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d109      	bne.n	8012fd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012fbe:	4a38      	ldr	r2, [pc, #224]	; (80130a0 <inc_lock+0x118>)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	011b      	lsls	r3, r3, #4
 8012fc4:	4413      	add	r3, r2
 8012fc6:	3308      	adds	r3, #8
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d006      	beq.n	8012fe0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	60fb      	str	r3, [r7, #12]
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d9dc      	bls.n	8012f98 <inc_lock+0x10>
 8012fde:	e000      	b.n	8012fe2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012fe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d132      	bne.n	801304e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	60fb      	str	r3, [r7, #12]
 8012fec:	e002      	b.n	8012ff4 <inc_lock+0x6c>
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d806      	bhi.n	8013008 <inc_lock+0x80>
 8012ffa:	4a29      	ldr	r2, [pc, #164]	; (80130a0 <inc_lock+0x118>)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	011b      	lsls	r3, r3, #4
 8013000:	4413      	add	r3, r2
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d1f2      	bne.n	8012fee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2b02      	cmp	r3, #2
 801300c:	d101      	bne.n	8013012 <inc_lock+0x8a>
 801300e:	2300      	movs	r3, #0
 8013010:	e040      	b.n	8013094 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	4922      	ldr	r1, [pc, #136]	; (80130a0 <inc_lock+0x118>)
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	011b      	lsls	r3, r3, #4
 801301c:	440b      	add	r3, r1
 801301e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	689a      	ldr	r2, [r3, #8]
 8013024:	491e      	ldr	r1, [pc, #120]	; (80130a0 <inc_lock+0x118>)
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	011b      	lsls	r3, r3, #4
 801302a:	440b      	add	r3, r1
 801302c:	3304      	adds	r3, #4
 801302e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	695a      	ldr	r2, [r3, #20]
 8013034:	491a      	ldr	r1, [pc, #104]	; (80130a0 <inc_lock+0x118>)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	011b      	lsls	r3, r3, #4
 801303a:	440b      	add	r3, r1
 801303c:	3308      	adds	r3, #8
 801303e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013040:	4a17      	ldr	r2, [pc, #92]	; (80130a0 <inc_lock+0x118>)
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	011b      	lsls	r3, r3, #4
 8013046:	4413      	add	r3, r2
 8013048:	330c      	adds	r3, #12
 801304a:	2200      	movs	r2, #0
 801304c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d009      	beq.n	8013068 <inc_lock+0xe0>
 8013054:	4a12      	ldr	r2, [pc, #72]	; (80130a0 <inc_lock+0x118>)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	011b      	lsls	r3, r3, #4
 801305a:	4413      	add	r3, r2
 801305c:	330c      	adds	r3, #12
 801305e:	881b      	ldrh	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d001      	beq.n	8013068 <inc_lock+0xe0>
 8013064:	2300      	movs	r3, #0
 8013066:	e015      	b.n	8013094 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d108      	bne.n	8013080 <inc_lock+0xf8>
 801306e:	4a0c      	ldr	r2, [pc, #48]	; (80130a0 <inc_lock+0x118>)
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	011b      	lsls	r3, r3, #4
 8013074:	4413      	add	r3, r2
 8013076:	330c      	adds	r3, #12
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	3301      	adds	r3, #1
 801307c:	b29a      	uxth	r2, r3
 801307e:	e001      	b.n	8013084 <inc_lock+0xfc>
 8013080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013084:	4906      	ldr	r1, [pc, #24]	; (80130a0 <inc_lock+0x118>)
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	011b      	lsls	r3, r3, #4
 801308a:	440b      	add	r3, r1
 801308c:	330c      	adds	r3, #12
 801308e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	3301      	adds	r3, #1
}
 8013094:	4618      	mov	r0, r3
 8013096:	3714      	adds	r7, #20
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	2004766c 	.word	0x2004766c

080130a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3b01      	subs	r3, #1
 80130b0:	607b      	str	r3, [r7, #4]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d825      	bhi.n	8013104 <dec_lock+0x60>
		n = Files[i].ctr;
 80130b8:	4a17      	ldr	r2, [pc, #92]	; (8013118 <dec_lock+0x74>)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	011b      	lsls	r3, r3, #4
 80130be:	4413      	add	r3, r2
 80130c0:	330c      	adds	r3, #12
 80130c2:	881b      	ldrh	r3, [r3, #0]
 80130c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80130c6:	89fb      	ldrh	r3, [r7, #14]
 80130c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130cc:	d101      	bne.n	80130d2 <dec_lock+0x2e>
 80130ce:	2300      	movs	r3, #0
 80130d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80130d2:	89fb      	ldrh	r3, [r7, #14]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <dec_lock+0x3a>
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	3b01      	subs	r3, #1
 80130dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80130de:	4a0e      	ldr	r2, [pc, #56]	; (8013118 <dec_lock+0x74>)
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	011b      	lsls	r3, r3, #4
 80130e4:	4413      	add	r3, r2
 80130e6:	330c      	adds	r3, #12
 80130e8:	89fa      	ldrh	r2, [r7, #14]
 80130ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80130ec:	89fb      	ldrh	r3, [r7, #14]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d105      	bne.n	80130fe <dec_lock+0x5a>
 80130f2:	4a09      	ldr	r2, [pc, #36]	; (8013118 <dec_lock+0x74>)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	011b      	lsls	r3, r3, #4
 80130f8:	4413      	add	r3, r2
 80130fa:	2200      	movs	r2, #0
 80130fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80130fe:	2300      	movs	r3, #0
 8013100:	737b      	strb	r3, [r7, #13]
 8013102:	e001      	b.n	8013108 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013104:	2302      	movs	r3, #2
 8013106:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013108:	7b7b      	ldrb	r3, [r7, #13]
}
 801310a:	4618      	mov	r0, r3
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	2004766c 	.word	0x2004766c

0801311c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013124:	2300      	movs	r3, #0
 8013126:	60fb      	str	r3, [r7, #12]
 8013128:	e010      	b.n	801314c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801312a:	4a0d      	ldr	r2, [pc, #52]	; (8013160 <clear_lock+0x44>)
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	011b      	lsls	r3, r3, #4
 8013130:	4413      	add	r3, r2
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	429a      	cmp	r2, r3
 8013138:	d105      	bne.n	8013146 <clear_lock+0x2a>
 801313a:	4a09      	ldr	r2, [pc, #36]	; (8013160 <clear_lock+0x44>)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	011b      	lsls	r3, r3, #4
 8013140:	4413      	add	r3, r2
 8013142:	2200      	movs	r2, #0
 8013144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	3301      	adds	r3, #1
 801314a:	60fb      	str	r3, [r7, #12]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2b01      	cmp	r3, #1
 8013150:	d9eb      	bls.n	801312a <clear_lock+0xe>
	}
}
 8013152:	bf00      	nop
 8013154:	3714      	adds	r7, #20
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	2004766c 	.word	0x2004766c

08013164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801316c:	2300      	movs	r3, #0
 801316e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	78db      	ldrb	r3, [r3, #3]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d034      	beq.n	80131e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801317c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	7858      	ldrb	r0, [r3, #1]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013188:	2301      	movs	r3, #1
 801318a:	697a      	ldr	r2, [r7, #20]
 801318c:	f7ff fd40 	bl	8012c10 <disk_write>
 8013190:	4603      	mov	r3, r0
 8013192:	2b00      	cmp	r3, #0
 8013194:	d002      	beq.n	801319c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013196:	2301      	movs	r3, #1
 8013198:	73fb      	strb	r3, [r7, #15]
 801319a:	e022      	b.n	80131e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	1ad2      	subs	r2, r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6a1b      	ldr	r3, [r3, #32]
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d217      	bcs.n	80131e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	789b      	ldrb	r3, [r3, #2]
 80131b6:	613b      	str	r3, [r7, #16]
 80131b8:	e010      	b.n	80131dc <sync_window+0x78>
					wsect += fs->fsize;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6a1b      	ldr	r3, [r3, #32]
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	4413      	add	r3, r2
 80131c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	7858      	ldrb	r0, [r3, #1]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80131ce:	2301      	movs	r3, #1
 80131d0:	697a      	ldr	r2, [r7, #20]
 80131d2:	f7ff fd1d 	bl	8012c10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	3b01      	subs	r3, #1
 80131da:	613b      	str	r3, [r7, #16]
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d8eb      	bhi.n	80131ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80131e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3718      	adds	r7, #24
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131fe:	683a      	ldr	r2, [r7, #0]
 8013200:	429a      	cmp	r2, r3
 8013202:	d01b      	beq.n	801323c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7ff ffad 	bl	8013164 <sync_window>
 801320a:	4603      	mov	r3, r0
 801320c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801320e:	7bfb      	ldrb	r3, [r7, #15]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d113      	bne.n	801323c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	7858      	ldrb	r0, [r3, #1]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801321e:	2301      	movs	r3, #1
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	f7ff fcd5 	bl	8012bd0 <disk_read>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d004      	beq.n	8013236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801322c:	f04f 33ff 	mov.w	r3, #4294967295
 8013230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013232:	2301      	movs	r3, #1
 8013234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	683a      	ldr	r2, [r7, #0]
 801323a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801323c:	7bfb      	ldrb	r3, [r7, #15]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
	...

08013248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7ff ff87 	bl	8013164 <sync_window>
 8013256:	4603      	mov	r3, r0
 8013258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801325a:	7bfb      	ldrb	r3, [r7, #15]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d159      	bne.n	8013314 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	2b03      	cmp	r3, #3
 8013266:	d149      	bne.n	80132fc <sync_fs+0xb4>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	791b      	ldrb	r3, [r3, #4]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d145      	bne.n	80132fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	899b      	ldrh	r3, [r3, #12]
 801327a:	461a      	mov	r2, r3
 801327c:	2100      	movs	r1, #0
 801327e:	f7ff fda8 	bl	8012dd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	3338      	adds	r3, #56	; 0x38
 8013286:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801328a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff fd37 	bl	8012d02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3338      	adds	r3, #56	; 0x38
 8013298:	4921      	ldr	r1, [pc, #132]	; (8013320 <sync_fs+0xd8>)
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff fd4c 	bl	8012d38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3338      	adds	r3, #56	; 0x38
 80132a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132a8:	491e      	ldr	r1, [pc, #120]	; (8013324 <sync_fs+0xdc>)
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff fd44 	bl	8012d38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	3338      	adds	r3, #56	; 0x38
 80132b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	695b      	ldr	r3, [r3, #20]
 80132bc:	4619      	mov	r1, r3
 80132be:	4610      	mov	r0, r2
 80132c0:	f7ff fd3a 	bl	8012d38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	3338      	adds	r3, #56	; 0x38
 80132c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	691b      	ldr	r3, [r3, #16]
 80132d0:	4619      	mov	r1, r3
 80132d2:	4610      	mov	r0, r2
 80132d4:	f7ff fd30 	bl	8012d38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132dc:	1c5a      	adds	r2, r3, #1
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	7858      	ldrb	r0, [r3, #1]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132f0:	2301      	movs	r3, #1
 80132f2:	f7ff fc8d 	bl	8012c10 <disk_write>
			fs->fsi_flag = 0;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	785b      	ldrb	r3, [r3, #1]
 8013300:	2200      	movs	r2, #0
 8013302:	2100      	movs	r1, #0
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fca3 	bl	8012c50 <disk_ioctl>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <sync_fs+0xcc>
 8013310:	2301      	movs	r3, #1
 8013312:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013314:	7bfb      	ldrb	r3, [r7, #15]
}
 8013316:	4618      	mov	r0, r3
 8013318:	3710      	adds	r7, #16
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	41615252 	.word	0x41615252
 8013324:	61417272 	.word	0x61417272

08013328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013328:	b480      	push	{r7}
 801332a:	b083      	sub	sp, #12
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	3b02      	subs	r3, #2
 8013336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	69db      	ldr	r3, [r3, #28]
 801333c:	3b02      	subs	r3, #2
 801333e:	683a      	ldr	r2, [r7, #0]
 8013340:	429a      	cmp	r2, r3
 8013342:	d301      	bcc.n	8013348 <clust2sect+0x20>
 8013344:	2300      	movs	r3, #0
 8013346:	e008      	b.n	801335a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	895b      	ldrh	r3, [r3, #10]
 801334c:	461a      	mov	r2, r3
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	fb03 f202 	mul.w	r2, r3, r2
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013358:	4413      	add	r3, r2
}
 801335a:	4618      	mov	r0, r3
 801335c:	370c      	adds	r7, #12
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr

08013366 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b086      	sub	sp, #24
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
 801336e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d904      	bls.n	8013386 <get_fat+0x20>
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	69db      	ldr	r3, [r3, #28]
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	429a      	cmp	r2, r3
 8013384:	d302      	bcc.n	801338c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013386:	2301      	movs	r3, #1
 8013388:	617b      	str	r3, [r7, #20]
 801338a:	e0b7      	b.n	80134fc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801338c:	f04f 33ff 	mov.w	r3, #4294967295
 8013390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	2b02      	cmp	r3, #2
 8013398:	d05a      	beq.n	8013450 <get_fat+0xea>
 801339a:	2b03      	cmp	r3, #3
 801339c:	d07d      	beq.n	801349a <get_fat+0x134>
 801339e:	2b01      	cmp	r3, #1
 80133a0:	f040 80a2 	bne.w	80134e8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	60fb      	str	r3, [r7, #12]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	085b      	lsrs	r3, r3, #1
 80133ac:	68fa      	ldr	r2, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	4619      	mov	r1, r3
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	fbb3 f3f1 	udiv	r3, r3, r1
 80133c2:	4413      	add	r3, r2
 80133c4:	4619      	mov	r1, r3
 80133c6:	6938      	ldr	r0, [r7, #16]
 80133c8:	f7ff ff10 	bl	80131ec <move_window>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f040 808d 	bne.w	80134ee <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	60fa      	str	r2, [r7, #12]
 80133da:	693a      	ldr	r2, [r7, #16]
 80133dc:	8992      	ldrh	r2, [r2, #12]
 80133de:	fbb3 f1f2 	udiv	r1, r3, r2
 80133e2:	fb02 f201 	mul.w	r2, r2, r1
 80133e6:	1a9b      	subs	r3, r3, r2
 80133e8:	693a      	ldr	r2, [r7, #16]
 80133ea:	4413      	add	r3, r2
 80133ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80133f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	899b      	ldrh	r3, [r3, #12]
 80133fa:	4619      	mov	r1, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8013402:	4413      	add	r3, r2
 8013404:	4619      	mov	r1, r3
 8013406:	6938      	ldr	r0, [r7, #16]
 8013408:	f7ff fef0 	bl	80131ec <move_window>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d16f      	bne.n	80134f2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	899b      	ldrh	r3, [r3, #12]
 8013416:	461a      	mov	r2, r3
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	fbb3 f1f2 	udiv	r1, r3, r2
 801341e:	fb02 f201 	mul.w	r2, r2, r1
 8013422:	1a9b      	subs	r3, r3, r2
 8013424:	693a      	ldr	r2, [r7, #16]
 8013426:	4413      	add	r3, r2
 8013428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801342c:	021b      	lsls	r3, r3, #8
 801342e:	461a      	mov	r2, r3
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	4313      	orrs	r3, r2
 8013434:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	2b00      	cmp	r3, #0
 801343e:	d002      	beq.n	8013446 <get_fat+0xe0>
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	091b      	lsrs	r3, r3, #4
 8013444:	e002      	b.n	801344c <get_fat+0xe6>
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801344c:	617b      	str	r3, [r7, #20]
			break;
 801344e:	e055      	b.n	80134fc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	899b      	ldrh	r3, [r3, #12]
 8013458:	085b      	lsrs	r3, r3, #1
 801345a:	b29b      	uxth	r3, r3
 801345c:	4619      	mov	r1, r3
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	fbb3 f3f1 	udiv	r3, r3, r1
 8013464:	4413      	add	r3, r2
 8013466:	4619      	mov	r1, r3
 8013468:	6938      	ldr	r0, [r7, #16]
 801346a:	f7ff febf 	bl	80131ec <move_window>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d140      	bne.n	80134f6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	005b      	lsls	r3, r3, #1
 801347e:	693a      	ldr	r2, [r7, #16]
 8013480:	8992      	ldrh	r2, [r2, #12]
 8013482:	fbb3 f0f2 	udiv	r0, r3, r2
 8013486:	fb02 f200 	mul.w	r2, r2, r0
 801348a:	1a9b      	subs	r3, r3, r2
 801348c:	440b      	add	r3, r1
 801348e:	4618      	mov	r0, r3
 8013490:	f7ff fbfc 	bl	8012c8c <ld_word>
 8013494:	4603      	mov	r3, r0
 8013496:	617b      	str	r3, [r7, #20]
			break;
 8013498:	e030      	b.n	80134fc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	899b      	ldrh	r3, [r3, #12]
 80134a2:	089b      	lsrs	r3, r3, #2
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	4619      	mov	r1, r3
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80134ae:	4413      	add	r3, r2
 80134b0:	4619      	mov	r1, r3
 80134b2:	6938      	ldr	r0, [r7, #16]
 80134b4:	f7ff fe9a 	bl	80131ec <move_window>
 80134b8:	4603      	mov	r3, r0
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d11d      	bne.n	80134fa <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	009b      	lsls	r3, r3, #2
 80134c8:	693a      	ldr	r2, [r7, #16]
 80134ca:	8992      	ldrh	r2, [r2, #12]
 80134cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80134d0:	fb02 f200 	mul.w	r2, r2, r0
 80134d4:	1a9b      	subs	r3, r3, r2
 80134d6:	440b      	add	r3, r1
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff fbef 	bl	8012cbc <ld_dword>
 80134de:	4603      	mov	r3, r0
 80134e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80134e4:	617b      	str	r3, [r7, #20]
			break;
 80134e6:	e009      	b.n	80134fc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80134e8:	2301      	movs	r3, #1
 80134ea:	617b      	str	r3, [r7, #20]
 80134ec:	e006      	b.n	80134fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134ee:	bf00      	nop
 80134f0:	e004      	b.n	80134fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134f2:	bf00      	nop
 80134f4:	e002      	b.n	80134fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80134f6:	bf00      	nop
 80134f8:	e000      	b.n	80134fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80134fa:	bf00      	nop
		}
	}

	return val;
 80134fc:	697b      	ldr	r3, [r7, #20]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3718      	adds	r7, #24
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013506:	b590      	push	{r4, r7, lr}
 8013508:	b089      	sub	sp, #36	; 0x24
 801350a:	af00      	add	r7, sp, #0
 801350c:	60f8      	str	r0, [r7, #12]
 801350e:	60b9      	str	r1, [r7, #8]
 8013510:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013512:	2302      	movs	r3, #2
 8013514:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	2b01      	cmp	r3, #1
 801351a:	f240 8106 	bls.w	801372a <put_fat+0x224>
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	69db      	ldr	r3, [r3, #28]
 8013522:	68ba      	ldr	r2, [r7, #8]
 8013524:	429a      	cmp	r2, r3
 8013526:	f080 8100 	bcs.w	801372a <put_fat+0x224>
		switch (fs->fs_type) {
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	2b02      	cmp	r3, #2
 8013530:	f000 8088 	beq.w	8013644 <put_fat+0x13e>
 8013534:	2b03      	cmp	r3, #3
 8013536:	f000 80b0 	beq.w	801369a <put_fat+0x194>
 801353a:	2b01      	cmp	r3, #1
 801353c:	f040 80f5 	bne.w	801372a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	61bb      	str	r3, [r7, #24]
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	085b      	lsrs	r3, r3, #1
 8013548:	69ba      	ldr	r2, [r7, #24]
 801354a:	4413      	add	r3, r2
 801354c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	899b      	ldrh	r3, [r3, #12]
 8013556:	4619      	mov	r1, r3
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	fbb3 f3f1 	udiv	r3, r3, r1
 801355e:	4413      	add	r3, r2
 8013560:	4619      	mov	r1, r3
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7ff fe42 	bl	80131ec <move_window>
 8013568:	4603      	mov	r3, r0
 801356a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801356c:	7ffb      	ldrb	r3, [r7, #31]
 801356e:	2b00      	cmp	r3, #0
 8013570:	f040 80d4 	bne.w	801371c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	1c5a      	adds	r2, r3, #1
 801357e:	61ba      	str	r2, [r7, #24]
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	8992      	ldrh	r2, [r2, #12]
 8013584:	fbb3 f0f2 	udiv	r0, r3, r2
 8013588:	fb02 f200 	mul.w	r2, r2, r0
 801358c:	1a9b      	subs	r3, r3, r2
 801358e:	440b      	add	r3, r1
 8013590:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	f003 0301 	and.w	r3, r3, #1
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00d      	beq.n	80135b8 <put_fat+0xb2>
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	b25b      	sxtb	r3, r3
 80135a2:	f003 030f 	and.w	r3, r3, #15
 80135a6:	b25a      	sxtb	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	011b      	lsls	r3, r3, #4
 80135ae:	b25b      	sxtb	r3, r3
 80135b0:	4313      	orrs	r3, r2
 80135b2:	b25b      	sxtb	r3, r3
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	e001      	b.n	80135bc <put_fat+0xb6>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	697a      	ldr	r2, [r7, #20]
 80135be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2201      	movs	r2, #1
 80135c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	899b      	ldrh	r3, [r3, #12]
 80135ce:	4619      	mov	r1, r3
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80135d6:	4413      	add	r3, r2
 80135d8:	4619      	mov	r1, r3
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f7ff fe06 	bl	80131ec <move_window>
 80135e0:	4603      	mov	r3, r0
 80135e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135e4:	7ffb      	ldrb	r3, [r7, #31]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f040 809a 	bne.w	8013720 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	899b      	ldrh	r3, [r3, #12]
 80135f6:	461a      	mov	r2, r3
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80135fe:	fb02 f200 	mul.w	r2, r2, r0
 8013602:	1a9b      	subs	r3, r3, r2
 8013604:	440b      	add	r3, r1
 8013606:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	f003 0301 	and.w	r3, r3, #1
 801360e:	2b00      	cmp	r3, #0
 8013610:	d003      	beq.n	801361a <put_fat+0x114>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	091b      	lsrs	r3, r3, #4
 8013616:	b2db      	uxtb	r3, r3
 8013618:	e00e      	b.n	8013638 <put_fat+0x132>
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	b25b      	sxtb	r3, r3
 8013620:	f023 030f 	bic.w	r3, r3, #15
 8013624:	b25a      	sxtb	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	0a1b      	lsrs	r3, r3, #8
 801362a:	b25b      	sxtb	r3, r3
 801362c:	f003 030f 	and.w	r3, r3, #15
 8013630:	b25b      	sxtb	r3, r3
 8013632:	4313      	orrs	r3, r2
 8013634:	b25b      	sxtb	r3, r3
 8013636:	b2db      	uxtb	r3, r3
 8013638:	697a      	ldr	r2, [r7, #20]
 801363a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	2201      	movs	r2, #1
 8013640:	70da      	strb	r2, [r3, #3]
			break;
 8013642:	e072      	b.n	801372a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	899b      	ldrh	r3, [r3, #12]
 801364c:	085b      	lsrs	r3, r3, #1
 801364e:	b29b      	uxth	r3, r3
 8013650:	4619      	mov	r1, r3
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	fbb3 f3f1 	udiv	r3, r3, r1
 8013658:	4413      	add	r3, r2
 801365a:	4619      	mov	r1, r3
 801365c:	68f8      	ldr	r0, [r7, #12]
 801365e:	f7ff fdc5 	bl	80131ec <move_window>
 8013662:	4603      	mov	r3, r0
 8013664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013666:	7ffb      	ldrb	r3, [r7, #31]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d15b      	bne.n	8013724 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	005b      	lsls	r3, r3, #1
 8013676:	68fa      	ldr	r2, [r7, #12]
 8013678:	8992      	ldrh	r2, [r2, #12]
 801367a:	fbb3 f0f2 	udiv	r0, r3, r2
 801367e:	fb02 f200 	mul.w	r2, r2, r0
 8013682:	1a9b      	subs	r3, r3, r2
 8013684:	440b      	add	r3, r1
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	b292      	uxth	r2, r2
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff fb38 	bl	8012d02 <st_word>
			fs->wflag = 1;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2201      	movs	r2, #1
 8013696:	70da      	strb	r2, [r3, #3]
			break;
 8013698:	e047      	b.n	801372a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	899b      	ldrh	r3, [r3, #12]
 80136a2:	089b      	lsrs	r3, r3, #2
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	4619      	mov	r1, r3
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80136ae:	4413      	add	r3, r2
 80136b0:	4619      	mov	r1, r3
 80136b2:	68f8      	ldr	r0, [r7, #12]
 80136b4:	f7ff fd9a 	bl	80131ec <move_window>
 80136b8:	4603      	mov	r3, r0
 80136ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136bc:	7ffb      	ldrb	r3, [r7, #31]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d132      	bne.n	8013728 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	009b      	lsls	r3, r3, #2
 80136d2:	68fa      	ldr	r2, [r7, #12]
 80136d4:	8992      	ldrh	r2, [r2, #12]
 80136d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80136da:	fb02 f200 	mul.w	r2, r2, r0
 80136de:	1a9b      	subs	r3, r3, r2
 80136e0:	440b      	add	r3, r1
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7ff faea 	bl	8012cbc <ld_dword>
 80136e8:	4603      	mov	r3, r0
 80136ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80136ee:	4323      	orrs	r3, r4
 80136f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	68fa      	ldr	r2, [r7, #12]
 80136fe:	8992      	ldrh	r2, [r2, #12]
 8013700:	fbb3 f0f2 	udiv	r0, r3, r2
 8013704:	fb02 f200 	mul.w	r2, r2, r0
 8013708:	1a9b      	subs	r3, r3, r2
 801370a:	440b      	add	r3, r1
 801370c:	6879      	ldr	r1, [r7, #4]
 801370e:	4618      	mov	r0, r3
 8013710:	f7ff fb12 	bl	8012d38 <st_dword>
			fs->wflag = 1;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2201      	movs	r2, #1
 8013718:	70da      	strb	r2, [r3, #3]
			break;
 801371a:	e006      	b.n	801372a <put_fat+0x224>
			if (res != FR_OK) break;
 801371c:	bf00      	nop
 801371e:	e004      	b.n	801372a <put_fat+0x224>
			if (res != FR_OK) break;
 8013720:	bf00      	nop
 8013722:	e002      	b.n	801372a <put_fat+0x224>
			if (res != FR_OK) break;
 8013724:	bf00      	nop
 8013726:	e000      	b.n	801372a <put_fat+0x224>
			if (res != FR_OK) break;
 8013728:	bf00      	nop
		}
	}
	return res;
 801372a:	7ffb      	ldrb	r3, [r7, #31]
}
 801372c:	4618      	mov	r0, r3
 801372e:	3724      	adds	r7, #36	; 0x24
 8013730:	46bd      	mov	sp, r7
 8013732:	bd90      	pop	{r4, r7, pc}

08013734 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b088      	sub	sp, #32
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013740:	2300      	movs	r3, #0
 8013742:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d904      	bls.n	801375a <remove_chain+0x26>
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	69db      	ldr	r3, [r3, #28]
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	429a      	cmp	r2, r3
 8013758:	d301      	bcc.n	801375e <remove_chain+0x2a>
 801375a:	2302      	movs	r3, #2
 801375c:	e04b      	b.n	80137f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d00c      	beq.n	801377e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013764:	f04f 32ff 	mov.w	r2, #4294967295
 8013768:	6879      	ldr	r1, [r7, #4]
 801376a:	69b8      	ldr	r0, [r7, #24]
 801376c:	f7ff fecb 	bl	8013506 <put_fat>
 8013770:	4603      	mov	r3, r0
 8013772:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013774:	7ffb      	ldrb	r3, [r7, #31]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <remove_chain+0x4a>
 801377a:	7ffb      	ldrb	r3, [r7, #31]
 801377c:	e03b      	b.n	80137f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f7ff fdf0 	bl	8013366 <get_fat>
 8013786:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d031      	beq.n	80137f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	2b01      	cmp	r3, #1
 8013792:	d101      	bne.n	8013798 <remove_chain+0x64>
 8013794:	2302      	movs	r3, #2
 8013796:	e02e      	b.n	80137f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801379e:	d101      	bne.n	80137a4 <remove_chain+0x70>
 80137a0:	2301      	movs	r3, #1
 80137a2:	e028      	b.n	80137f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80137a4:	2200      	movs	r2, #0
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	69b8      	ldr	r0, [r7, #24]
 80137aa:	f7ff feac 	bl	8013506 <put_fat>
 80137ae:	4603      	mov	r3, r0
 80137b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80137b2:	7ffb      	ldrb	r3, [r7, #31]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d001      	beq.n	80137bc <remove_chain+0x88>
 80137b8:	7ffb      	ldrb	r3, [r7, #31]
 80137ba:	e01c      	b.n	80137f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	695a      	ldr	r2, [r3, #20]
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	69db      	ldr	r3, [r3, #28]
 80137c4:	3b02      	subs	r3, #2
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d20b      	bcs.n	80137e2 <remove_chain+0xae>
			fs->free_clst++;
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	695b      	ldr	r3, [r3, #20]
 80137ce:	1c5a      	adds	r2, r3, #1
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	791b      	ldrb	r3, [r3, #4]
 80137d8:	f043 0301 	orr.w	r3, r3, #1
 80137dc:	b2da      	uxtb	r2, r3
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	69db      	ldr	r3, [r3, #28]
 80137ea:	68ba      	ldr	r2, [r7, #8]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d3c6      	bcc.n	801377e <remove_chain+0x4a>
 80137f0:	e000      	b.n	80137f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80137f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3720      	adds	r7, #32
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b088      	sub	sp, #32
 8013802:	af00      	add	r7, sp, #0
 8013804:	6078      	str	r0, [r7, #4]
 8013806:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d10d      	bne.n	8013830 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	691b      	ldr	r3, [r3, #16]
 8013818:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d004      	beq.n	801382a <create_chain+0x2c>
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	69db      	ldr	r3, [r3, #28]
 8013824:	69ba      	ldr	r2, [r7, #24]
 8013826:	429a      	cmp	r2, r3
 8013828:	d31b      	bcc.n	8013862 <create_chain+0x64>
 801382a:	2301      	movs	r3, #1
 801382c:	61bb      	str	r3, [r7, #24]
 801382e:	e018      	b.n	8013862 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7ff fd97 	bl	8013366 <get_fat>
 8013838:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2b01      	cmp	r3, #1
 801383e:	d801      	bhi.n	8013844 <create_chain+0x46>
 8013840:	2301      	movs	r3, #1
 8013842:	e070      	b.n	8013926 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801384a:	d101      	bne.n	8013850 <create_chain+0x52>
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	e06a      	b.n	8013926 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	69db      	ldr	r3, [r3, #28]
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	429a      	cmp	r2, r3
 8013858:	d201      	bcs.n	801385e <create_chain+0x60>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	e063      	b.n	8013926 <create_chain+0x128>
		scl = clst;
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	3301      	adds	r3, #1
 801386a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	69db      	ldr	r3, [r3, #28]
 8013870:	69fa      	ldr	r2, [r7, #28]
 8013872:	429a      	cmp	r2, r3
 8013874:	d307      	bcc.n	8013886 <create_chain+0x88>
				ncl = 2;
 8013876:	2302      	movs	r3, #2
 8013878:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801387a:	69fa      	ldr	r2, [r7, #28]
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	429a      	cmp	r2, r3
 8013880:	d901      	bls.n	8013886 <create_chain+0x88>
 8013882:	2300      	movs	r3, #0
 8013884:	e04f      	b.n	8013926 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013886:	69f9      	ldr	r1, [r7, #28]
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7ff fd6c 	bl	8013366 <get_fat>
 801388e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00e      	beq.n	80138b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2b01      	cmp	r3, #1
 801389a:	d003      	beq.n	80138a4 <create_chain+0xa6>
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a2:	d101      	bne.n	80138a8 <create_chain+0xaa>
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	e03e      	b.n	8013926 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80138a8:	69fa      	ldr	r2, [r7, #28]
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d1da      	bne.n	8013866 <create_chain+0x68>
 80138b0:	2300      	movs	r3, #0
 80138b2:	e038      	b.n	8013926 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80138b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80138b6:	f04f 32ff 	mov.w	r2, #4294967295
 80138ba:	69f9      	ldr	r1, [r7, #28]
 80138bc:	6938      	ldr	r0, [r7, #16]
 80138be:	f7ff fe22 	bl	8013506 <put_fat>
 80138c2:	4603      	mov	r3, r0
 80138c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80138c6:	7dfb      	ldrb	r3, [r7, #23]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d109      	bne.n	80138e0 <create_chain+0xe2>
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d006      	beq.n	80138e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80138d2:	69fa      	ldr	r2, [r7, #28]
 80138d4:	6839      	ldr	r1, [r7, #0]
 80138d6:	6938      	ldr	r0, [r7, #16]
 80138d8:	f7ff fe15 	bl	8013506 <put_fat>
 80138dc:	4603      	mov	r3, r0
 80138de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d116      	bne.n	8013914 <create_chain+0x116>
		fs->last_clst = ncl;
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	69fa      	ldr	r2, [r7, #28]
 80138ea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	695a      	ldr	r2, [r3, #20]
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	69db      	ldr	r3, [r3, #28]
 80138f4:	3b02      	subs	r3, #2
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d804      	bhi.n	8013904 <create_chain+0x106>
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	695b      	ldr	r3, [r3, #20]
 80138fe:	1e5a      	subs	r2, r3, #1
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	791b      	ldrb	r3, [r3, #4]
 8013908:	f043 0301 	orr.w	r3, r3, #1
 801390c:	b2da      	uxtb	r2, r3
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	711a      	strb	r2, [r3, #4]
 8013912:	e007      	b.n	8013924 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013914:	7dfb      	ldrb	r3, [r7, #23]
 8013916:	2b01      	cmp	r3, #1
 8013918:	d102      	bne.n	8013920 <create_chain+0x122>
 801391a:	f04f 33ff 	mov.w	r3, #4294967295
 801391e:	e000      	b.n	8013922 <create_chain+0x124>
 8013920:	2301      	movs	r3, #1
 8013922:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013924:	69fb      	ldr	r3, [r7, #28]
}
 8013926:	4618      	mov	r0, r3
 8013928:	3720      	adds	r7, #32
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}

0801392e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801392e:	b480      	push	{r7}
 8013930:	b087      	sub	sp, #28
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
 8013936:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013942:	3304      	adds	r3, #4
 8013944:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	899b      	ldrh	r3, [r3, #12]
 801394a:	461a      	mov	r2, r3
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	8952      	ldrh	r2, [r2, #10]
 8013956:	fbb3 f3f2 	udiv	r3, r3, r2
 801395a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	1d1a      	adds	r2, r3, #4
 8013960:	613a      	str	r2, [r7, #16]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d101      	bne.n	8013970 <clmt_clust+0x42>
 801396c:	2300      	movs	r3, #0
 801396e:	e010      	b.n	8013992 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013970:	697a      	ldr	r2, [r7, #20]
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	429a      	cmp	r2, r3
 8013976:	d307      	bcc.n	8013988 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013978:	697a      	ldr	r2, [r7, #20]
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	617b      	str	r3, [r7, #20]
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	3304      	adds	r3, #4
 8013984:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013986:	e7e9      	b.n	801395c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013988:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	4413      	add	r3, r2
}
 8013992:	4618      	mov	r0, r3
 8013994:	371c      	adds	r7, #28
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr

0801399e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801399e:	b580      	push	{r7, lr}
 80139a0:	b086      	sub	sp, #24
 80139a2:	af00      	add	r7, sp, #0
 80139a4:	6078      	str	r0, [r7, #4]
 80139a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80139b4:	d204      	bcs.n	80139c0 <dir_sdi+0x22>
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	f003 031f 	and.w	r3, r3, #31
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80139c0:	2302      	movs	r3, #2
 80139c2:	e071      	b.n	8013aa8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	683a      	ldr	r2, [r7, #0]
 80139c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	689b      	ldr	r3, [r3, #8]
 80139ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d106      	bne.n	80139e4 <dir_sdi+0x46>
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	2b02      	cmp	r3, #2
 80139dc:	d902      	bls.n	80139e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d10c      	bne.n	8013a04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	095b      	lsrs	r3, r3, #5
 80139ee:	693a      	ldr	r2, [r7, #16]
 80139f0:	8912      	ldrh	r2, [r2, #8]
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d301      	bcc.n	80139fa <dir_sdi+0x5c>
 80139f6:	2302      	movs	r3, #2
 80139f8:	e056      	b.n	8013aa8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	61da      	str	r2, [r3, #28]
 8013a02:	e02d      	b.n	8013a60 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	895b      	ldrh	r3, [r3, #10]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	899b      	ldrh	r3, [r3, #12]
 8013a0e:	fb03 f302 	mul.w	r3, r3, r2
 8013a12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a14:	e019      	b.n	8013a4a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6979      	ldr	r1, [r7, #20]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7ff fca3 	bl	8013366 <get_fat>
 8013a20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a28:	d101      	bne.n	8013a2e <dir_sdi+0x90>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e03c      	b.n	8013aa8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d904      	bls.n	8013a3e <dir_sdi+0xa0>
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	69db      	ldr	r3, [r3, #28]
 8013a38:	697a      	ldr	r2, [r7, #20]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d301      	bcc.n	8013a42 <dir_sdi+0xa4>
 8013a3e:	2302      	movs	r3, #2
 8013a40:	e032      	b.n	8013aa8 <dir_sdi+0x10a>
			ofs -= csz;
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d2e1      	bcs.n	8013a16 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013a52:	6979      	ldr	r1, [r7, #20]
 8013a54:	6938      	ldr	r0, [r7, #16]
 8013a56:	f7ff fc67 	bl	8013328 <clust2sect>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	697a      	ldr	r2, [r7, #20]
 8013a64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	69db      	ldr	r3, [r3, #28]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <dir_sdi+0xd4>
 8013a6e:	2302      	movs	r3, #2
 8013a70:	e01a      	b.n	8013aa8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	69da      	ldr	r2, [r3, #28]
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a82:	441a      	add	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	899b      	ldrh	r3, [r3, #12]
 8013a92:	461a      	mov	r2, r3
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a9a:	fb02 f200 	mul.w	r2, r2, r0
 8013a9e:	1a9b      	subs	r3, r3, r2
 8013aa0:	18ca      	adds	r2, r1, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013aa6:	2300      	movs	r3, #0
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3718      	adds	r7, #24
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}

08013ab0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b086      	sub	sp, #24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	695b      	ldr	r3, [r3, #20]
 8013ac4:	3320      	adds	r3, #32
 8013ac6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	69db      	ldr	r3, [r3, #28]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d003      	beq.n	8013ad8 <dir_next+0x28>
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ad6:	d301      	bcc.n	8013adc <dir_next+0x2c>
 8013ad8:	2304      	movs	r3, #4
 8013ada:	e0bb      	b.n	8013c54 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	899b      	ldrh	r3, [r3, #12]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ae8:	fb02 f201 	mul.w	r2, r2, r1
 8013aec:	1a9b      	subs	r3, r3, r2
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f040 809d 	bne.w	8013c2e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	69db      	ldr	r3, [r3, #28]
 8013af8:	1c5a      	adds	r2, r3, #1
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10b      	bne.n	8013b1e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	095b      	lsrs	r3, r3, #5
 8013b0a:	68fa      	ldr	r2, [r7, #12]
 8013b0c:	8912      	ldrh	r2, [r2, #8]
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	f0c0 808d 	bcc.w	8013c2e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	61da      	str	r2, [r3, #28]
 8013b1a:	2304      	movs	r3, #4
 8013b1c:	e09a      	b.n	8013c54 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	899b      	ldrh	r3, [r3, #12]
 8013b22:	461a      	mov	r2, r3
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	8952      	ldrh	r2, [r2, #10]
 8013b2e:	3a01      	subs	r2, #1
 8013b30:	4013      	ands	r3, r2
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d17b      	bne.n	8013c2e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	699b      	ldr	r3, [r3, #24]
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	4610      	mov	r0, r2
 8013b40:	f7ff fc11 	bl	8013366 <get_fat>
 8013b44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d801      	bhi.n	8013b50 <dir_next+0xa0>
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	e081      	b.n	8013c54 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b56:	d101      	bne.n	8013b5c <dir_next+0xac>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e07b      	b.n	8013c54 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	69db      	ldr	r3, [r3, #28]
 8013b60:	697a      	ldr	r2, [r7, #20]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d359      	bcc.n	8013c1a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d104      	bne.n	8013b76 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	61da      	str	r2, [r3, #28]
 8013b72:	2304      	movs	r3, #4
 8013b74:	e06e      	b.n	8013c54 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	4610      	mov	r0, r2
 8013b80:	f7ff fe3d 	bl	80137fe <create_chain>
 8013b84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <dir_next+0xe0>
 8013b8c:	2307      	movs	r3, #7
 8013b8e:	e061      	b.n	8013c54 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d101      	bne.n	8013b9a <dir_next+0xea>
 8013b96:	2302      	movs	r3, #2
 8013b98:	e05c      	b.n	8013c54 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba0:	d101      	bne.n	8013ba6 <dir_next+0xf6>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e056      	b.n	8013c54 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff fadc 	bl	8013164 <sync_window>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <dir_next+0x106>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e04e      	b.n	8013c54 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	899b      	ldrh	r3, [r3, #12]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	f7ff f905 	bl	8012dd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bc8:	2300      	movs	r3, #0
 8013bca:	613b      	str	r3, [r7, #16]
 8013bcc:	6979      	ldr	r1, [r7, #20]
 8013bce:	68f8      	ldr	r0, [r7, #12]
 8013bd0:	f7ff fbaa 	bl	8013328 <clust2sect>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8013bda:	e012      	b.n	8013c02 <dir_next+0x152>
						fs->wflag = 1;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2201      	movs	r2, #1
 8013be0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	f7ff fabe 	bl	8013164 <sync_window>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d001      	beq.n	8013bf2 <dir_next+0x142>
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e030      	b.n	8013c54 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	613b      	str	r3, [r7, #16]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bfc:	1c5a      	adds	r2, r3, #1
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	635a      	str	r2, [r3, #52]	; 0x34
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	895b      	ldrh	r3, [r3, #10]
 8013c06:	461a      	mov	r2, r3
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d3e6      	bcc.n	8013bdc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	1ad2      	subs	r2, r2, r3
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	697a      	ldr	r2, [r7, #20]
 8013c1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013c20:	6979      	ldr	r1, [r7, #20]
 8013c22:	68f8      	ldr	r0, [r7, #12]
 8013c24:	f7ff fb80 	bl	8013328 <clust2sect>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	68ba      	ldr	r2, [r7, #8]
 8013c32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	899b      	ldrh	r3, [r3, #12]
 8013c3e:	461a      	mov	r2, r3
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c46:	fb02 f200 	mul.w	r2, r2, r0
 8013c4a:	1a9b      	subs	r3, r3, r2
 8013c4c:	18ca      	adds	r2, r1, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c52:	2300      	movs	r3, #0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3718      	adds	r7, #24
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b086      	sub	sp, #24
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7ff fe95 	bl	801399e <dir_sdi>
 8013c74:	4603      	mov	r3, r0
 8013c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d12b      	bne.n	8013cd6 <dir_alloc+0x7a>
		n = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	69db      	ldr	r3, [r3, #28]
 8013c86:	4619      	mov	r1, r3
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f7ff faaf 	bl	80131ec <move_window>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013c92:	7dfb      	ldrb	r3, [r7, #23]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d11d      	bne.n	8013cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6a1b      	ldr	r3, [r3, #32]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	2be5      	cmp	r3, #229	; 0xe5
 8013ca0:	d004      	beq.n	8013cac <dir_alloc+0x50>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a1b      	ldr	r3, [r3, #32]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d107      	bne.n	8013cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	613b      	str	r3, [r7, #16]
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d102      	bne.n	8013cc0 <dir_alloc+0x64>
 8013cba:	e00c      	b.n	8013cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013cc0:	2101      	movs	r1, #1
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7ff fef4 	bl	8013ab0 <dir_next>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013ccc:	7dfb      	ldrb	r3, [r7, #23]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d0d7      	beq.n	8013c82 <dir_alloc+0x26>
 8013cd2:	e000      	b.n	8013cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013cd6:	7dfb      	ldrb	r3, [r7, #23]
 8013cd8:	2b04      	cmp	r3, #4
 8013cda:	d101      	bne.n	8013ce0 <dir_alloc+0x84>
 8013cdc:	2307      	movs	r3, #7
 8013cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8013ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3718      	adds	r7, #24
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b084      	sub	sp, #16
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	331a      	adds	r3, #26
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fe ffc7 	bl	8012c8c <ld_word>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d109      	bne.n	8013d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	3314      	adds	r3, #20
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fe ffbc 	bl	8012c8c <ld_word>
 8013d14:	4603      	mov	r3, r0
 8013d16:	041b      	lsls	r3, r3, #16
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	331a      	adds	r3, #26
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	b292      	uxth	r2, r2
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7fe ffdf 	bl	8012d02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d109      	bne.n	8013d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	f103 0214 	add.w	r2, r3, #20
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	0c1b      	lsrs	r3, r3, #16
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fe ffd1 	bl	8012d02 <st_word>
	}
}
 8013d60:	bf00      	nop
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013d72:	2304      	movs	r3, #4
 8013d74:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013d7c:	e03c      	b.n	8013df8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	69db      	ldr	r3, [r3, #28]
 8013d82:	4619      	mov	r1, r3
 8013d84:	6938      	ldr	r0, [r7, #16]
 8013d86:	f7ff fa31 	bl	80131ec <move_window>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013d8e:	7dfb      	ldrb	r3, [r7, #23]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d136      	bne.n	8013e02 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6a1b      	ldr	r3, [r3, #32]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013d9c:	7bfb      	ldrb	r3, [r7, #15]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d102      	bne.n	8013da8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013da2:	2304      	movs	r3, #4
 8013da4:	75fb      	strb	r3, [r7, #23]
 8013da6:	e031      	b.n	8013e0c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6a1b      	ldr	r3, [r3, #32]
 8013dac:	330b      	adds	r3, #11
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013db4:	73bb      	strb	r3, [r7, #14]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	7bba      	ldrb	r2, [r7, #14]
 8013dba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013dbc:	7bfb      	ldrb	r3, [r7, #15]
 8013dbe:	2be5      	cmp	r3, #229	; 0xe5
 8013dc0:	d011      	beq.n	8013de6 <dir_read+0x7e>
 8013dc2:	7bfb      	ldrb	r3, [r7, #15]
 8013dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8013dc6:	d00e      	beq.n	8013de6 <dir_read+0x7e>
 8013dc8:	7bbb      	ldrb	r3, [r7, #14]
 8013dca:	2b0f      	cmp	r3, #15
 8013dcc:	d00b      	beq.n	8013de6 <dir_read+0x7e>
 8013dce:	7bbb      	ldrb	r3, [r7, #14]
 8013dd0:	f023 0320 	bic.w	r3, r3, #32
 8013dd4:	2b08      	cmp	r3, #8
 8013dd6:	bf0c      	ite	eq
 8013dd8:	2301      	moveq	r3, #1
 8013dda:	2300      	movne	r3, #0
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	461a      	mov	r2, r3
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d00f      	beq.n	8013e06 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013de6:	2100      	movs	r1, #0
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff fe61 	bl	8013ab0 <dir_next>
 8013dee:	4603      	mov	r3, r0
 8013df0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013df2:	7dfb      	ldrb	r3, [r7, #23]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d108      	bne.n	8013e0a <dir_read+0xa2>
	while (dp->sect) {
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	69db      	ldr	r3, [r3, #28]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1be      	bne.n	8013d7e <dir_read+0x16>
 8013e00:	e004      	b.n	8013e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8013e02:	bf00      	nop
 8013e04:	e002      	b.n	8013e0c <dir_read+0xa4>
				break;
 8013e06:	bf00      	nop
 8013e08:	e000      	b.n	8013e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8013e0a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013e0c:	7dfb      	ldrb	r3, [r7, #23]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d002      	beq.n	8013e18 <dir_read+0xb0>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	61da      	str	r2, [r3, #28]
	return res;
 8013e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3718      	adds	r7, #24
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b086      	sub	sp, #24
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013e30:	2100      	movs	r1, #0
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ff fdb3 	bl	801399e <dir_sdi>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013e3c:	7dfb      	ldrb	r3, [r7, #23]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d001      	beq.n	8013e46 <dir_find+0x24>
 8013e42:	7dfb      	ldrb	r3, [r7, #23]
 8013e44:	e03e      	b.n	8013ec4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	69db      	ldr	r3, [r3, #28]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	6938      	ldr	r0, [r7, #16]
 8013e4e:	f7ff f9cd 	bl	80131ec <move_window>
 8013e52:	4603      	mov	r3, r0
 8013e54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e56:	7dfb      	ldrb	r3, [r7, #23]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d12f      	bne.n	8013ebc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013e64:	7bfb      	ldrb	r3, [r7, #15]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d102      	bne.n	8013e70 <dir_find+0x4e>
 8013e6a:	2304      	movs	r3, #4
 8013e6c:	75fb      	strb	r3, [r7, #23]
 8013e6e:	e028      	b.n	8013ec2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	330b      	adds	r3, #11
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6a1b      	ldr	r3, [r3, #32]
 8013e86:	330b      	adds	r3, #11
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	f003 0308 	and.w	r3, r3, #8
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10a      	bne.n	8013ea8 <dir_find+0x86>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a18      	ldr	r0, [r3, #32]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	3324      	adds	r3, #36	; 0x24
 8013e9a:	220b      	movs	r2, #11
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	f7fe ffb2 	bl	8012e06 <mem_cmp>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00b      	beq.n	8013ec0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013ea8:	2100      	movs	r1, #0
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7ff fe00 	bl	8013ab0 <dir_next>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013eb4:	7dfb      	ldrb	r3, [r7, #23]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d0c5      	beq.n	8013e46 <dir_find+0x24>
 8013eba:	e002      	b.n	8013ec2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013ebc:	bf00      	nop
 8013ebe:	e000      	b.n	8013ec2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013ec0:	bf00      	nop

	return res;
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3718      	adds	r7, #24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013eda:	2101      	movs	r1, #1
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff febd 	bl	8013c5c <dir_alloc>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d11c      	bne.n	8013f26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	69db      	ldr	r3, [r3, #28]
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	68b8      	ldr	r0, [r7, #8]
 8013ef4:	f7ff f97a 	bl	80131ec <move_window>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013efc:	7bfb      	ldrb	r3, [r7, #15]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d111      	bne.n	8013f26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a1b      	ldr	r3, [r3, #32]
 8013f06:	2220      	movs	r2, #32
 8013f08:	2100      	movs	r1, #0
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7fe ff61 	bl	8012dd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6a18      	ldr	r0, [r3, #32]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	3324      	adds	r3, #36	; 0x24
 8013f18:	220b      	movs	r2, #11
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	f7fe ff38 	bl	8012d90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2201      	movs	r2, #1
 8013f24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	4619      	mov	r1, r3
 8013f44:	68f8      	ldr	r0, [r7, #12]
 8013f46:	f7ff f951 	bl	80131ec <move_window>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8013f4e:	7afb      	ldrb	r3, [r7, #11]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d106      	bne.n	8013f62 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6a1b      	ldr	r3, [r3, #32]
 8013f58:	22e5      	movs	r2, #229	; 0xe5
 8013f5a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2201      	movs	r2, #1
 8013f60:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8013f62:	7afb      	ldrb	r3, [r7, #11]
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b088      	sub	sp, #32
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	60fb      	str	r3, [r7, #12]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3324      	adds	r3, #36	; 0x24
 8013f80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013f82:	220b      	movs	r2, #11
 8013f84:	2120      	movs	r1, #32
 8013f86:	68b8      	ldr	r0, [r7, #8]
 8013f88:	f7fe ff23 	bl	8012dd2 <mem_set>
	si = i = 0; ni = 8;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	613b      	str	r3, [r7, #16]
 8013f90:	693b      	ldr	r3, [r7, #16]
 8013f92:	617b      	str	r3, [r7, #20]
 8013f94:	2308      	movs	r3, #8
 8013f96:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8013fa2:	d12f      	bne.n	8014004 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	1c5a      	adds	r2, r3, #1
 8013fa8:	617a      	str	r2, [r7, #20]
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	4413      	add	r3, r2
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8013fb2:	7ffb      	ldrb	r3, [r7, #31]
 8013fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8013fb6:	d10a      	bne.n	8013fce <create_name+0x62>
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	2b02      	cmp	r3, #2
 8013fbc:	d807      	bhi.n	8013fce <create_name+0x62>
			sfn[i++] = c;
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	1c5a      	adds	r2, r3, #1
 8013fc2:	613a      	str	r2, [r7, #16]
 8013fc4:	68ba      	ldr	r2, [r7, #8]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	7ffa      	ldrb	r2, [r7, #31]
 8013fca:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8013fcc:	e7ea      	b.n	8013fa4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8013fce:	7ffb      	ldrb	r3, [r7, #31]
 8013fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8013fd2:	d007      	beq.n	8013fe4 <create_name+0x78>
 8013fd4:	7ffb      	ldrb	r3, [r7, #31]
 8013fd6:	2b5c      	cmp	r3, #92	; 0x5c
 8013fd8:	d004      	beq.n	8013fe4 <create_name+0x78>
 8013fda:	7ffb      	ldrb	r3, [r7, #31]
 8013fdc:	2b20      	cmp	r3, #32
 8013fde:	d901      	bls.n	8013fe4 <create_name+0x78>
 8013fe0:	2306      	movs	r3, #6
 8013fe2:	e084      	b.n	80140ee <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	441a      	add	r2, r3
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8013fee:	7ffb      	ldrb	r3, [r7, #31]
 8013ff0:	2b20      	cmp	r3, #32
 8013ff2:	d801      	bhi.n	8013ff8 <create_name+0x8c>
 8013ff4:	2224      	movs	r2, #36	; 0x24
 8013ff6:	e000      	b.n	8013ffa <create_name+0x8e>
 8013ff8:	2220      	movs	r2, #32
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	330b      	adds	r3, #11
 8013ffe:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014000:	2300      	movs	r3, #0
 8014002:	e074      	b.n	80140ee <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	1c5a      	adds	r2, r3, #1
 8014008:	617a      	str	r2, [r7, #20]
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	4413      	add	r3, r2
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014012:	7ffb      	ldrb	r3, [r7, #31]
 8014014:	2b20      	cmp	r3, #32
 8014016:	d94e      	bls.n	80140b6 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014018:	7ffb      	ldrb	r3, [r7, #31]
 801401a:	2b2f      	cmp	r3, #47	; 0x2f
 801401c:	d006      	beq.n	801402c <create_name+0xc0>
 801401e:	7ffb      	ldrb	r3, [r7, #31]
 8014020:	2b5c      	cmp	r3, #92	; 0x5c
 8014022:	d110      	bne.n	8014046 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014024:	e002      	b.n	801402c <create_name+0xc0>
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	3301      	adds	r3, #1
 801402a:	617b      	str	r3, [r7, #20]
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	4413      	add	r3, r2
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2b2f      	cmp	r3, #47	; 0x2f
 8014036:	d0f6      	beq.n	8014026 <create_name+0xba>
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	4413      	add	r3, r2
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	2b5c      	cmp	r3, #92	; 0x5c
 8014042:	d0f0      	beq.n	8014026 <create_name+0xba>
			break;
 8014044:	e038      	b.n	80140b8 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014046:	7ffb      	ldrb	r3, [r7, #31]
 8014048:	2b2e      	cmp	r3, #46	; 0x2e
 801404a:	d003      	beq.n	8014054 <create_name+0xe8>
 801404c:	693a      	ldr	r2, [r7, #16]
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	429a      	cmp	r2, r3
 8014052:	d30c      	bcc.n	801406e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	2b0b      	cmp	r3, #11
 8014058:	d002      	beq.n	8014060 <create_name+0xf4>
 801405a:	7ffb      	ldrb	r3, [r7, #31]
 801405c:	2b2e      	cmp	r3, #46	; 0x2e
 801405e:	d001      	beq.n	8014064 <create_name+0xf8>
 8014060:	2306      	movs	r3, #6
 8014062:	e044      	b.n	80140ee <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8014064:	2308      	movs	r3, #8
 8014066:	613b      	str	r3, [r7, #16]
 8014068:	230b      	movs	r3, #11
 801406a:	61bb      	str	r3, [r7, #24]
			continue;
 801406c:	e022      	b.n	80140b4 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801406e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014072:	2b00      	cmp	r3, #0
 8014074:	da04      	bge.n	8014080 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014076:	7ffb      	ldrb	r3, [r7, #31]
 8014078:	3b80      	subs	r3, #128	; 0x80
 801407a:	4a1f      	ldr	r2, [pc, #124]	; (80140f8 <create_name+0x18c>)
 801407c:	5cd3      	ldrb	r3, [r2, r3]
 801407e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014080:	7ffb      	ldrb	r3, [r7, #31]
 8014082:	4619      	mov	r1, r3
 8014084:	481d      	ldr	r0, [pc, #116]	; (80140fc <create_name+0x190>)
 8014086:	f7fe fee5 	bl	8012e54 <chk_chr>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d001      	beq.n	8014094 <create_name+0x128>
 8014090:	2306      	movs	r3, #6
 8014092:	e02c      	b.n	80140ee <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014094:	7ffb      	ldrb	r3, [r7, #31]
 8014096:	2b60      	cmp	r3, #96	; 0x60
 8014098:	d905      	bls.n	80140a6 <create_name+0x13a>
 801409a:	7ffb      	ldrb	r3, [r7, #31]
 801409c:	2b7a      	cmp	r3, #122	; 0x7a
 801409e:	d802      	bhi.n	80140a6 <create_name+0x13a>
 80140a0:	7ffb      	ldrb	r3, [r7, #31]
 80140a2:	3b20      	subs	r3, #32
 80140a4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	1c5a      	adds	r2, r3, #1
 80140aa:	613a      	str	r2, [r7, #16]
 80140ac:	68ba      	ldr	r2, [r7, #8]
 80140ae:	4413      	add	r3, r2
 80140b0:	7ffa      	ldrb	r2, [r7, #31]
 80140b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80140b4:	e7a6      	b.n	8014004 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80140b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80140b8:	68fa      	ldr	r2, [r7, #12]
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	441a      	add	r2, r3
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d101      	bne.n	80140cc <create_name+0x160>
 80140c8:	2306      	movs	r3, #6
 80140ca:	e010      	b.n	80140ee <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	2be5      	cmp	r3, #229	; 0xe5
 80140d2:	d102      	bne.n	80140da <create_name+0x16e>
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	2205      	movs	r2, #5
 80140d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80140da:	7ffb      	ldrb	r3, [r7, #31]
 80140dc:	2b20      	cmp	r3, #32
 80140de:	d801      	bhi.n	80140e4 <create_name+0x178>
 80140e0:	2204      	movs	r2, #4
 80140e2:	e000      	b.n	80140e6 <create_name+0x17a>
 80140e4:	2200      	movs	r2, #0
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	330b      	adds	r3, #11
 80140ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80140ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3720      	adds	r7, #32
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	0801a888 	.word	0x0801a888
 80140fc:	0801a838 	.word	0x0801a838

08014100 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	2b2f      	cmp	r3, #47	; 0x2f
 801411a:	d00b      	beq.n	8014134 <follow_path+0x34>
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	2b5c      	cmp	r3, #92	; 0x5c
 8014122:	d007      	beq.n	8014134 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	699a      	ldr	r2, [r3, #24]
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	609a      	str	r2, [r3, #8]
 801412c:	e00d      	b.n	801414a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	3301      	adds	r3, #1
 8014132:	603b      	str	r3, [r7, #0]
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b2f      	cmp	r3, #47	; 0x2f
 801413a:	d0f8      	beq.n	801412e <follow_path+0x2e>
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	2b5c      	cmp	r3, #92	; 0x5c
 8014142:	d0f4      	beq.n	801412e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	2200      	movs	r2, #0
 8014148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b1f      	cmp	r3, #31
 8014150:	d80a      	bhi.n	8014168 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2280      	movs	r2, #128	; 0x80
 8014156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801415a:	2100      	movs	r1, #0
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7ff fc1e 	bl	801399e <dir_sdi>
 8014162:	4603      	mov	r3, r0
 8014164:	75fb      	strb	r3, [r7, #23]
 8014166:	e05b      	b.n	8014220 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014168:	463b      	mov	r3, r7
 801416a:	4619      	mov	r1, r3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f7ff fefd 	bl	8013f6c <create_name>
 8014172:	4603      	mov	r3, r0
 8014174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014176:	7dfb      	ldrb	r3, [r7, #23]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d14c      	bne.n	8014216 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7ff fe50 	bl	8013e22 <dir_find>
 8014182:	4603      	mov	r3, r0
 8014184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801418c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801418e:	7dfb      	ldrb	r3, [r7, #23]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d01b      	beq.n	80141cc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	2b04      	cmp	r3, #4
 8014198:	d13f      	bne.n	801421a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801419a:	7afb      	ldrb	r3, [r7, #11]
 801419c:	f003 0320 	and.w	r3, r3, #32
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00b      	beq.n	80141bc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80141a4:	7afb      	ldrb	r3, [r7, #11]
 80141a6:	f003 0304 	and.w	r3, r3, #4
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d031      	beq.n	8014212 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2280      	movs	r2, #128	; 0x80
 80141b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80141b6:	2300      	movs	r3, #0
 80141b8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80141ba:	e02e      	b.n	801421a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80141bc:	7afb      	ldrb	r3, [r7, #11]
 80141be:	f003 0304 	and.w	r3, r3, #4
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d129      	bne.n	801421a <follow_path+0x11a>
 80141c6:	2305      	movs	r3, #5
 80141c8:	75fb      	strb	r3, [r7, #23]
				break;
 80141ca:	e026      	b.n	801421a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80141cc:	7afb      	ldrb	r3, [r7, #11]
 80141ce:	f003 0304 	and.w	r3, r3, #4
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d123      	bne.n	801421e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	799b      	ldrb	r3, [r3, #6]
 80141da:	f003 0310 	and.w	r3, r3, #16
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d102      	bne.n	80141e8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80141e2:	2305      	movs	r3, #5
 80141e4:	75fb      	strb	r3, [r7, #23]
 80141e6:	e01b      	b.n	8014220 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	695b      	ldr	r3, [r3, #20]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	8992      	ldrh	r2, [r2, #12]
 80141f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80141fa:	fb02 f200 	mul.w	r2, r2, r0
 80141fe:	1a9b      	subs	r3, r3, r2
 8014200:	440b      	add	r3, r1
 8014202:	4619      	mov	r1, r3
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff fd70 	bl	8013cea <ld_clust>
 801420a:	4602      	mov	r2, r0
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	609a      	str	r2, [r3, #8]
 8014210:	e7aa      	b.n	8014168 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014212:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014214:	e7a8      	b.n	8014168 <follow_path+0x68>
			if (res != FR_OK) break;
 8014216:	bf00      	nop
 8014218:	e002      	b.n	8014220 <follow_path+0x120>
				break;
 801421a:	bf00      	nop
 801421c:	e000      	b.n	8014220 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801421e:	bf00      	nop
			}
		}
	}

	return res;
 8014220:	7dfb      	ldrb	r3, [r7, #23]
}
 8014222:	4618      	mov	r0, r3
 8014224:	3718      	adds	r7, #24
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}

0801422a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801422a:	b480      	push	{r7}
 801422c:	b087      	sub	sp, #28
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014232:	f04f 33ff 	mov.w	r3, #4294967295
 8014236:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d031      	beq.n	80142a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	617b      	str	r3, [r7, #20]
 8014246:	e002      	b.n	801424e <get_ldnumber+0x24>
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	3301      	adds	r3, #1
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b20      	cmp	r3, #32
 8014254:	d903      	bls.n	801425e <get_ldnumber+0x34>
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	2b3a      	cmp	r3, #58	; 0x3a
 801425c:	d1f4      	bne.n	8014248 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	2b3a      	cmp	r3, #58	; 0x3a
 8014264:	d11c      	bne.n	80142a0 <get_ldnumber+0x76>
			tp = *path;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	60fa      	str	r2, [r7, #12]
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	3b30      	subs	r3, #48	; 0x30
 8014276:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	2b09      	cmp	r3, #9
 801427c:	d80e      	bhi.n	801429c <get_ldnumber+0x72>
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	429a      	cmp	r2, r3
 8014284:	d10a      	bne.n	801429c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d107      	bne.n	801429c <get_ldnumber+0x72>
					vol = (int)i;
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	3301      	adds	r3, #1
 8014294:	617b      	str	r3, [r7, #20]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	697a      	ldr	r2, [r7, #20]
 801429a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	e002      	b.n	80142a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80142a0:	2300      	movs	r3, #0
 80142a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80142a4:	693b      	ldr	r3, [r7, #16]
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	371c      	adds	r7, #28
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr
	...

080142b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	70da      	strb	r2, [r3, #3]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f04f 32ff 	mov.w	r2, #4294967295
 80142ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80142cc:	6839      	ldr	r1, [r7, #0]
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7fe ff8c 	bl	80131ec <move_window>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d001      	beq.n	80142de <check_fs+0x2a>
 80142da:	2304      	movs	r3, #4
 80142dc:	e038      	b.n	8014350 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	3338      	adds	r3, #56	; 0x38
 80142e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7fe fcd0 	bl	8012c8c <ld_word>
 80142ec:	4603      	mov	r3, r0
 80142ee:	461a      	mov	r2, r3
 80142f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d001      	beq.n	80142fc <check_fs+0x48>
 80142f8:	2303      	movs	r3, #3
 80142fa:	e029      	b.n	8014350 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014302:	2be9      	cmp	r3, #233	; 0xe9
 8014304:	d009      	beq.n	801431a <check_fs+0x66>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801430c:	2beb      	cmp	r3, #235	; 0xeb
 801430e:	d11e      	bne.n	801434e <check_fs+0x9a>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014316:	2b90      	cmp	r3, #144	; 0x90
 8014318:	d119      	bne.n	801434e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	3338      	adds	r3, #56	; 0x38
 801431e:	3336      	adds	r3, #54	; 0x36
 8014320:	4618      	mov	r0, r3
 8014322:	f7fe fccb 	bl	8012cbc <ld_dword>
 8014326:	4603      	mov	r3, r0
 8014328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801432c:	4a0a      	ldr	r2, [pc, #40]	; (8014358 <check_fs+0xa4>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d101      	bne.n	8014336 <check_fs+0x82>
 8014332:	2300      	movs	r3, #0
 8014334:	e00c      	b.n	8014350 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	3338      	adds	r3, #56	; 0x38
 801433a:	3352      	adds	r3, #82	; 0x52
 801433c:	4618      	mov	r0, r3
 801433e:	f7fe fcbd 	bl	8012cbc <ld_dword>
 8014342:	4602      	mov	r2, r0
 8014344:	4b05      	ldr	r3, [pc, #20]	; (801435c <check_fs+0xa8>)
 8014346:	429a      	cmp	r2, r3
 8014348:	d101      	bne.n	801434e <check_fs+0x9a>
 801434a:	2300      	movs	r3, #0
 801434c:	e000      	b.n	8014350 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801434e:	2302      	movs	r3, #2
}
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	00544146 	.word	0x00544146
 801435c:	33544146 	.word	0x33544146

08014360 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b096      	sub	sp, #88	; 0x58
 8014364:	af00      	add	r7, sp, #0
 8014366:	60f8      	str	r0, [r7, #12]
 8014368:	60b9      	str	r1, [r7, #8]
 801436a:	4613      	mov	r3, r2
 801436c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	2200      	movs	r2, #0
 8014372:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f7ff ff58 	bl	801422a <get_ldnumber>
 801437a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801437e:	2b00      	cmp	r3, #0
 8014380:	da01      	bge.n	8014386 <find_volume+0x26>
 8014382:	230b      	movs	r3, #11
 8014384:	e268      	b.n	8014858 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014386:	4ab0      	ldr	r2, [pc, #704]	; (8014648 <find_volume+0x2e8>)
 8014388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801438e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <find_volume+0x3a>
 8014396:	230c      	movs	r3, #12
 8014398:	e25e      	b.n	8014858 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801439e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80143a0:	79fb      	ldrb	r3, [r7, #7]
 80143a2:	f023 0301 	bic.w	r3, r3, #1
 80143a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d01a      	beq.n	80143e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80143b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b2:	785b      	ldrb	r3, [r3, #1]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fe fbcb 	bl	8012b50 <disk_status>
 80143ba:	4603      	mov	r3, r0
 80143bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80143c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143c4:	f003 0301 	and.w	r3, r3, #1
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d10c      	bne.n	80143e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80143cc:	79fb      	ldrb	r3, [r7, #7]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d007      	beq.n	80143e2 <find_volume+0x82>
 80143d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143d6:	f003 0304 	and.w	r3, r3, #4
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d001      	beq.n	80143e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80143de:	230a      	movs	r3, #10
 80143e0:	e23a      	b.n	8014858 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80143e2:	2300      	movs	r3, #0
 80143e4:	e238      	b.n	8014858 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80143e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e8:	2200      	movs	r2, #0
 80143ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80143ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ee:	b2da      	uxtb	r2, r3
 80143f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80143f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f6:	785b      	ldrb	r3, [r3, #1]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fe fbc3 	bl	8012b84 <disk_initialize>
 80143fe:	4603      	mov	r3, r0
 8014400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014408:	f003 0301 	and.w	r3, r3, #1
 801440c:	2b00      	cmp	r3, #0
 801440e:	d001      	beq.n	8014414 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014410:	2303      	movs	r3, #3
 8014412:	e221      	b.n	8014858 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014414:	79fb      	ldrb	r3, [r7, #7]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d007      	beq.n	801442a <find_volume+0xca>
 801441a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801441e:	f003 0304 	and.w	r3, r3, #4
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014426:	230a      	movs	r3, #10
 8014428:	e216      	b.n	8014858 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	7858      	ldrb	r0, [r3, #1]
 801442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014430:	330c      	adds	r3, #12
 8014432:	461a      	mov	r2, r3
 8014434:	2102      	movs	r1, #2
 8014436:	f7fe fc0b 	bl	8012c50 <disk_ioctl>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d001      	beq.n	8014444 <find_volume+0xe4>
 8014440:	2301      	movs	r3, #1
 8014442:	e209      	b.n	8014858 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	899b      	ldrh	r3, [r3, #12]
 8014448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801444c:	d80d      	bhi.n	801446a <find_volume+0x10a>
 801444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014450:	899b      	ldrh	r3, [r3, #12]
 8014452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014456:	d308      	bcc.n	801446a <find_volume+0x10a>
 8014458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801445a:	899b      	ldrh	r3, [r3, #12]
 801445c:	461a      	mov	r2, r3
 801445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014460:	899b      	ldrh	r3, [r3, #12]
 8014462:	3b01      	subs	r3, #1
 8014464:	4013      	ands	r3, r2
 8014466:	2b00      	cmp	r3, #0
 8014468:	d001      	beq.n	801446e <find_volume+0x10e>
 801446a:	2301      	movs	r3, #1
 801446c:	e1f4      	b.n	8014858 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801446e:	2300      	movs	r3, #0
 8014470:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014476:	f7ff ff1d 	bl	80142b4 <check_fs>
 801447a:	4603      	mov	r3, r0
 801447c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014484:	2b02      	cmp	r3, #2
 8014486:	d14b      	bne.n	8014520 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014488:	2300      	movs	r3, #0
 801448a:	643b      	str	r3, [r7, #64]	; 0x40
 801448c:	e01f      	b.n	80144ce <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014490:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014496:	011b      	lsls	r3, r3, #4
 8014498:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801449c:	4413      	add	r3, r2
 801449e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80144a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a2:	3304      	adds	r3, #4
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d006      	beq.n	80144b8 <find_volume+0x158>
 80144aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ac:	3308      	adds	r3, #8
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fe fc04 	bl	8012cbc <ld_dword>
 80144b4:	4602      	mov	r2, r0
 80144b6:	e000      	b.n	80144ba <find_volume+0x15a>
 80144b8:	2200      	movs	r2, #0
 80144ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80144c2:	440b      	add	r3, r1
 80144c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80144c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144ca:	3301      	adds	r3, #1
 80144cc:	643b      	str	r3, [r7, #64]	; 0x40
 80144ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144d0:	2b03      	cmp	r3, #3
 80144d2:	d9dc      	bls.n	801448e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80144d4:	2300      	movs	r3, #0
 80144d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80144d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d002      	beq.n	80144e4 <find_volume+0x184>
 80144de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144e0:	3b01      	subs	r3, #1
 80144e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80144e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80144ec:	4413      	add	r3, r2
 80144ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80144f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80144f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d005      	beq.n	8014506 <find_volume+0x1a6>
 80144fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80144fe:	f7ff fed9 	bl	80142b4 <check_fs>
 8014502:	4603      	mov	r3, r0
 8014504:	e000      	b.n	8014508 <find_volume+0x1a8>
 8014506:	2303      	movs	r3, #3
 8014508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801450c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014510:	2b01      	cmp	r3, #1
 8014512:	d905      	bls.n	8014520 <find_volume+0x1c0>
 8014514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014516:	3301      	adds	r3, #1
 8014518:	643b      	str	r3, [r7, #64]	; 0x40
 801451a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801451c:	2b03      	cmp	r3, #3
 801451e:	d9e1      	bls.n	80144e4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014524:	2b04      	cmp	r3, #4
 8014526:	d101      	bne.n	801452c <find_volume+0x1cc>
 8014528:	2301      	movs	r3, #1
 801452a:	e195      	b.n	8014858 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801452c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014530:	2b01      	cmp	r3, #1
 8014532:	d901      	bls.n	8014538 <find_volume+0x1d8>
 8014534:	230d      	movs	r3, #13
 8014536:	e18f      	b.n	8014858 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	3338      	adds	r3, #56	; 0x38
 801453c:	330b      	adds	r3, #11
 801453e:	4618      	mov	r0, r3
 8014540:	f7fe fba4 	bl	8012c8c <ld_word>
 8014544:	4603      	mov	r3, r0
 8014546:	461a      	mov	r2, r3
 8014548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454a:	899b      	ldrh	r3, [r3, #12]
 801454c:	429a      	cmp	r2, r3
 801454e:	d001      	beq.n	8014554 <find_volume+0x1f4>
 8014550:	230d      	movs	r3, #13
 8014552:	e181      	b.n	8014858 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014556:	3338      	adds	r3, #56	; 0x38
 8014558:	3316      	adds	r3, #22
 801455a:	4618      	mov	r0, r3
 801455c:	f7fe fb96 	bl	8012c8c <ld_word>
 8014560:	4603      	mov	r3, r0
 8014562:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014566:	2b00      	cmp	r3, #0
 8014568:	d106      	bne.n	8014578 <find_volume+0x218>
 801456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801456c:	3338      	adds	r3, #56	; 0x38
 801456e:	3324      	adds	r3, #36	; 0x24
 8014570:	4618      	mov	r0, r3
 8014572:	f7fe fba3 	bl	8012cbc <ld_dword>
 8014576:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801457c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014580:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014586:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801458a:	789b      	ldrb	r3, [r3, #2]
 801458c:	2b01      	cmp	r3, #1
 801458e:	d005      	beq.n	801459c <find_volume+0x23c>
 8014590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014592:	789b      	ldrb	r3, [r3, #2]
 8014594:	2b02      	cmp	r3, #2
 8014596:	d001      	beq.n	801459c <find_volume+0x23c>
 8014598:	230d      	movs	r3, #13
 801459a:	e15d      	b.n	8014858 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459e:	789b      	ldrb	r3, [r3, #2]
 80145a0:	461a      	mov	r2, r3
 80145a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145a4:	fb02 f303 	mul.w	r3, r2, r3
 80145a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80145aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80145b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b8:	895b      	ldrh	r3, [r3, #10]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d008      	beq.n	80145d0 <find_volume+0x270>
 80145be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c0:	895b      	ldrh	r3, [r3, #10]
 80145c2:	461a      	mov	r2, r3
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	895b      	ldrh	r3, [r3, #10]
 80145c8:	3b01      	subs	r3, #1
 80145ca:	4013      	ands	r3, r2
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d001      	beq.n	80145d4 <find_volume+0x274>
 80145d0:	230d      	movs	r3, #13
 80145d2:	e141      	b.n	8014858 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80145d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d6:	3338      	adds	r3, #56	; 0x38
 80145d8:	3311      	adds	r3, #17
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fe fb56 	bl	8012c8c <ld_word>
 80145e0:	4603      	mov	r3, r0
 80145e2:	461a      	mov	r2, r3
 80145e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80145e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ea:	891b      	ldrh	r3, [r3, #8]
 80145ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145ee:	8992      	ldrh	r2, [r2, #12]
 80145f0:	0952      	lsrs	r2, r2, #5
 80145f2:	b292      	uxth	r2, r2
 80145f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80145f8:	fb02 f201 	mul.w	r2, r2, r1
 80145fc:	1a9b      	subs	r3, r3, r2
 80145fe:	b29b      	uxth	r3, r3
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <find_volume+0x2a8>
 8014604:	230d      	movs	r3, #13
 8014606:	e127      	b.n	8014858 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801460a:	3338      	adds	r3, #56	; 0x38
 801460c:	3313      	adds	r3, #19
 801460e:	4618      	mov	r0, r3
 8014610:	f7fe fb3c 	bl	8012c8c <ld_word>
 8014614:	4603      	mov	r3, r0
 8014616:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <find_volume+0x2cc>
 801461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014620:	3338      	adds	r3, #56	; 0x38
 8014622:	3320      	adds	r3, #32
 8014624:	4618      	mov	r0, r3
 8014626:	f7fe fb49 	bl	8012cbc <ld_dword>
 801462a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462e:	3338      	adds	r3, #56	; 0x38
 8014630:	330e      	adds	r3, #14
 8014632:	4618      	mov	r0, r3
 8014634:	f7fe fb2a 	bl	8012c8c <ld_word>
 8014638:	4603      	mov	r3, r0
 801463a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801463c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801463e:	2b00      	cmp	r3, #0
 8014640:	d104      	bne.n	801464c <find_volume+0x2ec>
 8014642:	230d      	movs	r3, #13
 8014644:	e108      	b.n	8014858 <find_volume+0x4f8>
 8014646:	bf00      	nop
 8014648:	20047664 	.word	0x20047664

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801464c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014650:	4413      	add	r3, r2
 8014652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014654:	8911      	ldrh	r1, [r2, #8]
 8014656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014658:	8992      	ldrh	r2, [r2, #12]
 801465a:	0952      	lsrs	r2, r2, #5
 801465c:	b292      	uxth	r2, r2
 801465e:	fbb1 f2f2 	udiv	r2, r1, r2
 8014662:	b292      	uxth	r2, r2
 8014664:	4413      	add	r3, r2
 8014666:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801466c:	429a      	cmp	r2, r3
 801466e:	d201      	bcs.n	8014674 <find_volume+0x314>
 8014670:	230d      	movs	r3, #13
 8014672:	e0f1      	b.n	8014858 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801467c:	8952      	ldrh	r2, [r2, #10]
 801467e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014682:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	2b00      	cmp	r3, #0
 8014688:	d101      	bne.n	801468e <find_volume+0x32e>
 801468a:	230d      	movs	r3, #13
 801468c:	e0e4      	b.n	8014858 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801468e:	2303      	movs	r3, #3
 8014690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014696:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801469a:	4293      	cmp	r3, r2
 801469c:	d802      	bhi.n	80146a4 <find_volume+0x344>
 801469e:	2302      	movs	r3, #2
 80146a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d802      	bhi.n	80146b4 <find_volume+0x354>
 80146ae:	2301      	movs	r3, #1
 80146b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	1c9a      	adds	r2, r3, #2
 80146b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ba:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80146bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146c0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80146c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80146c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146c6:	441a      	add	r2, r3
 80146c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ca:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80146cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d0:	441a      	add	r2, r3
 80146d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80146d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146da:	2b03      	cmp	r3, #3
 80146dc:	d11e      	bne.n	801471c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80146de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e0:	3338      	adds	r3, #56	; 0x38
 80146e2:	332a      	adds	r3, #42	; 0x2a
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7fe fad1 	bl	8012c8c <ld_word>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <find_volume+0x394>
 80146f0:	230d      	movs	r3, #13
 80146f2:	e0b1      	b.n	8014858 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80146f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f6:	891b      	ldrh	r3, [r3, #8]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d001      	beq.n	8014700 <find_volume+0x3a0>
 80146fc:	230d      	movs	r3, #13
 80146fe:	e0ab      	b.n	8014858 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014702:	3338      	adds	r3, #56	; 0x38
 8014704:	332c      	adds	r3, #44	; 0x2c
 8014706:	4618      	mov	r0, r3
 8014708:	f7fe fad8 	bl	8012cbc <ld_dword>
 801470c:	4602      	mov	r2, r0
 801470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014710:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014714:	69db      	ldr	r3, [r3, #28]
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	647b      	str	r3, [r7, #68]	; 0x44
 801471a:	e01f      	b.n	801475c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471e:	891b      	ldrh	r3, [r3, #8]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d101      	bne.n	8014728 <find_volume+0x3c8>
 8014724:	230d      	movs	r3, #13
 8014726:	e097      	b.n	8014858 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801472e:	441a      	add	r2, r3
 8014730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014732:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014738:	2b02      	cmp	r3, #2
 801473a:	d103      	bne.n	8014744 <find_volume+0x3e4>
 801473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473e:	69db      	ldr	r3, [r3, #28]
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	e00a      	b.n	801475a <find_volume+0x3fa>
 8014744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014746:	69da      	ldr	r2, [r3, #28]
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	085a      	lsrs	r2, r3, #1
 8014750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014752:	69db      	ldr	r3, [r3, #28]
 8014754:	f003 0301 	and.w	r3, r3, #1
 8014758:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801475a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475e:	6a1a      	ldr	r2, [r3, #32]
 8014760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014762:	899b      	ldrh	r3, [r3, #12]
 8014764:	4619      	mov	r1, r3
 8014766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014768:	440b      	add	r3, r1
 801476a:	3b01      	subs	r3, #1
 801476c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801476e:	8989      	ldrh	r1, [r1, #12]
 8014770:	fbb3 f3f1 	udiv	r3, r3, r1
 8014774:	429a      	cmp	r2, r3
 8014776:	d201      	bcs.n	801477c <find_volume+0x41c>
 8014778:	230d      	movs	r3, #13
 801477a:	e06d      	b.n	8014858 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801477e:	f04f 32ff 	mov.w	r2, #4294967295
 8014782:	615a      	str	r2, [r3, #20]
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	695a      	ldr	r2, [r3, #20]
 8014788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478e:	2280      	movs	r2, #128	; 0x80
 8014790:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014796:	2b03      	cmp	r3, #3
 8014798:	d149      	bne.n	801482e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479c:	3338      	adds	r3, #56	; 0x38
 801479e:	3330      	adds	r3, #48	; 0x30
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7fe fa73 	bl	8012c8c <ld_word>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d140      	bne.n	801482e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80147ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ae:	3301      	adds	r3, #1
 80147b0:	4619      	mov	r1, r3
 80147b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147b4:	f7fe fd1a 	bl	80131ec <move_window>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d137      	bne.n	801482e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80147be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c0:	2200      	movs	r2, #0
 80147c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80147c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c6:	3338      	adds	r3, #56	; 0x38
 80147c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fe fa5d 	bl	8012c8c <ld_word>
 80147d2:	4603      	mov	r3, r0
 80147d4:	461a      	mov	r2, r3
 80147d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80147da:	429a      	cmp	r2, r3
 80147dc:	d127      	bne.n	801482e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80147de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e0:	3338      	adds	r3, #56	; 0x38
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fe fa6a 	bl	8012cbc <ld_dword>
 80147e8:	4602      	mov	r2, r0
 80147ea:	4b1d      	ldr	r3, [pc, #116]	; (8014860 <find_volume+0x500>)
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d11e      	bne.n	801482e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80147f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f2:	3338      	adds	r3, #56	; 0x38
 80147f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fe fa5f 	bl	8012cbc <ld_dword>
 80147fe:	4602      	mov	r2, r0
 8014800:	4b18      	ldr	r3, [pc, #96]	; (8014864 <find_volume+0x504>)
 8014802:	429a      	cmp	r2, r3
 8014804:	d113      	bne.n	801482e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014808:	3338      	adds	r3, #56	; 0x38
 801480a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe fa54 	bl	8012cbc <ld_dword>
 8014814:	4602      	mov	r2, r0
 8014816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014818:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481c:	3338      	adds	r3, #56	; 0x38
 801481e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014822:	4618      	mov	r0, r3
 8014824:	f7fe fa4a 	bl	8012cbc <ld_dword>
 8014828:	4602      	mov	r2, r0
 801482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014830:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014834:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014836:	4b0c      	ldr	r3, [pc, #48]	; (8014868 <find_volume+0x508>)
 8014838:	881b      	ldrh	r3, [r3, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	b29a      	uxth	r2, r3
 801483e:	4b0a      	ldr	r3, [pc, #40]	; (8014868 <find_volume+0x508>)
 8014840:	801a      	strh	r2, [r3, #0]
 8014842:	4b09      	ldr	r3, [pc, #36]	; (8014868 <find_volume+0x508>)
 8014844:	881a      	ldrh	r2, [r3, #0]
 8014846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014848:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484c:	2200      	movs	r2, #0
 801484e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014852:	f7fe fc63 	bl	801311c <clear_lock>
#endif
	return FR_OK;
 8014856:	2300      	movs	r3, #0
}
 8014858:	4618      	mov	r0, r3
 801485a:	3758      	adds	r7, #88	; 0x58
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	41615252 	.word	0x41615252
 8014864:	61417272 	.word	0x61417272
 8014868:	20047668 	.word	0x20047668

0801486c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014876:	2309      	movs	r3, #9
 8014878:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d01c      	beq.n	80148ba <validate+0x4e>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d018      	beq.n	80148ba <validate+0x4e>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d013      	beq.n	80148ba <validate+0x4e>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	889a      	ldrh	r2, [r3, #4]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	88db      	ldrh	r3, [r3, #6]
 801489c:	429a      	cmp	r2, r3
 801489e:	d10c      	bne.n	80148ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	785b      	ldrb	r3, [r3, #1]
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7fe f952 	bl	8012b50 <disk_status>
 80148ac:	4603      	mov	r3, r0
 80148ae:	f003 0301 	and.w	r3, r3, #1
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d101      	bne.n	80148ba <validate+0x4e>
			res = FR_OK;
 80148b6:	2300      	movs	r3, #0
 80148b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80148ba:	7bfb      	ldrb	r3, [r7, #15]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d102      	bne.n	80148c6 <validate+0x5a>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	e000      	b.n	80148c8 <validate+0x5c>
 80148c6:	2300      	movs	r3, #0
 80148c8:	683a      	ldr	r2, [r7, #0]
 80148ca:	6013      	str	r3, [r2, #0]
	return res;
 80148cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
	...

080148d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	4613      	mov	r3, r2
 80148e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80148ea:	f107 0310 	add.w	r3, r7, #16
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7ff fc9b 	bl	801422a <get_ldnumber>
 80148f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80148f6:	69fb      	ldr	r3, [r7, #28]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	da01      	bge.n	8014900 <f_mount+0x28>
 80148fc:	230b      	movs	r3, #11
 80148fe:	e02b      	b.n	8014958 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014900:	4a17      	ldr	r2, [pc, #92]	; (8014960 <f_mount+0x88>)
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014908:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d005      	beq.n	801491c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014910:	69b8      	ldr	r0, [r7, #24]
 8014912:	f7fe fc03 	bl	801311c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	2200      	movs	r2, #0
 801491a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d002      	beq.n	8014928 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014928:	68fa      	ldr	r2, [r7, #12]
 801492a:	490d      	ldr	r1, [pc, #52]	; (8014960 <f_mount+0x88>)
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <f_mount+0x66>
 8014938:	79fb      	ldrb	r3, [r7, #7]
 801493a:	2b01      	cmp	r3, #1
 801493c:	d001      	beq.n	8014942 <f_mount+0x6a>
 801493e:	2300      	movs	r3, #0
 8014940:	e00a      	b.n	8014958 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014942:	f107 010c 	add.w	r1, r7, #12
 8014946:	f107 0308 	add.w	r3, r7, #8
 801494a:	2200      	movs	r2, #0
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff fd07 	bl	8014360 <find_volume>
 8014952:	4603      	mov	r3, r0
 8014954:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014956:	7dfb      	ldrb	r3, [r7, #23]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3720      	adds	r7, #32
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	20047664 	.word	0x20047664

08014964 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b098      	sub	sp, #96	; 0x60
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	4613      	mov	r3, r2
 8014970:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d101      	bne.n	801497c <f_open+0x18>
 8014978:	2309      	movs	r3, #9
 801497a:	e1ba      	b.n	8014cf2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801497c:	79fb      	ldrb	r3, [r7, #7]
 801497e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014982:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014984:	79fa      	ldrb	r2, [r7, #7]
 8014986:	f107 0110 	add.w	r1, r7, #16
 801498a:	f107 0308 	add.w	r3, r7, #8
 801498e:	4618      	mov	r0, r3
 8014990:	f7ff fce6 	bl	8014360 <find_volume>
 8014994:	4603      	mov	r3, r0
 8014996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801499a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f040 819e 	bne.w	8014ce0 <f_open+0x37c>
		dj.obj.fs = fs;
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80149a8:	68ba      	ldr	r2, [r7, #8]
 80149aa:	f107 0314 	add.w	r3, r7, #20
 80149ae:	4611      	mov	r1, r2
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7ff fba5 	bl	8014100 <follow_path>
 80149b6:	4603      	mov	r3, r0
 80149b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80149bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d11a      	bne.n	80149fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80149c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80149c8:	b25b      	sxtb	r3, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	da03      	bge.n	80149d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80149ce:	2306      	movs	r3, #6
 80149d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80149d4:	e011      	b.n	80149fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80149d6:	79fb      	ldrb	r3, [r7, #7]
 80149d8:	f023 0301 	bic.w	r3, r3, #1
 80149dc:	2b00      	cmp	r3, #0
 80149de:	bf14      	ite	ne
 80149e0:	2301      	movne	r3, #1
 80149e2:	2300      	moveq	r3, #0
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	461a      	mov	r2, r3
 80149e8:	f107 0314 	add.w	r3, r7, #20
 80149ec:	4611      	mov	r1, r2
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7fe fa4c 	bl	8012e8c <chk_lock>
 80149f4:	4603      	mov	r3, r0
 80149f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80149fa:	79fb      	ldrb	r3, [r7, #7]
 80149fc:	f003 031c 	and.w	r3, r3, #28
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d07e      	beq.n	8014b02 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8014a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d017      	beq.n	8014a3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a10:	2b04      	cmp	r3, #4
 8014a12:	d10e      	bne.n	8014a32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014a14:	f7fe fa96 	bl	8012f44 <enq_lock>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d006      	beq.n	8014a2c <f_open+0xc8>
 8014a1e:	f107 0314 	add.w	r3, r7, #20
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ff fa52 	bl	8013ecc <dir_register>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	e000      	b.n	8014a2e <f_open+0xca>
 8014a2c:	2312      	movs	r3, #18
 8014a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014a32:	79fb      	ldrb	r3, [r7, #7]
 8014a34:	f043 0308 	orr.w	r3, r3, #8
 8014a38:	71fb      	strb	r3, [r7, #7]
 8014a3a:	e010      	b.n	8014a5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014a3c:	7ebb      	ldrb	r3, [r7, #26]
 8014a3e:	f003 0311 	and.w	r3, r3, #17
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d003      	beq.n	8014a4e <f_open+0xea>
					res = FR_DENIED;
 8014a46:	2307      	movs	r3, #7
 8014a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014a4c:	e007      	b.n	8014a5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014a4e:	79fb      	ldrb	r3, [r7, #7]
 8014a50:	f003 0304 	and.w	r3, r3, #4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <f_open+0xfa>
 8014a58:	2308      	movs	r3, #8
 8014a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d167      	bne.n	8014b36 <f_open+0x1d2>
 8014a66:	79fb      	ldrb	r3, [r7, #7]
 8014a68:	f003 0308 	and.w	r3, r3, #8
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d062      	beq.n	8014b36 <f_open+0x1d2>
				dw = GET_FATTIME();
 8014a70:	4ba2      	ldr	r3, [pc, #648]	; (8014cfc <f_open+0x398>)
 8014a72:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a76:	330e      	adds	r3, #14
 8014a78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7fe f95c 	bl	8012d38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a82:	3316      	adds	r3, #22
 8014a84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fe f956 	bl	8012d38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a8e:	330b      	adds	r3, #11
 8014a90:	2220      	movs	r2, #32
 8014a92:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a98:	4611      	mov	r1, r2
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7ff f925 	bl	8013cea <ld_clust>
 8014aa0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7ff f93d 	bl	8013d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab0:	331c      	adds	r3, #28
 8014ab2:	2100      	movs	r1, #0
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7fe f93f 	bl	8012d38 <st_dword>
					fs->wflag = 1;
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	2201      	movs	r2, #1
 8014abe:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d037      	beq.n	8014b36 <f_open+0x1d2>
						dw = fs->winsect;
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014aca:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014acc:	f107 0314 	add.w	r3, r7, #20
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fe fe2d 	bl	8013734 <remove_chain>
 8014ada:	4603      	mov	r3, r0
 8014adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d126      	bne.n	8014b36 <f_open+0x1d2>
							res = move_window(fs, dw);
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fe fb7d 	bl	80131ec <move_window>
 8014af2:	4603      	mov	r3, r0
 8014af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014afc:	3a01      	subs	r2, #1
 8014afe:	611a      	str	r2, [r3, #16]
 8014b00:	e019      	b.n	8014b36 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d115      	bne.n	8014b36 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014b0a:	7ebb      	ldrb	r3, [r7, #26]
 8014b0c:	f003 0310 	and.w	r3, r3, #16
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d003      	beq.n	8014b1c <f_open+0x1b8>
					res = FR_NO_FILE;
 8014b14:	2304      	movs	r3, #4
 8014b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014b1a:	e00c      	b.n	8014b36 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014b1c:	79fb      	ldrb	r3, [r7, #7]
 8014b1e:	f003 0302 	and.w	r3, r3, #2
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d007      	beq.n	8014b36 <f_open+0x1d2>
 8014b26:	7ebb      	ldrb	r3, [r7, #26]
 8014b28:	f003 0301 	and.w	r3, r3, #1
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d002      	beq.n	8014b36 <f_open+0x1d2>
						res = FR_DENIED;
 8014b30:	2307      	movs	r3, #7
 8014b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d128      	bne.n	8014b90 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014b3e:	79fb      	ldrb	r3, [r7, #7]
 8014b40:	f003 0308 	and.w	r3, r3, #8
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d003      	beq.n	8014b50 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8014b48:	79fb      	ldrb	r3, [r7, #7]
 8014b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b4e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b5e:	79fb      	ldrb	r3, [r7, #7]
 8014b60:	f023 0301 	bic.w	r3, r3, #1
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	bf14      	ite	ne
 8014b68:	2301      	movne	r3, #1
 8014b6a:	2300      	moveq	r3, #0
 8014b6c:	b2db      	uxtb	r3, r3
 8014b6e:	461a      	mov	r2, r3
 8014b70:	f107 0314 	add.w	r3, r7, #20
 8014b74:	4611      	mov	r1, r2
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fe fa06 	bl	8012f88 <inc_lock>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	691b      	ldr	r3, [r3, #16]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d102      	bne.n	8014b90 <f_open+0x22c>
 8014b8a:	2302      	movs	r3, #2
 8014b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f040 80a3 	bne.w	8014ce0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b9e:	4611      	mov	r1, r2
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff f8a2 	bl	8013cea <ld_clust>
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bae:	331c      	adds	r3, #28
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7fe f883 	bl	8012cbc <ld_dword>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014bc2:	693a      	ldr	r2, [r7, #16]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	88da      	ldrh	r2, [r3, #6]
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	79fa      	ldrb	r2, [r7, #7]
 8014bd4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2200      	movs	r2, #0
 8014be6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	3330      	adds	r3, #48	; 0x30
 8014bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014bf0:	2100      	movs	r1, #0
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7fe f8ed 	bl	8012dd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014bf8:	79fb      	ldrb	r3, [r7, #7]
 8014bfa:	f003 0320 	and.w	r3, r3, #32
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d06e      	beq.n	8014ce0 <f_open+0x37c>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d06a      	beq.n	8014ce0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	68da      	ldr	r2, [r3, #12]
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	895b      	ldrh	r3, [r3, #10]
 8014c16:	461a      	mov	r2, r3
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	899b      	ldrh	r3, [r3, #12]
 8014c1c:	fb03 f302 	mul.w	r3, r3, r2
 8014c20:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8014c2e:	e016      	b.n	8014c5e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fe fb96 	bl	8013366 <get_fat>
 8014c3a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c3e:	2b01      	cmp	r3, #1
 8014c40:	d802      	bhi.n	8014c48 <f_open+0x2e4>
 8014c42:	2302      	movs	r3, #2
 8014c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c4e:	d102      	bne.n	8014c56 <f_open+0x2f2>
 8014c50:	2301      	movs	r3, #1
 8014c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8014c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d103      	bne.n	8014c6e <f_open+0x30a>
 8014c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d8e0      	bhi.n	8014c30 <f_open+0x2cc>
				}
				fp->clust = clst;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c72:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d131      	bne.n	8014ce0 <f_open+0x37c>
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	899b      	ldrh	r3, [r3, #12]
 8014c80:	461a      	mov	r2, r3
 8014c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c88:	fb02 f201 	mul.w	r2, r2, r1
 8014c8c:	1a9b      	subs	r3, r3, r2
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d026      	beq.n	8014ce0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fe fb46 	bl	8013328 <clust2sect>
 8014c9c:	6478      	str	r0, [r7, #68]	; 0x44
 8014c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d103      	bne.n	8014cac <f_open+0x348>
						res = FR_INT_ERR;
 8014ca4:	2302      	movs	r3, #2
 8014ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014caa:	e019      	b.n	8014ce0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	899b      	ldrh	r3, [r3, #12]
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8014cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cba:	441a      	add	r2, r3
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	7858      	ldrb	r0, [r3, #1]
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6a1a      	ldr	r2, [r3, #32]
 8014cce:	2301      	movs	r3, #1
 8014cd0:	f7fd ff7e 	bl	8012bd0 <disk_read>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d002      	beq.n	8014ce0 <f_open+0x37c>
 8014cda:	2301      	movs	r3, #1
 8014cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <f_open+0x38a>
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2200      	movs	r2, #0
 8014cec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3760      	adds	r7, #96	; 0x60
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	274a0000 	.word	0x274a0000

08014d00 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b08e      	sub	sp, #56	; 0x38
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	60b9      	str	r1, [r7, #8]
 8014d0a:	607a      	str	r2, [r7, #4]
 8014d0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	f107 0214 	add.w	r2, r7, #20
 8014d1e:	4611      	mov	r1, r2
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7ff fda3 	bl	801486c <validate>
 8014d26:	4603      	mov	r3, r0
 8014d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d107      	bne.n	8014d44 <f_read+0x44>
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	7d5b      	ldrb	r3, [r3, #21]
 8014d38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d002      	beq.n	8014d4a <f_read+0x4a>
 8014d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d48:	e135      	b.n	8014fb6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	7d1b      	ldrb	r3, [r3, #20]
 8014d4e:	f003 0301 	and.w	r3, r3, #1
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d101      	bne.n	8014d5a <f_read+0x5a>
 8014d56:	2307      	movs	r3, #7
 8014d58:	e12d      	b.n	8014fb6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	68da      	ldr	r2, [r3, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	699b      	ldr	r3, [r3, #24]
 8014d62:	1ad3      	subs	r3, r2, r3
 8014d64:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	6a3b      	ldr	r3, [r7, #32]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	f240 811e 	bls.w	8014fac <f_read+0x2ac>
 8014d70:	6a3b      	ldr	r3, [r7, #32]
 8014d72:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014d74:	e11a      	b.n	8014fac <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	697a      	ldr	r2, [r7, #20]
 8014d7c:	8992      	ldrh	r2, [r2, #12]
 8014d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d82:	fb02 f201 	mul.w	r2, r2, r1
 8014d86:	1a9b      	subs	r3, r3, r2
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f040 80d5 	bne.w	8014f38 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	699b      	ldr	r3, [r3, #24]
 8014d92:	697a      	ldr	r2, [r7, #20]
 8014d94:	8992      	ldrh	r2, [r2, #12]
 8014d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d9a:	697a      	ldr	r2, [r7, #20]
 8014d9c:	8952      	ldrh	r2, [r2, #10]
 8014d9e:	3a01      	subs	r2, #1
 8014da0:	4013      	ands	r3, r2
 8014da2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d12f      	bne.n	8014e0a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	699b      	ldr	r3, [r3, #24]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d103      	bne.n	8014dba <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	633b      	str	r3, [r7, #48]	; 0x30
 8014db8:	e013      	b.n	8014de2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d007      	beq.n	8014dd2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	699b      	ldr	r3, [r3, #24]
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	68f8      	ldr	r0, [r7, #12]
 8014dca:	f7fe fdb0 	bl	801392e <clmt_clust>
 8014dce:	6338      	str	r0, [r7, #48]	; 0x30
 8014dd0:	e007      	b.n	8014de2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014dd2:	68fa      	ldr	r2, [r7, #12]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	69db      	ldr	r3, [r3, #28]
 8014dd8:	4619      	mov	r1, r3
 8014dda:	4610      	mov	r0, r2
 8014ddc:	f7fe fac3 	bl	8013366 <get_fat>
 8014de0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d804      	bhi.n	8014df2 <f_read+0xf2>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2202      	movs	r2, #2
 8014dec:	755a      	strb	r2, [r3, #21]
 8014dee:	2302      	movs	r3, #2
 8014df0:	e0e1      	b.n	8014fb6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df8:	d104      	bne.n	8014e04 <f_read+0x104>
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	755a      	strb	r2, [r3, #21]
 8014e00:	2301      	movs	r3, #1
 8014e02:	e0d8      	b.n	8014fb6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e08:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014e0a:	697a      	ldr	r2, [r7, #20]
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	69db      	ldr	r3, [r3, #28]
 8014e10:	4619      	mov	r1, r3
 8014e12:	4610      	mov	r0, r2
 8014e14:	f7fe fa88 	bl	8013328 <clust2sect>
 8014e18:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014e1a:	69bb      	ldr	r3, [r7, #24]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d104      	bne.n	8014e2a <f_read+0x12a>
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2202      	movs	r2, #2
 8014e24:	755a      	strb	r2, [r3, #21]
 8014e26:	2302      	movs	r3, #2
 8014e28:	e0c5      	b.n	8014fb6 <f_read+0x2b6>
			sect += csect;
 8014e2a:	69ba      	ldr	r2, [r7, #24]
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	4413      	add	r3, r2
 8014e30:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	899b      	ldrh	r3, [r3, #12]
 8014e36:	461a      	mov	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e3e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d041      	beq.n	8014eca <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014e46:	69fa      	ldr	r2, [r7, #28]
 8014e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4a:	4413      	add	r3, r2
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	8952      	ldrh	r2, [r2, #10]
 8014e50:	4293      	cmp	r3, r2
 8014e52:	d905      	bls.n	8014e60 <f_read+0x160>
					cc = fs->csize - csect;
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	895b      	ldrh	r3, [r3, #10]
 8014e58:	461a      	mov	r2, r3
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	1ad3      	subs	r3, r2, r3
 8014e5e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	7858      	ldrb	r0, [r3, #1]
 8014e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e66:	69ba      	ldr	r2, [r7, #24]
 8014e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e6a:	f7fd feb1 	bl	8012bd0 <disk_read>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d004      	beq.n	8014e7e <f_read+0x17e>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2201      	movs	r2, #1
 8014e78:	755a      	strb	r2, [r3, #21]
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e09b      	b.n	8014fb6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	7d1b      	ldrb	r3, [r3, #20]
 8014e82:	b25b      	sxtb	r3, r3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	da18      	bge.n	8014eba <f_read+0x1ba>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	6a1a      	ldr	r2, [r3, #32]
 8014e8c:	69bb      	ldr	r3, [r7, #24]
 8014e8e:	1ad3      	subs	r3, r2, r3
 8014e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d911      	bls.n	8014eba <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6a1a      	ldr	r2, [r3, #32]
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	697a      	ldr	r2, [r7, #20]
 8014ea0:	8992      	ldrh	r2, [r2, #12]
 8014ea2:	fb02 f303 	mul.w	r3, r2, r3
 8014ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ea8:	18d0      	adds	r0, r2, r3
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	899b      	ldrh	r3, [r3, #12]
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	f7fd ff6b 	bl	8012d90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	899b      	ldrh	r3, [r3, #12]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec2:	fb02 f303 	mul.w	r3, r2, r3
 8014ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014ec8:	e05c      	b.n	8014f84 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	6a1b      	ldr	r3, [r3, #32]
 8014ece:	69ba      	ldr	r2, [r7, #24]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d02e      	beq.n	8014f32 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	7d1b      	ldrb	r3, [r3, #20]
 8014ed8:	b25b      	sxtb	r3, r3
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	da18      	bge.n	8014f10 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	7858      	ldrb	r0, [r3, #1]
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	6a1a      	ldr	r2, [r3, #32]
 8014eec:	2301      	movs	r3, #1
 8014eee:	f7fd fe8f 	bl	8012c10 <disk_write>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d004      	beq.n	8014f02 <f_read+0x202>
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2201      	movs	r2, #1
 8014efc:	755a      	strb	r2, [r3, #21]
 8014efe:	2301      	movs	r3, #1
 8014f00:	e059      	b.n	8014fb6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	7d1b      	ldrb	r3, [r3, #20]
 8014f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f0a:	b2da      	uxtb	r2, r3
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	7858      	ldrb	r0, [r3, #1]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	69ba      	ldr	r2, [r7, #24]
 8014f1e:	f7fd fe57 	bl	8012bd0 <disk_read>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d004      	beq.n	8014f32 <f_read+0x232>
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	755a      	strb	r2, [r3, #21]
 8014f2e:	2301      	movs	r3, #1
 8014f30:	e041      	b.n	8014fb6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	69ba      	ldr	r2, [r7, #24]
 8014f36:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	899b      	ldrh	r3, [r3, #12]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	699b      	ldr	r3, [r3, #24]
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	8992      	ldrh	r2, [r2, #12]
 8014f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f4a:	fb02 f201 	mul.w	r2, r2, r1
 8014f4e:	1a9b      	subs	r3, r3, r2
 8014f50:	1ac3      	subs	r3, r0, r3
 8014f52:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d901      	bls.n	8014f60 <f_read+0x260>
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	699b      	ldr	r3, [r3, #24]
 8014f6a:	697a      	ldr	r2, [r7, #20]
 8014f6c:	8992      	ldrh	r2, [r2, #12]
 8014f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f72:	fb02 f200 	mul.w	r2, r2, r0
 8014f76:	1a9b      	subs	r3, r3, r2
 8014f78:	440b      	add	r3, r1
 8014f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f80:	f7fd ff06 	bl	8012d90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f88:	4413      	add	r3, r2
 8014f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	699a      	ldr	r2, [r3, #24]
 8014f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f92:	441a      	add	r2, r3
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	619a      	str	r2, [r3, #24]
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9e:	441a      	add	r2, r3
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	601a      	str	r2, [r3, #0]
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa8:	1ad3      	subs	r3, r2, r3
 8014faa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f47f aee1 	bne.w	8014d76 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3738      	adds	r7, #56	; 0x38
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}

08014fbe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014fbe:	b580      	push	{r7, lr}
 8014fc0:	b08c      	sub	sp, #48	; 0x30
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	60f8      	str	r0, [r7, #12]
 8014fc6:	60b9      	str	r1, [r7, #8]
 8014fc8:	607a      	str	r2, [r7, #4]
 8014fca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f107 0210 	add.w	r2, r7, #16
 8014fdc:	4611      	mov	r1, r2
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7ff fc44 	bl	801486c <validate>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d107      	bne.n	8015002 <f_write+0x44>
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	7d5b      	ldrb	r3, [r3, #21]
 8014ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d002      	beq.n	8015008 <f_write+0x4a>
 8015002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015006:	e16a      	b.n	80152de <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	7d1b      	ldrb	r3, [r3, #20]
 801500c:	f003 0302 	and.w	r3, r3, #2
 8015010:	2b00      	cmp	r3, #0
 8015012:	d101      	bne.n	8015018 <f_write+0x5a>
 8015014:	2307      	movs	r3, #7
 8015016:	e162      	b.n	80152de <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	699a      	ldr	r2, [r3, #24]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	441a      	add	r2, r3
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	699b      	ldr	r3, [r3, #24]
 8015024:	429a      	cmp	r2, r3
 8015026:	f080 814c 	bcs.w	80152c2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	699b      	ldr	r3, [r3, #24]
 801502e:	43db      	mvns	r3, r3
 8015030:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015032:	e146      	b.n	80152c2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	693a      	ldr	r2, [r7, #16]
 801503a:	8992      	ldrh	r2, [r2, #12]
 801503c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015040:	fb02 f201 	mul.w	r2, r2, r1
 8015044:	1a9b      	subs	r3, r3, r2
 8015046:	2b00      	cmp	r3, #0
 8015048:	f040 80f1 	bne.w	801522e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	699b      	ldr	r3, [r3, #24]
 8015050:	693a      	ldr	r2, [r7, #16]
 8015052:	8992      	ldrh	r2, [r2, #12]
 8015054:	fbb3 f3f2 	udiv	r3, r3, r2
 8015058:	693a      	ldr	r2, [r7, #16]
 801505a:	8952      	ldrh	r2, [r2, #10]
 801505c:	3a01      	subs	r2, #1
 801505e:	4013      	ands	r3, r2
 8015060:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015062:	69bb      	ldr	r3, [r7, #24]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d143      	bne.n	80150f0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	699b      	ldr	r3, [r3, #24]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d10c      	bne.n	801508a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015078:	2b00      	cmp	r3, #0
 801507a:	d11a      	bne.n	80150b2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	2100      	movs	r1, #0
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe fbbc 	bl	80137fe <create_chain>
 8015086:	62b8      	str	r0, [r7, #40]	; 0x28
 8015088:	e013      	b.n	80150b2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801508e:	2b00      	cmp	r3, #0
 8015090:	d007      	beq.n	80150a2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	699b      	ldr	r3, [r3, #24]
 8015096:	4619      	mov	r1, r3
 8015098:	68f8      	ldr	r0, [r7, #12]
 801509a:	f7fe fc48 	bl	801392e <clmt_clust>
 801509e:	62b8      	str	r0, [r7, #40]	; 0x28
 80150a0:	e007      	b.n	80150b2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80150a2:	68fa      	ldr	r2, [r7, #12]
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	69db      	ldr	r3, [r3, #28]
 80150a8:	4619      	mov	r1, r3
 80150aa:	4610      	mov	r0, r2
 80150ac:	f7fe fba7 	bl	80137fe <create_chain>
 80150b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80150b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f000 8109 	beq.w	80152cc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80150ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d104      	bne.n	80150ca <f_write+0x10c>
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	2202      	movs	r2, #2
 80150c4:	755a      	strb	r2, [r3, #21]
 80150c6:	2302      	movs	r3, #2
 80150c8:	e109      	b.n	80152de <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80150ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150d0:	d104      	bne.n	80150dc <f_write+0x11e>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2201      	movs	r2, #1
 80150d6:	755a      	strb	r2, [r3, #21]
 80150d8:	2301      	movs	r3, #1
 80150da:	e100      	b.n	80152de <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	689b      	ldr	r3, [r3, #8]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d102      	bne.n	80150f0 <f_write+0x132>
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	7d1b      	ldrb	r3, [r3, #20]
 80150f4:	b25b      	sxtb	r3, r3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	da18      	bge.n	801512c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	7858      	ldrb	r0, [r3, #1]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	6a1a      	ldr	r2, [r3, #32]
 8015108:	2301      	movs	r3, #1
 801510a:	f7fd fd81 	bl	8012c10 <disk_write>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d004      	beq.n	801511e <f_write+0x160>
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2201      	movs	r2, #1
 8015118:	755a      	strb	r2, [r3, #21]
 801511a:	2301      	movs	r3, #1
 801511c:	e0df      	b.n	80152de <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	7d1b      	ldrb	r3, [r3, #20]
 8015122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015126:	b2da      	uxtb	r2, r3
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801512c:	693a      	ldr	r2, [r7, #16]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	69db      	ldr	r3, [r3, #28]
 8015132:	4619      	mov	r1, r3
 8015134:	4610      	mov	r0, r2
 8015136:	f7fe f8f7 	bl	8013328 <clust2sect>
 801513a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d104      	bne.n	801514c <f_write+0x18e>
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2202      	movs	r2, #2
 8015146:	755a      	strb	r2, [r3, #21]
 8015148:	2302      	movs	r3, #2
 801514a:	e0c8      	b.n	80152de <f_write+0x320>
			sect += csect;
 801514c:	697a      	ldr	r2, [r7, #20]
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	4413      	add	r3, r2
 8015152:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	899b      	ldrh	r3, [r3, #12]
 8015158:	461a      	mov	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015160:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015162:	6a3b      	ldr	r3, [r7, #32]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d043      	beq.n	80151f0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015168:	69ba      	ldr	r2, [r7, #24]
 801516a:	6a3b      	ldr	r3, [r7, #32]
 801516c:	4413      	add	r3, r2
 801516e:	693a      	ldr	r2, [r7, #16]
 8015170:	8952      	ldrh	r2, [r2, #10]
 8015172:	4293      	cmp	r3, r2
 8015174:	d905      	bls.n	8015182 <f_write+0x1c4>
					cc = fs->csize - csect;
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	895b      	ldrh	r3, [r3, #10]
 801517a:	461a      	mov	r2, r3
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	7858      	ldrb	r0, [r3, #1]
 8015186:	6a3b      	ldr	r3, [r7, #32]
 8015188:	697a      	ldr	r2, [r7, #20]
 801518a:	69f9      	ldr	r1, [r7, #28]
 801518c:	f7fd fd40 	bl	8012c10 <disk_write>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d004      	beq.n	80151a0 <f_write+0x1e2>
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	2201      	movs	r2, #1
 801519a:	755a      	strb	r2, [r3, #21]
 801519c:	2301      	movs	r3, #1
 801519e:	e09e      	b.n	80152de <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6a1a      	ldr	r2, [r3, #32]
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	6a3a      	ldr	r2, [r7, #32]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d918      	bls.n	80151e0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	6a1a      	ldr	r2, [r3, #32]
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	1ad3      	subs	r3, r2, r3
 80151bc:	693a      	ldr	r2, [r7, #16]
 80151be:	8992      	ldrh	r2, [r2, #12]
 80151c0:	fb02 f303 	mul.w	r3, r2, r3
 80151c4:	69fa      	ldr	r2, [r7, #28]
 80151c6:	18d1      	adds	r1, r2, r3
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	899b      	ldrh	r3, [r3, #12]
 80151cc:	461a      	mov	r2, r3
 80151ce:	f7fd fddf 	bl	8012d90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	7d1b      	ldrb	r3, [r3, #20]
 80151d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151da:	b2da      	uxtb	r2, r3
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	899b      	ldrh	r3, [r3, #12]
 80151e4:	461a      	mov	r2, r3
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	fb02 f303 	mul.w	r3, r2, r3
 80151ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80151ee:	e04b      	b.n	8015288 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	6a1b      	ldr	r3, [r3, #32]
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d016      	beq.n	8015228 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	699a      	ldr	r2, [r3, #24]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015202:	429a      	cmp	r2, r3
 8015204:	d210      	bcs.n	8015228 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	7858      	ldrb	r0, [r3, #1]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015210:	2301      	movs	r3, #1
 8015212:	697a      	ldr	r2, [r7, #20]
 8015214:	f7fd fcdc 	bl	8012bd0 <disk_read>
 8015218:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801521a:	2b00      	cmp	r3, #0
 801521c:	d004      	beq.n	8015228 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2201      	movs	r2, #1
 8015222:	755a      	strb	r2, [r3, #21]
 8015224:	2301      	movs	r3, #1
 8015226:	e05a      	b.n	80152de <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	697a      	ldr	r2, [r7, #20]
 801522c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	899b      	ldrh	r3, [r3, #12]
 8015232:	4618      	mov	r0, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	699b      	ldr	r3, [r3, #24]
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	8992      	ldrh	r2, [r2, #12]
 801523c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015240:	fb02 f201 	mul.w	r2, r2, r1
 8015244:	1a9b      	subs	r3, r3, r2
 8015246:	1ac3      	subs	r3, r0, r3
 8015248:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	429a      	cmp	r2, r3
 8015250:	d901      	bls.n	8015256 <f_write+0x298>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	699b      	ldr	r3, [r3, #24]
 8015260:	693a      	ldr	r2, [r7, #16]
 8015262:	8992      	ldrh	r2, [r2, #12]
 8015264:	fbb3 f0f2 	udiv	r0, r3, r2
 8015268:	fb02 f200 	mul.w	r2, r2, r0
 801526c:	1a9b      	subs	r3, r3, r2
 801526e:	440b      	add	r3, r1
 8015270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015272:	69f9      	ldr	r1, [r7, #28]
 8015274:	4618      	mov	r0, r3
 8015276:	f7fd fd8b 	bl	8012d90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	7d1b      	ldrb	r3, [r3, #20]
 801527e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015282:	b2da      	uxtb	r2, r3
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015288:	69fa      	ldr	r2, [r7, #28]
 801528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528c:	4413      	add	r3, r2
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	699a      	ldr	r2, [r3, #24]
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	441a      	add	r2, r3
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	619a      	str	r2, [r3, #24]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	68da      	ldr	r2, [r3, #12]
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	699b      	ldr	r3, [r3, #24]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	bf38      	it	cc
 80152a8:	461a      	movcc	r2, r3
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	60da      	str	r2, [r3, #12]
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b4:	441a      	add	r2, r3
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	f47f aeb5 	bne.w	8015034 <f_write+0x76>
 80152ca:	e000      	b.n	80152ce <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80152cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	7d1b      	ldrb	r3, [r3, #20]
 80152d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152d6:	b2da      	uxtb	r2, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80152dc:	2300      	movs	r3, #0
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3730      	adds	r7, #48	; 0x30
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
	...

080152e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f107 0208 	add.w	r2, r7, #8
 80152f6:	4611      	mov	r1, r2
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7ff fab7 	bl	801486c <validate>
 80152fe:	4603      	mov	r3, r0
 8015300:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015302:	7dfb      	ldrb	r3, [r7, #23]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d167      	bne.n	80153d8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	7d1b      	ldrb	r3, [r3, #20]
 801530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015310:	2b00      	cmp	r3, #0
 8015312:	d061      	beq.n	80153d8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	7d1b      	ldrb	r3, [r3, #20]
 8015318:	b25b      	sxtb	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	da15      	bge.n	801534a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	7858      	ldrb	r0, [r3, #1]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6a1a      	ldr	r2, [r3, #32]
 801532c:	2301      	movs	r3, #1
 801532e:	f7fd fc6f 	bl	8012c10 <disk_write>
 8015332:	4603      	mov	r3, r0
 8015334:	2b00      	cmp	r3, #0
 8015336:	d001      	beq.n	801533c <f_sync+0x54>
 8015338:	2301      	movs	r3, #1
 801533a:	e04e      	b.n	80153da <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	7d1b      	ldrb	r3, [r3, #20]
 8015340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015344:	b2da      	uxtb	r2, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801534a:	4b26      	ldr	r3, [pc, #152]	; (80153e4 <f_sync+0xfc>)
 801534c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801534e:	68ba      	ldr	r2, [r7, #8]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015354:	4619      	mov	r1, r3
 8015356:	4610      	mov	r0, r2
 8015358:	f7fd ff48 	bl	80131ec <move_window>
 801535c:	4603      	mov	r3, r0
 801535e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015360:	7dfb      	ldrb	r3, [r7, #23]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d138      	bne.n	80153d8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801536a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	330b      	adds	r3, #11
 8015370:	781a      	ldrb	r2, [r3, #0]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	330b      	adds	r3, #11
 8015376:	f042 0220 	orr.w	r2, r2, #32
 801537a:	b2d2      	uxtb	r2, r2
 801537c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6818      	ldr	r0, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	461a      	mov	r2, r3
 8015388:	68f9      	ldr	r1, [r7, #12]
 801538a:	f7fe fccd 	bl	8013d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f103 021c 	add.w	r2, r3, #28
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	4619      	mov	r1, r3
 801539a:	4610      	mov	r0, r2
 801539c:	f7fd fccc 	bl	8012d38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	3316      	adds	r3, #22
 80153a4:	6939      	ldr	r1, [r7, #16]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fd fcc6 	bl	8012d38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	3312      	adds	r3, #18
 80153b0:	2100      	movs	r1, #0
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fd fca5 	bl	8012d02 <st_word>
					fs->wflag = 1;
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	2201      	movs	r2, #1
 80153bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fd ff41 	bl	8013248 <sync_fs>
 80153c6:	4603      	mov	r3, r0
 80153c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	7d1b      	ldrb	r3, [r3, #20]
 80153ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80153d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	274a0000 	.word	0x274a0000

080153e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff ff79 	bl	80152e8 <f_sync>
 80153f6:	4603      	mov	r3, r0
 80153f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80153fa:	7bfb      	ldrb	r3, [r7, #15]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d118      	bne.n	8015432 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f107 0208 	add.w	r2, r7, #8
 8015406:	4611      	mov	r1, r2
 8015408:	4618      	mov	r0, r3
 801540a:	f7ff fa2f 	bl	801486c <validate>
 801540e:	4603      	mov	r3, r0
 8015410:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015412:	7bfb      	ldrb	r3, [r7, #15]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10c      	bne.n	8015432 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	691b      	ldr	r3, [r3, #16]
 801541c:	4618      	mov	r0, r3
 801541e:	f7fd fe41 	bl	80130a4 <dec_lock>
 8015422:	4603      	mov	r3, r0
 8015424:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015426:	7bfb      	ldrb	r3, [r7, #15]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d102      	bne.n	8015432 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2200      	movs	r2, #0
 8015430:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015432:	7bfb      	ldrb	r3, [r7, #15]
}
 8015434:	4618      	mov	r0, r3
 8015436:	3710      	adds	r7, #16
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801543c:	b590      	push	{r4, r7, lr}
 801543e:	b091      	sub	sp, #68	; 0x44
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015444:	f107 0108 	add.w	r1, r7, #8
 8015448:	1d3b      	adds	r3, r7, #4
 801544a:	2200      	movs	r2, #0
 801544c:	4618      	mov	r0, r3
 801544e:	f7fe ff87 	bl	8014360 <find_volume>
 8015452:	4603      	mov	r3, r0
 8015454:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8015458:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801545c:	2b00      	cmp	r3, #0
 801545e:	d131      	bne.n	80154c4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	f107 030c 	add.w	r3, r7, #12
 801546a:	4611      	mov	r1, r2
 801546c:	4618      	mov	r0, r3
 801546e:	f7fe fe47 	bl	8014100 <follow_path>
 8015472:	4603      	mov	r3, r0
 8015474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8015478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801547c:	2b00      	cmp	r3, #0
 801547e:	d11a      	bne.n	80154b6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015480:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015484:	b25b      	sxtb	r3, r3
 8015486:	2b00      	cmp	r3, #0
 8015488:	da03      	bge.n	8015492 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	697a      	ldr	r2, [r7, #20]
 801548e:	619a      	str	r2, [r3, #24]
 8015490:	e011      	b.n	80154b6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015492:	7cbb      	ldrb	r3, [r7, #18]
 8015494:	f003 0310 	and.w	r3, r3, #16
 8015498:	2b00      	cmp	r3, #0
 801549a:	d009      	beq.n	80154b0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154a0:	68bc      	ldr	r4, [r7, #8]
 80154a2:	4611      	mov	r1, r2
 80154a4:	4618      	mov	r0, r3
 80154a6:	f7fe fc20 	bl	8013cea <ld_clust>
 80154aa:	4603      	mov	r3, r0
 80154ac:	61a3      	str	r3, [r4, #24]
 80154ae:	e002      	b.n	80154b6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80154b0:	2305      	movs	r3, #5
 80154b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80154b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80154ba:	2b04      	cmp	r3, #4
 80154bc:	d102      	bne.n	80154c4 <f_chdir+0x88>
 80154be:	2305      	movs	r3, #5
 80154c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80154c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3744      	adds	r7, #68	; 0x44
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd90      	pop	{r4, r7, pc}

080154d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b090      	sub	sp, #64	; 0x40
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f107 0208 	add.w	r2, r7, #8
 80154e0:	4611      	mov	r1, r2
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7ff f9c2 	bl	801486c <validate>
 80154e8:	4603      	mov	r3, r0
 80154ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80154ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d103      	bne.n	80154fe <f_lseek+0x2e>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	7d5b      	ldrb	r3, [r3, #21]
 80154fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80154fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015502:	2b00      	cmp	r3, #0
 8015504:	d002      	beq.n	801550c <f_lseek+0x3c>
 8015506:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801550a:	e201      	b.n	8015910 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 80d9 	beq.w	80156c8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551c:	d15a      	bne.n	80155d4 <f_lseek+0x104>
			tbl = fp->cltbl;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015522:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015526:	1d1a      	adds	r2, r3, #4
 8015528:	627a      	str	r2, [r7, #36]	; 0x24
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	617b      	str	r3, [r7, #20]
 801552e:	2302      	movs	r3, #2
 8015530:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	689b      	ldr	r3, [r3, #8]
 8015536:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553a:	2b00      	cmp	r3, #0
 801553c:	d03a      	beq.n	80155b4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015540:	613b      	str	r3, [r7, #16]
 8015542:	2300      	movs	r3, #0
 8015544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015548:	3302      	adds	r3, #2
 801554a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554e:	60fb      	str	r3, [r7, #12]
 8015550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015552:	3301      	adds	r3, #1
 8015554:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801555a:	4618      	mov	r0, r3
 801555c:	f7fd ff03 	bl	8013366 <get_fat>
 8015560:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015564:	2b01      	cmp	r3, #1
 8015566:	d804      	bhi.n	8015572 <f_lseek+0xa2>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2202      	movs	r2, #2
 801556c:	755a      	strb	r2, [r3, #21]
 801556e:	2302      	movs	r3, #2
 8015570:	e1ce      	b.n	8015910 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015578:	d104      	bne.n	8015584 <f_lseek+0xb4>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2201      	movs	r2, #1
 801557e:	755a      	strb	r2, [r3, #21]
 8015580:	2301      	movs	r3, #1
 8015582:	e1c5      	b.n	8015910 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	3301      	adds	r3, #1
 8015588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801558a:	429a      	cmp	r2, r3
 801558c:	d0de      	beq.n	801554c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	429a      	cmp	r2, r3
 8015594:	d809      	bhi.n	80155aa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8015596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015598:	1d1a      	adds	r2, r3, #4
 801559a:	627a      	str	r2, [r7, #36]	; 0x24
 801559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801559e:	601a      	str	r2, [r3, #0]
 80155a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a2:	1d1a      	adds	r2, r3, #4
 80155a4:	627a      	str	r2, [r7, #36]	; 0x24
 80155a6:	693a      	ldr	r2, [r7, #16]
 80155a8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	69db      	ldr	r3, [r3, #28]
 80155ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155b0:	429a      	cmp	r2, r3
 80155b2:	d3c4      	bcc.n	801553e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155ba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80155bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d803      	bhi.n	80155cc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80155c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c6:	2200      	movs	r2, #0
 80155c8:	601a      	str	r2, [r3, #0]
 80155ca:	e19f      	b.n	801590c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80155cc:	2311      	movs	r3, #17
 80155ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80155d2:	e19b      	b.n	801590c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	68db      	ldr	r3, [r3, #12]
 80155d8:	683a      	ldr	r2, [r7, #0]
 80155da:	429a      	cmp	r2, r3
 80155dc:	d902      	bls.n	80155e4 <f_lseek+0x114>
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	683a      	ldr	r2, [r7, #0]
 80155e8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	f000 818d 	beq.w	801590c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	3b01      	subs	r3, #1
 80155f6:	4619      	mov	r1, r3
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f7fe f998 	bl	801392e <clmt_clust>
 80155fe:	4602      	mov	r2, r0
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	69db      	ldr	r3, [r3, #28]
 801560a:	4619      	mov	r1, r3
 801560c:	4610      	mov	r0, r2
 801560e:	f7fd fe8b 	bl	8013328 <clust2sect>
 8015612:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d104      	bne.n	8015624 <f_lseek+0x154>
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2202      	movs	r2, #2
 801561e:	755a      	strb	r2, [r3, #21]
 8015620:	2302      	movs	r3, #2
 8015622:	e175      	b.n	8015910 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	3b01      	subs	r3, #1
 8015628:	68ba      	ldr	r2, [r7, #8]
 801562a:	8992      	ldrh	r2, [r2, #12]
 801562c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015630:	68ba      	ldr	r2, [r7, #8]
 8015632:	8952      	ldrh	r2, [r2, #10]
 8015634:	3a01      	subs	r2, #1
 8015636:	4013      	ands	r3, r2
 8015638:	69ba      	ldr	r2, [r7, #24]
 801563a:	4413      	add	r3, r2
 801563c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	699b      	ldr	r3, [r3, #24]
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	8992      	ldrh	r2, [r2, #12]
 8015646:	fbb3 f1f2 	udiv	r1, r3, r2
 801564a:	fb02 f201 	mul.w	r2, r2, r1
 801564e:	1a9b      	subs	r3, r3, r2
 8015650:	2b00      	cmp	r3, #0
 8015652:	f000 815b 	beq.w	801590c <f_lseek+0x43c>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6a1b      	ldr	r3, [r3, #32]
 801565a:	69ba      	ldr	r2, [r7, #24]
 801565c:	429a      	cmp	r2, r3
 801565e:	f000 8155 	beq.w	801590c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	7d1b      	ldrb	r3, [r3, #20]
 8015666:	b25b      	sxtb	r3, r3
 8015668:	2b00      	cmp	r3, #0
 801566a:	da18      	bge.n	801569e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	7858      	ldrb	r0, [r3, #1]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6a1a      	ldr	r2, [r3, #32]
 801567a:	2301      	movs	r3, #1
 801567c:	f7fd fac8 	bl	8012c10 <disk_write>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d004      	beq.n	8015690 <f_lseek+0x1c0>
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2201      	movs	r2, #1
 801568a:	755a      	strb	r2, [r3, #21]
 801568c:	2301      	movs	r3, #1
 801568e:	e13f      	b.n	8015910 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	7d1b      	ldrb	r3, [r3, #20]
 8015694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015698:	b2da      	uxtb	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	7858      	ldrb	r0, [r3, #1]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80156a8:	2301      	movs	r3, #1
 80156aa:	69ba      	ldr	r2, [r7, #24]
 80156ac:	f7fd fa90 	bl	8012bd0 <disk_read>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d004      	beq.n	80156c0 <f_lseek+0x1f0>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2201      	movs	r2, #1
 80156ba:	755a      	strb	r2, [r3, #21]
 80156bc:	2301      	movs	r3, #1
 80156be:	e127      	b.n	8015910 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	69ba      	ldr	r2, [r7, #24]
 80156c4:	621a      	str	r2, [r3, #32]
 80156c6:	e121      	b.n	801590c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d908      	bls.n	80156e4 <f_lseek+0x214>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	7d1b      	ldrb	r3, [r3, #20]
 80156d6:	f003 0302 	and.w	r3, r3, #2
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d102      	bne.n	80156e4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	699b      	ldr	r3, [r3, #24]
 80156e8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80156ea:	2300      	movs	r3, #0
 80156ec:	637b      	str	r3, [r7, #52]	; 0x34
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156f2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	f000 80b5 	beq.w	8015866 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	895b      	ldrh	r3, [r3, #10]
 8015700:	461a      	mov	r2, r3
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	899b      	ldrh	r3, [r3, #12]
 8015706:	fb03 f302 	mul.w	r3, r3, r2
 801570a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d01b      	beq.n	801574a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	1e5a      	subs	r2, r3, #1
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	fbb2 f2f3 	udiv	r2, r2, r3
 801571c:	6a3b      	ldr	r3, [r7, #32]
 801571e:	1e59      	subs	r1, r3, #1
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015726:	429a      	cmp	r2, r3
 8015728:	d30f      	bcc.n	801574a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801572a:	6a3b      	ldr	r3, [r7, #32]
 801572c:	1e5a      	subs	r2, r3, #1
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	425b      	negs	r3, r3
 8015732:	401a      	ands	r2, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	699b      	ldr	r3, [r3, #24]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	1ad3      	subs	r3, r2, r3
 8015740:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	69db      	ldr	r3, [r3, #28]
 8015746:	63bb      	str	r3, [r7, #56]	; 0x38
 8015748:	e022      	b.n	8015790 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	689b      	ldr	r3, [r3, #8]
 801574e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015752:	2b00      	cmp	r3, #0
 8015754:	d119      	bne.n	801578a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2100      	movs	r1, #0
 801575a:	4618      	mov	r0, r3
 801575c:	f7fe f84f 	bl	80137fe <create_chain>
 8015760:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015764:	2b01      	cmp	r3, #1
 8015766:	d104      	bne.n	8015772 <f_lseek+0x2a2>
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2202      	movs	r2, #2
 801576c:	755a      	strb	r2, [r3, #21]
 801576e:	2302      	movs	r3, #2
 8015770:	e0ce      	b.n	8015910 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015778:	d104      	bne.n	8015784 <f_lseek+0x2b4>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2201      	movs	r2, #1
 801577e:	755a      	strb	r2, [r3, #21]
 8015780:	2301      	movs	r3, #1
 8015782:	e0c5      	b.n	8015910 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015788:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801578e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015792:	2b00      	cmp	r3, #0
 8015794:	d067      	beq.n	8015866 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8015796:	e03a      	b.n	801580e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8015798:	683a      	ldr	r2, [r7, #0]
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	603b      	str	r3, [r7, #0]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	699a      	ldr	r2, [r3, #24]
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	441a      	add	r2, r3
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	7d1b      	ldrb	r3, [r3, #20]
 80157b0:	f003 0302 	and.w	r3, r3, #2
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d00b      	beq.n	80157d0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157bc:	4618      	mov	r0, r3
 80157be:	f7fe f81e 	bl	80137fe <create_chain>
 80157c2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80157c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d108      	bne.n	80157dc <f_lseek+0x30c>
							ofs = 0; break;
 80157ca:	2300      	movs	r3, #0
 80157cc:	603b      	str	r3, [r7, #0]
 80157ce:	e022      	b.n	8015816 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7fd fdc6 	bl	8013366 <get_fat>
 80157da:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80157dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157e2:	d104      	bne.n	80157ee <f_lseek+0x31e>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2201      	movs	r2, #1
 80157e8:	755a      	strb	r2, [r3, #21]
 80157ea:	2301      	movs	r3, #1
 80157ec:	e090      	b.n	8015910 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80157ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d904      	bls.n	80157fe <f_lseek+0x32e>
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	69db      	ldr	r3, [r3, #28]
 80157f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d304      	bcc.n	8015808 <f_lseek+0x338>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2202      	movs	r2, #2
 8015802:	755a      	strb	r2, [r3, #21]
 8015804:	2302      	movs	r3, #2
 8015806:	e083      	b.n	8015910 <f_lseek+0x440>
					fp->clust = clst;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801580c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801580e:	683a      	ldr	r2, [r7, #0]
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	429a      	cmp	r2, r3
 8015814:	d8c0      	bhi.n	8015798 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	699a      	ldr	r2, [r3, #24]
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	441a      	add	r2, r3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	899b      	ldrh	r3, [r3, #12]
 8015826:	461a      	mov	r2, r3
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	fbb3 f1f2 	udiv	r1, r3, r2
 801582e:	fb02 f201 	mul.w	r2, r2, r1
 8015832:	1a9b      	subs	r3, r3, r2
 8015834:	2b00      	cmp	r3, #0
 8015836:	d016      	beq.n	8015866 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801583c:	4618      	mov	r0, r3
 801583e:	f7fd fd73 	bl	8013328 <clust2sect>
 8015842:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015846:	2b00      	cmp	r3, #0
 8015848:	d104      	bne.n	8015854 <f_lseek+0x384>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2202      	movs	r2, #2
 801584e:	755a      	strb	r2, [r3, #21]
 8015850:	2302      	movs	r3, #2
 8015852:	e05d      	b.n	8015910 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	899b      	ldrh	r3, [r3, #12]
 8015858:	461a      	mov	r2, r3
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015862:	4413      	add	r3, r2
 8015864:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	699a      	ldr	r2, [r3, #24]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	429a      	cmp	r2, r3
 8015870:	d90a      	bls.n	8015888 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	699a      	ldr	r2, [r3, #24]
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	7d1b      	ldrb	r3, [r3, #20]
 801587e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015882:	b2da      	uxtb	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	699b      	ldr	r3, [r3, #24]
 801588c:	68ba      	ldr	r2, [r7, #8]
 801588e:	8992      	ldrh	r2, [r2, #12]
 8015890:	fbb3 f1f2 	udiv	r1, r3, r2
 8015894:	fb02 f201 	mul.w	r2, r2, r1
 8015898:	1a9b      	subs	r3, r3, r2
 801589a:	2b00      	cmp	r3, #0
 801589c:	d036      	beq.n	801590c <f_lseek+0x43c>
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6a1b      	ldr	r3, [r3, #32]
 80158a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d031      	beq.n	801590c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	7d1b      	ldrb	r3, [r3, #20]
 80158ac:	b25b      	sxtb	r3, r3
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	da18      	bge.n	80158e4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	7858      	ldrb	r0, [r3, #1]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6a1a      	ldr	r2, [r3, #32]
 80158c0:	2301      	movs	r3, #1
 80158c2:	f7fd f9a5 	bl	8012c10 <disk_write>
 80158c6:	4603      	mov	r3, r0
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d004      	beq.n	80158d6 <f_lseek+0x406>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2201      	movs	r2, #1
 80158d0:	755a      	strb	r2, [r3, #21]
 80158d2:	2301      	movs	r3, #1
 80158d4:	e01c      	b.n	8015910 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	7d1b      	ldrb	r3, [r3, #20]
 80158da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	7858      	ldrb	r0, [r3, #1]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158ee:	2301      	movs	r3, #1
 80158f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158f2:	f7fd f96d 	bl	8012bd0 <disk_read>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d004      	beq.n	8015906 <f_lseek+0x436>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2201      	movs	r2, #1
 8015900:	755a      	strb	r2, [r3, #21]
 8015902:	2301      	movs	r3, #1
 8015904:	e004      	b.n	8015910 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801590a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801590c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015910:	4618      	mov	r0, r3
 8015912:	3740      	adds	r7, #64	; 0x40
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b09e      	sub	sp, #120	; 0x78
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8015920:	2300      	movs	r3, #0
 8015922:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015924:	f107 010c 	add.w	r1, r7, #12
 8015928:	1d3b      	adds	r3, r7, #4
 801592a:	2202      	movs	r2, #2
 801592c:	4618      	mov	r0, r3
 801592e:	f7fe fd17 	bl	8014360 <find_volume>
 8015932:	4603      	mov	r3, r0
 8015934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801593c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015940:	2b00      	cmp	r3, #0
 8015942:	f040 80a4 	bne.w	8015a8e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801594c:	4611      	mov	r1, r2
 801594e:	4618      	mov	r0, r3
 8015950:	f7fe fbd6 	bl	8014100 <follow_path>
 8015954:	4603      	mov	r3, r0
 8015956:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801595a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801595e:	2b00      	cmp	r3, #0
 8015960:	d108      	bne.n	8015974 <f_unlink+0x5c>
 8015962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015966:	f003 0320 	and.w	r3, r3, #32
 801596a:	2b00      	cmp	r3, #0
 801596c:	d002      	beq.n	8015974 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801596e:	2306      	movs	r3, #6
 8015970:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015974:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015978:	2b00      	cmp	r3, #0
 801597a:	d108      	bne.n	801598e <f_unlink+0x76>
 801597c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015980:	2102      	movs	r1, #2
 8015982:	4618      	mov	r0, r3
 8015984:	f7fd fa82 	bl	8012e8c <chk_lock>
 8015988:	4603      	mov	r3, r0
 801598a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801598e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015992:	2b00      	cmp	r3, #0
 8015994:	d17b      	bne.n	8015a8e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015996:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801599a:	b25b      	sxtb	r3, r3
 801599c:	2b00      	cmp	r3, #0
 801599e:	da03      	bge.n	80159a8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80159a0:	2306      	movs	r3, #6
 80159a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80159a6:	e008      	b.n	80159ba <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80159a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80159ac:	f003 0301 	and.w	r3, r3, #1
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d002      	beq.n	80159ba <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80159b4:	2307      	movs	r3, #7
 80159b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80159ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d13d      	bne.n	8015a3e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80159c6:	4611      	mov	r1, r2
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7fe f98e 	bl	8013cea <ld_clust>
 80159ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80159d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80159d4:	f003 0310 	and.w	r3, r3, #16
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d030      	beq.n	8015a3e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	699b      	ldr	r3, [r3, #24]
 80159e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d103      	bne.n	80159ee <f_unlink+0xd6>
						res = FR_DENIED;
 80159e6:	2307      	movs	r3, #7
 80159e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80159ec:	e027      	b.n	8015a3e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80159f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159f4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80159f6:	f107 0310 	add.w	r3, r7, #16
 80159fa:	2100      	movs	r1, #0
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fd ffce 	bl	801399e <dir_sdi>
 8015a02:	4603      	mov	r3, r0
 8015a04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8015a08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d116      	bne.n	8015a3e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015a10:	f107 0310 	add.w	r3, r7, #16
 8015a14:	2100      	movs	r1, #0
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7fe f9a6 	bl	8013d68 <dir_read>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015a22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d102      	bne.n	8015a30 <f_unlink+0x118>
 8015a2a:	2307      	movs	r3, #7
 8015a2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015a30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a34:	2b04      	cmp	r3, #4
 8015a36:	d102      	bne.n	8015a3e <f_unlink+0x126>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015a3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d123      	bne.n	8015a8e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8015a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7fe fa70 	bl	8013f30 <dir_remove>
 8015a50:	4603      	mov	r3, r0
 8015a52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015a56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d10c      	bne.n	8015a78 <f_unlink+0x160>
 8015a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d009      	beq.n	8015a78 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015a68:	2200      	movs	r2, #0
 8015a6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fd fe61 	bl	8013734 <remove_chain>
 8015a72:	4603      	mov	r3, r0
 8015a74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015a78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d106      	bne.n	8015a8e <f_unlink+0x176>
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7fd fbe0 	bl	8013248 <sync_fs>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015a8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3778      	adds	r7, #120	; 0x78
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
	...

08015a9c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b096      	sub	sp, #88	; 0x58
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015aa4:	f107 0108 	add.w	r1, r7, #8
 8015aa8:	1d3b      	adds	r3, r7, #4
 8015aaa:	2202      	movs	r2, #2
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fe fc57 	bl	8014360 <find_volume>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f040 80fe 	bne.w	8015cc2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	f107 030c 	add.w	r3, r7, #12
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fe fb16 	bl	8014100 <follow_path>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d102      	bne.n	8015ae8 <f_mkdir+0x4c>
 8015ae2:	2308      	movs	r3, #8
 8015ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015aec:	2b04      	cmp	r3, #4
 8015aee:	d108      	bne.n	8015b02 <f_mkdir+0x66>
 8015af0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015af4:	f003 0320 	and.w	r3, r3, #32
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d002      	beq.n	8015b02 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015afc:	2306      	movs	r3, #6
 8015afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b06:	2b04      	cmp	r3, #4
 8015b08:	f040 80db 	bne.w	8015cc2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015b0c:	f107 030c 	add.w	r3, r7, #12
 8015b10:	2100      	movs	r1, #0
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7fd fe73 	bl	80137fe <create_chain>
 8015b18:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	895b      	ldrh	r3, [r3, #10]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	899b      	ldrh	r3, [r3, #12]
 8015b24:	fb03 f302 	mul.w	r3, r3, r2
 8015b28:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d102      	bne.n	8015b3c <f_mkdir+0xa0>
 8015b36:	2307      	movs	r3, #7
 8015b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b3e:	2b01      	cmp	r3, #1
 8015b40:	d102      	bne.n	8015b48 <f_mkdir+0xac>
 8015b42:	2302      	movs	r3, #2
 8015b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b4e:	d102      	bne.n	8015b56 <f_mkdir+0xba>
 8015b50:	2301      	movs	r3, #1
 8015b52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015b56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d106      	bne.n	8015b6c <f_mkdir+0xd0>
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd faff 	bl	8013164 <sync_window>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015b6c:	4b58      	ldr	r3, [pc, #352]	; (8015cd0 <f_mkdir+0x234>)
 8015b6e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d16c      	bne.n	8015c52 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7fd fbd3 	bl	8013328 <clust2sect>
 8015b82:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	3338      	adds	r3, #56	; 0x38
 8015b88:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	899b      	ldrh	r3, [r3, #12]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	2100      	movs	r1, #0
 8015b92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015b94:	f7fd f91d 	bl	8012dd2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015b98:	220b      	movs	r2, #11
 8015b9a:	2120      	movs	r1, #32
 8015b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015b9e:	f7fd f918 	bl	8012dd2 <mem_set>
					dir[DIR_Name] = '.';
 8015ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ba4:	222e      	movs	r2, #46	; 0x2e
 8015ba6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015baa:	330b      	adds	r3, #11
 8015bac:	2210      	movs	r2, #16
 8015bae:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bb2:	3316      	adds	r3, #22
 8015bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7fd f8be 	bl	8012d38 <st_dword>
					st_clust(fs, dir, dcl);
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7fe f8b0 	bl	8013d28 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bca:	3320      	adds	r3, #32
 8015bcc:	2220      	movs	r2, #32
 8015bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7fd f8dd 	bl	8012d90 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bd8:	3321      	adds	r3, #33	; 0x21
 8015bda:	222e      	movs	r2, #46	; 0x2e
 8015bdc:	701a      	strb	r2, [r3, #0]
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	781b      	ldrb	r3, [r3, #0]
 8015be6:	2b03      	cmp	r3, #3
 8015be8:	d106      	bne.n	8015bf8 <f_mkdir+0x15c>
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d101      	bne.n	8015bf8 <f_mkdir+0x15c>
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015bf8:	68b8      	ldr	r0, [r7, #8]
 8015bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bfc:	3320      	adds	r3, #32
 8015bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c00:	4619      	mov	r1, r3
 8015c02:	f7fe f891 	bl	8013d28 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	895b      	ldrh	r3, [r3, #10]
 8015c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8015c0c:	e01c      	b.n	8015c48 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8015c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015c1e:	68bb      	ldr	r3, [r7, #8]
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7fd fa9f 	bl	8013164 <sync_window>
 8015c26:	4603      	mov	r3, r0
 8015c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d10d      	bne.n	8015c50 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	899b      	ldrh	r3, [r3, #12]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	2100      	movs	r1, #0
 8015c3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c3e:	f7fd f8c8 	bl	8012dd2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c44:	3b01      	subs	r3, #1
 8015c46:	653b      	str	r3, [r7, #80]	; 0x50
 8015c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1df      	bne.n	8015c0e <f_mkdir+0x172>
 8015c4e:	e000      	b.n	8015c52 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8015c50:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d107      	bne.n	8015c6a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015c5a:	f107 030c 	add.w	r3, r7, #12
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fe f934 	bl	8013ecc <dir_register>
 8015c64:	4603      	mov	r3, r0
 8015c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d120      	bne.n	8015cb4 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c74:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c78:	3316      	adds	r3, #22
 8015c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7fd f85b 	bl	8012d38 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7fe f84d 	bl	8013d28 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c90:	330b      	adds	r3, #11
 8015c92:	2210      	movs	r2, #16
 8015c94:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	2201      	movs	r2, #1
 8015c9a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10e      	bne.n	8015cc2 <f_mkdir+0x226>
					res = sync_fs(fs);
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7fd face 	bl	8013248 <sync_fs>
 8015cac:	4603      	mov	r3, r0
 8015cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015cb2:	e006      	b.n	8015cc2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015cb4:	f107 030c 	add.w	r3, r7, #12
 8015cb8:	2200      	movs	r2, #0
 8015cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7fd fd39 	bl	8013734 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3758      	adds	r7, #88	; 0x58
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	274a0000 	.word	0x274a0000

08015cd4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b088      	sub	sp, #32
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
	int n = 0;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015ce8:	e017      	b.n	8015d1a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015cea:	f107 0310 	add.w	r3, r7, #16
 8015cee:	f107 0114 	add.w	r1, r7, #20
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f7ff f803 	bl	8014d00 <f_read>
		if (rc != 1) break;
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	2b01      	cmp	r3, #1
 8015cfe:	d112      	bne.n	8015d26 <f_gets+0x52>
		c = s[0];
 8015d00:	7d3b      	ldrb	r3, [r7, #20]
 8015d02:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8015d04:	69bb      	ldr	r3, [r7, #24]
 8015d06:	1c5a      	adds	r2, r3, #1
 8015d08:	61ba      	str	r2, [r7, #24]
 8015d0a:	7dfa      	ldrb	r2, [r7, #23]
 8015d0c:	701a      	strb	r2, [r3, #0]
		n++;
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	3301      	adds	r3, #1
 8015d12:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8015d14:	7dfb      	ldrb	r3, [r7, #23]
 8015d16:	2b0a      	cmp	r3, #10
 8015d18:	d007      	beq.n	8015d2a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	69fa      	ldr	r2, [r7, #28]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	dbe2      	blt.n	8015cea <f_gets+0x16>
 8015d24:	e002      	b.n	8015d2c <f_gets+0x58>
		if (rc != 1) break;
 8015d26:	bf00      	nop
 8015d28:	e000      	b.n	8015d2c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8015d2a:	bf00      	nop
	}
	*p = 0;
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015d32:	69fb      	ldr	r3, [r7, #28]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d001      	beq.n	8015d3c <f_gets+0x68>
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	e000      	b.n	8015d3e <f_gets+0x6a>
 8015d3c:	2300      	movs	r3, #0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3720      	adds	r7, #32
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
	...

08015d48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015d48:	b480      	push	{r7}
 8015d4a:	b087      	sub	sp, #28
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	4613      	mov	r3, r2
 8015d54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015d56:	2301      	movs	r3, #1
 8015d58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015d5e:	4b1f      	ldr	r3, [pc, #124]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d60:	7a5b      	ldrb	r3, [r3, #9]
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d131      	bne.n	8015dcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015d68:	4b1c      	ldr	r3, [pc, #112]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d6a:	7a5b      	ldrb	r3, [r3, #9]
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	461a      	mov	r2, r3
 8015d70:	4b1a      	ldr	r3, [pc, #104]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d72:	2100      	movs	r1, #0
 8015d74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015d76:	4b19      	ldr	r3, [pc, #100]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d78:	7a5b      	ldrb	r3, [r3, #9]
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	4a17      	ldr	r2, [pc, #92]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	4413      	add	r3, r2
 8015d82:	68fa      	ldr	r2, [r7, #12]
 8015d84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015d86:	4b15      	ldr	r3, [pc, #84]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d88:	7a5b      	ldrb	r3, [r3, #9]
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	4b13      	ldr	r3, [pc, #76]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d90:	4413      	add	r3, r2
 8015d92:	79fa      	ldrb	r2, [r7, #7]
 8015d94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015d96:	4b11      	ldr	r3, [pc, #68]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015d98:	7a5b      	ldrb	r3, [r3, #9]
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	1c5a      	adds	r2, r3, #1
 8015d9e:	b2d1      	uxtb	r1, r2
 8015da0:	4a0e      	ldr	r2, [pc, #56]	; (8015ddc <FATFS_LinkDriverEx+0x94>)
 8015da2:	7251      	strb	r1, [r2, #9]
 8015da4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015da6:	7dbb      	ldrb	r3, [r7, #22]
 8015da8:	3330      	adds	r3, #48	; 0x30
 8015daa:	b2da      	uxtb	r2, r3
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	3301      	adds	r3, #1
 8015db4:	223a      	movs	r2, #58	; 0x3a
 8015db6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	3302      	adds	r3, #2
 8015dbc:	222f      	movs	r2, #47	; 0x2f
 8015dbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	3303      	adds	r3, #3
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	371c      	adds	r7, #28
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop
 8015ddc:	2004768c 	.word	0x2004768c

08015de0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015dea:	2200      	movs	r2, #0
 8015dec:	6839      	ldr	r1, [r7, #0]
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7ff ffaa 	bl	8015d48 <FATFS_LinkDriverEx>
 8015df4:	4603      	mov	r3, r0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3708      	adds	r7, #8
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <_Znaj>:
 8015dfe:	f000 b800 	b.w	8015e02 <_Znwj>

08015e02 <_Znwj>:
 8015e02:	b510      	push	{r4, lr}
 8015e04:	2800      	cmp	r0, #0
 8015e06:	bf14      	ite	ne
 8015e08:	4604      	movne	r4, r0
 8015e0a:	2401      	moveq	r4, #1
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f000 f853 	bl	8015eb8 <malloc>
 8015e12:	b930      	cbnz	r0, 8015e22 <_Znwj+0x20>
 8015e14:	f000 f816 	bl	8015e44 <_ZSt15get_new_handlerv>
 8015e18:	b908      	cbnz	r0, 8015e1e <_Znwj+0x1c>
 8015e1a:	f000 f81b 	bl	8015e54 <abort>
 8015e1e:	4780      	blx	r0
 8015e20:	e7f4      	b.n	8015e0c <_Znwj+0xa>
 8015e22:	bd10      	pop	{r4, pc}

08015e24 <__cxa_guard_acquire>:
 8015e24:	6803      	ldr	r3, [r0, #0]
 8015e26:	07db      	lsls	r3, r3, #31
 8015e28:	d406      	bmi.n	8015e38 <__cxa_guard_acquire+0x14>
 8015e2a:	7843      	ldrb	r3, [r0, #1]
 8015e2c:	b103      	cbz	r3, 8015e30 <__cxa_guard_acquire+0xc>
 8015e2e:	deff      	udf	#255	; 0xff
 8015e30:	2301      	movs	r3, #1
 8015e32:	7043      	strb	r3, [r0, #1]
 8015e34:	4618      	mov	r0, r3
 8015e36:	4770      	bx	lr
 8015e38:	2000      	movs	r0, #0
 8015e3a:	4770      	bx	lr

08015e3c <__cxa_guard_release>:
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	6003      	str	r3, [r0, #0]
 8015e40:	4770      	bx	lr
	...

08015e44 <_ZSt15get_new_handlerv>:
 8015e44:	4b02      	ldr	r3, [pc, #8]	; (8015e50 <_ZSt15get_new_handlerv+0xc>)
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	f3bf 8f5b 	dmb	ish
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	20047698 	.word	0x20047698

08015e54 <abort>:
 8015e54:	b508      	push	{r3, lr}
 8015e56:	2006      	movs	r0, #6
 8015e58:	f000 ff62 	bl	8016d20 <raise>
 8015e5c:	2001      	movs	r0, #1
 8015e5e:	f7f1 ffed 	bl	8007e3c <_exit>
	...

08015e64 <__errno>:
 8015e64:	4b01      	ldr	r3, [pc, #4]	; (8015e6c <__errno+0x8>)
 8015e66:	6818      	ldr	r0, [r3, #0]
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	2000000c 	.word	0x2000000c

08015e70 <__libc_init_array>:
 8015e70:	b570      	push	{r4, r5, r6, lr}
 8015e72:	4e0d      	ldr	r6, [pc, #52]	; (8015ea8 <__libc_init_array+0x38>)
 8015e74:	4c0d      	ldr	r4, [pc, #52]	; (8015eac <__libc_init_array+0x3c>)
 8015e76:	1ba4      	subs	r4, r4, r6
 8015e78:	10a4      	asrs	r4, r4, #2
 8015e7a:	2500      	movs	r5, #0
 8015e7c:	42a5      	cmp	r5, r4
 8015e7e:	d109      	bne.n	8015e94 <__libc_init_array+0x24>
 8015e80:	4e0b      	ldr	r6, [pc, #44]	; (8015eb0 <__libc_init_array+0x40>)
 8015e82:	4c0c      	ldr	r4, [pc, #48]	; (8015eb4 <__libc_init_array+0x44>)
 8015e84:	f004 fa2a 	bl	801a2dc <_init>
 8015e88:	1ba4      	subs	r4, r4, r6
 8015e8a:	10a4      	asrs	r4, r4, #2
 8015e8c:	2500      	movs	r5, #0
 8015e8e:	42a5      	cmp	r5, r4
 8015e90:	d105      	bne.n	8015e9e <__libc_init_array+0x2e>
 8015e92:	bd70      	pop	{r4, r5, r6, pc}
 8015e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e98:	4798      	blx	r3
 8015e9a:	3501      	adds	r5, #1
 8015e9c:	e7ee      	b.n	8015e7c <__libc_init_array+0xc>
 8015e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ea2:	4798      	blx	r3
 8015ea4:	3501      	adds	r5, #1
 8015ea6:	e7f2      	b.n	8015e8e <__libc_init_array+0x1e>
 8015ea8:	0801ac3c 	.word	0x0801ac3c
 8015eac:	0801ac3c 	.word	0x0801ac3c
 8015eb0:	0801ac3c 	.word	0x0801ac3c
 8015eb4:	0801ac44 	.word	0x0801ac44

08015eb8 <malloc>:
 8015eb8:	4b02      	ldr	r3, [pc, #8]	; (8015ec4 <malloc+0xc>)
 8015eba:	4601      	mov	r1, r0
 8015ebc:	6818      	ldr	r0, [r3, #0]
 8015ebe:	f000 b859 	b.w	8015f74 <_malloc_r>
 8015ec2:	bf00      	nop
 8015ec4:	2000000c 	.word	0x2000000c

08015ec8 <memset>:
 8015ec8:	4402      	add	r2, r0
 8015eca:	4603      	mov	r3, r0
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	d100      	bne.n	8015ed2 <memset+0xa>
 8015ed0:	4770      	bx	lr
 8015ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8015ed6:	e7f9      	b.n	8015ecc <memset+0x4>

08015ed8 <_free_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4605      	mov	r5, r0
 8015edc:	2900      	cmp	r1, #0
 8015ede:	d045      	beq.n	8015f6c <_free_r+0x94>
 8015ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ee4:	1f0c      	subs	r4, r1, #4
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	bfb8      	it	lt
 8015eea:	18e4      	addlt	r4, r4, r3
 8015eec:	f003 f835 	bl	8018f5a <__malloc_lock>
 8015ef0:	4a1f      	ldr	r2, [pc, #124]	; (8015f70 <_free_r+0x98>)
 8015ef2:	6813      	ldr	r3, [r2, #0]
 8015ef4:	4610      	mov	r0, r2
 8015ef6:	b933      	cbnz	r3, 8015f06 <_free_r+0x2e>
 8015ef8:	6063      	str	r3, [r4, #4]
 8015efa:	6014      	str	r4, [r2, #0]
 8015efc:	4628      	mov	r0, r5
 8015efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f02:	f003 b82b 	b.w	8018f5c <__malloc_unlock>
 8015f06:	42a3      	cmp	r3, r4
 8015f08:	d90c      	bls.n	8015f24 <_free_r+0x4c>
 8015f0a:	6821      	ldr	r1, [r4, #0]
 8015f0c:	1862      	adds	r2, r4, r1
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	bf04      	itt	eq
 8015f12:	681a      	ldreq	r2, [r3, #0]
 8015f14:	685b      	ldreq	r3, [r3, #4]
 8015f16:	6063      	str	r3, [r4, #4]
 8015f18:	bf04      	itt	eq
 8015f1a:	1852      	addeq	r2, r2, r1
 8015f1c:	6022      	streq	r2, [r4, #0]
 8015f1e:	6004      	str	r4, [r0, #0]
 8015f20:	e7ec      	b.n	8015efc <_free_r+0x24>
 8015f22:	4613      	mov	r3, r2
 8015f24:	685a      	ldr	r2, [r3, #4]
 8015f26:	b10a      	cbz	r2, 8015f2c <_free_r+0x54>
 8015f28:	42a2      	cmp	r2, r4
 8015f2a:	d9fa      	bls.n	8015f22 <_free_r+0x4a>
 8015f2c:	6819      	ldr	r1, [r3, #0]
 8015f2e:	1858      	adds	r0, r3, r1
 8015f30:	42a0      	cmp	r0, r4
 8015f32:	d10b      	bne.n	8015f4c <_free_r+0x74>
 8015f34:	6820      	ldr	r0, [r4, #0]
 8015f36:	4401      	add	r1, r0
 8015f38:	1858      	adds	r0, r3, r1
 8015f3a:	4282      	cmp	r2, r0
 8015f3c:	6019      	str	r1, [r3, #0]
 8015f3e:	d1dd      	bne.n	8015efc <_free_r+0x24>
 8015f40:	6810      	ldr	r0, [r2, #0]
 8015f42:	6852      	ldr	r2, [r2, #4]
 8015f44:	605a      	str	r2, [r3, #4]
 8015f46:	4401      	add	r1, r0
 8015f48:	6019      	str	r1, [r3, #0]
 8015f4a:	e7d7      	b.n	8015efc <_free_r+0x24>
 8015f4c:	d902      	bls.n	8015f54 <_free_r+0x7c>
 8015f4e:	230c      	movs	r3, #12
 8015f50:	602b      	str	r3, [r5, #0]
 8015f52:	e7d3      	b.n	8015efc <_free_r+0x24>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	1821      	adds	r1, r4, r0
 8015f58:	428a      	cmp	r2, r1
 8015f5a:	bf04      	itt	eq
 8015f5c:	6811      	ldreq	r1, [r2, #0]
 8015f5e:	6852      	ldreq	r2, [r2, #4]
 8015f60:	6062      	str	r2, [r4, #4]
 8015f62:	bf04      	itt	eq
 8015f64:	1809      	addeq	r1, r1, r0
 8015f66:	6021      	streq	r1, [r4, #0]
 8015f68:	605c      	str	r4, [r3, #4]
 8015f6a:	e7c7      	b.n	8015efc <_free_r+0x24>
 8015f6c:	bd38      	pop	{r3, r4, r5, pc}
 8015f6e:	bf00      	nop
 8015f70:	2004769c 	.word	0x2004769c

08015f74 <_malloc_r>:
 8015f74:	b570      	push	{r4, r5, r6, lr}
 8015f76:	1ccd      	adds	r5, r1, #3
 8015f78:	f025 0503 	bic.w	r5, r5, #3
 8015f7c:	3508      	adds	r5, #8
 8015f7e:	2d0c      	cmp	r5, #12
 8015f80:	bf38      	it	cc
 8015f82:	250c      	movcc	r5, #12
 8015f84:	2d00      	cmp	r5, #0
 8015f86:	4606      	mov	r6, r0
 8015f88:	db01      	blt.n	8015f8e <_malloc_r+0x1a>
 8015f8a:	42a9      	cmp	r1, r5
 8015f8c:	d903      	bls.n	8015f96 <_malloc_r+0x22>
 8015f8e:	230c      	movs	r3, #12
 8015f90:	6033      	str	r3, [r6, #0]
 8015f92:	2000      	movs	r0, #0
 8015f94:	bd70      	pop	{r4, r5, r6, pc}
 8015f96:	f002 ffe0 	bl	8018f5a <__malloc_lock>
 8015f9a:	4a21      	ldr	r2, [pc, #132]	; (8016020 <_malloc_r+0xac>)
 8015f9c:	6814      	ldr	r4, [r2, #0]
 8015f9e:	4621      	mov	r1, r4
 8015fa0:	b991      	cbnz	r1, 8015fc8 <_malloc_r+0x54>
 8015fa2:	4c20      	ldr	r4, [pc, #128]	; (8016024 <_malloc_r+0xb0>)
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	b91b      	cbnz	r3, 8015fb0 <_malloc_r+0x3c>
 8015fa8:	4630      	mov	r0, r6
 8015faa:	f000 fe7b 	bl	8016ca4 <_sbrk_r>
 8015fae:	6020      	str	r0, [r4, #0]
 8015fb0:	4629      	mov	r1, r5
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	f000 fe76 	bl	8016ca4 <_sbrk_r>
 8015fb8:	1c43      	adds	r3, r0, #1
 8015fba:	d124      	bne.n	8016006 <_malloc_r+0x92>
 8015fbc:	230c      	movs	r3, #12
 8015fbe:	6033      	str	r3, [r6, #0]
 8015fc0:	4630      	mov	r0, r6
 8015fc2:	f002 ffcb 	bl	8018f5c <__malloc_unlock>
 8015fc6:	e7e4      	b.n	8015f92 <_malloc_r+0x1e>
 8015fc8:	680b      	ldr	r3, [r1, #0]
 8015fca:	1b5b      	subs	r3, r3, r5
 8015fcc:	d418      	bmi.n	8016000 <_malloc_r+0x8c>
 8015fce:	2b0b      	cmp	r3, #11
 8015fd0:	d90f      	bls.n	8015ff2 <_malloc_r+0x7e>
 8015fd2:	600b      	str	r3, [r1, #0]
 8015fd4:	50cd      	str	r5, [r1, r3]
 8015fd6:	18cc      	adds	r4, r1, r3
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f002 ffbf 	bl	8018f5c <__malloc_unlock>
 8015fde:	f104 000b 	add.w	r0, r4, #11
 8015fe2:	1d23      	adds	r3, r4, #4
 8015fe4:	f020 0007 	bic.w	r0, r0, #7
 8015fe8:	1ac3      	subs	r3, r0, r3
 8015fea:	d0d3      	beq.n	8015f94 <_malloc_r+0x20>
 8015fec:	425a      	negs	r2, r3
 8015fee:	50e2      	str	r2, [r4, r3]
 8015ff0:	e7d0      	b.n	8015f94 <_malloc_r+0x20>
 8015ff2:	428c      	cmp	r4, r1
 8015ff4:	684b      	ldr	r3, [r1, #4]
 8015ff6:	bf16      	itet	ne
 8015ff8:	6063      	strne	r3, [r4, #4]
 8015ffa:	6013      	streq	r3, [r2, #0]
 8015ffc:	460c      	movne	r4, r1
 8015ffe:	e7eb      	b.n	8015fd8 <_malloc_r+0x64>
 8016000:	460c      	mov	r4, r1
 8016002:	6849      	ldr	r1, [r1, #4]
 8016004:	e7cc      	b.n	8015fa0 <_malloc_r+0x2c>
 8016006:	1cc4      	adds	r4, r0, #3
 8016008:	f024 0403 	bic.w	r4, r4, #3
 801600c:	42a0      	cmp	r0, r4
 801600e:	d005      	beq.n	801601c <_malloc_r+0xa8>
 8016010:	1a21      	subs	r1, r4, r0
 8016012:	4630      	mov	r0, r6
 8016014:	f000 fe46 	bl	8016ca4 <_sbrk_r>
 8016018:	3001      	adds	r0, #1
 801601a:	d0cf      	beq.n	8015fbc <_malloc_r+0x48>
 801601c:	6025      	str	r5, [r4, #0]
 801601e:	e7db      	b.n	8015fd8 <_malloc_r+0x64>
 8016020:	2004769c 	.word	0x2004769c
 8016024:	200476a0 	.word	0x200476a0

08016028 <__cvt>:
 8016028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801602c:	ec55 4b10 	vmov	r4, r5, d0
 8016030:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016032:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016036:	2d00      	cmp	r5, #0
 8016038:	460e      	mov	r6, r1
 801603a:	4691      	mov	r9, r2
 801603c:	4619      	mov	r1, r3
 801603e:	bfb8      	it	lt
 8016040:	4622      	movlt	r2, r4
 8016042:	462b      	mov	r3, r5
 8016044:	f027 0720 	bic.w	r7, r7, #32
 8016048:	bfbb      	ittet	lt
 801604a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801604e:	461d      	movlt	r5, r3
 8016050:	2300      	movge	r3, #0
 8016052:	232d      	movlt	r3, #45	; 0x2d
 8016054:	bfb8      	it	lt
 8016056:	4614      	movlt	r4, r2
 8016058:	2f46      	cmp	r7, #70	; 0x46
 801605a:	700b      	strb	r3, [r1, #0]
 801605c:	d004      	beq.n	8016068 <__cvt+0x40>
 801605e:	2f45      	cmp	r7, #69	; 0x45
 8016060:	d100      	bne.n	8016064 <__cvt+0x3c>
 8016062:	3601      	adds	r6, #1
 8016064:	2102      	movs	r1, #2
 8016066:	e000      	b.n	801606a <__cvt+0x42>
 8016068:	2103      	movs	r1, #3
 801606a:	ab03      	add	r3, sp, #12
 801606c:	9301      	str	r3, [sp, #4]
 801606e:	ab02      	add	r3, sp, #8
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	4632      	mov	r2, r6
 8016074:	4653      	mov	r3, sl
 8016076:	ec45 4b10 	vmov	d0, r4, r5
 801607a:	f001 fe51 	bl	8017d20 <_dtoa_r>
 801607e:	2f47      	cmp	r7, #71	; 0x47
 8016080:	4680      	mov	r8, r0
 8016082:	d102      	bne.n	801608a <__cvt+0x62>
 8016084:	f019 0f01 	tst.w	r9, #1
 8016088:	d026      	beq.n	80160d8 <__cvt+0xb0>
 801608a:	2f46      	cmp	r7, #70	; 0x46
 801608c:	eb08 0906 	add.w	r9, r8, r6
 8016090:	d111      	bne.n	80160b6 <__cvt+0x8e>
 8016092:	f898 3000 	ldrb.w	r3, [r8]
 8016096:	2b30      	cmp	r3, #48	; 0x30
 8016098:	d10a      	bne.n	80160b0 <__cvt+0x88>
 801609a:	2200      	movs	r2, #0
 801609c:	2300      	movs	r3, #0
 801609e:	4620      	mov	r0, r4
 80160a0:	4629      	mov	r1, r5
 80160a2:	f7ea fd29 	bl	8000af8 <__aeabi_dcmpeq>
 80160a6:	b918      	cbnz	r0, 80160b0 <__cvt+0x88>
 80160a8:	f1c6 0601 	rsb	r6, r6, #1
 80160ac:	f8ca 6000 	str.w	r6, [sl]
 80160b0:	f8da 3000 	ldr.w	r3, [sl]
 80160b4:	4499      	add	r9, r3
 80160b6:	2200      	movs	r2, #0
 80160b8:	2300      	movs	r3, #0
 80160ba:	4620      	mov	r0, r4
 80160bc:	4629      	mov	r1, r5
 80160be:	f7ea fd1b 	bl	8000af8 <__aeabi_dcmpeq>
 80160c2:	b938      	cbnz	r0, 80160d4 <__cvt+0xac>
 80160c4:	2230      	movs	r2, #48	; 0x30
 80160c6:	9b03      	ldr	r3, [sp, #12]
 80160c8:	454b      	cmp	r3, r9
 80160ca:	d205      	bcs.n	80160d8 <__cvt+0xb0>
 80160cc:	1c59      	adds	r1, r3, #1
 80160ce:	9103      	str	r1, [sp, #12]
 80160d0:	701a      	strb	r2, [r3, #0]
 80160d2:	e7f8      	b.n	80160c6 <__cvt+0x9e>
 80160d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80160d8:	9b03      	ldr	r3, [sp, #12]
 80160da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160dc:	eba3 0308 	sub.w	r3, r3, r8
 80160e0:	4640      	mov	r0, r8
 80160e2:	6013      	str	r3, [r2, #0]
 80160e4:	b004      	add	sp, #16
 80160e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080160ea <__exponent>:
 80160ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160ec:	2900      	cmp	r1, #0
 80160ee:	4604      	mov	r4, r0
 80160f0:	bfba      	itte	lt
 80160f2:	4249      	neglt	r1, r1
 80160f4:	232d      	movlt	r3, #45	; 0x2d
 80160f6:	232b      	movge	r3, #43	; 0x2b
 80160f8:	2909      	cmp	r1, #9
 80160fa:	f804 2b02 	strb.w	r2, [r4], #2
 80160fe:	7043      	strb	r3, [r0, #1]
 8016100:	dd20      	ble.n	8016144 <__exponent+0x5a>
 8016102:	f10d 0307 	add.w	r3, sp, #7
 8016106:	461f      	mov	r7, r3
 8016108:	260a      	movs	r6, #10
 801610a:	fb91 f5f6 	sdiv	r5, r1, r6
 801610e:	fb06 1115 	mls	r1, r6, r5, r1
 8016112:	3130      	adds	r1, #48	; 0x30
 8016114:	2d09      	cmp	r5, #9
 8016116:	f803 1c01 	strb.w	r1, [r3, #-1]
 801611a:	f103 32ff 	add.w	r2, r3, #4294967295
 801611e:	4629      	mov	r1, r5
 8016120:	dc09      	bgt.n	8016136 <__exponent+0x4c>
 8016122:	3130      	adds	r1, #48	; 0x30
 8016124:	3b02      	subs	r3, #2
 8016126:	f802 1c01 	strb.w	r1, [r2, #-1]
 801612a:	42bb      	cmp	r3, r7
 801612c:	4622      	mov	r2, r4
 801612e:	d304      	bcc.n	801613a <__exponent+0x50>
 8016130:	1a10      	subs	r0, r2, r0
 8016132:	b003      	add	sp, #12
 8016134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016136:	4613      	mov	r3, r2
 8016138:	e7e7      	b.n	801610a <__exponent+0x20>
 801613a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801613e:	f804 2b01 	strb.w	r2, [r4], #1
 8016142:	e7f2      	b.n	801612a <__exponent+0x40>
 8016144:	2330      	movs	r3, #48	; 0x30
 8016146:	4419      	add	r1, r3
 8016148:	7083      	strb	r3, [r0, #2]
 801614a:	1d02      	adds	r2, r0, #4
 801614c:	70c1      	strb	r1, [r0, #3]
 801614e:	e7ef      	b.n	8016130 <__exponent+0x46>

08016150 <_printf_float>:
 8016150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016154:	b08d      	sub	sp, #52	; 0x34
 8016156:	460c      	mov	r4, r1
 8016158:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801615c:	4616      	mov	r6, r2
 801615e:	461f      	mov	r7, r3
 8016160:	4605      	mov	r5, r0
 8016162:	f002 fecf 	bl	8018f04 <_localeconv_r>
 8016166:	6803      	ldr	r3, [r0, #0]
 8016168:	9304      	str	r3, [sp, #16]
 801616a:	4618      	mov	r0, r3
 801616c:	f7ea f848 	bl	8000200 <strlen>
 8016170:	2300      	movs	r3, #0
 8016172:	930a      	str	r3, [sp, #40]	; 0x28
 8016174:	f8d8 3000 	ldr.w	r3, [r8]
 8016178:	9005      	str	r0, [sp, #20]
 801617a:	3307      	adds	r3, #7
 801617c:	f023 0307 	bic.w	r3, r3, #7
 8016180:	f103 0208 	add.w	r2, r3, #8
 8016184:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016188:	f8d4 b000 	ldr.w	fp, [r4]
 801618c:	f8c8 2000 	str.w	r2, [r8]
 8016190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016194:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016198:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801619c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161a0:	9307      	str	r3, [sp, #28]
 80161a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80161a6:	f04f 32ff 	mov.w	r2, #4294967295
 80161aa:	4ba7      	ldr	r3, [pc, #668]	; (8016448 <_printf_float+0x2f8>)
 80161ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161b0:	f7ea fcd4 	bl	8000b5c <__aeabi_dcmpun>
 80161b4:	bb70      	cbnz	r0, 8016214 <_printf_float+0xc4>
 80161b6:	f04f 32ff 	mov.w	r2, #4294967295
 80161ba:	4ba3      	ldr	r3, [pc, #652]	; (8016448 <_printf_float+0x2f8>)
 80161bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161c0:	f7ea fcae 	bl	8000b20 <__aeabi_dcmple>
 80161c4:	bb30      	cbnz	r0, 8016214 <_printf_float+0xc4>
 80161c6:	2200      	movs	r2, #0
 80161c8:	2300      	movs	r3, #0
 80161ca:	4640      	mov	r0, r8
 80161cc:	4649      	mov	r1, r9
 80161ce:	f7ea fc9d 	bl	8000b0c <__aeabi_dcmplt>
 80161d2:	b110      	cbz	r0, 80161da <_printf_float+0x8a>
 80161d4:	232d      	movs	r3, #45	; 0x2d
 80161d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161da:	4a9c      	ldr	r2, [pc, #624]	; (801644c <_printf_float+0x2fc>)
 80161dc:	4b9c      	ldr	r3, [pc, #624]	; (8016450 <_printf_float+0x300>)
 80161de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80161e2:	bf8c      	ite	hi
 80161e4:	4690      	movhi	r8, r2
 80161e6:	4698      	movls	r8, r3
 80161e8:	2303      	movs	r3, #3
 80161ea:	f02b 0204 	bic.w	r2, fp, #4
 80161ee:	6123      	str	r3, [r4, #16]
 80161f0:	6022      	str	r2, [r4, #0]
 80161f2:	f04f 0900 	mov.w	r9, #0
 80161f6:	9700      	str	r7, [sp, #0]
 80161f8:	4633      	mov	r3, r6
 80161fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80161fc:	4621      	mov	r1, r4
 80161fe:	4628      	mov	r0, r5
 8016200:	f000 f9e6 	bl	80165d0 <_printf_common>
 8016204:	3001      	adds	r0, #1
 8016206:	f040 808d 	bne.w	8016324 <_printf_float+0x1d4>
 801620a:	f04f 30ff 	mov.w	r0, #4294967295
 801620e:	b00d      	add	sp, #52	; 0x34
 8016210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016214:	4642      	mov	r2, r8
 8016216:	464b      	mov	r3, r9
 8016218:	4640      	mov	r0, r8
 801621a:	4649      	mov	r1, r9
 801621c:	f7ea fc9e 	bl	8000b5c <__aeabi_dcmpun>
 8016220:	b110      	cbz	r0, 8016228 <_printf_float+0xd8>
 8016222:	4a8c      	ldr	r2, [pc, #560]	; (8016454 <_printf_float+0x304>)
 8016224:	4b8c      	ldr	r3, [pc, #560]	; (8016458 <_printf_float+0x308>)
 8016226:	e7da      	b.n	80161de <_printf_float+0x8e>
 8016228:	6861      	ldr	r1, [r4, #4]
 801622a:	1c4b      	adds	r3, r1, #1
 801622c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016230:	a80a      	add	r0, sp, #40	; 0x28
 8016232:	d13e      	bne.n	80162b2 <_printf_float+0x162>
 8016234:	2306      	movs	r3, #6
 8016236:	6063      	str	r3, [r4, #4]
 8016238:	2300      	movs	r3, #0
 801623a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801623e:	ab09      	add	r3, sp, #36	; 0x24
 8016240:	9300      	str	r3, [sp, #0]
 8016242:	ec49 8b10 	vmov	d0, r8, r9
 8016246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801624a:	6022      	str	r2, [r4, #0]
 801624c:	f8cd a004 	str.w	sl, [sp, #4]
 8016250:	6861      	ldr	r1, [r4, #4]
 8016252:	4628      	mov	r0, r5
 8016254:	f7ff fee8 	bl	8016028 <__cvt>
 8016258:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801625c:	2b47      	cmp	r3, #71	; 0x47
 801625e:	4680      	mov	r8, r0
 8016260:	d109      	bne.n	8016276 <_printf_float+0x126>
 8016262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016264:	1cd8      	adds	r0, r3, #3
 8016266:	db02      	blt.n	801626e <_printf_float+0x11e>
 8016268:	6862      	ldr	r2, [r4, #4]
 801626a:	4293      	cmp	r3, r2
 801626c:	dd47      	ble.n	80162fe <_printf_float+0x1ae>
 801626e:	f1aa 0a02 	sub.w	sl, sl, #2
 8016272:	fa5f fa8a 	uxtb.w	sl, sl
 8016276:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801627a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801627c:	d824      	bhi.n	80162c8 <_printf_float+0x178>
 801627e:	3901      	subs	r1, #1
 8016280:	4652      	mov	r2, sl
 8016282:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016286:	9109      	str	r1, [sp, #36]	; 0x24
 8016288:	f7ff ff2f 	bl	80160ea <__exponent>
 801628c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801628e:	1813      	adds	r3, r2, r0
 8016290:	2a01      	cmp	r2, #1
 8016292:	4681      	mov	r9, r0
 8016294:	6123      	str	r3, [r4, #16]
 8016296:	dc02      	bgt.n	801629e <_printf_float+0x14e>
 8016298:	6822      	ldr	r2, [r4, #0]
 801629a:	07d1      	lsls	r1, r2, #31
 801629c:	d501      	bpl.n	80162a2 <_printf_float+0x152>
 801629e:	3301      	adds	r3, #1
 80162a0:	6123      	str	r3, [r4, #16]
 80162a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d0a5      	beq.n	80161f6 <_printf_float+0xa6>
 80162aa:	232d      	movs	r3, #45	; 0x2d
 80162ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162b0:	e7a1      	b.n	80161f6 <_printf_float+0xa6>
 80162b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80162b6:	f000 8177 	beq.w	80165a8 <_printf_float+0x458>
 80162ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80162be:	d1bb      	bne.n	8016238 <_printf_float+0xe8>
 80162c0:	2900      	cmp	r1, #0
 80162c2:	d1b9      	bne.n	8016238 <_printf_float+0xe8>
 80162c4:	2301      	movs	r3, #1
 80162c6:	e7b6      	b.n	8016236 <_printf_float+0xe6>
 80162c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80162cc:	d119      	bne.n	8016302 <_printf_float+0x1b2>
 80162ce:	2900      	cmp	r1, #0
 80162d0:	6863      	ldr	r3, [r4, #4]
 80162d2:	dd0c      	ble.n	80162ee <_printf_float+0x19e>
 80162d4:	6121      	str	r1, [r4, #16]
 80162d6:	b913      	cbnz	r3, 80162de <_printf_float+0x18e>
 80162d8:	6822      	ldr	r2, [r4, #0]
 80162da:	07d2      	lsls	r2, r2, #31
 80162dc:	d502      	bpl.n	80162e4 <_printf_float+0x194>
 80162de:	3301      	adds	r3, #1
 80162e0:	440b      	add	r3, r1
 80162e2:	6123      	str	r3, [r4, #16]
 80162e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80162e8:	f04f 0900 	mov.w	r9, #0
 80162ec:	e7d9      	b.n	80162a2 <_printf_float+0x152>
 80162ee:	b913      	cbnz	r3, 80162f6 <_printf_float+0x1a6>
 80162f0:	6822      	ldr	r2, [r4, #0]
 80162f2:	07d0      	lsls	r0, r2, #31
 80162f4:	d501      	bpl.n	80162fa <_printf_float+0x1aa>
 80162f6:	3302      	adds	r3, #2
 80162f8:	e7f3      	b.n	80162e2 <_printf_float+0x192>
 80162fa:	2301      	movs	r3, #1
 80162fc:	e7f1      	b.n	80162e2 <_printf_float+0x192>
 80162fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8016302:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016306:	4293      	cmp	r3, r2
 8016308:	db05      	blt.n	8016316 <_printf_float+0x1c6>
 801630a:	6822      	ldr	r2, [r4, #0]
 801630c:	6123      	str	r3, [r4, #16]
 801630e:	07d1      	lsls	r1, r2, #31
 8016310:	d5e8      	bpl.n	80162e4 <_printf_float+0x194>
 8016312:	3301      	adds	r3, #1
 8016314:	e7e5      	b.n	80162e2 <_printf_float+0x192>
 8016316:	2b00      	cmp	r3, #0
 8016318:	bfd4      	ite	le
 801631a:	f1c3 0302 	rsble	r3, r3, #2
 801631e:	2301      	movgt	r3, #1
 8016320:	4413      	add	r3, r2
 8016322:	e7de      	b.n	80162e2 <_printf_float+0x192>
 8016324:	6823      	ldr	r3, [r4, #0]
 8016326:	055a      	lsls	r2, r3, #21
 8016328:	d407      	bmi.n	801633a <_printf_float+0x1ea>
 801632a:	6923      	ldr	r3, [r4, #16]
 801632c:	4642      	mov	r2, r8
 801632e:	4631      	mov	r1, r6
 8016330:	4628      	mov	r0, r5
 8016332:	47b8      	blx	r7
 8016334:	3001      	adds	r0, #1
 8016336:	d12b      	bne.n	8016390 <_printf_float+0x240>
 8016338:	e767      	b.n	801620a <_printf_float+0xba>
 801633a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801633e:	f240 80dc 	bls.w	80164fa <_printf_float+0x3aa>
 8016342:	2200      	movs	r2, #0
 8016344:	2300      	movs	r3, #0
 8016346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801634a:	f7ea fbd5 	bl	8000af8 <__aeabi_dcmpeq>
 801634e:	2800      	cmp	r0, #0
 8016350:	d033      	beq.n	80163ba <_printf_float+0x26a>
 8016352:	2301      	movs	r3, #1
 8016354:	4a41      	ldr	r2, [pc, #260]	; (801645c <_printf_float+0x30c>)
 8016356:	4631      	mov	r1, r6
 8016358:	4628      	mov	r0, r5
 801635a:	47b8      	blx	r7
 801635c:	3001      	adds	r0, #1
 801635e:	f43f af54 	beq.w	801620a <_printf_float+0xba>
 8016362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016366:	429a      	cmp	r2, r3
 8016368:	db02      	blt.n	8016370 <_printf_float+0x220>
 801636a:	6823      	ldr	r3, [r4, #0]
 801636c:	07d8      	lsls	r0, r3, #31
 801636e:	d50f      	bpl.n	8016390 <_printf_float+0x240>
 8016370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016374:	4631      	mov	r1, r6
 8016376:	4628      	mov	r0, r5
 8016378:	47b8      	blx	r7
 801637a:	3001      	adds	r0, #1
 801637c:	f43f af45 	beq.w	801620a <_printf_float+0xba>
 8016380:	f04f 0800 	mov.w	r8, #0
 8016384:	f104 091a 	add.w	r9, r4, #26
 8016388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801638a:	3b01      	subs	r3, #1
 801638c:	4543      	cmp	r3, r8
 801638e:	dc09      	bgt.n	80163a4 <_printf_float+0x254>
 8016390:	6823      	ldr	r3, [r4, #0]
 8016392:	079b      	lsls	r3, r3, #30
 8016394:	f100 8103 	bmi.w	801659e <_printf_float+0x44e>
 8016398:	68e0      	ldr	r0, [r4, #12]
 801639a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801639c:	4298      	cmp	r0, r3
 801639e:	bfb8      	it	lt
 80163a0:	4618      	movlt	r0, r3
 80163a2:	e734      	b.n	801620e <_printf_float+0xbe>
 80163a4:	2301      	movs	r3, #1
 80163a6:	464a      	mov	r2, r9
 80163a8:	4631      	mov	r1, r6
 80163aa:	4628      	mov	r0, r5
 80163ac:	47b8      	blx	r7
 80163ae:	3001      	adds	r0, #1
 80163b0:	f43f af2b 	beq.w	801620a <_printf_float+0xba>
 80163b4:	f108 0801 	add.w	r8, r8, #1
 80163b8:	e7e6      	b.n	8016388 <_printf_float+0x238>
 80163ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163bc:	2b00      	cmp	r3, #0
 80163be:	dc2b      	bgt.n	8016418 <_printf_float+0x2c8>
 80163c0:	2301      	movs	r3, #1
 80163c2:	4a26      	ldr	r2, [pc, #152]	; (801645c <_printf_float+0x30c>)
 80163c4:	4631      	mov	r1, r6
 80163c6:	4628      	mov	r0, r5
 80163c8:	47b8      	blx	r7
 80163ca:	3001      	adds	r0, #1
 80163cc:	f43f af1d 	beq.w	801620a <_printf_float+0xba>
 80163d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163d2:	b923      	cbnz	r3, 80163de <_printf_float+0x28e>
 80163d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163d6:	b913      	cbnz	r3, 80163de <_printf_float+0x28e>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	07d9      	lsls	r1, r3, #31
 80163dc:	d5d8      	bpl.n	8016390 <_printf_float+0x240>
 80163de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163e2:	4631      	mov	r1, r6
 80163e4:	4628      	mov	r0, r5
 80163e6:	47b8      	blx	r7
 80163e8:	3001      	adds	r0, #1
 80163ea:	f43f af0e 	beq.w	801620a <_printf_float+0xba>
 80163ee:	f04f 0900 	mov.w	r9, #0
 80163f2:	f104 0a1a 	add.w	sl, r4, #26
 80163f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163f8:	425b      	negs	r3, r3
 80163fa:	454b      	cmp	r3, r9
 80163fc:	dc01      	bgt.n	8016402 <_printf_float+0x2b2>
 80163fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016400:	e794      	b.n	801632c <_printf_float+0x1dc>
 8016402:	2301      	movs	r3, #1
 8016404:	4652      	mov	r2, sl
 8016406:	4631      	mov	r1, r6
 8016408:	4628      	mov	r0, r5
 801640a:	47b8      	blx	r7
 801640c:	3001      	adds	r0, #1
 801640e:	f43f aefc 	beq.w	801620a <_printf_float+0xba>
 8016412:	f109 0901 	add.w	r9, r9, #1
 8016416:	e7ee      	b.n	80163f6 <_printf_float+0x2a6>
 8016418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801641a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801641c:	429a      	cmp	r2, r3
 801641e:	bfa8      	it	ge
 8016420:	461a      	movge	r2, r3
 8016422:	2a00      	cmp	r2, #0
 8016424:	4691      	mov	r9, r2
 8016426:	dd07      	ble.n	8016438 <_printf_float+0x2e8>
 8016428:	4613      	mov	r3, r2
 801642a:	4631      	mov	r1, r6
 801642c:	4642      	mov	r2, r8
 801642e:	4628      	mov	r0, r5
 8016430:	47b8      	blx	r7
 8016432:	3001      	adds	r0, #1
 8016434:	f43f aee9 	beq.w	801620a <_printf_float+0xba>
 8016438:	f104 031a 	add.w	r3, r4, #26
 801643c:	f04f 0b00 	mov.w	fp, #0
 8016440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016444:	9306      	str	r3, [sp, #24]
 8016446:	e015      	b.n	8016474 <_printf_float+0x324>
 8016448:	7fefffff 	.word	0x7fefffff
 801644c:	0801a90c 	.word	0x0801a90c
 8016450:	0801a908 	.word	0x0801a908
 8016454:	0801a914 	.word	0x0801a914
 8016458:	0801a910 	.word	0x0801a910
 801645c:	0801aacb 	.word	0x0801aacb
 8016460:	2301      	movs	r3, #1
 8016462:	9a06      	ldr	r2, [sp, #24]
 8016464:	4631      	mov	r1, r6
 8016466:	4628      	mov	r0, r5
 8016468:	47b8      	blx	r7
 801646a:	3001      	adds	r0, #1
 801646c:	f43f aecd 	beq.w	801620a <_printf_float+0xba>
 8016470:	f10b 0b01 	add.w	fp, fp, #1
 8016474:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016478:	ebaa 0309 	sub.w	r3, sl, r9
 801647c:	455b      	cmp	r3, fp
 801647e:	dcef      	bgt.n	8016460 <_printf_float+0x310>
 8016480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016484:	429a      	cmp	r2, r3
 8016486:	44d0      	add	r8, sl
 8016488:	db15      	blt.n	80164b6 <_printf_float+0x366>
 801648a:	6823      	ldr	r3, [r4, #0]
 801648c:	07da      	lsls	r2, r3, #31
 801648e:	d412      	bmi.n	80164b6 <_printf_float+0x366>
 8016490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016494:	eba3 020a 	sub.w	r2, r3, sl
 8016498:	eba3 0a01 	sub.w	sl, r3, r1
 801649c:	4592      	cmp	sl, r2
 801649e:	bfa8      	it	ge
 80164a0:	4692      	movge	sl, r2
 80164a2:	f1ba 0f00 	cmp.w	sl, #0
 80164a6:	dc0e      	bgt.n	80164c6 <_printf_float+0x376>
 80164a8:	f04f 0800 	mov.w	r8, #0
 80164ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164b0:	f104 091a 	add.w	r9, r4, #26
 80164b4:	e019      	b.n	80164ea <_printf_float+0x39a>
 80164b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164ba:	4631      	mov	r1, r6
 80164bc:	4628      	mov	r0, r5
 80164be:	47b8      	blx	r7
 80164c0:	3001      	adds	r0, #1
 80164c2:	d1e5      	bne.n	8016490 <_printf_float+0x340>
 80164c4:	e6a1      	b.n	801620a <_printf_float+0xba>
 80164c6:	4653      	mov	r3, sl
 80164c8:	4642      	mov	r2, r8
 80164ca:	4631      	mov	r1, r6
 80164cc:	4628      	mov	r0, r5
 80164ce:	47b8      	blx	r7
 80164d0:	3001      	adds	r0, #1
 80164d2:	d1e9      	bne.n	80164a8 <_printf_float+0x358>
 80164d4:	e699      	b.n	801620a <_printf_float+0xba>
 80164d6:	2301      	movs	r3, #1
 80164d8:	464a      	mov	r2, r9
 80164da:	4631      	mov	r1, r6
 80164dc:	4628      	mov	r0, r5
 80164de:	47b8      	blx	r7
 80164e0:	3001      	adds	r0, #1
 80164e2:	f43f ae92 	beq.w	801620a <_printf_float+0xba>
 80164e6:	f108 0801 	add.w	r8, r8, #1
 80164ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164ee:	1a9b      	subs	r3, r3, r2
 80164f0:	eba3 030a 	sub.w	r3, r3, sl
 80164f4:	4543      	cmp	r3, r8
 80164f6:	dcee      	bgt.n	80164d6 <_printf_float+0x386>
 80164f8:	e74a      	b.n	8016390 <_printf_float+0x240>
 80164fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164fc:	2a01      	cmp	r2, #1
 80164fe:	dc01      	bgt.n	8016504 <_printf_float+0x3b4>
 8016500:	07db      	lsls	r3, r3, #31
 8016502:	d53a      	bpl.n	801657a <_printf_float+0x42a>
 8016504:	2301      	movs	r3, #1
 8016506:	4642      	mov	r2, r8
 8016508:	4631      	mov	r1, r6
 801650a:	4628      	mov	r0, r5
 801650c:	47b8      	blx	r7
 801650e:	3001      	adds	r0, #1
 8016510:	f43f ae7b 	beq.w	801620a <_printf_float+0xba>
 8016514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016518:	4631      	mov	r1, r6
 801651a:	4628      	mov	r0, r5
 801651c:	47b8      	blx	r7
 801651e:	3001      	adds	r0, #1
 8016520:	f108 0801 	add.w	r8, r8, #1
 8016524:	f43f ae71 	beq.w	801620a <_printf_float+0xba>
 8016528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801652a:	2200      	movs	r2, #0
 801652c:	f103 3aff 	add.w	sl, r3, #4294967295
 8016530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016534:	2300      	movs	r3, #0
 8016536:	f7ea fadf 	bl	8000af8 <__aeabi_dcmpeq>
 801653a:	b9c8      	cbnz	r0, 8016570 <_printf_float+0x420>
 801653c:	4653      	mov	r3, sl
 801653e:	4642      	mov	r2, r8
 8016540:	4631      	mov	r1, r6
 8016542:	4628      	mov	r0, r5
 8016544:	47b8      	blx	r7
 8016546:	3001      	adds	r0, #1
 8016548:	d10e      	bne.n	8016568 <_printf_float+0x418>
 801654a:	e65e      	b.n	801620a <_printf_float+0xba>
 801654c:	2301      	movs	r3, #1
 801654e:	4652      	mov	r2, sl
 8016550:	4631      	mov	r1, r6
 8016552:	4628      	mov	r0, r5
 8016554:	47b8      	blx	r7
 8016556:	3001      	adds	r0, #1
 8016558:	f43f ae57 	beq.w	801620a <_printf_float+0xba>
 801655c:	f108 0801 	add.w	r8, r8, #1
 8016560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016562:	3b01      	subs	r3, #1
 8016564:	4543      	cmp	r3, r8
 8016566:	dcf1      	bgt.n	801654c <_printf_float+0x3fc>
 8016568:	464b      	mov	r3, r9
 801656a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801656e:	e6de      	b.n	801632e <_printf_float+0x1de>
 8016570:	f04f 0800 	mov.w	r8, #0
 8016574:	f104 0a1a 	add.w	sl, r4, #26
 8016578:	e7f2      	b.n	8016560 <_printf_float+0x410>
 801657a:	2301      	movs	r3, #1
 801657c:	e7df      	b.n	801653e <_printf_float+0x3ee>
 801657e:	2301      	movs	r3, #1
 8016580:	464a      	mov	r2, r9
 8016582:	4631      	mov	r1, r6
 8016584:	4628      	mov	r0, r5
 8016586:	47b8      	blx	r7
 8016588:	3001      	adds	r0, #1
 801658a:	f43f ae3e 	beq.w	801620a <_printf_float+0xba>
 801658e:	f108 0801 	add.w	r8, r8, #1
 8016592:	68e3      	ldr	r3, [r4, #12]
 8016594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016596:	1a9b      	subs	r3, r3, r2
 8016598:	4543      	cmp	r3, r8
 801659a:	dcf0      	bgt.n	801657e <_printf_float+0x42e>
 801659c:	e6fc      	b.n	8016398 <_printf_float+0x248>
 801659e:	f04f 0800 	mov.w	r8, #0
 80165a2:	f104 0919 	add.w	r9, r4, #25
 80165a6:	e7f4      	b.n	8016592 <_printf_float+0x442>
 80165a8:	2900      	cmp	r1, #0
 80165aa:	f43f ae8b 	beq.w	80162c4 <_printf_float+0x174>
 80165ae:	2300      	movs	r3, #0
 80165b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80165b4:	ab09      	add	r3, sp, #36	; 0x24
 80165b6:	9300      	str	r3, [sp, #0]
 80165b8:	ec49 8b10 	vmov	d0, r8, r9
 80165bc:	6022      	str	r2, [r4, #0]
 80165be:	f8cd a004 	str.w	sl, [sp, #4]
 80165c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80165c6:	4628      	mov	r0, r5
 80165c8:	f7ff fd2e 	bl	8016028 <__cvt>
 80165cc:	4680      	mov	r8, r0
 80165ce:	e648      	b.n	8016262 <_printf_float+0x112>

080165d0 <_printf_common>:
 80165d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d4:	4691      	mov	r9, r2
 80165d6:	461f      	mov	r7, r3
 80165d8:	688a      	ldr	r2, [r1, #8]
 80165da:	690b      	ldr	r3, [r1, #16]
 80165dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165e0:	4293      	cmp	r3, r2
 80165e2:	bfb8      	it	lt
 80165e4:	4613      	movlt	r3, r2
 80165e6:	f8c9 3000 	str.w	r3, [r9]
 80165ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165ee:	4606      	mov	r6, r0
 80165f0:	460c      	mov	r4, r1
 80165f2:	b112      	cbz	r2, 80165fa <_printf_common+0x2a>
 80165f4:	3301      	adds	r3, #1
 80165f6:	f8c9 3000 	str.w	r3, [r9]
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	0699      	lsls	r1, r3, #26
 80165fe:	bf42      	ittt	mi
 8016600:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016604:	3302      	addmi	r3, #2
 8016606:	f8c9 3000 	strmi.w	r3, [r9]
 801660a:	6825      	ldr	r5, [r4, #0]
 801660c:	f015 0506 	ands.w	r5, r5, #6
 8016610:	d107      	bne.n	8016622 <_printf_common+0x52>
 8016612:	f104 0a19 	add.w	sl, r4, #25
 8016616:	68e3      	ldr	r3, [r4, #12]
 8016618:	f8d9 2000 	ldr.w	r2, [r9]
 801661c:	1a9b      	subs	r3, r3, r2
 801661e:	42ab      	cmp	r3, r5
 8016620:	dc28      	bgt.n	8016674 <_printf_common+0xa4>
 8016622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016626:	6822      	ldr	r2, [r4, #0]
 8016628:	3300      	adds	r3, #0
 801662a:	bf18      	it	ne
 801662c:	2301      	movne	r3, #1
 801662e:	0692      	lsls	r2, r2, #26
 8016630:	d42d      	bmi.n	801668e <_printf_common+0xbe>
 8016632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016636:	4639      	mov	r1, r7
 8016638:	4630      	mov	r0, r6
 801663a:	47c0      	blx	r8
 801663c:	3001      	adds	r0, #1
 801663e:	d020      	beq.n	8016682 <_printf_common+0xb2>
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	68e5      	ldr	r5, [r4, #12]
 8016644:	f8d9 2000 	ldr.w	r2, [r9]
 8016648:	f003 0306 	and.w	r3, r3, #6
 801664c:	2b04      	cmp	r3, #4
 801664e:	bf08      	it	eq
 8016650:	1aad      	subeq	r5, r5, r2
 8016652:	68a3      	ldr	r3, [r4, #8]
 8016654:	6922      	ldr	r2, [r4, #16]
 8016656:	bf0c      	ite	eq
 8016658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801665c:	2500      	movne	r5, #0
 801665e:	4293      	cmp	r3, r2
 8016660:	bfc4      	itt	gt
 8016662:	1a9b      	subgt	r3, r3, r2
 8016664:	18ed      	addgt	r5, r5, r3
 8016666:	f04f 0900 	mov.w	r9, #0
 801666a:	341a      	adds	r4, #26
 801666c:	454d      	cmp	r5, r9
 801666e:	d11a      	bne.n	80166a6 <_printf_common+0xd6>
 8016670:	2000      	movs	r0, #0
 8016672:	e008      	b.n	8016686 <_printf_common+0xb6>
 8016674:	2301      	movs	r3, #1
 8016676:	4652      	mov	r2, sl
 8016678:	4639      	mov	r1, r7
 801667a:	4630      	mov	r0, r6
 801667c:	47c0      	blx	r8
 801667e:	3001      	adds	r0, #1
 8016680:	d103      	bne.n	801668a <_printf_common+0xba>
 8016682:	f04f 30ff 	mov.w	r0, #4294967295
 8016686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668a:	3501      	adds	r5, #1
 801668c:	e7c3      	b.n	8016616 <_printf_common+0x46>
 801668e:	18e1      	adds	r1, r4, r3
 8016690:	1c5a      	adds	r2, r3, #1
 8016692:	2030      	movs	r0, #48	; 0x30
 8016694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016698:	4422      	add	r2, r4
 801669a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801669e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166a2:	3302      	adds	r3, #2
 80166a4:	e7c5      	b.n	8016632 <_printf_common+0x62>
 80166a6:	2301      	movs	r3, #1
 80166a8:	4622      	mov	r2, r4
 80166aa:	4639      	mov	r1, r7
 80166ac:	4630      	mov	r0, r6
 80166ae:	47c0      	blx	r8
 80166b0:	3001      	adds	r0, #1
 80166b2:	d0e6      	beq.n	8016682 <_printf_common+0xb2>
 80166b4:	f109 0901 	add.w	r9, r9, #1
 80166b8:	e7d8      	b.n	801666c <_printf_common+0x9c>
	...

080166bc <_printf_i>:
 80166bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80166c4:	460c      	mov	r4, r1
 80166c6:	7e09      	ldrb	r1, [r1, #24]
 80166c8:	b085      	sub	sp, #20
 80166ca:	296e      	cmp	r1, #110	; 0x6e
 80166cc:	4617      	mov	r7, r2
 80166ce:	4606      	mov	r6, r0
 80166d0:	4698      	mov	r8, r3
 80166d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166d4:	f000 80b3 	beq.w	801683e <_printf_i+0x182>
 80166d8:	d822      	bhi.n	8016720 <_printf_i+0x64>
 80166da:	2963      	cmp	r1, #99	; 0x63
 80166dc:	d036      	beq.n	801674c <_printf_i+0x90>
 80166de:	d80a      	bhi.n	80166f6 <_printf_i+0x3a>
 80166e0:	2900      	cmp	r1, #0
 80166e2:	f000 80b9 	beq.w	8016858 <_printf_i+0x19c>
 80166e6:	2958      	cmp	r1, #88	; 0x58
 80166e8:	f000 8083 	beq.w	80167f2 <_printf_i+0x136>
 80166ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80166f4:	e032      	b.n	801675c <_printf_i+0xa0>
 80166f6:	2964      	cmp	r1, #100	; 0x64
 80166f8:	d001      	beq.n	80166fe <_printf_i+0x42>
 80166fa:	2969      	cmp	r1, #105	; 0x69
 80166fc:	d1f6      	bne.n	80166ec <_printf_i+0x30>
 80166fe:	6820      	ldr	r0, [r4, #0]
 8016700:	6813      	ldr	r3, [r2, #0]
 8016702:	0605      	lsls	r5, r0, #24
 8016704:	f103 0104 	add.w	r1, r3, #4
 8016708:	d52a      	bpl.n	8016760 <_printf_i+0xa4>
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	6011      	str	r1, [r2, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	da03      	bge.n	801671a <_printf_i+0x5e>
 8016712:	222d      	movs	r2, #45	; 0x2d
 8016714:	425b      	negs	r3, r3
 8016716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801671a:	486f      	ldr	r0, [pc, #444]	; (80168d8 <_printf_i+0x21c>)
 801671c:	220a      	movs	r2, #10
 801671e:	e039      	b.n	8016794 <_printf_i+0xd8>
 8016720:	2973      	cmp	r1, #115	; 0x73
 8016722:	f000 809d 	beq.w	8016860 <_printf_i+0x1a4>
 8016726:	d808      	bhi.n	801673a <_printf_i+0x7e>
 8016728:	296f      	cmp	r1, #111	; 0x6f
 801672a:	d020      	beq.n	801676e <_printf_i+0xb2>
 801672c:	2970      	cmp	r1, #112	; 0x70
 801672e:	d1dd      	bne.n	80166ec <_printf_i+0x30>
 8016730:	6823      	ldr	r3, [r4, #0]
 8016732:	f043 0320 	orr.w	r3, r3, #32
 8016736:	6023      	str	r3, [r4, #0]
 8016738:	e003      	b.n	8016742 <_printf_i+0x86>
 801673a:	2975      	cmp	r1, #117	; 0x75
 801673c:	d017      	beq.n	801676e <_printf_i+0xb2>
 801673e:	2978      	cmp	r1, #120	; 0x78
 8016740:	d1d4      	bne.n	80166ec <_printf_i+0x30>
 8016742:	2378      	movs	r3, #120	; 0x78
 8016744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016748:	4864      	ldr	r0, [pc, #400]	; (80168dc <_printf_i+0x220>)
 801674a:	e055      	b.n	80167f8 <_printf_i+0x13c>
 801674c:	6813      	ldr	r3, [r2, #0]
 801674e:	1d19      	adds	r1, r3, #4
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	6011      	str	r1, [r2, #0]
 8016754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801675c:	2301      	movs	r3, #1
 801675e:	e08c      	b.n	801687a <_printf_i+0x1be>
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	6011      	str	r1, [r2, #0]
 8016764:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016768:	bf18      	it	ne
 801676a:	b21b      	sxthne	r3, r3
 801676c:	e7cf      	b.n	801670e <_printf_i+0x52>
 801676e:	6813      	ldr	r3, [r2, #0]
 8016770:	6825      	ldr	r5, [r4, #0]
 8016772:	1d18      	adds	r0, r3, #4
 8016774:	6010      	str	r0, [r2, #0]
 8016776:	0628      	lsls	r0, r5, #24
 8016778:	d501      	bpl.n	801677e <_printf_i+0xc2>
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	e002      	b.n	8016784 <_printf_i+0xc8>
 801677e:	0668      	lsls	r0, r5, #25
 8016780:	d5fb      	bpl.n	801677a <_printf_i+0xbe>
 8016782:	881b      	ldrh	r3, [r3, #0]
 8016784:	4854      	ldr	r0, [pc, #336]	; (80168d8 <_printf_i+0x21c>)
 8016786:	296f      	cmp	r1, #111	; 0x6f
 8016788:	bf14      	ite	ne
 801678a:	220a      	movne	r2, #10
 801678c:	2208      	moveq	r2, #8
 801678e:	2100      	movs	r1, #0
 8016790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016794:	6865      	ldr	r5, [r4, #4]
 8016796:	60a5      	str	r5, [r4, #8]
 8016798:	2d00      	cmp	r5, #0
 801679a:	f2c0 8095 	blt.w	80168c8 <_printf_i+0x20c>
 801679e:	6821      	ldr	r1, [r4, #0]
 80167a0:	f021 0104 	bic.w	r1, r1, #4
 80167a4:	6021      	str	r1, [r4, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d13d      	bne.n	8016826 <_printf_i+0x16a>
 80167aa:	2d00      	cmp	r5, #0
 80167ac:	f040 808e 	bne.w	80168cc <_printf_i+0x210>
 80167b0:	4665      	mov	r5, ip
 80167b2:	2a08      	cmp	r2, #8
 80167b4:	d10b      	bne.n	80167ce <_printf_i+0x112>
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	07db      	lsls	r3, r3, #31
 80167ba:	d508      	bpl.n	80167ce <_printf_i+0x112>
 80167bc:	6923      	ldr	r3, [r4, #16]
 80167be:	6862      	ldr	r2, [r4, #4]
 80167c0:	429a      	cmp	r2, r3
 80167c2:	bfde      	ittt	le
 80167c4:	2330      	movle	r3, #48	; 0x30
 80167c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80167ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80167ce:	ebac 0305 	sub.w	r3, ip, r5
 80167d2:	6123      	str	r3, [r4, #16]
 80167d4:	f8cd 8000 	str.w	r8, [sp]
 80167d8:	463b      	mov	r3, r7
 80167da:	aa03      	add	r2, sp, #12
 80167dc:	4621      	mov	r1, r4
 80167de:	4630      	mov	r0, r6
 80167e0:	f7ff fef6 	bl	80165d0 <_printf_common>
 80167e4:	3001      	adds	r0, #1
 80167e6:	d14d      	bne.n	8016884 <_printf_i+0x1c8>
 80167e8:	f04f 30ff 	mov.w	r0, #4294967295
 80167ec:	b005      	add	sp, #20
 80167ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167f2:	4839      	ldr	r0, [pc, #228]	; (80168d8 <_printf_i+0x21c>)
 80167f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80167f8:	6813      	ldr	r3, [r2, #0]
 80167fa:	6821      	ldr	r1, [r4, #0]
 80167fc:	1d1d      	adds	r5, r3, #4
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	6015      	str	r5, [r2, #0]
 8016802:	060a      	lsls	r2, r1, #24
 8016804:	d50b      	bpl.n	801681e <_printf_i+0x162>
 8016806:	07ca      	lsls	r2, r1, #31
 8016808:	bf44      	itt	mi
 801680a:	f041 0120 	orrmi.w	r1, r1, #32
 801680e:	6021      	strmi	r1, [r4, #0]
 8016810:	b91b      	cbnz	r3, 801681a <_printf_i+0x15e>
 8016812:	6822      	ldr	r2, [r4, #0]
 8016814:	f022 0220 	bic.w	r2, r2, #32
 8016818:	6022      	str	r2, [r4, #0]
 801681a:	2210      	movs	r2, #16
 801681c:	e7b7      	b.n	801678e <_printf_i+0xd2>
 801681e:	064d      	lsls	r5, r1, #25
 8016820:	bf48      	it	mi
 8016822:	b29b      	uxthmi	r3, r3
 8016824:	e7ef      	b.n	8016806 <_printf_i+0x14a>
 8016826:	4665      	mov	r5, ip
 8016828:	fbb3 f1f2 	udiv	r1, r3, r2
 801682c:	fb02 3311 	mls	r3, r2, r1, r3
 8016830:	5cc3      	ldrb	r3, [r0, r3]
 8016832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016836:	460b      	mov	r3, r1
 8016838:	2900      	cmp	r1, #0
 801683a:	d1f5      	bne.n	8016828 <_printf_i+0x16c>
 801683c:	e7b9      	b.n	80167b2 <_printf_i+0xf6>
 801683e:	6813      	ldr	r3, [r2, #0]
 8016840:	6825      	ldr	r5, [r4, #0]
 8016842:	6961      	ldr	r1, [r4, #20]
 8016844:	1d18      	adds	r0, r3, #4
 8016846:	6010      	str	r0, [r2, #0]
 8016848:	0628      	lsls	r0, r5, #24
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	d501      	bpl.n	8016852 <_printf_i+0x196>
 801684e:	6019      	str	r1, [r3, #0]
 8016850:	e002      	b.n	8016858 <_printf_i+0x19c>
 8016852:	066a      	lsls	r2, r5, #25
 8016854:	d5fb      	bpl.n	801684e <_printf_i+0x192>
 8016856:	8019      	strh	r1, [r3, #0]
 8016858:	2300      	movs	r3, #0
 801685a:	6123      	str	r3, [r4, #16]
 801685c:	4665      	mov	r5, ip
 801685e:	e7b9      	b.n	80167d4 <_printf_i+0x118>
 8016860:	6813      	ldr	r3, [r2, #0]
 8016862:	1d19      	adds	r1, r3, #4
 8016864:	6011      	str	r1, [r2, #0]
 8016866:	681d      	ldr	r5, [r3, #0]
 8016868:	6862      	ldr	r2, [r4, #4]
 801686a:	2100      	movs	r1, #0
 801686c:	4628      	mov	r0, r5
 801686e:	f7e9 fccf 	bl	8000210 <memchr>
 8016872:	b108      	cbz	r0, 8016878 <_printf_i+0x1bc>
 8016874:	1b40      	subs	r0, r0, r5
 8016876:	6060      	str	r0, [r4, #4]
 8016878:	6863      	ldr	r3, [r4, #4]
 801687a:	6123      	str	r3, [r4, #16]
 801687c:	2300      	movs	r3, #0
 801687e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016882:	e7a7      	b.n	80167d4 <_printf_i+0x118>
 8016884:	6923      	ldr	r3, [r4, #16]
 8016886:	462a      	mov	r2, r5
 8016888:	4639      	mov	r1, r7
 801688a:	4630      	mov	r0, r6
 801688c:	47c0      	blx	r8
 801688e:	3001      	adds	r0, #1
 8016890:	d0aa      	beq.n	80167e8 <_printf_i+0x12c>
 8016892:	6823      	ldr	r3, [r4, #0]
 8016894:	079b      	lsls	r3, r3, #30
 8016896:	d413      	bmi.n	80168c0 <_printf_i+0x204>
 8016898:	68e0      	ldr	r0, [r4, #12]
 801689a:	9b03      	ldr	r3, [sp, #12]
 801689c:	4298      	cmp	r0, r3
 801689e:	bfb8      	it	lt
 80168a0:	4618      	movlt	r0, r3
 80168a2:	e7a3      	b.n	80167ec <_printf_i+0x130>
 80168a4:	2301      	movs	r3, #1
 80168a6:	464a      	mov	r2, r9
 80168a8:	4639      	mov	r1, r7
 80168aa:	4630      	mov	r0, r6
 80168ac:	47c0      	blx	r8
 80168ae:	3001      	adds	r0, #1
 80168b0:	d09a      	beq.n	80167e8 <_printf_i+0x12c>
 80168b2:	3501      	adds	r5, #1
 80168b4:	68e3      	ldr	r3, [r4, #12]
 80168b6:	9a03      	ldr	r2, [sp, #12]
 80168b8:	1a9b      	subs	r3, r3, r2
 80168ba:	42ab      	cmp	r3, r5
 80168bc:	dcf2      	bgt.n	80168a4 <_printf_i+0x1e8>
 80168be:	e7eb      	b.n	8016898 <_printf_i+0x1dc>
 80168c0:	2500      	movs	r5, #0
 80168c2:	f104 0919 	add.w	r9, r4, #25
 80168c6:	e7f5      	b.n	80168b4 <_printf_i+0x1f8>
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d1ac      	bne.n	8016826 <_printf_i+0x16a>
 80168cc:	7803      	ldrb	r3, [r0, #0]
 80168ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80168d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168d6:	e76c      	b.n	80167b2 <_printf_i+0xf6>
 80168d8:	0801a918 	.word	0x0801a918
 80168dc:	0801a929 	.word	0x0801a929

080168e0 <_scanf_float>:
 80168e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e4:	469a      	mov	sl, r3
 80168e6:	688b      	ldr	r3, [r1, #8]
 80168e8:	4616      	mov	r6, r2
 80168ea:	1e5a      	subs	r2, r3, #1
 80168ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80168f0:	b087      	sub	sp, #28
 80168f2:	bf83      	ittte	hi
 80168f4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80168f8:	189b      	addhi	r3, r3, r2
 80168fa:	9301      	strhi	r3, [sp, #4]
 80168fc:	2300      	movls	r3, #0
 80168fe:	bf86      	itte	hi
 8016900:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016904:	608b      	strhi	r3, [r1, #8]
 8016906:	9301      	strls	r3, [sp, #4]
 8016908:	680b      	ldr	r3, [r1, #0]
 801690a:	4688      	mov	r8, r1
 801690c:	f04f 0b00 	mov.w	fp, #0
 8016910:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016914:	f848 3b1c 	str.w	r3, [r8], #28
 8016918:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801691c:	4607      	mov	r7, r0
 801691e:	460c      	mov	r4, r1
 8016920:	4645      	mov	r5, r8
 8016922:	465a      	mov	r2, fp
 8016924:	46d9      	mov	r9, fp
 8016926:	f8cd b008 	str.w	fp, [sp, #8]
 801692a:	68a1      	ldr	r1, [r4, #8]
 801692c:	b181      	cbz	r1, 8016950 <_scanf_float+0x70>
 801692e:	6833      	ldr	r3, [r6, #0]
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	2b49      	cmp	r3, #73	; 0x49
 8016934:	d071      	beq.n	8016a1a <_scanf_float+0x13a>
 8016936:	d84d      	bhi.n	80169d4 <_scanf_float+0xf4>
 8016938:	2b39      	cmp	r3, #57	; 0x39
 801693a:	d840      	bhi.n	80169be <_scanf_float+0xde>
 801693c:	2b31      	cmp	r3, #49	; 0x31
 801693e:	f080 8088 	bcs.w	8016a52 <_scanf_float+0x172>
 8016942:	2b2d      	cmp	r3, #45	; 0x2d
 8016944:	f000 8090 	beq.w	8016a68 <_scanf_float+0x188>
 8016948:	d815      	bhi.n	8016976 <_scanf_float+0x96>
 801694a:	2b2b      	cmp	r3, #43	; 0x2b
 801694c:	f000 808c 	beq.w	8016a68 <_scanf_float+0x188>
 8016950:	f1b9 0f00 	cmp.w	r9, #0
 8016954:	d003      	beq.n	801695e <_scanf_float+0x7e>
 8016956:	6823      	ldr	r3, [r4, #0]
 8016958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801695c:	6023      	str	r3, [r4, #0]
 801695e:	3a01      	subs	r2, #1
 8016960:	2a01      	cmp	r2, #1
 8016962:	f200 80ea 	bhi.w	8016b3a <_scanf_float+0x25a>
 8016966:	4545      	cmp	r5, r8
 8016968:	f200 80dc 	bhi.w	8016b24 <_scanf_float+0x244>
 801696c:	2601      	movs	r6, #1
 801696e:	4630      	mov	r0, r6
 8016970:	b007      	add	sp, #28
 8016972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016976:	2b2e      	cmp	r3, #46	; 0x2e
 8016978:	f000 809f 	beq.w	8016aba <_scanf_float+0x1da>
 801697c:	2b30      	cmp	r3, #48	; 0x30
 801697e:	d1e7      	bne.n	8016950 <_scanf_float+0x70>
 8016980:	6820      	ldr	r0, [r4, #0]
 8016982:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016986:	d064      	beq.n	8016a52 <_scanf_float+0x172>
 8016988:	9b01      	ldr	r3, [sp, #4]
 801698a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801698e:	6020      	str	r0, [r4, #0]
 8016990:	f109 0901 	add.w	r9, r9, #1
 8016994:	b11b      	cbz	r3, 801699e <_scanf_float+0xbe>
 8016996:	3b01      	subs	r3, #1
 8016998:	3101      	adds	r1, #1
 801699a:	9301      	str	r3, [sp, #4]
 801699c:	60a1      	str	r1, [r4, #8]
 801699e:	68a3      	ldr	r3, [r4, #8]
 80169a0:	3b01      	subs	r3, #1
 80169a2:	60a3      	str	r3, [r4, #8]
 80169a4:	6923      	ldr	r3, [r4, #16]
 80169a6:	3301      	adds	r3, #1
 80169a8:	6123      	str	r3, [r4, #16]
 80169aa:	6873      	ldr	r3, [r6, #4]
 80169ac:	3b01      	subs	r3, #1
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	6073      	str	r3, [r6, #4]
 80169b2:	f340 80ac 	ble.w	8016b0e <_scanf_float+0x22e>
 80169b6:	6833      	ldr	r3, [r6, #0]
 80169b8:	3301      	adds	r3, #1
 80169ba:	6033      	str	r3, [r6, #0]
 80169bc:	e7b5      	b.n	801692a <_scanf_float+0x4a>
 80169be:	2b45      	cmp	r3, #69	; 0x45
 80169c0:	f000 8085 	beq.w	8016ace <_scanf_float+0x1ee>
 80169c4:	2b46      	cmp	r3, #70	; 0x46
 80169c6:	d06a      	beq.n	8016a9e <_scanf_float+0x1be>
 80169c8:	2b41      	cmp	r3, #65	; 0x41
 80169ca:	d1c1      	bne.n	8016950 <_scanf_float+0x70>
 80169cc:	2a01      	cmp	r2, #1
 80169ce:	d1bf      	bne.n	8016950 <_scanf_float+0x70>
 80169d0:	2202      	movs	r2, #2
 80169d2:	e046      	b.n	8016a62 <_scanf_float+0x182>
 80169d4:	2b65      	cmp	r3, #101	; 0x65
 80169d6:	d07a      	beq.n	8016ace <_scanf_float+0x1ee>
 80169d8:	d818      	bhi.n	8016a0c <_scanf_float+0x12c>
 80169da:	2b54      	cmp	r3, #84	; 0x54
 80169dc:	d066      	beq.n	8016aac <_scanf_float+0x1cc>
 80169de:	d811      	bhi.n	8016a04 <_scanf_float+0x124>
 80169e0:	2b4e      	cmp	r3, #78	; 0x4e
 80169e2:	d1b5      	bne.n	8016950 <_scanf_float+0x70>
 80169e4:	2a00      	cmp	r2, #0
 80169e6:	d146      	bne.n	8016a76 <_scanf_float+0x196>
 80169e8:	f1b9 0f00 	cmp.w	r9, #0
 80169ec:	d145      	bne.n	8016a7a <_scanf_float+0x19a>
 80169ee:	6821      	ldr	r1, [r4, #0]
 80169f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80169f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80169f8:	d13f      	bne.n	8016a7a <_scanf_float+0x19a>
 80169fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80169fe:	6021      	str	r1, [r4, #0]
 8016a00:	2201      	movs	r2, #1
 8016a02:	e02e      	b.n	8016a62 <_scanf_float+0x182>
 8016a04:	2b59      	cmp	r3, #89	; 0x59
 8016a06:	d01e      	beq.n	8016a46 <_scanf_float+0x166>
 8016a08:	2b61      	cmp	r3, #97	; 0x61
 8016a0a:	e7de      	b.n	80169ca <_scanf_float+0xea>
 8016a0c:	2b6e      	cmp	r3, #110	; 0x6e
 8016a0e:	d0e9      	beq.n	80169e4 <_scanf_float+0x104>
 8016a10:	d815      	bhi.n	8016a3e <_scanf_float+0x15e>
 8016a12:	2b66      	cmp	r3, #102	; 0x66
 8016a14:	d043      	beq.n	8016a9e <_scanf_float+0x1be>
 8016a16:	2b69      	cmp	r3, #105	; 0x69
 8016a18:	d19a      	bne.n	8016950 <_scanf_float+0x70>
 8016a1a:	f1bb 0f00 	cmp.w	fp, #0
 8016a1e:	d138      	bne.n	8016a92 <_scanf_float+0x1b2>
 8016a20:	f1b9 0f00 	cmp.w	r9, #0
 8016a24:	d197      	bne.n	8016956 <_scanf_float+0x76>
 8016a26:	6821      	ldr	r1, [r4, #0]
 8016a28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016a2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016a30:	d195      	bne.n	801695e <_scanf_float+0x7e>
 8016a32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a36:	6021      	str	r1, [r4, #0]
 8016a38:	f04f 0b01 	mov.w	fp, #1
 8016a3c:	e011      	b.n	8016a62 <_scanf_float+0x182>
 8016a3e:	2b74      	cmp	r3, #116	; 0x74
 8016a40:	d034      	beq.n	8016aac <_scanf_float+0x1cc>
 8016a42:	2b79      	cmp	r3, #121	; 0x79
 8016a44:	d184      	bne.n	8016950 <_scanf_float+0x70>
 8016a46:	f1bb 0f07 	cmp.w	fp, #7
 8016a4a:	d181      	bne.n	8016950 <_scanf_float+0x70>
 8016a4c:	f04f 0b08 	mov.w	fp, #8
 8016a50:	e007      	b.n	8016a62 <_scanf_float+0x182>
 8016a52:	eb12 0f0b 	cmn.w	r2, fp
 8016a56:	f47f af7b 	bne.w	8016950 <_scanf_float+0x70>
 8016a5a:	6821      	ldr	r1, [r4, #0]
 8016a5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016a60:	6021      	str	r1, [r4, #0]
 8016a62:	702b      	strb	r3, [r5, #0]
 8016a64:	3501      	adds	r5, #1
 8016a66:	e79a      	b.n	801699e <_scanf_float+0xbe>
 8016a68:	6821      	ldr	r1, [r4, #0]
 8016a6a:	0608      	lsls	r0, r1, #24
 8016a6c:	f57f af70 	bpl.w	8016950 <_scanf_float+0x70>
 8016a70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a74:	e7f4      	b.n	8016a60 <_scanf_float+0x180>
 8016a76:	2a02      	cmp	r2, #2
 8016a78:	d047      	beq.n	8016b0a <_scanf_float+0x22a>
 8016a7a:	f1bb 0f01 	cmp.w	fp, #1
 8016a7e:	d003      	beq.n	8016a88 <_scanf_float+0x1a8>
 8016a80:	f1bb 0f04 	cmp.w	fp, #4
 8016a84:	f47f af64 	bne.w	8016950 <_scanf_float+0x70>
 8016a88:	f10b 0b01 	add.w	fp, fp, #1
 8016a8c:	fa5f fb8b 	uxtb.w	fp, fp
 8016a90:	e7e7      	b.n	8016a62 <_scanf_float+0x182>
 8016a92:	f1bb 0f03 	cmp.w	fp, #3
 8016a96:	d0f7      	beq.n	8016a88 <_scanf_float+0x1a8>
 8016a98:	f1bb 0f05 	cmp.w	fp, #5
 8016a9c:	e7f2      	b.n	8016a84 <_scanf_float+0x1a4>
 8016a9e:	f1bb 0f02 	cmp.w	fp, #2
 8016aa2:	f47f af55 	bne.w	8016950 <_scanf_float+0x70>
 8016aa6:	f04f 0b03 	mov.w	fp, #3
 8016aaa:	e7da      	b.n	8016a62 <_scanf_float+0x182>
 8016aac:	f1bb 0f06 	cmp.w	fp, #6
 8016ab0:	f47f af4e 	bne.w	8016950 <_scanf_float+0x70>
 8016ab4:	f04f 0b07 	mov.w	fp, #7
 8016ab8:	e7d3      	b.n	8016a62 <_scanf_float+0x182>
 8016aba:	6821      	ldr	r1, [r4, #0]
 8016abc:	0588      	lsls	r0, r1, #22
 8016abe:	f57f af47 	bpl.w	8016950 <_scanf_float+0x70>
 8016ac2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016ac6:	6021      	str	r1, [r4, #0]
 8016ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8016acc:	e7c9      	b.n	8016a62 <_scanf_float+0x182>
 8016ace:	6821      	ldr	r1, [r4, #0]
 8016ad0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016ad4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016ad8:	d006      	beq.n	8016ae8 <_scanf_float+0x208>
 8016ada:	0548      	lsls	r0, r1, #21
 8016adc:	f57f af38 	bpl.w	8016950 <_scanf_float+0x70>
 8016ae0:	f1b9 0f00 	cmp.w	r9, #0
 8016ae4:	f43f af3b 	beq.w	801695e <_scanf_float+0x7e>
 8016ae8:	0588      	lsls	r0, r1, #22
 8016aea:	bf58      	it	pl
 8016aec:	9802      	ldrpl	r0, [sp, #8]
 8016aee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016af2:	bf58      	it	pl
 8016af4:	eba9 0000 	subpl.w	r0, r9, r0
 8016af8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016afc:	bf58      	it	pl
 8016afe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016b02:	6021      	str	r1, [r4, #0]
 8016b04:	f04f 0900 	mov.w	r9, #0
 8016b08:	e7ab      	b.n	8016a62 <_scanf_float+0x182>
 8016b0a:	2203      	movs	r2, #3
 8016b0c:	e7a9      	b.n	8016a62 <_scanf_float+0x182>
 8016b0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b12:	9205      	str	r2, [sp, #20]
 8016b14:	4631      	mov	r1, r6
 8016b16:	4638      	mov	r0, r7
 8016b18:	4798      	blx	r3
 8016b1a:	9a05      	ldr	r2, [sp, #20]
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	f43f af04 	beq.w	801692a <_scanf_float+0x4a>
 8016b22:	e715      	b.n	8016950 <_scanf_float+0x70>
 8016b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b2c:	4632      	mov	r2, r6
 8016b2e:	4638      	mov	r0, r7
 8016b30:	4798      	blx	r3
 8016b32:	6923      	ldr	r3, [r4, #16]
 8016b34:	3b01      	subs	r3, #1
 8016b36:	6123      	str	r3, [r4, #16]
 8016b38:	e715      	b.n	8016966 <_scanf_float+0x86>
 8016b3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016b3e:	2b06      	cmp	r3, #6
 8016b40:	d80a      	bhi.n	8016b58 <_scanf_float+0x278>
 8016b42:	f1bb 0f02 	cmp.w	fp, #2
 8016b46:	d968      	bls.n	8016c1a <_scanf_float+0x33a>
 8016b48:	f1ab 0b03 	sub.w	fp, fp, #3
 8016b4c:	fa5f fb8b 	uxtb.w	fp, fp
 8016b50:	eba5 0b0b 	sub.w	fp, r5, fp
 8016b54:	455d      	cmp	r5, fp
 8016b56:	d14b      	bne.n	8016bf0 <_scanf_float+0x310>
 8016b58:	6823      	ldr	r3, [r4, #0]
 8016b5a:	05da      	lsls	r2, r3, #23
 8016b5c:	d51f      	bpl.n	8016b9e <_scanf_float+0x2be>
 8016b5e:	055b      	lsls	r3, r3, #21
 8016b60:	d468      	bmi.n	8016c34 <_scanf_float+0x354>
 8016b62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016b66:	6923      	ldr	r3, [r4, #16]
 8016b68:	2965      	cmp	r1, #101	; 0x65
 8016b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8016b6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016b72:	6123      	str	r3, [r4, #16]
 8016b74:	d00d      	beq.n	8016b92 <_scanf_float+0x2b2>
 8016b76:	2945      	cmp	r1, #69	; 0x45
 8016b78:	d00b      	beq.n	8016b92 <_scanf_float+0x2b2>
 8016b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b7e:	4632      	mov	r2, r6
 8016b80:	4638      	mov	r0, r7
 8016b82:	4798      	blx	r3
 8016b84:	6923      	ldr	r3, [r4, #16]
 8016b86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016b8a:	3b01      	subs	r3, #1
 8016b8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016b90:	6123      	str	r3, [r4, #16]
 8016b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b96:	4632      	mov	r2, r6
 8016b98:	4638      	mov	r0, r7
 8016b9a:	4798      	blx	r3
 8016b9c:	465d      	mov	r5, fp
 8016b9e:	6826      	ldr	r6, [r4, #0]
 8016ba0:	f016 0610 	ands.w	r6, r6, #16
 8016ba4:	d17a      	bne.n	8016c9c <_scanf_float+0x3bc>
 8016ba6:	702e      	strb	r6, [r5, #0]
 8016ba8:	6823      	ldr	r3, [r4, #0]
 8016baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bb2:	d142      	bne.n	8016c3a <_scanf_float+0x35a>
 8016bb4:	9b02      	ldr	r3, [sp, #8]
 8016bb6:	eba9 0303 	sub.w	r3, r9, r3
 8016bba:	425a      	negs	r2, r3
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d149      	bne.n	8016c54 <_scanf_float+0x374>
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	4641      	mov	r1, r8
 8016bc4:	4638      	mov	r0, r7
 8016bc6:	f000 ff5f 	bl	8017a88 <_strtod_r>
 8016bca:	6825      	ldr	r5, [r4, #0]
 8016bcc:	f8da 3000 	ldr.w	r3, [sl]
 8016bd0:	f015 0f02 	tst.w	r5, #2
 8016bd4:	f103 0204 	add.w	r2, r3, #4
 8016bd8:	ec59 8b10 	vmov	r8, r9, d0
 8016bdc:	f8ca 2000 	str.w	r2, [sl]
 8016be0:	d043      	beq.n	8016c6a <_scanf_float+0x38a>
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	e9c3 8900 	strd	r8, r9, [r3]
 8016be8:	68e3      	ldr	r3, [r4, #12]
 8016bea:	3301      	adds	r3, #1
 8016bec:	60e3      	str	r3, [r4, #12]
 8016bee:	e6be      	b.n	801696e <_scanf_float+0x8e>
 8016bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bf4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016bf8:	4632      	mov	r2, r6
 8016bfa:	4638      	mov	r0, r7
 8016bfc:	4798      	blx	r3
 8016bfe:	6923      	ldr	r3, [r4, #16]
 8016c00:	3b01      	subs	r3, #1
 8016c02:	6123      	str	r3, [r4, #16]
 8016c04:	e7a6      	b.n	8016b54 <_scanf_float+0x274>
 8016c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c0e:	4632      	mov	r2, r6
 8016c10:	4638      	mov	r0, r7
 8016c12:	4798      	blx	r3
 8016c14:	6923      	ldr	r3, [r4, #16]
 8016c16:	3b01      	subs	r3, #1
 8016c18:	6123      	str	r3, [r4, #16]
 8016c1a:	4545      	cmp	r5, r8
 8016c1c:	d8f3      	bhi.n	8016c06 <_scanf_float+0x326>
 8016c1e:	e6a5      	b.n	801696c <_scanf_float+0x8c>
 8016c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c28:	4632      	mov	r2, r6
 8016c2a:	4638      	mov	r0, r7
 8016c2c:	4798      	blx	r3
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	3b01      	subs	r3, #1
 8016c32:	6123      	str	r3, [r4, #16]
 8016c34:	4545      	cmp	r5, r8
 8016c36:	d8f3      	bhi.n	8016c20 <_scanf_float+0x340>
 8016c38:	e698      	b.n	801696c <_scanf_float+0x8c>
 8016c3a:	9b03      	ldr	r3, [sp, #12]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d0bf      	beq.n	8016bc0 <_scanf_float+0x2e0>
 8016c40:	9904      	ldr	r1, [sp, #16]
 8016c42:	230a      	movs	r3, #10
 8016c44:	4632      	mov	r2, r6
 8016c46:	3101      	adds	r1, #1
 8016c48:	4638      	mov	r0, r7
 8016c4a:	f000 ffa9 	bl	8017ba0 <_strtol_r>
 8016c4e:	9b03      	ldr	r3, [sp, #12]
 8016c50:	9d04      	ldr	r5, [sp, #16]
 8016c52:	1ac2      	subs	r2, r0, r3
 8016c54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016c58:	429d      	cmp	r5, r3
 8016c5a:	bf28      	it	cs
 8016c5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016c60:	490f      	ldr	r1, [pc, #60]	; (8016ca0 <_scanf_float+0x3c0>)
 8016c62:	4628      	mov	r0, r5
 8016c64:	f000 f8ac 	bl	8016dc0 <siprintf>
 8016c68:	e7aa      	b.n	8016bc0 <_scanf_float+0x2e0>
 8016c6a:	f015 0504 	ands.w	r5, r5, #4
 8016c6e:	d1b8      	bne.n	8016be2 <_scanf_float+0x302>
 8016c70:	681f      	ldr	r7, [r3, #0]
 8016c72:	ee10 2a10 	vmov	r2, s0
 8016c76:	464b      	mov	r3, r9
 8016c78:	ee10 0a10 	vmov	r0, s0
 8016c7c:	4649      	mov	r1, r9
 8016c7e:	f7e9 ff6d 	bl	8000b5c <__aeabi_dcmpun>
 8016c82:	b128      	cbz	r0, 8016c90 <_scanf_float+0x3b0>
 8016c84:	4628      	mov	r0, r5
 8016c86:	f000 f81d 	bl	8016cc4 <nanf>
 8016c8a:	ed87 0a00 	vstr	s0, [r7]
 8016c8e:	e7ab      	b.n	8016be8 <_scanf_float+0x308>
 8016c90:	4640      	mov	r0, r8
 8016c92:	4649      	mov	r1, r9
 8016c94:	f7e9 ffc0 	bl	8000c18 <__aeabi_d2f>
 8016c98:	6038      	str	r0, [r7, #0]
 8016c9a:	e7a5      	b.n	8016be8 <_scanf_float+0x308>
 8016c9c:	2600      	movs	r6, #0
 8016c9e:	e666      	b.n	801696e <_scanf_float+0x8e>
 8016ca0:	0801a93a 	.word	0x0801a93a

08016ca4 <_sbrk_r>:
 8016ca4:	b538      	push	{r3, r4, r5, lr}
 8016ca6:	4c06      	ldr	r4, [pc, #24]	; (8016cc0 <_sbrk_r+0x1c>)
 8016ca8:	2300      	movs	r3, #0
 8016caa:	4605      	mov	r5, r0
 8016cac:	4608      	mov	r0, r1
 8016cae:	6023      	str	r3, [r4, #0]
 8016cb0:	f7f1 f8ce 	bl	8007e50 <_sbrk>
 8016cb4:	1c43      	adds	r3, r0, #1
 8016cb6:	d102      	bne.n	8016cbe <_sbrk_r+0x1a>
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	b103      	cbz	r3, 8016cbe <_sbrk_r+0x1a>
 8016cbc:	602b      	str	r3, [r5, #0]
 8016cbe:	bd38      	pop	{r3, r4, r5, pc}
 8016cc0:	2004c03c 	.word	0x2004c03c

08016cc4 <nanf>:
 8016cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ccc <nanf+0x8>
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop
 8016ccc:	7fc00000 	.word	0x7fc00000

08016cd0 <_raise_r>:
 8016cd0:	291f      	cmp	r1, #31
 8016cd2:	b538      	push	{r3, r4, r5, lr}
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	460d      	mov	r5, r1
 8016cd8:	d904      	bls.n	8016ce4 <_raise_r+0x14>
 8016cda:	2316      	movs	r3, #22
 8016cdc:	6003      	str	r3, [r0, #0]
 8016cde:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce2:	bd38      	pop	{r3, r4, r5, pc}
 8016ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016ce6:	b112      	cbz	r2, 8016cee <_raise_r+0x1e>
 8016ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016cec:	b94b      	cbnz	r3, 8016d02 <_raise_r+0x32>
 8016cee:	4620      	mov	r0, r4
 8016cf0:	f000 f830 	bl	8016d54 <_getpid_r>
 8016cf4:	462a      	mov	r2, r5
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cfe:	f000 b817 	b.w	8016d30 <_kill_r>
 8016d02:	2b01      	cmp	r3, #1
 8016d04:	d00a      	beq.n	8016d1c <_raise_r+0x4c>
 8016d06:	1c59      	adds	r1, r3, #1
 8016d08:	d103      	bne.n	8016d12 <_raise_r+0x42>
 8016d0a:	2316      	movs	r3, #22
 8016d0c:	6003      	str	r3, [r0, #0]
 8016d0e:	2001      	movs	r0, #1
 8016d10:	e7e7      	b.n	8016ce2 <_raise_r+0x12>
 8016d12:	2400      	movs	r4, #0
 8016d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d18:	4628      	mov	r0, r5
 8016d1a:	4798      	blx	r3
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	e7e0      	b.n	8016ce2 <_raise_r+0x12>

08016d20 <raise>:
 8016d20:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <raise+0xc>)
 8016d22:	4601      	mov	r1, r0
 8016d24:	6818      	ldr	r0, [r3, #0]
 8016d26:	f7ff bfd3 	b.w	8016cd0 <_raise_r>
 8016d2a:	bf00      	nop
 8016d2c:	2000000c 	.word	0x2000000c

08016d30 <_kill_r>:
 8016d30:	b538      	push	{r3, r4, r5, lr}
 8016d32:	4c07      	ldr	r4, [pc, #28]	; (8016d50 <_kill_r+0x20>)
 8016d34:	2300      	movs	r3, #0
 8016d36:	4605      	mov	r5, r0
 8016d38:	4608      	mov	r0, r1
 8016d3a:	4611      	mov	r1, r2
 8016d3c:	6023      	str	r3, [r4, #0]
 8016d3e:	f7f1 f86d 	bl	8007e1c <_kill>
 8016d42:	1c43      	adds	r3, r0, #1
 8016d44:	d102      	bne.n	8016d4c <_kill_r+0x1c>
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	b103      	cbz	r3, 8016d4c <_kill_r+0x1c>
 8016d4a:	602b      	str	r3, [r5, #0]
 8016d4c:	bd38      	pop	{r3, r4, r5, pc}
 8016d4e:	bf00      	nop
 8016d50:	2004c03c 	.word	0x2004c03c

08016d54 <_getpid_r>:
 8016d54:	f7f1 b85a 	b.w	8007e0c <_getpid>

08016d58 <sniprintf>:
 8016d58:	b40c      	push	{r2, r3}
 8016d5a:	b530      	push	{r4, r5, lr}
 8016d5c:	4b17      	ldr	r3, [pc, #92]	; (8016dbc <sniprintf+0x64>)
 8016d5e:	1e0c      	subs	r4, r1, #0
 8016d60:	b09d      	sub	sp, #116	; 0x74
 8016d62:	681d      	ldr	r5, [r3, #0]
 8016d64:	da08      	bge.n	8016d78 <sniprintf+0x20>
 8016d66:	238b      	movs	r3, #139	; 0x8b
 8016d68:	602b      	str	r3, [r5, #0]
 8016d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6e:	b01d      	add	sp, #116	; 0x74
 8016d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d74:	b002      	add	sp, #8
 8016d76:	4770      	bx	lr
 8016d78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016d7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d80:	bf14      	ite	ne
 8016d82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016d86:	4623      	moveq	r3, r4
 8016d88:	9304      	str	r3, [sp, #16]
 8016d8a:	9307      	str	r3, [sp, #28]
 8016d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d90:	9002      	str	r0, [sp, #8]
 8016d92:	9006      	str	r0, [sp, #24]
 8016d94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d9a:	ab21      	add	r3, sp, #132	; 0x84
 8016d9c:	a902      	add	r1, sp, #8
 8016d9e:	4628      	mov	r0, r5
 8016da0:	9301      	str	r3, [sp, #4]
 8016da2:	f002 fd43 	bl	801982c <_svfiprintf_r>
 8016da6:	1c43      	adds	r3, r0, #1
 8016da8:	bfbc      	itt	lt
 8016daa:	238b      	movlt	r3, #139	; 0x8b
 8016dac:	602b      	strlt	r3, [r5, #0]
 8016dae:	2c00      	cmp	r4, #0
 8016db0:	d0dd      	beq.n	8016d6e <sniprintf+0x16>
 8016db2:	9b02      	ldr	r3, [sp, #8]
 8016db4:	2200      	movs	r2, #0
 8016db6:	701a      	strb	r2, [r3, #0]
 8016db8:	e7d9      	b.n	8016d6e <sniprintf+0x16>
 8016dba:	bf00      	nop
 8016dbc:	2000000c 	.word	0x2000000c

08016dc0 <siprintf>:
 8016dc0:	b40e      	push	{r1, r2, r3}
 8016dc2:	b500      	push	{lr}
 8016dc4:	b09c      	sub	sp, #112	; 0x70
 8016dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8016dc8:	9002      	str	r0, [sp, #8]
 8016dca:	9006      	str	r0, [sp, #24]
 8016dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016dd0:	4809      	ldr	r0, [pc, #36]	; (8016df8 <siprintf+0x38>)
 8016dd2:	9107      	str	r1, [sp, #28]
 8016dd4:	9104      	str	r1, [sp, #16]
 8016dd6:	4909      	ldr	r1, [pc, #36]	; (8016dfc <siprintf+0x3c>)
 8016dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ddc:	9105      	str	r1, [sp, #20]
 8016dde:	6800      	ldr	r0, [r0, #0]
 8016de0:	9301      	str	r3, [sp, #4]
 8016de2:	a902      	add	r1, sp, #8
 8016de4:	f002 fd22 	bl	801982c <_svfiprintf_r>
 8016de8:	9b02      	ldr	r3, [sp, #8]
 8016dea:	2200      	movs	r2, #0
 8016dec:	701a      	strb	r2, [r3, #0]
 8016dee:	b01c      	add	sp, #112	; 0x70
 8016df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016df4:	b003      	add	sp, #12
 8016df6:	4770      	bx	lr
 8016df8:	2000000c 	.word	0x2000000c
 8016dfc:	ffff0208 	.word	0xffff0208

08016e00 <siscanf>:
 8016e00:	b40e      	push	{r1, r2, r3}
 8016e02:	b530      	push	{r4, r5, lr}
 8016e04:	b09c      	sub	sp, #112	; 0x70
 8016e06:	ac1f      	add	r4, sp, #124	; 0x7c
 8016e08:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016e0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8016e10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016e14:	9002      	str	r0, [sp, #8]
 8016e16:	9006      	str	r0, [sp, #24]
 8016e18:	f7e9 f9f2 	bl	8000200 <strlen>
 8016e1c:	4b0b      	ldr	r3, [pc, #44]	; (8016e4c <siscanf+0x4c>)
 8016e1e:	9003      	str	r0, [sp, #12]
 8016e20:	9007      	str	r0, [sp, #28]
 8016e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e24:	480a      	ldr	r0, [pc, #40]	; (8016e50 <siscanf+0x50>)
 8016e26:	9401      	str	r4, [sp, #4]
 8016e28:	2300      	movs	r3, #0
 8016e2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e2c:	9314      	str	r3, [sp, #80]	; 0x50
 8016e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e36:	462a      	mov	r2, r5
 8016e38:	4623      	mov	r3, r4
 8016e3a:	a902      	add	r1, sp, #8
 8016e3c:	6800      	ldr	r0, [r0, #0]
 8016e3e:	f002 fe47 	bl	8019ad0 <__ssvfiscanf_r>
 8016e42:	b01c      	add	sp, #112	; 0x70
 8016e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e48:	b003      	add	sp, #12
 8016e4a:	4770      	bx	lr
 8016e4c:	08016e55 	.word	0x08016e55
 8016e50:	2000000c 	.word	0x2000000c

08016e54 <__seofread>:
 8016e54:	2000      	movs	r0, #0
 8016e56:	4770      	bx	lr

08016e58 <strcpy>:
 8016e58:	4603      	mov	r3, r0
 8016e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e5e:	f803 2b01 	strb.w	r2, [r3], #1
 8016e62:	2a00      	cmp	r2, #0
 8016e64:	d1f9      	bne.n	8016e5a <strcpy+0x2>
 8016e66:	4770      	bx	lr

08016e68 <sulp>:
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	4604      	mov	r4, r0
 8016e6c:	460d      	mov	r5, r1
 8016e6e:	ec45 4b10 	vmov	d0, r4, r5
 8016e72:	4616      	mov	r6, r2
 8016e74:	f002 fb3e 	bl	80194f4 <__ulp>
 8016e78:	ec51 0b10 	vmov	r0, r1, d0
 8016e7c:	b17e      	cbz	r6, 8016e9e <sulp+0x36>
 8016e7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	dd09      	ble.n	8016e9e <sulp+0x36>
 8016e8a:	051b      	lsls	r3, r3, #20
 8016e8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e90:	2400      	movs	r4, #0
 8016e92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016e96:	4622      	mov	r2, r4
 8016e98:	462b      	mov	r3, r5
 8016e9a:	f7e9 fbc5 	bl	8000628 <__aeabi_dmul>
 8016e9e:	bd70      	pop	{r4, r5, r6, pc}

08016ea0 <_strtod_l>:
 8016ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea4:	461f      	mov	r7, r3
 8016ea6:	b0a1      	sub	sp, #132	; 0x84
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	4681      	mov	r9, r0
 8016eac:	4638      	mov	r0, r7
 8016eae:	460e      	mov	r6, r1
 8016eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016eb2:	931c      	str	r3, [sp, #112]	; 0x70
 8016eb4:	f002 f824 	bl	8018f00 <__localeconv_l>
 8016eb8:	4680      	mov	r8, r0
 8016eba:	6800      	ldr	r0, [r0, #0]
 8016ebc:	f7e9 f9a0 	bl	8000200 <strlen>
 8016ec0:	f04f 0a00 	mov.w	sl, #0
 8016ec4:	4604      	mov	r4, r0
 8016ec6:	f04f 0b00 	mov.w	fp, #0
 8016eca:	961b      	str	r6, [sp, #108]	; 0x6c
 8016ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ece:	781a      	ldrb	r2, [r3, #0]
 8016ed0:	2a0d      	cmp	r2, #13
 8016ed2:	d832      	bhi.n	8016f3a <_strtod_l+0x9a>
 8016ed4:	2a09      	cmp	r2, #9
 8016ed6:	d236      	bcs.n	8016f46 <_strtod_l+0xa6>
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	d03e      	beq.n	8016f5a <_strtod_l+0xba>
 8016edc:	2300      	movs	r3, #0
 8016ede:	930d      	str	r3, [sp, #52]	; 0x34
 8016ee0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016ee2:	782b      	ldrb	r3, [r5, #0]
 8016ee4:	2b30      	cmp	r3, #48	; 0x30
 8016ee6:	f040 80ac 	bne.w	8017042 <_strtod_l+0x1a2>
 8016eea:	786b      	ldrb	r3, [r5, #1]
 8016eec:	2b58      	cmp	r3, #88	; 0x58
 8016eee:	d001      	beq.n	8016ef4 <_strtod_l+0x54>
 8016ef0:	2b78      	cmp	r3, #120	; 0x78
 8016ef2:	d167      	bne.n	8016fc4 <_strtod_l+0x124>
 8016ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ef6:	9301      	str	r3, [sp, #4]
 8016ef8:	ab1c      	add	r3, sp, #112	; 0x70
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	9702      	str	r7, [sp, #8]
 8016efe:	ab1d      	add	r3, sp, #116	; 0x74
 8016f00:	4a88      	ldr	r2, [pc, #544]	; (8017124 <_strtod_l+0x284>)
 8016f02:	a91b      	add	r1, sp, #108	; 0x6c
 8016f04:	4648      	mov	r0, r9
 8016f06:	f001 fd12 	bl	801892e <__gethex>
 8016f0a:	f010 0407 	ands.w	r4, r0, #7
 8016f0e:	4606      	mov	r6, r0
 8016f10:	d005      	beq.n	8016f1e <_strtod_l+0x7e>
 8016f12:	2c06      	cmp	r4, #6
 8016f14:	d12b      	bne.n	8016f6e <_strtod_l+0xce>
 8016f16:	3501      	adds	r5, #1
 8016f18:	2300      	movs	r3, #0
 8016f1a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8016f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	f040 859a 	bne.w	8017a5a <_strtod_l+0xbba>
 8016f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f28:	b1e3      	cbz	r3, 8016f64 <_strtod_l+0xc4>
 8016f2a:	4652      	mov	r2, sl
 8016f2c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016f30:	ec43 2b10 	vmov	d0, r2, r3
 8016f34:	b021      	add	sp, #132	; 0x84
 8016f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3a:	2a2b      	cmp	r2, #43	; 0x2b
 8016f3c:	d015      	beq.n	8016f6a <_strtod_l+0xca>
 8016f3e:	2a2d      	cmp	r2, #45	; 0x2d
 8016f40:	d004      	beq.n	8016f4c <_strtod_l+0xac>
 8016f42:	2a20      	cmp	r2, #32
 8016f44:	d1ca      	bne.n	8016edc <_strtod_l+0x3c>
 8016f46:	3301      	adds	r3, #1
 8016f48:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f4a:	e7bf      	b.n	8016ecc <_strtod_l+0x2c>
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	920d      	str	r2, [sp, #52]	; 0x34
 8016f50:	1c5a      	adds	r2, r3, #1
 8016f52:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f54:	785b      	ldrb	r3, [r3, #1]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d1c2      	bne.n	8016ee0 <_strtod_l+0x40>
 8016f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f040 8579 	bne.w	8017a56 <_strtod_l+0xbb6>
 8016f64:	4652      	mov	r2, sl
 8016f66:	465b      	mov	r3, fp
 8016f68:	e7e2      	b.n	8016f30 <_strtod_l+0x90>
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	e7ef      	b.n	8016f4e <_strtod_l+0xae>
 8016f6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f70:	b13a      	cbz	r2, 8016f82 <_strtod_l+0xe2>
 8016f72:	2135      	movs	r1, #53	; 0x35
 8016f74:	a81e      	add	r0, sp, #120	; 0x78
 8016f76:	f002 fbb5 	bl	80196e4 <__copybits>
 8016f7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f7c:	4648      	mov	r0, r9
 8016f7e:	f002 f822 	bl	8018fc6 <_Bfree>
 8016f82:	3c01      	subs	r4, #1
 8016f84:	2c04      	cmp	r4, #4
 8016f86:	d806      	bhi.n	8016f96 <_strtod_l+0xf6>
 8016f88:	e8df f004 	tbb	[pc, r4]
 8016f8c:	1714030a 	.word	0x1714030a
 8016f90:	0a          	.byte	0x0a
 8016f91:	00          	.byte	0x00
 8016f92:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016f96:	0730      	lsls	r0, r6, #28
 8016f98:	d5c1      	bpl.n	8016f1e <_strtod_l+0x7e>
 8016f9a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016f9e:	e7be      	b.n	8016f1e <_strtod_l+0x7e>
 8016fa0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016fa4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016fa6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016faa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016fae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016fb2:	e7f0      	b.n	8016f96 <_strtod_l+0xf6>
 8016fb4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017128 <_strtod_l+0x288>
 8016fb8:	e7ed      	b.n	8016f96 <_strtod_l+0xf6>
 8016fba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016fbe:	f04f 3aff 	mov.w	sl, #4294967295
 8016fc2:	e7e8      	b.n	8016f96 <_strtod_l+0xf6>
 8016fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fc6:	1c5a      	adds	r2, r3, #1
 8016fc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016fca:	785b      	ldrb	r3, [r3, #1]
 8016fcc:	2b30      	cmp	r3, #48	; 0x30
 8016fce:	d0f9      	beq.n	8016fc4 <_strtod_l+0x124>
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d0a4      	beq.n	8016f1e <_strtod_l+0x7e>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	2500      	movs	r5, #0
 8016fd8:	9306      	str	r3, [sp, #24]
 8016fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fdc:	9308      	str	r3, [sp, #32]
 8016fde:	9507      	str	r5, [sp, #28]
 8016fe0:	9505      	str	r5, [sp, #20]
 8016fe2:	220a      	movs	r2, #10
 8016fe4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016fe6:	7807      	ldrb	r7, [r0, #0]
 8016fe8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016fec:	b2d9      	uxtb	r1, r3
 8016fee:	2909      	cmp	r1, #9
 8016ff0:	d929      	bls.n	8017046 <_strtod_l+0x1a6>
 8016ff2:	4622      	mov	r2, r4
 8016ff4:	f8d8 1000 	ldr.w	r1, [r8]
 8016ff8:	f003 f844 	bl	801a084 <strncmp>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d031      	beq.n	8017064 <_strtod_l+0x1c4>
 8017000:	2000      	movs	r0, #0
 8017002:	9c05      	ldr	r4, [sp, #20]
 8017004:	9004      	str	r0, [sp, #16]
 8017006:	463b      	mov	r3, r7
 8017008:	4602      	mov	r2, r0
 801700a:	2b65      	cmp	r3, #101	; 0x65
 801700c:	d001      	beq.n	8017012 <_strtod_l+0x172>
 801700e:	2b45      	cmp	r3, #69	; 0x45
 8017010:	d114      	bne.n	801703c <_strtod_l+0x19c>
 8017012:	b924      	cbnz	r4, 801701e <_strtod_l+0x17e>
 8017014:	b910      	cbnz	r0, 801701c <_strtod_l+0x17c>
 8017016:	9b06      	ldr	r3, [sp, #24]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d09e      	beq.n	8016f5a <_strtod_l+0xba>
 801701c:	2400      	movs	r4, #0
 801701e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017020:	1c73      	adds	r3, r6, #1
 8017022:	931b      	str	r3, [sp, #108]	; 0x6c
 8017024:	7873      	ldrb	r3, [r6, #1]
 8017026:	2b2b      	cmp	r3, #43	; 0x2b
 8017028:	d078      	beq.n	801711c <_strtod_l+0x27c>
 801702a:	2b2d      	cmp	r3, #45	; 0x2d
 801702c:	d070      	beq.n	8017110 <_strtod_l+0x270>
 801702e:	f04f 0c00 	mov.w	ip, #0
 8017032:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8017036:	2f09      	cmp	r7, #9
 8017038:	d97c      	bls.n	8017134 <_strtod_l+0x294>
 801703a:	961b      	str	r6, [sp, #108]	; 0x6c
 801703c:	f04f 0e00 	mov.w	lr, #0
 8017040:	e09a      	b.n	8017178 <_strtod_l+0x2d8>
 8017042:	2300      	movs	r3, #0
 8017044:	e7c7      	b.n	8016fd6 <_strtod_l+0x136>
 8017046:	9905      	ldr	r1, [sp, #20]
 8017048:	2908      	cmp	r1, #8
 801704a:	bfdd      	ittte	le
 801704c:	9907      	ldrle	r1, [sp, #28]
 801704e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017052:	9307      	strle	r3, [sp, #28]
 8017054:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017058:	9b05      	ldr	r3, [sp, #20]
 801705a:	3001      	adds	r0, #1
 801705c:	3301      	adds	r3, #1
 801705e:	9305      	str	r3, [sp, #20]
 8017060:	901b      	str	r0, [sp, #108]	; 0x6c
 8017062:	e7bf      	b.n	8016fe4 <_strtod_l+0x144>
 8017064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017066:	191a      	adds	r2, r3, r4
 8017068:	921b      	str	r2, [sp, #108]	; 0x6c
 801706a:	9a05      	ldr	r2, [sp, #20]
 801706c:	5d1b      	ldrb	r3, [r3, r4]
 801706e:	2a00      	cmp	r2, #0
 8017070:	d037      	beq.n	80170e2 <_strtod_l+0x242>
 8017072:	9c05      	ldr	r4, [sp, #20]
 8017074:	4602      	mov	r2, r0
 8017076:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801707a:	2909      	cmp	r1, #9
 801707c:	d913      	bls.n	80170a6 <_strtod_l+0x206>
 801707e:	2101      	movs	r1, #1
 8017080:	9104      	str	r1, [sp, #16]
 8017082:	e7c2      	b.n	801700a <_strtod_l+0x16a>
 8017084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017086:	1c5a      	adds	r2, r3, #1
 8017088:	921b      	str	r2, [sp, #108]	; 0x6c
 801708a:	785b      	ldrb	r3, [r3, #1]
 801708c:	3001      	adds	r0, #1
 801708e:	2b30      	cmp	r3, #48	; 0x30
 8017090:	d0f8      	beq.n	8017084 <_strtod_l+0x1e4>
 8017092:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017096:	2a08      	cmp	r2, #8
 8017098:	f200 84e4 	bhi.w	8017a64 <_strtod_l+0xbc4>
 801709c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801709e:	9208      	str	r2, [sp, #32]
 80170a0:	4602      	mov	r2, r0
 80170a2:	2000      	movs	r0, #0
 80170a4:	4604      	mov	r4, r0
 80170a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80170aa:	f100 0101 	add.w	r1, r0, #1
 80170ae:	d012      	beq.n	80170d6 <_strtod_l+0x236>
 80170b0:	440a      	add	r2, r1
 80170b2:	eb00 0c04 	add.w	ip, r0, r4
 80170b6:	4621      	mov	r1, r4
 80170b8:	270a      	movs	r7, #10
 80170ba:	458c      	cmp	ip, r1
 80170bc:	d113      	bne.n	80170e6 <_strtod_l+0x246>
 80170be:	1821      	adds	r1, r4, r0
 80170c0:	2908      	cmp	r1, #8
 80170c2:	f104 0401 	add.w	r4, r4, #1
 80170c6:	4404      	add	r4, r0
 80170c8:	dc19      	bgt.n	80170fe <_strtod_l+0x25e>
 80170ca:	9b07      	ldr	r3, [sp, #28]
 80170cc:	210a      	movs	r1, #10
 80170ce:	fb01 e303 	mla	r3, r1, r3, lr
 80170d2:	9307      	str	r3, [sp, #28]
 80170d4:	2100      	movs	r1, #0
 80170d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170d8:	1c58      	adds	r0, r3, #1
 80170da:	901b      	str	r0, [sp, #108]	; 0x6c
 80170dc:	785b      	ldrb	r3, [r3, #1]
 80170de:	4608      	mov	r0, r1
 80170e0:	e7c9      	b.n	8017076 <_strtod_l+0x1d6>
 80170e2:	9805      	ldr	r0, [sp, #20]
 80170e4:	e7d3      	b.n	801708e <_strtod_l+0x1ee>
 80170e6:	2908      	cmp	r1, #8
 80170e8:	f101 0101 	add.w	r1, r1, #1
 80170ec:	dc03      	bgt.n	80170f6 <_strtod_l+0x256>
 80170ee:	9b07      	ldr	r3, [sp, #28]
 80170f0:	437b      	muls	r3, r7
 80170f2:	9307      	str	r3, [sp, #28]
 80170f4:	e7e1      	b.n	80170ba <_strtod_l+0x21a>
 80170f6:	2910      	cmp	r1, #16
 80170f8:	bfd8      	it	le
 80170fa:	437d      	mulle	r5, r7
 80170fc:	e7dd      	b.n	80170ba <_strtod_l+0x21a>
 80170fe:	2c10      	cmp	r4, #16
 8017100:	bfdc      	itt	le
 8017102:	210a      	movle	r1, #10
 8017104:	fb01 e505 	mlale	r5, r1, r5, lr
 8017108:	e7e4      	b.n	80170d4 <_strtod_l+0x234>
 801710a:	2301      	movs	r3, #1
 801710c:	9304      	str	r3, [sp, #16]
 801710e:	e781      	b.n	8017014 <_strtod_l+0x174>
 8017110:	f04f 0c01 	mov.w	ip, #1
 8017114:	1cb3      	adds	r3, r6, #2
 8017116:	931b      	str	r3, [sp, #108]	; 0x6c
 8017118:	78b3      	ldrb	r3, [r6, #2]
 801711a:	e78a      	b.n	8017032 <_strtod_l+0x192>
 801711c:	f04f 0c00 	mov.w	ip, #0
 8017120:	e7f8      	b.n	8017114 <_strtod_l+0x274>
 8017122:	bf00      	nop
 8017124:	0801a940 	.word	0x0801a940
 8017128:	7ff00000 	.word	0x7ff00000
 801712c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801712e:	1c5f      	adds	r7, r3, #1
 8017130:	971b      	str	r7, [sp, #108]	; 0x6c
 8017132:	785b      	ldrb	r3, [r3, #1]
 8017134:	2b30      	cmp	r3, #48	; 0x30
 8017136:	d0f9      	beq.n	801712c <_strtod_l+0x28c>
 8017138:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801713c:	2f08      	cmp	r7, #8
 801713e:	f63f af7d 	bhi.w	801703c <_strtod_l+0x19c>
 8017142:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017148:	930a      	str	r3, [sp, #40]	; 0x28
 801714a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801714c:	1c5f      	adds	r7, r3, #1
 801714e:	971b      	str	r7, [sp, #108]	; 0x6c
 8017150:	785b      	ldrb	r3, [r3, #1]
 8017152:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8017156:	f1b8 0f09 	cmp.w	r8, #9
 801715a:	d937      	bls.n	80171cc <_strtod_l+0x32c>
 801715c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801715e:	1a7f      	subs	r7, r7, r1
 8017160:	2f08      	cmp	r7, #8
 8017162:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017166:	dc37      	bgt.n	80171d8 <_strtod_l+0x338>
 8017168:	45be      	cmp	lr, r7
 801716a:	bfa8      	it	ge
 801716c:	46be      	movge	lr, r7
 801716e:	f1bc 0f00 	cmp.w	ip, #0
 8017172:	d001      	beq.n	8017178 <_strtod_l+0x2d8>
 8017174:	f1ce 0e00 	rsb	lr, lr, #0
 8017178:	2c00      	cmp	r4, #0
 801717a:	d151      	bne.n	8017220 <_strtod_l+0x380>
 801717c:	2800      	cmp	r0, #0
 801717e:	f47f aece 	bne.w	8016f1e <_strtod_l+0x7e>
 8017182:	9a06      	ldr	r2, [sp, #24]
 8017184:	2a00      	cmp	r2, #0
 8017186:	f47f aeca 	bne.w	8016f1e <_strtod_l+0x7e>
 801718a:	9a04      	ldr	r2, [sp, #16]
 801718c:	2a00      	cmp	r2, #0
 801718e:	f47f aee4 	bne.w	8016f5a <_strtod_l+0xba>
 8017192:	2b4e      	cmp	r3, #78	; 0x4e
 8017194:	d027      	beq.n	80171e6 <_strtod_l+0x346>
 8017196:	dc21      	bgt.n	80171dc <_strtod_l+0x33c>
 8017198:	2b49      	cmp	r3, #73	; 0x49
 801719a:	f47f aede 	bne.w	8016f5a <_strtod_l+0xba>
 801719e:	49a0      	ldr	r1, [pc, #640]	; (8017420 <_strtod_l+0x580>)
 80171a0:	a81b      	add	r0, sp, #108	; 0x6c
 80171a2:	f001 fdf7 	bl	8018d94 <__match>
 80171a6:	2800      	cmp	r0, #0
 80171a8:	f43f aed7 	beq.w	8016f5a <_strtod_l+0xba>
 80171ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171ae:	499d      	ldr	r1, [pc, #628]	; (8017424 <_strtod_l+0x584>)
 80171b0:	3b01      	subs	r3, #1
 80171b2:	a81b      	add	r0, sp, #108	; 0x6c
 80171b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80171b6:	f001 fded 	bl	8018d94 <__match>
 80171ba:	b910      	cbnz	r0, 80171c2 <_strtod_l+0x322>
 80171bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171be:	3301      	adds	r3, #1
 80171c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80171c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017438 <_strtod_l+0x598>
 80171c6:	f04f 0a00 	mov.w	sl, #0
 80171ca:	e6a8      	b.n	8016f1e <_strtod_l+0x7e>
 80171cc:	210a      	movs	r1, #10
 80171ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80171d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80171d6:	e7b8      	b.n	801714a <_strtod_l+0x2aa>
 80171d8:	46be      	mov	lr, r7
 80171da:	e7c8      	b.n	801716e <_strtod_l+0x2ce>
 80171dc:	2b69      	cmp	r3, #105	; 0x69
 80171de:	d0de      	beq.n	801719e <_strtod_l+0x2fe>
 80171e0:	2b6e      	cmp	r3, #110	; 0x6e
 80171e2:	f47f aeba 	bne.w	8016f5a <_strtod_l+0xba>
 80171e6:	4990      	ldr	r1, [pc, #576]	; (8017428 <_strtod_l+0x588>)
 80171e8:	a81b      	add	r0, sp, #108	; 0x6c
 80171ea:	f001 fdd3 	bl	8018d94 <__match>
 80171ee:	2800      	cmp	r0, #0
 80171f0:	f43f aeb3 	beq.w	8016f5a <_strtod_l+0xba>
 80171f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171f6:	781b      	ldrb	r3, [r3, #0]
 80171f8:	2b28      	cmp	r3, #40	; 0x28
 80171fa:	d10e      	bne.n	801721a <_strtod_l+0x37a>
 80171fc:	aa1e      	add	r2, sp, #120	; 0x78
 80171fe:	498b      	ldr	r1, [pc, #556]	; (801742c <_strtod_l+0x58c>)
 8017200:	a81b      	add	r0, sp, #108	; 0x6c
 8017202:	f001 fddb 	bl	8018dbc <__hexnan>
 8017206:	2805      	cmp	r0, #5
 8017208:	d107      	bne.n	801721a <_strtod_l+0x37a>
 801720a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801720c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017210:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017214:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017218:	e681      	b.n	8016f1e <_strtod_l+0x7e>
 801721a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017440 <_strtod_l+0x5a0>
 801721e:	e7d2      	b.n	80171c6 <_strtod_l+0x326>
 8017220:	ebae 0302 	sub.w	r3, lr, r2
 8017224:	9306      	str	r3, [sp, #24]
 8017226:	9b05      	ldr	r3, [sp, #20]
 8017228:	9807      	ldr	r0, [sp, #28]
 801722a:	2b00      	cmp	r3, #0
 801722c:	bf08      	it	eq
 801722e:	4623      	moveq	r3, r4
 8017230:	2c10      	cmp	r4, #16
 8017232:	9305      	str	r3, [sp, #20]
 8017234:	46a0      	mov	r8, r4
 8017236:	bfa8      	it	ge
 8017238:	f04f 0810 	movge.w	r8, #16
 801723c:	f7e9 f97a 	bl	8000534 <__aeabi_ui2d>
 8017240:	2c09      	cmp	r4, #9
 8017242:	4682      	mov	sl, r0
 8017244:	468b      	mov	fp, r1
 8017246:	dc13      	bgt.n	8017270 <_strtod_l+0x3d0>
 8017248:	9b06      	ldr	r3, [sp, #24]
 801724a:	2b00      	cmp	r3, #0
 801724c:	f43f ae67 	beq.w	8016f1e <_strtod_l+0x7e>
 8017250:	9b06      	ldr	r3, [sp, #24]
 8017252:	dd7a      	ble.n	801734a <_strtod_l+0x4aa>
 8017254:	2b16      	cmp	r3, #22
 8017256:	dc61      	bgt.n	801731c <_strtod_l+0x47c>
 8017258:	4a75      	ldr	r2, [pc, #468]	; (8017430 <_strtod_l+0x590>)
 801725a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801725e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017262:	4652      	mov	r2, sl
 8017264:	465b      	mov	r3, fp
 8017266:	f7e9 f9df 	bl	8000628 <__aeabi_dmul>
 801726a:	4682      	mov	sl, r0
 801726c:	468b      	mov	fp, r1
 801726e:	e656      	b.n	8016f1e <_strtod_l+0x7e>
 8017270:	4b6f      	ldr	r3, [pc, #444]	; (8017430 <_strtod_l+0x590>)
 8017272:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017276:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801727a:	f7e9 f9d5 	bl	8000628 <__aeabi_dmul>
 801727e:	4606      	mov	r6, r0
 8017280:	4628      	mov	r0, r5
 8017282:	460f      	mov	r7, r1
 8017284:	f7e9 f956 	bl	8000534 <__aeabi_ui2d>
 8017288:	4602      	mov	r2, r0
 801728a:	460b      	mov	r3, r1
 801728c:	4630      	mov	r0, r6
 801728e:	4639      	mov	r1, r7
 8017290:	f7e9 f814 	bl	80002bc <__adddf3>
 8017294:	2c0f      	cmp	r4, #15
 8017296:	4682      	mov	sl, r0
 8017298:	468b      	mov	fp, r1
 801729a:	ddd5      	ble.n	8017248 <_strtod_l+0x3a8>
 801729c:	9b06      	ldr	r3, [sp, #24]
 801729e:	eba4 0808 	sub.w	r8, r4, r8
 80172a2:	4498      	add	r8, r3
 80172a4:	f1b8 0f00 	cmp.w	r8, #0
 80172a8:	f340 8096 	ble.w	80173d8 <_strtod_l+0x538>
 80172ac:	f018 030f 	ands.w	r3, r8, #15
 80172b0:	d00a      	beq.n	80172c8 <_strtod_l+0x428>
 80172b2:	495f      	ldr	r1, [pc, #380]	; (8017430 <_strtod_l+0x590>)
 80172b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80172b8:	4652      	mov	r2, sl
 80172ba:	465b      	mov	r3, fp
 80172bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172c0:	f7e9 f9b2 	bl	8000628 <__aeabi_dmul>
 80172c4:	4682      	mov	sl, r0
 80172c6:	468b      	mov	fp, r1
 80172c8:	f038 080f 	bics.w	r8, r8, #15
 80172cc:	d073      	beq.n	80173b6 <_strtod_l+0x516>
 80172ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80172d2:	dd47      	ble.n	8017364 <_strtod_l+0x4c4>
 80172d4:	2400      	movs	r4, #0
 80172d6:	46a0      	mov	r8, r4
 80172d8:	9407      	str	r4, [sp, #28]
 80172da:	9405      	str	r4, [sp, #20]
 80172dc:	2322      	movs	r3, #34	; 0x22
 80172de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017438 <_strtod_l+0x598>
 80172e2:	f8c9 3000 	str.w	r3, [r9]
 80172e6:	f04f 0a00 	mov.w	sl, #0
 80172ea:	9b07      	ldr	r3, [sp, #28]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	f43f ae16 	beq.w	8016f1e <_strtod_l+0x7e>
 80172f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80172f4:	4648      	mov	r0, r9
 80172f6:	f001 fe66 	bl	8018fc6 <_Bfree>
 80172fa:	9905      	ldr	r1, [sp, #20]
 80172fc:	4648      	mov	r0, r9
 80172fe:	f001 fe62 	bl	8018fc6 <_Bfree>
 8017302:	4641      	mov	r1, r8
 8017304:	4648      	mov	r0, r9
 8017306:	f001 fe5e 	bl	8018fc6 <_Bfree>
 801730a:	9907      	ldr	r1, [sp, #28]
 801730c:	4648      	mov	r0, r9
 801730e:	f001 fe5a 	bl	8018fc6 <_Bfree>
 8017312:	4621      	mov	r1, r4
 8017314:	4648      	mov	r0, r9
 8017316:	f001 fe56 	bl	8018fc6 <_Bfree>
 801731a:	e600      	b.n	8016f1e <_strtod_l+0x7e>
 801731c:	9a06      	ldr	r2, [sp, #24]
 801731e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017322:	4293      	cmp	r3, r2
 8017324:	dbba      	blt.n	801729c <_strtod_l+0x3fc>
 8017326:	4d42      	ldr	r5, [pc, #264]	; (8017430 <_strtod_l+0x590>)
 8017328:	f1c4 040f 	rsb	r4, r4, #15
 801732c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017330:	4652      	mov	r2, sl
 8017332:	465b      	mov	r3, fp
 8017334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017338:	f7e9 f976 	bl	8000628 <__aeabi_dmul>
 801733c:	9b06      	ldr	r3, [sp, #24]
 801733e:	1b1c      	subs	r4, r3, r4
 8017340:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017344:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017348:	e78d      	b.n	8017266 <_strtod_l+0x3c6>
 801734a:	f113 0f16 	cmn.w	r3, #22
 801734e:	dba5      	blt.n	801729c <_strtod_l+0x3fc>
 8017350:	4a37      	ldr	r2, [pc, #220]	; (8017430 <_strtod_l+0x590>)
 8017352:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017356:	e9d2 2300 	ldrd	r2, r3, [r2]
 801735a:	4650      	mov	r0, sl
 801735c:	4659      	mov	r1, fp
 801735e:	f7e9 fa8d 	bl	800087c <__aeabi_ddiv>
 8017362:	e782      	b.n	801726a <_strtod_l+0x3ca>
 8017364:	2300      	movs	r3, #0
 8017366:	4e33      	ldr	r6, [pc, #204]	; (8017434 <_strtod_l+0x594>)
 8017368:	ea4f 1828 	mov.w	r8, r8, asr #4
 801736c:	4650      	mov	r0, sl
 801736e:	4659      	mov	r1, fp
 8017370:	461d      	mov	r5, r3
 8017372:	f1b8 0f01 	cmp.w	r8, #1
 8017376:	dc21      	bgt.n	80173bc <_strtod_l+0x51c>
 8017378:	b10b      	cbz	r3, 801737e <_strtod_l+0x4de>
 801737a:	4682      	mov	sl, r0
 801737c:	468b      	mov	fp, r1
 801737e:	4b2d      	ldr	r3, [pc, #180]	; (8017434 <_strtod_l+0x594>)
 8017380:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017384:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017388:	4652      	mov	r2, sl
 801738a:	465b      	mov	r3, fp
 801738c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017390:	f7e9 f94a 	bl	8000628 <__aeabi_dmul>
 8017394:	4b28      	ldr	r3, [pc, #160]	; (8017438 <_strtod_l+0x598>)
 8017396:	460a      	mov	r2, r1
 8017398:	400b      	ands	r3, r1
 801739a:	4928      	ldr	r1, [pc, #160]	; (801743c <_strtod_l+0x59c>)
 801739c:	428b      	cmp	r3, r1
 801739e:	4682      	mov	sl, r0
 80173a0:	d898      	bhi.n	80172d4 <_strtod_l+0x434>
 80173a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80173a6:	428b      	cmp	r3, r1
 80173a8:	bf86      	itte	hi
 80173aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017444 <_strtod_l+0x5a4>
 80173ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80173b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80173b6:	2300      	movs	r3, #0
 80173b8:	9304      	str	r3, [sp, #16]
 80173ba:	e077      	b.n	80174ac <_strtod_l+0x60c>
 80173bc:	f018 0f01 	tst.w	r8, #1
 80173c0:	d006      	beq.n	80173d0 <_strtod_l+0x530>
 80173c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80173c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ca:	f7e9 f92d 	bl	8000628 <__aeabi_dmul>
 80173ce:	2301      	movs	r3, #1
 80173d0:	3501      	adds	r5, #1
 80173d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80173d6:	e7cc      	b.n	8017372 <_strtod_l+0x4d2>
 80173d8:	d0ed      	beq.n	80173b6 <_strtod_l+0x516>
 80173da:	f1c8 0800 	rsb	r8, r8, #0
 80173de:	f018 020f 	ands.w	r2, r8, #15
 80173e2:	d00a      	beq.n	80173fa <_strtod_l+0x55a>
 80173e4:	4b12      	ldr	r3, [pc, #72]	; (8017430 <_strtod_l+0x590>)
 80173e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173ea:	4650      	mov	r0, sl
 80173ec:	4659      	mov	r1, fp
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	f7e9 fa43 	bl	800087c <__aeabi_ddiv>
 80173f6:	4682      	mov	sl, r0
 80173f8:	468b      	mov	fp, r1
 80173fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80173fe:	d0da      	beq.n	80173b6 <_strtod_l+0x516>
 8017400:	f1b8 0f1f 	cmp.w	r8, #31
 8017404:	dd20      	ble.n	8017448 <_strtod_l+0x5a8>
 8017406:	2400      	movs	r4, #0
 8017408:	46a0      	mov	r8, r4
 801740a:	9407      	str	r4, [sp, #28]
 801740c:	9405      	str	r4, [sp, #20]
 801740e:	2322      	movs	r3, #34	; 0x22
 8017410:	f04f 0a00 	mov.w	sl, #0
 8017414:	f04f 0b00 	mov.w	fp, #0
 8017418:	f8c9 3000 	str.w	r3, [r9]
 801741c:	e765      	b.n	80172ea <_strtod_l+0x44a>
 801741e:	bf00      	nop
 8017420:	0801a90d 	.word	0x0801a90d
 8017424:	0801a993 	.word	0x0801a993
 8017428:	0801a915 	.word	0x0801a915
 801742c:	0801a954 	.word	0x0801a954
 8017430:	0801a9d0 	.word	0x0801a9d0
 8017434:	0801a9a8 	.word	0x0801a9a8
 8017438:	7ff00000 	.word	0x7ff00000
 801743c:	7ca00000 	.word	0x7ca00000
 8017440:	fff80000 	.word	0xfff80000
 8017444:	7fefffff 	.word	0x7fefffff
 8017448:	f018 0310 	ands.w	r3, r8, #16
 801744c:	bf18      	it	ne
 801744e:	236a      	movne	r3, #106	; 0x6a
 8017450:	4da0      	ldr	r5, [pc, #640]	; (80176d4 <_strtod_l+0x834>)
 8017452:	9304      	str	r3, [sp, #16]
 8017454:	4650      	mov	r0, sl
 8017456:	4659      	mov	r1, fp
 8017458:	2300      	movs	r3, #0
 801745a:	f1b8 0f00 	cmp.w	r8, #0
 801745e:	f300 810a 	bgt.w	8017676 <_strtod_l+0x7d6>
 8017462:	b10b      	cbz	r3, 8017468 <_strtod_l+0x5c8>
 8017464:	4682      	mov	sl, r0
 8017466:	468b      	mov	fp, r1
 8017468:	9b04      	ldr	r3, [sp, #16]
 801746a:	b1bb      	cbz	r3, 801749c <_strtod_l+0x5fc>
 801746c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017470:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017474:	2b00      	cmp	r3, #0
 8017476:	4659      	mov	r1, fp
 8017478:	dd10      	ble.n	801749c <_strtod_l+0x5fc>
 801747a:	2b1f      	cmp	r3, #31
 801747c:	f340 8107 	ble.w	801768e <_strtod_l+0x7ee>
 8017480:	2b34      	cmp	r3, #52	; 0x34
 8017482:	bfde      	ittt	le
 8017484:	3b20      	suble	r3, #32
 8017486:	f04f 32ff 	movle.w	r2, #4294967295
 801748a:	fa02 f303 	lslle.w	r3, r2, r3
 801748e:	f04f 0a00 	mov.w	sl, #0
 8017492:	bfcc      	ite	gt
 8017494:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017498:	ea03 0b01 	andle.w	fp, r3, r1
 801749c:	2200      	movs	r2, #0
 801749e:	2300      	movs	r3, #0
 80174a0:	4650      	mov	r0, sl
 80174a2:	4659      	mov	r1, fp
 80174a4:	f7e9 fb28 	bl	8000af8 <__aeabi_dcmpeq>
 80174a8:	2800      	cmp	r0, #0
 80174aa:	d1ac      	bne.n	8017406 <_strtod_l+0x566>
 80174ac:	9b07      	ldr	r3, [sp, #28]
 80174ae:	9300      	str	r3, [sp, #0]
 80174b0:	9a05      	ldr	r2, [sp, #20]
 80174b2:	9908      	ldr	r1, [sp, #32]
 80174b4:	4623      	mov	r3, r4
 80174b6:	4648      	mov	r0, r9
 80174b8:	f001 fdd7 	bl	801906a <__s2b>
 80174bc:	9007      	str	r0, [sp, #28]
 80174be:	2800      	cmp	r0, #0
 80174c0:	f43f af08 	beq.w	80172d4 <_strtod_l+0x434>
 80174c4:	9a06      	ldr	r2, [sp, #24]
 80174c6:	9b06      	ldr	r3, [sp, #24]
 80174c8:	2a00      	cmp	r2, #0
 80174ca:	f1c3 0300 	rsb	r3, r3, #0
 80174ce:	bfa8      	it	ge
 80174d0:	2300      	movge	r3, #0
 80174d2:	930e      	str	r3, [sp, #56]	; 0x38
 80174d4:	2400      	movs	r4, #0
 80174d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80174da:	9316      	str	r3, [sp, #88]	; 0x58
 80174dc:	46a0      	mov	r8, r4
 80174de:	9b07      	ldr	r3, [sp, #28]
 80174e0:	4648      	mov	r0, r9
 80174e2:	6859      	ldr	r1, [r3, #4]
 80174e4:	f001 fd3b 	bl	8018f5e <_Balloc>
 80174e8:	9005      	str	r0, [sp, #20]
 80174ea:	2800      	cmp	r0, #0
 80174ec:	f43f aef6 	beq.w	80172dc <_strtod_l+0x43c>
 80174f0:	9b07      	ldr	r3, [sp, #28]
 80174f2:	691a      	ldr	r2, [r3, #16]
 80174f4:	3202      	adds	r2, #2
 80174f6:	f103 010c 	add.w	r1, r3, #12
 80174fa:	0092      	lsls	r2, r2, #2
 80174fc:	300c      	adds	r0, #12
 80174fe:	f001 fd21 	bl	8018f44 <memcpy>
 8017502:	aa1e      	add	r2, sp, #120	; 0x78
 8017504:	a91d      	add	r1, sp, #116	; 0x74
 8017506:	ec4b ab10 	vmov	d0, sl, fp
 801750a:	4648      	mov	r0, r9
 801750c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017510:	f002 f866 	bl	80195e0 <__d2b>
 8017514:	901c      	str	r0, [sp, #112]	; 0x70
 8017516:	2800      	cmp	r0, #0
 8017518:	f43f aee0 	beq.w	80172dc <_strtod_l+0x43c>
 801751c:	2101      	movs	r1, #1
 801751e:	4648      	mov	r0, r9
 8017520:	f001 fe2f 	bl	8019182 <__i2b>
 8017524:	4680      	mov	r8, r0
 8017526:	2800      	cmp	r0, #0
 8017528:	f43f aed8 	beq.w	80172dc <_strtod_l+0x43c>
 801752c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801752e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017530:	2e00      	cmp	r6, #0
 8017532:	bfab      	itete	ge
 8017534:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017536:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017538:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801753a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801753c:	bfac      	ite	ge
 801753e:	18f7      	addge	r7, r6, r3
 8017540:	1b9d      	sublt	r5, r3, r6
 8017542:	9b04      	ldr	r3, [sp, #16]
 8017544:	1af6      	subs	r6, r6, r3
 8017546:	4416      	add	r6, r2
 8017548:	4b63      	ldr	r3, [pc, #396]	; (80176d8 <_strtod_l+0x838>)
 801754a:	3e01      	subs	r6, #1
 801754c:	429e      	cmp	r6, r3
 801754e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017552:	f280 80af 	bge.w	80176b4 <_strtod_l+0x814>
 8017556:	1b9b      	subs	r3, r3, r6
 8017558:	2b1f      	cmp	r3, #31
 801755a:	eba2 0203 	sub.w	r2, r2, r3
 801755e:	f04f 0101 	mov.w	r1, #1
 8017562:	f300 809b 	bgt.w	801769c <_strtod_l+0x7fc>
 8017566:	fa01 f303 	lsl.w	r3, r1, r3
 801756a:	930f      	str	r3, [sp, #60]	; 0x3c
 801756c:	2300      	movs	r3, #0
 801756e:	930a      	str	r3, [sp, #40]	; 0x28
 8017570:	18be      	adds	r6, r7, r2
 8017572:	9b04      	ldr	r3, [sp, #16]
 8017574:	42b7      	cmp	r7, r6
 8017576:	4415      	add	r5, r2
 8017578:	441d      	add	r5, r3
 801757a:	463b      	mov	r3, r7
 801757c:	bfa8      	it	ge
 801757e:	4633      	movge	r3, r6
 8017580:	42ab      	cmp	r3, r5
 8017582:	bfa8      	it	ge
 8017584:	462b      	movge	r3, r5
 8017586:	2b00      	cmp	r3, #0
 8017588:	bfc2      	ittt	gt
 801758a:	1af6      	subgt	r6, r6, r3
 801758c:	1aed      	subgt	r5, r5, r3
 801758e:	1aff      	subgt	r7, r7, r3
 8017590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017592:	b1bb      	cbz	r3, 80175c4 <_strtod_l+0x724>
 8017594:	4641      	mov	r1, r8
 8017596:	461a      	mov	r2, r3
 8017598:	4648      	mov	r0, r9
 801759a:	f001 fe91 	bl	80192c0 <__pow5mult>
 801759e:	4680      	mov	r8, r0
 80175a0:	2800      	cmp	r0, #0
 80175a2:	f43f ae9b 	beq.w	80172dc <_strtod_l+0x43c>
 80175a6:	4601      	mov	r1, r0
 80175a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80175aa:	4648      	mov	r0, r9
 80175ac:	f001 fdf2 	bl	8019194 <__multiply>
 80175b0:	900c      	str	r0, [sp, #48]	; 0x30
 80175b2:	2800      	cmp	r0, #0
 80175b4:	f43f ae92 	beq.w	80172dc <_strtod_l+0x43c>
 80175b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80175ba:	4648      	mov	r0, r9
 80175bc:	f001 fd03 	bl	8018fc6 <_Bfree>
 80175c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175c2:	931c      	str	r3, [sp, #112]	; 0x70
 80175c4:	2e00      	cmp	r6, #0
 80175c6:	dc7a      	bgt.n	80176be <_strtod_l+0x81e>
 80175c8:	9b06      	ldr	r3, [sp, #24]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	dd08      	ble.n	80175e0 <_strtod_l+0x740>
 80175ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80175d0:	9905      	ldr	r1, [sp, #20]
 80175d2:	4648      	mov	r0, r9
 80175d4:	f001 fe74 	bl	80192c0 <__pow5mult>
 80175d8:	9005      	str	r0, [sp, #20]
 80175da:	2800      	cmp	r0, #0
 80175dc:	f43f ae7e 	beq.w	80172dc <_strtod_l+0x43c>
 80175e0:	2d00      	cmp	r5, #0
 80175e2:	dd08      	ble.n	80175f6 <_strtod_l+0x756>
 80175e4:	462a      	mov	r2, r5
 80175e6:	9905      	ldr	r1, [sp, #20]
 80175e8:	4648      	mov	r0, r9
 80175ea:	f001 feb7 	bl	801935c <__lshift>
 80175ee:	9005      	str	r0, [sp, #20]
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f43f ae73 	beq.w	80172dc <_strtod_l+0x43c>
 80175f6:	2f00      	cmp	r7, #0
 80175f8:	dd08      	ble.n	801760c <_strtod_l+0x76c>
 80175fa:	4641      	mov	r1, r8
 80175fc:	463a      	mov	r2, r7
 80175fe:	4648      	mov	r0, r9
 8017600:	f001 feac 	bl	801935c <__lshift>
 8017604:	4680      	mov	r8, r0
 8017606:	2800      	cmp	r0, #0
 8017608:	f43f ae68 	beq.w	80172dc <_strtod_l+0x43c>
 801760c:	9a05      	ldr	r2, [sp, #20]
 801760e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017610:	4648      	mov	r0, r9
 8017612:	f001 ff11 	bl	8019438 <__mdiff>
 8017616:	4604      	mov	r4, r0
 8017618:	2800      	cmp	r0, #0
 801761a:	f43f ae5f 	beq.w	80172dc <_strtod_l+0x43c>
 801761e:	68c3      	ldr	r3, [r0, #12]
 8017620:	930c      	str	r3, [sp, #48]	; 0x30
 8017622:	2300      	movs	r3, #0
 8017624:	60c3      	str	r3, [r0, #12]
 8017626:	4641      	mov	r1, r8
 8017628:	f001 feec 	bl	8019404 <__mcmp>
 801762c:	2800      	cmp	r0, #0
 801762e:	da55      	bge.n	80176dc <_strtod_l+0x83c>
 8017630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017632:	b9e3      	cbnz	r3, 801766e <_strtod_l+0x7ce>
 8017634:	f1ba 0f00 	cmp.w	sl, #0
 8017638:	d119      	bne.n	801766e <_strtod_l+0x7ce>
 801763a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801763e:	b9b3      	cbnz	r3, 801766e <_strtod_l+0x7ce>
 8017640:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017644:	0d1b      	lsrs	r3, r3, #20
 8017646:	051b      	lsls	r3, r3, #20
 8017648:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801764c:	d90f      	bls.n	801766e <_strtod_l+0x7ce>
 801764e:	6963      	ldr	r3, [r4, #20]
 8017650:	b913      	cbnz	r3, 8017658 <_strtod_l+0x7b8>
 8017652:	6923      	ldr	r3, [r4, #16]
 8017654:	2b01      	cmp	r3, #1
 8017656:	dd0a      	ble.n	801766e <_strtod_l+0x7ce>
 8017658:	4621      	mov	r1, r4
 801765a:	2201      	movs	r2, #1
 801765c:	4648      	mov	r0, r9
 801765e:	f001 fe7d 	bl	801935c <__lshift>
 8017662:	4641      	mov	r1, r8
 8017664:	4604      	mov	r4, r0
 8017666:	f001 fecd 	bl	8019404 <__mcmp>
 801766a:	2800      	cmp	r0, #0
 801766c:	dc67      	bgt.n	801773e <_strtod_l+0x89e>
 801766e:	9b04      	ldr	r3, [sp, #16]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d171      	bne.n	8017758 <_strtod_l+0x8b8>
 8017674:	e63d      	b.n	80172f2 <_strtod_l+0x452>
 8017676:	f018 0f01 	tst.w	r8, #1
 801767a:	d004      	beq.n	8017686 <_strtod_l+0x7e6>
 801767c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017680:	f7e8 ffd2 	bl	8000628 <__aeabi_dmul>
 8017684:	2301      	movs	r3, #1
 8017686:	ea4f 0868 	mov.w	r8, r8, asr #1
 801768a:	3508      	adds	r5, #8
 801768c:	e6e5      	b.n	801745a <_strtod_l+0x5ba>
 801768e:	f04f 32ff 	mov.w	r2, #4294967295
 8017692:	fa02 f303 	lsl.w	r3, r2, r3
 8017696:	ea03 0a0a 	and.w	sl, r3, sl
 801769a:	e6ff      	b.n	801749c <_strtod_l+0x5fc>
 801769c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80176a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80176a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80176a8:	36e2      	adds	r6, #226	; 0xe2
 80176aa:	fa01 f306 	lsl.w	r3, r1, r6
 80176ae:	930a      	str	r3, [sp, #40]	; 0x28
 80176b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80176b2:	e75d      	b.n	8017570 <_strtod_l+0x6d0>
 80176b4:	2300      	movs	r3, #0
 80176b6:	930a      	str	r3, [sp, #40]	; 0x28
 80176b8:	2301      	movs	r3, #1
 80176ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80176bc:	e758      	b.n	8017570 <_strtod_l+0x6d0>
 80176be:	4632      	mov	r2, r6
 80176c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80176c2:	4648      	mov	r0, r9
 80176c4:	f001 fe4a 	bl	801935c <__lshift>
 80176c8:	901c      	str	r0, [sp, #112]	; 0x70
 80176ca:	2800      	cmp	r0, #0
 80176cc:	f47f af7c 	bne.w	80175c8 <_strtod_l+0x728>
 80176d0:	e604      	b.n	80172dc <_strtod_l+0x43c>
 80176d2:	bf00      	nop
 80176d4:	0801a968 	.word	0x0801a968
 80176d8:	fffffc02 	.word	0xfffffc02
 80176dc:	465d      	mov	r5, fp
 80176de:	f040 8086 	bne.w	80177ee <_strtod_l+0x94e>
 80176e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176e8:	b32a      	cbz	r2, 8017736 <_strtod_l+0x896>
 80176ea:	4aaf      	ldr	r2, [pc, #700]	; (80179a8 <_strtod_l+0xb08>)
 80176ec:	4293      	cmp	r3, r2
 80176ee:	d153      	bne.n	8017798 <_strtod_l+0x8f8>
 80176f0:	9b04      	ldr	r3, [sp, #16]
 80176f2:	4650      	mov	r0, sl
 80176f4:	b1d3      	cbz	r3, 801772c <_strtod_l+0x88c>
 80176f6:	4aad      	ldr	r2, [pc, #692]	; (80179ac <_strtod_l+0xb0c>)
 80176f8:	402a      	ands	r2, r5
 80176fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80176fe:	f04f 31ff 	mov.w	r1, #4294967295
 8017702:	d816      	bhi.n	8017732 <_strtod_l+0x892>
 8017704:	0d12      	lsrs	r2, r2, #20
 8017706:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801770a:	fa01 f303 	lsl.w	r3, r1, r3
 801770e:	4298      	cmp	r0, r3
 8017710:	d142      	bne.n	8017798 <_strtod_l+0x8f8>
 8017712:	4ba7      	ldr	r3, [pc, #668]	; (80179b0 <_strtod_l+0xb10>)
 8017714:	429d      	cmp	r5, r3
 8017716:	d102      	bne.n	801771e <_strtod_l+0x87e>
 8017718:	3001      	adds	r0, #1
 801771a:	f43f addf 	beq.w	80172dc <_strtod_l+0x43c>
 801771e:	4ba3      	ldr	r3, [pc, #652]	; (80179ac <_strtod_l+0xb0c>)
 8017720:	402b      	ands	r3, r5
 8017722:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017726:	f04f 0a00 	mov.w	sl, #0
 801772a:	e7a0      	b.n	801766e <_strtod_l+0x7ce>
 801772c:	f04f 33ff 	mov.w	r3, #4294967295
 8017730:	e7ed      	b.n	801770e <_strtod_l+0x86e>
 8017732:	460b      	mov	r3, r1
 8017734:	e7eb      	b.n	801770e <_strtod_l+0x86e>
 8017736:	bb7b      	cbnz	r3, 8017798 <_strtod_l+0x8f8>
 8017738:	f1ba 0f00 	cmp.w	sl, #0
 801773c:	d12c      	bne.n	8017798 <_strtod_l+0x8f8>
 801773e:	9904      	ldr	r1, [sp, #16]
 8017740:	4a9a      	ldr	r2, [pc, #616]	; (80179ac <_strtod_l+0xb0c>)
 8017742:	465b      	mov	r3, fp
 8017744:	b1f1      	cbz	r1, 8017784 <_strtod_l+0x8e4>
 8017746:	ea02 010b 	and.w	r1, r2, fp
 801774a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801774e:	dc19      	bgt.n	8017784 <_strtod_l+0x8e4>
 8017750:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017754:	f77f ae5b 	ble.w	801740e <_strtod_l+0x56e>
 8017758:	4a96      	ldr	r2, [pc, #600]	; (80179b4 <_strtod_l+0xb14>)
 801775a:	2300      	movs	r3, #0
 801775c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017760:	4650      	mov	r0, sl
 8017762:	4659      	mov	r1, fp
 8017764:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017768:	f7e8 ff5e 	bl	8000628 <__aeabi_dmul>
 801776c:	4682      	mov	sl, r0
 801776e:	468b      	mov	fp, r1
 8017770:	2900      	cmp	r1, #0
 8017772:	f47f adbe 	bne.w	80172f2 <_strtod_l+0x452>
 8017776:	2800      	cmp	r0, #0
 8017778:	f47f adbb 	bne.w	80172f2 <_strtod_l+0x452>
 801777c:	2322      	movs	r3, #34	; 0x22
 801777e:	f8c9 3000 	str.w	r3, [r9]
 8017782:	e5b6      	b.n	80172f2 <_strtod_l+0x452>
 8017784:	4013      	ands	r3, r2
 8017786:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801778a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801778e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017792:	f04f 3aff 	mov.w	sl, #4294967295
 8017796:	e76a      	b.n	801766e <_strtod_l+0x7ce>
 8017798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801779a:	b193      	cbz	r3, 80177c2 <_strtod_l+0x922>
 801779c:	422b      	tst	r3, r5
 801779e:	f43f af66 	beq.w	801766e <_strtod_l+0x7ce>
 80177a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177a4:	9a04      	ldr	r2, [sp, #16]
 80177a6:	4650      	mov	r0, sl
 80177a8:	4659      	mov	r1, fp
 80177aa:	b173      	cbz	r3, 80177ca <_strtod_l+0x92a>
 80177ac:	f7ff fb5c 	bl	8016e68 <sulp>
 80177b0:	4602      	mov	r2, r0
 80177b2:	460b      	mov	r3, r1
 80177b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177b8:	f7e8 fd80 	bl	80002bc <__adddf3>
 80177bc:	4682      	mov	sl, r0
 80177be:	468b      	mov	fp, r1
 80177c0:	e755      	b.n	801766e <_strtod_l+0x7ce>
 80177c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177c4:	ea13 0f0a 	tst.w	r3, sl
 80177c8:	e7e9      	b.n	801779e <_strtod_l+0x8fe>
 80177ca:	f7ff fb4d 	bl	8016e68 <sulp>
 80177ce:	4602      	mov	r2, r0
 80177d0:	460b      	mov	r3, r1
 80177d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177d6:	f7e8 fd6f 	bl	80002b8 <__aeabi_dsub>
 80177da:	2200      	movs	r2, #0
 80177dc:	2300      	movs	r3, #0
 80177de:	4682      	mov	sl, r0
 80177e0:	468b      	mov	fp, r1
 80177e2:	f7e9 f989 	bl	8000af8 <__aeabi_dcmpeq>
 80177e6:	2800      	cmp	r0, #0
 80177e8:	f47f ae11 	bne.w	801740e <_strtod_l+0x56e>
 80177ec:	e73f      	b.n	801766e <_strtod_l+0x7ce>
 80177ee:	4641      	mov	r1, r8
 80177f0:	4620      	mov	r0, r4
 80177f2:	f001 ff44 	bl	801967e <__ratio>
 80177f6:	ec57 6b10 	vmov	r6, r7, d0
 80177fa:	2200      	movs	r2, #0
 80177fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017800:	ee10 0a10 	vmov	r0, s0
 8017804:	4639      	mov	r1, r7
 8017806:	f7e9 f98b 	bl	8000b20 <__aeabi_dcmple>
 801780a:	2800      	cmp	r0, #0
 801780c:	d077      	beq.n	80178fe <_strtod_l+0xa5e>
 801780e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017810:	2b00      	cmp	r3, #0
 8017812:	d04a      	beq.n	80178aa <_strtod_l+0xa0a>
 8017814:	4b68      	ldr	r3, [pc, #416]	; (80179b8 <_strtod_l+0xb18>)
 8017816:	2200      	movs	r2, #0
 8017818:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801781c:	4f66      	ldr	r7, [pc, #408]	; (80179b8 <_strtod_l+0xb18>)
 801781e:	2600      	movs	r6, #0
 8017820:	4b62      	ldr	r3, [pc, #392]	; (80179ac <_strtod_l+0xb0c>)
 8017822:	402b      	ands	r3, r5
 8017824:	930f      	str	r3, [sp, #60]	; 0x3c
 8017826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017828:	4b64      	ldr	r3, [pc, #400]	; (80179bc <_strtod_l+0xb1c>)
 801782a:	429a      	cmp	r2, r3
 801782c:	f040 80ce 	bne.w	80179cc <_strtod_l+0xb2c>
 8017830:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017838:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801783c:	ec4b ab10 	vmov	d0, sl, fp
 8017840:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017844:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017848:	f001 fe54 	bl	80194f4 <__ulp>
 801784c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017850:	ec53 2b10 	vmov	r2, r3, d0
 8017854:	f7e8 fee8 	bl	8000628 <__aeabi_dmul>
 8017858:	4652      	mov	r2, sl
 801785a:	465b      	mov	r3, fp
 801785c:	f7e8 fd2e 	bl	80002bc <__adddf3>
 8017860:	460b      	mov	r3, r1
 8017862:	4952      	ldr	r1, [pc, #328]	; (80179ac <_strtod_l+0xb0c>)
 8017864:	4a56      	ldr	r2, [pc, #344]	; (80179c0 <_strtod_l+0xb20>)
 8017866:	4019      	ands	r1, r3
 8017868:	4291      	cmp	r1, r2
 801786a:	4682      	mov	sl, r0
 801786c:	d95b      	bls.n	8017926 <_strtod_l+0xa86>
 801786e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017870:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017874:	4293      	cmp	r3, r2
 8017876:	d103      	bne.n	8017880 <_strtod_l+0x9e0>
 8017878:	9b08      	ldr	r3, [sp, #32]
 801787a:	3301      	adds	r3, #1
 801787c:	f43f ad2e 	beq.w	80172dc <_strtod_l+0x43c>
 8017880:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80179b0 <_strtod_l+0xb10>
 8017884:	f04f 3aff 	mov.w	sl, #4294967295
 8017888:	991c      	ldr	r1, [sp, #112]	; 0x70
 801788a:	4648      	mov	r0, r9
 801788c:	f001 fb9b 	bl	8018fc6 <_Bfree>
 8017890:	9905      	ldr	r1, [sp, #20]
 8017892:	4648      	mov	r0, r9
 8017894:	f001 fb97 	bl	8018fc6 <_Bfree>
 8017898:	4641      	mov	r1, r8
 801789a:	4648      	mov	r0, r9
 801789c:	f001 fb93 	bl	8018fc6 <_Bfree>
 80178a0:	4621      	mov	r1, r4
 80178a2:	4648      	mov	r0, r9
 80178a4:	f001 fb8f 	bl	8018fc6 <_Bfree>
 80178a8:	e619      	b.n	80174de <_strtod_l+0x63e>
 80178aa:	f1ba 0f00 	cmp.w	sl, #0
 80178ae:	d11a      	bne.n	80178e6 <_strtod_l+0xa46>
 80178b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80178b4:	b9eb      	cbnz	r3, 80178f2 <_strtod_l+0xa52>
 80178b6:	2200      	movs	r2, #0
 80178b8:	4b3f      	ldr	r3, [pc, #252]	; (80179b8 <_strtod_l+0xb18>)
 80178ba:	4630      	mov	r0, r6
 80178bc:	4639      	mov	r1, r7
 80178be:	f7e9 f925 	bl	8000b0c <__aeabi_dcmplt>
 80178c2:	b9c8      	cbnz	r0, 80178f8 <_strtod_l+0xa58>
 80178c4:	4630      	mov	r0, r6
 80178c6:	4639      	mov	r1, r7
 80178c8:	2200      	movs	r2, #0
 80178ca:	4b3e      	ldr	r3, [pc, #248]	; (80179c4 <_strtod_l+0xb24>)
 80178cc:	f7e8 feac 	bl	8000628 <__aeabi_dmul>
 80178d0:	4606      	mov	r6, r0
 80178d2:	460f      	mov	r7, r1
 80178d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80178d8:	9618      	str	r6, [sp, #96]	; 0x60
 80178da:	9319      	str	r3, [sp, #100]	; 0x64
 80178dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80178e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80178e4:	e79c      	b.n	8017820 <_strtod_l+0x980>
 80178e6:	f1ba 0f01 	cmp.w	sl, #1
 80178ea:	d102      	bne.n	80178f2 <_strtod_l+0xa52>
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	f43f ad8e 	beq.w	801740e <_strtod_l+0x56e>
 80178f2:	2200      	movs	r2, #0
 80178f4:	4b34      	ldr	r3, [pc, #208]	; (80179c8 <_strtod_l+0xb28>)
 80178f6:	e78f      	b.n	8017818 <_strtod_l+0x978>
 80178f8:	2600      	movs	r6, #0
 80178fa:	4f32      	ldr	r7, [pc, #200]	; (80179c4 <_strtod_l+0xb24>)
 80178fc:	e7ea      	b.n	80178d4 <_strtod_l+0xa34>
 80178fe:	4b31      	ldr	r3, [pc, #196]	; (80179c4 <_strtod_l+0xb24>)
 8017900:	4630      	mov	r0, r6
 8017902:	4639      	mov	r1, r7
 8017904:	2200      	movs	r2, #0
 8017906:	f7e8 fe8f 	bl	8000628 <__aeabi_dmul>
 801790a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801790c:	4606      	mov	r6, r0
 801790e:	460f      	mov	r7, r1
 8017910:	b933      	cbnz	r3, 8017920 <_strtod_l+0xa80>
 8017912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017916:	9010      	str	r0, [sp, #64]	; 0x40
 8017918:	9311      	str	r3, [sp, #68]	; 0x44
 801791a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801791e:	e7df      	b.n	80178e0 <_strtod_l+0xa40>
 8017920:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017924:	e7f9      	b.n	801791a <_strtod_l+0xa7a>
 8017926:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801792a:	9b04      	ldr	r3, [sp, #16]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d1ab      	bne.n	8017888 <_strtod_l+0x9e8>
 8017930:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017934:	0d1b      	lsrs	r3, r3, #20
 8017936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017938:	051b      	lsls	r3, r3, #20
 801793a:	429a      	cmp	r2, r3
 801793c:	465d      	mov	r5, fp
 801793e:	d1a3      	bne.n	8017888 <_strtod_l+0x9e8>
 8017940:	4639      	mov	r1, r7
 8017942:	4630      	mov	r0, r6
 8017944:	f7e9 f920 	bl	8000b88 <__aeabi_d2iz>
 8017948:	f7e8 fe04 	bl	8000554 <__aeabi_i2d>
 801794c:	460b      	mov	r3, r1
 801794e:	4602      	mov	r2, r0
 8017950:	4639      	mov	r1, r7
 8017952:	4630      	mov	r0, r6
 8017954:	f7e8 fcb0 	bl	80002b8 <__aeabi_dsub>
 8017958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801795a:	4606      	mov	r6, r0
 801795c:	460f      	mov	r7, r1
 801795e:	b933      	cbnz	r3, 801796e <_strtod_l+0xace>
 8017960:	f1ba 0f00 	cmp.w	sl, #0
 8017964:	d103      	bne.n	801796e <_strtod_l+0xace>
 8017966:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801796a:	2d00      	cmp	r5, #0
 801796c:	d06d      	beq.n	8017a4a <_strtod_l+0xbaa>
 801796e:	a30a      	add	r3, pc, #40	; (adr r3, 8017998 <_strtod_l+0xaf8>)
 8017970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017974:	4630      	mov	r0, r6
 8017976:	4639      	mov	r1, r7
 8017978:	f7e9 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 801797c:	2800      	cmp	r0, #0
 801797e:	f47f acb8 	bne.w	80172f2 <_strtod_l+0x452>
 8017982:	a307      	add	r3, pc, #28	; (adr r3, 80179a0 <_strtod_l+0xb00>)
 8017984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017988:	4630      	mov	r0, r6
 801798a:	4639      	mov	r1, r7
 801798c:	f7e9 f8dc 	bl	8000b48 <__aeabi_dcmpgt>
 8017990:	2800      	cmp	r0, #0
 8017992:	f43f af79 	beq.w	8017888 <_strtod_l+0x9e8>
 8017996:	e4ac      	b.n	80172f2 <_strtod_l+0x452>
 8017998:	94a03595 	.word	0x94a03595
 801799c:	3fdfffff 	.word	0x3fdfffff
 80179a0:	35afe535 	.word	0x35afe535
 80179a4:	3fe00000 	.word	0x3fe00000
 80179a8:	000fffff 	.word	0x000fffff
 80179ac:	7ff00000 	.word	0x7ff00000
 80179b0:	7fefffff 	.word	0x7fefffff
 80179b4:	39500000 	.word	0x39500000
 80179b8:	3ff00000 	.word	0x3ff00000
 80179bc:	7fe00000 	.word	0x7fe00000
 80179c0:	7c9fffff 	.word	0x7c9fffff
 80179c4:	3fe00000 	.word	0x3fe00000
 80179c8:	bff00000 	.word	0xbff00000
 80179cc:	9b04      	ldr	r3, [sp, #16]
 80179ce:	b333      	cbz	r3, 8017a1e <_strtod_l+0xb7e>
 80179d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80179d6:	d822      	bhi.n	8017a1e <_strtod_l+0xb7e>
 80179d8:	a327      	add	r3, pc, #156	; (adr r3, 8017a78 <_strtod_l+0xbd8>)
 80179da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179de:	4630      	mov	r0, r6
 80179e0:	4639      	mov	r1, r7
 80179e2:	f7e9 f89d 	bl	8000b20 <__aeabi_dcmple>
 80179e6:	b1a0      	cbz	r0, 8017a12 <_strtod_l+0xb72>
 80179e8:	4639      	mov	r1, r7
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7e9 f8f4 	bl	8000bd8 <__aeabi_d2uiz>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	bf08      	it	eq
 80179f4:	2001      	moveq	r0, #1
 80179f6:	f7e8 fd9d 	bl	8000534 <__aeabi_ui2d>
 80179fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179fc:	4606      	mov	r6, r0
 80179fe:	460f      	mov	r7, r1
 8017a00:	bb03      	cbnz	r3, 8017a44 <_strtod_l+0xba4>
 8017a02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a06:	9012      	str	r0, [sp, #72]	; 0x48
 8017a08:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017a0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017a1a:	1a9b      	subs	r3, r3, r2
 8017a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017a22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017a26:	f001 fd65 	bl	80194f4 <__ulp>
 8017a2a:	4650      	mov	r0, sl
 8017a2c:	ec53 2b10 	vmov	r2, r3, d0
 8017a30:	4659      	mov	r1, fp
 8017a32:	f7e8 fdf9 	bl	8000628 <__aeabi_dmul>
 8017a36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017a3a:	f7e8 fc3f 	bl	80002bc <__adddf3>
 8017a3e:	4682      	mov	sl, r0
 8017a40:	468b      	mov	fp, r1
 8017a42:	e772      	b.n	801792a <_strtod_l+0xa8a>
 8017a44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017a48:	e7df      	b.n	8017a0a <_strtod_l+0xb6a>
 8017a4a:	a30d      	add	r3, pc, #52	; (adr r3, 8017a80 <_strtod_l+0xbe0>)
 8017a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a50:	f7e9 f85c 	bl	8000b0c <__aeabi_dcmplt>
 8017a54:	e79c      	b.n	8017990 <_strtod_l+0xaf0>
 8017a56:	2300      	movs	r3, #0
 8017a58:	930d      	str	r3, [sp, #52]	; 0x34
 8017a5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a5e:	6013      	str	r3, [r2, #0]
 8017a60:	f7ff ba61 	b.w	8016f26 <_strtod_l+0x86>
 8017a64:	2b65      	cmp	r3, #101	; 0x65
 8017a66:	f04f 0200 	mov.w	r2, #0
 8017a6a:	f43f ab4e 	beq.w	801710a <_strtod_l+0x26a>
 8017a6e:	2101      	movs	r1, #1
 8017a70:	4614      	mov	r4, r2
 8017a72:	9104      	str	r1, [sp, #16]
 8017a74:	f7ff bacb 	b.w	801700e <_strtod_l+0x16e>
 8017a78:	ffc00000 	.word	0xffc00000
 8017a7c:	41dfffff 	.word	0x41dfffff
 8017a80:	94a03595 	.word	0x94a03595
 8017a84:	3fcfffff 	.word	0x3fcfffff

08017a88 <_strtod_r>:
 8017a88:	4b05      	ldr	r3, [pc, #20]	; (8017aa0 <_strtod_r+0x18>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	b410      	push	{r4}
 8017a8e:	6a1b      	ldr	r3, [r3, #32]
 8017a90:	4c04      	ldr	r4, [pc, #16]	; (8017aa4 <_strtod_r+0x1c>)
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	bf08      	it	eq
 8017a96:	4623      	moveq	r3, r4
 8017a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a9c:	f7ff ba00 	b.w	8016ea0 <_strtod_l>
 8017aa0:	2000000c 	.word	0x2000000c
 8017aa4:	20000070 	.word	0x20000070

08017aa8 <_strtol_l.isra.0>:
 8017aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aac:	4680      	mov	r8, r0
 8017aae:	4689      	mov	r9, r1
 8017ab0:	4692      	mov	sl, r2
 8017ab2:	461e      	mov	r6, r3
 8017ab4:	460f      	mov	r7, r1
 8017ab6:	463d      	mov	r5, r7
 8017ab8:	9808      	ldr	r0, [sp, #32]
 8017aba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017abe:	f001 fa0d 	bl	8018edc <__locale_ctype_ptr_l>
 8017ac2:	4420      	add	r0, r4
 8017ac4:	7843      	ldrb	r3, [r0, #1]
 8017ac6:	f013 0308 	ands.w	r3, r3, #8
 8017aca:	d132      	bne.n	8017b32 <_strtol_l.isra.0+0x8a>
 8017acc:	2c2d      	cmp	r4, #45	; 0x2d
 8017ace:	d132      	bne.n	8017b36 <_strtol_l.isra.0+0x8e>
 8017ad0:	787c      	ldrb	r4, [r7, #1]
 8017ad2:	1cbd      	adds	r5, r7, #2
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	2e00      	cmp	r6, #0
 8017ad8:	d05d      	beq.n	8017b96 <_strtol_l.isra.0+0xee>
 8017ada:	2e10      	cmp	r6, #16
 8017adc:	d109      	bne.n	8017af2 <_strtol_l.isra.0+0x4a>
 8017ade:	2c30      	cmp	r4, #48	; 0x30
 8017ae0:	d107      	bne.n	8017af2 <_strtol_l.isra.0+0x4a>
 8017ae2:	782b      	ldrb	r3, [r5, #0]
 8017ae4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017ae8:	2b58      	cmp	r3, #88	; 0x58
 8017aea:	d14f      	bne.n	8017b8c <_strtol_l.isra.0+0xe4>
 8017aec:	786c      	ldrb	r4, [r5, #1]
 8017aee:	2610      	movs	r6, #16
 8017af0:	3502      	adds	r5, #2
 8017af2:	2a00      	cmp	r2, #0
 8017af4:	bf14      	ite	ne
 8017af6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017afa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017afe:	2700      	movs	r7, #0
 8017b00:	fbb1 fcf6 	udiv	ip, r1, r6
 8017b04:	4638      	mov	r0, r7
 8017b06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017b0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017b0e:	2b09      	cmp	r3, #9
 8017b10:	d817      	bhi.n	8017b42 <_strtol_l.isra.0+0x9a>
 8017b12:	461c      	mov	r4, r3
 8017b14:	42a6      	cmp	r6, r4
 8017b16:	dd23      	ble.n	8017b60 <_strtol_l.isra.0+0xb8>
 8017b18:	1c7b      	adds	r3, r7, #1
 8017b1a:	d007      	beq.n	8017b2c <_strtol_l.isra.0+0x84>
 8017b1c:	4584      	cmp	ip, r0
 8017b1e:	d31c      	bcc.n	8017b5a <_strtol_l.isra.0+0xb2>
 8017b20:	d101      	bne.n	8017b26 <_strtol_l.isra.0+0x7e>
 8017b22:	45a6      	cmp	lr, r4
 8017b24:	db19      	blt.n	8017b5a <_strtol_l.isra.0+0xb2>
 8017b26:	fb00 4006 	mla	r0, r0, r6, r4
 8017b2a:	2701      	movs	r7, #1
 8017b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b30:	e7eb      	b.n	8017b0a <_strtol_l.isra.0+0x62>
 8017b32:	462f      	mov	r7, r5
 8017b34:	e7bf      	b.n	8017ab6 <_strtol_l.isra.0+0xe>
 8017b36:	2c2b      	cmp	r4, #43	; 0x2b
 8017b38:	bf04      	itt	eq
 8017b3a:	1cbd      	addeq	r5, r7, #2
 8017b3c:	787c      	ldrbeq	r4, [r7, #1]
 8017b3e:	461a      	mov	r2, r3
 8017b40:	e7c9      	b.n	8017ad6 <_strtol_l.isra.0+0x2e>
 8017b42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017b46:	2b19      	cmp	r3, #25
 8017b48:	d801      	bhi.n	8017b4e <_strtol_l.isra.0+0xa6>
 8017b4a:	3c37      	subs	r4, #55	; 0x37
 8017b4c:	e7e2      	b.n	8017b14 <_strtol_l.isra.0+0x6c>
 8017b4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017b52:	2b19      	cmp	r3, #25
 8017b54:	d804      	bhi.n	8017b60 <_strtol_l.isra.0+0xb8>
 8017b56:	3c57      	subs	r4, #87	; 0x57
 8017b58:	e7dc      	b.n	8017b14 <_strtol_l.isra.0+0x6c>
 8017b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b5e:	e7e5      	b.n	8017b2c <_strtol_l.isra.0+0x84>
 8017b60:	1c7b      	adds	r3, r7, #1
 8017b62:	d108      	bne.n	8017b76 <_strtol_l.isra.0+0xce>
 8017b64:	2322      	movs	r3, #34	; 0x22
 8017b66:	f8c8 3000 	str.w	r3, [r8]
 8017b6a:	4608      	mov	r0, r1
 8017b6c:	f1ba 0f00 	cmp.w	sl, #0
 8017b70:	d107      	bne.n	8017b82 <_strtol_l.isra.0+0xda>
 8017b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b76:	b102      	cbz	r2, 8017b7a <_strtol_l.isra.0+0xd2>
 8017b78:	4240      	negs	r0, r0
 8017b7a:	f1ba 0f00 	cmp.w	sl, #0
 8017b7e:	d0f8      	beq.n	8017b72 <_strtol_l.isra.0+0xca>
 8017b80:	b10f      	cbz	r7, 8017b86 <_strtol_l.isra.0+0xde>
 8017b82:	f105 39ff 	add.w	r9, r5, #4294967295
 8017b86:	f8ca 9000 	str.w	r9, [sl]
 8017b8a:	e7f2      	b.n	8017b72 <_strtol_l.isra.0+0xca>
 8017b8c:	2430      	movs	r4, #48	; 0x30
 8017b8e:	2e00      	cmp	r6, #0
 8017b90:	d1af      	bne.n	8017af2 <_strtol_l.isra.0+0x4a>
 8017b92:	2608      	movs	r6, #8
 8017b94:	e7ad      	b.n	8017af2 <_strtol_l.isra.0+0x4a>
 8017b96:	2c30      	cmp	r4, #48	; 0x30
 8017b98:	d0a3      	beq.n	8017ae2 <_strtol_l.isra.0+0x3a>
 8017b9a:	260a      	movs	r6, #10
 8017b9c:	e7a9      	b.n	8017af2 <_strtol_l.isra.0+0x4a>
	...

08017ba0 <_strtol_r>:
 8017ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ba2:	4c06      	ldr	r4, [pc, #24]	; (8017bbc <_strtol_r+0x1c>)
 8017ba4:	4d06      	ldr	r5, [pc, #24]	; (8017bc0 <_strtol_r+0x20>)
 8017ba6:	6824      	ldr	r4, [r4, #0]
 8017ba8:	6a24      	ldr	r4, [r4, #32]
 8017baa:	2c00      	cmp	r4, #0
 8017bac:	bf08      	it	eq
 8017bae:	462c      	moveq	r4, r5
 8017bb0:	9400      	str	r4, [sp, #0]
 8017bb2:	f7ff ff79 	bl	8017aa8 <_strtol_l.isra.0>
 8017bb6:	b003      	add	sp, #12
 8017bb8:	bd30      	pop	{r4, r5, pc}
 8017bba:	bf00      	nop
 8017bbc:	2000000c 	.word	0x2000000c
 8017bc0:	20000070 	.word	0x20000070

08017bc4 <_vsiprintf_r>:
 8017bc4:	b500      	push	{lr}
 8017bc6:	b09b      	sub	sp, #108	; 0x6c
 8017bc8:	9100      	str	r1, [sp, #0]
 8017bca:	9104      	str	r1, [sp, #16]
 8017bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017bd0:	9105      	str	r1, [sp, #20]
 8017bd2:	9102      	str	r1, [sp, #8]
 8017bd4:	4905      	ldr	r1, [pc, #20]	; (8017bec <_vsiprintf_r+0x28>)
 8017bd6:	9103      	str	r1, [sp, #12]
 8017bd8:	4669      	mov	r1, sp
 8017bda:	f001 fe27 	bl	801982c <_svfiprintf_r>
 8017bde:	9b00      	ldr	r3, [sp, #0]
 8017be0:	2200      	movs	r2, #0
 8017be2:	701a      	strb	r2, [r3, #0]
 8017be4:	b01b      	add	sp, #108	; 0x6c
 8017be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bea:	bf00      	nop
 8017bec:	ffff0208 	.word	0xffff0208

08017bf0 <vsiprintf>:
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	460a      	mov	r2, r1
 8017bf4:	4601      	mov	r1, r0
 8017bf6:	4802      	ldr	r0, [pc, #8]	; (8017c00 <vsiprintf+0x10>)
 8017bf8:	6800      	ldr	r0, [r0, #0]
 8017bfa:	f7ff bfe3 	b.w	8017bc4 <_vsiprintf_r>
 8017bfe:	bf00      	nop
 8017c00:	2000000c 	.word	0x2000000c

08017c04 <quorem>:
 8017c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c08:	6903      	ldr	r3, [r0, #16]
 8017c0a:	690c      	ldr	r4, [r1, #16]
 8017c0c:	42a3      	cmp	r3, r4
 8017c0e:	4680      	mov	r8, r0
 8017c10:	f2c0 8082 	blt.w	8017d18 <quorem+0x114>
 8017c14:	3c01      	subs	r4, #1
 8017c16:	f101 0714 	add.w	r7, r1, #20
 8017c1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017c1e:	f100 0614 	add.w	r6, r0, #20
 8017c22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017c26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017c2a:	eb06 030c 	add.w	r3, r6, ip
 8017c2e:	3501      	adds	r5, #1
 8017c30:	eb07 090c 	add.w	r9, r7, ip
 8017c34:	9301      	str	r3, [sp, #4]
 8017c36:	fbb0 f5f5 	udiv	r5, r0, r5
 8017c3a:	b395      	cbz	r5, 8017ca2 <quorem+0x9e>
 8017c3c:	f04f 0a00 	mov.w	sl, #0
 8017c40:	4638      	mov	r0, r7
 8017c42:	46b6      	mov	lr, r6
 8017c44:	46d3      	mov	fp, sl
 8017c46:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c4a:	b293      	uxth	r3, r2
 8017c4c:	fb05 a303 	mla	r3, r5, r3, sl
 8017c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c54:	b29b      	uxth	r3, r3
 8017c56:	ebab 0303 	sub.w	r3, fp, r3
 8017c5a:	0c12      	lsrs	r2, r2, #16
 8017c5c:	f8de b000 	ldr.w	fp, [lr]
 8017c60:	fb05 a202 	mla	r2, r5, r2, sl
 8017c64:	fa13 f38b 	uxtah	r3, r3, fp
 8017c68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017c6c:	fa1f fb82 	uxth.w	fp, r2
 8017c70:	f8de 2000 	ldr.w	r2, [lr]
 8017c74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c82:	4581      	cmp	r9, r0
 8017c84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017c88:	f84e 3b04 	str.w	r3, [lr], #4
 8017c8c:	d2db      	bcs.n	8017c46 <quorem+0x42>
 8017c8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017c92:	b933      	cbnz	r3, 8017ca2 <quorem+0x9e>
 8017c94:	9b01      	ldr	r3, [sp, #4]
 8017c96:	3b04      	subs	r3, #4
 8017c98:	429e      	cmp	r6, r3
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	d330      	bcc.n	8017d00 <quorem+0xfc>
 8017c9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017ca2:	4640      	mov	r0, r8
 8017ca4:	f001 fbae 	bl	8019404 <__mcmp>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	db25      	blt.n	8017cf8 <quorem+0xf4>
 8017cac:	3501      	adds	r5, #1
 8017cae:	4630      	mov	r0, r6
 8017cb0:	f04f 0c00 	mov.w	ip, #0
 8017cb4:	f857 2b04 	ldr.w	r2, [r7], #4
 8017cb8:	f8d0 e000 	ldr.w	lr, [r0]
 8017cbc:	b293      	uxth	r3, r2
 8017cbe:	ebac 0303 	sub.w	r3, ip, r3
 8017cc2:	0c12      	lsrs	r2, r2, #16
 8017cc4:	fa13 f38e 	uxtah	r3, r3, lr
 8017cc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017cd0:	b29b      	uxth	r3, r3
 8017cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017cd6:	45b9      	cmp	r9, r7
 8017cd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017cdc:	f840 3b04 	str.w	r3, [r0], #4
 8017ce0:	d2e8      	bcs.n	8017cb4 <quorem+0xb0>
 8017ce2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017ce6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017cea:	b92a      	cbnz	r2, 8017cf8 <quorem+0xf4>
 8017cec:	3b04      	subs	r3, #4
 8017cee:	429e      	cmp	r6, r3
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	d30b      	bcc.n	8017d0c <quorem+0x108>
 8017cf4:	f8c8 4010 	str.w	r4, [r8, #16]
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	b003      	add	sp, #12
 8017cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d00:	6812      	ldr	r2, [r2, #0]
 8017d02:	3b04      	subs	r3, #4
 8017d04:	2a00      	cmp	r2, #0
 8017d06:	d1ca      	bne.n	8017c9e <quorem+0x9a>
 8017d08:	3c01      	subs	r4, #1
 8017d0a:	e7c5      	b.n	8017c98 <quorem+0x94>
 8017d0c:	6812      	ldr	r2, [r2, #0]
 8017d0e:	3b04      	subs	r3, #4
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	d1ef      	bne.n	8017cf4 <quorem+0xf0>
 8017d14:	3c01      	subs	r4, #1
 8017d16:	e7ea      	b.n	8017cee <quorem+0xea>
 8017d18:	2000      	movs	r0, #0
 8017d1a:	e7ee      	b.n	8017cfa <quorem+0xf6>
 8017d1c:	0000      	movs	r0, r0
	...

08017d20 <_dtoa_r>:
 8017d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d24:	ec57 6b10 	vmov	r6, r7, d0
 8017d28:	b097      	sub	sp, #92	; 0x5c
 8017d2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017d2c:	9106      	str	r1, [sp, #24]
 8017d2e:	4604      	mov	r4, r0
 8017d30:	920b      	str	r2, [sp, #44]	; 0x2c
 8017d32:	9312      	str	r3, [sp, #72]	; 0x48
 8017d34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017d38:	e9cd 6700 	strd	r6, r7, [sp]
 8017d3c:	b93d      	cbnz	r5, 8017d4e <_dtoa_r+0x2e>
 8017d3e:	2010      	movs	r0, #16
 8017d40:	f7fe f8ba 	bl	8015eb8 <malloc>
 8017d44:	6260      	str	r0, [r4, #36]	; 0x24
 8017d46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d4a:	6005      	str	r5, [r0, #0]
 8017d4c:	60c5      	str	r5, [r0, #12]
 8017d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d50:	6819      	ldr	r1, [r3, #0]
 8017d52:	b151      	cbz	r1, 8017d6a <_dtoa_r+0x4a>
 8017d54:	685a      	ldr	r2, [r3, #4]
 8017d56:	604a      	str	r2, [r1, #4]
 8017d58:	2301      	movs	r3, #1
 8017d5a:	4093      	lsls	r3, r2
 8017d5c:	608b      	str	r3, [r1, #8]
 8017d5e:	4620      	mov	r0, r4
 8017d60:	f001 f931 	bl	8018fc6 <_Bfree>
 8017d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d66:	2200      	movs	r2, #0
 8017d68:	601a      	str	r2, [r3, #0]
 8017d6a:	1e3b      	subs	r3, r7, #0
 8017d6c:	bfbb      	ittet	lt
 8017d6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d72:	9301      	strlt	r3, [sp, #4]
 8017d74:	2300      	movge	r3, #0
 8017d76:	2201      	movlt	r2, #1
 8017d78:	bfac      	ite	ge
 8017d7a:	f8c8 3000 	strge.w	r3, [r8]
 8017d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8017d82:	4baf      	ldr	r3, [pc, #700]	; (8018040 <_dtoa_r+0x320>)
 8017d84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017d88:	ea33 0308 	bics.w	r3, r3, r8
 8017d8c:	d114      	bne.n	8017db8 <_dtoa_r+0x98>
 8017d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8017d94:	6013      	str	r3, [r2, #0]
 8017d96:	9b00      	ldr	r3, [sp, #0]
 8017d98:	b923      	cbnz	r3, 8017da4 <_dtoa_r+0x84>
 8017d9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017d9e:	2800      	cmp	r0, #0
 8017da0:	f000 8542 	beq.w	8018828 <_dtoa_r+0xb08>
 8017da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017da6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8018054 <_dtoa_r+0x334>
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	f000 8544 	beq.w	8018838 <_dtoa_r+0xb18>
 8017db0:	f10b 0303 	add.w	r3, fp, #3
 8017db4:	f000 bd3e 	b.w	8018834 <_dtoa_r+0xb14>
 8017db8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	4639      	mov	r1, r7
 8017dc4:	f7e8 fe98 	bl	8000af8 <__aeabi_dcmpeq>
 8017dc8:	4681      	mov	r9, r0
 8017dca:	b168      	cbz	r0, 8017de8 <_dtoa_r+0xc8>
 8017dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017dce:	2301      	movs	r3, #1
 8017dd0:	6013      	str	r3, [r2, #0]
 8017dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	f000 8524 	beq.w	8018822 <_dtoa_r+0xb02>
 8017dda:	4b9a      	ldr	r3, [pc, #616]	; (8018044 <_dtoa_r+0x324>)
 8017ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017dde:	f103 3bff 	add.w	fp, r3, #4294967295
 8017de2:	6013      	str	r3, [r2, #0]
 8017de4:	f000 bd28 	b.w	8018838 <_dtoa_r+0xb18>
 8017de8:	aa14      	add	r2, sp, #80	; 0x50
 8017dea:	a915      	add	r1, sp, #84	; 0x54
 8017dec:	ec47 6b10 	vmov	d0, r6, r7
 8017df0:	4620      	mov	r0, r4
 8017df2:	f001 fbf5 	bl	80195e0 <__d2b>
 8017df6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017dfa:	9004      	str	r0, [sp, #16]
 8017dfc:	2d00      	cmp	r5, #0
 8017dfe:	d07c      	beq.n	8017efa <_dtoa_r+0x1da>
 8017e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017e04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017e08:	46b2      	mov	sl, r6
 8017e0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017e12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017e16:	2200      	movs	r2, #0
 8017e18:	4b8b      	ldr	r3, [pc, #556]	; (8018048 <_dtoa_r+0x328>)
 8017e1a:	4650      	mov	r0, sl
 8017e1c:	4659      	mov	r1, fp
 8017e1e:	f7e8 fa4b 	bl	80002b8 <__aeabi_dsub>
 8017e22:	a381      	add	r3, pc, #516	; (adr r3, 8018028 <_dtoa_r+0x308>)
 8017e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e28:	f7e8 fbfe 	bl	8000628 <__aeabi_dmul>
 8017e2c:	a380      	add	r3, pc, #512	; (adr r3, 8018030 <_dtoa_r+0x310>)
 8017e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e32:	f7e8 fa43 	bl	80002bc <__adddf3>
 8017e36:	4606      	mov	r6, r0
 8017e38:	4628      	mov	r0, r5
 8017e3a:	460f      	mov	r7, r1
 8017e3c:	f7e8 fb8a 	bl	8000554 <__aeabi_i2d>
 8017e40:	a37d      	add	r3, pc, #500	; (adr r3, 8018038 <_dtoa_r+0x318>)
 8017e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e46:	f7e8 fbef 	bl	8000628 <__aeabi_dmul>
 8017e4a:	4602      	mov	r2, r0
 8017e4c:	460b      	mov	r3, r1
 8017e4e:	4630      	mov	r0, r6
 8017e50:	4639      	mov	r1, r7
 8017e52:	f7e8 fa33 	bl	80002bc <__adddf3>
 8017e56:	4606      	mov	r6, r0
 8017e58:	460f      	mov	r7, r1
 8017e5a:	f7e8 fe95 	bl	8000b88 <__aeabi_d2iz>
 8017e5e:	2200      	movs	r2, #0
 8017e60:	4682      	mov	sl, r0
 8017e62:	2300      	movs	r3, #0
 8017e64:	4630      	mov	r0, r6
 8017e66:	4639      	mov	r1, r7
 8017e68:	f7e8 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8017e6c:	b148      	cbz	r0, 8017e82 <_dtoa_r+0x162>
 8017e6e:	4650      	mov	r0, sl
 8017e70:	f7e8 fb70 	bl	8000554 <__aeabi_i2d>
 8017e74:	4632      	mov	r2, r6
 8017e76:	463b      	mov	r3, r7
 8017e78:	f7e8 fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 8017e7c:	b908      	cbnz	r0, 8017e82 <_dtoa_r+0x162>
 8017e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e82:	f1ba 0f16 	cmp.w	sl, #22
 8017e86:	d859      	bhi.n	8017f3c <_dtoa_r+0x21c>
 8017e88:	4970      	ldr	r1, [pc, #448]	; (801804c <_dtoa_r+0x32c>)
 8017e8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e96:	f7e8 fe57 	bl	8000b48 <__aeabi_dcmpgt>
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d050      	beq.n	8017f40 <_dtoa_r+0x220>
 8017e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ea8:	1b5d      	subs	r5, r3, r5
 8017eaa:	f1b5 0801 	subs.w	r8, r5, #1
 8017eae:	bf49      	itett	mi
 8017eb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8017eb4:	2300      	movpl	r3, #0
 8017eb6:	9305      	strmi	r3, [sp, #20]
 8017eb8:	f04f 0800 	movmi.w	r8, #0
 8017ebc:	bf58      	it	pl
 8017ebe:	9305      	strpl	r3, [sp, #20]
 8017ec0:	f1ba 0f00 	cmp.w	sl, #0
 8017ec4:	db3e      	blt.n	8017f44 <_dtoa_r+0x224>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	44d0      	add	r8, sl
 8017eca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017ece:	9307      	str	r3, [sp, #28]
 8017ed0:	9b06      	ldr	r3, [sp, #24]
 8017ed2:	2b09      	cmp	r3, #9
 8017ed4:	f200 8090 	bhi.w	8017ff8 <_dtoa_r+0x2d8>
 8017ed8:	2b05      	cmp	r3, #5
 8017eda:	bfc4      	itt	gt
 8017edc:	3b04      	subgt	r3, #4
 8017ede:	9306      	strgt	r3, [sp, #24]
 8017ee0:	9b06      	ldr	r3, [sp, #24]
 8017ee2:	f1a3 0302 	sub.w	r3, r3, #2
 8017ee6:	bfcc      	ite	gt
 8017ee8:	2500      	movgt	r5, #0
 8017eea:	2501      	movle	r5, #1
 8017eec:	2b03      	cmp	r3, #3
 8017eee:	f200 808f 	bhi.w	8018010 <_dtoa_r+0x2f0>
 8017ef2:	e8df f003 	tbb	[pc, r3]
 8017ef6:	7f7d      	.short	0x7f7d
 8017ef8:	7131      	.short	0x7131
 8017efa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017efe:	441d      	add	r5, r3
 8017f00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017f04:	2820      	cmp	r0, #32
 8017f06:	dd13      	ble.n	8017f30 <_dtoa_r+0x210>
 8017f08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017f0c:	9b00      	ldr	r3, [sp, #0]
 8017f0e:	fa08 f800 	lsl.w	r8, r8, r0
 8017f12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017f16:	fa23 f000 	lsr.w	r0, r3, r0
 8017f1a:	ea48 0000 	orr.w	r0, r8, r0
 8017f1e:	f7e8 fb09 	bl	8000534 <__aeabi_ui2d>
 8017f22:	2301      	movs	r3, #1
 8017f24:	4682      	mov	sl, r0
 8017f26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017f2a:	3d01      	subs	r5, #1
 8017f2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017f2e:	e772      	b.n	8017e16 <_dtoa_r+0xf6>
 8017f30:	9b00      	ldr	r3, [sp, #0]
 8017f32:	f1c0 0020 	rsb	r0, r0, #32
 8017f36:	fa03 f000 	lsl.w	r0, r3, r0
 8017f3a:	e7f0      	b.n	8017f1e <_dtoa_r+0x1fe>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e7b1      	b.n	8017ea4 <_dtoa_r+0x184>
 8017f40:	900f      	str	r0, [sp, #60]	; 0x3c
 8017f42:	e7b0      	b.n	8017ea6 <_dtoa_r+0x186>
 8017f44:	9b05      	ldr	r3, [sp, #20]
 8017f46:	eba3 030a 	sub.w	r3, r3, sl
 8017f4a:	9305      	str	r3, [sp, #20]
 8017f4c:	f1ca 0300 	rsb	r3, sl, #0
 8017f50:	9307      	str	r3, [sp, #28]
 8017f52:	2300      	movs	r3, #0
 8017f54:	930e      	str	r3, [sp, #56]	; 0x38
 8017f56:	e7bb      	b.n	8017ed0 <_dtoa_r+0x1b0>
 8017f58:	2301      	movs	r3, #1
 8017f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	dd59      	ble.n	8018016 <_dtoa_r+0x2f6>
 8017f62:	9302      	str	r3, [sp, #8]
 8017f64:	4699      	mov	r9, r3
 8017f66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017f68:	2200      	movs	r2, #0
 8017f6a:	6072      	str	r2, [r6, #4]
 8017f6c:	2204      	movs	r2, #4
 8017f6e:	f102 0014 	add.w	r0, r2, #20
 8017f72:	4298      	cmp	r0, r3
 8017f74:	6871      	ldr	r1, [r6, #4]
 8017f76:	d953      	bls.n	8018020 <_dtoa_r+0x300>
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f000 fff0 	bl	8018f5e <_Balloc>
 8017f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f80:	6030      	str	r0, [r6, #0]
 8017f82:	f1b9 0f0e 	cmp.w	r9, #14
 8017f86:	f8d3 b000 	ldr.w	fp, [r3]
 8017f8a:	f200 80e6 	bhi.w	801815a <_dtoa_r+0x43a>
 8017f8e:	2d00      	cmp	r5, #0
 8017f90:	f000 80e3 	beq.w	801815a <_dtoa_r+0x43a>
 8017f94:	ed9d 7b00 	vldr	d7, [sp]
 8017f98:	f1ba 0f00 	cmp.w	sl, #0
 8017f9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017fa0:	dd74      	ble.n	801808c <_dtoa_r+0x36c>
 8017fa2:	4a2a      	ldr	r2, [pc, #168]	; (801804c <_dtoa_r+0x32c>)
 8017fa4:	f00a 030f 	and.w	r3, sl, #15
 8017fa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017fac:	ed93 7b00 	vldr	d7, [r3]
 8017fb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017fb4:	06f0      	lsls	r0, r6, #27
 8017fb6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017fba:	d565      	bpl.n	8018088 <_dtoa_r+0x368>
 8017fbc:	4b24      	ldr	r3, [pc, #144]	; (8018050 <_dtoa_r+0x330>)
 8017fbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017fc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017fc6:	f7e8 fc59 	bl	800087c <__aeabi_ddiv>
 8017fca:	e9cd 0100 	strd	r0, r1, [sp]
 8017fce:	f006 060f 	and.w	r6, r6, #15
 8017fd2:	2503      	movs	r5, #3
 8017fd4:	4f1e      	ldr	r7, [pc, #120]	; (8018050 <_dtoa_r+0x330>)
 8017fd6:	e04c      	b.n	8018072 <_dtoa_r+0x352>
 8017fd8:	2301      	movs	r3, #1
 8017fda:	930a      	str	r3, [sp, #40]	; 0x28
 8017fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fde:	4453      	add	r3, sl
 8017fe0:	f103 0901 	add.w	r9, r3, #1
 8017fe4:	9302      	str	r3, [sp, #8]
 8017fe6:	464b      	mov	r3, r9
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	bfb8      	it	lt
 8017fec:	2301      	movlt	r3, #1
 8017fee:	e7ba      	b.n	8017f66 <_dtoa_r+0x246>
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	e7b2      	b.n	8017f5a <_dtoa_r+0x23a>
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	e7f0      	b.n	8017fda <_dtoa_r+0x2ba>
 8017ff8:	2501      	movs	r5, #1
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	9306      	str	r3, [sp, #24]
 8017ffe:	950a      	str	r5, [sp, #40]	; 0x28
 8018000:	f04f 33ff 	mov.w	r3, #4294967295
 8018004:	9302      	str	r3, [sp, #8]
 8018006:	4699      	mov	r9, r3
 8018008:	2200      	movs	r2, #0
 801800a:	2312      	movs	r3, #18
 801800c:	920b      	str	r2, [sp, #44]	; 0x2c
 801800e:	e7aa      	b.n	8017f66 <_dtoa_r+0x246>
 8018010:	2301      	movs	r3, #1
 8018012:	930a      	str	r3, [sp, #40]	; 0x28
 8018014:	e7f4      	b.n	8018000 <_dtoa_r+0x2e0>
 8018016:	2301      	movs	r3, #1
 8018018:	9302      	str	r3, [sp, #8]
 801801a:	4699      	mov	r9, r3
 801801c:	461a      	mov	r2, r3
 801801e:	e7f5      	b.n	801800c <_dtoa_r+0x2ec>
 8018020:	3101      	adds	r1, #1
 8018022:	6071      	str	r1, [r6, #4]
 8018024:	0052      	lsls	r2, r2, #1
 8018026:	e7a2      	b.n	8017f6e <_dtoa_r+0x24e>
 8018028:	636f4361 	.word	0x636f4361
 801802c:	3fd287a7 	.word	0x3fd287a7
 8018030:	8b60c8b3 	.word	0x8b60c8b3
 8018034:	3fc68a28 	.word	0x3fc68a28
 8018038:	509f79fb 	.word	0x509f79fb
 801803c:	3fd34413 	.word	0x3fd34413
 8018040:	7ff00000 	.word	0x7ff00000
 8018044:	0801aacc 	.word	0x0801aacc
 8018048:	3ff80000 	.word	0x3ff80000
 801804c:	0801a9d0 	.word	0x0801a9d0
 8018050:	0801a9a8 	.word	0x0801a9a8
 8018054:	0801a999 	.word	0x0801a999
 8018058:	07f1      	lsls	r1, r6, #31
 801805a:	d508      	bpl.n	801806e <_dtoa_r+0x34e>
 801805c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018064:	f7e8 fae0 	bl	8000628 <__aeabi_dmul>
 8018068:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801806c:	3501      	adds	r5, #1
 801806e:	1076      	asrs	r6, r6, #1
 8018070:	3708      	adds	r7, #8
 8018072:	2e00      	cmp	r6, #0
 8018074:	d1f0      	bne.n	8018058 <_dtoa_r+0x338>
 8018076:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801807a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801807e:	f7e8 fbfd 	bl	800087c <__aeabi_ddiv>
 8018082:	e9cd 0100 	strd	r0, r1, [sp]
 8018086:	e01a      	b.n	80180be <_dtoa_r+0x39e>
 8018088:	2502      	movs	r5, #2
 801808a:	e7a3      	b.n	8017fd4 <_dtoa_r+0x2b4>
 801808c:	f000 80a0 	beq.w	80181d0 <_dtoa_r+0x4b0>
 8018090:	f1ca 0600 	rsb	r6, sl, #0
 8018094:	4b9f      	ldr	r3, [pc, #636]	; (8018314 <_dtoa_r+0x5f4>)
 8018096:	4fa0      	ldr	r7, [pc, #640]	; (8018318 <_dtoa_r+0x5f8>)
 8018098:	f006 020f 	and.w	r2, r6, #15
 801809c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80180a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80180a8:	f7e8 fabe 	bl	8000628 <__aeabi_dmul>
 80180ac:	e9cd 0100 	strd	r0, r1, [sp]
 80180b0:	1136      	asrs	r6, r6, #4
 80180b2:	2300      	movs	r3, #0
 80180b4:	2502      	movs	r5, #2
 80180b6:	2e00      	cmp	r6, #0
 80180b8:	d17f      	bne.n	80181ba <_dtoa_r+0x49a>
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d1e1      	bne.n	8018082 <_dtoa_r+0x362>
 80180be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	f000 8087 	beq.w	80181d4 <_dtoa_r+0x4b4>
 80180c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80180ca:	2200      	movs	r2, #0
 80180cc:	4b93      	ldr	r3, [pc, #588]	; (801831c <_dtoa_r+0x5fc>)
 80180ce:	4630      	mov	r0, r6
 80180d0:	4639      	mov	r1, r7
 80180d2:	f7e8 fd1b 	bl	8000b0c <__aeabi_dcmplt>
 80180d6:	2800      	cmp	r0, #0
 80180d8:	d07c      	beq.n	80181d4 <_dtoa_r+0x4b4>
 80180da:	f1b9 0f00 	cmp.w	r9, #0
 80180de:	d079      	beq.n	80181d4 <_dtoa_r+0x4b4>
 80180e0:	9b02      	ldr	r3, [sp, #8]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	dd35      	ble.n	8018152 <_dtoa_r+0x432>
 80180e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80180ea:	9308      	str	r3, [sp, #32]
 80180ec:	4639      	mov	r1, r7
 80180ee:	2200      	movs	r2, #0
 80180f0:	4b8b      	ldr	r3, [pc, #556]	; (8018320 <_dtoa_r+0x600>)
 80180f2:	4630      	mov	r0, r6
 80180f4:	f7e8 fa98 	bl	8000628 <__aeabi_dmul>
 80180f8:	e9cd 0100 	strd	r0, r1, [sp]
 80180fc:	9f02      	ldr	r7, [sp, #8]
 80180fe:	3501      	adds	r5, #1
 8018100:	4628      	mov	r0, r5
 8018102:	f7e8 fa27 	bl	8000554 <__aeabi_i2d>
 8018106:	e9dd 2300 	ldrd	r2, r3, [sp]
 801810a:	f7e8 fa8d 	bl	8000628 <__aeabi_dmul>
 801810e:	2200      	movs	r2, #0
 8018110:	4b84      	ldr	r3, [pc, #528]	; (8018324 <_dtoa_r+0x604>)
 8018112:	f7e8 f8d3 	bl	80002bc <__adddf3>
 8018116:	4605      	mov	r5, r0
 8018118:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801811c:	2f00      	cmp	r7, #0
 801811e:	d15d      	bne.n	80181dc <_dtoa_r+0x4bc>
 8018120:	2200      	movs	r2, #0
 8018122:	4b81      	ldr	r3, [pc, #516]	; (8018328 <_dtoa_r+0x608>)
 8018124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018128:	f7e8 f8c6 	bl	80002b8 <__aeabi_dsub>
 801812c:	462a      	mov	r2, r5
 801812e:	4633      	mov	r3, r6
 8018130:	e9cd 0100 	strd	r0, r1, [sp]
 8018134:	f7e8 fd08 	bl	8000b48 <__aeabi_dcmpgt>
 8018138:	2800      	cmp	r0, #0
 801813a:	f040 8288 	bne.w	801864e <_dtoa_r+0x92e>
 801813e:	462a      	mov	r2, r5
 8018140:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018148:	f7e8 fce0 	bl	8000b0c <__aeabi_dcmplt>
 801814c:	2800      	cmp	r0, #0
 801814e:	f040 827c 	bne.w	801864a <_dtoa_r+0x92a>
 8018152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018156:	e9cd 2300 	strd	r2, r3, [sp]
 801815a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801815c:	2b00      	cmp	r3, #0
 801815e:	f2c0 8150 	blt.w	8018402 <_dtoa_r+0x6e2>
 8018162:	f1ba 0f0e 	cmp.w	sl, #14
 8018166:	f300 814c 	bgt.w	8018402 <_dtoa_r+0x6e2>
 801816a:	4b6a      	ldr	r3, [pc, #424]	; (8018314 <_dtoa_r+0x5f4>)
 801816c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018170:	ed93 7b00 	vldr	d7, [r3]
 8018174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018176:	2b00      	cmp	r3, #0
 8018178:	ed8d 7b02 	vstr	d7, [sp, #8]
 801817c:	f280 80d8 	bge.w	8018330 <_dtoa_r+0x610>
 8018180:	f1b9 0f00 	cmp.w	r9, #0
 8018184:	f300 80d4 	bgt.w	8018330 <_dtoa_r+0x610>
 8018188:	f040 825e 	bne.w	8018648 <_dtoa_r+0x928>
 801818c:	2200      	movs	r2, #0
 801818e:	4b66      	ldr	r3, [pc, #408]	; (8018328 <_dtoa_r+0x608>)
 8018190:	ec51 0b17 	vmov	r0, r1, d7
 8018194:	f7e8 fa48 	bl	8000628 <__aeabi_dmul>
 8018198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801819c:	f7e8 fcca 	bl	8000b34 <__aeabi_dcmpge>
 80181a0:	464f      	mov	r7, r9
 80181a2:	464e      	mov	r6, r9
 80181a4:	2800      	cmp	r0, #0
 80181a6:	f040 8234 	bne.w	8018612 <_dtoa_r+0x8f2>
 80181aa:	2331      	movs	r3, #49	; 0x31
 80181ac:	f10b 0501 	add.w	r5, fp, #1
 80181b0:	f88b 3000 	strb.w	r3, [fp]
 80181b4:	f10a 0a01 	add.w	sl, sl, #1
 80181b8:	e22f      	b.n	801861a <_dtoa_r+0x8fa>
 80181ba:	07f2      	lsls	r2, r6, #31
 80181bc:	d505      	bpl.n	80181ca <_dtoa_r+0x4aa>
 80181be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80181c2:	f7e8 fa31 	bl	8000628 <__aeabi_dmul>
 80181c6:	3501      	adds	r5, #1
 80181c8:	2301      	movs	r3, #1
 80181ca:	1076      	asrs	r6, r6, #1
 80181cc:	3708      	adds	r7, #8
 80181ce:	e772      	b.n	80180b6 <_dtoa_r+0x396>
 80181d0:	2502      	movs	r5, #2
 80181d2:	e774      	b.n	80180be <_dtoa_r+0x39e>
 80181d4:	f8cd a020 	str.w	sl, [sp, #32]
 80181d8:	464f      	mov	r7, r9
 80181da:	e791      	b.n	8018100 <_dtoa_r+0x3e0>
 80181dc:	4b4d      	ldr	r3, [pc, #308]	; (8018314 <_dtoa_r+0x5f4>)
 80181de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80181e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80181e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d047      	beq.n	801827c <_dtoa_r+0x55c>
 80181ec:	4602      	mov	r2, r0
 80181ee:	460b      	mov	r3, r1
 80181f0:	2000      	movs	r0, #0
 80181f2:	494e      	ldr	r1, [pc, #312]	; (801832c <_dtoa_r+0x60c>)
 80181f4:	f7e8 fb42 	bl	800087c <__aeabi_ddiv>
 80181f8:	462a      	mov	r2, r5
 80181fa:	4633      	mov	r3, r6
 80181fc:	f7e8 f85c 	bl	80002b8 <__aeabi_dsub>
 8018200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018204:	465d      	mov	r5, fp
 8018206:	e9dd 0100 	ldrd	r0, r1, [sp]
 801820a:	f7e8 fcbd 	bl	8000b88 <__aeabi_d2iz>
 801820e:	4606      	mov	r6, r0
 8018210:	f7e8 f9a0 	bl	8000554 <__aeabi_i2d>
 8018214:	4602      	mov	r2, r0
 8018216:	460b      	mov	r3, r1
 8018218:	e9dd 0100 	ldrd	r0, r1, [sp]
 801821c:	f7e8 f84c 	bl	80002b8 <__aeabi_dsub>
 8018220:	3630      	adds	r6, #48	; 0x30
 8018222:	f805 6b01 	strb.w	r6, [r5], #1
 8018226:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801822a:	e9cd 0100 	strd	r0, r1, [sp]
 801822e:	f7e8 fc6d 	bl	8000b0c <__aeabi_dcmplt>
 8018232:	2800      	cmp	r0, #0
 8018234:	d163      	bne.n	80182fe <_dtoa_r+0x5de>
 8018236:	e9dd 2300 	ldrd	r2, r3, [sp]
 801823a:	2000      	movs	r0, #0
 801823c:	4937      	ldr	r1, [pc, #220]	; (801831c <_dtoa_r+0x5fc>)
 801823e:	f7e8 f83b 	bl	80002b8 <__aeabi_dsub>
 8018242:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018246:	f7e8 fc61 	bl	8000b0c <__aeabi_dcmplt>
 801824a:	2800      	cmp	r0, #0
 801824c:	f040 80b7 	bne.w	80183be <_dtoa_r+0x69e>
 8018250:	eba5 030b 	sub.w	r3, r5, fp
 8018254:	429f      	cmp	r7, r3
 8018256:	f77f af7c 	ble.w	8018152 <_dtoa_r+0x432>
 801825a:	2200      	movs	r2, #0
 801825c:	4b30      	ldr	r3, [pc, #192]	; (8018320 <_dtoa_r+0x600>)
 801825e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018262:	f7e8 f9e1 	bl	8000628 <__aeabi_dmul>
 8018266:	2200      	movs	r2, #0
 8018268:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801826c:	4b2c      	ldr	r3, [pc, #176]	; (8018320 <_dtoa_r+0x600>)
 801826e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018272:	f7e8 f9d9 	bl	8000628 <__aeabi_dmul>
 8018276:	e9cd 0100 	strd	r0, r1, [sp]
 801827a:	e7c4      	b.n	8018206 <_dtoa_r+0x4e6>
 801827c:	462a      	mov	r2, r5
 801827e:	4633      	mov	r3, r6
 8018280:	f7e8 f9d2 	bl	8000628 <__aeabi_dmul>
 8018284:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018288:	eb0b 0507 	add.w	r5, fp, r7
 801828c:	465e      	mov	r6, fp
 801828e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018292:	f7e8 fc79 	bl	8000b88 <__aeabi_d2iz>
 8018296:	4607      	mov	r7, r0
 8018298:	f7e8 f95c 	bl	8000554 <__aeabi_i2d>
 801829c:	3730      	adds	r7, #48	; 0x30
 801829e:	4602      	mov	r2, r0
 80182a0:	460b      	mov	r3, r1
 80182a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182a6:	f7e8 f807 	bl	80002b8 <__aeabi_dsub>
 80182aa:	f806 7b01 	strb.w	r7, [r6], #1
 80182ae:	42ae      	cmp	r6, r5
 80182b0:	e9cd 0100 	strd	r0, r1, [sp]
 80182b4:	f04f 0200 	mov.w	r2, #0
 80182b8:	d126      	bne.n	8018308 <_dtoa_r+0x5e8>
 80182ba:	4b1c      	ldr	r3, [pc, #112]	; (801832c <_dtoa_r+0x60c>)
 80182bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80182c0:	f7e7 fffc 	bl	80002bc <__adddf3>
 80182c4:	4602      	mov	r2, r0
 80182c6:	460b      	mov	r3, r1
 80182c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182cc:	f7e8 fc3c 	bl	8000b48 <__aeabi_dcmpgt>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	d174      	bne.n	80183be <_dtoa_r+0x69e>
 80182d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80182d8:	2000      	movs	r0, #0
 80182da:	4914      	ldr	r1, [pc, #80]	; (801832c <_dtoa_r+0x60c>)
 80182dc:	f7e7 ffec 	bl	80002b8 <__aeabi_dsub>
 80182e0:	4602      	mov	r2, r0
 80182e2:	460b      	mov	r3, r1
 80182e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182e8:	f7e8 fc10 	bl	8000b0c <__aeabi_dcmplt>
 80182ec:	2800      	cmp	r0, #0
 80182ee:	f43f af30 	beq.w	8018152 <_dtoa_r+0x432>
 80182f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182f6:	2b30      	cmp	r3, #48	; 0x30
 80182f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80182fc:	d002      	beq.n	8018304 <_dtoa_r+0x5e4>
 80182fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018302:	e04a      	b.n	801839a <_dtoa_r+0x67a>
 8018304:	4615      	mov	r5, r2
 8018306:	e7f4      	b.n	80182f2 <_dtoa_r+0x5d2>
 8018308:	4b05      	ldr	r3, [pc, #20]	; (8018320 <_dtoa_r+0x600>)
 801830a:	f7e8 f98d 	bl	8000628 <__aeabi_dmul>
 801830e:	e9cd 0100 	strd	r0, r1, [sp]
 8018312:	e7bc      	b.n	801828e <_dtoa_r+0x56e>
 8018314:	0801a9d0 	.word	0x0801a9d0
 8018318:	0801a9a8 	.word	0x0801a9a8
 801831c:	3ff00000 	.word	0x3ff00000
 8018320:	40240000 	.word	0x40240000
 8018324:	401c0000 	.word	0x401c0000
 8018328:	40140000 	.word	0x40140000
 801832c:	3fe00000 	.word	0x3fe00000
 8018330:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018334:	465d      	mov	r5, fp
 8018336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801833a:	4630      	mov	r0, r6
 801833c:	4639      	mov	r1, r7
 801833e:	f7e8 fa9d 	bl	800087c <__aeabi_ddiv>
 8018342:	f7e8 fc21 	bl	8000b88 <__aeabi_d2iz>
 8018346:	4680      	mov	r8, r0
 8018348:	f7e8 f904 	bl	8000554 <__aeabi_i2d>
 801834c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018350:	f7e8 f96a 	bl	8000628 <__aeabi_dmul>
 8018354:	4602      	mov	r2, r0
 8018356:	460b      	mov	r3, r1
 8018358:	4630      	mov	r0, r6
 801835a:	4639      	mov	r1, r7
 801835c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018360:	f7e7 ffaa 	bl	80002b8 <__aeabi_dsub>
 8018364:	f805 6b01 	strb.w	r6, [r5], #1
 8018368:	eba5 060b 	sub.w	r6, r5, fp
 801836c:	45b1      	cmp	r9, r6
 801836e:	4602      	mov	r2, r0
 8018370:	460b      	mov	r3, r1
 8018372:	d139      	bne.n	80183e8 <_dtoa_r+0x6c8>
 8018374:	f7e7 ffa2 	bl	80002bc <__adddf3>
 8018378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801837c:	4606      	mov	r6, r0
 801837e:	460f      	mov	r7, r1
 8018380:	f7e8 fbe2 	bl	8000b48 <__aeabi_dcmpgt>
 8018384:	b9c8      	cbnz	r0, 80183ba <_dtoa_r+0x69a>
 8018386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801838a:	4630      	mov	r0, r6
 801838c:	4639      	mov	r1, r7
 801838e:	f7e8 fbb3 	bl	8000af8 <__aeabi_dcmpeq>
 8018392:	b110      	cbz	r0, 801839a <_dtoa_r+0x67a>
 8018394:	f018 0f01 	tst.w	r8, #1
 8018398:	d10f      	bne.n	80183ba <_dtoa_r+0x69a>
 801839a:	9904      	ldr	r1, [sp, #16]
 801839c:	4620      	mov	r0, r4
 801839e:	f000 fe12 	bl	8018fc6 <_Bfree>
 80183a2:	2300      	movs	r3, #0
 80183a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80183a6:	702b      	strb	r3, [r5, #0]
 80183a8:	f10a 0301 	add.w	r3, sl, #1
 80183ac:	6013      	str	r3, [r2, #0]
 80183ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f000 8241 	beq.w	8018838 <_dtoa_r+0xb18>
 80183b6:	601d      	str	r5, [r3, #0]
 80183b8:	e23e      	b.n	8018838 <_dtoa_r+0xb18>
 80183ba:	f8cd a020 	str.w	sl, [sp, #32]
 80183be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80183c2:	2a39      	cmp	r2, #57	; 0x39
 80183c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80183c8:	d108      	bne.n	80183dc <_dtoa_r+0x6bc>
 80183ca:	459b      	cmp	fp, r3
 80183cc:	d10a      	bne.n	80183e4 <_dtoa_r+0x6c4>
 80183ce:	9b08      	ldr	r3, [sp, #32]
 80183d0:	3301      	adds	r3, #1
 80183d2:	9308      	str	r3, [sp, #32]
 80183d4:	2330      	movs	r3, #48	; 0x30
 80183d6:	f88b 3000 	strb.w	r3, [fp]
 80183da:	465b      	mov	r3, fp
 80183dc:	781a      	ldrb	r2, [r3, #0]
 80183de:	3201      	adds	r2, #1
 80183e0:	701a      	strb	r2, [r3, #0]
 80183e2:	e78c      	b.n	80182fe <_dtoa_r+0x5de>
 80183e4:	461d      	mov	r5, r3
 80183e6:	e7ea      	b.n	80183be <_dtoa_r+0x69e>
 80183e8:	2200      	movs	r2, #0
 80183ea:	4b9b      	ldr	r3, [pc, #620]	; (8018658 <_dtoa_r+0x938>)
 80183ec:	f7e8 f91c 	bl	8000628 <__aeabi_dmul>
 80183f0:	2200      	movs	r2, #0
 80183f2:	2300      	movs	r3, #0
 80183f4:	4606      	mov	r6, r0
 80183f6:	460f      	mov	r7, r1
 80183f8:	f7e8 fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80183fc:	2800      	cmp	r0, #0
 80183fe:	d09a      	beq.n	8018336 <_dtoa_r+0x616>
 8018400:	e7cb      	b.n	801839a <_dtoa_r+0x67a>
 8018402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018404:	2a00      	cmp	r2, #0
 8018406:	f000 808b 	beq.w	8018520 <_dtoa_r+0x800>
 801840a:	9a06      	ldr	r2, [sp, #24]
 801840c:	2a01      	cmp	r2, #1
 801840e:	dc6e      	bgt.n	80184ee <_dtoa_r+0x7ce>
 8018410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018412:	2a00      	cmp	r2, #0
 8018414:	d067      	beq.n	80184e6 <_dtoa_r+0x7c6>
 8018416:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801841a:	9f07      	ldr	r7, [sp, #28]
 801841c:	9d05      	ldr	r5, [sp, #20]
 801841e:	9a05      	ldr	r2, [sp, #20]
 8018420:	2101      	movs	r1, #1
 8018422:	441a      	add	r2, r3
 8018424:	4620      	mov	r0, r4
 8018426:	9205      	str	r2, [sp, #20]
 8018428:	4498      	add	r8, r3
 801842a:	f000 feaa 	bl	8019182 <__i2b>
 801842e:	4606      	mov	r6, r0
 8018430:	2d00      	cmp	r5, #0
 8018432:	dd0c      	ble.n	801844e <_dtoa_r+0x72e>
 8018434:	f1b8 0f00 	cmp.w	r8, #0
 8018438:	dd09      	ble.n	801844e <_dtoa_r+0x72e>
 801843a:	4545      	cmp	r5, r8
 801843c:	9a05      	ldr	r2, [sp, #20]
 801843e:	462b      	mov	r3, r5
 8018440:	bfa8      	it	ge
 8018442:	4643      	movge	r3, r8
 8018444:	1ad2      	subs	r2, r2, r3
 8018446:	9205      	str	r2, [sp, #20]
 8018448:	1aed      	subs	r5, r5, r3
 801844a:	eba8 0803 	sub.w	r8, r8, r3
 801844e:	9b07      	ldr	r3, [sp, #28]
 8018450:	b1eb      	cbz	r3, 801848e <_dtoa_r+0x76e>
 8018452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018454:	2b00      	cmp	r3, #0
 8018456:	d067      	beq.n	8018528 <_dtoa_r+0x808>
 8018458:	b18f      	cbz	r7, 801847e <_dtoa_r+0x75e>
 801845a:	4631      	mov	r1, r6
 801845c:	463a      	mov	r2, r7
 801845e:	4620      	mov	r0, r4
 8018460:	f000 ff2e 	bl	80192c0 <__pow5mult>
 8018464:	9a04      	ldr	r2, [sp, #16]
 8018466:	4601      	mov	r1, r0
 8018468:	4606      	mov	r6, r0
 801846a:	4620      	mov	r0, r4
 801846c:	f000 fe92 	bl	8019194 <__multiply>
 8018470:	9904      	ldr	r1, [sp, #16]
 8018472:	9008      	str	r0, [sp, #32]
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fda6 	bl	8018fc6 <_Bfree>
 801847a:	9b08      	ldr	r3, [sp, #32]
 801847c:	9304      	str	r3, [sp, #16]
 801847e:	9b07      	ldr	r3, [sp, #28]
 8018480:	1bda      	subs	r2, r3, r7
 8018482:	d004      	beq.n	801848e <_dtoa_r+0x76e>
 8018484:	9904      	ldr	r1, [sp, #16]
 8018486:	4620      	mov	r0, r4
 8018488:	f000 ff1a 	bl	80192c0 <__pow5mult>
 801848c:	9004      	str	r0, [sp, #16]
 801848e:	2101      	movs	r1, #1
 8018490:	4620      	mov	r0, r4
 8018492:	f000 fe76 	bl	8019182 <__i2b>
 8018496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018498:	4607      	mov	r7, r0
 801849a:	2b00      	cmp	r3, #0
 801849c:	f000 81d0 	beq.w	8018840 <_dtoa_r+0xb20>
 80184a0:	461a      	mov	r2, r3
 80184a2:	4601      	mov	r1, r0
 80184a4:	4620      	mov	r0, r4
 80184a6:	f000 ff0b 	bl	80192c0 <__pow5mult>
 80184aa:	9b06      	ldr	r3, [sp, #24]
 80184ac:	2b01      	cmp	r3, #1
 80184ae:	4607      	mov	r7, r0
 80184b0:	dc40      	bgt.n	8018534 <_dtoa_r+0x814>
 80184b2:	9b00      	ldr	r3, [sp, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d139      	bne.n	801852c <_dtoa_r+0x80c>
 80184b8:	9b01      	ldr	r3, [sp, #4]
 80184ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d136      	bne.n	8018530 <_dtoa_r+0x810>
 80184c2:	9b01      	ldr	r3, [sp, #4]
 80184c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80184c8:	0d1b      	lsrs	r3, r3, #20
 80184ca:	051b      	lsls	r3, r3, #20
 80184cc:	b12b      	cbz	r3, 80184da <_dtoa_r+0x7ba>
 80184ce:	9b05      	ldr	r3, [sp, #20]
 80184d0:	3301      	adds	r3, #1
 80184d2:	9305      	str	r3, [sp, #20]
 80184d4:	f108 0801 	add.w	r8, r8, #1
 80184d8:	2301      	movs	r3, #1
 80184da:	9307      	str	r3, [sp, #28]
 80184dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d12a      	bne.n	8018538 <_dtoa_r+0x818>
 80184e2:	2001      	movs	r0, #1
 80184e4:	e030      	b.n	8018548 <_dtoa_r+0x828>
 80184e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80184ec:	e795      	b.n	801841a <_dtoa_r+0x6fa>
 80184ee:	9b07      	ldr	r3, [sp, #28]
 80184f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80184f4:	42bb      	cmp	r3, r7
 80184f6:	bfbf      	itttt	lt
 80184f8:	9b07      	ldrlt	r3, [sp, #28]
 80184fa:	9707      	strlt	r7, [sp, #28]
 80184fc:	1afa      	sublt	r2, r7, r3
 80184fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018500:	bfbb      	ittet	lt
 8018502:	189b      	addlt	r3, r3, r2
 8018504:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018506:	1bdf      	subge	r7, r3, r7
 8018508:	2700      	movlt	r7, #0
 801850a:	f1b9 0f00 	cmp.w	r9, #0
 801850e:	bfb5      	itete	lt
 8018510:	9b05      	ldrlt	r3, [sp, #20]
 8018512:	9d05      	ldrge	r5, [sp, #20]
 8018514:	eba3 0509 	sublt.w	r5, r3, r9
 8018518:	464b      	movge	r3, r9
 801851a:	bfb8      	it	lt
 801851c:	2300      	movlt	r3, #0
 801851e:	e77e      	b.n	801841e <_dtoa_r+0x6fe>
 8018520:	9f07      	ldr	r7, [sp, #28]
 8018522:	9d05      	ldr	r5, [sp, #20]
 8018524:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018526:	e783      	b.n	8018430 <_dtoa_r+0x710>
 8018528:	9a07      	ldr	r2, [sp, #28]
 801852a:	e7ab      	b.n	8018484 <_dtoa_r+0x764>
 801852c:	2300      	movs	r3, #0
 801852e:	e7d4      	b.n	80184da <_dtoa_r+0x7ba>
 8018530:	9b00      	ldr	r3, [sp, #0]
 8018532:	e7d2      	b.n	80184da <_dtoa_r+0x7ba>
 8018534:	2300      	movs	r3, #0
 8018536:	9307      	str	r3, [sp, #28]
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801853e:	6918      	ldr	r0, [r3, #16]
 8018540:	f000 fdd1 	bl	80190e6 <__hi0bits>
 8018544:	f1c0 0020 	rsb	r0, r0, #32
 8018548:	4440      	add	r0, r8
 801854a:	f010 001f 	ands.w	r0, r0, #31
 801854e:	d047      	beq.n	80185e0 <_dtoa_r+0x8c0>
 8018550:	f1c0 0320 	rsb	r3, r0, #32
 8018554:	2b04      	cmp	r3, #4
 8018556:	dd3b      	ble.n	80185d0 <_dtoa_r+0x8b0>
 8018558:	9b05      	ldr	r3, [sp, #20]
 801855a:	f1c0 001c 	rsb	r0, r0, #28
 801855e:	4403      	add	r3, r0
 8018560:	9305      	str	r3, [sp, #20]
 8018562:	4405      	add	r5, r0
 8018564:	4480      	add	r8, r0
 8018566:	9b05      	ldr	r3, [sp, #20]
 8018568:	2b00      	cmp	r3, #0
 801856a:	dd05      	ble.n	8018578 <_dtoa_r+0x858>
 801856c:	461a      	mov	r2, r3
 801856e:	9904      	ldr	r1, [sp, #16]
 8018570:	4620      	mov	r0, r4
 8018572:	f000 fef3 	bl	801935c <__lshift>
 8018576:	9004      	str	r0, [sp, #16]
 8018578:	f1b8 0f00 	cmp.w	r8, #0
 801857c:	dd05      	ble.n	801858a <_dtoa_r+0x86a>
 801857e:	4639      	mov	r1, r7
 8018580:	4642      	mov	r2, r8
 8018582:	4620      	mov	r0, r4
 8018584:	f000 feea 	bl	801935c <__lshift>
 8018588:	4607      	mov	r7, r0
 801858a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801858c:	b353      	cbz	r3, 80185e4 <_dtoa_r+0x8c4>
 801858e:	4639      	mov	r1, r7
 8018590:	9804      	ldr	r0, [sp, #16]
 8018592:	f000 ff37 	bl	8019404 <__mcmp>
 8018596:	2800      	cmp	r0, #0
 8018598:	da24      	bge.n	80185e4 <_dtoa_r+0x8c4>
 801859a:	2300      	movs	r3, #0
 801859c:	220a      	movs	r2, #10
 801859e:	9904      	ldr	r1, [sp, #16]
 80185a0:	4620      	mov	r0, r4
 80185a2:	f000 fd27 	bl	8018ff4 <__multadd>
 80185a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185a8:	9004      	str	r0, [sp, #16]
 80185aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f000 814d 	beq.w	801884e <_dtoa_r+0xb2e>
 80185b4:	2300      	movs	r3, #0
 80185b6:	4631      	mov	r1, r6
 80185b8:	220a      	movs	r2, #10
 80185ba:	4620      	mov	r0, r4
 80185bc:	f000 fd1a 	bl	8018ff4 <__multadd>
 80185c0:	9b02      	ldr	r3, [sp, #8]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	4606      	mov	r6, r0
 80185c6:	dc4f      	bgt.n	8018668 <_dtoa_r+0x948>
 80185c8:	9b06      	ldr	r3, [sp, #24]
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	dd4c      	ble.n	8018668 <_dtoa_r+0x948>
 80185ce:	e011      	b.n	80185f4 <_dtoa_r+0x8d4>
 80185d0:	d0c9      	beq.n	8018566 <_dtoa_r+0x846>
 80185d2:	9a05      	ldr	r2, [sp, #20]
 80185d4:	331c      	adds	r3, #28
 80185d6:	441a      	add	r2, r3
 80185d8:	9205      	str	r2, [sp, #20]
 80185da:	441d      	add	r5, r3
 80185dc:	4498      	add	r8, r3
 80185de:	e7c2      	b.n	8018566 <_dtoa_r+0x846>
 80185e0:	4603      	mov	r3, r0
 80185e2:	e7f6      	b.n	80185d2 <_dtoa_r+0x8b2>
 80185e4:	f1b9 0f00 	cmp.w	r9, #0
 80185e8:	dc38      	bgt.n	801865c <_dtoa_r+0x93c>
 80185ea:	9b06      	ldr	r3, [sp, #24]
 80185ec:	2b02      	cmp	r3, #2
 80185ee:	dd35      	ble.n	801865c <_dtoa_r+0x93c>
 80185f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80185f4:	9b02      	ldr	r3, [sp, #8]
 80185f6:	b963      	cbnz	r3, 8018612 <_dtoa_r+0x8f2>
 80185f8:	4639      	mov	r1, r7
 80185fa:	2205      	movs	r2, #5
 80185fc:	4620      	mov	r0, r4
 80185fe:	f000 fcf9 	bl	8018ff4 <__multadd>
 8018602:	4601      	mov	r1, r0
 8018604:	4607      	mov	r7, r0
 8018606:	9804      	ldr	r0, [sp, #16]
 8018608:	f000 fefc 	bl	8019404 <__mcmp>
 801860c:	2800      	cmp	r0, #0
 801860e:	f73f adcc 	bgt.w	80181aa <_dtoa_r+0x48a>
 8018612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018614:	465d      	mov	r5, fp
 8018616:	ea6f 0a03 	mvn.w	sl, r3
 801861a:	f04f 0900 	mov.w	r9, #0
 801861e:	4639      	mov	r1, r7
 8018620:	4620      	mov	r0, r4
 8018622:	f000 fcd0 	bl	8018fc6 <_Bfree>
 8018626:	2e00      	cmp	r6, #0
 8018628:	f43f aeb7 	beq.w	801839a <_dtoa_r+0x67a>
 801862c:	f1b9 0f00 	cmp.w	r9, #0
 8018630:	d005      	beq.n	801863e <_dtoa_r+0x91e>
 8018632:	45b1      	cmp	r9, r6
 8018634:	d003      	beq.n	801863e <_dtoa_r+0x91e>
 8018636:	4649      	mov	r1, r9
 8018638:	4620      	mov	r0, r4
 801863a:	f000 fcc4 	bl	8018fc6 <_Bfree>
 801863e:	4631      	mov	r1, r6
 8018640:	4620      	mov	r0, r4
 8018642:	f000 fcc0 	bl	8018fc6 <_Bfree>
 8018646:	e6a8      	b.n	801839a <_dtoa_r+0x67a>
 8018648:	2700      	movs	r7, #0
 801864a:	463e      	mov	r6, r7
 801864c:	e7e1      	b.n	8018612 <_dtoa_r+0x8f2>
 801864e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018652:	463e      	mov	r6, r7
 8018654:	e5a9      	b.n	80181aa <_dtoa_r+0x48a>
 8018656:	bf00      	nop
 8018658:	40240000 	.word	0x40240000
 801865c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801865e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018662:	2b00      	cmp	r3, #0
 8018664:	f000 80fa 	beq.w	801885c <_dtoa_r+0xb3c>
 8018668:	2d00      	cmp	r5, #0
 801866a:	dd05      	ble.n	8018678 <_dtoa_r+0x958>
 801866c:	4631      	mov	r1, r6
 801866e:	462a      	mov	r2, r5
 8018670:	4620      	mov	r0, r4
 8018672:	f000 fe73 	bl	801935c <__lshift>
 8018676:	4606      	mov	r6, r0
 8018678:	9b07      	ldr	r3, [sp, #28]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d04c      	beq.n	8018718 <_dtoa_r+0x9f8>
 801867e:	6871      	ldr	r1, [r6, #4]
 8018680:	4620      	mov	r0, r4
 8018682:	f000 fc6c 	bl	8018f5e <_Balloc>
 8018686:	6932      	ldr	r2, [r6, #16]
 8018688:	3202      	adds	r2, #2
 801868a:	4605      	mov	r5, r0
 801868c:	0092      	lsls	r2, r2, #2
 801868e:	f106 010c 	add.w	r1, r6, #12
 8018692:	300c      	adds	r0, #12
 8018694:	f000 fc56 	bl	8018f44 <memcpy>
 8018698:	2201      	movs	r2, #1
 801869a:	4629      	mov	r1, r5
 801869c:	4620      	mov	r0, r4
 801869e:	f000 fe5d 	bl	801935c <__lshift>
 80186a2:	9b00      	ldr	r3, [sp, #0]
 80186a4:	f8cd b014 	str.w	fp, [sp, #20]
 80186a8:	f003 0301 	and.w	r3, r3, #1
 80186ac:	46b1      	mov	r9, r6
 80186ae:	9307      	str	r3, [sp, #28]
 80186b0:	4606      	mov	r6, r0
 80186b2:	4639      	mov	r1, r7
 80186b4:	9804      	ldr	r0, [sp, #16]
 80186b6:	f7ff faa5 	bl	8017c04 <quorem>
 80186ba:	4649      	mov	r1, r9
 80186bc:	4605      	mov	r5, r0
 80186be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80186c2:	9804      	ldr	r0, [sp, #16]
 80186c4:	f000 fe9e 	bl	8019404 <__mcmp>
 80186c8:	4632      	mov	r2, r6
 80186ca:	9000      	str	r0, [sp, #0]
 80186cc:	4639      	mov	r1, r7
 80186ce:	4620      	mov	r0, r4
 80186d0:	f000 feb2 	bl	8019438 <__mdiff>
 80186d4:	68c3      	ldr	r3, [r0, #12]
 80186d6:	4602      	mov	r2, r0
 80186d8:	bb03      	cbnz	r3, 801871c <_dtoa_r+0x9fc>
 80186da:	4601      	mov	r1, r0
 80186dc:	9008      	str	r0, [sp, #32]
 80186de:	9804      	ldr	r0, [sp, #16]
 80186e0:	f000 fe90 	bl	8019404 <__mcmp>
 80186e4:	9a08      	ldr	r2, [sp, #32]
 80186e6:	4603      	mov	r3, r0
 80186e8:	4611      	mov	r1, r2
 80186ea:	4620      	mov	r0, r4
 80186ec:	9308      	str	r3, [sp, #32]
 80186ee:	f000 fc6a 	bl	8018fc6 <_Bfree>
 80186f2:	9b08      	ldr	r3, [sp, #32]
 80186f4:	b9a3      	cbnz	r3, 8018720 <_dtoa_r+0xa00>
 80186f6:	9a06      	ldr	r2, [sp, #24]
 80186f8:	b992      	cbnz	r2, 8018720 <_dtoa_r+0xa00>
 80186fa:	9a07      	ldr	r2, [sp, #28]
 80186fc:	b982      	cbnz	r2, 8018720 <_dtoa_r+0xa00>
 80186fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018702:	d029      	beq.n	8018758 <_dtoa_r+0xa38>
 8018704:	9b00      	ldr	r3, [sp, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	dd01      	ble.n	801870e <_dtoa_r+0x9ee>
 801870a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801870e:	9b05      	ldr	r3, [sp, #20]
 8018710:	1c5d      	adds	r5, r3, #1
 8018712:	f883 8000 	strb.w	r8, [r3]
 8018716:	e782      	b.n	801861e <_dtoa_r+0x8fe>
 8018718:	4630      	mov	r0, r6
 801871a:	e7c2      	b.n	80186a2 <_dtoa_r+0x982>
 801871c:	2301      	movs	r3, #1
 801871e:	e7e3      	b.n	80186e8 <_dtoa_r+0x9c8>
 8018720:	9a00      	ldr	r2, [sp, #0]
 8018722:	2a00      	cmp	r2, #0
 8018724:	db04      	blt.n	8018730 <_dtoa_r+0xa10>
 8018726:	d125      	bne.n	8018774 <_dtoa_r+0xa54>
 8018728:	9a06      	ldr	r2, [sp, #24]
 801872a:	bb1a      	cbnz	r2, 8018774 <_dtoa_r+0xa54>
 801872c:	9a07      	ldr	r2, [sp, #28]
 801872e:	bb0a      	cbnz	r2, 8018774 <_dtoa_r+0xa54>
 8018730:	2b00      	cmp	r3, #0
 8018732:	ddec      	ble.n	801870e <_dtoa_r+0x9ee>
 8018734:	2201      	movs	r2, #1
 8018736:	9904      	ldr	r1, [sp, #16]
 8018738:	4620      	mov	r0, r4
 801873a:	f000 fe0f 	bl	801935c <__lshift>
 801873e:	4639      	mov	r1, r7
 8018740:	9004      	str	r0, [sp, #16]
 8018742:	f000 fe5f 	bl	8019404 <__mcmp>
 8018746:	2800      	cmp	r0, #0
 8018748:	dc03      	bgt.n	8018752 <_dtoa_r+0xa32>
 801874a:	d1e0      	bne.n	801870e <_dtoa_r+0x9ee>
 801874c:	f018 0f01 	tst.w	r8, #1
 8018750:	d0dd      	beq.n	801870e <_dtoa_r+0x9ee>
 8018752:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018756:	d1d8      	bne.n	801870a <_dtoa_r+0x9ea>
 8018758:	9b05      	ldr	r3, [sp, #20]
 801875a:	9a05      	ldr	r2, [sp, #20]
 801875c:	1c5d      	adds	r5, r3, #1
 801875e:	2339      	movs	r3, #57	; 0x39
 8018760:	7013      	strb	r3, [r2, #0]
 8018762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018766:	2b39      	cmp	r3, #57	; 0x39
 8018768:	f105 32ff 	add.w	r2, r5, #4294967295
 801876c:	d04f      	beq.n	801880e <_dtoa_r+0xaee>
 801876e:	3301      	adds	r3, #1
 8018770:	7013      	strb	r3, [r2, #0]
 8018772:	e754      	b.n	801861e <_dtoa_r+0x8fe>
 8018774:	9a05      	ldr	r2, [sp, #20]
 8018776:	2b00      	cmp	r3, #0
 8018778:	f102 0501 	add.w	r5, r2, #1
 801877c:	dd06      	ble.n	801878c <_dtoa_r+0xa6c>
 801877e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018782:	d0e9      	beq.n	8018758 <_dtoa_r+0xa38>
 8018784:	f108 0801 	add.w	r8, r8, #1
 8018788:	9b05      	ldr	r3, [sp, #20]
 801878a:	e7c2      	b.n	8018712 <_dtoa_r+0x9f2>
 801878c:	9a02      	ldr	r2, [sp, #8]
 801878e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018792:	eba5 030b 	sub.w	r3, r5, fp
 8018796:	4293      	cmp	r3, r2
 8018798:	d021      	beq.n	80187de <_dtoa_r+0xabe>
 801879a:	2300      	movs	r3, #0
 801879c:	220a      	movs	r2, #10
 801879e:	9904      	ldr	r1, [sp, #16]
 80187a0:	4620      	mov	r0, r4
 80187a2:	f000 fc27 	bl	8018ff4 <__multadd>
 80187a6:	45b1      	cmp	r9, r6
 80187a8:	9004      	str	r0, [sp, #16]
 80187aa:	f04f 0300 	mov.w	r3, #0
 80187ae:	f04f 020a 	mov.w	r2, #10
 80187b2:	4649      	mov	r1, r9
 80187b4:	4620      	mov	r0, r4
 80187b6:	d105      	bne.n	80187c4 <_dtoa_r+0xaa4>
 80187b8:	f000 fc1c 	bl	8018ff4 <__multadd>
 80187bc:	4681      	mov	r9, r0
 80187be:	4606      	mov	r6, r0
 80187c0:	9505      	str	r5, [sp, #20]
 80187c2:	e776      	b.n	80186b2 <_dtoa_r+0x992>
 80187c4:	f000 fc16 	bl	8018ff4 <__multadd>
 80187c8:	4631      	mov	r1, r6
 80187ca:	4681      	mov	r9, r0
 80187cc:	2300      	movs	r3, #0
 80187ce:	220a      	movs	r2, #10
 80187d0:	4620      	mov	r0, r4
 80187d2:	f000 fc0f 	bl	8018ff4 <__multadd>
 80187d6:	4606      	mov	r6, r0
 80187d8:	e7f2      	b.n	80187c0 <_dtoa_r+0xaa0>
 80187da:	f04f 0900 	mov.w	r9, #0
 80187de:	2201      	movs	r2, #1
 80187e0:	9904      	ldr	r1, [sp, #16]
 80187e2:	4620      	mov	r0, r4
 80187e4:	f000 fdba 	bl	801935c <__lshift>
 80187e8:	4639      	mov	r1, r7
 80187ea:	9004      	str	r0, [sp, #16]
 80187ec:	f000 fe0a 	bl	8019404 <__mcmp>
 80187f0:	2800      	cmp	r0, #0
 80187f2:	dcb6      	bgt.n	8018762 <_dtoa_r+0xa42>
 80187f4:	d102      	bne.n	80187fc <_dtoa_r+0xadc>
 80187f6:	f018 0f01 	tst.w	r8, #1
 80187fa:	d1b2      	bne.n	8018762 <_dtoa_r+0xa42>
 80187fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018800:	2b30      	cmp	r3, #48	; 0x30
 8018802:	f105 32ff 	add.w	r2, r5, #4294967295
 8018806:	f47f af0a 	bne.w	801861e <_dtoa_r+0x8fe>
 801880a:	4615      	mov	r5, r2
 801880c:	e7f6      	b.n	80187fc <_dtoa_r+0xadc>
 801880e:	4593      	cmp	fp, r2
 8018810:	d105      	bne.n	801881e <_dtoa_r+0xafe>
 8018812:	2331      	movs	r3, #49	; 0x31
 8018814:	f10a 0a01 	add.w	sl, sl, #1
 8018818:	f88b 3000 	strb.w	r3, [fp]
 801881c:	e6ff      	b.n	801861e <_dtoa_r+0x8fe>
 801881e:	4615      	mov	r5, r2
 8018820:	e79f      	b.n	8018762 <_dtoa_r+0xa42>
 8018822:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018888 <_dtoa_r+0xb68>
 8018826:	e007      	b.n	8018838 <_dtoa_r+0xb18>
 8018828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801882a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801888c <_dtoa_r+0xb6c>
 801882e:	b11b      	cbz	r3, 8018838 <_dtoa_r+0xb18>
 8018830:	f10b 0308 	add.w	r3, fp, #8
 8018834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018836:	6013      	str	r3, [r2, #0]
 8018838:	4658      	mov	r0, fp
 801883a:	b017      	add	sp, #92	; 0x5c
 801883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018840:	9b06      	ldr	r3, [sp, #24]
 8018842:	2b01      	cmp	r3, #1
 8018844:	f77f ae35 	ble.w	80184b2 <_dtoa_r+0x792>
 8018848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801884a:	9307      	str	r3, [sp, #28]
 801884c:	e649      	b.n	80184e2 <_dtoa_r+0x7c2>
 801884e:	9b02      	ldr	r3, [sp, #8]
 8018850:	2b00      	cmp	r3, #0
 8018852:	dc03      	bgt.n	801885c <_dtoa_r+0xb3c>
 8018854:	9b06      	ldr	r3, [sp, #24]
 8018856:	2b02      	cmp	r3, #2
 8018858:	f73f aecc 	bgt.w	80185f4 <_dtoa_r+0x8d4>
 801885c:	465d      	mov	r5, fp
 801885e:	4639      	mov	r1, r7
 8018860:	9804      	ldr	r0, [sp, #16]
 8018862:	f7ff f9cf 	bl	8017c04 <quorem>
 8018866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801886a:	f805 8b01 	strb.w	r8, [r5], #1
 801886e:	9a02      	ldr	r2, [sp, #8]
 8018870:	eba5 030b 	sub.w	r3, r5, fp
 8018874:	429a      	cmp	r2, r3
 8018876:	ddb0      	ble.n	80187da <_dtoa_r+0xaba>
 8018878:	2300      	movs	r3, #0
 801887a:	220a      	movs	r2, #10
 801887c:	9904      	ldr	r1, [sp, #16]
 801887e:	4620      	mov	r0, r4
 8018880:	f000 fbb8 	bl	8018ff4 <__multadd>
 8018884:	9004      	str	r0, [sp, #16]
 8018886:	e7ea      	b.n	801885e <_dtoa_r+0xb3e>
 8018888:	0801aacb 	.word	0x0801aacb
 801888c:	0801a990 	.word	0x0801a990

08018890 <rshift>:
 8018890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018892:	6906      	ldr	r6, [r0, #16]
 8018894:	114b      	asrs	r3, r1, #5
 8018896:	429e      	cmp	r6, r3
 8018898:	f100 0414 	add.w	r4, r0, #20
 801889c:	dd30      	ble.n	8018900 <rshift+0x70>
 801889e:	f011 011f 	ands.w	r1, r1, #31
 80188a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80188a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80188aa:	d108      	bne.n	80188be <rshift+0x2e>
 80188ac:	4621      	mov	r1, r4
 80188ae:	42b2      	cmp	r2, r6
 80188b0:	460b      	mov	r3, r1
 80188b2:	d211      	bcs.n	80188d8 <rshift+0x48>
 80188b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80188b8:	f841 3b04 	str.w	r3, [r1], #4
 80188bc:	e7f7      	b.n	80188ae <rshift+0x1e>
 80188be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80188c2:	f1c1 0c20 	rsb	ip, r1, #32
 80188c6:	40cd      	lsrs	r5, r1
 80188c8:	3204      	adds	r2, #4
 80188ca:	4623      	mov	r3, r4
 80188cc:	42b2      	cmp	r2, r6
 80188ce:	4617      	mov	r7, r2
 80188d0:	d30c      	bcc.n	80188ec <rshift+0x5c>
 80188d2:	601d      	str	r5, [r3, #0]
 80188d4:	b105      	cbz	r5, 80188d8 <rshift+0x48>
 80188d6:	3304      	adds	r3, #4
 80188d8:	1b1a      	subs	r2, r3, r4
 80188da:	42a3      	cmp	r3, r4
 80188dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80188e0:	bf08      	it	eq
 80188e2:	2300      	moveq	r3, #0
 80188e4:	6102      	str	r2, [r0, #16]
 80188e6:	bf08      	it	eq
 80188e8:	6143      	streq	r3, [r0, #20]
 80188ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188ec:	683f      	ldr	r7, [r7, #0]
 80188ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80188f2:	433d      	orrs	r5, r7
 80188f4:	f843 5b04 	str.w	r5, [r3], #4
 80188f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80188fc:	40cd      	lsrs	r5, r1
 80188fe:	e7e5      	b.n	80188cc <rshift+0x3c>
 8018900:	4623      	mov	r3, r4
 8018902:	e7e9      	b.n	80188d8 <rshift+0x48>

08018904 <__hexdig_fun>:
 8018904:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018908:	2b09      	cmp	r3, #9
 801890a:	d802      	bhi.n	8018912 <__hexdig_fun+0xe>
 801890c:	3820      	subs	r0, #32
 801890e:	b2c0      	uxtb	r0, r0
 8018910:	4770      	bx	lr
 8018912:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018916:	2b05      	cmp	r3, #5
 8018918:	d801      	bhi.n	801891e <__hexdig_fun+0x1a>
 801891a:	3847      	subs	r0, #71	; 0x47
 801891c:	e7f7      	b.n	801890e <__hexdig_fun+0xa>
 801891e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018922:	2b05      	cmp	r3, #5
 8018924:	d801      	bhi.n	801892a <__hexdig_fun+0x26>
 8018926:	3827      	subs	r0, #39	; 0x27
 8018928:	e7f1      	b.n	801890e <__hexdig_fun+0xa>
 801892a:	2000      	movs	r0, #0
 801892c:	4770      	bx	lr

0801892e <__gethex>:
 801892e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018932:	b08b      	sub	sp, #44	; 0x2c
 8018934:	468a      	mov	sl, r1
 8018936:	9002      	str	r0, [sp, #8]
 8018938:	9816      	ldr	r0, [sp, #88]	; 0x58
 801893a:	9306      	str	r3, [sp, #24]
 801893c:	4690      	mov	r8, r2
 801893e:	f000 fadf 	bl	8018f00 <__localeconv_l>
 8018942:	6803      	ldr	r3, [r0, #0]
 8018944:	9303      	str	r3, [sp, #12]
 8018946:	4618      	mov	r0, r3
 8018948:	f7e7 fc5a 	bl	8000200 <strlen>
 801894c:	9b03      	ldr	r3, [sp, #12]
 801894e:	9001      	str	r0, [sp, #4]
 8018950:	4403      	add	r3, r0
 8018952:	f04f 0b00 	mov.w	fp, #0
 8018956:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801895a:	9307      	str	r3, [sp, #28]
 801895c:	f8da 3000 	ldr.w	r3, [sl]
 8018960:	3302      	adds	r3, #2
 8018962:	461f      	mov	r7, r3
 8018964:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018968:	2830      	cmp	r0, #48	; 0x30
 801896a:	d06c      	beq.n	8018a46 <__gethex+0x118>
 801896c:	f7ff ffca 	bl	8018904 <__hexdig_fun>
 8018970:	4604      	mov	r4, r0
 8018972:	2800      	cmp	r0, #0
 8018974:	d16a      	bne.n	8018a4c <__gethex+0x11e>
 8018976:	9a01      	ldr	r2, [sp, #4]
 8018978:	9903      	ldr	r1, [sp, #12]
 801897a:	4638      	mov	r0, r7
 801897c:	f001 fb82 	bl	801a084 <strncmp>
 8018980:	2800      	cmp	r0, #0
 8018982:	d166      	bne.n	8018a52 <__gethex+0x124>
 8018984:	9b01      	ldr	r3, [sp, #4]
 8018986:	5cf8      	ldrb	r0, [r7, r3]
 8018988:	18fe      	adds	r6, r7, r3
 801898a:	f7ff ffbb 	bl	8018904 <__hexdig_fun>
 801898e:	2800      	cmp	r0, #0
 8018990:	d062      	beq.n	8018a58 <__gethex+0x12a>
 8018992:	4633      	mov	r3, r6
 8018994:	7818      	ldrb	r0, [r3, #0]
 8018996:	2830      	cmp	r0, #48	; 0x30
 8018998:	461f      	mov	r7, r3
 801899a:	f103 0301 	add.w	r3, r3, #1
 801899e:	d0f9      	beq.n	8018994 <__gethex+0x66>
 80189a0:	f7ff ffb0 	bl	8018904 <__hexdig_fun>
 80189a4:	fab0 f580 	clz	r5, r0
 80189a8:	096d      	lsrs	r5, r5, #5
 80189aa:	4634      	mov	r4, r6
 80189ac:	f04f 0b01 	mov.w	fp, #1
 80189b0:	463a      	mov	r2, r7
 80189b2:	4616      	mov	r6, r2
 80189b4:	3201      	adds	r2, #1
 80189b6:	7830      	ldrb	r0, [r6, #0]
 80189b8:	f7ff ffa4 	bl	8018904 <__hexdig_fun>
 80189bc:	2800      	cmp	r0, #0
 80189be:	d1f8      	bne.n	80189b2 <__gethex+0x84>
 80189c0:	9a01      	ldr	r2, [sp, #4]
 80189c2:	9903      	ldr	r1, [sp, #12]
 80189c4:	4630      	mov	r0, r6
 80189c6:	f001 fb5d 	bl	801a084 <strncmp>
 80189ca:	b950      	cbnz	r0, 80189e2 <__gethex+0xb4>
 80189cc:	b954      	cbnz	r4, 80189e4 <__gethex+0xb6>
 80189ce:	9b01      	ldr	r3, [sp, #4]
 80189d0:	18f4      	adds	r4, r6, r3
 80189d2:	4622      	mov	r2, r4
 80189d4:	4616      	mov	r6, r2
 80189d6:	3201      	adds	r2, #1
 80189d8:	7830      	ldrb	r0, [r6, #0]
 80189da:	f7ff ff93 	bl	8018904 <__hexdig_fun>
 80189de:	2800      	cmp	r0, #0
 80189e0:	d1f8      	bne.n	80189d4 <__gethex+0xa6>
 80189e2:	b10c      	cbz	r4, 80189e8 <__gethex+0xba>
 80189e4:	1ba4      	subs	r4, r4, r6
 80189e6:	00a4      	lsls	r4, r4, #2
 80189e8:	7833      	ldrb	r3, [r6, #0]
 80189ea:	2b50      	cmp	r3, #80	; 0x50
 80189ec:	d001      	beq.n	80189f2 <__gethex+0xc4>
 80189ee:	2b70      	cmp	r3, #112	; 0x70
 80189f0:	d140      	bne.n	8018a74 <__gethex+0x146>
 80189f2:	7873      	ldrb	r3, [r6, #1]
 80189f4:	2b2b      	cmp	r3, #43	; 0x2b
 80189f6:	d031      	beq.n	8018a5c <__gethex+0x12e>
 80189f8:	2b2d      	cmp	r3, #45	; 0x2d
 80189fa:	d033      	beq.n	8018a64 <__gethex+0x136>
 80189fc:	1c71      	adds	r1, r6, #1
 80189fe:	f04f 0900 	mov.w	r9, #0
 8018a02:	7808      	ldrb	r0, [r1, #0]
 8018a04:	f7ff ff7e 	bl	8018904 <__hexdig_fun>
 8018a08:	1e43      	subs	r3, r0, #1
 8018a0a:	b2db      	uxtb	r3, r3
 8018a0c:	2b18      	cmp	r3, #24
 8018a0e:	d831      	bhi.n	8018a74 <__gethex+0x146>
 8018a10:	f1a0 0210 	sub.w	r2, r0, #16
 8018a14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018a18:	f7ff ff74 	bl	8018904 <__hexdig_fun>
 8018a1c:	1e43      	subs	r3, r0, #1
 8018a1e:	b2db      	uxtb	r3, r3
 8018a20:	2b18      	cmp	r3, #24
 8018a22:	d922      	bls.n	8018a6a <__gethex+0x13c>
 8018a24:	f1b9 0f00 	cmp.w	r9, #0
 8018a28:	d000      	beq.n	8018a2c <__gethex+0xfe>
 8018a2a:	4252      	negs	r2, r2
 8018a2c:	4414      	add	r4, r2
 8018a2e:	f8ca 1000 	str.w	r1, [sl]
 8018a32:	b30d      	cbz	r5, 8018a78 <__gethex+0x14a>
 8018a34:	f1bb 0f00 	cmp.w	fp, #0
 8018a38:	bf0c      	ite	eq
 8018a3a:	2706      	moveq	r7, #6
 8018a3c:	2700      	movne	r7, #0
 8018a3e:	4638      	mov	r0, r7
 8018a40:	b00b      	add	sp, #44	; 0x2c
 8018a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a46:	f10b 0b01 	add.w	fp, fp, #1
 8018a4a:	e78a      	b.n	8018962 <__gethex+0x34>
 8018a4c:	2500      	movs	r5, #0
 8018a4e:	462c      	mov	r4, r5
 8018a50:	e7ae      	b.n	80189b0 <__gethex+0x82>
 8018a52:	463e      	mov	r6, r7
 8018a54:	2501      	movs	r5, #1
 8018a56:	e7c7      	b.n	80189e8 <__gethex+0xba>
 8018a58:	4604      	mov	r4, r0
 8018a5a:	e7fb      	b.n	8018a54 <__gethex+0x126>
 8018a5c:	f04f 0900 	mov.w	r9, #0
 8018a60:	1cb1      	adds	r1, r6, #2
 8018a62:	e7ce      	b.n	8018a02 <__gethex+0xd4>
 8018a64:	f04f 0901 	mov.w	r9, #1
 8018a68:	e7fa      	b.n	8018a60 <__gethex+0x132>
 8018a6a:	230a      	movs	r3, #10
 8018a6c:	fb03 0202 	mla	r2, r3, r2, r0
 8018a70:	3a10      	subs	r2, #16
 8018a72:	e7cf      	b.n	8018a14 <__gethex+0xe6>
 8018a74:	4631      	mov	r1, r6
 8018a76:	e7da      	b.n	8018a2e <__gethex+0x100>
 8018a78:	1bf3      	subs	r3, r6, r7
 8018a7a:	3b01      	subs	r3, #1
 8018a7c:	4629      	mov	r1, r5
 8018a7e:	2b07      	cmp	r3, #7
 8018a80:	dc49      	bgt.n	8018b16 <__gethex+0x1e8>
 8018a82:	9802      	ldr	r0, [sp, #8]
 8018a84:	f000 fa6b 	bl	8018f5e <_Balloc>
 8018a88:	9b01      	ldr	r3, [sp, #4]
 8018a8a:	f100 0914 	add.w	r9, r0, #20
 8018a8e:	f04f 0b00 	mov.w	fp, #0
 8018a92:	f1c3 0301 	rsb	r3, r3, #1
 8018a96:	4605      	mov	r5, r0
 8018a98:	f8cd 9010 	str.w	r9, [sp, #16]
 8018a9c:	46da      	mov	sl, fp
 8018a9e:	9308      	str	r3, [sp, #32]
 8018aa0:	42b7      	cmp	r7, r6
 8018aa2:	d33b      	bcc.n	8018b1c <__gethex+0x1ee>
 8018aa4:	9804      	ldr	r0, [sp, #16]
 8018aa6:	f840 ab04 	str.w	sl, [r0], #4
 8018aaa:	eba0 0009 	sub.w	r0, r0, r9
 8018aae:	1080      	asrs	r0, r0, #2
 8018ab0:	6128      	str	r0, [r5, #16]
 8018ab2:	0147      	lsls	r7, r0, #5
 8018ab4:	4650      	mov	r0, sl
 8018ab6:	f000 fb16 	bl	80190e6 <__hi0bits>
 8018aba:	f8d8 6000 	ldr.w	r6, [r8]
 8018abe:	1a3f      	subs	r7, r7, r0
 8018ac0:	42b7      	cmp	r7, r6
 8018ac2:	dd64      	ble.n	8018b8e <__gethex+0x260>
 8018ac4:	1bbf      	subs	r7, r7, r6
 8018ac6:	4639      	mov	r1, r7
 8018ac8:	4628      	mov	r0, r5
 8018aca:	f000 fe25 	bl	8019718 <__any_on>
 8018ace:	4682      	mov	sl, r0
 8018ad0:	b178      	cbz	r0, 8018af2 <__gethex+0x1c4>
 8018ad2:	1e7b      	subs	r3, r7, #1
 8018ad4:	1159      	asrs	r1, r3, #5
 8018ad6:	f003 021f 	and.w	r2, r3, #31
 8018ada:	f04f 0a01 	mov.w	sl, #1
 8018ade:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018ae2:	fa0a f202 	lsl.w	r2, sl, r2
 8018ae6:	420a      	tst	r2, r1
 8018ae8:	d003      	beq.n	8018af2 <__gethex+0x1c4>
 8018aea:	4553      	cmp	r3, sl
 8018aec:	dc46      	bgt.n	8018b7c <__gethex+0x24e>
 8018aee:	f04f 0a02 	mov.w	sl, #2
 8018af2:	4639      	mov	r1, r7
 8018af4:	4628      	mov	r0, r5
 8018af6:	f7ff fecb 	bl	8018890 <rshift>
 8018afa:	443c      	add	r4, r7
 8018afc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b00:	42a3      	cmp	r3, r4
 8018b02:	da52      	bge.n	8018baa <__gethex+0x27c>
 8018b04:	4629      	mov	r1, r5
 8018b06:	9802      	ldr	r0, [sp, #8]
 8018b08:	f000 fa5d 	bl	8018fc6 <_Bfree>
 8018b0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b0e:	2300      	movs	r3, #0
 8018b10:	6013      	str	r3, [r2, #0]
 8018b12:	27a3      	movs	r7, #163	; 0xa3
 8018b14:	e793      	b.n	8018a3e <__gethex+0x110>
 8018b16:	3101      	adds	r1, #1
 8018b18:	105b      	asrs	r3, r3, #1
 8018b1a:	e7b0      	b.n	8018a7e <__gethex+0x150>
 8018b1c:	1e73      	subs	r3, r6, #1
 8018b1e:	9305      	str	r3, [sp, #20]
 8018b20:	9a07      	ldr	r2, [sp, #28]
 8018b22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018b26:	4293      	cmp	r3, r2
 8018b28:	d018      	beq.n	8018b5c <__gethex+0x22e>
 8018b2a:	f1bb 0f20 	cmp.w	fp, #32
 8018b2e:	d107      	bne.n	8018b40 <__gethex+0x212>
 8018b30:	9b04      	ldr	r3, [sp, #16]
 8018b32:	f8c3 a000 	str.w	sl, [r3]
 8018b36:	3304      	adds	r3, #4
 8018b38:	f04f 0a00 	mov.w	sl, #0
 8018b3c:	9304      	str	r3, [sp, #16]
 8018b3e:	46d3      	mov	fp, sl
 8018b40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018b44:	f7ff fede 	bl	8018904 <__hexdig_fun>
 8018b48:	f000 000f 	and.w	r0, r0, #15
 8018b4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018b50:	ea4a 0a00 	orr.w	sl, sl, r0
 8018b54:	f10b 0b04 	add.w	fp, fp, #4
 8018b58:	9b05      	ldr	r3, [sp, #20]
 8018b5a:	e00d      	b.n	8018b78 <__gethex+0x24a>
 8018b5c:	9b05      	ldr	r3, [sp, #20]
 8018b5e:	9a08      	ldr	r2, [sp, #32]
 8018b60:	4413      	add	r3, r2
 8018b62:	42bb      	cmp	r3, r7
 8018b64:	d3e1      	bcc.n	8018b2a <__gethex+0x1fc>
 8018b66:	4618      	mov	r0, r3
 8018b68:	9a01      	ldr	r2, [sp, #4]
 8018b6a:	9903      	ldr	r1, [sp, #12]
 8018b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b6e:	f001 fa89 	bl	801a084 <strncmp>
 8018b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b74:	2800      	cmp	r0, #0
 8018b76:	d1d8      	bne.n	8018b2a <__gethex+0x1fc>
 8018b78:	461e      	mov	r6, r3
 8018b7a:	e791      	b.n	8018aa0 <__gethex+0x172>
 8018b7c:	1eb9      	subs	r1, r7, #2
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f000 fdca 	bl	8019718 <__any_on>
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d0b2      	beq.n	8018aee <__gethex+0x1c0>
 8018b88:	f04f 0a03 	mov.w	sl, #3
 8018b8c:	e7b1      	b.n	8018af2 <__gethex+0x1c4>
 8018b8e:	da09      	bge.n	8018ba4 <__gethex+0x276>
 8018b90:	1bf7      	subs	r7, r6, r7
 8018b92:	4629      	mov	r1, r5
 8018b94:	463a      	mov	r2, r7
 8018b96:	9802      	ldr	r0, [sp, #8]
 8018b98:	f000 fbe0 	bl	801935c <__lshift>
 8018b9c:	1be4      	subs	r4, r4, r7
 8018b9e:	4605      	mov	r5, r0
 8018ba0:	f100 0914 	add.w	r9, r0, #20
 8018ba4:	f04f 0a00 	mov.w	sl, #0
 8018ba8:	e7a8      	b.n	8018afc <__gethex+0x1ce>
 8018baa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018bae:	42a0      	cmp	r0, r4
 8018bb0:	dd6a      	ble.n	8018c88 <__gethex+0x35a>
 8018bb2:	1b04      	subs	r4, r0, r4
 8018bb4:	42a6      	cmp	r6, r4
 8018bb6:	dc2e      	bgt.n	8018c16 <__gethex+0x2e8>
 8018bb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018bbc:	2b02      	cmp	r3, #2
 8018bbe:	d022      	beq.n	8018c06 <__gethex+0x2d8>
 8018bc0:	2b03      	cmp	r3, #3
 8018bc2:	d024      	beq.n	8018c0e <__gethex+0x2e0>
 8018bc4:	2b01      	cmp	r3, #1
 8018bc6:	d115      	bne.n	8018bf4 <__gethex+0x2c6>
 8018bc8:	42a6      	cmp	r6, r4
 8018bca:	d113      	bne.n	8018bf4 <__gethex+0x2c6>
 8018bcc:	2e01      	cmp	r6, #1
 8018bce:	dc0b      	bgt.n	8018be8 <__gethex+0x2ba>
 8018bd0:	9a06      	ldr	r2, [sp, #24]
 8018bd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018bd6:	6013      	str	r3, [r2, #0]
 8018bd8:	2301      	movs	r3, #1
 8018bda:	612b      	str	r3, [r5, #16]
 8018bdc:	f8c9 3000 	str.w	r3, [r9]
 8018be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018be2:	2762      	movs	r7, #98	; 0x62
 8018be4:	601d      	str	r5, [r3, #0]
 8018be6:	e72a      	b.n	8018a3e <__gethex+0x110>
 8018be8:	1e71      	subs	r1, r6, #1
 8018bea:	4628      	mov	r0, r5
 8018bec:	f000 fd94 	bl	8019718 <__any_on>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d1ed      	bne.n	8018bd0 <__gethex+0x2a2>
 8018bf4:	4629      	mov	r1, r5
 8018bf6:	9802      	ldr	r0, [sp, #8]
 8018bf8:	f000 f9e5 	bl	8018fc6 <_Bfree>
 8018bfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018bfe:	2300      	movs	r3, #0
 8018c00:	6013      	str	r3, [r2, #0]
 8018c02:	2750      	movs	r7, #80	; 0x50
 8018c04:	e71b      	b.n	8018a3e <__gethex+0x110>
 8018c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d0e1      	beq.n	8018bd0 <__gethex+0x2a2>
 8018c0c:	e7f2      	b.n	8018bf4 <__gethex+0x2c6>
 8018c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1dd      	bne.n	8018bd0 <__gethex+0x2a2>
 8018c14:	e7ee      	b.n	8018bf4 <__gethex+0x2c6>
 8018c16:	1e67      	subs	r7, r4, #1
 8018c18:	f1ba 0f00 	cmp.w	sl, #0
 8018c1c:	d131      	bne.n	8018c82 <__gethex+0x354>
 8018c1e:	b127      	cbz	r7, 8018c2a <__gethex+0x2fc>
 8018c20:	4639      	mov	r1, r7
 8018c22:	4628      	mov	r0, r5
 8018c24:	f000 fd78 	bl	8019718 <__any_on>
 8018c28:	4682      	mov	sl, r0
 8018c2a:	117a      	asrs	r2, r7, #5
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	f007 071f 	and.w	r7, r7, #31
 8018c32:	fa03 f707 	lsl.w	r7, r3, r7
 8018c36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018c3a:	4621      	mov	r1, r4
 8018c3c:	421f      	tst	r7, r3
 8018c3e:	4628      	mov	r0, r5
 8018c40:	bf18      	it	ne
 8018c42:	f04a 0a02 	orrne.w	sl, sl, #2
 8018c46:	1b36      	subs	r6, r6, r4
 8018c48:	f7ff fe22 	bl	8018890 <rshift>
 8018c4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018c50:	2702      	movs	r7, #2
 8018c52:	f1ba 0f00 	cmp.w	sl, #0
 8018c56:	d048      	beq.n	8018cea <__gethex+0x3bc>
 8018c58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018c5c:	2b02      	cmp	r3, #2
 8018c5e:	d015      	beq.n	8018c8c <__gethex+0x35e>
 8018c60:	2b03      	cmp	r3, #3
 8018c62:	d017      	beq.n	8018c94 <__gethex+0x366>
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d109      	bne.n	8018c7c <__gethex+0x34e>
 8018c68:	f01a 0f02 	tst.w	sl, #2
 8018c6c:	d006      	beq.n	8018c7c <__gethex+0x34e>
 8018c6e:	f8d9 3000 	ldr.w	r3, [r9]
 8018c72:	ea4a 0a03 	orr.w	sl, sl, r3
 8018c76:	f01a 0f01 	tst.w	sl, #1
 8018c7a:	d10e      	bne.n	8018c9a <__gethex+0x36c>
 8018c7c:	f047 0710 	orr.w	r7, r7, #16
 8018c80:	e033      	b.n	8018cea <__gethex+0x3bc>
 8018c82:	f04f 0a01 	mov.w	sl, #1
 8018c86:	e7d0      	b.n	8018c2a <__gethex+0x2fc>
 8018c88:	2701      	movs	r7, #1
 8018c8a:	e7e2      	b.n	8018c52 <__gethex+0x324>
 8018c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c8e:	f1c3 0301 	rsb	r3, r3, #1
 8018c92:	9315      	str	r3, [sp, #84]	; 0x54
 8018c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d0f0      	beq.n	8018c7c <__gethex+0x34e>
 8018c9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018c9e:	f105 0314 	add.w	r3, r5, #20
 8018ca2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018ca6:	eb03 010a 	add.w	r1, r3, sl
 8018caa:	f04f 0c00 	mov.w	ip, #0
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018cb8:	d01c      	beq.n	8018cf4 <__gethex+0x3c6>
 8018cba:	3201      	adds	r2, #1
 8018cbc:	6002      	str	r2, [r0, #0]
 8018cbe:	2f02      	cmp	r7, #2
 8018cc0:	f105 0314 	add.w	r3, r5, #20
 8018cc4:	d138      	bne.n	8018d38 <__gethex+0x40a>
 8018cc6:	f8d8 2000 	ldr.w	r2, [r8]
 8018cca:	3a01      	subs	r2, #1
 8018ccc:	42b2      	cmp	r2, r6
 8018cce:	d10a      	bne.n	8018ce6 <__gethex+0x3b8>
 8018cd0:	1171      	asrs	r1, r6, #5
 8018cd2:	2201      	movs	r2, #1
 8018cd4:	f006 061f 	and.w	r6, r6, #31
 8018cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018cdc:	fa02 f606 	lsl.w	r6, r2, r6
 8018ce0:	421e      	tst	r6, r3
 8018ce2:	bf18      	it	ne
 8018ce4:	4617      	movne	r7, r2
 8018ce6:	f047 0720 	orr.w	r7, r7, #32
 8018cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018cec:	601d      	str	r5, [r3, #0]
 8018cee:	9b06      	ldr	r3, [sp, #24]
 8018cf0:	601c      	str	r4, [r3, #0]
 8018cf2:	e6a4      	b.n	8018a3e <__gethex+0x110>
 8018cf4:	4299      	cmp	r1, r3
 8018cf6:	f843 cc04 	str.w	ip, [r3, #-4]
 8018cfa:	d8d8      	bhi.n	8018cae <__gethex+0x380>
 8018cfc:	68ab      	ldr	r3, [r5, #8]
 8018cfe:	4599      	cmp	r9, r3
 8018d00:	db12      	blt.n	8018d28 <__gethex+0x3fa>
 8018d02:	6869      	ldr	r1, [r5, #4]
 8018d04:	9802      	ldr	r0, [sp, #8]
 8018d06:	3101      	adds	r1, #1
 8018d08:	f000 f929 	bl	8018f5e <_Balloc>
 8018d0c:	692a      	ldr	r2, [r5, #16]
 8018d0e:	3202      	adds	r2, #2
 8018d10:	f105 010c 	add.w	r1, r5, #12
 8018d14:	4683      	mov	fp, r0
 8018d16:	0092      	lsls	r2, r2, #2
 8018d18:	300c      	adds	r0, #12
 8018d1a:	f000 f913 	bl	8018f44 <memcpy>
 8018d1e:	4629      	mov	r1, r5
 8018d20:	9802      	ldr	r0, [sp, #8]
 8018d22:	f000 f950 	bl	8018fc6 <_Bfree>
 8018d26:	465d      	mov	r5, fp
 8018d28:	692b      	ldr	r3, [r5, #16]
 8018d2a:	1c5a      	adds	r2, r3, #1
 8018d2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018d30:	612a      	str	r2, [r5, #16]
 8018d32:	2201      	movs	r2, #1
 8018d34:	615a      	str	r2, [r3, #20]
 8018d36:	e7c2      	b.n	8018cbe <__gethex+0x390>
 8018d38:	692a      	ldr	r2, [r5, #16]
 8018d3a:	454a      	cmp	r2, r9
 8018d3c:	dd0b      	ble.n	8018d56 <__gethex+0x428>
 8018d3e:	2101      	movs	r1, #1
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7ff fda5 	bl	8018890 <rshift>
 8018d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d4a:	3401      	adds	r4, #1
 8018d4c:	42a3      	cmp	r3, r4
 8018d4e:	f6ff aed9 	blt.w	8018b04 <__gethex+0x1d6>
 8018d52:	2701      	movs	r7, #1
 8018d54:	e7c7      	b.n	8018ce6 <__gethex+0x3b8>
 8018d56:	f016 061f 	ands.w	r6, r6, #31
 8018d5a:	d0fa      	beq.n	8018d52 <__gethex+0x424>
 8018d5c:	449a      	add	sl, r3
 8018d5e:	f1c6 0620 	rsb	r6, r6, #32
 8018d62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018d66:	f000 f9be 	bl	80190e6 <__hi0bits>
 8018d6a:	42b0      	cmp	r0, r6
 8018d6c:	dbe7      	blt.n	8018d3e <__gethex+0x410>
 8018d6e:	e7f0      	b.n	8018d52 <__gethex+0x424>

08018d70 <L_shift>:
 8018d70:	f1c2 0208 	rsb	r2, r2, #8
 8018d74:	0092      	lsls	r2, r2, #2
 8018d76:	b570      	push	{r4, r5, r6, lr}
 8018d78:	f1c2 0620 	rsb	r6, r2, #32
 8018d7c:	6843      	ldr	r3, [r0, #4]
 8018d7e:	6804      	ldr	r4, [r0, #0]
 8018d80:	fa03 f506 	lsl.w	r5, r3, r6
 8018d84:	432c      	orrs	r4, r5
 8018d86:	40d3      	lsrs	r3, r2
 8018d88:	6004      	str	r4, [r0, #0]
 8018d8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018d8e:	4288      	cmp	r0, r1
 8018d90:	d3f4      	bcc.n	8018d7c <L_shift+0xc>
 8018d92:	bd70      	pop	{r4, r5, r6, pc}

08018d94 <__match>:
 8018d94:	b530      	push	{r4, r5, lr}
 8018d96:	6803      	ldr	r3, [r0, #0]
 8018d98:	3301      	adds	r3, #1
 8018d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d9e:	b914      	cbnz	r4, 8018da6 <__match+0x12>
 8018da0:	6003      	str	r3, [r0, #0]
 8018da2:	2001      	movs	r0, #1
 8018da4:	bd30      	pop	{r4, r5, pc}
 8018da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018daa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018dae:	2d19      	cmp	r5, #25
 8018db0:	bf98      	it	ls
 8018db2:	3220      	addls	r2, #32
 8018db4:	42a2      	cmp	r2, r4
 8018db6:	d0f0      	beq.n	8018d9a <__match+0x6>
 8018db8:	2000      	movs	r0, #0
 8018dba:	e7f3      	b.n	8018da4 <__match+0x10>

08018dbc <__hexnan>:
 8018dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc0:	680b      	ldr	r3, [r1, #0]
 8018dc2:	6801      	ldr	r1, [r0, #0]
 8018dc4:	115f      	asrs	r7, r3, #5
 8018dc6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018dca:	f013 031f 	ands.w	r3, r3, #31
 8018dce:	b087      	sub	sp, #28
 8018dd0:	bf18      	it	ne
 8018dd2:	3704      	addne	r7, #4
 8018dd4:	2500      	movs	r5, #0
 8018dd6:	1f3e      	subs	r6, r7, #4
 8018dd8:	4682      	mov	sl, r0
 8018dda:	4690      	mov	r8, r2
 8018ddc:	9301      	str	r3, [sp, #4]
 8018dde:	f847 5c04 	str.w	r5, [r7, #-4]
 8018de2:	46b1      	mov	r9, r6
 8018de4:	4634      	mov	r4, r6
 8018de6:	9502      	str	r5, [sp, #8]
 8018de8:	46ab      	mov	fp, r5
 8018dea:	784a      	ldrb	r2, [r1, #1]
 8018dec:	1c4b      	adds	r3, r1, #1
 8018dee:	9303      	str	r3, [sp, #12]
 8018df0:	b342      	cbz	r2, 8018e44 <__hexnan+0x88>
 8018df2:	4610      	mov	r0, r2
 8018df4:	9105      	str	r1, [sp, #20]
 8018df6:	9204      	str	r2, [sp, #16]
 8018df8:	f7ff fd84 	bl	8018904 <__hexdig_fun>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	d143      	bne.n	8018e88 <__hexnan+0xcc>
 8018e00:	9a04      	ldr	r2, [sp, #16]
 8018e02:	9905      	ldr	r1, [sp, #20]
 8018e04:	2a20      	cmp	r2, #32
 8018e06:	d818      	bhi.n	8018e3a <__hexnan+0x7e>
 8018e08:	9b02      	ldr	r3, [sp, #8]
 8018e0a:	459b      	cmp	fp, r3
 8018e0c:	dd13      	ble.n	8018e36 <__hexnan+0x7a>
 8018e0e:	454c      	cmp	r4, r9
 8018e10:	d206      	bcs.n	8018e20 <__hexnan+0x64>
 8018e12:	2d07      	cmp	r5, #7
 8018e14:	dc04      	bgt.n	8018e20 <__hexnan+0x64>
 8018e16:	462a      	mov	r2, r5
 8018e18:	4649      	mov	r1, r9
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f7ff ffa8 	bl	8018d70 <L_shift>
 8018e20:	4544      	cmp	r4, r8
 8018e22:	d944      	bls.n	8018eae <__hexnan+0xf2>
 8018e24:	2300      	movs	r3, #0
 8018e26:	f1a4 0904 	sub.w	r9, r4, #4
 8018e2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e2e:	f8cd b008 	str.w	fp, [sp, #8]
 8018e32:	464c      	mov	r4, r9
 8018e34:	461d      	mov	r5, r3
 8018e36:	9903      	ldr	r1, [sp, #12]
 8018e38:	e7d7      	b.n	8018dea <__hexnan+0x2e>
 8018e3a:	2a29      	cmp	r2, #41	; 0x29
 8018e3c:	d14a      	bne.n	8018ed4 <__hexnan+0x118>
 8018e3e:	3102      	adds	r1, #2
 8018e40:	f8ca 1000 	str.w	r1, [sl]
 8018e44:	f1bb 0f00 	cmp.w	fp, #0
 8018e48:	d044      	beq.n	8018ed4 <__hexnan+0x118>
 8018e4a:	454c      	cmp	r4, r9
 8018e4c:	d206      	bcs.n	8018e5c <__hexnan+0xa0>
 8018e4e:	2d07      	cmp	r5, #7
 8018e50:	dc04      	bgt.n	8018e5c <__hexnan+0xa0>
 8018e52:	462a      	mov	r2, r5
 8018e54:	4649      	mov	r1, r9
 8018e56:	4620      	mov	r0, r4
 8018e58:	f7ff ff8a 	bl	8018d70 <L_shift>
 8018e5c:	4544      	cmp	r4, r8
 8018e5e:	d928      	bls.n	8018eb2 <__hexnan+0xf6>
 8018e60:	4643      	mov	r3, r8
 8018e62:	f854 2b04 	ldr.w	r2, [r4], #4
 8018e66:	f843 2b04 	str.w	r2, [r3], #4
 8018e6a:	42a6      	cmp	r6, r4
 8018e6c:	d2f9      	bcs.n	8018e62 <__hexnan+0xa6>
 8018e6e:	2200      	movs	r2, #0
 8018e70:	f843 2b04 	str.w	r2, [r3], #4
 8018e74:	429e      	cmp	r6, r3
 8018e76:	d2fb      	bcs.n	8018e70 <__hexnan+0xb4>
 8018e78:	6833      	ldr	r3, [r6, #0]
 8018e7a:	b91b      	cbnz	r3, 8018e84 <__hexnan+0xc8>
 8018e7c:	4546      	cmp	r6, r8
 8018e7e:	d127      	bne.n	8018ed0 <__hexnan+0x114>
 8018e80:	2301      	movs	r3, #1
 8018e82:	6033      	str	r3, [r6, #0]
 8018e84:	2005      	movs	r0, #5
 8018e86:	e026      	b.n	8018ed6 <__hexnan+0x11a>
 8018e88:	3501      	adds	r5, #1
 8018e8a:	2d08      	cmp	r5, #8
 8018e8c:	f10b 0b01 	add.w	fp, fp, #1
 8018e90:	dd06      	ble.n	8018ea0 <__hexnan+0xe4>
 8018e92:	4544      	cmp	r4, r8
 8018e94:	d9cf      	bls.n	8018e36 <__hexnan+0x7a>
 8018e96:	2300      	movs	r3, #0
 8018e98:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e9c:	2501      	movs	r5, #1
 8018e9e:	3c04      	subs	r4, #4
 8018ea0:	6822      	ldr	r2, [r4, #0]
 8018ea2:	f000 000f 	and.w	r0, r0, #15
 8018ea6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018eaa:	6020      	str	r0, [r4, #0]
 8018eac:	e7c3      	b.n	8018e36 <__hexnan+0x7a>
 8018eae:	2508      	movs	r5, #8
 8018eb0:	e7c1      	b.n	8018e36 <__hexnan+0x7a>
 8018eb2:	9b01      	ldr	r3, [sp, #4]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d0df      	beq.n	8018e78 <__hexnan+0xbc>
 8018eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8018ebc:	f1c3 0320 	rsb	r3, r3, #32
 8018ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8018ec4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018ec8:	401a      	ands	r2, r3
 8018eca:	f847 2c04 	str.w	r2, [r7, #-4]
 8018ece:	e7d3      	b.n	8018e78 <__hexnan+0xbc>
 8018ed0:	3e04      	subs	r6, #4
 8018ed2:	e7d1      	b.n	8018e78 <__hexnan+0xbc>
 8018ed4:	2004      	movs	r0, #4
 8018ed6:	b007      	add	sp, #28
 8018ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018edc <__locale_ctype_ptr_l>:
 8018edc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018ee0:	4770      	bx	lr
	...

08018ee4 <__locale_ctype_ptr>:
 8018ee4:	4b04      	ldr	r3, [pc, #16]	; (8018ef8 <__locale_ctype_ptr+0x14>)
 8018ee6:	4a05      	ldr	r2, [pc, #20]	; (8018efc <__locale_ctype_ptr+0x18>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	6a1b      	ldr	r3, [r3, #32]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf08      	it	eq
 8018ef0:	4613      	moveq	r3, r2
 8018ef2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018ef6:	4770      	bx	lr
 8018ef8:	2000000c 	.word	0x2000000c
 8018efc:	20000070 	.word	0x20000070

08018f00 <__localeconv_l>:
 8018f00:	30f0      	adds	r0, #240	; 0xf0
 8018f02:	4770      	bx	lr

08018f04 <_localeconv_r>:
 8018f04:	4b04      	ldr	r3, [pc, #16]	; (8018f18 <_localeconv_r+0x14>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	6a18      	ldr	r0, [r3, #32]
 8018f0a:	4b04      	ldr	r3, [pc, #16]	; (8018f1c <_localeconv_r+0x18>)
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	bf08      	it	eq
 8018f10:	4618      	moveq	r0, r3
 8018f12:	30f0      	adds	r0, #240	; 0xf0
 8018f14:	4770      	bx	lr
 8018f16:	bf00      	nop
 8018f18:	2000000c 	.word	0x2000000c
 8018f1c:	20000070 	.word	0x20000070

08018f20 <__ascii_mbtowc>:
 8018f20:	b082      	sub	sp, #8
 8018f22:	b901      	cbnz	r1, 8018f26 <__ascii_mbtowc+0x6>
 8018f24:	a901      	add	r1, sp, #4
 8018f26:	b142      	cbz	r2, 8018f3a <__ascii_mbtowc+0x1a>
 8018f28:	b14b      	cbz	r3, 8018f3e <__ascii_mbtowc+0x1e>
 8018f2a:	7813      	ldrb	r3, [r2, #0]
 8018f2c:	600b      	str	r3, [r1, #0]
 8018f2e:	7812      	ldrb	r2, [r2, #0]
 8018f30:	1c10      	adds	r0, r2, #0
 8018f32:	bf18      	it	ne
 8018f34:	2001      	movne	r0, #1
 8018f36:	b002      	add	sp, #8
 8018f38:	4770      	bx	lr
 8018f3a:	4610      	mov	r0, r2
 8018f3c:	e7fb      	b.n	8018f36 <__ascii_mbtowc+0x16>
 8018f3e:	f06f 0001 	mvn.w	r0, #1
 8018f42:	e7f8      	b.n	8018f36 <__ascii_mbtowc+0x16>

08018f44 <memcpy>:
 8018f44:	b510      	push	{r4, lr}
 8018f46:	1e43      	subs	r3, r0, #1
 8018f48:	440a      	add	r2, r1
 8018f4a:	4291      	cmp	r1, r2
 8018f4c:	d100      	bne.n	8018f50 <memcpy+0xc>
 8018f4e:	bd10      	pop	{r4, pc}
 8018f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f58:	e7f7      	b.n	8018f4a <memcpy+0x6>

08018f5a <__malloc_lock>:
 8018f5a:	4770      	bx	lr

08018f5c <__malloc_unlock>:
 8018f5c:	4770      	bx	lr

08018f5e <_Balloc>:
 8018f5e:	b570      	push	{r4, r5, r6, lr}
 8018f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018f62:	4604      	mov	r4, r0
 8018f64:	460e      	mov	r6, r1
 8018f66:	b93d      	cbnz	r5, 8018f78 <_Balloc+0x1a>
 8018f68:	2010      	movs	r0, #16
 8018f6a:	f7fc ffa5 	bl	8015eb8 <malloc>
 8018f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8018f70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018f74:	6005      	str	r5, [r0, #0]
 8018f76:	60c5      	str	r5, [r0, #12]
 8018f78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018f7a:	68eb      	ldr	r3, [r5, #12]
 8018f7c:	b183      	cbz	r3, 8018fa0 <_Balloc+0x42>
 8018f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f80:	68db      	ldr	r3, [r3, #12]
 8018f82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018f86:	b9b8      	cbnz	r0, 8018fb8 <_Balloc+0x5a>
 8018f88:	2101      	movs	r1, #1
 8018f8a:	fa01 f506 	lsl.w	r5, r1, r6
 8018f8e:	1d6a      	adds	r2, r5, #5
 8018f90:	0092      	lsls	r2, r2, #2
 8018f92:	4620      	mov	r0, r4
 8018f94:	f000 fbe1 	bl	801975a <_calloc_r>
 8018f98:	b160      	cbz	r0, 8018fb4 <_Balloc+0x56>
 8018f9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018f9e:	e00e      	b.n	8018fbe <_Balloc+0x60>
 8018fa0:	2221      	movs	r2, #33	; 0x21
 8018fa2:	2104      	movs	r1, #4
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	f000 fbd8 	bl	801975a <_calloc_r>
 8018faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018fac:	60e8      	str	r0, [r5, #12]
 8018fae:	68db      	ldr	r3, [r3, #12]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d1e4      	bne.n	8018f7e <_Balloc+0x20>
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	bd70      	pop	{r4, r5, r6, pc}
 8018fb8:	6802      	ldr	r2, [r0, #0]
 8018fba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018fc4:	e7f7      	b.n	8018fb6 <_Balloc+0x58>

08018fc6 <_Bfree>:
 8018fc6:	b570      	push	{r4, r5, r6, lr}
 8018fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018fca:	4606      	mov	r6, r0
 8018fcc:	460d      	mov	r5, r1
 8018fce:	b93c      	cbnz	r4, 8018fe0 <_Bfree+0x1a>
 8018fd0:	2010      	movs	r0, #16
 8018fd2:	f7fc ff71 	bl	8015eb8 <malloc>
 8018fd6:	6270      	str	r0, [r6, #36]	; 0x24
 8018fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018fdc:	6004      	str	r4, [r0, #0]
 8018fde:	60c4      	str	r4, [r0, #12]
 8018fe0:	b13d      	cbz	r5, 8018ff2 <_Bfree+0x2c>
 8018fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018fe4:	686a      	ldr	r2, [r5, #4]
 8018fe6:	68db      	ldr	r3, [r3, #12]
 8018fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018fec:	6029      	str	r1, [r5, #0]
 8018fee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}

08018ff4 <__multadd>:
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	690d      	ldr	r5, [r1, #16]
 8018ffa:	461f      	mov	r7, r3
 8018ffc:	4606      	mov	r6, r0
 8018ffe:	460c      	mov	r4, r1
 8019000:	f101 0c14 	add.w	ip, r1, #20
 8019004:	2300      	movs	r3, #0
 8019006:	f8dc 0000 	ldr.w	r0, [ip]
 801900a:	b281      	uxth	r1, r0
 801900c:	fb02 7101 	mla	r1, r2, r1, r7
 8019010:	0c0f      	lsrs	r7, r1, #16
 8019012:	0c00      	lsrs	r0, r0, #16
 8019014:	fb02 7000 	mla	r0, r2, r0, r7
 8019018:	b289      	uxth	r1, r1
 801901a:	3301      	adds	r3, #1
 801901c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019020:	429d      	cmp	r5, r3
 8019022:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8019026:	f84c 1b04 	str.w	r1, [ip], #4
 801902a:	dcec      	bgt.n	8019006 <__multadd+0x12>
 801902c:	b1d7      	cbz	r7, 8019064 <__multadd+0x70>
 801902e:	68a3      	ldr	r3, [r4, #8]
 8019030:	42ab      	cmp	r3, r5
 8019032:	dc12      	bgt.n	801905a <__multadd+0x66>
 8019034:	6861      	ldr	r1, [r4, #4]
 8019036:	4630      	mov	r0, r6
 8019038:	3101      	adds	r1, #1
 801903a:	f7ff ff90 	bl	8018f5e <_Balloc>
 801903e:	6922      	ldr	r2, [r4, #16]
 8019040:	3202      	adds	r2, #2
 8019042:	f104 010c 	add.w	r1, r4, #12
 8019046:	4680      	mov	r8, r0
 8019048:	0092      	lsls	r2, r2, #2
 801904a:	300c      	adds	r0, #12
 801904c:	f7ff ff7a 	bl	8018f44 <memcpy>
 8019050:	4621      	mov	r1, r4
 8019052:	4630      	mov	r0, r6
 8019054:	f7ff ffb7 	bl	8018fc6 <_Bfree>
 8019058:	4644      	mov	r4, r8
 801905a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801905e:	3501      	adds	r5, #1
 8019060:	615f      	str	r7, [r3, #20]
 8019062:	6125      	str	r5, [r4, #16]
 8019064:	4620      	mov	r0, r4
 8019066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801906a <__s2b>:
 801906a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801906e:	460c      	mov	r4, r1
 8019070:	4615      	mov	r5, r2
 8019072:	461f      	mov	r7, r3
 8019074:	2209      	movs	r2, #9
 8019076:	3308      	adds	r3, #8
 8019078:	4606      	mov	r6, r0
 801907a:	fb93 f3f2 	sdiv	r3, r3, r2
 801907e:	2100      	movs	r1, #0
 8019080:	2201      	movs	r2, #1
 8019082:	429a      	cmp	r2, r3
 8019084:	db20      	blt.n	80190c8 <__s2b+0x5e>
 8019086:	4630      	mov	r0, r6
 8019088:	f7ff ff69 	bl	8018f5e <_Balloc>
 801908c:	9b08      	ldr	r3, [sp, #32]
 801908e:	6143      	str	r3, [r0, #20]
 8019090:	2d09      	cmp	r5, #9
 8019092:	f04f 0301 	mov.w	r3, #1
 8019096:	6103      	str	r3, [r0, #16]
 8019098:	dd19      	ble.n	80190ce <__s2b+0x64>
 801909a:	f104 0809 	add.w	r8, r4, #9
 801909e:	46c1      	mov	r9, r8
 80190a0:	442c      	add	r4, r5
 80190a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80190a6:	4601      	mov	r1, r0
 80190a8:	3b30      	subs	r3, #48	; 0x30
 80190aa:	220a      	movs	r2, #10
 80190ac:	4630      	mov	r0, r6
 80190ae:	f7ff ffa1 	bl	8018ff4 <__multadd>
 80190b2:	45a1      	cmp	r9, r4
 80190b4:	d1f5      	bne.n	80190a2 <__s2b+0x38>
 80190b6:	eb08 0405 	add.w	r4, r8, r5
 80190ba:	3c08      	subs	r4, #8
 80190bc:	1b2d      	subs	r5, r5, r4
 80190be:	1963      	adds	r3, r4, r5
 80190c0:	42bb      	cmp	r3, r7
 80190c2:	db07      	blt.n	80190d4 <__s2b+0x6a>
 80190c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190c8:	0052      	lsls	r2, r2, #1
 80190ca:	3101      	adds	r1, #1
 80190cc:	e7d9      	b.n	8019082 <__s2b+0x18>
 80190ce:	340a      	adds	r4, #10
 80190d0:	2509      	movs	r5, #9
 80190d2:	e7f3      	b.n	80190bc <__s2b+0x52>
 80190d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80190d8:	4601      	mov	r1, r0
 80190da:	3b30      	subs	r3, #48	; 0x30
 80190dc:	220a      	movs	r2, #10
 80190de:	4630      	mov	r0, r6
 80190e0:	f7ff ff88 	bl	8018ff4 <__multadd>
 80190e4:	e7eb      	b.n	80190be <__s2b+0x54>

080190e6 <__hi0bits>:
 80190e6:	0c02      	lsrs	r2, r0, #16
 80190e8:	0412      	lsls	r2, r2, #16
 80190ea:	4603      	mov	r3, r0
 80190ec:	b9b2      	cbnz	r2, 801911c <__hi0bits+0x36>
 80190ee:	0403      	lsls	r3, r0, #16
 80190f0:	2010      	movs	r0, #16
 80190f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80190f6:	bf04      	itt	eq
 80190f8:	021b      	lsleq	r3, r3, #8
 80190fa:	3008      	addeq	r0, #8
 80190fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019100:	bf04      	itt	eq
 8019102:	011b      	lsleq	r3, r3, #4
 8019104:	3004      	addeq	r0, #4
 8019106:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801910a:	bf04      	itt	eq
 801910c:	009b      	lsleq	r3, r3, #2
 801910e:	3002      	addeq	r0, #2
 8019110:	2b00      	cmp	r3, #0
 8019112:	db06      	blt.n	8019122 <__hi0bits+0x3c>
 8019114:	005b      	lsls	r3, r3, #1
 8019116:	d503      	bpl.n	8019120 <__hi0bits+0x3a>
 8019118:	3001      	adds	r0, #1
 801911a:	4770      	bx	lr
 801911c:	2000      	movs	r0, #0
 801911e:	e7e8      	b.n	80190f2 <__hi0bits+0xc>
 8019120:	2020      	movs	r0, #32
 8019122:	4770      	bx	lr

08019124 <__lo0bits>:
 8019124:	6803      	ldr	r3, [r0, #0]
 8019126:	f013 0207 	ands.w	r2, r3, #7
 801912a:	4601      	mov	r1, r0
 801912c:	d00b      	beq.n	8019146 <__lo0bits+0x22>
 801912e:	07da      	lsls	r2, r3, #31
 8019130:	d423      	bmi.n	801917a <__lo0bits+0x56>
 8019132:	0798      	lsls	r0, r3, #30
 8019134:	bf49      	itett	mi
 8019136:	085b      	lsrmi	r3, r3, #1
 8019138:	089b      	lsrpl	r3, r3, #2
 801913a:	2001      	movmi	r0, #1
 801913c:	600b      	strmi	r3, [r1, #0]
 801913e:	bf5c      	itt	pl
 8019140:	600b      	strpl	r3, [r1, #0]
 8019142:	2002      	movpl	r0, #2
 8019144:	4770      	bx	lr
 8019146:	b298      	uxth	r0, r3
 8019148:	b9a8      	cbnz	r0, 8019176 <__lo0bits+0x52>
 801914a:	0c1b      	lsrs	r3, r3, #16
 801914c:	2010      	movs	r0, #16
 801914e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019152:	bf04      	itt	eq
 8019154:	0a1b      	lsreq	r3, r3, #8
 8019156:	3008      	addeq	r0, #8
 8019158:	071a      	lsls	r2, r3, #28
 801915a:	bf04      	itt	eq
 801915c:	091b      	lsreq	r3, r3, #4
 801915e:	3004      	addeq	r0, #4
 8019160:	079a      	lsls	r2, r3, #30
 8019162:	bf04      	itt	eq
 8019164:	089b      	lsreq	r3, r3, #2
 8019166:	3002      	addeq	r0, #2
 8019168:	07da      	lsls	r2, r3, #31
 801916a:	d402      	bmi.n	8019172 <__lo0bits+0x4e>
 801916c:	085b      	lsrs	r3, r3, #1
 801916e:	d006      	beq.n	801917e <__lo0bits+0x5a>
 8019170:	3001      	adds	r0, #1
 8019172:	600b      	str	r3, [r1, #0]
 8019174:	4770      	bx	lr
 8019176:	4610      	mov	r0, r2
 8019178:	e7e9      	b.n	801914e <__lo0bits+0x2a>
 801917a:	2000      	movs	r0, #0
 801917c:	4770      	bx	lr
 801917e:	2020      	movs	r0, #32
 8019180:	4770      	bx	lr

08019182 <__i2b>:
 8019182:	b510      	push	{r4, lr}
 8019184:	460c      	mov	r4, r1
 8019186:	2101      	movs	r1, #1
 8019188:	f7ff fee9 	bl	8018f5e <_Balloc>
 801918c:	2201      	movs	r2, #1
 801918e:	6144      	str	r4, [r0, #20]
 8019190:	6102      	str	r2, [r0, #16]
 8019192:	bd10      	pop	{r4, pc}

08019194 <__multiply>:
 8019194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019198:	4614      	mov	r4, r2
 801919a:	690a      	ldr	r2, [r1, #16]
 801919c:	6923      	ldr	r3, [r4, #16]
 801919e:	429a      	cmp	r2, r3
 80191a0:	bfb8      	it	lt
 80191a2:	460b      	movlt	r3, r1
 80191a4:	4688      	mov	r8, r1
 80191a6:	bfbc      	itt	lt
 80191a8:	46a0      	movlt	r8, r4
 80191aa:	461c      	movlt	r4, r3
 80191ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80191b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80191b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80191b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80191bc:	eb07 0609 	add.w	r6, r7, r9
 80191c0:	42b3      	cmp	r3, r6
 80191c2:	bfb8      	it	lt
 80191c4:	3101      	addlt	r1, #1
 80191c6:	f7ff feca 	bl	8018f5e <_Balloc>
 80191ca:	f100 0514 	add.w	r5, r0, #20
 80191ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80191d2:	462b      	mov	r3, r5
 80191d4:	2200      	movs	r2, #0
 80191d6:	4573      	cmp	r3, lr
 80191d8:	d316      	bcc.n	8019208 <__multiply+0x74>
 80191da:	f104 0214 	add.w	r2, r4, #20
 80191de:	f108 0114 	add.w	r1, r8, #20
 80191e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80191e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80191ea:	9300      	str	r3, [sp, #0]
 80191ec:	9b00      	ldr	r3, [sp, #0]
 80191ee:	9201      	str	r2, [sp, #4]
 80191f0:	4293      	cmp	r3, r2
 80191f2:	d80c      	bhi.n	801920e <__multiply+0x7a>
 80191f4:	2e00      	cmp	r6, #0
 80191f6:	dd03      	ble.n	8019200 <__multiply+0x6c>
 80191f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d05d      	beq.n	80192bc <__multiply+0x128>
 8019200:	6106      	str	r6, [r0, #16]
 8019202:	b003      	add	sp, #12
 8019204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019208:	f843 2b04 	str.w	r2, [r3], #4
 801920c:	e7e3      	b.n	80191d6 <__multiply+0x42>
 801920e:	f8b2 b000 	ldrh.w	fp, [r2]
 8019212:	f1bb 0f00 	cmp.w	fp, #0
 8019216:	d023      	beq.n	8019260 <__multiply+0xcc>
 8019218:	4689      	mov	r9, r1
 801921a:	46ac      	mov	ip, r5
 801921c:	f04f 0800 	mov.w	r8, #0
 8019220:	f859 4b04 	ldr.w	r4, [r9], #4
 8019224:	f8dc a000 	ldr.w	sl, [ip]
 8019228:	b2a3      	uxth	r3, r4
 801922a:	fa1f fa8a 	uxth.w	sl, sl
 801922e:	fb0b a303 	mla	r3, fp, r3, sl
 8019232:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019236:	f8dc 4000 	ldr.w	r4, [ip]
 801923a:	4443      	add	r3, r8
 801923c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019240:	fb0b 840a 	mla	r4, fp, sl, r8
 8019244:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019248:	46e2      	mov	sl, ip
 801924a:	b29b      	uxth	r3, r3
 801924c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019250:	454f      	cmp	r7, r9
 8019252:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019256:	f84a 3b04 	str.w	r3, [sl], #4
 801925a:	d82b      	bhi.n	80192b4 <__multiply+0x120>
 801925c:	f8cc 8004 	str.w	r8, [ip, #4]
 8019260:	9b01      	ldr	r3, [sp, #4]
 8019262:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019266:	3204      	adds	r2, #4
 8019268:	f1ba 0f00 	cmp.w	sl, #0
 801926c:	d020      	beq.n	80192b0 <__multiply+0x11c>
 801926e:	682b      	ldr	r3, [r5, #0]
 8019270:	4689      	mov	r9, r1
 8019272:	46a8      	mov	r8, r5
 8019274:	f04f 0b00 	mov.w	fp, #0
 8019278:	f8b9 c000 	ldrh.w	ip, [r9]
 801927c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019280:	fb0a 440c 	mla	r4, sl, ip, r4
 8019284:	445c      	add	r4, fp
 8019286:	46c4      	mov	ip, r8
 8019288:	b29b      	uxth	r3, r3
 801928a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801928e:	f84c 3b04 	str.w	r3, [ip], #4
 8019292:	f859 3b04 	ldr.w	r3, [r9], #4
 8019296:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801929a:	0c1b      	lsrs	r3, r3, #16
 801929c:	fb0a b303 	mla	r3, sl, r3, fp
 80192a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80192a4:	454f      	cmp	r7, r9
 80192a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80192aa:	d805      	bhi.n	80192b8 <__multiply+0x124>
 80192ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80192b0:	3504      	adds	r5, #4
 80192b2:	e79b      	b.n	80191ec <__multiply+0x58>
 80192b4:	46d4      	mov	ip, sl
 80192b6:	e7b3      	b.n	8019220 <__multiply+0x8c>
 80192b8:	46e0      	mov	r8, ip
 80192ba:	e7dd      	b.n	8019278 <__multiply+0xe4>
 80192bc:	3e01      	subs	r6, #1
 80192be:	e799      	b.n	80191f4 <__multiply+0x60>

080192c0 <__pow5mult>:
 80192c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192c4:	4615      	mov	r5, r2
 80192c6:	f012 0203 	ands.w	r2, r2, #3
 80192ca:	4606      	mov	r6, r0
 80192cc:	460f      	mov	r7, r1
 80192ce:	d007      	beq.n	80192e0 <__pow5mult+0x20>
 80192d0:	3a01      	subs	r2, #1
 80192d2:	4c21      	ldr	r4, [pc, #132]	; (8019358 <__pow5mult+0x98>)
 80192d4:	2300      	movs	r3, #0
 80192d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80192da:	f7ff fe8b 	bl	8018ff4 <__multadd>
 80192de:	4607      	mov	r7, r0
 80192e0:	10ad      	asrs	r5, r5, #2
 80192e2:	d035      	beq.n	8019350 <__pow5mult+0x90>
 80192e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80192e6:	b93c      	cbnz	r4, 80192f8 <__pow5mult+0x38>
 80192e8:	2010      	movs	r0, #16
 80192ea:	f7fc fde5 	bl	8015eb8 <malloc>
 80192ee:	6270      	str	r0, [r6, #36]	; 0x24
 80192f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80192f4:	6004      	str	r4, [r0, #0]
 80192f6:	60c4      	str	r4, [r0, #12]
 80192f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80192fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019300:	b94c      	cbnz	r4, 8019316 <__pow5mult+0x56>
 8019302:	f240 2171 	movw	r1, #625	; 0x271
 8019306:	4630      	mov	r0, r6
 8019308:	f7ff ff3b 	bl	8019182 <__i2b>
 801930c:	2300      	movs	r3, #0
 801930e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019312:	4604      	mov	r4, r0
 8019314:	6003      	str	r3, [r0, #0]
 8019316:	f04f 0800 	mov.w	r8, #0
 801931a:	07eb      	lsls	r3, r5, #31
 801931c:	d50a      	bpl.n	8019334 <__pow5mult+0x74>
 801931e:	4639      	mov	r1, r7
 8019320:	4622      	mov	r2, r4
 8019322:	4630      	mov	r0, r6
 8019324:	f7ff ff36 	bl	8019194 <__multiply>
 8019328:	4639      	mov	r1, r7
 801932a:	4681      	mov	r9, r0
 801932c:	4630      	mov	r0, r6
 801932e:	f7ff fe4a 	bl	8018fc6 <_Bfree>
 8019332:	464f      	mov	r7, r9
 8019334:	106d      	asrs	r5, r5, #1
 8019336:	d00b      	beq.n	8019350 <__pow5mult+0x90>
 8019338:	6820      	ldr	r0, [r4, #0]
 801933a:	b938      	cbnz	r0, 801934c <__pow5mult+0x8c>
 801933c:	4622      	mov	r2, r4
 801933e:	4621      	mov	r1, r4
 8019340:	4630      	mov	r0, r6
 8019342:	f7ff ff27 	bl	8019194 <__multiply>
 8019346:	6020      	str	r0, [r4, #0]
 8019348:	f8c0 8000 	str.w	r8, [r0]
 801934c:	4604      	mov	r4, r0
 801934e:	e7e4      	b.n	801931a <__pow5mult+0x5a>
 8019350:	4638      	mov	r0, r7
 8019352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019356:	bf00      	nop
 8019358:	0801aa98 	.word	0x0801aa98

0801935c <__lshift>:
 801935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019360:	460c      	mov	r4, r1
 8019362:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019366:	6923      	ldr	r3, [r4, #16]
 8019368:	6849      	ldr	r1, [r1, #4]
 801936a:	eb0a 0903 	add.w	r9, sl, r3
 801936e:	68a3      	ldr	r3, [r4, #8]
 8019370:	4607      	mov	r7, r0
 8019372:	4616      	mov	r6, r2
 8019374:	f109 0501 	add.w	r5, r9, #1
 8019378:	42ab      	cmp	r3, r5
 801937a:	db32      	blt.n	80193e2 <__lshift+0x86>
 801937c:	4638      	mov	r0, r7
 801937e:	f7ff fdee 	bl	8018f5e <_Balloc>
 8019382:	2300      	movs	r3, #0
 8019384:	4680      	mov	r8, r0
 8019386:	f100 0114 	add.w	r1, r0, #20
 801938a:	461a      	mov	r2, r3
 801938c:	4553      	cmp	r3, sl
 801938e:	db2b      	blt.n	80193e8 <__lshift+0x8c>
 8019390:	6920      	ldr	r0, [r4, #16]
 8019392:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019396:	f104 0314 	add.w	r3, r4, #20
 801939a:	f016 021f 	ands.w	r2, r6, #31
 801939e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80193a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80193a6:	d025      	beq.n	80193f4 <__lshift+0x98>
 80193a8:	f1c2 0e20 	rsb	lr, r2, #32
 80193ac:	2000      	movs	r0, #0
 80193ae:	681e      	ldr	r6, [r3, #0]
 80193b0:	468a      	mov	sl, r1
 80193b2:	4096      	lsls	r6, r2
 80193b4:	4330      	orrs	r0, r6
 80193b6:	f84a 0b04 	str.w	r0, [sl], #4
 80193ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80193be:	459c      	cmp	ip, r3
 80193c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80193c4:	d814      	bhi.n	80193f0 <__lshift+0x94>
 80193c6:	6048      	str	r0, [r1, #4]
 80193c8:	b108      	cbz	r0, 80193ce <__lshift+0x72>
 80193ca:	f109 0502 	add.w	r5, r9, #2
 80193ce:	3d01      	subs	r5, #1
 80193d0:	4638      	mov	r0, r7
 80193d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80193d6:	4621      	mov	r1, r4
 80193d8:	f7ff fdf5 	bl	8018fc6 <_Bfree>
 80193dc:	4640      	mov	r0, r8
 80193de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193e2:	3101      	adds	r1, #1
 80193e4:	005b      	lsls	r3, r3, #1
 80193e6:	e7c7      	b.n	8019378 <__lshift+0x1c>
 80193e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80193ec:	3301      	adds	r3, #1
 80193ee:	e7cd      	b.n	801938c <__lshift+0x30>
 80193f0:	4651      	mov	r1, sl
 80193f2:	e7dc      	b.n	80193ae <__lshift+0x52>
 80193f4:	3904      	subs	r1, #4
 80193f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80193fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80193fe:	459c      	cmp	ip, r3
 8019400:	d8f9      	bhi.n	80193f6 <__lshift+0x9a>
 8019402:	e7e4      	b.n	80193ce <__lshift+0x72>

08019404 <__mcmp>:
 8019404:	6903      	ldr	r3, [r0, #16]
 8019406:	690a      	ldr	r2, [r1, #16]
 8019408:	1a9b      	subs	r3, r3, r2
 801940a:	b530      	push	{r4, r5, lr}
 801940c:	d10c      	bne.n	8019428 <__mcmp+0x24>
 801940e:	0092      	lsls	r2, r2, #2
 8019410:	3014      	adds	r0, #20
 8019412:	3114      	adds	r1, #20
 8019414:	1884      	adds	r4, r0, r2
 8019416:	4411      	add	r1, r2
 8019418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801941c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019420:	4295      	cmp	r5, r2
 8019422:	d003      	beq.n	801942c <__mcmp+0x28>
 8019424:	d305      	bcc.n	8019432 <__mcmp+0x2e>
 8019426:	2301      	movs	r3, #1
 8019428:	4618      	mov	r0, r3
 801942a:	bd30      	pop	{r4, r5, pc}
 801942c:	42a0      	cmp	r0, r4
 801942e:	d3f3      	bcc.n	8019418 <__mcmp+0x14>
 8019430:	e7fa      	b.n	8019428 <__mcmp+0x24>
 8019432:	f04f 33ff 	mov.w	r3, #4294967295
 8019436:	e7f7      	b.n	8019428 <__mcmp+0x24>

08019438 <__mdiff>:
 8019438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801943c:	460d      	mov	r5, r1
 801943e:	4607      	mov	r7, r0
 8019440:	4611      	mov	r1, r2
 8019442:	4628      	mov	r0, r5
 8019444:	4614      	mov	r4, r2
 8019446:	f7ff ffdd 	bl	8019404 <__mcmp>
 801944a:	1e06      	subs	r6, r0, #0
 801944c:	d108      	bne.n	8019460 <__mdiff+0x28>
 801944e:	4631      	mov	r1, r6
 8019450:	4638      	mov	r0, r7
 8019452:	f7ff fd84 	bl	8018f5e <_Balloc>
 8019456:	2301      	movs	r3, #1
 8019458:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801945c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019460:	bfa4      	itt	ge
 8019462:	4623      	movge	r3, r4
 8019464:	462c      	movge	r4, r5
 8019466:	4638      	mov	r0, r7
 8019468:	6861      	ldr	r1, [r4, #4]
 801946a:	bfa6      	itte	ge
 801946c:	461d      	movge	r5, r3
 801946e:	2600      	movge	r6, #0
 8019470:	2601      	movlt	r6, #1
 8019472:	f7ff fd74 	bl	8018f5e <_Balloc>
 8019476:	692b      	ldr	r3, [r5, #16]
 8019478:	60c6      	str	r6, [r0, #12]
 801947a:	6926      	ldr	r6, [r4, #16]
 801947c:	f105 0914 	add.w	r9, r5, #20
 8019480:	f104 0214 	add.w	r2, r4, #20
 8019484:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019488:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801948c:	f100 0514 	add.w	r5, r0, #20
 8019490:	f04f 0e00 	mov.w	lr, #0
 8019494:	f852 ab04 	ldr.w	sl, [r2], #4
 8019498:	f859 4b04 	ldr.w	r4, [r9], #4
 801949c:	fa1e f18a 	uxtah	r1, lr, sl
 80194a0:	b2a3      	uxth	r3, r4
 80194a2:	1ac9      	subs	r1, r1, r3
 80194a4:	0c23      	lsrs	r3, r4, #16
 80194a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80194aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80194ae:	b289      	uxth	r1, r1
 80194b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80194b4:	45c8      	cmp	r8, r9
 80194b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80194ba:	4694      	mov	ip, r2
 80194bc:	f845 3b04 	str.w	r3, [r5], #4
 80194c0:	d8e8      	bhi.n	8019494 <__mdiff+0x5c>
 80194c2:	45bc      	cmp	ip, r7
 80194c4:	d304      	bcc.n	80194d0 <__mdiff+0x98>
 80194c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80194ca:	b183      	cbz	r3, 80194ee <__mdiff+0xb6>
 80194cc:	6106      	str	r6, [r0, #16]
 80194ce:	e7c5      	b.n	801945c <__mdiff+0x24>
 80194d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80194d4:	fa1e f381 	uxtah	r3, lr, r1
 80194d8:	141a      	asrs	r2, r3, #16
 80194da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80194de:	b29b      	uxth	r3, r3
 80194e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80194e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80194e8:	f845 3b04 	str.w	r3, [r5], #4
 80194ec:	e7e9      	b.n	80194c2 <__mdiff+0x8a>
 80194ee:	3e01      	subs	r6, #1
 80194f0:	e7e9      	b.n	80194c6 <__mdiff+0x8e>
	...

080194f4 <__ulp>:
 80194f4:	4b12      	ldr	r3, [pc, #72]	; (8019540 <__ulp+0x4c>)
 80194f6:	ee10 2a90 	vmov	r2, s1
 80194fa:	401a      	ands	r2, r3
 80194fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019500:	2b00      	cmp	r3, #0
 8019502:	dd04      	ble.n	801950e <__ulp+0x1a>
 8019504:	2000      	movs	r0, #0
 8019506:	4619      	mov	r1, r3
 8019508:	ec41 0b10 	vmov	d0, r0, r1
 801950c:	4770      	bx	lr
 801950e:	425b      	negs	r3, r3
 8019510:	151b      	asrs	r3, r3, #20
 8019512:	2b13      	cmp	r3, #19
 8019514:	f04f 0000 	mov.w	r0, #0
 8019518:	f04f 0100 	mov.w	r1, #0
 801951c:	dc04      	bgt.n	8019528 <__ulp+0x34>
 801951e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019522:	fa42 f103 	asr.w	r1, r2, r3
 8019526:	e7ef      	b.n	8019508 <__ulp+0x14>
 8019528:	3b14      	subs	r3, #20
 801952a:	2b1e      	cmp	r3, #30
 801952c:	f04f 0201 	mov.w	r2, #1
 8019530:	bfda      	itte	le
 8019532:	f1c3 031f 	rsble	r3, r3, #31
 8019536:	fa02 f303 	lslle.w	r3, r2, r3
 801953a:	4613      	movgt	r3, r2
 801953c:	4618      	mov	r0, r3
 801953e:	e7e3      	b.n	8019508 <__ulp+0x14>
 8019540:	7ff00000 	.word	0x7ff00000

08019544 <__b2d>:
 8019544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019546:	6905      	ldr	r5, [r0, #16]
 8019548:	f100 0714 	add.w	r7, r0, #20
 801954c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019550:	1f2e      	subs	r6, r5, #4
 8019552:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019556:	4620      	mov	r0, r4
 8019558:	f7ff fdc5 	bl	80190e6 <__hi0bits>
 801955c:	f1c0 0320 	rsb	r3, r0, #32
 8019560:	280a      	cmp	r0, #10
 8019562:	600b      	str	r3, [r1, #0]
 8019564:	f8df c074 	ldr.w	ip, [pc, #116]	; 80195dc <__b2d+0x98>
 8019568:	dc14      	bgt.n	8019594 <__b2d+0x50>
 801956a:	f1c0 0e0b 	rsb	lr, r0, #11
 801956e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019572:	42b7      	cmp	r7, r6
 8019574:	ea41 030c 	orr.w	r3, r1, ip
 8019578:	bf34      	ite	cc
 801957a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801957e:	2100      	movcs	r1, #0
 8019580:	3015      	adds	r0, #21
 8019582:	fa04 f000 	lsl.w	r0, r4, r0
 8019586:	fa21 f10e 	lsr.w	r1, r1, lr
 801958a:	ea40 0201 	orr.w	r2, r0, r1
 801958e:	ec43 2b10 	vmov	d0, r2, r3
 8019592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019594:	42b7      	cmp	r7, r6
 8019596:	bf3a      	itte	cc
 8019598:	f1a5 0608 	subcc.w	r6, r5, #8
 801959c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80195a0:	2100      	movcs	r1, #0
 80195a2:	380b      	subs	r0, #11
 80195a4:	d015      	beq.n	80195d2 <__b2d+0x8e>
 80195a6:	4084      	lsls	r4, r0
 80195a8:	f1c0 0520 	rsb	r5, r0, #32
 80195ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80195b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80195b4:	42be      	cmp	r6, r7
 80195b6:	fa21 fc05 	lsr.w	ip, r1, r5
 80195ba:	ea44 030c 	orr.w	r3, r4, ip
 80195be:	bf8c      	ite	hi
 80195c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80195c4:	2400      	movls	r4, #0
 80195c6:	fa01 f000 	lsl.w	r0, r1, r0
 80195ca:	40ec      	lsrs	r4, r5
 80195cc:	ea40 0204 	orr.w	r2, r0, r4
 80195d0:	e7dd      	b.n	801958e <__b2d+0x4a>
 80195d2:	ea44 030c 	orr.w	r3, r4, ip
 80195d6:	460a      	mov	r2, r1
 80195d8:	e7d9      	b.n	801958e <__b2d+0x4a>
 80195da:	bf00      	nop
 80195dc:	3ff00000 	.word	0x3ff00000

080195e0 <__d2b>:
 80195e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80195e4:	460e      	mov	r6, r1
 80195e6:	2101      	movs	r1, #1
 80195e8:	ec59 8b10 	vmov	r8, r9, d0
 80195ec:	4615      	mov	r5, r2
 80195ee:	f7ff fcb6 	bl	8018f5e <_Balloc>
 80195f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80195f6:	4607      	mov	r7, r0
 80195f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80195fc:	bb34      	cbnz	r4, 801964c <__d2b+0x6c>
 80195fe:	9301      	str	r3, [sp, #4]
 8019600:	f1b8 0300 	subs.w	r3, r8, #0
 8019604:	d027      	beq.n	8019656 <__d2b+0x76>
 8019606:	a802      	add	r0, sp, #8
 8019608:	f840 3d08 	str.w	r3, [r0, #-8]!
 801960c:	f7ff fd8a 	bl	8019124 <__lo0bits>
 8019610:	9900      	ldr	r1, [sp, #0]
 8019612:	b1f0      	cbz	r0, 8019652 <__d2b+0x72>
 8019614:	9a01      	ldr	r2, [sp, #4]
 8019616:	f1c0 0320 	rsb	r3, r0, #32
 801961a:	fa02 f303 	lsl.w	r3, r2, r3
 801961e:	430b      	orrs	r3, r1
 8019620:	40c2      	lsrs	r2, r0
 8019622:	617b      	str	r3, [r7, #20]
 8019624:	9201      	str	r2, [sp, #4]
 8019626:	9b01      	ldr	r3, [sp, #4]
 8019628:	61bb      	str	r3, [r7, #24]
 801962a:	2b00      	cmp	r3, #0
 801962c:	bf14      	ite	ne
 801962e:	2102      	movne	r1, #2
 8019630:	2101      	moveq	r1, #1
 8019632:	6139      	str	r1, [r7, #16]
 8019634:	b1c4      	cbz	r4, 8019668 <__d2b+0x88>
 8019636:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801963a:	4404      	add	r4, r0
 801963c:	6034      	str	r4, [r6, #0]
 801963e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019642:	6028      	str	r0, [r5, #0]
 8019644:	4638      	mov	r0, r7
 8019646:	b003      	add	sp, #12
 8019648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801964c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019650:	e7d5      	b.n	80195fe <__d2b+0x1e>
 8019652:	6179      	str	r1, [r7, #20]
 8019654:	e7e7      	b.n	8019626 <__d2b+0x46>
 8019656:	a801      	add	r0, sp, #4
 8019658:	f7ff fd64 	bl	8019124 <__lo0bits>
 801965c:	9b01      	ldr	r3, [sp, #4]
 801965e:	617b      	str	r3, [r7, #20]
 8019660:	2101      	movs	r1, #1
 8019662:	6139      	str	r1, [r7, #16]
 8019664:	3020      	adds	r0, #32
 8019666:	e7e5      	b.n	8019634 <__d2b+0x54>
 8019668:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801966c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019670:	6030      	str	r0, [r6, #0]
 8019672:	6918      	ldr	r0, [r3, #16]
 8019674:	f7ff fd37 	bl	80190e6 <__hi0bits>
 8019678:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801967c:	e7e1      	b.n	8019642 <__d2b+0x62>

0801967e <__ratio>:
 801967e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019682:	4688      	mov	r8, r1
 8019684:	4669      	mov	r1, sp
 8019686:	4681      	mov	r9, r0
 8019688:	f7ff ff5c 	bl	8019544 <__b2d>
 801968c:	a901      	add	r1, sp, #4
 801968e:	4640      	mov	r0, r8
 8019690:	ec57 6b10 	vmov	r6, r7, d0
 8019694:	f7ff ff56 	bl	8019544 <__b2d>
 8019698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801969c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80196a0:	eba3 0c02 	sub.w	ip, r3, r2
 80196a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80196a8:	1a9b      	subs	r3, r3, r2
 80196aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80196ae:	ec5b ab10 	vmov	sl, fp, d0
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	bfce      	itee	gt
 80196b6:	463a      	movgt	r2, r7
 80196b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80196bc:	465a      	movle	r2, fp
 80196be:	4659      	mov	r1, fp
 80196c0:	463d      	mov	r5, r7
 80196c2:	bfd4      	ite	le
 80196c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80196c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80196cc:	4630      	mov	r0, r6
 80196ce:	ee10 2a10 	vmov	r2, s0
 80196d2:	460b      	mov	r3, r1
 80196d4:	4629      	mov	r1, r5
 80196d6:	f7e7 f8d1 	bl	800087c <__aeabi_ddiv>
 80196da:	ec41 0b10 	vmov	d0, r0, r1
 80196de:	b003      	add	sp, #12
 80196e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196e4 <__copybits>:
 80196e4:	3901      	subs	r1, #1
 80196e6:	b510      	push	{r4, lr}
 80196e8:	1149      	asrs	r1, r1, #5
 80196ea:	6914      	ldr	r4, [r2, #16]
 80196ec:	3101      	adds	r1, #1
 80196ee:	f102 0314 	add.w	r3, r2, #20
 80196f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80196f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80196fa:	42a3      	cmp	r3, r4
 80196fc:	4602      	mov	r2, r0
 80196fe:	d303      	bcc.n	8019708 <__copybits+0x24>
 8019700:	2300      	movs	r3, #0
 8019702:	428a      	cmp	r2, r1
 8019704:	d305      	bcc.n	8019712 <__copybits+0x2e>
 8019706:	bd10      	pop	{r4, pc}
 8019708:	f853 2b04 	ldr.w	r2, [r3], #4
 801970c:	f840 2b04 	str.w	r2, [r0], #4
 8019710:	e7f3      	b.n	80196fa <__copybits+0x16>
 8019712:	f842 3b04 	str.w	r3, [r2], #4
 8019716:	e7f4      	b.n	8019702 <__copybits+0x1e>

08019718 <__any_on>:
 8019718:	f100 0214 	add.w	r2, r0, #20
 801971c:	6900      	ldr	r0, [r0, #16]
 801971e:	114b      	asrs	r3, r1, #5
 8019720:	4298      	cmp	r0, r3
 8019722:	b510      	push	{r4, lr}
 8019724:	db11      	blt.n	801974a <__any_on+0x32>
 8019726:	dd0a      	ble.n	801973e <__any_on+0x26>
 8019728:	f011 011f 	ands.w	r1, r1, #31
 801972c:	d007      	beq.n	801973e <__any_on+0x26>
 801972e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019732:	fa24 f001 	lsr.w	r0, r4, r1
 8019736:	fa00 f101 	lsl.w	r1, r0, r1
 801973a:	428c      	cmp	r4, r1
 801973c:	d10b      	bne.n	8019756 <__any_on+0x3e>
 801973e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019742:	4293      	cmp	r3, r2
 8019744:	d803      	bhi.n	801974e <__any_on+0x36>
 8019746:	2000      	movs	r0, #0
 8019748:	bd10      	pop	{r4, pc}
 801974a:	4603      	mov	r3, r0
 801974c:	e7f7      	b.n	801973e <__any_on+0x26>
 801974e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019752:	2900      	cmp	r1, #0
 8019754:	d0f5      	beq.n	8019742 <__any_on+0x2a>
 8019756:	2001      	movs	r0, #1
 8019758:	e7f6      	b.n	8019748 <__any_on+0x30>

0801975a <_calloc_r>:
 801975a:	b538      	push	{r3, r4, r5, lr}
 801975c:	fb02 f401 	mul.w	r4, r2, r1
 8019760:	4621      	mov	r1, r4
 8019762:	f7fc fc07 	bl	8015f74 <_malloc_r>
 8019766:	4605      	mov	r5, r0
 8019768:	b118      	cbz	r0, 8019772 <_calloc_r+0x18>
 801976a:	4622      	mov	r2, r4
 801976c:	2100      	movs	r1, #0
 801976e:	f7fc fbab 	bl	8015ec8 <memset>
 8019772:	4628      	mov	r0, r5
 8019774:	bd38      	pop	{r3, r4, r5, pc}

08019776 <__ssputs_r>:
 8019776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801977a:	688e      	ldr	r6, [r1, #8]
 801977c:	429e      	cmp	r6, r3
 801977e:	4682      	mov	sl, r0
 8019780:	460c      	mov	r4, r1
 8019782:	4690      	mov	r8, r2
 8019784:	4699      	mov	r9, r3
 8019786:	d837      	bhi.n	80197f8 <__ssputs_r+0x82>
 8019788:	898a      	ldrh	r2, [r1, #12]
 801978a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801978e:	d031      	beq.n	80197f4 <__ssputs_r+0x7e>
 8019790:	6825      	ldr	r5, [r4, #0]
 8019792:	6909      	ldr	r1, [r1, #16]
 8019794:	1a6f      	subs	r7, r5, r1
 8019796:	6965      	ldr	r5, [r4, #20]
 8019798:	2302      	movs	r3, #2
 801979a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801979e:	fb95 f5f3 	sdiv	r5, r5, r3
 80197a2:	f109 0301 	add.w	r3, r9, #1
 80197a6:	443b      	add	r3, r7
 80197a8:	429d      	cmp	r5, r3
 80197aa:	bf38      	it	cc
 80197ac:	461d      	movcc	r5, r3
 80197ae:	0553      	lsls	r3, r2, #21
 80197b0:	d530      	bpl.n	8019814 <__ssputs_r+0x9e>
 80197b2:	4629      	mov	r1, r5
 80197b4:	f7fc fbde 	bl	8015f74 <_malloc_r>
 80197b8:	4606      	mov	r6, r0
 80197ba:	b950      	cbnz	r0, 80197d2 <__ssputs_r+0x5c>
 80197bc:	230c      	movs	r3, #12
 80197be:	f8ca 3000 	str.w	r3, [sl]
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	f04f 30ff 	mov.w	r0, #4294967295
 80197ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197d2:	463a      	mov	r2, r7
 80197d4:	6921      	ldr	r1, [r4, #16]
 80197d6:	f7ff fbb5 	bl	8018f44 <memcpy>
 80197da:	89a3      	ldrh	r3, [r4, #12]
 80197dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197e4:	81a3      	strh	r3, [r4, #12]
 80197e6:	6126      	str	r6, [r4, #16]
 80197e8:	6165      	str	r5, [r4, #20]
 80197ea:	443e      	add	r6, r7
 80197ec:	1bed      	subs	r5, r5, r7
 80197ee:	6026      	str	r6, [r4, #0]
 80197f0:	60a5      	str	r5, [r4, #8]
 80197f2:	464e      	mov	r6, r9
 80197f4:	454e      	cmp	r6, r9
 80197f6:	d900      	bls.n	80197fa <__ssputs_r+0x84>
 80197f8:	464e      	mov	r6, r9
 80197fa:	4632      	mov	r2, r6
 80197fc:	4641      	mov	r1, r8
 80197fe:	6820      	ldr	r0, [r4, #0]
 8019800:	f000 fd25 	bl	801a24e <memmove>
 8019804:	68a3      	ldr	r3, [r4, #8]
 8019806:	1b9b      	subs	r3, r3, r6
 8019808:	60a3      	str	r3, [r4, #8]
 801980a:	6823      	ldr	r3, [r4, #0]
 801980c:	441e      	add	r6, r3
 801980e:	6026      	str	r6, [r4, #0]
 8019810:	2000      	movs	r0, #0
 8019812:	e7dc      	b.n	80197ce <__ssputs_r+0x58>
 8019814:	462a      	mov	r2, r5
 8019816:	f000 fd33 	bl	801a280 <_realloc_r>
 801981a:	4606      	mov	r6, r0
 801981c:	2800      	cmp	r0, #0
 801981e:	d1e2      	bne.n	80197e6 <__ssputs_r+0x70>
 8019820:	6921      	ldr	r1, [r4, #16]
 8019822:	4650      	mov	r0, sl
 8019824:	f7fc fb58 	bl	8015ed8 <_free_r>
 8019828:	e7c8      	b.n	80197bc <__ssputs_r+0x46>
	...

0801982c <_svfiprintf_r>:
 801982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019830:	461d      	mov	r5, r3
 8019832:	898b      	ldrh	r3, [r1, #12]
 8019834:	061f      	lsls	r7, r3, #24
 8019836:	b09d      	sub	sp, #116	; 0x74
 8019838:	4680      	mov	r8, r0
 801983a:	460c      	mov	r4, r1
 801983c:	4616      	mov	r6, r2
 801983e:	d50f      	bpl.n	8019860 <_svfiprintf_r+0x34>
 8019840:	690b      	ldr	r3, [r1, #16]
 8019842:	b96b      	cbnz	r3, 8019860 <_svfiprintf_r+0x34>
 8019844:	2140      	movs	r1, #64	; 0x40
 8019846:	f7fc fb95 	bl	8015f74 <_malloc_r>
 801984a:	6020      	str	r0, [r4, #0]
 801984c:	6120      	str	r0, [r4, #16]
 801984e:	b928      	cbnz	r0, 801985c <_svfiprintf_r+0x30>
 8019850:	230c      	movs	r3, #12
 8019852:	f8c8 3000 	str.w	r3, [r8]
 8019856:	f04f 30ff 	mov.w	r0, #4294967295
 801985a:	e0c8      	b.n	80199ee <_svfiprintf_r+0x1c2>
 801985c:	2340      	movs	r3, #64	; 0x40
 801985e:	6163      	str	r3, [r4, #20]
 8019860:	2300      	movs	r3, #0
 8019862:	9309      	str	r3, [sp, #36]	; 0x24
 8019864:	2320      	movs	r3, #32
 8019866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801986a:	2330      	movs	r3, #48	; 0x30
 801986c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019870:	9503      	str	r5, [sp, #12]
 8019872:	f04f 0b01 	mov.w	fp, #1
 8019876:	4637      	mov	r7, r6
 8019878:	463d      	mov	r5, r7
 801987a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801987e:	b10b      	cbz	r3, 8019884 <_svfiprintf_r+0x58>
 8019880:	2b25      	cmp	r3, #37	; 0x25
 8019882:	d13e      	bne.n	8019902 <_svfiprintf_r+0xd6>
 8019884:	ebb7 0a06 	subs.w	sl, r7, r6
 8019888:	d00b      	beq.n	80198a2 <_svfiprintf_r+0x76>
 801988a:	4653      	mov	r3, sl
 801988c:	4632      	mov	r2, r6
 801988e:	4621      	mov	r1, r4
 8019890:	4640      	mov	r0, r8
 8019892:	f7ff ff70 	bl	8019776 <__ssputs_r>
 8019896:	3001      	adds	r0, #1
 8019898:	f000 80a4 	beq.w	80199e4 <_svfiprintf_r+0x1b8>
 801989c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801989e:	4453      	add	r3, sl
 80198a0:	9309      	str	r3, [sp, #36]	; 0x24
 80198a2:	783b      	ldrb	r3, [r7, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	f000 809d 	beq.w	80199e4 <_svfiprintf_r+0x1b8>
 80198aa:	2300      	movs	r3, #0
 80198ac:	f04f 32ff 	mov.w	r2, #4294967295
 80198b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198b4:	9304      	str	r3, [sp, #16]
 80198b6:	9307      	str	r3, [sp, #28]
 80198b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198bc:	931a      	str	r3, [sp, #104]	; 0x68
 80198be:	462f      	mov	r7, r5
 80198c0:	2205      	movs	r2, #5
 80198c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80198c6:	4850      	ldr	r0, [pc, #320]	; (8019a08 <_svfiprintf_r+0x1dc>)
 80198c8:	f7e6 fca2 	bl	8000210 <memchr>
 80198cc:	9b04      	ldr	r3, [sp, #16]
 80198ce:	b9d0      	cbnz	r0, 8019906 <_svfiprintf_r+0xda>
 80198d0:	06d9      	lsls	r1, r3, #27
 80198d2:	bf44      	itt	mi
 80198d4:	2220      	movmi	r2, #32
 80198d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198da:	071a      	lsls	r2, r3, #28
 80198dc:	bf44      	itt	mi
 80198de:	222b      	movmi	r2, #43	; 0x2b
 80198e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198e4:	782a      	ldrb	r2, [r5, #0]
 80198e6:	2a2a      	cmp	r2, #42	; 0x2a
 80198e8:	d015      	beq.n	8019916 <_svfiprintf_r+0xea>
 80198ea:	9a07      	ldr	r2, [sp, #28]
 80198ec:	462f      	mov	r7, r5
 80198ee:	2000      	movs	r0, #0
 80198f0:	250a      	movs	r5, #10
 80198f2:	4639      	mov	r1, r7
 80198f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198f8:	3b30      	subs	r3, #48	; 0x30
 80198fa:	2b09      	cmp	r3, #9
 80198fc:	d94d      	bls.n	801999a <_svfiprintf_r+0x16e>
 80198fe:	b1b8      	cbz	r0, 8019930 <_svfiprintf_r+0x104>
 8019900:	e00f      	b.n	8019922 <_svfiprintf_r+0xf6>
 8019902:	462f      	mov	r7, r5
 8019904:	e7b8      	b.n	8019878 <_svfiprintf_r+0x4c>
 8019906:	4a40      	ldr	r2, [pc, #256]	; (8019a08 <_svfiprintf_r+0x1dc>)
 8019908:	1a80      	subs	r0, r0, r2
 801990a:	fa0b f000 	lsl.w	r0, fp, r0
 801990e:	4318      	orrs	r0, r3
 8019910:	9004      	str	r0, [sp, #16]
 8019912:	463d      	mov	r5, r7
 8019914:	e7d3      	b.n	80198be <_svfiprintf_r+0x92>
 8019916:	9a03      	ldr	r2, [sp, #12]
 8019918:	1d11      	adds	r1, r2, #4
 801991a:	6812      	ldr	r2, [r2, #0]
 801991c:	9103      	str	r1, [sp, #12]
 801991e:	2a00      	cmp	r2, #0
 8019920:	db01      	blt.n	8019926 <_svfiprintf_r+0xfa>
 8019922:	9207      	str	r2, [sp, #28]
 8019924:	e004      	b.n	8019930 <_svfiprintf_r+0x104>
 8019926:	4252      	negs	r2, r2
 8019928:	f043 0302 	orr.w	r3, r3, #2
 801992c:	9207      	str	r2, [sp, #28]
 801992e:	9304      	str	r3, [sp, #16]
 8019930:	783b      	ldrb	r3, [r7, #0]
 8019932:	2b2e      	cmp	r3, #46	; 0x2e
 8019934:	d10c      	bne.n	8019950 <_svfiprintf_r+0x124>
 8019936:	787b      	ldrb	r3, [r7, #1]
 8019938:	2b2a      	cmp	r3, #42	; 0x2a
 801993a:	d133      	bne.n	80199a4 <_svfiprintf_r+0x178>
 801993c:	9b03      	ldr	r3, [sp, #12]
 801993e:	1d1a      	adds	r2, r3, #4
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	9203      	str	r2, [sp, #12]
 8019944:	2b00      	cmp	r3, #0
 8019946:	bfb8      	it	lt
 8019948:	f04f 33ff 	movlt.w	r3, #4294967295
 801994c:	3702      	adds	r7, #2
 801994e:	9305      	str	r3, [sp, #20]
 8019950:	4d2e      	ldr	r5, [pc, #184]	; (8019a0c <_svfiprintf_r+0x1e0>)
 8019952:	7839      	ldrb	r1, [r7, #0]
 8019954:	2203      	movs	r2, #3
 8019956:	4628      	mov	r0, r5
 8019958:	f7e6 fc5a 	bl	8000210 <memchr>
 801995c:	b138      	cbz	r0, 801996e <_svfiprintf_r+0x142>
 801995e:	2340      	movs	r3, #64	; 0x40
 8019960:	1b40      	subs	r0, r0, r5
 8019962:	fa03 f000 	lsl.w	r0, r3, r0
 8019966:	9b04      	ldr	r3, [sp, #16]
 8019968:	4303      	orrs	r3, r0
 801996a:	3701      	adds	r7, #1
 801996c:	9304      	str	r3, [sp, #16]
 801996e:	7839      	ldrb	r1, [r7, #0]
 8019970:	4827      	ldr	r0, [pc, #156]	; (8019a10 <_svfiprintf_r+0x1e4>)
 8019972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019976:	2206      	movs	r2, #6
 8019978:	1c7e      	adds	r6, r7, #1
 801997a:	f7e6 fc49 	bl	8000210 <memchr>
 801997e:	2800      	cmp	r0, #0
 8019980:	d038      	beq.n	80199f4 <_svfiprintf_r+0x1c8>
 8019982:	4b24      	ldr	r3, [pc, #144]	; (8019a14 <_svfiprintf_r+0x1e8>)
 8019984:	bb13      	cbnz	r3, 80199cc <_svfiprintf_r+0x1a0>
 8019986:	9b03      	ldr	r3, [sp, #12]
 8019988:	3307      	adds	r3, #7
 801998a:	f023 0307 	bic.w	r3, r3, #7
 801998e:	3308      	adds	r3, #8
 8019990:	9303      	str	r3, [sp, #12]
 8019992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019994:	444b      	add	r3, r9
 8019996:	9309      	str	r3, [sp, #36]	; 0x24
 8019998:	e76d      	b.n	8019876 <_svfiprintf_r+0x4a>
 801999a:	fb05 3202 	mla	r2, r5, r2, r3
 801999e:	2001      	movs	r0, #1
 80199a0:	460f      	mov	r7, r1
 80199a2:	e7a6      	b.n	80198f2 <_svfiprintf_r+0xc6>
 80199a4:	2300      	movs	r3, #0
 80199a6:	3701      	adds	r7, #1
 80199a8:	9305      	str	r3, [sp, #20]
 80199aa:	4619      	mov	r1, r3
 80199ac:	250a      	movs	r5, #10
 80199ae:	4638      	mov	r0, r7
 80199b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199b4:	3a30      	subs	r2, #48	; 0x30
 80199b6:	2a09      	cmp	r2, #9
 80199b8:	d903      	bls.n	80199c2 <_svfiprintf_r+0x196>
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d0c8      	beq.n	8019950 <_svfiprintf_r+0x124>
 80199be:	9105      	str	r1, [sp, #20]
 80199c0:	e7c6      	b.n	8019950 <_svfiprintf_r+0x124>
 80199c2:	fb05 2101 	mla	r1, r5, r1, r2
 80199c6:	2301      	movs	r3, #1
 80199c8:	4607      	mov	r7, r0
 80199ca:	e7f0      	b.n	80199ae <_svfiprintf_r+0x182>
 80199cc:	ab03      	add	r3, sp, #12
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	4622      	mov	r2, r4
 80199d2:	4b11      	ldr	r3, [pc, #68]	; (8019a18 <_svfiprintf_r+0x1ec>)
 80199d4:	a904      	add	r1, sp, #16
 80199d6:	4640      	mov	r0, r8
 80199d8:	f7fc fbba 	bl	8016150 <_printf_float>
 80199dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80199e0:	4681      	mov	r9, r0
 80199e2:	d1d6      	bne.n	8019992 <_svfiprintf_r+0x166>
 80199e4:	89a3      	ldrh	r3, [r4, #12]
 80199e6:	065b      	lsls	r3, r3, #25
 80199e8:	f53f af35 	bmi.w	8019856 <_svfiprintf_r+0x2a>
 80199ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199ee:	b01d      	add	sp, #116	; 0x74
 80199f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f4:	ab03      	add	r3, sp, #12
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	4622      	mov	r2, r4
 80199fa:	4b07      	ldr	r3, [pc, #28]	; (8019a18 <_svfiprintf_r+0x1ec>)
 80199fc:	a904      	add	r1, sp, #16
 80199fe:	4640      	mov	r0, r8
 8019a00:	f7fc fe5c 	bl	80166bc <_printf_i>
 8019a04:	e7ea      	b.n	80199dc <_svfiprintf_r+0x1b0>
 8019a06:	bf00      	nop
 8019a08:	0801aaa4 	.word	0x0801aaa4
 8019a0c:	0801aaaa 	.word	0x0801aaaa
 8019a10:	0801aaae 	.word	0x0801aaae
 8019a14:	08016151 	.word	0x08016151
 8019a18:	08019777 	.word	0x08019777

08019a1c <_sungetc_r>:
 8019a1c:	b538      	push	{r3, r4, r5, lr}
 8019a1e:	1c4b      	adds	r3, r1, #1
 8019a20:	4614      	mov	r4, r2
 8019a22:	d103      	bne.n	8019a2c <_sungetc_r+0x10>
 8019a24:	f04f 35ff 	mov.w	r5, #4294967295
 8019a28:	4628      	mov	r0, r5
 8019a2a:	bd38      	pop	{r3, r4, r5, pc}
 8019a2c:	8993      	ldrh	r3, [r2, #12]
 8019a2e:	f023 0320 	bic.w	r3, r3, #32
 8019a32:	8193      	strh	r3, [r2, #12]
 8019a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a36:	6852      	ldr	r2, [r2, #4]
 8019a38:	b2cd      	uxtb	r5, r1
 8019a3a:	b18b      	cbz	r3, 8019a60 <_sungetc_r+0x44>
 8019a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	dd08      	ble.n	8019a54 <_sungetc_r+0x38>
 8019a42:	6823      	ldr	r3, [r4, #0]
 8019a44:	1e5a      	subs	r2, r3, #1
 8019a46:	6022      	str	r2, [r4, #0]
 8019a48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019a4c:	6863      	ldr	r3, [r4, #4]
 8019a4e:	3301      	adds	r3, #1
 8019a50:	6063      	str	r3, [r4, #4]
 8019a52:	e7e9      	b.n	8019a28 <_sungetc_r+0xc>
 8019a54:	4621      	mov	r1, r4
 8019a56:	f000 fbb3 	bl	801a1c0 <__submore>
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	d0f1      	beq.n	8019a42 <_sungetc_r+0x26>
 8019a5e:	e7e1      	b.n	8019a24 <_sungetc_r+0x8>
 8019a60:	6921      	ldr	r1, [r4, #16]
 8019a62:	6823      	ldr	r3, [r4, #0]
 8019a64:	b151      	cbz	r1, 8019a7c <_sungetc_r+0x60>
 8019a66:	4299      	cmp	r1, r3
 8019a68:	d208      	bcs.n	8019a7c <_sungetc_r+0x60>
 8019a6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019a6e:	42a9      	cmp	r1, r5
 8019a70:	d104      	bne.n	8019a7c <_sungetc_r+0x60>
 8019a72:	3b01      	subs	r3, #1
 8019a74:	3201      	adds	r2, #1
 8019a76:	6023      	str	r3, [r4, #0]
 8019a78:	6062      	str	r2, [r4, #4]
 8019a7a:	e7d5      	b.n	8019a28 <_sungetc_r+0xc>
 8019a7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a84:	6363      	str	r3, [r4, #52]	; 0x34
 8019a86:	2303      	movs	r3, #3
 8019a88:	63a3      	str	r3, [r4, #56]	; 0x38
 8019a8a:	4623      	mov	r3, r4
 8019a8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019a90:	6023      	str	r3, [r4, #0]
 8019a92:	2301      	movs	r3, #1
 8019a94:	e7dc      	b.n	8019a50 <_sungetc_r+0x34>

08019a96 <__ssrefill_r>:
 8019a96:	b510      	push	{r4, lr}
 8019a98:	460c      	mov	r4, r1
 8019a9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019a9c:	b169      	cbz	r1, 8019aba <__ssrefill_r+0x24>
 8019a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019aa2:	4299      	cmp	r1, r3
 8019aa4:	d001      	beq.n	8019aaa <__ssrefill_r+0x14>
 8019aa6:	f7fc fa17 	bl	8015ed8 <_free_r>
 8019aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019aac:	6063      	str	r3, [r4, #4]
 8019aae:	2000      	movs	r0, #0
 8019ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8019ab2:	b113      	cbz	r3, 8019aba <__ssrefill_r+0x24>
 8019ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019ab6:	6023      	str	r3, [r4, #0]
 8019ab8:	bd10      	pop	{r4, pc}
 8019aba:	6923      	ldr	r3, [r4, #16]
 8019abc:	6023      	str	r3, [r4, #0]
 8019abe:	2300      	movs	r3, #0
 8019ac0:	6063      	str	r3, [r4, #4]
 8019ac2:	89a3      	ldrh	r3, [r4, #12]
 8019ac4:	f043 0320 	orr.w	r3, r3, #32
 8019ac8:	81a3      	strh	r3, [r4, #12]
 8019aca:	f04f 30ff 	mov.w	r0, #4294967295
 8019ace:	e7f3      	b.n	8019ab8 <__ssrefill_r+0x22>

08019ad0 <__ssvfiscanf_r>:
 8019ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019ad8:	460c      	mov	r4, r1
 8019ada:	2100      	movs	r1, #0
 8019adc:	9144      	str	r1, [sp, #272]	; 0x110
 8019ade:	9145      	str	r1, [sp, #276]	; 0x114
 8019ae0:	499f      	ldr	r1, [pc, #636]	; (8019d60 <__ssvfiscanf_r+0x290>)
 8019ae2:	91a0      	str	r1, [sp, #640]	; 0x280
 8019ae4:	f10d 0804 	add.w	r8, sp, #4
 8019ae8:	499e      	ldr	r1, [pc, #632]	; (8019d64 <__ssvfiscanf_r+0x294>)
 8019aea:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019d68 <__ssvfiscanf_r+0x298>
 8019aee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019af2:	4606      	mov	r6, r0
 8019af4:	4692      	mov	sl, r2
 8019af6:	91a1      	str	r1, [sp, #644]	; 0x284
 8019af8:	9300      	str	r3, [sp, #0]
 8019afa:	270a      	movs	r7, #10
 8019afc:	f89a 3000 	ldrb.w	r3, [sl]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	f000 812a 	beq.w	8019d5a <__ssvfiscanf_r+0x28a>
 8019b06:	4655      	mov	r5, sl
 8019b08:	f7ff f9ec 	bl	8018ee4 <__locale_ctype_ptr>
 8019b0c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019b10:	4458      	add	r0, fp
 8019b12:	7843      	ldrb	r3, [r0, #1]
 8019b14:	f013 0308 	ands.w	r3, r3, #8
 8019b18:	d01c      	beq.n	8019b54 <__ssvfiscanf_r+0x84>
 8019b1a:	6863      	ldr	r3, [r4, #4]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	dd12      	ble.n	8019b46 <__ssvfiscanf_r+0x76>
 8019b20:	f7ff f9e0 	bl	8018ee4 <__locale_ctype_ptr>
 8019b24:	6823      	ldr	r3, [r4, #0]
 8019b26:	781a      	ldrb	r2, [r3, #0]
 8019b28:	4410      	add	r0, r2
 8019b2a:	7842      	ldrb	r2, [r0, #1]
 8019b2c:	0712      	lsls	r2, r2, #28
 8019b2e:	d401      	bmi.n	8019b34 <__ssvfiscanf_r+0x64>
 8019b30:	46aa      	mov	sl, r5
 8019b32:	e7e3      	b.n	8019afc <__ssvfiscanf_r+0x2c>
 8019b34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019b36:	3201      	adds	r2, #1
 8019b38:	9245      	str	r2, [sp, #276]	; 0x114
 8019b3a:	6862      	ldr	r2, [r4, #4]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	3a01      	subs	r2, #1
 8019b40:	6062      	str	r2, [r4, #4]
 8019b42:	6023      	str	r3, [r4, #0]
 8019b44:	e7e9      	b.n	8019b1a <__ssvfiscanf_r+0x4a>
 8019b46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b48:	4621      	mov	r1, r4
 8019b4a:	4630      	mov	r0, r6
 8019b4c:	4798      	blx	r3
 8019b4e:	2800      	cmp	r0, #0
 8019b50:	d0e6      	beq.n	8019b20 <__ssvfiscanf_r+0x50>
 8019b52:	e7ed      	b.n	8019b30 <__ssvfiscanf_r+0x60>
 8019b54:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019b58:	f040 8082 	bne.w	8019c60 <__ssvfiscanf_r+0x190>
 8019b5c:	9343      	str	r3, [sp, #268]	; 0x10c
 8019b5e:	9341      	str	r3, [sp, #260]	; 0x104
 8019b60:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019b64:	2b2a      	cmp	r3, #42	; 0x2a
 8019b66:	d103      	bne.n	8019b70 <__ssvfiscanf_r+0xa0>
 8019b68:	2310      	movs	r3, #16
 8019b6a:	9341      	str	r3, [sp, #260]	; 0x104
 8019b6c:	f10a 0502 	add.w	r5, sl, #2
 8019b70:	46aa      	mov	sl, r5
 8019b72:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019b76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019b7a:	2a09      	cmp	r2, #9
 8019b7c:	d922      	bls.n	8019bc4 <__ssvfiscanf_r+0xf4>
 8019b7e:	2203      	movs	r2, #3
 8019b80:	4879      	ldr	r0, [pc, #484]	; (8019d68 <__ssvfiscanf_r+0x298>)
 8019b82:	f7e6 fb45 	bl	8000210 <memchr>
 8019b86:	b138      	cbz	r0, 8019b98 <__ssvfiscanf_r+0xc8>
 8019b88:	eba0 0309 	sub.w	r3, r0, r9
 8019b8c:	2001      	movs	r0, #1
 8019b8e:	4098      	lsls	r0, r3
 8019b90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019b92:	4318      	orrs	r0, r3
 8019b94:	9041      	str	r0, [sp, #260]	; 0x104
 8019b96:	46aa      	mov	sl, r5
 8019b98:	f89a 3000 	ldrb.w	r3, [sl]
 8019b9c:	2b67      	cmp	r3, #103	; 0x67
 8019b9e:	f10a 0501 	add.w	r5, sl, #1
 8019ba2:	d82b      	bhi.n	8019bfc <__ssvfiscanf_r+0x12c>
 8019ba4:	2b65      	cmp	r3, #101	; 0x65
 8019ba6:	f080 809f 	bcs.w	8019ce8 <__ssvfiscanf_r+0x218>
 8019baa:	2b47      	cmp	r3, #71	; 0x47
 8019bac:	d810      	bhi.n	8019bd0 <__ssvfiscanf_r+0x100>
 8019bae:	2b45      	cmp	r3, #69	; 0x45
 8019bb0:	f080 809a 	bcs.w	8019ce8 <__ssvfiscanf_r+0x218>
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d06c      	beq.n	8019c92 <__ssvfiscanf_r+0x1c2>
 8019bb8:	2b25      	cmp	r3, #37	; 0x25
 8019bba:	d051      	beq.n	8019c60 <__ssvfiscanf_r+0x190>
 8019bbc:	2303      	movs	r3, #3
 8019bbe:	9347      	str	r3, [sp, #284]	; 0x11c
 8019bc0:	9742      	str	r7, [sp, #264]	; 0x108
 8019bc2:	e027      	b.n	8019c14 <__ssvfiscanf_r+0x144>
 8019bc4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019bc6:	fb07 1303 	mla	r3, r7, r3, r1
 8019bca:	3b30      	subs	r3, #48	; 0x30
 8019bcc:	9343      	str	r3, [sp, #268]	; 0x10c
 8019bce:	e7cf      	b.n	8019b70 <__ssvfiscanf_r+0xa0>
 8019bd0:	2b5b      	cmp	r3, #91	; 0x5b
 8019bd2:	d06a      	beq.n	8019caa <__ssvfiscanf_r+0x1da>
 8019bd4:	d80c      	bhi.n	8019bf0 <__ssvfiscanf_r+0x120>
 8019bd6:	2b58      	cmp	r3, #88	; 0x58
 8019bd8:	d1f0      	bne.n	8019bbc <__ssvfiscanf_r+0xec>
 8019bda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019be0:	9241      	str	r2, [sp, #260]	; 0x104
 8019be2:	2210      	movs	r2, #16
 8019be4:	9242      	str	r2, [sp, #264]	; 0x108
 8019be6:	2b6e      	cmp	r3, #110	; 0x6e
 8019be8:	bf8c      	ite	hi
 8019bea:	2304      	movhi	r3, #4
 8019bec:	2303      	movls	r3, #3
 8019bee:	e010      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019bf0:	2b63      	cmp	r3, #99	; 0x63
 8019bf2:	d065      	beq.n	8019cc0 <__ssvfiscanf_r+0x1f0>
 8019bf4:	2b64      	cmp	r3, #100	; 0x64
 8019bf6:	d1e1      	bne.n	8019bbc <__ssvfiscanf_r+0xec>
 8019bf8:	9742      	str	r7, [sp, #264]	; 0x108
 8019bfa:	e7f4      	b.n	8019be6 <__ssvfiscanf_r+0x116>
 8019bfc:	2b70      	cmp	r3, #112	; 0x70
 8019bfe:	d04b      	beq.n	8019c98 <__ssvfiscanf_r+0x1c8>
 8019c00:	d826      	bhi.n	8019c50 <__ssvfiscanf_r+0x180>
 8019c02:	2b6e      	cmp	r3, #110	; 0x6e
 8019c04:	d062      	beq.n	8019ccc <__ssvfiscanf_r+0x1fc>
 8019c06:	d84c      	bhi.n	8019ca2 <__ssvfiscanf_r+0x1d2>
 8019c08:	2b69      	cmp	r3, #105	; 0x69
 8019c0a:	d1d7      	bne.n	8019bbc <__ssvfiscanf_r+0xec>
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	9342      	str	r3, [sp, #264]	; 0x108
 8019c10:	2303      	movs	r3, #3
 8019c12:	9347      	str	r3, [sp, #284]	; 0x11c
 8019c14:	6863      	ldr	r3, [r4, #4]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	dd68      	ble.n	8019cec <__ssvfiscanf_r+0x21c>
 8019c1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019c1c:	0659      	lsls	r1, r3, #25
 8019c1e:	d407      	bmi.n	8019c30 <__ssvfiscanf_r+0x160>
 8019c20:	f7ff f960 	bl	8018ee4 <__locale_ctype_ptr>
 8019c24:	6823      	ldr	r3, [r4, #0]
 8019c26:	781a      	ldrb	r2, [r3, #0]
 8019c28:	4410      	add	r0, r2
 8019c2a:	7842      	ldrb	r2, [r0, #1]
 8019c2c:	0712      	lsls	r2, r2, #28
 8019c2e:	d464      	bmi.n	8019cfa <__ssvfiscanf_r+0x22a>
 8019c30:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019c32:	2b02      	cmp	r3, #2
 8019c34:	dc73      	bgt.n	8019d1e <__ssvfiscanf_r+0x24e>
 8019c36:	466b      	mov	r3, sp
 8019c38:	4622      	mov	r2, r4
 8019c3a:	a941      	add	r1, sp, #260	; 0x104
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f000 f897 	bl	8019d70 <_scanf_chars>
 8019c42:	2801      	cmp	r0, #1
 8019c44:	f000 8089 	beq.w	8019d5a <__ssvfiscanf_r+0x28a>
 8019c48:	2802      	cmp	r0, #2
 8019c4a:	f47f af71 	bne.w	8019b30 <__ssvfiscanf_r+0x60>
 8019c4e:	e01d      	b.n	8019c8c <__ssvfiscanf_r+0x1bc>
 8019c50:	2b75      	cmp	r3, #117	; 0x75
 8019c52:	d0d1      	beq.n	8019bf8 <__ssvfiscanf_r+0x128>
 8019c54:	2b78      	cmp	r3, #120	; 0x78
 8019c56:	d0c0      	beq.n	8019bda <__ssvfiscanf_r+0x10a>
 8019c58:	2b73      	cmp	r3, #115	; 0x73
 8019c5a:	d1af      	bne.n	8019bbc <__ssvfiscanf_r+0xec>
 8019c5c:	2302      	movs	r3, #2
 8019c5e:	e7d8      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019c60:	6863      	ldr	r3, [r4, #4]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	dd0c      	ble.n	8019c80 <__ssvfiscanf_r+0x1b0>
 8019c66:	6823      	ldr	r3, [r4, #0]
 8019c68:	781a      	ldrb	r2, [r3, #0]
 8019c6a:	455a      	cmp	r2, fp
 8019c6c:	d175      	bne.n	8019d5a <__ssvfiscanf_r+0x28a>
 8019c6e:	3301      	adds	r3, #1
 8019c70:	6862      	ldr	r2, [r4, #4]
 8019c72:	6023      	str	r3, [r4, #0]
 8019c74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019c76:	3a01      	subs	r2, #1
 8019c78:	3301      	adds	r3, #1
 8019c7a:	6062      	str	r2, [r4, #4]
 8019c7c:	9345      	str	r3, [sp, #276]	; 0x114
 8019c7e:	e757      	b.n	8019b30 <__ssvfiscanf_r+0x60>
 8019c80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019c82:	4621      	mov	r1, r4
 8019c84:	4630      	mov	r0, r6
 8019c86:	4798      	blx	r3
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	d0ec      	beq.n	8019c66 <__ssvfiscanf_r+0x196>
 8019c8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019c8e:	2800      	cmp	r0, #0
 8019c90:	d159      	bne.n	8019d46 <__ssvfiscanf_r+0x276>
 8019c92:	f04f 30ff 	mov.w	r0, #4294967295
 8019c96:	e05c      	b.n	8019d52 <__ssvfiscanf_r+0x282>
 8019c98:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019c9a:	f042 0220 	orr.w	r2, r2, #32
 8019c9e:	9241      	str	r2, [sp, #260]	; 0x104
 8019ca0:	e79b      	b.n	8019bda <__ssvfiscanf_r+0x10a>
 8019ca2:	2308      	movs	r3, #8
 8019ca4:	9342      	str	r3, [sp, #264]	; 0x108
 8019ca6:	2304      	movs	r3, #4
 8019ca8:	e7b3      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019caa:	4629      	mov	r1, r5
 8019cac:	4640      	mov	r0, r8
 8019cae:	f000 f9b7 	bl	801a020 <__sccl>
 8019cb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cb8:	9341      	str	r3, [sp, #260]	; 0x104
 8019cba:	4605      	mov	r5, r0
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	e7a8      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019cc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cc6:	9341      	str	r3, [sp, #260]	; 0x104
 8019cc8:	2300      	movs	r3, #0
 8019cca:	e7a2      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019ccc:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019cce:	06c3      	lsls	r3, r0, #27
 8019cd0:	f53f af2e 	bmi.w	8019b30 <__ssvfiscanf_r+0x60>
 8019cd4:	9b00      	ldr	r3, [sp, #0]
 8019cd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019cd8:	1d19      	adds	r1, r3, #4
 8019cda:	9100      	str	r1, [sp, #0]
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	07c0      	lsls	r0, r0, #31
 8019ce0:	bf4c      	ite	mi
 8019ce2:	801a      	strhmi	r2, [r3, #0]
 8019ce4:	601a      	strpl	r2, [r3, #0]
 8019ce6:	e723      	b.n	8019b30 <__ssvfiscanf_r+0x60>
 8019ce8:	2305      	movs	r3, #5
 8019cea:	e792      	b.n	8019c12 <__ssvfiscanf_r+0x142>
 8019cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019cee:	4621      	mov	r1, r4
 8019cf0:	4630      	mov	r0, r6
 8019cf2:	4798      	blx	r3
 8019cf4:	2800      	cmp	r0, #0
 8019cf6:	d090      	beq.n	8019c1a <__ssvfiscanf_r+0x14a>
 8019cf8:	e7c8      	b.n	8019c8c <__ssvfiscanf_r+0x1bc>
 8019cfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019cfc:	3201      	adds	r2, #1
 8019cfe:	9245      	str	r2, [sp, #276]	; 0x114
 8019d00:	6862      	ldr	r2, [r4, #4]
 8019d02:	3a01      	subs	r2, #1
 8019d04:	2a00      	cmp	r2, #0
 8019d06:	6062      	str	r2, [r4, #4]
 8019d08:	dd02      	ble.n	8019d10 <__ssvfiscanf_r+0x240>
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	6023      	str	r3, [r4, #0]
 8019d0e:	e787      	b.n	8019c20 <__ssvfiscanf_r+0x150>
 8019d10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d12:	4621      	mov	r1, r4
 8019d14:	4630      	mov	r0, r6
 8019d16:	4798      	blx	r3
 8019d18:	2800      	cmp	r0, #0
 8019d1a:	d081      	beq.n	8019c20 <__ssvfiscanf_r+0x150>
 8019d1c:	e7b6      	b.n	8019c8c <__ssvfiscanf_r+0x1bc>
 8019d1e:	2b04      	cmp	r3, #4
 8019d20:	dc06      	bgt.n	8019d30 <__ssvfiscanf_r+0x260>
 8019d22:	466b      	mov	r3, sp
 8019d24:	4622      	mov	r2, r4
 8019d26:	a941      	add	r1, sp, #260	; 0x104
 8019d28:	4630      	mov	r0, r6
 8019d2a:	f000 f885 	bl	8019e38 <_scanf_i>
 8019d2e:	e788      	b.n	8019c42 <__ssvfiscanf_r+0x172>
 8019d30:	4b0e      	ldr	r3, [pc, #56]	; (8019d6c <__ssvfiscanf_r+0x29c>)
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	f43f aefc 	beq.w	8019b30 <__ssvfiscanf_r+0x60>
 8019d38:	466b      	mov	r3, sp
 8019d3a:	4622      	mov	r2, r4
 8019d3c:	a941      	add	r1, sp, #260	; 0x104
 8019d3e:	4630      	mov	r0, r6
 8019d40:	f7fc fdce 	bl	80168e0 <_scanf_float>
 8019d44:	e77d      	b.n	8019c42 <__ssvfiscanf_r+0x172>
 8019d46:	89a3      	ldrh	r3, [r4, #12]
 8019d48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019d4c:	bf18      	it	ne
 8019d4e:	f04f 30ff 	movne.w	r0, #4294967295
 8019d52:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019d5c:	e7f9      	b.n	8019d52 <__ssvfiscanf_r+0x282>
 8019d5e:	bf00      	nop
 8019d60:	08019a1d 	.word	0x08019a1d
 8019d64:	08019a97 	.word	0x08019a97
 8019d68:	0801aaaa 	.word	0x0801aaaa
 8019d6c:	080168e1 	.word	0x080168e1

08019d70 <_scanf_chars>:
 8019d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d74:	4615      	mov	r5, r2
 8019d76:	688a      	ldr	r2, [r1, #8]
 8019d78:	4680      	mov	r8, r0
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	b932      	cbnz	r2, 8019d8c <_scanf_chars+0x1c>
 8019d7e:	698a      	ldr	r2, [r1, #24]
 8019d80:	2a00      	cmp	r2, #0
 8019d82:	bf14      	ite	ne
 8019d84:	f04f 32ff 	movne.w	r2, #4294967295
 8019d88:	2201      	moveq	r2, #1
 8019d8a:	608a      	str	r2, [r1, #8]
 8019d8c:	6822      	ldr	r2, [r4, #0]
 8019d8e:	06d1      	lsls	r1, r2, #27
 8019d90:	bf5f      	itttt	pl
 8019d92:	681a      	ldrpl	r2, [r3, #0]
 8019d94:	1d11      	addpl	r1, r2, #4
 8019d96:	6019      	strpl	r1, [r3, #0]
 8019d98:	6817      	ldrpl	r7, [r2, #0]
 8019d9a:	2600      	movs	r6, #0
 8019d9c:	69a3      	ldr	r3, [r4, #24]
 8019d9e:	b1db      	cbz	r3, 8019dd8 <_scanf_chars+0x68>
 8019da0:	2b01      	cmp	r3, #1
 8019da2:	d107      	bne.n	8019db4 <_scanf_chars+0x44>
 8019da4:	682b      	ldr	r3, [r5, #0]
 8019da6:	6962      	ldr	r2, [r4, #20]
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	5cd3      	ldrb	r3, [r2, r3]
 8019dac:	b9a3      	cbnz	r3, 8019dd8 <_scanf_chars+0x68>
 8019dae:	2e00      	cmp	r6, #0
 8019db0:	d132      	bne.n	8019e18 <_scanf_chars+0xa8>
 8019db2:	e006      	b.n	8019dc2 <_scanf_chars+0x52>
 8019db4:	2b02      	cmp	r3, #2
 8019db6:	d007      	beq.n	8019dc8 <_scanf_chars+0x58>
 8019db8:	2e00      	cmp	r6, #0
 8019dba:	d12d      	bne.n	8019e18 <_scanf_chars+0xa8>
 8019dbc:	69a3      	ldr	r3, [r4, #24]
 8019dbe:	2b01      	cmp	r3, #1
 8019dc0:	d12a      	bne.n	8019e18 <_scanf_chars+0xa8>
 8019dc2:	2001      	movs	r0, #1
 8019dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dc8:	f7ff f88c 	bl	8018ee4 <__locale_ctype_ptr>
 8019dcc:	682b      	ldr	r3, [r5, #0]
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	4418      	add	r0, r3
 8019dd2:	7843      	ldrb	r3, [r0, #1]
 8019dd4:	071b      	lsls	r3, r3, #28
 8019dd6:	d4ef      	bmi.n	8019db8 <_scanf_chars+0x48>
 8019dd8:	6823      	ldr	r3, [r4, #0]
 8019dda:	06da      	lsls	r2, r3, #27
 8019ddc:	bf5e      	ittt	pl
 8019dde:	682b      	ldrpl	r3, [r5, #0]
 8019de0:	781b      	ldrbpl	r3, [r3, #0]
 8019de2:	703b      	strbpl	r3, [r7, #0]
 8019de4:	682a      	ldr	r2, [r5, #0]
 8019de6:	686b      	ldr	r3, [r5, #4]
 8019de8:	f102 0201 	add.w	r2, r2, #1
 8019dec:	602a      	str	r2, [r5, #0]
 8019dee:	68a2      	ldr	r2, [r4, #8]
 8019df0:	f103 33ff 	add.w	r3, r3, #4294967295
 8019df4:	f102 32ff 	add.w	r2, r2, #4294967295
 8019df8:	606b      	str	r3, [r5, #4]
 8019dfa:	f106 0601 	add.w	r6, r6, #1
 8019dfe:	bf58      	it	pl
 8019e00:	3701      	addpl	r7, #1
 8019e02:	60a2      	str	r2, [r4, #8]
 8019e04:	b142      	cbz	r2, 8019e18 <_scanf_chars+0xa8>
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	dcc8      	bgt.n	8019d9c <_scanf_chars+0x2c>
 8019e0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e0e:	4629      	mov	r1, r5
 8019e10:	4640      	mov	r0, r8
 8019e12:	4798      	blx	r3
 8019e14:	2800      	cmp	r0, #0
 8019e16:	d0c1      	beq.n	8019d9c <_scanf_chars+0x2c>
 8019e18:	6823      	ldr	r3, [r4, #0]
 8019e1a:	f013 0310 	ands.w	r3, r3, #16
 8019e1e:	d105      	bne.n	8019e2c <_scanf_chars+0xbc>
 8019e20:	68e2      	ldr	r2, [r4, #12]
 8019e22:	3201      	adds	r2, #1
 8019e24:	60e2      	str	r2, [r4, #12]
 8019e26:	69a2      	ldr	r2, [r4, #24]
 8019e28:	b102      	cbz	r2, 8019e2c <_scanf_chars+0xbc>
 8019e2a:	703b      	strb	r3, [r7, #0]
 8019e2c:	6923      	ldr	r3, [r4, #16]
 8019e2e:	441e      	add	r6, r3
 8019e30:	6126      	str	r6, [r4, #16]
 8019e32:	2000      	movs	r0, #0
 8019e34:	e7c6      	b.n	8019dc4 <_scanf_chars+0x54>
	...

08019e38 <_scanf_i>:
 8019e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e3c:	469a      	mov	sl, r3
 8019e3e:	4b74      	ldr	r3, [pc, #464]	; (801a010 <_scanf_i+0x1d8>)
 8019e40:	460c      	mov	r4, r1
 8019e42:	4683      	mov	fp, r0
 8019e44:	4616      	mov	r6, r2
 8019e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e4a:	b087      	sub	sp, #28
 8019e4c:	ab03      	add	r3, sp, #12
 8019e4e:	68a7      	ldr	r7, [r4, #8]
 8019e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e54:	4b6f      	ldr	r3, [pc, #444]	; (801a014 <_scanf_i+0x1dc>)
 8019e56:	69a1      	ldr	r1, [r4, #24]
 8019e58:	4a6f      	ldr	r2, [pc, #444]	; (801a018 <_scanf_i+0x1e0>)
 8019e5a:	2903      	cmp	r1, #3
 8019e5c:	bf08      	it	eq
 8019e5e:	461a      	moveq	r2, r3
 8019e60:	1e7b      	subs	r3, r7, #1
 8019e62:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019e66:	bf84      	itt	hi
 8019e68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019e6c:	60a3      	strhi	r3, [r4, #8]
 8019e6e:	6823      	ldr	r3, [r4, #0]
 8019e70:	9200      	str	r2, [sp, #0]
 8019e72:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019e76:	bf88      	it	hi
 8019e78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019e7c:	f104 091c 	add.w	r9, r4, #28
 8019e80:	6023      	str	r3, [r4, #0]
 8019e82:	bf8c      	ite	hi
 8019e84:	197f      	addhi	r7, r7, r5
 8019e86:	2700      	movls	r7, #0
 8019e88:	464b      	mov	r3, r9
 8019e8a:	f04f 0800 	mov.w	r8, #0
 8019e8e:	9301      	str	r3, [sp, #4]
 8019e90:	6831      	ldr	r1, [r6, #0]
 8019e92:	ab03      	add	r3, sp, #12
 8019e94:	2202      	movs	r2, #2
 8019e96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019e9a:	7809      	ldrb	r1, [r1, #0]
 8019e9c:	f7e6 f9b8 	bl	8000210 <memchr>
 8019ea0:	9b01      	ldr	r3, [sp, #4]
 8019ea2:	b330      	cbz	r0, 8019ef2 <_scanf_i+0xba>
 8019ea4:	f1b8 0f01 	cmp.w	r8, #1
 8019ea8:	d15a      	bne.n	8019f60 <_scanf_i+0x128>
 8019eaa:	6862      	ldr	r2, [r4, #4]
 8019eac:	b92a      	cbnz	r2, 8019eba <_scanf_i+0x82>
 8019eae:	6822      	ldr	r2, [r4, #0]
 8019eb0:	2108      	movs	r1, #8
 8019eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019eb6:	6061      	str	r1, [r4, #4]
 8019eb8:	6022      	str	r2, [r4, #0]
 8019eba:	6822      	ldr	r2, [r4, #0]
 8019ebc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019ec0:	6022      	str	r2, [r4, #0]
 8019ec2:	68a2      	ldr	r2, [r4, #8]
 8019ec4:	1e51      	subs	r1, r2, #1
 8019ec6:	60a1      	str	r1, [r4, #8]
 8019ec8:	b19a      	cbz	r2, 8019ef2 <_scanf_i+0xba>
 8019eca:	6832      	ldr	r2, [r6, #0]
 8019ecc:	1c51      	adds	r1, r2, #1
 8019ece:	6031      	str	r1, [r6, #0]
 8019ed0:	7812      	ldrb	r2, [r2, #0]
 8019ed2:	701a      	strb	r2, [r3, #0]
 8019ed4:	1c5d      	adds	r5, r3, #1
 8019ed6:	6873      	ldr	r3, [r6, #4]
 8019ed8:	3b01      	subs	r3, #1
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	6073      	str	r3, [r6, #4]
 8019ede:	dc07      	bgt.n	8019ef0 <_scanf_i+0xb8>
 8019ee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ee4:	4631      	mov	r1, r6
 8019ee6:	4658      	mov	r0, fp
 8019ee8:	4798      	blx	r3
 8019eea:	2800      	cmp	r0, #0
 8019eec:	f040 8086 	bne.w	8019ffc <_scanf_i+0x1c4>
 8019ef0:	462b      	mov	r3, r5
 8019ef2:	f108 0801 	add.w	r8, r8, #1
 8019ef6:	f1b8 0f03 	cmp.w	r8, #3
 8019efa:	d1c8      	bne.n	8019e8e <_scanf_i+0x56>
 8019efc:	6862      	ldr	r2, [r4, #4]
 8019efe:	b90a      	cbnz	r2, 8019f04 <_scanf_i+0xcc>
 8019f00:	220a      	movs	r2, #10
 8019f02:	6062      	str	r2, [r4, #4]
 8019f04:	6862      	ldr	r2, [r4, #4]
 8019f06:	4945      	ldr	r1, [pc, #276]	; (801a01c <_scanf_i+0x1e4>)
 8019f08:	6960      	ldr	r0, [r4, #20]
 8019f0a:	9301      	str	r3, [sp, #4]
 8019f0c:	1a89      	subs	r1, r1, r2
 8019f0e:	f000 f887 	bl	801a020 <__sccl>
 8019f12:	9b01      	ldr	r3, [sp, #4]
 8019f14:	f04f 0800 	mov.w	r8, #0
 8019f18:	461d      	mov	r5, r3
 8019f1a:	68a3      	ldr	r3, [r4, #8]
 8019f1c:	6822      	ldr	r2, [r4, #0]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d03a      	beq.n	8019f98 <_scanf_i+0x160>
 8019f22:	6831      	ldr	r1, [r6, #0]
 8019f24:	6960      	ldr	r0, [r4, #20]
 8019f26:	f891 c000 	ldrb.w	ip, [r1]
 8019f2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	d032      	beq.n	8019f98 <_scanf_i+0x160>
 8019f32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019f36:	d121      	bne.n	8019f7c <_scanf_i+0x144>
 8019f38:	0510      	lsls	r0, r2, #20
 8019f3a:	d51f      	bpl.n	8019f7c <_scanf_i+0x144>
 8019f3c:	f108 0801 	add.w	r8, r8, #1
 8019f40:	b117      	cbz	r7, 8019f48 <_scanf_i+0x110>
 8019f42:	3301      	adds	r3, #1
 8019f44:	3f01      	subs	r7, #1
 8019f46:	60a3      	str	r3, [r4, #8]
 8019f48:	6873      	ldr	r3, [r6, #4]
 8019f4a:	3b01      	subs	r3, #1
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	6073      	str	r3, [r6, #4]
 8019f50:	dd1b      	ble.n	8019f8a <_scanf_i+0x152>
 8019f52:	6833      	ldr	r3, [r6, #0]
 8019f54:	3301      	adds	r3, #1
 8019f56:	6033      	str	r3, [r6, #0]
 8019f58:	68a3      	ldr	r3, [r4, #8]
 8019f5a:	3b01      	subs	r3, #1
 8019f5c:	60a3      	str	r3, [r4, #8]
 8019f5e:	e7dc      	b.n	8019f1a <_scanf_i+0xe2>
 8019f60:	f1b8 0f02 	cmp.w	r8, #2
 8019f64:	d1ad      	bne.n	8019ec2 <_scanf_i+0x8a>
 8019f66:	6822      	ldr	r2, [r4, #0]
 8019f68:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019f6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019f70:	d1bf      	bne.n	8019ef2 <_scanf_i+0xba>
 8019f72:	2110      	movs	r1, #16
 8019f74:	6061      	str	r1, [r4, #4]
 8019f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019f7a:	e7a1      	b.n	8019ec0 <_scanf_i+0x88>
 8019f7c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019f80:	6022      	str	r2, [r4, #0]
 8019f82:	780b      	ldrb	r3, [r1, #0]
 8019f84:	702b      	strb	r3, [r5, #0]
 8019f86:	3501      	adds	r5, #1
 8019f88:	e7de      	b.n	8019f48 <_scanf_i+0x110>
 8019f8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019f8e:	4631      	mov	r1, r6
 8019f90:	4658      	mov	r0, fp
 8019f92:	4798      	blx	r3
 8019f94:	2800      	cmp	r0, #0
 8019f96:	d0df      	beq.n	8019f58 <_scanf_i+0x120>
 8019f98:	6823      	ldr	r3, [r4, #0]
 8019f9a:	05d9      	lsls	r1, r3, #23
 8019f9c:	d50c      	bpl.n	8019fb8 <_scanf_i+0x180>
 8019f9e:	454d      	cmp	r5, r9
 8019fa0:	d908      	bls.n	8019fb4 <_scanf_i+0x17c>
 8019fa2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019faa:	4632      	mov	r2, r6
 8019fac:	4658      	mov	r0, fp
 8019fae:	4798      	blx	r3
 8019fb0:	1e6f      	subs	r7, r5, #1
 8019fb2:	463d      	mov	r5, r7
 8019fb4:	454d      	cmp	r5, r9
 8019fb6:	d029      	beq.n	801a00c <_scanf_i+0x1d4>
 8019fb8:	6822      	ldr	r2, [r4, #0]
 8019fba:	f012 0210 	ands.w	r2, r2, #16
 8019fbe:	d113      	bne.n	8019fe8 <_scanf_i+0x1b0>
 8019fc0:	702a      	strb	r2, [r5, #0]
 8019fc2:	6863      	ldr	r3, [r4, #4]
 8019fc4:	9e00      	ldr	r6, [sp, #0]
 8019fc6:	4649      	mov	r1, r9
 8019fc8:	4658      	mov	r0, fp
 8019fca:	47b0      	blx	r6
 8019fcc:	f8da 3000 	ldr.w	r3, [sl]
 8019fd0:	6821      	ldr	r1, [r4, #0]
 8019fd2:	1d1a      	adds	r2, r3, #4
 8019fd4:	f8ca 2000 	str.w	r2, [sl]
 8019fd8:	f011 0f20 	tst.w	r1, #32
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	d010      	beq.n	801a002 <_scanf_i+0x1ca>
 8019fe0:	6018      	str	r0, [r3, #0]
 8019fe2:	68e3      	ldr	r3, [r4, #12]
 8019fe4:	3301      	adds	r3, #1
 8019fe6:	60e3      	str	r3, [r4, #12]
 8019fe8:	eba5 0509 	sub.w	r5, r5, r9
 8019fec:	44a8      	add	r8, r5
 8019fee:	6925      	ldr	r5, [r4, #16]
 8019ff0:	4445      	add	r5, r8
 8019ff2:	6125      	str	r5, [r4, #16]
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	b007      	add	sp, #28
 8019ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ffc:	f04f 0800 	mov.w	r8, #0
 801a000:	e7ca      	b.n	8019f98 <_scanf_i+0x160>
 801a002:	07ca      	lsls	r2, r1, #31
 801a004:	bf4c      	ite	mi
 801a006:	8018      	strhmi	r0, [r3, #0]
 801a008:	6018      	strpl	r0, [r3, #0]
 801a00a:	e7ea      	b.n	8019fe2 <_scanf_i+0x1aa>
 801a00c:	2001      	movs	r0, #1
 801a00e:	e7f2      	b.n	8019ff6 <_scanf_i+0x1be>
 801a010:	0801a848 	.word	0x0801a848
 801a014:	08017ba1 	.word	0x08017ba1
 801a018:	0801a19d 	.word	0x0801a19d
 801a01c:	0801aac5 	.word	0x0801aac5

0801a020 <__sccl>:
 801a020:	b570      	push	{r4, r5, r6, lr}
 801a022:	780b      	ldrb	r3, [r1, #0]
 801a024:	2b5e      	cmp	r3, #94	; 0x5e
 801a026:	bf13      	iteet	ne
 801a028:	1c4a      	addne	r2, r1, #1
 801a02a:	1c8a      	addeq	r2, r1, #2
 801a02c:	784b      	ldrbeq	r3, [r1, #1]
 801a02e:	2100      	movne	r1, #0
 801a030:	bf08      	it	eq
 801a032:	2101      	moveq	r1, #1
 801a034:	1e44      	subs	r4, r0, #1
 801a036:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801a03a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801a03e:	42ac      	cmp	r4, r5
 801a040:	d1fb      	bne.n	801a03a <__sccl+0x1a>
 801a042:	b913      	cbnz	r3, 801a04a <__sccl+0x2a>
 801a044:	3a01      	subs	r2, #1
 801a046:	4610      	mov	r0, r2
 801a048:	bd70      	pop	{r4, r5, r6, pc}
 801a04a:	f081 0401 	eor.w	r4, r1, #1
 801a04e:	54c4      	strb	r4, [r0, r3]
 801a050:	1c51      	adds	r1, r2, #1
 801a052:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a056:	2d2d      	cmp	r5, #45	; 0x2d
 801a058:	f101 36ff 	add.w	r6, r1, #4294967295
 801a05c:	460a      	mov	r2, r1
 801a05e:	d006      	beq.n	801a06e <__sccl+0x4e>
 801a060:	2d5d      	cmp	r5, #93	; 0x5d
 801a062:	d0f0      	beq.n	801a046 <__sccl+0x26>
 801a064:	b90d      	cbnz	r5, 801a06a <__sccl+0x4a>
 801a066:	4632      	mov	r2, r6
 801a068:	e7ed      	b.n	801a046 <__sccl+0x26>
 801a06a:	462b      	mov	r3, r5
 801a06c:	e7ef      	b.n	801a04e <__sccl+0x2e>
 801a06e:	780e      	ldrb	r6, [r1, #0]
 801a070:	2e5d      	cmp	r6, #93	; 0x5d
 801a072:	d0fa      	beq.n	801a06a <__sccl+0x4a>
 801a074:	42b3      	cmp	r3, r6
 801a076:	dcf8      	bgt.n	801a06a <__sccl+0x4a>
 801a078:	3301      	adds	r3, #1
 801a07a:	429e      	cmp	r6, r3
 801a07c:	54c4      	strb	r4, [r0, r3]
 801a07e:	dcfb      	bgt.n	801a078 <__sccl+0x58>
 801a080:	3102      	adds	r1, #2
 801a082:	e7e6      	b.n	801a052 <__sccl+0x32>

0801a084 <strncmp>:
 801a084:	b510      	push	{r4, lr}
 801a086:	b16a      	cbz	r2, 801a0a4 <strncmp+0x20>
 801a088:	3901      	subs	r1, #1
 801a08a:	1884      	adds	r4, r0, r2
 801a08c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a090:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a094:	4293      	cmp	r3, r2
 801a096:	d103      	bne.n	801a0a0 <strncmp+0x1c>
 801a098:	42a0      	cmp	r0, r4
 801a09a:	d001      	beq.n	801a0a0 <strncmp+0x1c>
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d1f5      	bne.n	801a08c <strncmp+0x8>
 801a0a0:	1a98      	subs	r0, r3, r2
 801a0a2:	bd10      	pop	{r4, pc}
 801a0a4:	4610      	mov	r0, r2
 801a0a6:	e7fc      	b.n	801a0a2 <strncmp+0x1e>

0801a0a8 <_strtoul_l.isra.0>:
 801a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0ac:	4680      	mov	r8, r0
 801a0ae:	4689      	mov	r9, r1
 801a0b0:	4692      	mov	sl, r2
 801a0b2:	461e      	mov	r6, r3
 801a0b4:	460f      	mov	r7, r1
 801a0b6:	463d      	mov	r5, r7
 801a0b8:	9808      	ldr	r0, [sp, #32]
 801a0ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a0be:	f7fe ff0d 	bl	8018edc <__locale_ctype_ptr_l>
 801a0c2:	4420      	add	r0, r4
 801a0c4:	7843      	ldrb	r3, [r0, #1]
 801a0c6:	f013 0308 	ands.w	r3, r3, #8
 801a0ca:	d130      	bne.n	801a12e <_strtoul_l.isra.0+0x86>
 801a0cc:	2c2d      	cmp	r4, #45	; 0x2d
 801a0ce:	d130      	bne.n	801a132 <_strtoul_l.isra.0+0x8a>
 801a0d0:	787c      	ldrb	r4, [r7, #1]
 801a0d2:	1cbd      	adds	r5, r7, #2
 801a0d4:	2101      	movs	r1, #1
 801a0d6:	2e00      	cmp	r6, #0
 801a0d8:	d05c      	beq.n	801a194 <_strtoul_l.isra.0+0xec>
 801a0da:	2e10      	cmp	r6, #16
 801a0dc:	d109      	bne.n	801a0f2 <_strtoul_l.isra.0+0x4a>
 801a0de:	2c30      	cmp	r4, #48	; 0x30
 801a0e0:	d107      	bne.n	801a0f2 <_strtoul_l.isra.0+0x4a>
 801a0e2:	782b      	ldrb	r3, [r5, #0]
 801a0e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a0e8:	2b58      	cmp	r3, #88	; 0x58
 801a0ea:	d14e      	bne.n	801a18a <_strtoul_l.isra.0+0xe2>
 801a0ec:	786c      	ldrb	r4, [r5, #1]
 801a0ee:	2610      	movs	r6, #16
 801a0f0:	3502      	adds	r5, #2
 801a0f2:	f04f 32ff 	mov.w	r2, #4294967295
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	fbb2 f2f6 	udiv	r2, r2, r6
 801a0fc:	fb06 fc02 	mul.w	ip, r6, r2
 801a100:	ea6f 0c0c 	mvn.w	ip, ip
 801a104:	4618      	mov	r0, r3
 801a106:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a10a:	2f09      	cmp	r7, #9
 801a10c:	d817      	bhi.n	801a13e <_strtoul_l.isra.0+0x96>
 801a10e:	463c      	mov	r4, r7
 801a110:	42a6      	cmp	r6, r4
 801a112:	dd23      	ble.n	801a15c <_strtoul_l.isra.0+0xb4>
 801a114:	2b00      	cmp	r3, #0
 801a116:	db1e      	blt.n	801a156 <_strtoul_l.isra.0+0xae>
 801a118:	4282      	cmp	r2, r0
 801a11a:	d31c      	bcc.n	801a156 <_strtoul_l.isra.0+0xae>
 801a11c:	d101      	bne.n	801a122 <_strtoul_l.isra.0+0x7a>
 801a11e:	45a4      	cmp	ip, r4
 801a120:	db19      	blt.n	801a156 <_strtoul_l.isra.0+0xae>
 801a122:	fb00 4006 	mla	r0, r0, r6, r4
 801a126:	2301      	movs	r3, #1
 801a128:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a12c:	e7eb      	b.n	801a106 <_strtoul_l.isra.0+0x5e>
 801a12e:	462f      	mov	r7, r5
 801a130:	e7c1      	b.n	801a0b6 <_strtoul_l.isra.0+0xe>
 801a132:	2c2b      	cmp	r4, #43	; 0x2b
 801a134:	bf04      	itt	eq
 801a136:	1cbd      	addeq	r5, r7, #2
 801a138:	787c      	ldrbeq	r4, [r7, #1]
 801a13a:	4619      	mov	r1, r3
 801a13c:	e7cb      	b.n	801a0d6 <_strtoul_l.isra.0+0x2e>
 801a13e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a142:	2f19      	cmp	r7, #25
 801a144:	d801      	bhi.n	801a14a <_strtoul_l.isra.0+0xa2>
 801a146:	3c37      	subs	r4, #55	; 0x37
 801a148:	e7e2      	b.n	801a110 <_strtoul_l.isra.0+0x68>
 801a14a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a14e:	2f19      	cmp	r7, #25
 801a150:	d804      	bhi.n	801a15c <_strtoul_l.isra.0+0xb4>
 801a152:	3c57      	subs	r4, #87	; 0x57
 801a154:	e7dc      	b.n	801a110 <_strtoul_l.isra.0+0x68>
 801a156:	f04f 33ff 	mov.w	r3, #4294967295
 801a15a:	e7e5      	b.n	801a128 <_strtoul_l.isra.0+0x80>
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	da09      	bge.n	801a174 <_strtoul_l.isra.0+0xcc>
 801a160:	2322      	movs	r3, #34	; 0x22
 801a162:	f8c8 3000 	str.w	r3, [r8]
 801a166:	f04f 30ff 	mov.w	r0, #4294967295
 801a16a:	f1ba 0f00 	cmp.w	sl, #0
 801a16e:	d107      	bne.n	801a180 <_strtoul_l.isra.0+0xd8>
 801a170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a174:	b101      	cbz	r1, 801a178 <_strtoul_l.isra.0+0xd0>
 801a176:	4240      	negs	r0, r0
 801a178:	f1ba 0f00 	cmp.w	sl, #0
 801a17c:	d0f8      	beq.n	801a170 <_strtoul_l.isra.0+0xc8>
 801a17e:	b10b      	cbz	r3, 801a184 <_strtoul_l.isra.0+0xdc>
 801a180:	f105 39ff 	add.w	r9, r5, #4294967295
 801a184:	f8ca 9000 	str.w	r9, [sl]
 801a188:	e7f2      	b.n	801a170 <_strtoul_l.isra.0+0xc8>
 801a18a:	2430      	movs	r4, #48	; 0x30
 801a18c:	2e00      	cmp	r6, #0
 801a18e:	d1b0      	bne.n	801a0f2 <_strtoul_l.isra.0+0x4a>
 801a190:	2608      	movs	r6, #8
 801a192:	e7ae      	b.n	801a0f2 <_strtoul_l.isra.0+0x4a>
 801a194:	2c30      	cmp	r4, #48	; 0x30
 801a196:	d0a4      	beq.n	801a0e2 <_strtoul_l.isra.0+0x3a>
 801a198:	260a      	movs	r6, #10
 801a19a:	e7aa      	b.n	801a0f2 <_strtoul_l.isra.0+0x4a>

0801a19c <_strtoul_r>:
 801a19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a19e:	4c06      	ldr	r4, [pc, #24]	; (801a1b8 <_strtoul_r+0x1c>)
 801a1a0:	4d06      	ldr	r5, [pc, #24]	; (801a1bc <_strtoul_r+0x20>)
 801a1a2:	6824      	ldr	r4, [r4, #0]
 801a1a4:	6a24      	ldr	r4, [r4, #32]
 801a1a6:	2c00      	cmp	r4, #0
 801a1a8:	bf08      	it	eq
 801a1aa:	462c      	moveq	r4, r5
 801a1ac:	9400      	str	r4, [sp, #0]
 801a1ae:	f7ff ff7b 	bl	801a0a8 <_strtoul_l.isra.0>
 801a1b2:	b003      	add	sp, #12
 801a1b4:	bd30      	pop	{r4, r5, pc}
 801a1b6:	bf00      	nop
 801a1b8:	2000000c 	.word	0x2000000c
 801a1bc:	20000070 	.word	0x20000070

0801a1c0 <__submore>:
 801a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1c4:	460c      	mov	r4, r1
 801a1c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1cc:	4299      	cmp	r1, r3
 801a1ce:	d11d      	bne.n	801a20c <__submore+0x4c>
 801a1d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a1d4:	f7fb fece 	bl	8015f74 <_malloc_r>
 801a1d8:	b918      	cbnz	r0, 801a1e2 <__submore+0x22>
 801a1da:	f04f 30ff 	mov.w	r0, #4294967295
 801a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1e6:	63a3      	str	r3, [r4, #56]	; 0x38
 801a1e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a1ec:	6360      	str	r0, [r4, #52]	; 0x34
 801a1ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a1f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a1f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a1fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a1fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a202:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a206:	6020      	str	r0, [r4, #0]
 801a208:	2000      	movs	r0, #0
 801a20a:	e7e8      	b.n	801a1de <__submore+0x1e>
 801a20c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a20e:	0077      	lsls	r7, r6, #1
 801a210:	463a      	mov	r2, r7
 801a212:	f000 f835 	bl	801a280 <_realloc_r>
 801a216:	4605      	mov	r5, r0
 801a218:	2800      	cmp	r0, #0
 801a21a:	d0de      	beq.n	801a1da <__submore+0x1a>
 801a21c:	eb00 0806 	add.w	r8, r0, r6
 801a220:	4601      	mov	r1, r0
 801a222:	4632      	mov	r2, r6
 801a224:	4640      	mov	r0, r8
 801a226:	f7fe fe8d 	bl	8018f44 <memcpy>
 801a22a:	f8c4 8000 	str.w	r8, [r4]
 801a22e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a232:	e7e9      	b.n	801a208 <__submore+0x48>

0801a234 <__ascii_wctomb>:
 801a234:	b149      	cbz	r1, 801a24a <__ascii_wctomb+0x16>
 801a236:	2aff      	cmp	r2, #255	; 0xff
 801a238:	bf85      	ittet	hi
 801a23a:	238a      	movhi	r3, #138	; 0x8a
 801a23c:	6003      	strhi	r3, [r0, #0]
 801a23e:	700a      	strbls	r2, [r1, #0]
 801a240:	f04f 30ff 	movhi.w	r0, #4294967295
 801a244:	bf98      	it	ls
 801a246:	2001      	movls	r0, #1
 801a248:	4770      	bx	lr
 801a24a:	4608      	mov	r0, r1
 801a24c:	4770      	bx	lr

0801a24e <memmove>:
 801a24e:	4288      	cmp	r0, r1
 801a250:	b510      	push	{r4, lr}
 801a252:	eb01 0302 	add.w	r3, r1, r2
 801a256:	d807      	bhi.n	801a268 <memmove+0x1a>
 801a258:	1e42      	subs	r2, r0, #1
 801a25a:	4299      	cmp	r1, r3
 801a25c:	d00a      	beq.n	801a274 <memmove+0x26>
 801a25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a262:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a266:	e7f8      	b.n	801a25a <memmove+0xc>
 801a268:	4283      	cmp	r3, r0
 801a26a:	d9f5      	bls.n	801a258 <memmove+0xa>
 801a26c:	1881      	adds	r1, r0, r2
 801a26e:	1ad2      	subs	r2, r2, r3
 801a270:	42d3      	cmn	r3, r2
 801a272:	d100      	bne.n	801a276 <memmove+0x28>
 801a274:	bd10      	pop	{r4, pc}
 801a276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a27a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a27e:	e7f7      	b.n	801a270 <memmove+0x22>

0801a280 <_realloc_r>:
 801a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a282:	4607      	mov	r7, r0
 801a284:	4614      	mov	r4, r2
 801a286:	460e      	mov	r6, r1
 801a288:	b921      	cbnz	r1, 801a294 <_realloc_r+0x14>
 801a28a:	4611      	mov	r1, r2
 801a28c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a290:	f7fb be70 	b.w	8015f74 <_malloc_r>
 801a294:	b922      	cbnz	r2, 801a2a0 <_realloc_r+0x20>
 801a296:	f7fb fe1f 	bl	8015ed8 <_free_r>
 801a29a:	4625      	mov	r5, r4
 801a29c:	4628      	mov	r0, r5
 801a29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2a0:	f000 f814 	bl	801a2cc <_malloc_usable_size_r>
 801a2a4:	42a0      	cmp	r0, r4
 801a2a6:	d20f      	bcs.n	801a2c8 <_realloc_r+0x48>
 801a2a8:	4621      	mov	r1, r4
 801a2aa:	4638      	mov	r0, r7
 801a2ac:	f7fb fe62 	bl	8015f74 <_malloc_r>
 801a2b0:	4605      	mov	r5, r0
 801a2b2:	2800      	cmp	r0, #0
 801a2b4:	d0f2      	beq.n	801a29c <_realloc_r+0x1c>
 801a2b6:	4631      	mov	r1, r6
 801a2b8:	4622      	mov	r2, r4
 801a2ba:	f7fe fe43 	bl	8018f44 <memcpy>
 801a2be:	4631      	mov	r1, r6
 801a2c0:	4638      	mov	r0, r7
 801a2c2:	f7fb fe09 	bl	8015ed8 <_free_r>
 801a2c6:	e7e9      	b.n	801a29c <_realloc_r+0x1c>
 801a2c8:	4635      	mov	r5, r6
 801a2ca:	e7e7      	b.n	801a29c <_realloc_r+0x1c>

0801a2cc <_malloc_usable_size_r>:
 801a2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2d0:	1f18      	subs	r0, r3, #4
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	bfbc      	itt	lt
 801a2d6:	580b      	ldrlt	r3, [r1, r0]
 801a2d8:	18c0      	addlt	r0, r0, r3
 801a2da:	4770      	bx	lr

0801a2dc <_init>:
 801a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2de:	bf00      	nop
 801a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2e2:	bc08      	pop	{r3}
 801a2e4:	469e      	mov	lr, r3
 801a2e6:	4770      	bx	lr

0801a2e8 <_fini>:
 801a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ea:	bf00      	nop
 801a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2ee:	bc08      	pop	{r3}
 801a2f0:	469e      	mov	lr, r3
 801a2f2:	4770      	bx	lr
