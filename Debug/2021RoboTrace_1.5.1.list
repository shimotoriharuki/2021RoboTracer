
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017828  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  080179e8  080179e8  000279e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184cc  080184cc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080184cc  080184cc  000284cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184d4  080184d4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080184d4  080184d4  000284d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184dc  080184dc  000284dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080184e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bc28  200001e0  080186bc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003be08  080186bc  0003be08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037631  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a4f  00000000  00000000  0006783d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021c0  00000000  00000000  0006f290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ef0  00000000  00000000  00071450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037733  00000000  00000000  00073340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b88  00000000  00000000  000aaa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110802  00000000  00000000  000d05fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a448  00000000  00000000  001e0e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080179d0 	.word	0x080179d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080179d0 	.word	0x080179d0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fc4c 	bl	8008874 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039900 	.word	0x20039900

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fc34 	bl	8008874 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039900 	.word	0x20039900

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fabd 	bl	80085a0 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 f824 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 f81e 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 f818 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 f812 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 f80c 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 f806 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 f800 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fffa 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fff4 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 ffee 	bl	8007074 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 ffe2 	bl	8007074 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 ffdc 	bl	8007074 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fba9 	bl	8014880 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b f9fc 	bl	800c5a4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b f9f8 	bl	800c5a4 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b54 	.word	0x20039b54
 80011d0:	20039838 	.word	0x20039838
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f977 	bl	800178c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f98b 	bl	80017b8 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fdce 	bl	8011058 <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20038744 	.word	0x20038744

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 fa2b 	bl	8013960 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fe12 	bl	8011140 <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fe0d 	bl	8011140 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f fb7b 	bl	8010c2e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f958 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	080179e8 	.word	0x080179e8
 8001564:	200386b4 	.word	0x200386b4
 8001568:	20038744 	.word	0x20038744
 800156c:	20038734 	.word	0x20038734

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f900 	bl	800178c <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fd89 	bl	80110ac <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f00f fff4 	bl	8011588 <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fd83 	bl	80110ac <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f907 	bl	80017b8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f012 f9c6 	bl	8013960 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fdb0 	bl	8011140 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f fb1e 	bl	8010c2e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f8fb 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fd22 	bl	8011058 <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200385b4 	.word	0x200385b4
 8001624:	20037474 	.word	0x20037474
 8001628:	08017a04 	.word	0x08017a04
 800162c:	080179e8 	.word	0x080179e8
 8001630:	200386b4 	.word	0x200386b4
 8001634:	20038744 	.word	0x20038744
 8001638:	20038734 	.word	0x20038734

0800163c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f898 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f8ac 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_float+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_float+0x84>)
 8001672:	f012 f9c9 	bl	8013a08 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_float+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_float+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_float+0x84>)
 800169c:	f010 f952 	bl	8011944 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f8a1 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_float+0x88>)
 80016ac:	f00f fcd4 	bl	8011058 <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080179f4 	.word	0x080179f4
 80016c0:	200386b4 	.word	0x200386b4
 80016c4:	20038744 	.word	0x20038744

080016c8 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f852 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e8:	f000 f866 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ec:	e019      	b.n	8001722 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4913      	ldr	r1, [pc, #76]	; (8001748 <sd_read_array_double+0x80>)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <sd_read_array_double+0x84>)
 80016fe:	f012 f983 	bl	8013a08 <siscanf>
		i++;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800170e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	db03      	blt.n	8001722 <sd_read_array_double+0x5a>
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <sd_read_array_double+0x88>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <sd_read_array_double+0x84>)
 8001728:	f010 f90c 	bl	8011944 <f_gets>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1dd      	bne.n	80016ee <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001732:	f000 f85b 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <sd_read_array_double+0x88>)
 8001738:	f00f fc8e 	bl	8011058 <f_close>

	return ret;
 800173c:	7d7b      	ldrb	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08017a00 	.word	0x08017a00
 800174c:	200386b4 	.word	0x200386b4
 8001750:	20038744 	.word	0x20038744

08001754 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800175e:	2201      	movs	r2, #1
 8001760:	4908      	ldr	r1, [pc, #32]	; (8001784 <sd_mount+0x30>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <sd_mount+0x34>)
 8001764:	f00e fef0 	bl	8010548 <f_mount>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <sd_mount+0x20>
 800176e:	2301      	movs	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e001      	b.n	8001778 <sd_mount+0x24>
	else ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001778:	79fb      	ldrb	r3, [r7, #7]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08017a10 	.word	0x08017a10
 8001788:	20037574 	.word	0x20037574

0800178c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <create_path+0x24>)
 800179a:	f012 f9a4 	bl	8013ae6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <create_path+0x28>)
 80017a2:	f012 f9a0 	bl	8013ae6 <strcpy>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200385b4 	.word	0x200385b4
 80017b4:	20037474 	.word	0x20037474

080017b8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <fopen_folder_and_file+0x24>)
 80017be:	f00f ffa5 	bl	801170c <f_mkdir>

	f_chdir(dirpath);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <fopen_folder_and_file+0x24>)
 80017c4:	f00f fc72 	bl	80110ac <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c8:	2213      	movs	r2, #19
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x28>)
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <fopen_folder_and_file+0x2c>)
 80017ce:	f00e ff01 	bl	80105d4 <f_open>

	f_chdir("..");
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <fopen_folder_and_file+0x30>)
 80017d4:	f00f fc6a 	bl	80110ac <f_chdir>


}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200385b4 	.word	0x200385b4
 80017e0:	20037474 	.word	0x20037474
 80017e4:	20038744 	.word	0x20038744
 80017e8:	08017a04 	.word	0x08017a04

080017ec <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e007      	b.n	8001808 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <bufclear+0x30>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	ddf4      	ble.n	80017f8 <bufclear+0xc>
	}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200386b4 	.word	0x200386b4

08001820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <read_byte+0x54>)
 800183c:	f006 feb0 	bl	80085a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001840:	f107 010f 	add.w	r1, r7, #15
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <read_byte+0x58>)
 800184a:	f00a f871 	bl	800b930 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800184e:	f107 010e 	add.w	r1, r7, #14
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <read_byte+0x58>)
 8001858:	f00a f99e 	bl	800bb98 <HAL_SPI_Receive>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <read_byte+0x54>)
 8001864:	f006 fe9c 	bl	80085a0 <HAL_GPIO_WritePin>

	return val;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	200397e0 	.word	0x200397e0

0800187c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <write_byte+0x54>)
 800189e:	f006 fe7f 	bl	80085a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <write_byte+0x58>)
 80018ac:	f00a f840 	bl	800b930 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018b0:	1db9      	adds	r1, r7, #6
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <write_byte+0x58>)
 80018b8:	f00a f83a 	bl	800b930 <HAL_SPI_Transmit>
	CS_SET;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <write_byte+0x54>)
 80018c4:	f006 fe6c 	bl	80085a0 <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	200397e0 	.word	0x200397e0

080018d8 <IMU_init>:

uint16_t IMU_init() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff9c 	bl	8001820 <read_byte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2be0      	cmp	r3, #224	; 0xe0
 80018f0:	d119      	bne.n	8001926 <IMU_init+0x4e>
		ret = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018f6:	2101      	movs	r1, #1
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff ffbf 	bl	800187c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018fe:	2110      	movs	r1, #16
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff ffbb 	bl	800187c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001906:	2120      	movs	r1, #32
 8001908:	207f      	movs	r0, #127	; 0x7f
 800190a:	f7ff ffb7 	bl	800187c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800190e:	2106      	movs	r1, #6
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffb3 	bl	800187c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001916:	2106      	movs	r1, #6
 8001918:	2014      	movs	r0, #20
 800191a:	f7ff ffaf 	bl	800187c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800191e:	2100      	movs	r1, #0
 8001920:	207f      	movs	r0, #127	; 0x7f
 8001922:	f7ff ffab 	bl	800187c <write_byte>
	}
	return ret;
 8001926:	88fb      	ldrh	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <read_gyro_data>:

void read_gyro_data() {
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001934:	2033      	movs	r0, #51	; 0x33
 8001936:	f7ff ff73 	bl	8001820 <read_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21c      	sxth	r4, r3
 8001940:	2034      	movs	r0, #52	; 0x34
 8001942:	f7ff ff6d 	bl	8001820 <read_byte>
 8001946:	4603      	mov	r3, r0
 8001948:	b21b      	sxth	r3, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <read_gyro_data+0x64>)
 8001950:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001952:	2035      	movs	r0, #53	; 0x35
 8001954:	f7ff ff64 	bl	8001820 <read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21c      	sxth	r4, r3
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff ff5e 	bl	8001820 <read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	b21b      	sxth	r3, r3
 8001968:	4323      	orrs	r3, r4
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <read_gyro_data+0x68>)
 800196e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001970:	2037      	movs	r0, #55	; 0x37
 8001972:	f7ff ff55 	bl	8001820 <read_byte>
 8001976:	4603      	mov	r3, r0
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21c      	sxth	r4, r3
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f7ff ff4f 	bl	8001820 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	b21b      	sxth	r3, r3
 8001986:	4323      	orrs	r3, r4
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <read_gyro_data+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	2003977c 	.word	0x2003977c
 8001998:	2003977a 	.word	0x2003977a
 800199c:	20039774 	.word	0x20039774

080019a0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	805a      	strh	r2, [r3, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	809a      	strh	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	80da      	strh	r2, [r3, #6]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	811a      	strh	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	815a      	strh	r2, [r3, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
{

}
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019ec:	f7ff ff74 	bl	80018d8 <IMU_init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <_ZN3IMU4initEv+0x50>)
 80019fa:	f011 ff1b 	bl	8013834 <iprintf>

	lcd_clear();
 80019fe:	f7ff fb4f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb5b 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <_ZN3IMU4initEv+0x54>)
 8001a0c:	f7ff fb82 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb54 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_ZN3IMU4initEv+0x58>)
 8001a1e:	f7ff fb79 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f005 fb25 	bl	8007074 <HAL_Delay>

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08017a14 	.word	0x08017a14
 8001a38:	08017a24 	.word	0x08017a24
 8001a3c:	08017a30 	.word	0x08017a30

08001a40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a48:	f7ff ff72 	bl	8001930 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd6f 	bl	8000554 <__aeabi_i2d>
 8001a76:	a316      	add	r3, pc, #88	; (adr r3, 8001ad0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4625      	mov	r5, r4
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	a310      	add	r3, pc, #64	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x98>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc5 	bl	8000628 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc09 	bl	80002bc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7ff f869 	bl	8000b88 <__aeabi_d2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	eb851eb8 	.word	0xeb851eb8
 8001ad4:	3f9eb851 	.word	0x3f9eb851
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	2003977c 	.word	0x2003977c
 8001ae4:	2003977a 	.word	0x2003977a
 8001ae8:	20039774 	.word	0x20039774
 8001aec:	20000210 	.word	0x20000210

08001af0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	a316      	add	r3, pc, #88	; (adr r3, 8001b74 <_ZN3IMU8getOmegaEv+0x84>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feac 	bl	800087c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b2e:	a313      	add	r3, pc, #76	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fd76 	bl	8000628 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <_ZN3IMU8getOmegaEv+0x80>)
 8001b4a:	f7fe fe97 	bl	800087c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f85f 	bl	8000c18 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	40668000 	.word	0x40668000
 8001b74:	66666666 	.word	0x66666666
 8001b78:	40306666 	.word	0x40306666
 8001b7c:	54411744 	.word	0x54411744
 8001b80:	400921fb 	.word	0x400921fb

08001b84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b8c:	466b      	mov	r3, sp
 8001b8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f005 fa6e 	bl	8007074 <HAL_Delay>
	lcd_clear();
 8001b98:	f7ff fa82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fa8e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ba4:	4840      	ldr	r0, [pc, #256]	; (8001ca8 <_ZN3IMU11calibrationEv+0x124>)
 8001ba6:	f7ff fab5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001baa:	2101      	movs	r1, #1
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fa87 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bb2:	483e      	ldr	r0, [pc, #248]	; (8001cac <_ZN3IMU11calibrationEv+0x128>)
 8001bb4:	f7ff faae 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bbe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	61bd      	str	r5, [r7, #24]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0154      	lsls	r4, r2, #5
 8001bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bde:	014b      	lsls	r3, r1, #5
 8001be0:	462b      	mov	r3, r5
 8001be2:	3301      	adds	r3, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3303      	adds	r3, #3
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	466b      	mov	r3, sp
 8001c0e:	3303      	adds	r3, #3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	83fb      	strh	r3, [r7, #30]
 8001c1a:	8bfa      	ldrh	r2, [r7, #30]
 8001c1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	da13      	bge.n	8001c4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f005 fa18 	bl	8007074 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	e7e6      	b.n	8001c1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	462b      	mov	r3, r5
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00e      	beq.n	8001c82 <_ZN3IMU11calibrationEv+0xfe>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e7ec      	b.n	8001c5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c9c:	46b5      	mov	sp, r6
}
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	08017a34 	.word	0x08017a34
 8001cac:	08017a40 	.word	0x08017a40

08001cb0 <_ZN3IMU12getOffsetValEv>:

float IMU::getOffsetVal()
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	return offset_;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	ee07 3a90 	vmov	s15, r3
}
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	1dfa      	adds	r2, r7, #7
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <INA260_read+0x50>)
 8001cee:	f006 fdc1 	bl	8008874 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	b299      	uxth	r1, r3
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <INA260_read+0x50>)
 8001d02:	f006 feb5 	bl	8008a70 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20039994 	.word	0x20039994

08001d24 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	717b      	strb	r3, [r7, #5]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	737b      	strb	r3, [r7, #13]
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d4e:	793b      	ldrb	r3, [r7, #4]
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <INA260_write+0x48>)
 8001d5e:	f006 fd89 	bl	8008874 <HAL_I2C_Master_Transmit>
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20039994 	.word	0x20039994

08001d70 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	79ba      	ldrb	r2, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ffcb 	bl	8001d24 <INA260_write>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	21df      	movs	r1, #223	; 0xdf
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffe2 	bl	8001d70 <setConfig>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
{

}
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dde:	f006 fbc7 	bl	8008570 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x2e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4823      	ldr	r0, [pc, #140]	; (8001e8c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dfe:	f006 fbb7 	bl	8008570 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <_ZN8JoyStick8getValueEv+0x4e>
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e20:	f006 fba6 	bl	8008570 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x70>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e40:	f006 fb96 	bl	8008570 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0x90>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e60:	f006 fb86 	bl	8008570 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <_ZN8JoyStick8getValueEv+0xb0>
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020400 	.word	0x40020400

08001e94 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b52      	cmp	r3, #82	; 0x52
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4856      	ldr	r0, [pc, #344]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 fb77 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4853      	ldr	r0, [pc, #332]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fb71 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fb6b 	bl	80085a0 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eca:	e098      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b47      	cmp	r3, #71	; 0x47
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	484b      	ldr	r0, [pc, #300]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 fb61 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4848      	ldr	r0, [pc, #288]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fb5b 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4845      	ldr	r0, [pc, #276]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fb55 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001ef6:	e082      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b42      	cmp	r3, #66	; 0x42
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4840      	ldr	r0, [pc, #256]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fb4b 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	483d      	ldr	r0, [pc, #244]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fb45 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	483a      	ldr	r0, [pc, #232]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fb3f 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001f22:	e06c      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b43      	cmp	r3, #67	; 0x43
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fb35 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4832      	ldr	r0, [pc, #200]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fb2f 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	482f      	ldr	r0, [pc, #188]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fb29 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001f4e:	e056      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b4d      	cmp	r3, #77	; 0x4d
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fb1f 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4827      	ldr	r0, [pc, #156]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fb19 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fb13 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001f7a:	e040      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b59      	cmp	r3, #89	; 0x59
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fb09 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fb03 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fafd 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001fa6:	e02a      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b57      	cmp	r3, #87	; 0x57
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4814      	ldr	r0, [pc, #80]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 faf3 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 faed 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fae7 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001fd2:	e014      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fd8:	d111      	bne.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fadd 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fad7 	bl	80085a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fad1 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020000 	.word	0x40020000

0800200c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	4613      	mov	r3, r2
 800201a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800201c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800202c:	f006 fab8 	bl	80085a0 <HAL_GPIO_WritePin>
 8002030:	e009      	b.n	8002046 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002042:	f006 faad 	bl	80085a0 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d106      	bne.n	800205c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4808      	ldr	r0, [pc, #32]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002056:	f006 faa3 	bl	80085a0 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800205a:	e009      	b.n	8002070 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800205c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800206c:	f006 fa98 	bl	80085a0 <HAL_GPIO_WritePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020000 	.word	0x40020000

0800207c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe92 	bl	8001db4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	331c      	adds	r3, #28
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d008      	beq.n	80020b8 <_ZN10LineSensorC1Ev+0x3c>
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	3302      	adds	r3, #2
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	e7f2      	b.n	800209e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d009      	beq.n	80020e6 <_ZN10LineSensorC1Ev+0x6a>
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	3304      	adds	r3, #4
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
 80020e4:	e7f1      	b.n	80020ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d009      	beq.n	8002114 <_ZN10LineSensorC1Ev+0x98>
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	617b      	str	r3, [r7, #20]
		m = 0;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3304      	adds	r3, #4
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e7f1      	b.n	80020f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d009      	beq.n	8002142 <_ZN10LineSensorC1Ev+0xc6>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002138:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	3304      	adds	r3, #4
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002140:	e7f1      	b.n	8002126 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3748      	adds	r7, #72	; 0x48
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	220e      	movs	r2, #14
 8002158:	4619      	mov	r1, r3
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800215c:	f004 fff0 	bl	8007140 <HAL_ADC_Start_DMA>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200398b8 	.word	0x200398b8

0800216c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b0d      	cmp	r3, #13
 800217c:	dc2f      	bgt.n	80021de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3392      	adds	r3, #146	; 0x92
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	33a0      	adds	r3, #160	; 0xa0
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	3306      	adds	r3, #6
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7cc      	b.n	8002178 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	d902      	bls.n	80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]


}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	2000021c 	.word	0x2000021c

08002208 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800221a:	2b0d      	cmp	r3, #13
 800221c:	f200 80b8 	bhi.w	8002390 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002226:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800222a:	2b09      	cmp	r3, #9
 800222c:	d81c      	bhi.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800222e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002232:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002236:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4423      	add	r3, r4
 8002246:	3306      	adds	r3, #6
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3304      	adds	r3, #4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	008b      	lsls	r3, r1, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440b      	add	r3, r1
 8002258:	3b30      	subs	r3, #48	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800225c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002260:	3301      	adds	r3, #1
 8002262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002266:	e7de      	b.n	8002226 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800226e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002272:	2b09      	cmp	r3, #9
 8002274:	d84d      	bhi.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	3301      	adds	r3, #1
 800227c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002280:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002284:	2b09      	cmp	r3, #9
 8002286:	d83e      	bhi.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002288:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002292:	4413      	add	r3, r2
 8002294:	3b30      	subs	r3, #48	; 0x30
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a4:	4413      	add	r3, r2
 80022a6:	3b30      	subs	r3, #48	; 0x30
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d521      	bpl.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	4413      	add	r3, r2
 80022c2:	3b30      	subs	r3, #48	; 0x30
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022d6:	440a      	add	r2, r1
 80022d8:	3a30      	subs	r2, #48	; 0x30
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440b      	add	r3, r1
 80022e4:	3b30      	subs	r3, #48	; 0x30
 80022e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022f2:	4413      	add	r3, r2
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	e7bc      	b.n	8002280 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800230a:	3301      	adds	r3, #1
 800230c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002310:	e7ad      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f92f 	bl	8000578 <__aeabi_f2d>
 800231a:	a32a      	add	r3, pc, #168	; (adr r3, 80023c4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f982 	bl	8000628 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4625      	mov	r5, r4
 800232a:	461c      	mov	r4, r3
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f91d 	bl	8000578 <__aeabi_f2d>
 800233e:	a31c      	add	r3, pc, #112	; (adr r3, 80023b0 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	461a      	mov	r2, r3
 800235a:	4623      	mov	r3, r4
 800235c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc58 	bl	8000c18 <__aeabi_d2f>
 8002368:	4601      	mov	r1, r0
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800238e:	e742      	b.n	8002216 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002398:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	; 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	f3af 8000 	nop.w
 80023b0:	66666666 	.word	0x66666666
 80023b4:	3fee6666 	.word	0x3fee6666
 80023b8:	20000220 	.word	0x20000220
 80023bc:	20000214 	.word	0x20000214
 80023c0:	20000218 	.word	0x20000218
 80023c4:	9999999a 	.word	0x9999999a
 80023c8:	3fa99999 	.word	0x3fa99999

080023cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b0a9      	sub	sp, #164	; 0xa4
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	f004 fe4d 	bl	8007074 <HAL_Delay>

	lcd_clear();
 80023da:	f7fe fe61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fe6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023e6:	48b1      	ldr	r0, [pc, #708]	; (80026ac <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023e8:	f7fe fe94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fe66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023f4:	48ae      	ldr	r0, [pc, #696]	; (80026b0 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023f6:	f7fe fe8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002400:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d823      	bhi.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002408:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	32b0      	adds	r2, #176	; 0xb0
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	440a      	add	r2, r1
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002420:	440b      	add	r3, r1
 8002422:	3b60      	subs	r3, #96	; 0x60
 8002424:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002426:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800242a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800243e:	440b      	add	r3, r1
 8002440:	3b98      	subs	r3, #152	; 0x98
 8002442:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002448:	3301      	adds	r3, #1
 800244a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800244e:	e7d7      	b.n	8002400 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcb8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800245c:	4603      	mov	r3, r0
 800245e:	2b02      	cmp	r3, #2
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d079      	beq.n	8002560 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002472:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d850      	bhi.n	800251c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002484:	4413      	add	r3, r2
 8002486:	3b60      	subs	r3, #96	; 0x60
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	33b0      	adds	r3, #176	; 0xb0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d50f      	bpl.n	80024c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	32b0      	adds	r2, #176	; 0xb0
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	440a      	add	r2, r1
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024be:	440b      	add	r3, r1
 80024c0:	3b60      	subs	r3, #96	; 0x60
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e024      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024d0:	4413      	add	r3, r2
 80024d2:	3b98      	subs	r3, #152	; 0x98
 80024d4:	ed93 7a00 	vldr	s14, [r3]
 80024d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	33b0      	adds	r3, #176	; 0xb0
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd0e      	ble.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024f2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	32b0      	adds	r2, #176	; 0xb0
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	440a      	add	r2, r1
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800250a:	440b      	add	r3, r1
 800250c:	3b98      	subs	r3, #152	; 0x98
 800250e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002514:	3301      	adds	r3, #1
 8002516:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800251a:	e7aa      	b.n	8002472 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f84e 	bl	80035c4 <_ZN12RotarySwitch8getValueEv>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800253e:	2201      	movs	r2, #1
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd61 	bl	800200c <_ZN3LED2LREaa>
 800254a:	e781      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002552:	2200      	movs	r2, #0
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd57 	bl	800200c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800255e:	e777      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800257e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002582:	429a      	cmp	r2, r3
 8002584:	d016      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffef 	bl	8000578 <__aeabi_f2d>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	4844      	ldr	r0, [pc, #272]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025a4:	f011 f946 	bl	8013834 <iprintf>
	for(const auto &m : max_values){
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	3304      	adds	r3, #4
 80025ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b2:	e7e2      	b.n	800257a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 80025b4:	200a      	movs	r0, #10
 80025b6:	f011 f955 	bl	8013864 <putchar>
	for(const auto &m : min_values){
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d014      	beq.n	8002606 <_ZN10LineSensor11calibrationEv+0x23a>
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffc6 	bl	8000578 <__aeabi_f2d>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	482f      	ldr	r0, [pc, #188]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025f6:	f011 f91d 	bl	8013834 <iprintf>
	for(const auto &m : min_values){
 80025fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fe:	3304      	adds	r3, #4
 8002600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002604:	e7e5      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 8002606:	200a      	movs	r0, #10
 8002608:	f011 f92c 	bl	8013864 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800260c:	2300      	movs	r3, #0
 800260e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	2b0d      	cmp	r3, #13
 8002618:	d826      	bhi.n	8002668 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800261a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002624:	4413      	add	r3, r2
 8002626:	3b60      	subs	r3, #96	; 0x60
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002636:	4413      	add	r3, r2
 8002638:	3b98      	subs	r3, #152	; 0x98
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002646:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80026b8 <_ZN10LineSensor11calibrationEv+0x2ec>
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	3392      	adds	r3, #146	; 0x92
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800265c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002660:	3301      	adds	r3, #1
 8002662:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002666:	e7d4      	b.n	8002612 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800266e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d815      	bhi.n	80026a2 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002676:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800267a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002684:	440a      	add	r2, r1
 8002686:	3a98      	subs	r2, #152	; 0x98
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	33a0      	adds	r3, #160	; 0xa0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002696:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800269a:	3301      	adds	r3, #1
 800269c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026a0:	e7e5      	b.n	800266e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026a2:	bf00      	nop
 80026a4:	37a4      	adds	r7, #164	; 0xa4
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08017a4c 	.word	0x08017a4c
 80026b0:	08017a58 	.word	0x08017a58
 80026b4:	08017a64 	.word	0x08017a64
 80026b8:	447a0000 	.word	0x447a0000

080026bc <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d012      	beq.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002728 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	db02      	blt.n	8002700 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3304      	adds	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e7e8      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	2b0d      	cmp	r3, #13
 800270c:	d902      	bls.n	8002714 <_ZN10LineSensor13emergencyStopEv+0x58>
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
 8002712:	e001      	b.n	8002718 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002718:	7dfb      	ldrb	r3, [r7, #23]

}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	44160000 	.word	0x44160000

0800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_target_omega;
float monitor_r;

float mon_diff, mon_diff_lpf;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), i_reset_flag_(false), normal_ratio_(0){
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	0000      	movs	r0, r0
 800278c:	0000      	movs	r0, r0
	...

08002790 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002804:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002810:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800281c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002828:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800283c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002844:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe95 	bl	8000578 <__aeabi_f2d>
 800284e:	a318      	add	r3, pc, #96	; (adr r3, 80028b0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fee8 	bl	8000628 <__aeabi_dmul>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	4625      	mov	r5, r4
 800285e:	461c      	mov	r4, r3
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe87 	bl	8000578 <__aeabi_f2d>
 800286a:	a313      	add	r3, pc, #76	; (adr r3, 80028b8 <_ZN9LineTrace9calcErrorEv+0x128>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd feda 	bl	8000628 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd fd1e 	bl	80002bc <__adddf3>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	4618      	mov	r0, r3
 8002886:	4621      	mov	r1, r4
 8002888:	f7fe f9c6 	bl	8000c18 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002894:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <_ZN9LineTrace9calcErrorEv+0x134>)
 800289a:	6013      	str	r3, [r2, #0]

	return diff;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	ee07 3a90 	vmov	s15, r3

}
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	f3af 8000 	nop.w
 80028b0:	47ae147b 	.word	0x47ae147b
 80028b4:	3fb47ae1 	.word	0x3fb47ae1
 80028b8:	d70a3d71 	.word	0xd70a3d71
 80028bc:	3fed70a3 	.word	0x3fed70a3
 80028c0:	20000258 	.word	0x20000258
 80028c4:	20000260 	.word	0x20000260
 80028c8:	2000025c 	.word	0x2000025c
 80028cc:	00000000 	.word	0x00000000

080028d0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff59 	bl	8002790 <_ZN9LineTrace9calcErrorEv>
 80028de:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	p = kp_ * diff;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002902:	ed97 7a05 	vldr	s14, [r7, #20]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	ed93 7a05 	vldr	s14, [r3, #20]
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	edd7 6a05 	vldr	s13, [r7, #20]
 800291e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a32a      	add	r3, pc, #168	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd ffa2 	bl	800087c <__aeabi_ddiv>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	f7fe f96a 	bl	8000c18 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fe13 	bl	8000578 <__aeabi_f2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed93 7a06 	vldr	s14, [r3, #24]
 800295c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fe06 	bl	8000578 <__aeabi_f2d>
 800296c:	a31a      	add	r3, pc, #104	; (adr r3, 80029d8 <_ZN9LineTrace8pidTraceEv+0x108>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe59 	bl	8000628 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fc9d 	bl	80002bc <__adddf3>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	4618      	mov	r0, r3
 8002988:	4621      	mov	r1, r4
 800298a:	f7fe f945 	bl	8000c18 <__aeabi_d2f>
 800298e:	4602      	mov	r2, r0
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002992:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002994:	ed97 7a04 	vldr	s14, [r7, #16]
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80029b8:	edd7 0a02 	vldr	s1, [r7, #8]
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	4610      	mov	r0, r2
 80029c2:	f001 f8fd 	bl	8003bc0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6013      	str	r3, [r2, #0]

}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}
 80029d4:	f3af 8000 	nop.w
 80029d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029dc:	3f50624d 	.word	0x3f50624d
 80029e0:	20000268 	.word	0x20000268
 80029e4:	20000264 	.word	0x20000264

080029e8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2201      	movs	r2, #1
 80029f6:	4912      	ldr	r1, [pc, #72]	; (8002a40 <_ZN9LineTrace4initEv+0x58>)
 80029f8:	4812      	ldr	r0, [pc, #72]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 80029fa:	f7fe fe1f 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	2201      	movs	r2, #1
 8002a04:	4910      	ldr	r1, [pc, #64]	; (8002a48 <_ZN9LineTrace4initEv+0x60>)
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a08:	f7fe fe18 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2201      	movs	r2, #1
 8002a12:	490e      	ldr	r1, [pc, #56]	; (8002a4c <_ZN9LineTrace4initEv+0x64>)
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <_ZN9LineTrace4initEv+0x5c>)
 8002a16:	f7fe fe11 	bl	800163c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a26:	eeb0 1a66 	vmov.f32	s2, s13
 8002a2a:	eef0 0a47 	vmov.f32	s1, s14
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f80c 	bl	8002a50 <_ZN9LineTrace7setGainEfff>

}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08017aa4 	.word	0x08017aa4
 8002a44:	08017aac 	.word	0x08017aac
 8002a48:	08017ab4 	.word	0x08017ab4
 8002a4c:	08017abc 	.word	0x08017abc

08002a50 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a60:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	615a      	str	r2, [r3, #20]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	return kp_;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	ee07 3a90 	vmov	s15, r3
}
 8002a92:	eeb0 0a67 	vmov.f32	s0, s15
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN9LineTrace5getKiEv>:


float LineTrace::getKi()
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	return ki_;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	ee07 3a90 	vmov	s15, r3
}
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return kd_;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	ee07 3a90 	vmov	s15, r3
}
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
		pidTrace();
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fed0 	bl	80028d0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fdc1 	bl	80026bc <_ZN10LineSensor13emergencyStopEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b48:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002b80 <_ZN9LineTrace4flipEv+0x68>
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fa0f 	bl	8002f70 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	330c      	adds	r3, #12
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fa55 	bl	800200c <_ZN3LED2LREaa>
		else{
			led_.LR(0, -1);

		}
	}
}
 8002b62:	e007      	b.n	8002b74 <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	330c      	adds	r3, #12
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa4c 	bl	800200c <_ZN3LED2LREaa>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f3af 8000 	nop.w
	...

08002b88 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002be0 <_ZN9LineTrace4stopEv+0x30>
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f9cf 	bl	8002f70 <_ZN5Motor8setRatioEdd>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
	...

08002be8 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c00:	3302      	adds	r3, #2
 8002c02:	2200      	movs	r2, #0
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c18:	3306      	adds	r3, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002c38:	f7fe fd8c 	bl	8001754 <sd_mount>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002c4c:	481b      	ldr	r0, [pc, #108]	; (8002cbc <_ZN6Logger10sdCardInitEv+0x90>)
 8002c4e:	f010 fe79 	bl	8013944 <puts>

	  lcd_clear();
 8002c52:	f7fe fa25 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fa31 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c5e:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002c60:	f7fe fa58 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002c64:	2101      	movs	r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa2a 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002c6c:	4815      	ldr	r0, [pc, #84]	; (8002cc4 <_ZN6Logger10sdCardInitEv+0x98>)
 8002c6e:	f7fe fa51 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c76:	f004 f9fd 	bl	8007074 <HAL_Delay>

	  ret = true;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e018      	b.n	8002cb2 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002c80:	4811      	ldr	r0, [pc, #68]	; (8002cc8 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002c82:	f010 fe5f 	bl	8013944 <puts>

	  lcd_clear();
 8002c86:	f7fe fa0b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe fa17 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002c94:	f7fe fa3e 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fa10 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002ca0:	480a      	ldr	r0, [pc, #40]	; (8002ccc <_ZN6Logger10sdCardInitEv+0xa0>)
 8002ca2:	f7fe fa37 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f004 f9e3 	bl	8007074 <HAL_Delay>

	  ret = false;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08017ac4 	.word	0x08017ac4
 8002cc0:	08017ad4 	.word	0x08017ad4
 8002cc4:	08017ae0 	.word	0x08017ae0
 8002cc8:	08017ae8 	.word	0x08017ae8
 8002ccc:	08017af8 	.word	0x08017af8

08002cd0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d024      	beq.n	8002d32 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002cee:	3302      	adds	r3, #2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d02:	3302      	adds	r3, #2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d10:	3302      	adds	r3, #2
 8002d12:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d905      	bls.n	8002d32 <_ZN6Logger8storeLogEf+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	801a      	strh	r2, [r3, #0]
	}
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d027      	beq.n	8002da6 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002d66:	3310      	adds	r3, #16
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d76:	3304      	adds	r3, #4
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d84:	3304      	adds	r3, #4
 8002d86:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d8e:	3304      	adds	r3, #4
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d905      	bls.n	8002da6 <_ZN6Logger9storeLog2Ef+0x68>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002da0:	3304      	adds	r3, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	801a      	strh	r2, [r3, #0]
	}
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68b8      	ldr	r0, [r7, #8]
 8002dce:	f7fe fbcf 	bl	8001570 <sd_write_array_float>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8002dec:	3340      	adds	r3, #64	; 0x40
 8002dee:	2200      	movs	r2, #0
 8002df0:	9200      	str	r2, [sp, #0]
 8002df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7fe fbb9 	bl	8001570 <sd_write_array_float>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002e1a:	3380      	adds	r3, #128	; 0x80
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	9200      	str	r2, [sp, #0]
 8002e20:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68b8      	ldr	r0, [r7, #8]
 8002e28:	f7fe fba2 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002e32:	3340      	adds	r3, #64	; 0x40
 8002e34:	2200      	movs	r2, #0
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f7fe fb96 	bl	8001570 <sd_write_array_float>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	805a      	strh	r2, [r3, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <_ZN5Motor4initEv>:

void Motor::init()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002eb4:	2108      	movs	r1, #8
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <_ZN5Motor4initEv+0x20>)
 8002eb8:	f009 faa4 	bl	800c404 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ebc:	210c      	movs	r1, #12
 8002ebe:	4803      	ldr	r0, [pc, #12]	; (8002ecc <_ZN5Motor4initEv+0x20>)
 8002ec0:	f009 faa0 	bl	800c404 <HAL_TIM_PWM_Start>

}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20039878 	.word	0x20039878

08002ed0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da0d      	bge.n	8002efe <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002eea:	f005 fb59 	bl	80085a0 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	81fb      	strh	r3, [r7, #14]
 8002efc:	e00a      	b.n	8002f14 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f04:	4818      	ldr	r0, [pc, #96]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f06:	f005 fb4b 	bl	80085a0 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da0d      	bge.n	8002f3a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f26:	f005 fb3b 	bl	80085a0 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	425b      	negs	r3, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	81bb      	strh	r3, [r7, #12]
 8002f38:	e00a      	b.n	8002f50 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f40:	4809      	ldr	r0, [pc, #36]	; (8002f68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f42:	f005 fb2d 	bl	80085a0 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002f50:	89fa      	ldrh	r2, [r7, #14]
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002f58:	89ba      	ldrh	r2, [r7, #12]
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	20039878 	.word	0x20039878

08002f70 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6178      	str	r0, [r7, #20]
 8002f78:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f7c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8a:	f7fd fddd 	bl	8000b48 <__aeabi_dcmpgt>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <_ZN5Motor8setRatioEdd+0x30>
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	4c2b      	ldr	r4, [pc, #172]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002f9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002f9e:	e00e      	b.n	8002fbe <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002faa:	f7fd fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <_ZN5Motor8setRatioEdd+0x4e>
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	4c24      	ldr	r4, [pc, #144]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fc8:	f7fd fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <_ZN5Motor8setRatioEdd+0x6e>
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	4c1c      	ldr	r4, [pc, #112]	; (8003048 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fd8:	e9c7 3400 	strd	r3, r4, [r7]
 8002fdc:	e00e      	b.n	8002ffc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fe8:	f7fd fd90 	bl	8000b0c <__aeabi_dcmplt>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <_ZN5Motor8setRatioEdd+0x8c>
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	4c15      	ldr	r4, [pc, #84]	; (800304c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ff8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <_ZN5Motor8setRatioEdd+0xe0>)
 8003002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003006:	f7fd fb0f 	bl	8000628 <__aeabi_dmul>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	4618      	mov	r0, r3
 8003010:	4621      	mov	r1, r4
 8003012:	f7fd fdb9 	bl	8000b88 <__aeabi_d2iz>
 8003016:	4603      	mov	r3, r0
 8003018:	b21a      	sxth	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <_ZN5Motor8setRatioEdd+0xe0>)
 8003024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003028:	f7fd fafe 	bl	8000628 <__aeabi_dmul>
 800302c:	4603      	mov	r3, r0
 800302e:	460c      	mov	r4, r1
 8003030:	4618      	mov	r0, r3
 8003032:	4621      	mov	r1, r4
 8003034:	f7fd fda8 	bl	8000b88 <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	b21a      	sxth	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	805a      	strh	r2, [r3, #2]

}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	3ff00000 	.word	0x3ff00000
 800304c:	bff00000 	.word	0xbff00000
 8003050:	409c2000 	.word	0x409c2000

08003054 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8003054:	b490      	push	{r4, r7}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc90      	pop	{r4, r7}
 80030a8:	4770      	bx	lr
 80030aa:	0000      	movs	r0, r0
 80030ac:	0000      	movs	r0, r0
	...

080030b0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fd16 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 80030c4:	ee10 3a10 	vmov	r3, s0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa55 	bl	8000578 <__aeabi_f2d>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f97e 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 80030e0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80030e4:	a357      	add	r3, pc, #348	; (adr r3, 8003244 <_ZN8Odometry12calcPotitionEv+0x194>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ee:	f7fd fa9b 	bl	8000628 <__aeabi_dmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7fd fa38 	bl	8000578 <__aeabi_f2d>
 8003108:	4682      	mov	sl, r0
 800310a:	468b      	mov	fp, r1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003120:	f7fd fbac 	bl	800087c <__aeabi_ddiv>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4640      	mov	r0, r8
 800312a:	4649      	mov	r1, r9
 800312c:	f7fd f8c6 	bl	80002bc <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	ec43 2b17 	vmov	d7, r2, r3
 8003138:	eeb0 0a47 	vmov.f32	s0, s14
 800313c:	eef0 0a67 	vmov.f32	s1, s15
 8003140:	f00e fca6 	bl	8011a90 <cos>
 8003144:	ec53 2b10 	vmov	r2, r3, d0
 8003148:	4650      	mov	r0, sl
 800314a:	4659      	mov	r1, fp
 800314c:	f7fd fa6c 	bl	8000628 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	f7fd f8b0 	bl	80002bc <__adddf3>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7fd fa03 	bl	8000578 <__aeabi_f2d>
 8003172:	4682      	mov	sl, r0
 8003174:	468b      	mov	fp, r1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800318a:	f7fd fb77 	bl	800087c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4640      	mov	r0, r8
 8003194:	4649      	mov	r1, r9
 8003196:	f7fd f891 	bl	80002bc <__adddf3>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	ec43 2b17 	vmov	d7, r2, r3
 80031a2:	eeb0 0a47 	vmov.f32	s0, s14
 80031a6:	eef0 0a67 	vmov.f32	s1, s15
 80031aa:	f00e fcb5 	bl	8011b18 <sin>
 80031ae:	ec53 2b10 	vmov	r2, r3, d0
 80031b2:	4650      	mov	r0, sl
 80031b4:	4659      	mov	r1, fp
 80031b6:	f7fd fa37 	bl	8000628 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd f87b 	bl	80002bc <__adddf3>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80031dc:	461a      	mov	r2, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	f7fd f86c 	bl	80002bc <__adddf3>
 80031e4:	4603      	mov	r3, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80031f4:	4618      	mov	r0, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	f7fd fd0e 	bl	8000c18 <__aeabi_d2f>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003200:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003208:	4618      	mov	r0, r3
 800320a:	4621      	mov	r1, r4
 800320c:	f7fd fd04 	bl	8000c18 <__aeabi_d2f>
 8003210:	4602      	mov	r2, r0
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <_ZN8Odometry12calcPotitionEv+0x18c>)
 8003214:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	4621      	mov	r1, r4
 8003220:	f7fd fcfa 	bl	8000c18 <__aeabi_d2f>
 8003224:	4602      	mov	r2, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003234:	f3af 8000 	nop.w
 8003238:	2000026c 	.word	0x2000026c
 800323c:	20000270 	.word	0x20000270
 8003240:	20000274 	.word	0x20000274
 8003244:	d2f1a9fc 	.word	0xd2f1a9fc
 8003248:	3f50624d 	.word	0x3f50624d

0800324c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff2b 	bl	80030b0 <_ZN8Odometry12calcPotitionEv>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003262:	b490      	push	{r4, r7}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
	x_ = 0;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bc90      	pop	{r4, r7}
 800329c:	4770      	bx	lr
	...

080032a0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80032a0:	b490      	push	{r4, r7}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f04f 0400 	mov.w	r4, #0
 80032b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80032de:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80032e6:	4a29      	ldr	r2, [pc, #164]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f04f 0400 	mov.w	r4, #0
 80032fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <_ZN13PathFollowingC1Ev+0xec>)
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <_ZN13PathFollowingC1Ev+0xf0>)
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <_ZN13PathFollowingC1Ev+0xf4>)
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	f04f 0400 	mov.w	r4, #0
 800336e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <_ZN13PathFollowingC1Ev+0xf4>)
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bc90      	pop	{r4, r7}
 800338a:	4770      	bx	lr
 800338c:	20039d78 	.word	0x20039d78
 8003390:	20039d08 	.word	0x20039d08
 8003394:	20039d68 	.word	0x20039d68

08003398 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80033a0:	f001 fc90 	bl	8004cc4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80033a4:	f107 0318 	add.w	r3, r7, #24
 80033a8:	2201      	movs	r2, #1
 80033aa:	4915      	ldr	r1, [pc, #84]	; (8003400 <_ZN13PathFollowing4initEv+0x68>)
 80033ac:	4815      	ldr	r0, [pc, #84]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033ae:	f7fe f98b 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	2201      	movs	r2, #1
 80033b8:	4913      	ldr	r1, [pc, #76]	; (8003408 <_ZN13PathFollowing4initEv+0x70>)
 80033ba:	4812      	ldr	r0, [pc, #72]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033bc:	f7fe f984 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	2201      	movs	r2, #1
 80033c6:	4911      	ldr	r1, [pc, #68]	; (800340c <_ZN13PathFollowing4initEv+0x74>)
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <_ZN13PathFollowing4initEv+0x6c>)
 80033ca:	f7fe f97d 	bl	80016c8 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80033ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80033d2:	ed97 6b04 	vldr	d6, [r7, #16]
 80033d6:	ed97 5b02 	vldr	d5, [r7, #8]
 80033da:	eeb0 2a45 	vmov.f32	s4, s10
 80033de:	eef0 2a65 	vmov.f32	s5, s11
 80033e2:	eeb0 1a46 	vmov.f32	s2, s12
 80033e6:	eef0 1a66 	vmov.f32	s3, s13
 80033ea:	eeb0 0a47 	vmov.f32	s0, s14
 80033ee:	eef0 0a67 	vmov.f32	s1, s15
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f80c 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	08017b00 	.word	0x08017b00
 8003404:	08017b08 	.word	0x08017b08
 8003408:	08017b10 	.word	0x08017b10
 800340c:	08017b18 	.word	0x08017b18

08003410 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003410:	b490      	push	{r4, r7}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	61f8      	str	r0, [r7, #28]
 8003418:	ed87 0b04 	vstr	d0, [r7, #16]
 800341c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003420:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003426:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800342a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003430:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003434:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800343a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800343e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bc90      	pop	{r4, r7}
 800344a:	4770      	bx	lr
 800344c:	20039d78 	.word	0x20039d78

08003450 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003450:	b490      	push	{r4, r7}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <_ZN13PathFollowing8getKxValEv+0x24>)
 800345a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800345e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003462:	eeb0 0a47 	vmov.f32	s0, s14
 8003466:	eef0 0a67 	vmov.f32	s1, s15
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bc90      	pop	{r4, r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20039d78 	.word	0x20039d78

08003478 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003478:	b490      	push	{r4, r7}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003482:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003486:	ec44 3b17 	vmov	d7, r3, r4
}
 800348a:	eeb0 0a47 	vmov.f32	s0, s14
 800348e:	eef0 0a67 	vmov.f32	s1, s15
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20039d78 	.word	0x20039d78

080034a0 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 80034a0:	b490      	push	{r4, r7}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <_ZN13PathFollowing8getKtValEv+0x24>)
 80034aa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80034b2:	eeb0 0a47 	vmov.f32	s0, s14
 80034b6:	eef0 0a67 	vmov.f32	s1, s15
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc90      	pop	{r4, r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20039d78 	.word	0x20039d78

080034c8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80034d0:	2088      	movs	r0, #136	; 0x88
 80034d2:	f7fe fc60 	bl	8001d96 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80034d6:	2080      	movs	r0, #128	; 0x80
 80034d8:	f7fe fc5d 	bl	8001d96 <INA260_init>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	0000      	movs	r0, r0
	...

080034e8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80034f0:	2188      	movs	r1, #136	; 0x88
 80034f2:	2002      	movs	r0, #2
 80034f4:	f7fe fbec 	bl	8001cd0 <INA260_read>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f82a 	bl	8000554 <__aeabi_i2d>
 8003500:	a30c      	add	r3, pc, #48	; (adr r3, 8003534 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f88f 	bl	8000628 <__aeabi_dmul>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	4618      	mov	r0, r3
 8003510:	4621      	mov	r1, r4
 8003512:	f7fd fb81 	bl	8000c18 <__aeabi_d2f>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a03      	ldr	r2, [pc, #12]	; (8003530 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	f3af 8000 	nop.w
 8003530:	20000278 	.word	0x20000278
 8003534:	47ae147b 	.word	0x47ae147b
 8003538:	3f547ae1 	.word	0x3f547ae1

0800353c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	ee07 3a90 	vmov	s15, r3

}
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	0000      	movs	r0, r0
 800355c:	0000      	movs	r0, r0
	...

08003560 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd f801 	bl	8000578 <__aeabi_f2d>
 8003576:	a311      	add	r3, pc, #68	; (adr r3, 80035bc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fd fac6 	bl	8000b0c <__aeabi_dcmplt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000027c 	.word	0x2000027c
 80035bc:	9999999a 	.word	0x9999999a
 80035c0:	401d9999 	.word	0x401d9999

080035c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80035d0:	2102      	movs	r1, #2
 80035d2:	4822      	ldr	r0, [pc, #136]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 80035d4:	f004 ffcc 	bl	8008570 <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80035f0:	2108      	movs	r1, #8
 80035f2:	481a      	ldr	r0, [pc, #104]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 80035f4:	f004 ffbc 	bl	8008570 <HAL_GPIO_ReadPin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003610:	2110      	movs	r1, #16
 8003612:	4812      	ldr	r0, [pc, #72]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003614:	f004 ffac 	bl	8008570 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	480a      	ldr	r0, [pc, #40]	; (800365c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003634:	f004 ff9c 	bl	8008570 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003650:	89fb      	ldrh	r3, [r7, #14]

}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020c00 	.word	0x40020c00

08003660 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
{

}
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d111      	bne.n	80036ae <_ZN10SideSensor12updateStatusEt+0x36>
 800368a:	4b28      	ldr	r3, [pc, #160]	; (800372c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80036a6:	4b21      	ldr	r3, [pc, #132]	; (800372c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e010      	b.n	80036d0 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d10d      	bne.n	80036d0 <_ZN10SideSensor12updateStatusEt+0x58>
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d111      	bne.n	80036fc <_ZN10SideSensor12updateStatusEt+0x84>
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80036fa:	e011      	b.n	8003720 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d10d      	bne.n	8003720 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	f083 0302 	eor.w	r3, r3, #2
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	2000027e 	.word	0x2000027e
 8003730:	2000027f 	.word	0x2000027f

08003734 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003744:	3308      	adds	r3, #8
 8003746:	4611      	mov	r1, r2
 8003748:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800374c:	4618      	mov	r0, r3
 800374e:	f00f fa1f 	bl	8012b90 <memcpy>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08017b3c 	.word	0x08017b3c

08003788 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	ed97 0a00 	vldr	s0, [r7]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fa92 	bl	8002cd0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80037b6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7ff fabf 	bl	8002d3e <_ZN6Logger9storeLog2Ef>
	}

}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff faea 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a06      	ldr	r2, [pc, #24]	; (80037fc <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff faf7 	bl	8002dda <_ZN6Logger9saveLogs2EPKcS1_>
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	08017d30 	.word	0x08017d30
 80037f8:	08017d3c 	.word	0x08017d3c
 80037fc:	08017d48 	.word	0x08017d48

08003800 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800380e:	2b00      	cmp	r3, #0
 8003810:	d046      	beq.n	80038a0 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3204      	adds	r2, #4
 8003824:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003840:	3301      	adds	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003852:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800385a:	2bf9      	cmp	r3, #249	; 0xf9
 800385c:	d903      	bls.n	8003866 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	22fa      	movs	r2, #250	; 0xfa
 8003862:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685c      	ldr	r4, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fe81 	bl	8000578 <__aeabi_f2d>
 8003876:	4605      	mov	r5, r0
 8003878:	460e      	mov	r6, r1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003880:	eef1 7a67 	vneg.f32	s15, s15
 8003884:	ee17 3a90 	vmov	r3, s15
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe75 	bl	8000578 <__aeabi_f2d>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	ec43 2b11 	vmov	d1, r2, r3
 8003896:	ec46 5b10 	vmov	d0, r5, r6
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff fb68 	bl	8002f70 <_ZN5Motor8setRatioEdd>

	}

}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a8:	20000280 	.word	0x20000280

080038ac <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fab7 	bl	8002e4c <_ZN6Logger5startEv>
	processing_flag_ = true;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fab4 	bl	8002e6a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003930 <_ZN20SystemIdentification4stopEv+0x40>
 800391a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003930 <_ZN20SystemIdentification4stopEv+0x40>
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fb26 	bl	8002f70 <_ZN5Motor8setRatioEdd>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	f3af 8000 	nop.w
	...

08003938 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	615a      	str	r2, [r3, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	621a      	str	r2, [r3, #32]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
{
	motor_ = motor;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	635a      	str	r2, [r3, #52]	; 0x34

}
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f107 020c 	add.w	r2, r7, #12
 80039d8:	f107 0110 	add.w	r1, r7, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fce9 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80039e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80039e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80039f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039f6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7fc fdbc 	bl	8000578 <__aeabi_f2d>
 8003a00:	a30b      	add	r3, pc, #44	; (adr r3, 8003a30 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fe0f 	bl	8000628 <__aeabi_dmul>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4621      	mov	r1, r4
 8003a12:	f7fd f901 	bl	8000c18 <__aeabi_d2f>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	ee07 3a90 	vmov	s15, r3
}
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	1ab1d998 	.word	0x1ab1d998
 8003a34:	3f7830b5 	.word	0x3f7830b5

08003a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	ed93 7a00 	vldr	s14, [r3]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a50:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	; (8003b90 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x158>)
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a74:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003a80:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x158>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd77 	bl	8000578 <__aeabi_f2d>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9c:	ee17 0a90 	vmov	r0, s15
 8003aa0:	f7fc fd6a 	bl	8000578 <__aeabi_f2d>
 8003aa4:	a338      	add	r3, pc, #224	; (adr r3, 8003b88 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x150>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f7fc fdbd 	bl	8000628 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	f7fc fc01 	bl	80002bc <__adddf3>
 8003aba:	4603      	mov	r3, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	f7fd f8a9 	bl	8000c18 <__aeabi_d2f>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x158>)
 8003aca:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ad2:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x15c>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	edd7 6a05 	vldr	s13, [r7, #20]
 8003adc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae4:	ee17 0a90 	vmov	r0, s15
 8003ae8:	f7fc fd46 	bl	8000578 <__aeabi_f2d>
 8003aec:	a326      	add	r3, pc, #152	; (adr r3, 8003b88 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x150>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fd99 	bl	8000628 <__aeabi_dmul>
 8003af6:	4603      	mov	r3, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	4618      	mov	r0, r3
 8003afc:	4621      	mov	r1, r4
 8003afe:	f7fd f88b 	bl	8000c18 <__aeabi_d2f>
 8003b02:	4603      	mov	r3, r0
 8003b04:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8003b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x158>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3a:	ee17 0a90 	vmov	r0, s15
 8003b3e:	f7fc fd1b 	bl	8000578 <__aeabi_f2d>
 8003b42:	4605      	mov	r5, r0
 8003b44:	460e      	mov	r6, r1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b54:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5c:	ee17 0a90 	vmov	r0, s15
 8003b60:	f7fc fd0a 	bl	8000578 <__aeabi_f2d>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	ec43 2b11 	vmov	d1, r2, r3
 8003b6c:	ec46 5b10 	vmov	d0, r5, r6
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff f9fd 	bl	8002f70 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x15c>)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	f3af 8000 	nop.w
 8003b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b8c:	3f50624d 	.word	0x3f50624d
 8003b90:	20000288 	.word	0x20000288
 8003b94:	20000284 	.word	0x20000284

08003b98 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bcc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8003bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c08:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c0c:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	615a      	str	r2, [r3, #20]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c3a:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c3e:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fead 	bl	80039c8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fedd 	bl	8003a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	0000      	movs	r0, r0
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003ce0 <_ZN12VelocityCtrl4stopEv+0x30>
 8003cc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003ce0 <_ZN12VelocityCtrl4stopEv+0x30>
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff f94f 	bl	8002f70 <_ZN5Motor8setRatioEdd>

}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	f3af 8000 	nop.w
	...

08003ce8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	ee07 3a90 	vmov	s15, r3
}
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d12:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d013      	beq.n	8003d46 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003d1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d22:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003d26:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003d2e:	e000      	b.n	8003d32 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003d30:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f9      	beq.n	8003d30 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003d46:	687b      	ldr	r3, [r7, #4]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e009      	b.n	8003d7a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	60ba      	str	r2, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffc9 	bl	8003d06 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dbf1      	blt.n	8003d66 <_write+0x12>
  }
  return len;
 8003d82:	687b      	ldr	r3, [r7, #4]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 ff45 	bl	8005c28 <cppExit>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003dba:	f001 fea7 	bl	8005b0c <cppFlip1ms>

		tim6_timer++;
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dc6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d902      	bls.n	8003dd8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003de2:	f001 fef9 	bl	8005bd8 <cppFlip100ns>

		tim7_timer++;
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003dee:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d902      	bls.n	8003e00 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003e0a:	f001 feef 	bl	8005bec <cppFlip10ms>

		tim13_timer++;
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e16:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a06      	ldr	r2, [pc, #24]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d902      	bls.n	8003e28 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
	}

}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40001000 	.word	0x40001000
 8003e34:	200399e8 	.word	0x200399e8
 8003e38:	0001869f 	.word	0x0001869f
 8003e3c:	40001400 	.word	0x40001400
 8003e40:	20039a2c 	.word	0x20039a2c
 8003e44:	40001c00 	.word	0x40001c00
 8003e48:	20039a30 	.word	0x20039a30

08003e4c <init>:

void init()
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e56:	4808      	ldr	r0, [pc, #32]	; (8003e78 <init+0x2c>)
 8003e58:	f004 fba2 	bl	80085a0 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <init+0x30>)
 8003e5e:	f008 fa82 	bl	800c366 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003e62:	4807      	ldr	r0, [pc, #28]	; (8003e80 <init+0x34>)
 8003e64:	f008 fa7f 	bl	800c366 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003e68:	4806      	ldr	r0, [pc, #24]	; (8003e84 <init+0x38>)
 8003e6a:	f008 fa7c 	bl	800c366 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003e6e:	f001 fd93 	bl	8005998 <cppInit>

	//path_following_initialize();

}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	20039b14 	.word	0x20039b14
 8003e80:	20039cb8 	.word	0x20039cb8
 8003e84:	20039a34 	.word	0x20039a34

08003e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8c:	f003 f880 	bl	8006f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e90:	f000 f82a 	bl	8003ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e94:	f000 fdbc 	bl	8004a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e98:	f000 fd8a 	bl	80049b0 <MX_DMA_Init>
  MX_I2C2_Init();
 8003e9c:	f000 f9e8 	bl	8004270 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003ea0:	f000 fa14 	bl	80042cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003ea4:	f000 fa32 	bl	800430c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003ea8:	f000 fa66 	bl	8004378 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003eac:	f000 fb70 	bl	8004590 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003eb0:	f000 fc3c 	bl	800472c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003eb4:	f000 fd52 	bl	800495c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003eb8:	f00a fa28 	bl	800e30c <MX_FATFS_Init>
  MX_TIM6_Init();
 8003ebc:	f000 fbcc 	bl	8004658 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003ec0:	f000 f9a8 	bl	8004214 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003ec4:	f000 fb00 	bl	80044c8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003ec8:	f000 fc88 	bl	80047dc <MX_TIM10_Init>
  MX_TIM11_Init();
 8003ecc:	f000 fcd4 	bl	8004878 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003ed0:	f000 f898 	bl	8004004 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003ed4:	f000 fbf6 	bl	80046c4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003ed8:	f000 fd1c 	bl	8004914 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003edc:	f7ff ffb6 	bl	8003e4c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003ee0:	f001 feb2 	bl	8005c48 <cppLoop>
 8003ee4:	e7fc      	b.n	8003ee0 <main+0x58>
	...

08003ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0a4      	sub	sp, #144	; 0x90
 8003eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ef2:	2234      	movs	r2, #52	; 0x34
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f00e fe55 	bl	8012ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	223c      	movs	r2, #60	; 0x3c
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f00e fe46 	bl	8012ba6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <SystemClock_Config+0x114>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <SystemClock_Config+0x114>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <SystemClock_Config+0x114>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <SystemClock_Config+0x118>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a30      	ldr	r2, [pc, #192]	; (8004000 <SystemClock_Config+0x118>)
 8003f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <SystemClock_Config+0x118>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f64:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f66:	2308      	movs	r3, #8
 8003f68:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f6a:	23b4      	movs	r3, #180	; 0xb4
 8003f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003f76:	2308      	movs	r3, #8
 8003f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f005 ff44 	bl	8009e14 <HAL_RCC_OscConfig>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f92:	f000 fe93 	bl	8004cbc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f96:	f005 fabf 	bl	8009518 <HAL_PWREx_EnableOverDrive>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003fa0:	f000 fe8c 	bl	8004cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fac:	2300      	movs	r3, #0
 8003fae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003fb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fc0:	2105      	movs	r1, #5
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 faf8 	bl	80095b8 <HAL_RCC_ClockConfig>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003fce:	f000 fe75 	bl	8004cbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003fd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003fd6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 fcd7 	bl	8009998 <HAL_RCCEx_PeriphCLKConfig>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003ff0:	f000 fe64 	bl	8004cbc <Error_Handler>
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3790      	adds	r7, #144	; 0x90
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000

08004004 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800400a:	463b      	mov	r3, r7
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <MX_ADC2_Init+0x204>)
 8004018:	4a7c      	ldr	r2, [pc, #496]	; (800420c <MX_ADC2_Init+0x208>)
 800401a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800401c:	4b7a      	ldr	r3, [pc, #488]	; (8004208 <MX_ADC2_Init+0x204>)
 800401e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004022:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <MX_ADC2_Init+0x204>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800402a:	4b77      	ldr	r3, [pc, #476]	; (8004208 <MX_ADC2_Init+0x204>)
 800402c:	2201      	movs	r2, #1
 800402e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004030:	4b75      	ldr	r3, [pc, #468]	; (8004208 <MX_ADC2_Init+0x204>)
 8004032:	2201      	movs	r2, #1
 8004034:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004036:	4b74      	ldr	r3, [pc, #464]	; (8004208 <MX_ADC2_Init+0x204>)
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800403e:	4b72      	ldr	r3, [pc, #456]	; (8004208 <MX_ADC2_Init+0x204>)
 8004040:	2200      	movs	r2, #0
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004044:	4b70      	ldr	r3, [pc, #448]	; (8004208 <MX_ADC2_Init+0x204>)
 8004046:	4a72      	ldr	r2, [pc, #456]	; (8004210 <MX_ADC2_Init+0x20c>)
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800404a:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <MX_ADC2_Init+0x204>)
 800404c:	2200      	movs	r2, #0
 800404e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004050:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <MX_ADC2_Init+0x204>)
 8004052:	220e      	movs	r2, #14
 8004054:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <MX_ADC2_Init+0x204>)
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <MX_ADC2_Init+0x204>)
 8004060:	2201      	movs	r2, #1
 8004062:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004064:	4868      	ldr	r0, [pc, #416]	; (8004208 <MX_ADC2_Init+0x204>)
 8004066:	f003 f827 	bl	80070b8 <HAL_ADC_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004070:	f000 fe24 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004074:	230a      	movs	r3, #10
 8004076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004078:	2301      	movs	r3, #1
 800407a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800407c:	2306      	movs	r3, #6
 800407e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004080:	463b      	mov	r3, r7
 8004082:	4619      	mov	r1, r3
 8004084:	4860      	ldr	r0, [pc, #384]	; (8004208 <MX_ADC2_Init+0x204>)
 8004086:	f003 f96b 	bl	8007360 <HAL_ADC_ConfigChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004090:	f000 fe14 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004094:	230b      	movs	r3, #11
 8004096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004098:	2302      	movs	r3, #2
 800409a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800409c:	463b      	mov	r3, r7
 800409e:	4619      	mov	r1, r3
 80040a0:	4859      	ldr	r0, [pc, #356]	; (8004208 <MX_ADC2_Init+0x204>)
 80040a2:	f003 f95d 	bl	8007360 <HAL_ADC_ConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80040ac:	f000 fe06 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040b0:	230c      	movs	r3, #12
 80040b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80040b4:	2303      	movs	r3, #3
 80040b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040b8:	463b      	mov	r3, r7
 80040ba:	4619      	mov	r1, r3
 80040bc:	4852      	ldr	r0, [pc, #328]	; (8004208 <MX_ADC2_Init+0x204>)
 80040be:	f003 f94f 	bl	8007360 <HAL_ADC_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80040c8:	f000 fdf8 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80040cc:	230d      	movs	r3, #13
 80040ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80040d0:	2304      	movs	r3, #4
 80040d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040d4:	463b      	mov	r3, r7
 80040d6:	4619      	mov	r1, r3
 80040d8:	484b      	ldr	r0, [pc, #300]	; (8004208 <MX_ADC2_Init+0x204>)
 80040da:	f003 f941 	bl	8007360 <HAL_ADC_ConfigChannel>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80040e4:	f000 fdea 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80040ec:	2305      	movs	r3, #5
 80040ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040f0:	463b      	mov	r3, r7
 80040f2:	4619      	mov	r1, r3
 80040f4:	4844      	ldr	r0, [pc, #272]	; (8004208 <MX_ADC2_Init+0x204>)
 80040f6:	f003 f933 	bl	8007360 <HAL_ADC_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004100:	f000 fddc 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004104:	2301      	movs	r3, #1
 8004106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004108:	2306      	movs	r3, #6
 800410a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800410c:	463b      	mov	r3, r7
 800410e:	4619      	mov	r1, r3
 8004110:	483d      	ldr	r0, [pc, #244]	; (8004208 <MX_ADC2_Init+0x204>)
 8004112:	f003 f925 	bl	8007360 <HAL_ADC_ConfigChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800411c:	f000 fdce 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004120:	2302      	movs	r3, #2
 8004122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004124:	2307      	movs	r3, #7
 8004126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004128:	463b      	mov	r3, r7
 800412a:	4619      	mov	r1, r3
 800412c:	4836      	ldr	r0, [pc, #216]	; (8004208 <MX_ADC2_Init+0x204>)
 800412e:	f003 f917 	bl	8007360 <HAL_ADC_ConfigChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004138:	f000 fdc0 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800413c:	2303      	movs	r3, #3
 800413e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004140:	2308      	movs	r3, #8
 8004142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004144:	463b      	mov	r3, r7
 8004146:	4619      	mov	r1, r3
 8004148:	482f      	ldr	r0, [pc, #188]	; (8004208 <MX_ADC2_Init+0x204>)
 800414a:	f003 f909 	bl	8007360 <HAL_ADC_ConfigChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004154:	f000 fdb2 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004158:	2304      	movs	r3, #4
 800415a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800415c:	2309      	movs	r3, #9
 800415e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004160:	463b      	mov	r3, r7
 8004162:	4619      	mov	r1, r3
 8004164:	4828      	ldr	r0, [pc, #160]	; (8004208 <MX_ADC2_Init+0x204>)
 8004166:	f003 f8fb 	bl	8007360 <HAL_ADC_ConfigChannel>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004170:	f000 fda4 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004174:	2305      	movs	r3, #5
 8004176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004178:	230a      	movs	r3, #10
 800417a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800417c:	463b      	mov	r3, r7
 800417e:	4619      	mov	r1, r3
 8004180:	4821      	ldr	r0, [pc, #132]	; (8004208 <MX_ADC2_Init+0x204>)
 8004182:	f003 f8ed 	bl	8007360 <HAL_ADC_ConfigChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800418c:	f000 fd96 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004190:	2306      	movs	r3, #6
 8004192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004194:	230b      	movs	r3, #11
 8004196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004198:	463b      	mov	r3, r7
 800419a:	4619      	mov	r1, r3
 800419c:	481a      	ldr	r0, [pc, #104]	; (8004208 <MX_ADC2_Init+0x204>)
 800419e:	f003 f8df 	bl	8007360 <HAL_ADC_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80041a8:	f000 fd88 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80041ac:	2307      	movs	r3, #7
 80041ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80041b0:	230c      	movs	r3, #12
 80041b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041b4:	463b      	mov	r3, r7
 80041b6:	4619      	mov	r1, r3
 80041b8:	4813      	ldr	r0, [pc, #76]	; (8004208 <MX_ADC2_Init+0x204>)
 80041ba:	f003 f8d1 	bl	8007360 <HAL_ADC_ConfigChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80041c4:	f000 fd7a 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80041c8:	2308      	movs	r3, #8
 80041ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80041cc:	230d      	movs	r3, #13
 80041ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041d0:	463b      	mov	r3, r7
 80041d2:	4619      	mov	r1, r3
 80041d4:	480c      	ldr	r0, [pc, #48]	; (8004208 <MX_ADC2_Init+0x204>)
 80041d6:	f003 f8c3 	bl	8007360 <HAL_ADC_ConfigChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80041e0:	f000 fd6c 	bl	8004cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80041e4:	2309      	movs	r3, #9
 80041e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80041e8:	230e      	movs	r3, #14
 80041ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041ec:	463b      	mov	r3, r7
 80041ee:	4619      	mov	r1, r3
 80041f0:	4805      	ldr	r0, [pc, #20]	; (8004208 <MX_ADC2_Init+0x204>)
 80041f2:	f003 f8b5 	bl	8007360 <HAL_ADC_ConfigChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80041fc:	f000 fd5e 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200398b8 	.word	0x200398b8
 800420c:	40012100 	.word	0x40012100
 8004210:	0f000001 	.word	0x0f000001

08004214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <MX_I2C1_Init+0x50>)
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <MX_I2C1_Init+0x54>)
 800421c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <MX_I2C1_Init+0x50>)
 8004220:	4a12      	ldr	r2, [pc, #72]	; (800426c <MX_I2C1_Init+0x58>)
 8004222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <MX_I2C1_Init+0x50>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <MX_I2C1_Init+0x50>)
 800422c:	2200      	movs	r2, #0
 800422e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <MX_I2C1_Init+0x50>)
 8004232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <MX_I2C1_Init+0x50>)
 800423a:	2200      	movs	r2, #0
 800423c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <MX_I2C1_Init+0x50>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <MX_I2C1_Init+0x50>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <MX_I2C1_Init+0x50>)
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004250:	4804      	ldr	r0, [pc, #16]	; (8004264 <MX_I2C1_Init+0x50>)
 8004252:	f004 f9d7 	bl	8008604 <HAL_I2C_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800425c:	f000 fd2e 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20039900 	.word	0x20039900
 8004268:	40005400 	.word	0x40005400
 800426c:	000186a0 	.word	0x000186a0

08004270 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <MX_I2C2_Init+0x50>)
 8004276:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <MX_I2C2_Init+0x54>)
 8004278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <MX_I2C2_Init+0x50>)
 800427c:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <MX_I2C2_Init+0x58>)
 800427e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <MX_I2C2_Init+0x50>)
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <MX_I2C2_Init+0x50>)
 8004288:	2200      	movs	r2, #0
 800428a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <MX_I2C2_Init+0x50>)
 800428e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004292:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <MX_I2C2_Init+0x50>)
 8004296:	2200      	movs	r2, #0
 8004298:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <MX_I2C2_Init+0x50>)
 800429c:	2200      	movs	r2, #0
 800429e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <MX_I2C2_Init+0x50>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <MX_I2C2_Init+0x50>)
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80042ac:	4804      	ldr	r0, [pc, #16]	; (80042c0 <MX_I2C2_Init+0x50>)
 80042ae:	f004 f9a9 	bl	8008604 <HAL_I2C_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80042b8:	f000 fd00 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20039994 	.word	0x20039994
 80042c4:	40005800 	.word	0x40005800
 80042c8:	000186a0 	.word	0x000186a0

080042cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042d2:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <MX_SDIO_SD_Init+0x3c>)
 80042d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <MX_SDIO_SD_Init+0x38>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20039b94 	.word	0x20039b94
 8004308:	40012c00 	.word	0x40012c00

0800430c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <MX_SPI2_Init+0x64>)
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <MX_SPI2_Init+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <MX_SPI2_Init+0x64>)
 8004318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800431c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <MX_SPI2_Init+0x64>)
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <MX_SPI2_Init+0x64>)
 8004326:	2200      	movs	r2, #0
 8004328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <MX_SPI2_Init+0x64>)
 800432c:	2202      	movs	r2, #2
 800432e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <MX_SPI2_Init+0x64>)
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <MX_SPI2_Init+0x64>)
 8004338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <MX_SPI2_Init+0x64>)
 8004340:	2228      	movs	r2, #40	; 0x28
 8004342:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <MX_SPI2_Init+0x64>)
 8004346:	2200      	movs	r2, #0
 8004348:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <MX_SPI2_Init+0x64>)
 800434c:	2200      	movs	r2, #0
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <MX_SPI2_Init+0x64>)
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <MX_SPI2_Init+0x64>)
 8004358:	220a      	movs	r2, #10
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800435c:	4804      	ldr	r0, [pc, #16]	; (8004370 <MX_SPI2_Init+0x64>)
 800435e:	f007 fa83 	bl	800b868 <HAL_SPI_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004368:	f000 fca8 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200397e0 	.word	0x200397e0
 8004374:	40003800 	.word	0x40003800

08004378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b09a      	sub	sp, #104	; 0x68
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800437e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f00e fc0d 	bl	8012ba6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004396:	f107 0320 	add.w	r3, r7, #32
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	611a      	str	r2, [r3, #16]
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043aa:	463b      	mov	r3, r7
 80043ac:	2220      	movs	r2, #32
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f00e fbf8 	bl	8012ba6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043b6:	4b42      	ldr	r3, [pc, #264]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043b8:	4a42      	ldr	r2, [pc, #264]	; (80044c4 <MX_TIM1_Init+0x14c>)
 80043ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043bc:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c2:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043c8:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043d6:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043d8:	2200      	movs	r2, #0
 80043da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043e2:	4837      	ldr	r0, [pc, #220]	; (80044c0 <MX_TIM1_Init+0x148>)
 80043e4:	f007 ffe3 	bl	800c3ae <HAL_TIM_PWM_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80043ee:	f000 fc65 	bl	8004cbc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043f2:	2303      	movs	r3, #3
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043f6:	2300      	movs	r3, #0
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043fa:	2301      	movs	r3, #1
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043fe:	2300      	movs	r3, #0
 8004400:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004406:	2300      	movs	r3, #0
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800440a:	2301      	movs	r3, #1
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800440e:	2300      	movs	r3, #0
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004416:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800441a:	4619      	mov	r1, r3
 800441c:	4828      	ldr	r0, [pc, #160]	; (80044c0 <MX_TIM1_Init+0x148>)
 800441e:	f008 f82f 	bl	800c480 <HAL_TIM_Encoder_Init>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004428:	f000 fc48 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004430:	2300      	movs	r3, #0
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004438:	4619      	mov	r1, r3
 800443a:	4821      	ldr	r0, [pc, #132]	; (80044c0 <MX_TIM1_Init+0x148>)
 800443c:	f008 fd56 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004446:	f000 fc39 	bl	8004cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444a:	2360      	movs	r3, #96	; 0x60
 800444c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800445a:	2300      	movs	r3, #0
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004466:	f107 0320 	add.w	r3, r7, #32
 800446a:	2208      	movs	r2, #8
 800446c:	4619      	mov	r1, r3
 800446e:	4814      	ldr	r0, [pc, #80]	; (80044c0 <MX_TIM1_Init+0x148>)
 8004470:	f008 f9d8 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800447a:	f000 fc1f 	bl	8004cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800449c:	463b      	mov	r3, r7
 800449e:	4619      	mov	r1, r3
 80044a0:	4807      	ldr	r0, [pc, #28]	; (80044c0 <MX_TIM1_Init+0x148>)
 80044a2:	f008 fd9f 	bl	800cfe4 <HAL_TIMEx_ConfigBreakDeadTime>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80044ac:	f000 fc06 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <MX_TIM1_Init+0x148>)
 80044b2:	f000 fff3 	bl	800549c <HAL_TIM_MspPostInit>

}
 80044b6:	bf00      	nop
 80044b8:	3768      	adds	r7, #104	; 0x68
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20039b54 	.word	0x20039b54
 80044c4:	40010000 	.word	0x40010000

080044c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ce:	f107 0320 	add.w	r3, r7, #32
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	611a      	str	r2, [r3, #16]
 80044e6:	615a      	str	r2, [r3, #20]
 80044e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <MX_TIM3_Init+0xc0>)
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <MX_TIM3_Init+0xc4>)
 80044ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <MX_TIM3_Init+0xc0>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <MX_TIM3_Init+0xc0>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <MX_TIM3_Init+0xc0>)
 80044fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004504:	4b20      	ldr	r3, [pc, #128]	; (8004588 <MX_TIM3_Init+0xc0>)
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450a:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <MX_TIM3_Init+0xc0>)
 800450c:	2200      	movs	r2, #0
 800450e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004510:	481d      	ldr	r0, [pc, #116]	; (8004588 <MX_TIM3_Init+0xc0>)
 8004512:	f007 ff4c 	bl	800c3ae <HAL_TIM_PWM_Init>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800451c:	f000 fbce 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004528:	f107 0320 	add.w	r3, r7, #32
 800452c:	4619      	mov	r1, r3
 800452e:	4816      	ldr	r0, [pc, #88]	; (8004588 <MX_TIM3_Init+0xc0>)
 8004530:	f008 fcdc 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800453a:	f000 fbbf 	bl	8004cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800453e:	2360      	movs	r3, #96	; 0x60
 8004540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	2200      	movs	r2, #0
 8004552:	4619      	mov	r1, r3
 8004554:	480c      	ldr	r0, [pc, #48]	; (8004588 <MX_TIM3_Init+0xc0>)
 8004556:	f008 f965 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004560:	f000 fbac 	bl	8004cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004564:	1d3b      	adds	r3, r7, #4
 8004566:	2204      	movs	r2, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4807      	ldr	r0, [pc, #28]	; (8004588 <MX_TIM3_Init+0xc0>)
 800456c:	f008 f95a 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004576:	f000 fba1 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800457a:	4803      	ldr	r0, [pc, #12]	; (8004588 <MX_TIM3_Init+0xc0>)
 800457c:	f000 ff8e 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004580:	bf00      	nop
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200399ec 	.word	0x200399ec
 800458c:	40000400 	.word	0x40000400

08004590 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004596:	f107 0320 	add.w	r3, r7, #32
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	615a      	str	r2, [r3, #20]
 80045b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045b2:	4b27      	ldr	r3, [pc, #156]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <MX_TIM4_Init+0xc4>)
 80045b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80045c4:	4b22      	ldr	r3, [pc, #136]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80045ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045d2:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80045d8:	481d      	ldr	r0, [pc, #116]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045da:	f007 fee8 	bl	800c3ae <HAL_TIM_PWM_Init>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80045e4:	f000 fb6a 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045f0:	f107 0320 	add.w	r3, r7, #32
 80045f4:	4619      	mov	r1, r3
 80045f6:	4816      	ldr	r0, [pc, #88]	; (8004650 <MX_TIM4_Init+0xc0>)
 80045f8:	f008 fc78 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004602:	f000 fb5b 	bl	8004cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004606:	2360      	movs	r3, #96	; 0x60
 8004608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004616:	1d3b      	adds	r3, r7, #4
 8004618:	2208      	movs	r2, #8
 800461a:	4619      	mov	r1, r3
 800461c:	480c      	ldr	r0, [pc, #48]	; (8004650 <MX_TIM4_Init+0xc0>)
 800461e:	f008 f901 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004628:	f000 fb48 	bl	8004cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800462c:	1d3b      	adds	r3, r7, #4
 800462e:	220c      	movs	r2, #12
 8004630:	4619      	mov	r1, r3
 8004632:	4807      	ldr	r0, [pc, #28]	; (8004650 <MX_TIM4_Init+0xc0>)
 8004634:	f008 f8f6 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800463e:	f000 fb3d 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004642:	4803      	ldr	r0, [pc, #12]	; (8004650 <MX_TIM4_Init+0xc0>)
 8004644:	f000 ff2a 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004648:	bf00      	nop
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20039878 	.word	0x20039878
 8004654:	40000800 	.word	0x40000800

08004658 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800465e:	463b      	mov	r3, r7
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <MX_TIM6_Init+0x64>)
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <MX_TIM6_Init+0x68>)
 800466a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800466c:	4b13      	ldr	r3, [pc, #76]	; (80046bc <MX_TIM6_Init+0x64>)
 800466e:	2259      	movs	r2, #89	; 0x59
 8004670:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <MX_TIM6_Init+0x64>)
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <MX_TIM6_Init+0x64>)
 800467a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800467e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <MX_TIM6_Init+0x64>)
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004686:	480d      	ldr	r0, [pc, #52]	; (80046bc <MX_TIM6_Init+0x64>)
 8004688:	f007 fe42 	bl	800c310 <HAL_TIM_Base_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004692:	f000 fb13 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800469e:	463b      	mov	r3, r7
 80046a0:	4619      	mov	r1, r3
 80046a2:	4806      	ldr	r0, [pc, #24]	; (80046bc <MX_TIM6_Init+0x64>)
 80046a4:	f008 fc22 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80046ae:	f000 fb05 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20039b14 	.word	0x20039b14
 80046c0:	40001000 	.word	0x40001000

080046c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ca:	463b      	mov	r3, r7
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <MX_TIM7_Init+0x60>)
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <MX_TIM7_Init+0x64>)
 80046d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <MX_TIM7_Init+0x60>)
 80046da:	22b3      	movs	r2, #179	; 0xb3
 80046dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_TIM7_Init+0x60>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_TIM7_Init+0x60>)
 80046e6:	2231      	movs	r2, #49	; 0x31
 80046e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_TIM7_Init+0x60>)
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <MX_TIM7_Init+0x60>)
 80046f2:	f007 fe0d 	bl	800c310 <HAL_TIM_Base_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80046fc:	f000 fade 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004708:	463b      	mov	r3, r7
 800470a:	4619      	mov	r1, r3
 800470c:	4805      	ldr	r0, [pc, #20]	; (8004724 <MX_TIM7_Init+0x60>)
 800470e:	f008 fbed 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004718:	f000 fad0 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20039cb8 	.word	0x20039cb8
 8004728:	40001400 	.word	0x40001400

0800472c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004732:	f107 030c 	add.w	r3, r7, #12
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f00e fa33 	bl	8012ba6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <MX_TIM8_Init+0xa8>)
 800474a:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <MX_TIM8_Init+0xac>)
 800474c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <MX_TIM8_Init+0xa8>)
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <MX_TIM8_Init+0xa8>)
 8004756:	2210      	movs	r2, #16
 8004758:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <MX_TIM8_Init+0xa8>)
 800475c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004760:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <MX_TIM8_Init+0xa8>)
 8004764:	2200      	movs	r2, #0
 8004766:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <MX_TIM8_Init+0xa8>)
 800476a:	2200      	movs	r2, #0
 800476c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <MX_TIM8_Init+0xa8>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004774:	2303      	movs	r3, #3
 8004776:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800478c:	2301      	movs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004798:	f107 030c 	add.w	r3, r7, #12
 800479c:	4619      	mov	r1, r3
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <MX_TIM8_Init+0xa8>)
 80047a0:	f007 fe6e 	bl	800c480 <HAL_TIM_Encoder_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80047aa:	f000 fa87 	bl	8004cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4806      	ldr	r0, [pc, #24]	; (80047d4 <MX_TIM8_Init+0xa8>)
 80047bc:	f008 fb96 	bl	800ceec <HAL_TIMEx_MasterConfigSynchronization>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80047c6:	f000 fa79 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80047ca:	bf00      	nop
 80047cc:	3730      	adds	r7, #48	; 0x30
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20039838 	.word	0x20039838
 80047d8:	40010400 	.word	0x40010400

080047dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <MX_TIM10_Init+0x94>)
 80047f6:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <MX_TIM10_Init+0x98>)
 80047f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <MX_TIM10_Init+0x94>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <MX_TIM10_Init+0x94>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <MX_TIM10_Init+0x94>)
 8004808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800480c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <MX_TIM10_Init+0x94>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <MX_TIM10_Init+0x94>)
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800481a:	4815      	ldr	r0, [pc, #84]	; (8004870 <MX_TIM10_Init+0x94>)
 800481c:	f007 fd78 	bl	800c310 <HAL_TIM_Base_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004826:	f000 fa49 	bl	8004cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800482a:	4811      	ldr	r0, [pc, #68]	; (8004870 <MX_TIM10_Init+0x94>)
 800482c:	f007 fdbf 	bl	800c3ae <HAL_TIM_PWM_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004836:	f000 fa41 	bl	8004cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800483a:	2360      	movs	r3, #96	; 0x60
 800483c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	2200      	movs	r2, #0
 800484e:	4619      	mov	r1, r3
 8004850:	4807      	ldr	r0, [pc, #28]	; (8004870 <MX_TIM10_Init+0x94>)
 8004852:	f007 ffe7 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800485c:	f000 fa2e 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004860:	4803      	ldr	r0, [pc, #12]	; (8004870 <MX_TIM10_Init+0x94>)
 8004862:	f000 fe1b 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004866:	bf00      	nop
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20039954 	.word	0x20039954
 8004874:	40014400 	.word	0x40014400

08004878 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]
 800488c:	615a      	str	r2, [r3, #20]
 800488e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <MX_TIM11_Init+0x94>)
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <MX_TIM11_Init+0x98>)
 8004894:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <MX_TIM11_Init+0x94>)
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <MX_TIM11_Init+0x94>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <MX_TIM11_Init+0x94>)
 80048a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <MX_TIM11_Init+0x94>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048b0:	4b16      	ldr	r3, [pc, #88]	; (800490c <MX_TIM11_Init+0x94>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80048b6:	4815      	ldr	r0, [pc, #84]	; (800490c <MX_TIM11_Init+0x94>)
 80048b8:	f007 fd2a 	bl	800c310 <HAL_TIM_Base_Init>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80048c2:	f000 f9fb 	bl	8004cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80048c6:	4811      	ldr	r0, [pc, #68]	; (800490c <MX_TIM11_Init+0x94>)
 80048c8:	f007 fd71 	bl	800c3ae <HAL_TIM_PWM_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80048d2:	f000 f9f3 	bl	8004cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048d6:	2360      	movs	r3, #96	; 0x60
 80048d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	2200      	movs	r2, #0
 80048ea:	4619      	mov	r1, r3
 80048ec:	4807      	ldr	r0, [pc, #28]	; (800490c <MX_TIM11_Init+0x94>)
 80048ee:	f007 ff99 	bl	800c824 <HAL_TIM_PWM_ConfigChannel>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80048f8:	f000 f9e0 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <MX_TIM11_Init+0x94>)
 80048fe:	f000 fdcd 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004902:	bf00      	nop
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20039a74 	.word	0x20039a74
 8004910:	40014800 	.word	0x40014800

08004914 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_TIM13_Init+0x40>)
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <MX_TIM13_Init+0x44>)
 800491c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <MX_TIM13_Init+0x40>)
 8004920:	2259      	movs	r2, #89	; 0x59
 8004922:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <MX_TIM13_Init+0x40>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <MX_TIM13_Init+0x40>)
 800492c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004930:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <MX_TIM13_Init+0x40>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_TIM13_Init+0x40>)
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_TIM13_Init+0x40>)
 8004940:	f007 fce6 	bl	800c310 <HAL_TIM_Base_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800494a:	f000 f9b7 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20039a34 	.word	0x20039a34
 8004958:	40001c00 	.word	0x40001c00

0800495c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <MX_USART2_UART_Init+0x50>)
 8004964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800496c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004982:	220c      	movs	r2, #12
 8004984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004994:	f008 fb8c 	bl	800d0b0 <HAL_UART_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800499e:	f000 f98d 	bl	8004cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20039c18 	.word	0x20039c18
 80049ac:	40004400 	.word	0x40004400

080049b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <MX_DMA_Init+0x5c>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <MX_DMA_Init+0x5c>)
 80049c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <MX_DMA_Init+0x5c>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	203a      	movs	r0, #58	; 0x3a
 80049d8:	f003 f84d 	bl	8007a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80049dc:	203a      	movs	r0, #58	; 0x3a
 80049de:	f003 f866 	bl	8007aae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	203b      	movs	r0, #59	; 0x3b
 80049e8:	f003 f845 	bl	8007a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80049ec:	203b      	movs	r0, #59	; 0x3b
 80049ee:	f003 f85e 	bl	8007aae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	2045      	movs	r0, #69	; 0x45
 80049f8:	f003 f83d 	bl	8007a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80049fc:	2045      	movs	r0, #69	; 0x45
 80049fe:	f003 f856 	bl	8007aae <HAL_NVIC_EnableIRQ>

}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	; 0x30
 8004a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a16:	f107 031c 	add.w	r3, r7, #28
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	4b9c      	ldr	r3, [pc, #624]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4a9b      	ldr	r2, [pc, #620]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a30:	f043 0310 	orr.w	r3, r3, #16
 8004a34:	6313      	str	r3, [r2, #48]	; 0x30
 8004a36:	4b99      	ldr	r3, [pc, #612]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	4b95      	ldr	r3, [pc, #596]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	4a94      	ldr	r2, [pc, #592]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	6313      	str	r3, [r2, #48]	; 0x30
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	4b8e      	ldr	r3, [pc, #568]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a8d      	ldr	r2, [pc, #564]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b87      	ldr	r3, [pc, #540]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a86      	ldr	r2, [pc, #536]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b84      	ldr	r3, [pc, #528]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	4b80      	ldr	r3, [pc, #512]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	4a7f      	ldr	r2, [pc, #508]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa6:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	4b79      	ldr	r3, [pc, #484]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	4a78      	ldr	r2, [pc, #480]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac2:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <MX_GPIO_Init+0x28c>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ad4:	4872      	ldr	r0, [pc, #456]	; (8004ca0 <MX_GPIO_Init+0x290>)
 8004ad6:	f003 fd63 	bl	80085a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004ada:	2200      	movs	r2, #0
 8004adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ae0:	4870      	ldr	r0, [pc, #448]	; (8004ca4 <MX_GPIO_Init+0x294>)
 8004ae2:	f003 fd5d 	bl	80085a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004aec:	486e      	ldr	r0, [pc, #440]	; (8004ca8 <MX_GPIO_Init+0x298>)
 8004aee:	f003 fd57 	bl	80085a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004af2:	2200      	movs	r2, #0
 8004af4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004af8:	486c      	ldr	r0, [pc, #432]	; (8004cac <MX_GPIO_Init+0x29c>)
 8004afa:	f003 fd51 	bl	80085a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004afe:	2304      	movs	r3, #4
 8004b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b02:	4b6b      	ldr	r3, [pc, #428]	; (8004cb0 <MX_GPIO_Init+0x2a0>)
 8004b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b0a:	f107 031c 	add.w	r3, r7, #28
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4863      	ldr	r0, [pc, #396]	; (8004ca0 <MX_GPIO_Init+0x290>)
 8004b12:	f003 fb83 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b16:	230f      	movs	r3, #15
 8004b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b22:	f107 031c 	add.w	r3, r7, #28
 8004b26:	4619      	mov	r1, r3
 8004b28:	4862      	ldr	r0, [pc, #392]	; (8004cb4 <MX_GPIO_Init+0x2a4>)
 8004b2a:	f003 fb77 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b2e:	23e1      	movs	r3, #225	; 0xe1
 8004b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b32:	2303      	movs	r3, #3
 8004b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3a:	f107 031c 	add.w	r3, r7, #28
 8004b3e:	4619      	mov	r1, r3
 8004b40:	485a      	ldr	r0, [pc, #360]	; (8004cac <MX_GPIO_Init+0x29c>)
 8004b42:	f003 fb6b 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b46:	2303      	movs	r3, #3
 8004b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	4619      	mov	r1, r3
 8004b58:	4852      	ldr	r0, [pc, #328]	; (8004ca4 <MX_GPIO_Init+0x294>)
 8004b5a:	f003 fb5f 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b5e:	2304      	movs	r3, #4
 8004b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b62:	2300      	movs	r3, #0
 8004b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b66:	2301      	movs	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6a:	f107 031c 	add.w	r3, r7, #28
 8004b6e:	4619      	mov	r1, r3
 8004b70:	484c      	ldr	r0, [pc, #304]	; (8004ca4 <MX_GPIO_Init+0x294>)
 8004b72:	f003 fb53 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004b76:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b80:	2301      	movs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b84:	f107 031c 	add.w	r3, r7, #28
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4845      	ldr	r0, [pc, #276]	; (8004ca0 <MX_GPIO_Init+0x290>)
 8004b8c:	f003 fb46 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ba2:	f107 031c 	add.w	r3, r7, #28
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	483d      	ldr	r0, [pc, #244]	; (8004ca0 <MX_GPIO_Init+0x290>)
 8004baa:	f003 fb37 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc0:	f107 031c 	add.w	r3, r7, #28
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4837      	ldr	r0, [pc, #220]	; (8004ca4 <MX_GPIO_Init+0x294>)
 8004bc8:	f003 fb28 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <MX_GPIO_Init+0x2a8>)
 8004bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	4619      	mov	r1, r3
 8004be0:	4831      	ldr	r0, [pc, #196]	; (8004ca8 <MX_GPIO_Init+0x298>)
 8004be2:	f003 fb1b 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bec:	2301      	movs	r3, #1
 8004bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bf8:	f107 031c 	add.w	r3, r7, #28
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	482a      	ldr	r0, [pc, #168]	; (8004ca8 <MX_GPIO_Init+0x298>)
 8004c00:	f003 fb0c 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c16:	f107 031c 	add.w	r3, r7, #28
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4822      	ldr	r0, [pc, #136]	; (8004ca8 <MX_GPIO_Init+0x298>)
 8004c1e:	f003 fafd 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004c22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004c26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c34:	f107 031c 	add.w	r3, r7, #28
 8004c38:	4619      	mov	r1, r3
 8004c3a:	481c      	ldr	r0, [pc, #112]	; (8004cac <MX_GPIO_Init+0x29c>)
 8004c3c:	f003 faee 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c4e:	f107 031c 	add.w	r3, r7, #28
 8004c52:	4619      	mov	r1, r3
 8004c54:	4815      	ldr	r0, [pc, #84]	; (8004cac <MX_GPIO_Init+0x29c>)
 8004c56:	f003 fae1 	bl	800821c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004c5a:	239b      	movs	r3, #155	; 0x9b
 8004c5c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c62:	2301      	movs	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	480e      	ldr	r0, [pc, #56]	; (8004ca8 <MX_GPIO_Init+0x298>)
 8004c6e:	f003 fad5 	bl	800821c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	2008      	movs	r0, #8
 8004c78:	f002 fefd 	bl	8007a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004c7c:	2008      	movs	r0, #8
 8004c7e:	f002 ff16 	bl	8007aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	2017      	movs	r0, #23
 8004c88:	f002 fef5 	bl	8007a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c8c:	2017      	movs	r0, #23
 8004c8e:	f002 ff0e 	bl	8007aae <HAL_NVIC_EnableIRQ>

}
 8004c92:	bf00      	nop
 8004c94:	3730      	adds	r7, #48	; 0x30
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40020400 	.word	0x40020400
 8004ca8:	40020c00 	.word	0x40020c00
 8004cac:	40020000 	.word	0x40020000
 8004cb0:	10310000 	.word	0x10310000
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	10110000 	.word	0x10110000

08004cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cc0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cc2:	e7fe      	b.n	8004cc2 <Error_Handler+0x6>

08004cc4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_MspInit+0x4c>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_MspInit+0x4c>)
 8004ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_MspInit+0x4c>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_MspInit+0x4c>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_MspInit+0x4c>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_MspInit+0x4c>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	; 0x30
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2c:	f107 031c 	add.w	r3, r7, #28
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_ADC_MspInit+0x148>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f040 808e 	bne.w	8004e64 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	4a47      	ldr	r2, [pc, #284]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d56:	6453      	str	r3, [r2, #68]	; 0x44
 8004d58:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	4b41      	ldr	r3, [pc, #260]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6313      	str	r3, [r2, #48]	; 0x30
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	4a39      	ldr	r2, [pc, #228]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d90:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	4a32      	ldr	r2, [pc, #200]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dac:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <HAL_ADC_MspInit+0x14c>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004db8:	230f      	movs	r3, #15
 8004dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	4619      	mov	r1, r3
 8004dca:	482a      	ldr	r0, [pc, #168]	; (8004e74 <HAL_ADC_MspInit+0x150>)
 8004dcc:	f003 fa26 	bl	800821c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004dd0:	23ff      	movs	r3, #255	; 0xff
 8004dd2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ddc:	f107 031c 	add.w	r3, r7, #28
 8004de0:	4619      	mov	r1, r3
 8004de2:	4825      	ldr	r0, [pc, #148]	; (8004e78 <HAL_ADC_MspInit+0x154>)
 8004de4:	f003 fa1a 	bl	800821c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004de8:	2303      	movs	r3, #3
 8004dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dec:	2303      	movs	r3, #3
 8004dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4820      	ldr	r0, [pc, #128]	; (8004e7c <HAL_ADC_MspInit+0x158>)
 8004dfc:	f003 fa0e 	bl	800821c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e02:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_ADC_MspInit+0x160>)
 8004e04:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004e06:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e0c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004e1a:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e20:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e22:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e30:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e38:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e40:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e4a:	f002 fe4b 	bl	8007ae4 <HAL_DMA_Init>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004e54:	f7ff ff32 	bl	8004cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_ADC_MspInit+0x15c>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004e64:	bf00      	nop
 8004e66:	3730      	adds	r7, #48	; 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40012100 	.word	0x40012100
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	20039c58 	.word	0x20039c58
 8004e84:	40026440 	.word	0x40026440

08004e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	; 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e90:	f107 031c 	add.w	r3, r7, #28
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a32      	ldr	r2, [pc, #200]	; (8004f70 <HAL_I2C_MspInit+0xe8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d12c      	bne.n	8004f04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4a30      	ldr	r2, [pc, #192]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004eb4:	f043 0302 	orr.w	r3, r3, #2
 8004eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ec6:	23c0      	movs	r3, #192	; 0xc0
 8004ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eca:	2312      	movs	r3, #18
 8004ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eda:	f107 031c 	add.w	r3, r7, #28
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4825      	ldr	r0, [pc, #148]	; (8004f78 <HAL_I2C_MspInit+0xf0>)
 8004ee2:	f003 f99b 	bl	800821c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f02:	e031      	b.n	8004f68 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_I2C_MspInit+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d12c      	bne.n	8004f68 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f30:	2312      	movs	r3, #18
 8004f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f34:	2301      	movs	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f40:	f107 031c 	add.w	r3, r7, #28
 8004f44:	4619      	mov	r1, r3
 8004f46:	480c      	ldr	r0, [pc, #48]	; (8004f78 <HAL_I2C_MspInit+0xf0>)
 8004f48:	f003 f968 	bl	800821c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_I2C_MspInit+0xec>)
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3730      	adds	r7, #48	; 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40005400 	.word	0x40005400
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40005800 	.word	0x40005800

08004f80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a69      	ldr	r2, [pc, #420]	; (8005144 <HAL_SD_MspInit+0x1c4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f040 80cb 	bne.w	800513a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	4b67      	ldr	r3, [pc, #412]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fac:	4a66      	ldr	r2, [pc, #408]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8004fb4:	4b64      	ldr	r3, [pc, #400]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4a5f      	ldr	r2, [pc, #380]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd0:	4b5d      	ldr	r3, [pc, #372]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fe6:	f043 0308 	orr.w	r3, r3, #8
 8004fea:	6313      	str	r3, [r2, #48]	; 0x30
 8004fec:	4b56      	ldr	r3, [pc, #344]	; (8005148 <HAL_SD_MspInit+0x1c8>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004ff8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004ffc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffe:	2302      	movs	r3, #2
 8005000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005006:	2303      	movs	r3, #3
 8005008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800500a:	230c      	movs	r3, #12
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	4619      	mov	r1, r3
 8005014:	484d      	ldr	r0, [pc, #308]	; (800514c <HAL_SD_MspInit+0x1cc>)
 8005016:	f003 f901 	bl	800821c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800501a:	2304      	movs	r3, #4
 800501c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501e:	2302      	movs	r3, #2
 8005020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005026:	2303      	movs	r3, #3
 8005028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800502a:	230c      	movs	r3, #12
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	4846      	ldr	r0, [pc, #280]	; (8005150 <HAL_SD_MspInit+0x1d0>)
 8005036:	f003 f8f1 	bl	800821c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800503a:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 800503c:	4a46      	ldr	r2, [pc, #280]	; (8005158 <HAL_SD_MspInit+0x1d8>)
 800503e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005040:	4b44      	ldr	r3, [pc, #272]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005046:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005050:	2200      	movs	r2, #0
 8005052:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800505a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800505c:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 800505e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005062:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005064:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800506a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800506c:	4b39      	ldr	r3, [pc, #228]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 800506e:	2220      	movs	r2, #32
 8005070:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005072:	4b38      	ldr	r3, [pc, #224]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005074:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005078:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 800507c:	2204      	movs	r2, #4
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005080:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005082:	2203      	movs	r2, #3
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005086:	4b33      	ldr	r3, [pc, #204]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005088:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005090:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005096:	482f      	ldr	r0, [pc, #188]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 8005098:	f002 fd24 	bl	8007ae4 <HAL_DMA_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80050a2:	f7ff fe0b 	bl	8004cbc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
 80050ac:	4a29      	ldr	r2, [pc, #164]	; (8005154 <HAL_SD_MspInit+0x1d4>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80050b2:	4b2a      	ldr	r3, [pc, #168]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <HAL_SD_MspInit+0x1e0>)
 80050b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050be:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050c2:	2240      	movs	r2, #64	; 0x40
 80050c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050c6:	4b25      	ldr	r3, [pc, #148]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050d4:	4b21      	ldr	r3, [pc, #132]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050da:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80050e4:	4b1d      	ldr	r3, [pc, #116]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050e6:	2220      	movs	r2, #32
 80050e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050ea:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050f4:	2204      	movs	r2, #4
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050f8:	4b18      	ldr	r3, [pc, #96]	; (800515c <HAL_SD_MspInit+0x1dc>)
 80050fa:	2203      	movs	r2, #3
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80050fe:	4b17      	ldr	r3, [pc, #92]	; (800515c <HAL_SD_MspInit+0x1dc>)
 8005100:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_SD_MspInit+0x1dc>)
 8005108:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800510e:	4813      	ldr	r0, [pc, #76]	; (800515c <HAL_SD_MspInit+0x1dc>)
 8005110:	f002 fce8 	bl	8007ae4 <HAL_DMA_Init>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800511a:	f7ff fdcf 	bl	8004cbc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0e      	ldr	r2, [pc, #56]	; (800515c <HAL_SD_MspInit+0x1dc>)
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c
 8005124:	4a0d      	ldr	r2, [pc, #52]	; (800515c <HAL_SD_MspInit+0x1dc>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	2031      	movs	r0, #49	; 0x31
 8005130:	f002 fca1 	bl	8007a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005134:	2031      	movs	r0, #49	; 0x31
 8005136:	f002 fcba 	bl	8007aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800513a:	bf00      	nop
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40023800 	.word	0x40023800
 800514c:	40020800 	.word	0x40020800
 8005150:	40020c00 	.word	0x40020c00
 8005154:	20039780 	.word	0x20039780
 8005158:	40026458 	.word	0x40026458
 800515c:	20039ab4 	.word	0x20039ab4
 8005160:	400264a0 	.word	0x400264a0

08005164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <HAL_SPI_MspInit+0x84>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d12c      	bne.n	80051e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <HAL_SPI_MspInit+0x88>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <HAL_SPI_MspInit+0x88>)
 8005190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <HAL_SPI_MspInit+0x88>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b11      	ldr	r3, [pc, #68]	; (80051ec <HAL_SPI_MspInit+0x88>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	4a10      	ldr	r2, [pc, #64]	; (80051ec <HAL_SPI_MspInit+0x88>)
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	6313      	str	r3, [r2, #48]	; 0x30
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_SPI_MspInit+0x88>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80051be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80051c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c4:	2302      	movs	r3, #2
 80051c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051cc:	2303      	movs	r3, #3
 80051ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051d0:	2305      	movs	r3, #5
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4619      	mov	r1, r3
 80051da:	4805      	ldr	r0, [pc, #20]	; (80051f0 <HAL_SPI_MspInit+0x8c>)
 80051dc:	f003 f81e 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051e0:	bf00      	nop
 80051e2:	3728      	adds	r7, #40	; 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40003800 	.word	0x40003800
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40020400 	.word	0x40020400

080051f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	; 0x30
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 031c 	add.w	r3, r7, #28
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_TIM_PWM_MspInit+0xd4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d12d      	bne.n	8005272 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4a24      	ldr	r2, [pc, #144]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 800523c:	f043 0310 	orr.w	r3, r3, #16
 8005240:	6313      	str	r3, [r2, #48]	; 0x30
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800524e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005254:	2302      	movs	r3, #2
 8005256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005260:	2301      	movs	r3, #1
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	4619      	mov	r1, r3
 800526a:	4819      	ldr	r0, [pc, #100]	; (80052d0 <HAL_TIM_PWM_MspInit+0xdc>)
 800526c:	f002 ffd6 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005270:	e026      	b.n	80052c0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_TIM_PWM_MspInit+0xe0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10e      	bne.n	800529a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	4a11      	ldr	r2, [pc, #68]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	6413      	str	r3, [r2, #64]	; 0x40
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	693b      	ldr	r3, [r7, #16]
}
 8005298:	e012      	b.n	80052c0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <HAL_TIM_PWM_MspInit+0xe4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	4a07      	ldr	r2, [pc, #28]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	6413      	str	r3, [r2, #64]	; 0x40
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_TIM_PWM_MspInit+0xd8>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	3730      	adds	r7, #48	; 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800

080052dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3e      	ldr	r2, [pc, #248]	; (80053e4 <HAL_TIM_Base_MspInit+0x108>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d116      	bne.n	800531c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 80052f8:	f043 0310 	orr.w	r3, r3, #16
 80052fc:	6413      	str	r3, [r2, #64]	; 0x40
 80052fe:	4b3a      	ldr	r3, [pc, #232]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	2101      	movs	r1, #1
 800530e:	2036      	movs	r0, #54	; 0x36
 8005310:	f002 fbb1 	bl	8007a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005314:	2036      	movs	r0, #54	; 0x36
 8005316:	f002 fbca 	bl	8007aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800531a:	e05e      	b.n	80053da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_TIM_Base_MspInit+0x110>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d116      	bne.n	8005354 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	2037      	movs	r0, #55	; 0x37
 8005348:	f002 fb95 	bl	8007a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800534c:	2037      	movs	r0, #55	; 0x37
 800534e:	f002 fbae 	bl	8007aae <HAL_NVIC_EnableIRQ>
}
 8005352:	e042      	b.n	80053da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <HAL_TIM_Base_MspInit+0x114>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10e      	bne.n	800537c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	6453      	str	r3, [r2, #68]	; 0x44
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	697b      	ldr	r3, [r7, #20]
}
 800537a:	e02e      	b.n	80053da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <HAL_TIM_Base_MspInit+0x118>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005394:	6453      	str	r3, [r2, #68]	; 0x44
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
}
 80053a2:	e01a      	b.n	80053da <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <HAL_TIM_Base_MspInit+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d115      	bne.n	80053da <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	6413      	str	r3, [r2, #64]	; 0x40
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_TIM_Base_MspInit+0x10c>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	202c      	movs	r0, #44	; 0x2c
 80053d0:	f002 fb51 	bl	8007a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80053d4:	202c      	movs	r0, #44	; 0x2c
 80053d6:	f002 fb6a 	bl	8007aae <HAL_NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40001000 	.word	0x40001000
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40001400 	.word	0x40001400
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	40001c00 	.word	0x40001c00

080053fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005404:	f107 0314 	add.w	r3, r7, #20
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_TIM_Encoder_MspInit+0x94>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d133      	bne.n	8005486 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	6453      	str	r3, [r2, #68]	; 0x44
 800542e:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 8005444:	f043 0304 	orr.w	r3, r3, #4
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_TIM_Encoder_MspInit+0x98>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005456:	23c0      	movs	r3, #192	; 0xc0
 8005458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545a:	2302      	movs	r3, #2
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005462:	2300      	movs	r3, #0
 8005464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005466:	2303      	movs	r3, #3
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800546a:	f107 0314 	add.w	r3, r7, #20
 800546e:	4619      	mov	r1, r3
 8005470:	4809      	ldr	r0, [pc, #36]	; (8005498 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005472:	f002 fed3 	bl	800821c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	202c      	movs	r0, #44	; 0x2c
 800547c:	f002 fafb 	bl	8007a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005480:	202c      	movs	r0, #44	; 0x2c
 8005482:	f002 fb14 	bl	8007aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005486:	bf00      	nop
 8005488:	3728      	adds	r7, #40	; 0x28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40010400 	.word	0x40010400
 8005494:	40023800 	.word	0x40023800
 8005498:	40020800 	.word	0x40020800

0800549c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a4:	f107 031c 	add.w	r3, r7, #28
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5c      	ldr	r2, [pc, #368]	; (800562c <HAL_TIM_MspPostInit+0x190>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d11f      	bne.n	80054fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	4b5b      	ldr	r3, [pc, #364]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	4a5a      	ldr	r2, [pc, #360]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80054c8:	f043 0310 	orr.w	r3, r3, #16
 80054cc:	6313      	str	r3, [r2, #48]	; 0x30
 80054ce:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80054da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054ec:	2301      	movs	r3, #1
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054f0:	f107 031c 	add.w	r3, r7, #28
 80054f4:	4619      	mov	r1, r3
 80054f6:	484f      	ldr	r0, [pc, #316]	; (8005634 <HAL_TIM_MspPostInit+0x198>)
 80054f8:	f002 fe90 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80054fc:	e091      	b.n	8005622 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a4d      	ldr	r2, [pc, #308]	; (8005638 <HAL_TIM_MspPostInit+0x19c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d11e      	bne.n	8005546 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a47      	ldr	r2, [pc, #284]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 8005512:	f043 0302 	orr.w	r3, r3, #2
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
 8005518:	4b45      	ldr	r3, [pc, #276]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005524:	2330      	movs	r3, #48	; 0x30
 8005526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005528:	2302      	movs	r3, #2
 800552a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005534:	2302      	movs	r3, #2
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	4619      	mov	r1, r3
 800553e:	483f      	ldr	r0, [pc, #252]	; (800563c <HAL_TIM_MspPostInit+0x1a0>)
 8005540:	f002 fe6c 	bl	800821c <HAL_GPIO_Init>
}
 8005544:	e06d      	b.n	8005622 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <HAL_TIM_MspPostInit+0x1a4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d11f      	bne.n	8005590 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	4b36      	ldr	r3, [pc, #216]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a35      	ldr	r2, [pc, #212]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800556c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557a:	2300      	movs	r3, #0
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800557e:	2302      	movs	r3, #2
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005582:	f107 031c 	add.w	r3, r7, #28
 8005586:	4619      	mov	r1, r3
 8005588:	482e      	ldr	r0, [pc, #184]	; (8005644 <HAL_TIM_MspPostInit+0x1a8>)
 800558a:	f002 fe47 	bl	800821c <HAL_GPIO_Init>
}
 800558e:	e048      	b.n	8005622 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <HAL_TIM_MspPostInit+0x1ac>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d11f      	bne.n	80055da <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	4a23      	ldr	r2, [pc, #140]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	6313      	str	r3, [r2, #48]	; 0x30
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055bc:	2302      	movs	r3, #2
 80055be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80055c8:	2303      	movs	r3, #3
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055cc:	f107 031c 	add.w	r3, r7, #28
 80055d0:	4619      	mov	r1, r3
 80055d2:	481a      	ldr	r0, [pc, #104]	; (800563c <HAL_TIM_MspPostInit+0x1a0>)
 80055d4:	f002 fe22 	bl	800821c <HAL_GPIO_Init>
}
 80055d8:	e023      	b.n	8005622 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1b      	ldr	r2, [pc, #108]	; (800564c <HAL_TIM_MspPostInit+0x1b0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d11e      	bne.n	8005622 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	4a10      	ldr	r2, [pc, #64]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	6313      	str	r3, [r2, #48]	; 0x30
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <HAL_TIM_MspPostInit+0x194>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005606:	2302      	movs	r3, #2
 8005608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560e:	2300      	movs	r3, #0
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005612:	2303      	movs	r3, #3
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005616:	f107 031c 	add.w	r3, r7, #28
 800561a:	4619      	mov	r1, r3
 800561c:	4807      	ldr	r0, [pc, #28]	; (800563c <HAL_TIM_MspPostInit+0x1a0>)
 800561e:	f002 fdfd 	bl	800821c <HAL_GPIO_Init>
}
 8005622:	bf00      	nop
 8005624:	3730      	adds	r7, #48	; 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40023800 	.word	0x40023800
 8005634:	40021000 	.word	0x40021000
 8005638:	40000400 	.word	0x40000400
 800563c:	40020400 	.word	0x40020400
 8005640:	40000800 	.word	0x40000800
 8005644:	40020c00 	.word	0x40020c00
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <HAL_UART_MspInit+0x84>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d12b      	bne.n	80056ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_UART_MspInit+0x88>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_UART_MspInit+0x88>)
 800567c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <HAL_UART_MspInit+0x88>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_UART_MspInit+0x88>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <HAL_UART_MspInit+0x88>)
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <HAL_UART_MspInit+0x88>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80056aa:	2360      	movs	r3, #96	; 0x60
 80056ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ae:	2302      	movs	r3, #2
 80056b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b6:	2303      	movs	r3, #3
 80056b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056ba:	2307      	movs	r3, #7
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	4619      	mov	r1, r3
 80056c4:	4805      	ldr	r0, [pc, #20]	; (80056dc <HAL_UART_MspInit+0x8c>)
 80056c6:	f002 fda9 	bl	800821c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80056ca:	bf00      	nop
 80056cc:	3728      	adds	r7, #40	; 0x28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40004400 	.word	0x40004400
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40020c00 	.word	0x40020c00

080056e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056e4:	e7fe      	b.n	80056e4 <NMI_Handler+0x4>

080056e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ea:	e7fe      	b.n	80056ea <HardFault_Handler+0x4>

080056ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056f0:	e7fe      	b.n	80056f0 <MemManage_Handler+0x4>

080056f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056f6:	e7fe      	b.n	80056f6 <BusFault_Handler+0x4>

080056f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056fc:	e7fe      	b.n	80056fc <UsageFault_Handler+0x4>

080056fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056fe:	b480      	push	{r7}
 8005700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005702:	bf00      	nop
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800572c:	f001 fc82 	bl	8007034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005730:	bf00      	nop
 8005732:	bd80      	pop	{r7, pc}

08005734 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005738:	2004      	movs	r0, #4
 800573a:	f002 ff4b 	bl	80085d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800573e:	bf00      	nop
 8005740:	bd80      	pop	{r7, pc}

08005742 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005746:	f44f 7080 	mov.w	r0, #256	; 0x100
 800574a:	f002 ff43 	bl	80085d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005758:	4803      	ldr	r0, [pc, #12]	; (8005768 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800575a:	f006 ff5a 	bl	800c612 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800575e:	4803      	ldr	r0, [pc, #12]	; (800576c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005760:	f006 ff57 	bl	800c612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005764:	bf00      	nop
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20039838 	.word	0x20039838
 800576c:	20039a34 	.word	0x20039a34

08005770 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005774:	4802      	ldr	r0, [pc, #8]	; (8005780 <SDIO_IRQHandler+0x10>)
 8005776:	f004 fff3 	bl	800a760 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20039b94 	.word	0x20039b94

08005784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005788:	4802      	ldr	r0, [pc, #8]	; (8005794 <TIM6_DAC_IRQHandler+0x10>)
 800578a:	f006 ff42 	bl	800c612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20039b14 	.word	0x20039b14

08005798 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800579c:	4802      	ldr	r0, [pc, #8]	; (80057a8 <TIM7_IRQHandler+0x10>)
 800579e:	f006 ff38 	bl	800c612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20039cb8 	.word	0x20039cb8

080057ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80057b0:	4802      	ldr	r0, [pc, #8]	; (80057bc <DMA2_Stream2_IRQHandler+0x10>)
 80057b2:	f002 fabf 	bl	8007d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20039c58 	.word	0x20039c58

080057c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80057c4:	4802      	ldr	r0, [pc, #8]	; (80057d0 <DMA2_Stream3_IRQHandler+0x10>)
 80057c6:	f002 fab5 	bl	8007d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20039780 	.word	0x20039780

080057d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <DMA2_Stream6_IRQHandler+0x10>)
 80057da:	f002 faab 	bl	8007d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20039ab4 	.word	0x20039ab4

080057e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e00a      	b.n	8005810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057fa:	f3af 8000 	nop.w
 80057fe:	4601      	mov	r1, r0
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	60ba      	str	r2, [r7, #8]
 8005806:	b2ca      	uxtb	r2, r1
 8005808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3301      	adds	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	dbf0      	blt.n	80057fa <_read+0x12>
	}

return len;
 8005818:	687b      	ldr	r3, [r7, #4]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	return -1;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800584a:	605a      	str	r2, [r3, #4]
	return 0;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <_isatty>:

int _isatty(int file)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
	return 1;
 8005862:	2301      	movs	r3, #1
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
	return 0;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <_sbrk+0x5c>)
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <_sbrk+0x60>)
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <_sbrk+0x64>)
 80058aa:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <_sbrk+0x68>)
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <_sbrk+0x64>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058bc:	f00d f93e 	bl	8012b3c <__errno>
 80058c0:	4602      	mov	r2, r0
 80058c2:	230c      	movs	r3, #12
 80058c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	e009      	b.n	80058e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <_sbrk+0x64>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <_sbrk+0x64>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <_sbrk+0x64>)
 80058dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20050000 	.word	0x20050000
 80058ec:	00000800 	.word	0x00000800
 80058f0:	2000028c 	.word	0x2000028c
 80058f4:	2003be08 	.word	0x2003be08

080058f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <SystemInit+0x28>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <SystemInit+0x28>)
 8005904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <SystemInit+0x28>)
 800590e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005912:	609a      	str	r2, [r3, #8]
#endif
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	lcd_clear();
 8005928:	f7fb fbba 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800592c:	2100      	movs	r1, #0
 800592e:	2000      	movs	r0, #0
 8005930:	f7fb fbc6 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005934:	4814      	ldr	r0, [pc, #80]	; (8005988 <batteryLowMode+0x64>)
 8005936:	f7fb fbed 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800593a:	2101      	movs	r1, #1
 800593c:	2000      	movs	r0, #0
 800593e:	f7fb fbbf 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005942:	4812      	ldr	r0, [pc, #72]	; (800598c <batteryLowMode+0x68>)
 8005944:	f7fb fbe6 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005948:	2152      	movs	r1, #82	; 0x52
 800594a:	4811      	ldr	r0, [pc, #68]	; (8005990 <batteryLowMode+0x6c>)
 800594c:	f7fc faa2 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005950:	2064      	movs	r0, #100	; 0x64
 8005952:	f001 fb8f 	bl	8007074 <HAL_Delay>
		led.fullColor('Y');
 8005956:	2159      	movs	r1, #89	; 0x59
 8005958:	480d      	ldr	r0, [pc, #52]	; (8005990 <batteryLowMode+0x6c>)
 800595a:	f7fc fa9b 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800595e:	2064      	movs	r0, #100	; 0x64
 8005960:	f001 fb88 	bl	8007074 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005964:	480b      	ldr	r0, [pc, #44]	; (8005994 <batteryLowMode+0x70>)
 8005966:	f7fc fa31 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800596a:	4603      	mov	r3, r0
 800596c:	2b02      	cmp	r3, #2
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0e6      	beq.n	8005948 <batteryLowMode+0x24>
			HAL_Delay(500);
 800597a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800597e:	f001 fb79 	bl	8007074 <HAL_Delay>
			break;
 8005982:	bf00      	nop
		}
	}
}
 8005984:	bf00      	nop
 8005986:	bd80      	pop	{r7, pc}
 8005988:	08017d54 	.word	0x08017d54
 800598c:	08017d5c 	.word	0x08017d5c
 8005990:	20000598 	.word	0x20000598
 8005994:	2000058c 	.word	0x2000058c

08005998 <cppInit>:

void cppInit(void)
{
 8005998:	b598      	push	{r3, r4, r7, lr}
 800599a:	af00      	add	r7, sp, #0
	lcd_init();
 800599c:	f7fb fb3c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80059a0:	4844      	ldr	r0, [pc, #272]	; (8005ab4 <cppInit+0x11c>)
 80059a2:	f7fd fd91 	bl	80034c8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80059a6:	2064      	movs	r0, #100	; 0x64
 80059a8:	f001 fb64 	bl	8007074 <HAL_Delay>
	power_sensor.updateValues();
 80059ac:	4841      	ldr	r0, [pc, #260]	; (8005ab4 <cppInit+0x11c>)
 80059ae:	f7fd fd9b 	bl	80034e8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80059b2:	f7fb fb75 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80059b6:	2100      	movs	r1, #0
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fb fb81 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80059be:	483e      	ldr	r0, [pc, #248]	; (8005ab8 <cppInit+0x120>)
 80059c0:	f7fb fba8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059c4:	2101      	movs	r1, #1
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fb fb7a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80059cc:	4839      	ldr	r0, [pc, #228]	; (8005ab4 <cppInit+0x11c>)
 80059ce:	f7fd fdb5 	bl	800353c <_ZN11PowerSensor17getButteryVoltageEv>
 80059d2:	ee10 3a10 	vmov	r3, s0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fa fdce 	bl	8000578 <__aeabi_f2d>
 80059dc:	4603      	mov	r3, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	461a      	mov	r2, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	4835      	ldr	r0, [pc, #212]	; (8005abc <cppInit+0x124>)
 80059e6:	f7fb fb95 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80059ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ee:	f001 fb41 	bl	8007074 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80059f2:	4830      	ldr	r0, [pc, #192]	; (8005ab4 <cppInit+0x11c>)
 80059f4:	f7fd fdb4 	bl	8003560 <_ZN11PowerSensor12butteryCheckEv>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <cppInit+0x6a>
 80059fe:	f7ff ff91 	bl	8005924 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a02:	482f      	ldr	r0, [pc, #188]	; (8005ac0 <cppInit+0x128>)
 8005a04:	f7fd f912 	bl	8002c2c <_ZN6Logger10sdCardInitEv>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <cppInit+0x86>
		led.fullColor('G');
 8005a0e:	2147      	movs	r1, #71	; 0x47
 8005a10:	482c      	ldr	r0, [pc, #176]	; (8005ac4 <cppInit+0x12c>)
 8005a12:	f7fc fa3f 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a16:	2064      	movs	r0, #100	; 0x64
 8005a18:	f001 fb2c 	bl	8007074 <HAL_Delay>
 8005a1c:	e006      	b.n	8005a2c <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005a1e:	2152      	movs	r1, #82	; 0x52
 8005a20:	4828      	ldr	r0, [pc, #160]	; (8005ac4 <cppInit+0x12c>)
 8005a22:	f7fc fa37 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a26:	2064      	movs	r0, #100	; 0x64
 8005a28:	f001 fb24 	bl	8007074 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005a2c:	4826      	ldr	r0, [pc, #152]	; (8005ac8 <cppInit+0x130>)
 8005a2e:	f7fc fb8d 	bl	800214c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005a32:	4826      	ldr	r0, [pc, #152]	; (8005acc <cppInit+0x134>)
 8005a34:	f7fd fa3a 	bl	8002eac <_ZN5Motor4initEv>
	encoder.init();
 8005a38:	4825      	ldr	r0, [pc, #148]	; (8005ad0 <cppInit+0x138>)
 8005a3a:	f7fb fbaf 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005a3e:	4825      	ldr	r0, [pc, #148]	; (8005ad4 <cppInit+0x13c>)
 8005a40:	f7fb ffd0 	bl	80019e4 <_ZN3IMU4initEv>
	line_trace.init();
 8005a44:	4824      	ldr	r0, [pc, #144]	; (8005ad8 <cppInit+0x140>)
 8005a46:	f7fc ffcf 	bl	80029e8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005a4a:	481f      	ldr	r0, [pc, #124]	; (8005ac8 <cppInit+0x130>)
 8005a4c:	f7fc fcbe 	bl	80023cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a54:	f001 fb0e 	bl	8007074 <HAL_Delay>

	led.fullColor('M');
 8005a58:	214d      	movs	r1, #77	; 0x4d
 8005a5a:	481a      	ldr	r0, [pc, #104]	; (8005ac4 <cppInit+0x12c>)
 8005a5c:	f7fc fa1a 	bl	8001e94 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005a60:	481c      	ldr	r0, [pc, #112]	; (8005ad4 <cppInit+0x13c>)
 8005a62:	f7fc f88f 	bl	8001b84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005a66:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8005adc <cppInit+0x144>
 8005a6a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005ae0 <cppInit+0x148>
 8005a6e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005ae4 <cppInit+0x14c>
 8005a72:	4819      	ldr	r0, [pc, #100]	; (8005ad8 <cppInit+0x140>)
 8005a74:	f7fc ffec 	bl	8002a50 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8005a78:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005ae8 <cppInit+0x150>
 8005a7c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005aec <cppInit+0x154>
 8005a80:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005af0 <cppInit+0x158>
 8005a84:	481b      	ldr	r0, [pc, #108]	; (8005af4 <cppInit+0x15c>)
 8005a86:	f7fe f8b9 	bl	8003bfc <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8005a8a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005af8 <cppInit+0x160>
 8005a8e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005afc <cppInit+0x164>
 8005a92:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005b00 <cppInit+0x168>
 8005a96:	4817      	ldr	r0, [pc, #92]	; (8005af4 <cppInit+0x15c>)
 8005a98:	f7fe f8c9 	bl	8003c2e <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005a9c:	480c      	ldr	r0, [pc, #48]	; (8005ad0 <cppInit+0x138>)
 8005a9e:	f7fb fcac 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005aa2:	4818      	ldr	r0, [pc, #96]	; (8005b04 <cppInit+0x16c>)
 8005aa4:	f7fd fbdd 	bl	8003262 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005aa8:	4817      	ldr	r0, [pc, #92]	; (8005b08 <cppInit+0x170>)
 8005aaa:	f7fd fc75 	bl	8003398 <_ZN13PathFollowing4initEv>

}
 8005aae:	bf00      	nop
 8005ab0:	bd98      	pop	{r3, r4, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000059c 	.word	0x2000059c
 8005ab8:	08017d60 	.word	0x08017d60
 8005abc:	08017d68 	.word	0x08017d68
 8005ac0:	200005bc 	.word	0x200005bc
 8005ac4:	20000598 	.word	0x20000598
 8005ac8:	20000290 	.word	0x20000290
 8005acc:	20000594 	.word	0x20000594
 8005ad0:	2001f9c4 	.word	0x2001f9c4
 8005ad4:	200005a8 	.word	0x200005a8
 8005ad8:	2001fa14 	.word	0x2001fa14
 8005adc:	00000000 	.word	0x00000000
 8005ae0:	360637bd 	.word	0x360637bd
 8005ae4:	3a03126f 	.word	0x3a03126f
 8005ae8:	3cceca68 	.word	0x3cceca68
 8005aec:	4180f06f 	.word	0x4180f06f
 8005af0:	3fea2d0e 	.word	0x3fea2d0e
 8005af4:	2001f9dc 	.word	0x2001f9dc
 8005af8:	3ab7dacd 	.word	0x3ab7dacd
 8005afc:	3f5e3fbc 	.word	0x3f5e3fbc
 8005b00:	3d8eefa2 	.word	0x3d8eefa2
 8005b04:	2001fa80 	.word	0x2001fa80
 8005b08:	2001fcc0 	.word	0x2001fcc0

08005b0c <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b10:	4825      	ldr	r0, [pc, #148]	; (8005ba8 <cppFlip1ms+0x9c>)
 8005b12:	f7fc fb79 	bl	8002208 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b16:	4825      	ldr	r0, [pc, #148]	; (8005bac <cppFlip1ms+0xa0>)
 8005b18:	f7fb ff92 	bl	8001a40 <_ZN3IMU12updateValuesEv>
	mon_zg = imu.getOmega();
 8005b1c:	4823      	ldr	r0, [pc, #140]	; (8005bac <cppFlip1ms+0xa0>)
 8005b1e:	f7fb ffe7 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005b22:	eef0 7a40 	vmov.f32	s15, s0
 8005b26:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <cppFlip1ms+0xa4>)
 8005b28:	edc3 7a00 	vstr	s15, [r3]
	mon_offset = imu.getOffsetVal();
 8005b2c:	481f      	ldr	r0, [pc, #124]	; (8005bac <cppFlip1ms+0xa0>)
 8005b2e:	f7fc f8bf 	bl	8001cb0 <_ZN3IMU12getOffsetValEv>
 8005b32:	eef0 7a40 	vmov.f32	s15, s0
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <cppFlip1ms+0xa8>)
 8005b38:	edc3 7a00 	vstr	s15, [r3]
	encoder.updateCnt();
 8005b3c:	481e      	ldr	r0, [pc, #120]	; (8005bb8 <cppFlip1ms+0xac>)
 8005b3e:	f7fb fb4f 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005b42:	481e      	ldr	r0, [pc, #120]	; (8005bbc <cppFlip1ms+0xb0>)
 8005b44:	f7fc ffe8 	bl	8002b18 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005b48:	481d      	ldr	r0, [pc, #116]	; (8005bc0 <cppFlip1ms+0xb4>)
 8005b4a:	f7fe f889 	bl	8003c60 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005b4e:	481d      	ldr	r0, [pc, #116]	; (8005bc4 <cppFlip1ms+0xb8>)
 8005b50:	f7fd fb7c 	bl	800324c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005b54:	481c      	ldr	r0, [pc, #112]	; (8005bc8 <cppFlip1ms+0xbc>)
 8005b56:	f7fd f9bb 	bl	8002ed0 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 8005b5a:	4819      	ldr	r0, [pc, #100]	; (8005bc0 <cppFlip1ms+0xb4>)
 8005b5c:	f7fe f8c4 	bl	8003ce8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005b60:	eef0 7a40 	vmov.f32	s15, s0
 8005b64:	eeb0 0a67 	vmov.f32	s0, s15
 8005b68:	4818      	ldr	r0, [pc, #96]	; (8005bcc <cppFlip1ms+0xc0>)
 8005b6a:	f7fd f8b1 	bl	8002cd0 <_ZN6Logger8storeLogEf>
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <cppFlip1ms+0xc4>)
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <cppFlip1ms+0xc4>)
 8005b78:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <cppFlip1ms+0xc4>)
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d90c      	bls.n	8005b9c <cppFlip1ms+0x90>
		sys_ident.inOutputStore(imu.getOmega());
 8005b82:	480a      	ldr	r0, [pc, #40]	; (8005bac <cppFlip1ms+0xa0>)
 8005b84:	f7fb ffb4 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005b88:	eef0 7a40 	vmov.f32	s15, s0
 8005b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b90:	4810      	ldr	r0, [pc, #64]	; (8005bd4 <cppFlip1ms+0xc8>)
 8005b92:	f7fd fdf9 	bl	8003788 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <cppFlip1ms+0xc4>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005b9c:	4806      	ldr	r0, [pc, #24]	; (8005bb8 <cppFlip1ms+0xac>)
 8005b9e:	f7fb fc3b 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000290 	.word	0x20000290
 8005bac:	200005a8 	.word	0x200005a8
 8005bb0:	200373ec 	.word	0x200373ec
 8005bb4:	200373f0 	.word	0x200373f0
 8005bb8:	2001f9c4 	.word	0x2001f9c4
 8005bbc:	2001fa14 	.word	0x2001fa14
 8005bc0:	2001f9dc 	.word	0x2001f9dc
 8005bc4:	2001fa80 	.word	0x2001fa80
 8005bc8:	20000594 	.word	0x20000594
 8005bcc:	200005bc 	.word	0x200005bc
 8005bd0:	200373f4 	.word	0x200373f4
 8005bd4:	2001fab0 	.word	0x2001fab0

08005bd8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005bdc:	4802      	ldr	r0, [pc, #8]	; (8005be8 <cppFlip100ns+0x10>)
 8005bde:	f7fc fac5 	bl	800216c <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000290 	.word	0x20000290

08005bec <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <cppFlip10ms+0x30>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <cppFlip10ms+0x30>)
 8005bfa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <cppFlip10ms+0x30>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d905      	bls.n	8005c10 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005c04:	4806      	ldr	r0, [pc, #24]	; (8005c20 <cppFlip10ms+0x34>)
 8005c06:	f7fd fdfb 	bl	8003800 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <cppFlip10ms+0x30>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <cppFlip10ms+0x30>)
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <cppFlip10ms+0x38>)
 8005c16:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005c18:	bf00      	nop
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200373f6 	.word	0x200373f6
 8005c20:	2001fab0 	.word	0x2001fab0
 8005c24:	200373e8 	.word	0x200373e8

08005c28 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	4619      	mov	r1, r3
 8005c36:	4803      	ldr	r0, [pc, #12]	; (8005c44 <cppExit+0x1c>)
 8005c38:	f7fd fd1e 	bl	8003678 <_ZN10SideSensor12updateStatusEt>
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000588 	.word	0x20000588

08005c48 <cppLoop>:

void cppLoop(void)
{
 8005c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	b08b      	sub	sp, #44	; 0x2c
 8005c4e:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005c50:	48bb      	ldr	r0, [pc, #748]	; (8005f40 <cppLoop+0x2f8>)
 8005c52:	f7fd fcb7 	bl	80035c4 <_ZN12RotarySwitch8getValueEv>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	f201 80bb 	bhi.w	8006dd4 <cppLoop+0x118c>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <cppLoop+0x1c>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005ca5 	.word	0x08005ca5
 8005c68:	0800616b 	.word	0x0800616b
 8005c6c:	080061f9 	.word	0x080061f9
 8005c70:	080062dd 	.word	0x080062dd
 8005c74:	0800638d 	.word	0x0800638d
 8005c78:	0800641b 	.word	0x0800641b
 8005c7c:	080064e1 	.word	0x080064e1
 8005c80:	080065f5 	.word	0x080065f5
 8005c84:	08006695 	.word	0x08006695
 8005c88:	08006bcd 	.word	0x08006bcd
 8005c8c:	08006c69 	.word	0x08006c69
 8005c90:	08006d03 	.word	0x08006d03
 8005c94:	08006d2d 	.word	0x08006d2d
 8005c98:	08006d57 	.word	0x08006d57
 8005c9c:	08006d81 	.word	0x08006d81
 8005ca0:	08006dab 	.word	0x08006dab
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005ca4:	2152      	movs	r1, #82	; 0x52
 8005ca6:	48a7      	ldr	r0, [pc, #668]	; (8005f44 <cppLoop+0x2fc>)
 8005ca8:	f7fc f8f4 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005cac:	f7fb f9f8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f7fb fa04 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8005cb8:	48a3      	ldr	r0, [pc, #652]	; (8005f48 <cppLoop+0x300>)
 8005cba:	f7fc fee2 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8005cc2:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8005f4c <cppLoop+0x304>
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	ee17 0a90 	vmov	r0, s15
 8005cce:	f7fa fc53 	bl	8000578 <__aeabi_f2d>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4623      	mov	r3, r4
 8005cda:	489d      	ldr	r0, [pc, #628]	; (8005f50 <cppLoop+0x308>)
 8005cdc:	f7fb fa1a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7fb f9ec 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*1000);
 8005ce8:	4897      	ldr	r0, [pc, #604]	; (8005f48 <cppLoop+0x300>)
 8005cea:	f7fc fed9 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005cee:	eeb0 7a40 	vmov.f32	s14, s0
 8005cf2:	eddf 7a98 	vldr	s15, [pc, #608]	; 8005f54 <cppLoop+0x30c>
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	ee17 0a90 	vmov	r0, s15
 8005cfe:	f7fa fc3b 	bl	8000578 <__aeabi_f2d>
 8005d02:	4605      	mov	r5, r0
 8005d04:	460e      	mov	r6, r1
 8005d06:	4890      	ldr	r0, [pc, #576]	; (8005f48 <cppLoop+0x300>)
 8005d08:	f7fc fed9 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005d0c:	eeb0 7a40 	vmov.f32	s14, s0
 8005d10:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8005f4c <cppLoop+0x304>
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	ee17 0a90 	vmov	r0, s15
 8005d1c:	f7fa fc2c 	bl	8000578 <__aeabi_f2d>
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	e9cd 3400 	strd	r3, r4, [sp]
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4633      	mov	r3, r6
 8005d2c:	488a      	ldr	r0, [pc, #552]	; (8005f58 <cppLoop+0x310>)
 8005d2e:	f7fb f9f1 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8005d32:	4b8a      	ldr	r3, [pc, #552]	; (8005f5c <cppLoop+0x314>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f3bf 8f5b 	dmb	ish
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d015      	beq.n	8005d7a <cppLoop+0x132>
 8005d4e:	4883      	ldr	r0, [pc, #524]	; (8005f5c <cppLoop+0x314>)
 8005d50:	f00b fe8d 	bl	8011a6e <__cxa_guard_acquire>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <cppLoop+0x132>
 8005d64:	4878      	ldr	r0, [pc, #480]	; (8005f48 <cppLoop+0x300>)
 8005d66:	f7fc fe8c 	bl	8002a82 <_ZN9LineTrace5getKpEv>
 8005d6a:	eef0 7a40 	vmov.f32	s15, s0
 8005d6e:	4b7c      	ldr	r3, [pc, #496]	; (8005f60 <cppLoop+0x318>)
 8005d70:	edc3 7a00 	vstr	s15, [r3]
 8005d74:	4879      	ldr	r0, [pc, #484]	; (8005f5c <cppLoop+0x314>)
 8005d76:	f00b fe86 	bl	8011a86 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8005d7a:	4b7a      	ldr	r3, [pc, #488]	; (8005f64 <cppLoop+0x31c>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f3bf 8f5b 	dmb	ish
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d015      	beq.n	8005dc2 <cppLoop+0x17a>
 8005d96:	4873      	ldr	r0, [pc, #460]	; (8005f64 <cppLoop+0x31c>)
 8005d98:	f00b fe69 	bl	8011a6e <__cxa_guard_acquire>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <cppLoop+0x17a>
 8005dac:	4866      	ldr	r0, [pc, #408]	; (8005f48 <cppLoop+0x300>)
 8005dae:	f7fc fe77 	bl	8002aa0 <_ZN9LineTrace5getKiEv>
 8005db2:	eef0 7a40 	vmov.f32	s15, s0
 8005db6:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <cppLoop+0x320>)
 8005db8:	edc3 7a00 	vstr	s15, [r3]
 8005dbc:	4869      	ldr	r0, [pc, #420]	; (8005f64 <cppLoop+0x31c>)
 8005dbe:	f00b fe62 	bl	8011a86 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8005dc2:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <cppLoop+0x324>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	f3bf 8f5b 	dmb	ish
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <cppLoop+0x1c2>
 8005dde:	4863      	ldr	r0, [pc, #396]	; (8005f6c <cppLoop+0x324>)
 8005de0:	f00b fe45 	bl	8011a6e <__cxa_guard_acquire>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <cppLoop+0x1c2>
 8005df4:	4854      	ldr	r0, [pc, #336]	; (8005f48 <cppLoop+0x300>)
 8005df6:	f7fc fe62 	bl	8002abe <_ZN9LineTrace5getKdEv>
 8005dfa:	eef0 7a40 	vmov.f32	s15, s0
 8005dfe:	4b5c      	ldr	r3, [pc, #368]	; (8005f70 <cppLoop+0x328>)
 8005e00:	edc3 7a00 	vstr	s15, [r3]
 8005e04:	4859      	ldr	r0, [pc, #356]	; (8005f6c <cppLoop+0x324>)
 8005e06:	f00b fe3e 	bl	8011a86 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005e0a:	485a      	ldr	r0, [pc, #360]	; (8005f74 <cppLoop+0x32c>)
 8005e0c:	f7fb ffde 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d022      	beq.n	8005e66 <cppLoop+0x21e>
			led.LR(-1, 1);
 8005e20:	2201      	movs	r2, #1
 8005e22:	f04f 31ff 	mov.w	r1, #4294967295
 8005e26:	4847      	ldr	r0, [pc, #284]	; (8005f44 <cppLoop+0x2fc>)
 8005e28:	f7fc f8f0 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005e30:	f001 f920 	bl	8007074 <HAL_Delay>

			selector++;
 8005e34:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <cppLoop+0x330>)
 8005e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <cppLoop+0x330>)
 8005e44:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005e46:	4b4c      	ldr	r3, [pc, #304]	; (8005f78 <cppLoop+0x330>)
 8005e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	dd02      	ble.n	8005e56 <cppLoop+0x20e>
 8005e50:	4b49      	ldr	r3, [pc, #292]	; (8005f78 <cppLoop+0x330>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005e56:	2200      	movs	r2, #0
 8005e58:	f04f 31ff 	mov.w	r1, #4294967295
 8005e5c:	4839      	ldr	r0, [pc, #228]	; (8005f44 <cppLoop+0x2fc>)
 8005e5e:	f7fc f8d5 	bl	800200c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8005e62:	f000 bfb9 	b.w	8006dd8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8005e66:	4843      	ldr	r0, [pc, #268]	; (8005f74 <cppLoop+0x32c>)
 8005e68:	f7fb ffb0 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d07f      	beq.n	8005f7c <cppLoop+0x334>
			led.LR(-1, 1);
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e82:	4830      	ldr	r0, [pc, #192]	; (8005f44 <cppLoop+0x2fc>)
 8005e84:	f7fc f8c2 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005e88:	2064      	movs	r0, #100	; 0x64
 8005e8a:	f001 f8f3 	bl	8007074 <HAL_Delay>
			if(selector == 0){
 8005e8e:	4b3a      	ldr	r3, [pc, #232]	; (8005f78 <cppLoop+0x330>)
 8005e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d113      	bne.n	8005ec0 <cppLoop+0x278>
				adj_kp = adj_kp + 0.00001;
 8005e98:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <cppLoop+0x318>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fa fb6b 	bl	8000578 <__aeabi_f2d>
 8005ea2:	a323      	add	r3, pc, #140	; (adr r3, 8005f30 <cppLoop+0x2e8>)
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f7fa fa08 	bl	80002bc <__adddf3>
 8005eac:	4603      	mov	r3, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	f7fa feb0 	bl	8000c18 <__aeabi_d2f>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <cppLoop+0x318>)
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e02b      	b.n	8005f18 <cppLoop+0x2d0>
			else if(selector == 1){
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <cppLoop+0x330>)
 8005ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d113      	bne.n	8005ef2 <cppLoop+0x2aa>
				adj_ki = adj_ki + 0.0001;
 8005eca:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <cppLoop+0x320>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fa fb52 	bl	8000578 <__aeabi_f2d>
 8005ed4:	a318      	add	r3, pc, #96	; (adr r3, 8005f38 <cppLoop+0x2f0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9ef 	bl	80002bc <__adddf3>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	f7fa fe97 	bl	8000c18 <__aeabi_d2f>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <cppLoop+0x320>)
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e012      	b.n	8005f18 <cppLoop+0x2d0>
				adj_kd = adj_kd + 0.00001;
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <cppLoop+0x328>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fb3e 	bl	8000578 <__aeabi_f2d>
 8005efc:	a30c      	add	r3, pc, #48	; (adr r3, 8005f30 <cppLoop+0x2e8>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f9db 	bl	80002bc <__adddf3>
 8005f06:	4603      	mov	r3, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f7fa fe83 	bl	8000c18 <__aeabi_d2f>
 8005f12:	4602      	mov	r2, r0
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <cppLoop+0x328>)
 8005f16:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005f18:	2152      	movs	r1, #82	; 0x52
 8005f1a:	480a      	ldr	r0, [pc, #40]	; (8005f44 <cppLoop+0x2fc>)
 8005f1c:	f7fb ffba 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005f20:	2200      	movs	r2, #0
 8005f22:	f04f 31ff 	mov.w	r1, #4294967295
 8005f26:	4807      	ldr	r0, [pc, #28]	; (8005f44 <cppLoop+0x2fc>)
 8005f28:	f7fc f870 	bl	800200c <_ZN3LED2LREaa>
		break;
 8005f2c:	f000 bf54 	b.w	8006dd8 <cppLoop+0x1190>
 8005f30:	88e368f1 	.word	0x88e368f1
 8005f34:	3ee4f8b5 	.word	0x3ee4f8b5
 8005f38:	eb1c432d 	.word	0xeb1c432d
 8005f3c:	3f1a36e2 	.word	0x3f1a36e2
 8005f40:	20000590 	.word	0x20000590
 8005f44:	20000598 	.word	0x20000598
 8005f48:	2001fa14 	.word	0x2001fa14
 8005f4c:	447a0000 	.word	0x447a0000
 8005f50:	08017d6c 	.word	0x08017d6c
 8005f54:	42c80000 	.word	0x42c80000
 8005f58:	08017d78 	.word	0x08017d78
 8005f5c:	20037400 	.word	0x20037400
 8005f60:	200373fc 	.word	0x200373fc
 8005f64:	20037408 	.word	0x20037408
 8005f68:	20037404 	.word	0x20037404
 8005f6c:	20037410 	.word	0x20037410
 8005f70:	2003740c 	.word	0x2003740c
 8005f74:	2000058c 	.word	0x2000058c
 8005f78:	200373f8 	.word	0x200373f8
		else if(joy_stick.getValue() == JOY_L){
 8005f7c:	48c4      	ldr	r0, [pc, #784]	; (8006290 <cppLoop+0x648>)
 8005f7e:	f7fb ff25 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d059      	beq.n	8006046 <cppLoop+0x3fe>
			led.LR(-1, 1);
 8005f92:	2201      	movs	r2, #1
 8005f94:	f04f 31ff 	mov.w	r1, #4294967295
 8005f98:	48be      	ldr	r0, [pc, #760]	; (8006294 <cppLoop+0x64c>)
 8005f9a:	f7fc f837 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005f9e:	2064      	movs	r0, #100	; 0x64
 8005fa0:	f001 f868 	bl	8007074 <HAL_Delay>
			if(selector == 0){
 8005fa4:	4bbc      	ldr	r3, [pc, #752]	; (8006298 <cppLoop+0x650>)
 8005fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <cppLoop+0x38e>
				adj_kp = adj_kp - 0.00001;
 8005fae:	4bbb      	ldr	r3, [pc, #748]	; (800629c <cppLoop+0x654>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fae0 	bl	8000578 <__aeabi_f2d>
 8005fb8:	a3b1      	add	r3, pc, #708	; (adr r3, 8006280 <cppLoop+0x638>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f97b 	bl	80002b8 <__aeabi_dsub>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f7fa fe25 	bl	8000c18 <__aeabi_d2f>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4bb2      	ldr	r3, [pc, #712]	; (800629c <cppLoop+0x654>)
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e02b      	b.n	800602e <cppLoop+0x3e6>
			else if(selector == 1){
 8005fd6:	4bb0      	ldr	r3, [pc, #704]	; (8006298 <cppLoop+0x650>)
 8005fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d113      	bne.n	8006008 <cppLoop+0x3c0>
				adj_ki = adj_ki - 0.0001;
 8005fe0:	4baf      	ldr	r3, [pc, #700]	; (80062a0 <cppLoop+0x658>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa fac7 	bl	8000578 <__aeabi_f2d>
 8005fea:	a3a7      	add	r3, pc, #668	; (adr r3, 8006288 <cppLoop+0x640>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa f962 	bl	80002b8 <__aeabi_dsub>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	f7fa fe0c 	bl	8000c18 <__aeabi_d2f>
 8006000:	4602      	mov	r2, r0
 8006002:	4ba7      	ldr	r3, [pc, #668]	; (80062a0 <cppLoop+0x658>)
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e012      	b.n	800602e <cppLoop+0x3e6>
				adj_kd = adj_kd - 0.00001;
 8006008:	4ba6      	ldr	r3, [pc, #664]	; (80062a4 <cppLoop+0x65c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fab3 	bl	8000578 <__aeabi_f2d>
 8006012:	a39b      	add	r3, pc, #620	; (adr r3, 8006280 <cppLoop+0x638>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f94e 	bl	80002b8 <__aeabi_dsub>
 800601c:	4603      	mov	r3, r0
 800601e:	460c      	mov	r4, r1
 8006020:	4618      	mov	r0, r3
 8006022:	4621      	mov	r1, r4
 8006024:	f7fa fdf8 	bl	8000c18 <__aeabi_d2f>
 8006028:	4602      	mov	r2, r0
 800602a:	4b9e      	ldr	r3, [pc, #632]	; (80062a4 <cppLoop+0x65c>)
 800602c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800602e:	2152      	movs	r1, #82	; 0x52
 8006030:	4898      	ldr	r0, [pc, #608]	; (8006294 <cppLoop+0x64c>)
 8006032:	f7fb ff2f 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	f04f 31ff 	mov.w	r1, #4294967295
 800603c:	4895      	ldr	r0, [pc, #596]	; (8006294 <cppLoop+0x64c>)
 800603e:	f7fb ffe5 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006042:	f000 bec9 	b.w	8006dd8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 8006046:	4892      	ldr	r0, [pc, #584]	; (8006290 <cppLoop+0x648>)
 8006048:	f7fb fec0 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800604c:	4603      	mov	r3, r0
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d03e      	beq.n	80060da <cppLoop+0x492>
			led.LR(-1, 1);
 800605c:	2201      	movs	r2, #1
 800605e:	f04f 31ff 	mov.w	r1, #4294967295
 8006062:	488c      	ldr	r0, [pc, #560]	; (8006294 <cppLoop+0x64c>)
 8006064:	f7fb ffd2 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006068:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800606c:	f001 f802 	bl	8007074 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006070:	f107 031c 	add.w	r3, r7, #28
 8006074:	2201      	movs	r2, #1
 8006076:	498c      	ldr	r1, [pc, #560]	; (80062a8 <cppLoop+0x660>)
 8006078:	488c      	ldr	r0, [pc, #560]	; (80062ac <cppLoop+0x664>)
 800607a:	f7fb fadf 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800607e:	f107 0318 	add.w	r3, r7, #24
 8006082:	2201      	movs	r2, #1
 8006084:	498a      	ldr	r1, [pc, #552]	; (80062b0 <cppLoop+0x668>)
 8006086:	4889      	ldr	r0, [pc, #548]	; (80062ac <cppLoop+0x664>)
 8006088:	f7fb fad8 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	2201      	movs	r2, #1
 8006092:	4988      	ldr	r1, [pc, #544]	; (80062b4 <cppLoop+0x66c>)
 8006094:	4885      	ldr	r0, [pc, #532]	; (80062ac <cppLoop+0x664>)
 8006096:	f7fb fad1 	bl	800163c <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800609a:	edd7 7a07 	vldr	s15, [r7, #28]
 800609e:	ed97 7a06 	vldr	s14, [r7, #24]
 80060a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80060a6:	eeb0 1a66 	vmov.f32	s2, s13
 80060aa:	eef0 0a47 	vmov.f32	s1, s14
 80060ae:	eeb0 0a67 	vmov.f32	s0, s15
 80060b2:	4881      	ldr	r0, [pc, #516]	; (80062b8 <cppLoop+0x670>)
 80060b4:	f7fc fccc 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4a78      	ldr	r2, [pc, #480]	; (800629c <cppLoop+0x654>)
 80060bc:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4a77      	ldr	r2, [pc, #476]	; (80062a0 <cppLoop+0x658>)
 80060c2:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4a77      	ldr	r2, [pc, #476]	; (80062a4 <cppLoop+0x65c>)
 80060c8:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	f04f 31ff 	mov.w	r1, #4294967295
 80060d0:	4870      	ldr	r0, [pc, #448]	; (8006294 <cppLoop+0x64c>)
 80060d2:	f7fb ff9b 	bl	800200c <_ZN3LED2LREaa>
		break;
 80060d6:	f000 be7f 	b.w	8006dd8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 80060da:	486d      	ldr	r0, [pc, #436]	; (8006290 <cppLoop+0x648>)
 80060dc:	f7fb fe76 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8673 	beq.w	8006dd8 <cppLoop+0x1190>
			led.LR(-1, 1);
 80060f2:	2201      	movs	r2, #1
 80060f4:	f04f 31ff 	mov.w	r1, #4294967295
 80060f8:	4866      	ldr	r0, [pc, #408]	; (8006294 <cppLoop+0x64c>)
 80060fa:	f7fb ff87 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80060fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006102:	f000 ffb7 	bl	8007074 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006106:	2300      	movs	r3, #0
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4b64      	ldr	r3, [pc, #400]	; (800629c <cppLoop+0x654>)
 800610c:	2201      	movs	r2, #1
 800610e:	4966      	ldr	r1, [pc, #408]	; (80062a8 <cppLoop+0x660>)
 8006110:	4866      	ldr	r0, [pc, #408]	; (80062ac <cppLoop+0x664>)
 8006112:	f7fb fa2d 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006116:	2300      	movs	r3, #0
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4b61      	ldr	r3, [pc, #388]	; (80062a0 <cppLoop+0x658>)
 800611c:	2201      	movs	r2, #1
 800611e:	4964      	ldr	r1, [pc, #400]	; (80062b0 <cppLoop+0x668>)
 8006120:	4862      	ldr	r0, [pc, #392]	; (80062ac <cppLoop+0x664>)
 8006122:	f7fb fa25 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4b5e      	ldr	r3, [pc, #376]	; (80062a4 <cppLoop+0x65c>)
 800612c:	2201      	movs	r2, #1
 800612e:	4961      	ldr	r1, [pc, #388]	; (80062b4 <cppLoop+0x66c>)
 8006130:	485e      	ldr	r0, [pc, #376]	; (80062ac <cppLoop+0x664>)
 8006132:	f7fb fa1d 	bl	8001570 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006136:	4b59      	ldr	r3, [pc, #356]	; (800629c <cppLoop+0x654>)
 8006138:	edd3 7a00 	vldr	s15, [r3]
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <cppLoop+0x658>)
 800613e:	ed93 7a00 	vldr	s14, [r3]
 8006142:	4b58      	ldr	r3, [pc, #352]	; (80062a4 <cppLoop+0x65c>)
 8006144:	edd3 6a00 	vldr	s13, [r3]
 8006148:	eeb0 1a66 	vmov.f32	s2, s13
 800614c:	eef0 0a47 	vmov.f32	s1, s14
 8006150:	eeb0 0a67 	vmov.f32	s0, s15
 8006154:	4858      	ldr	r0, [pc, #352]	; (80062b8 <cppLoop+0x670>)
 8006156:	f7fc fc7b 	bl	8002a50 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800615a:	2200      	movs	r2, #0
 800615c:	f04f 31ff 	mov.w	r1, #4294967295
 8006160:	484c      	ldr	r0, [pc, #304]	; (8006294 <cppLoop+0x64c>)
 8006162:	f7fb ff53 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006166:	f000 be37 	b.w	8006dd8 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 800616a:	2147      	movs	r1, #71	; 0x47
 800616c:	4849      	ldr	r0, [pc, #292]	; (8006294 <cppLoop+0x64c>)
 800616e:	f7fb fe91 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006172:	f7fa ff95 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006176:	2100      	movs	r1, #0
 8006178:	2000      	movs	r0, #0
 800617a:	f7fa ffa1 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800617e:	484f      	ldr	r0, [pc, #316]	; (80062bc <cppLoop+0x674>)
 8006180:	f7fa ffc8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006184:	2101      	movs	r1, #1
 8006186:	2000      	movs	r0, #0
 8006188:	f7fa ff9a 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 800618c:	484c      	ldr	r0, [pc, #304]	; (80062c0 <cppLoop+0x678>)
 800618e:	f7fa ffc1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006192:	483f      	ldr	r0, [pc, #252]	; (8006290 <cppLoop+0x648>)
 8006194:	f7fb fe1a 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006198:	4603      	mov	r3, r0
 800619a:	2b02      	cmp	r3, #2
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8619 	beq.w	8006ddc <cppLoop+0x1194>
			HAL_Delay(500);
 80061aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061ae:	f000 ff61 	bl	8007074 <HAL_Delay>

			velocity_ctrl.start();
 80061b2:	4844      	ldr	r0, [pc, #272]	; (80062c4 <cppLoop+0x67c>)
 80061b4:	f7fd fd67 	bl	8003c86 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80061b8:	483f      	ldr	r0, [pc, #252]	; (80062b8 <cppLoop+0x670>)
 80061ba:	f7fc fce5 	bl	8002b88 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.8);
 80061be:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80062c8 <cppLoop+0x680>
 80061c2:	483d      	ldr	r0, [pc, #244]	; (80062b8 <cppLoop+0x670>)
 80061c4:	f7fc fc99 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	2101      	movs	r1, #1
 80061ce:	4831      	ldr	r0, [pc, #196]	; (8006294 <cppLoop+0x64c>)
 80061d0:	f7fb ff1c 	bl	800200c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80061d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80061d8:	f000 ff4c 	bl	8007074 <HAL_Delay>

			velocity_ctrl.stop();
 80061dc:	4839      	ldr	r0, [pc, #228]	; (80062c4 <cppLoop+0x67c>)
 80061de:	f7fd fd67 	bl	8003cb0 <_ZN12VelocityCtrl4stopEv>
			line_trace.stop();
 80061e2:	4835      	ldr	r0, [pc, #212]	; (80062b8 <cppLoop+0x670>)
 80061e4:	f7fc fce4 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			led.LR(0, -1);
 80061e8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ec:	2100      	movs	r1, #0
 80061ee:	4829      	ldr	r0, [pc, #164]	; (8006294 <cppLoop+0x64c>)
 80061f0:	f7fb ff0c 	bl	800200c <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 80061f4:	f000 bdf2 	b.w	8006ddc <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 80061f8:	2142      	movs	r1, #66	; 0x42
 80061fa:	4826      	ldr	r0, [pc, #152]	; (8006294 <cppLoop+0x64c>)
 80061fc:	f7fb fe4a 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006200:	f7fa ff4e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006204:	2100      	movs	r1, #0
 8006206:	2000      	movs	r0, #0
 8006208:	f7fa ff5a 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800620c:	482f      	ldr	r0, [pc, #188]	; (80062cc <cppLoop+0x684>)
 800620e:	f7fa ff81 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006212:	2101      	movs	r1, #1
 8006214:	2000      	movs	r0, #0
 8006216:	f7fa ff53 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800621a:	482d      	ldr	r0, [pc, #180]	; (80062d0 <cppLoop+0x688>)
 800621c:	f7fa ff7a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006220:	481b      	ldr	r0, [pc, #108]	; (8006290 <cppLoop+0x648>)
 8006222:	f7fb fdd3 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006226:	4603      	mov	r3, r0
 8006228:	2b02      	cmp	r3, #2
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 85d4 	beq.w	8006de0 <cppLoop+0x1198>
			led.LR(-1, 1);
 8006238:	2201      	movs	r2, #1
 800623a:	f04f 31ff 	mov.w	r1, #4294967295
 800623e:	4815      	ldr	r0, [pc, #84]	; (8006294 <cppLoop+0x64c>)
 8006240:	f7fb fee4 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8006244:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006248:	f000 ff14 	bl	8007074 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800624c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80062d4 <cppLoop+0x68c>
 8006250:	4821      	ldr	r0, [pc, #132]	; (80062d8 <cppLoop+0x690>)
 8006252:	f7fd fb2b 	bl	80038ac <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8006256:	4820      	ldr	r0, [pc, #128]	; (80062d8 <cppLoop+0x690>)
 8006258:	f7fd fb38 	bl	80038cc <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800625c:	f244 405c 	movw	r0, #17500	; 0x445c
 8006260:	f000 ff08 	bl	8007074 <HAL_Delay>
			sys_ident.stop();
 8006264:	481c      	ldr	r0, [pc, #112]	; (80062d8 <cppLoop+0x690>)
 8006266:	f7fd fb43 	bl	80038f0 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800626a:	481b      	ldr	r0, [pc, #108]	; (80062d8 <cppLoop+0x690>)
 800626c:	f7fd faac 	bl	80037c8 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	f04f 31ff 	mov.w	r1, #4294967295
 8006276:	4807      	ldr	r0, [pc, #28]	; (8006294 <cppLoop+0x64c>)
 8006278:	f7fb fec8 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 800627c:	f000 bdb0 	b.w	8006de0 <cppLoop+0x1198>
 8006280:	88e368f1 	.word	0x88e368f1
 8006284:	3ee4f8b5 	.word	0x3ee4f8b5
 8006288:	eb1c432d 	.word	0xeb1c432d
 800628c:	3f1a36e2 	.word	0x3f1a36e2
 8006290:	2000058c 	.word	0x2000058c
 8006294:	20000598 	.word	0x20000598
 8006298:	200373f8 	.word	0x200373f8
 800629c:	200373fc 	.word	0x200373fc
 80062a0:	20037404 	.word	0x20037404
 80062a4:	2003740c 	.word	0x2003740c
 80062a8:	08017d88 	.word	0x08017d88
 80062ac:	08017d90 	.word	0x08017d90
 80062b0:	08017d98 	.word	0x08017d98
 80062b4:	08017da0 	.word	0x08017da0
 80062b8:	2001fa14 	.word	0x2001fa14
 80062bc:	08017da8 	.word	0x08017da8
 80062c0:	08017db4 	.word	0x08017db4
 80062c4:	2001f9dc 	.word	0x2001f9dc
 80062c8:	3f4ccccd 	.word	0x3f4ccccd
 80062cc:	08017dbc 	.word	0x08017dbc
 80062d0:	08017dc4 	.word	0x08017dc4
 80062d4:	3e99999a 	.word	0x3e99999a
 80062d8:	2001fab0 	.word	0x2001fab0

	case 3:
		led.fullColor('M');
 80062dc:	214d      	movs	r1, #77	; 0x4d
 80062de:	48af      	ldr	r0, [pc, #700]	; (800659c <cppLoop+0x954>)
 80062e0:	f7fb fdd8 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062e4:	f7fa fedc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062e8:	2100      	movs	r1, #0
 80062ea:	2000      	movs	r0, #0
 80062ec:	f7fa fee8 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80062f0:	48ab      	ldr	r0, [pc, #684]	; (80065a0 <cppLoop+0x958>)
 80062f2:	f7fa ff0f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062f6:	2101      	movs	r1, #1
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7fa fee1 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80062fe:	48a9      	ldr	r0, [pc, #676]	; (80065a4 <cppLoop+0x95c>)
 8006300:	f7fa ff08 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006304:	48a8      	ldr	r0, [pc, #672]	; (80065a8 <cppLoop+0x960>)
 8006306:	f7fb fd61 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800630a:	4603      	mov	r3, r0
 800630c:	2b02      	cmp	r3, #2
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8564 	beq.w	8006de4 <cppLoop+0x119c>
			led.LR(-1, 1);
 800631c:	2201      	movs	r2, #1
 800631e:	f04f 31ff 	mov.w	r1, #4294967295
 8006322:	489e      	ldr	r0, [pc, #632]	; (800659c <cppLoop+0x954>)
 8006324:	f7fb fe72 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800632c:	f000 fea2 	bl	8007074 <HAL_Delay>

			logger.start();
 8006330:	489e      	ldr	r0, [pc, #632]	; (80065ac <cppLoop+0x964>)
 8006332:	f7fc fd8b 	bl	8002e4c <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006336:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80065b0 <cppLoop+0x968>
 800633a:	489e      	ldr	r0, [pc, #632]	; (80065b4 <cppLoop+0x96c>)
 800633c:	f7fc fbce 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006340:	489c      	ldr	r0, [pc, #624]	; (80065b4 <cppLoop+0x96c>)
 8006342:	f7fc fc21 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006346:	f241 3088 	movw	r0, #5000	; 0x1388
 800634a:	f000 fe93 	bl	8007074 <HAL_Delay>

			logger.stop();
 800634e:	4897      	ldr	r0, [pc, #604]	; (80065ac <cppLoop+0x964>)
 8006350:	f7fc fd8b 	bl	8002e6a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006354:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80065b0 <cppLoop+0x968>
 8006358:	4896      	ldr	r0, [pc, #600]	; (80065b4 <cppLoop+0x96c>)
 800635a:	f7fc fbbf 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 800635e:	4895      	ldr	r0, [pc, #596]	; (80065b4 <cppLoop+0x96c>)
 8006360:	f7fc fc26 	bl	8002bb0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	2101      	movs	r1, #1
 800636a:	488c      	ldr	r0, [pc, #560]	; (800659c <cppLoop+0x954>)
 800636c:	f7fb fe4e 	bl	800200c <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	2100      	movs	r1, #0
 8006376:	4889      	ldr	r0, [pc, #548]	; (800659c <cppLoop+0x954>)
 8006378:	f7fb fe48 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 800637c:	2200      	movs	r2, #0
 800637e:	f04f 31ff 	mov.w	r1, #4294967295
 8006382:	4886      	ldr	r0, [pc, #536]	; (800659c <cppLoop+0x954>)
 8006384:	f7fb fe42 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006388:	f000 bd2c 	b.w	8006de4 <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 800638c:	2159      	movs	r1, #89	; 0x59
 800638e:	4883      	ldr	r0, [pc, #524]	; (800659c <cppLoop+0x954>)
 8006390:	f7fb fd80 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006394:	f7fa fe84 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006398:	2100      	movs	r1, #0
 800639a:	2000      	movs	r0, #0
 800639c:	f7fa fe90 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80063a0:	4885      	ldr	r0, [pc, #532]	; (80065b8 <cppLoop+0x970>)
 80063a2:	f7fa feb7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80063a6:	2101      	movs	r1, #1
 80063a8:	2000      	movs	r0, #0
 80063aa:	f7fa fe89 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80063ae:	487d      	ldr	r0, [pc, #500]	; (80065a4 <cppLoop+0x95c>)
 80063b0:	f7fa feb0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80063b4:	487c      	ldr	r0, [pc, #496]	; (80065a8 <cppLoop+0x960>)
 80063b6:	f7fb fd09 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b02      	cmp	r3, #2
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 850e 	beq.w	8006de8 <cppLoop+0x11a0>
			led.LR(-1, 1);
 80063cc:	2201      	movs	r2, #1
 80063ce:	f04f 31ff 	mov.w	r1, #4294967295
 80063d2:	4872      	ldr	r0, [pc, #456]	; (800659c <cppLoop+0x954>)
 80063d4:	f7fb fe1a 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063dc:	f000 fe4a 	bl	8007074 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80063e0:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80065b0 <cppLoop+0x968>
 80063e4:	4873      	ldr	r0, [pc, #460]	; (80065b4 <cppLoop+0x96c>)
 80063e6:	f7fc fb88 	bl	8002afa <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80063ea:	4874      	ldr	r0, [pc, #464]	; (80065bc <cppLoop+0x974>)
 80063ec:	f7fd fc4b 	bl	8003c86 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80063f0:	4870      	ldr	r0, [pc, #448]	; (80065b4 <cppLoop+0x96c>)
 80063f2:	f7fc fbc9 	bl	8002b88 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80063f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80063fa:	f000 fe3b 	bl	8007074 <HAL_Delay>

			line_trace.stop();
 80063fe:	486d      	ldr	r0, [pc, #436]	; (80065b4 <cppLoop+0x96c>)
 8006400:	f7fc fbd6 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006404:	486d      	ldr	r0, [pc, #436]	; (80065bc <cppLoop+0x974>)
 8006406:	f7fd fc53 	bl	8003cb0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 800640a:	2200      	movs	r2, #0
 800640c:	f04f 31ff 	mov.w	r1, #4294967295
 8006410:	4862      	ldr	r0, [pc, #392]	; (800659c <cppLoop+0x954>)
 8006412:	f7fb fdfb 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006416:	f000 bce7 	b.w	8006de8 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 800641a:	2143      	movs	r1, #67	; 0x43
 800641c:	485f      	ldr	r0, [pc, #380]	; (800659c <cppLoop+0x954>)
 800641e:	f7fb fd39 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006422:	f7fa fe3d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006426:	2100      	movs	r1, #0
 8006428:	2000      	movs	r0, #0
 800642a:	f7fa fe49 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800642e:	4864      	ldr	r0, [pc, #400]	; (80065c0 <cppLoop+0x978>)
 8006430:	f7fa fe70 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006434:	2101      	movs	r1, #1
 8006436:	2000      	movs	r0, #0
 8006438:	f7fa fe42 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800643c:	4861      	ldr	r0, [pc, #388]	; (80065c4 <cppLoop+0x97c>)
 800643e:	f7fa fe69 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006442:	4859      	ldr	r0, [pc, #356]	; (80065a8 <cppLoop+0x960>)
 8006444:	f7fb fcc2 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006448:	4603      	mov	r3, r0
 800644a:	2b02      	cmp	r3, #2
 800644c:	bf0c      	ite	eq
 800644e:	2301      	moveq	r3, #1
 8006450:	2300      	movne	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 84c9 	beq.w	8006dec <cppLoop+0x11a4>
			led.LR(-1, 1);
 800645a:	2201      	movs	r2, #1
 800645c:	f04f 31ff 	mov.w	r1, #4294967295
 8006460:	484e      	ldr	r0, [pc, #312]	; (800659c <cppLoop+0x954>)
 8006462:	f7fb fdd3 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800646a:	f000 fe03 	bl	8007074 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800646e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80065c8 <cppLoop+0x980>
 8006472:	4850      	ldr	r0, [pc, #320]	; (80065b4 <cppLoop+0x96c>)
 8006474:	f7fc fb32 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006478:	484e      	ldr	r0, [pc, #312]	; (80065b4 <cppLoop+0x96c>)
 800647a:	f7fc fb85 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800647e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006482:	f000 fdf7 	bl	8007074 <HAL_Delay>

			led.fullColor('R');
 8006486:	2152      	movs	r1, #82	; 0x52
 8006488:	4844      	ldr	r0, [pc, #272]	; (800659c <cppLoop+0x954>)
 800648a:	f7fb fd03 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800648e:	484f      	ldr	r0, [pc, #316]	; (80065cc <cppLoop+0x984>)
 8006490:	f7fa ffe4 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006494:	484d      	ldr	r0, [pc, #308]	; (80065cc <cppLoop+0x984>)
 8006496:	f7fa ffb0 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800649a:	f242 7010 	movw	r0, #10000	; 0x2710
 800649e:	f000 fde9 	bl	8007074 <HAL_Delay>

			line_trace.stop();
 80064a2:	4844      	ldr	r0, [pc, #272]	; (80065b4 <cppLoop+0x96c>)
 80064a4:	f7fc fb84 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80064a8:	4949      	ldr	r1, [pc, #292]	; (80065d0 <cppLoop+0x988>)
 80064aa:	484a      	ldr	r0, [pc, #296]	; (80065d4 <cppLoop+0x98c>)
 80064ac:	f7fa ffec 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 80064b0:	4846      	ldr	r0, [pc, #280]	; (80065cc <cppLoop+0x984>)
 80064b2:	f7fa ff93 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 80064b6:	eef0 7a40 	vmov.f32	s15, s0
 80064ba:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 80064be:	f107 0310 	add.w	r3, r7, #16
 80064c2:	2201      	movs	r2, #1
 80064c4:	4619      	mov	r1, r3
 80064c6:	2001      	movs	r0, #1
 80064c8:	f7fb f800 	bl	80014cc <sd_write_float>
			user_fclose();
 80064cc:	f7fa ffee 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 80064d0:	2200      	movs	r2, #0
 80064d2:	f04f 31ff 	mov.w	r1, #4294967295
 80064d6:	4831      	ldr	r0, [pc, #196]	; (800659c <cppLoop+0x954>)
 80064d8:	f7fb fd98 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 80064dc:	f000 bc86 	b.w	8006dec <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 80064e0:	2152      	movs	r1, #82	; 0x52
 80064e2:	482e      	ldr	r0, [pc, #184]	; (800659c <cppLoop+0x954>)
 80064e4:	f7fb fcd6 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80064e8:	f7fa fdda 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80064ec:	2100      	movs	r1, #0
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fa fde6 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80064f4:	4838      	ldr	r0, [pc, #224]	; (80065d8 <cppLoop+0x990>)
 80064f6:	f7fa fe0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80064fa:	2101      	movs	r1, #1
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7fa fddf 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006502:	4836      	ldr	r0, [pc, #216]	; (80065dc <cppLoop+0x994>)
 8006504:	f7fa fe06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006508:	4827      	ldr	r0, [pc, #156]	; (80065a8 <cppLoop+0x960>)
 800650a:	f7fb fc5f 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800650e:	4603      	mov	r3, r0
 8006510:	2b02      	cmp	r3, #2
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8468 	beq.w	8006df0 <cppLoop+0x11a8>
			HAL_Delay(500);
 8006520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006524:	f000 fda6 	bl	8007074 <HAL_Delay>
			led.LR(-1, 1);
 8006528:	2201      	movs	r2, #1
 800652a:	f04f 31ff 	mov.w	r1, #4294967295
 800652e:	481b      	ldr	r0, [pc, #108]	; (800659c <cppLoop+0x954>)
 8006530:	f7fb fd6c 	bl	800200c <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006534:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80065e0 <cppLoop+0x998>
 8006538:	481e      	ldr	r0, [pc, #120]	; (80065b4 <cppLoop+0x96c>)
 800653a:	f7fc facf 	bl	8002adc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800653e:	481d      	ldr	r0, [pc, #116]	; (80065b4 <cppLoop+0x96c>)
 8006540:	f7fc fb22 	bl	8002b88 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006548:	f000 fd94 	bl	8007074 <HAL_Delay>

			led.fullColor('R');
 800654c:	2152      	movs	r1, #82	; 0x52
 800654e:	4813      	ldr	r0, [pc, #76]	; (800659c <cppLoop+0x954>)
 8006550:	f7fb fca0 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006554:	481d      	ldr	r0, [pc, #116]	; (80065cc <cppLoop+0x984>)
 8006556:	f7fa ff81 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800655a:	481c      	ldr	r0, [pc, #112]	; (80065cc <cppLoop+0x984>)
 800655c:	f7fa ff4d 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006560:	4820      	ldr	r0, [pc, #128]	; (80065e4 <cppLoop+0x99c>)
 8006562:	f7fc fe7e 	bl	8003262 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006566:	4811      	ldr	r0, [pc, #68]	; (80065ac <cppLoop+0x964>)
 8006568:	f7fc fc70 	bl	8002e4c <_ZN6Logger5startEv>

			HAL_Delay(3000);
 800656c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006570:	f000 fd80 	bl	8007074 <HAL_Delay>

			line_trace.stop();
 8006574:	480f      	ldr	r0, [pc, #60]	; (80065b4 <cppLoop+0x96c>)
 8006576:	f7fc fb1b 	bl	8002bb0 <_ZN9LineTrace4stopEv>
			logger.stop();
 800657a:	480c      	ldr	r0, [pc, #48]	; (80065ac <cppLoop+0x964>)
 800657c:	f7fc fc75 	bl	8002e6a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <cppLoop+0x9a0>)
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <cppLoop+0x9a4>)
 8006584:	491a      	ldr	r1, [pc, #104]	; (80065f0 <cppLoop+0x9a8>)
 8006586:	4809      	ldr	r0, [pc, #36]	; (80065ac <cppLoop+0x964>)
 8006588:	f7fc fc3d 	bl	8002e06 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800658c:	2200      	movs	r2, #0
 800658e:	f04f 31ff 	mov.w	r1, #4294967295
 8006592:	4802      	ldr	r0, [pc, #8]	; (800659c <cppLoop+0x954>)
 8006594:	f7fb fd3a 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006598:	f000 bc2a 	b.w	8006df0 <cppLoop+0x11a8>
 800659c:	20000598 	.word	0x20000598
 80065a0:	08017dcc 	.word	0x08017dcc
 80065a4:	08017dd4 	.word	0x08017dd4
 80065a8:	2000058c 	.word	0x2000058c
 80065ac:	200005bc 	.word	0x200005bc
 80065b0:	3dcccccd 	.word	0x3dcccccd
 80065b4:	2001fa14 	.word	0x2001fa14
 80065b8:	08017ddc 	.word	0x08017ddc
 80065bc:	2001f9dc 	.word	0x2001f9dc
 80065c0:	08017de8 	.word	0x08017de8
 80065c4:	08017df0 	.word	0x08017df0
 80065c8:	00000000 	.word	0x00000000
 80065cc:	2001f9c4 	.word	0x2001f9c4
 80065d0:	08017dfc 	.word	0x08017dfc
 80065d4:	08017e04 	.word	0x08017e04
 80065d8:	08017e10 	.word	0x08017e10
 80065dc:	08017dc4 	.word	0x08017dc4
 80065e0:	3d8f5c29 	.word	0x3d8f5c29
 80065e4:	2001fa80 	.word	0x2001fa80
 80065e8:	08017e1c 	.word	0x08017e1c
 80065ec:	08017e28 	.word	0x08017e28
 80065f0:	08017e34 	.word	0x08017e34

	case 7:
		led.fullColor('G');
 80065f4:	2147      	movs	r1, #71	; 0x47
 80065f6:	48b4      	ldr	r0, [pc, #720]	; (80068c8 <cppLoop+0xc80>)
 80065f8:	f7fb fc4c 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80065fc:	f7fa fd50 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006600:	2100      	movs	r1, #0
 8006602:	2000      	movs	r0, #0
 8006604:	f7fa fd5c 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006608:	48b0      	ldr	r0, [pc, #704]	; (80068cc <cppLoop+0xc84>)
 800660a:	f7fa fd83 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800660e:	2101      	movs	r1, #1
 8006610:	2000      	movs	r0, #0
 8006612:	f7fa fd55 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006616:	48ae      	ldr	r0, [pc, #696]	; (80068d0 <cppLoop+0xc88>)
 8006618:	f7fa fd7c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800661c:	48ad      	ldr	r0, [pc, #692]	; (80068d4 <cppLoop+0xc8c>)
 800661e:	f7fb fbd5 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006622:	4603      	mov	r3, r0
 8006624:	2b02      	cmp	r3, #2
 8006626:	bf0c      	ite	eq
 8006628:	2301      	moveq	r3, #1
 800662a:	2300      	movne	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 83e0 	beq.w	8006df4 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006634:	2201      	movs	r2, #1
 8006636:	f04f 31ff 	mov.w	r1, #4294967295
 800663a:	48a3      	ldr	r0, [pc, #652]	; (80068c8 <cppLoop+0xc80>)
 800663c:	f7fb fce6 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006644:	f000 fd16 	bl	8007074 <HAL_Delay>

			led.fullColor('R');
 8006648:	2152      	movs	r1, #82	; 0x52
 800664a:	489f      	ldr	r0, [pc, #636]	; (80068c8 <cppLoop+0xc80>)
 800664c:	f7fb fc22 	bl	8001e94 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006650:	eddf 0aa1 	vldr	s1, [pc, #644]	; 80068d8 <cppLoop+0xc90>
 8006654:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80068dc <cppLoop+0xc94>
 8006658:	48a1      	ldr	r0, [pc, #644]	; (80068e0 <cppLoop+0xc98>)
 800665a:	f7fd fa9d 	bl	8003b98 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 800665e:	48a0      	ldr	r0, [pc, #640]	; (80068e0 <cppLoop+0xc98>)
 8006660:	f7fd fb11 	bl	8003c86 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006668:	f000 fd04 	bl	8007074 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 800666c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80068dc <cppLoop+0xc94>
 8006670:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80068dc <cppLoop+0xc94>
 8006674:	489a      	ldr	r0, [pc, #616]	; (80068e0 <cppLoop+0xc98>)
 8006676:	f7fd fa8f 	bl	8003b98 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 800667a:	2064      	movs	r0, #100	; 0x64
 800667c:	f000 fcfa 	bl	8007074 <HAL_Delay>
			velocity_ctrl.stop();
 8006680:	4897      	ldr	r0, [pc, #604]	; (80068e0 <cppLoop+0xc98>)
 8006682:	f7fd fb15 	bl	8003cb0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006686:	2200      	movs	r2, #0
 8006688:	f04f 31ff 	mov.w	r1, #4294967295
 800668c:	488e      	ldr	r0, [pc, #568]	; (80068c8 <cppLoop+0xc80>)
 800668e:	f7fb fcbd 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006692:	e3af      	b.n	8006df4 <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006694:	2142      	movs	r1, #66	; 0x42
 8006696:	488c      	ldr	r0, [pc, #560]	; (80068c8 <cppLoop+0xc80>)
 8006698:	f7fb fbfc 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800669c:	f7fa fd00 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80066a0:	2100      	movs	r1, #0
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7fa fd0c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 80066a8:	488e      	ldr	r0, [pc, #568]	; (80068e4 <cppLoop+0xc9c>)
 80066aa:	f7fc fed1 	bl	8003450 <_ZN13PathFollowing8getKxValEv>
 80066ae:	ec51 0b10 	vmov	r0, r1, d0
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	4b8c      	ldr	r3, [pc, #560]	; (80068e8 <cppLoop+0xca0>)
 80066b8:	f7f9 ffb6 	bl	8000628 <__aeabi_dmul>
 80066bc:	4603      	mov	r3, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	461a      	mov	r2, r3
 80066c2:	4623      	mov	r3, r4
 80066c4:	4889      	ldr	r0, [pc, #548]	; (80068ec <cppLoop+0xca4>)
 80066c6:	f7fa fd25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80066ca:	2101      	movs	r1, #1
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7fa fcf7 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 80066d2:	4884      	ldr	r0, [pc, #528]	; (80068e4 <cppLoop+0xc9c>)
 80066d4:	f7fc fed0 	bl	8003478 <_ZN13PathFollowing8getKyValEv>
 80066d8:	ec51 0b10 	vmov	r0, r1, d0
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <cppLoop+0xca0>)
 80066e2:	f7f9 ffa1 	bl	8000628 <__aeabi_dmul>
 80066e6:	4603      	mov	r3, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	461d      	mov	r5, r3
 80066ec:	4626      	mov	r6, r4
 80066ee:	487d      	ldr	r0, [pc, #500]	; (80068e4 <cppLoop+0xc9c>)
 80066f0:	f7fc fed6 	bl	80034a0 <_ZN13PathFollowing8getKtValEv>
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	4b7a      	ldr	r3, [pc, #488]	; (80068e8 <cppLoop+0xca0>)
 80066fe:	f7f9 ff93 	bl	8000628 <__aeabi_dmul>
 8006702:	4603      	mov	r3, r0
 8006704:	460c      	mov	r4, r1
 8006706:	e9cd 3400 	strd	r3, r4, [sp]
 800670a:	462a      	mov	r2, r5
 800670c:	4633      	mov	r3, r6
 800670e:	4878      	ldr	r0, [pc, #480]	; (80068f0 <cppLoop+0xca8>)
 8006710:	f7fa fd00 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006714:	4b77      	ldr	r3, [pc, #476]	; (80068f4 <cppLoop+0xcac>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f3bf 8f5b 	dmb	ish
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d019      	beq.n	8006764 <cppLoop+0xb1c>
 8006730:	4870      	ldr	r0, [pc, #448]	; (80068f4 <cppLoop+0xcac>)
 8006732:	f00b f99c 	bl	8011a6e <__cxa_guard_acquire>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf14      	ite	ne
 800673c:	2301      	movne	r3, #1
 800673e:	2300      	moveq	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00e      	beq.n	8006764 <cppLoop+0xb1c>
 8006746:	4867      	ldr	r0, [pc, #412]	; (80068e4 <cppLoop+0xc9c>)
 8006748:	f7fc fe82 	bl	8003450 <_ZN13PathFollowing8getKxValEv>
 800674c:	ec54 3b10 	vmov	r3, r4, d0
 8006750:	4618      	mov	r0, r3
 8006752:	4621      	mov	r1, r4
 8006754:	f7fa fa60 	bl	8000c18 <__aeabi_d2f>
 8006758:	4602      	mov	r2, r0
 800675a:	4b67      	ldr	r3, [pc, #412]	; (80068f8 <cppLoop+0xcb0>)
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	4865      	ldr	r0, [pc, #404]	; (80068f4 <cppLoop+0xcac>)
 8006760:	f00b f991 	bl	8011a86 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006764:	4b65      	ldr	r3, [pc, #404]	; (80068fc <cppLoop+0xcb4>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f3bf 8f5b 	dmb	ish
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <cppLoop+0xb6c>
 8006780:	485e      	ldr	r0, [pc, #376]	; (80068fc <cppLoop+0xcb4>)
 8006782:	f00b f974 	bl	8011a6e <__cxa_guard_acquire>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <cppLoop+0xb6c>
 8006796:	4853      	ldr	r0, [pc, #332]	; (80068e4 <cppLoop+0xc9c>)
 8006798:	f7fc fe6e 	bl	8003478 <_ZN13PathFollowing8getKyValEv>
 800679c:	ec54 3b10 	vmov	r3, r4, d0
 80067a0:	4618      	mov	r0, r3
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7fa fa38 	bl	8000c18 <__aeabi_d2f>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4b55      	ldr	r3, [pc, #340]	; (8006900 <cppLoop+0xcb8>)
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	4853      	ldr	r0, [pc, #332]	; (80068fc <cppLoop+0xcb4>)
 80067b0:	f00b f969 	bl	8011a86 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 80067b4:	4b53      	ldr	r3, [pc, #332]	; (8006904 <cppLoop+0xcbc>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f3bf 8f5b 	dmb	ish
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d019      	beq.n	8006804 <cppLoop+0xbbc>
 80067d0:	484c      	ldr	r0, [pc, #304]	; (8006904 <cppLoop+0xcbc>)
 80067d2:	f00b f94c 	bl	8011a6e <__cxa_guard_acquire>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <cppLoop+0xbbc>
 80067e6:	483f      	ldr	r0, [pc, #252]	; (80068e4 <cppLoop+0xc9c>)
 80067e8:	f7fc fe5a 	bl	80034a0 <_ZN13PathFollowing8getKtValEv>
 80067ec:	ec54 3b10 	vmov	r3, r4, d0
 80067f0:	4618      	mov	r0, r3
 80067f2:	4621      	mov	r1, r4
 80067f4:	f7fa fa10 	bl	8000c18 <__aeabi_d2f>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b43      	ldr	r3, [pc, #268]	; (8006908 <cppLoop+0xcc0>)
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	4841      	ldr	r0, [pc, #260]	; (8006904 <cppLoop+0xcbc>)
 8006800:	f00b f941 	bl	8011a86 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006804:	4833      	ldr	r0, [pc, #204]	; (80068d4 <cppLoop+0xc8c>)
 8006806:	f7fb fae1 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800680a:	4603      	mov	r3, r0
 800680c:	2b08      	cmp	r3, #8
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d021      	beq.n	800685e <cppLoop+0xc16>
			led.LR(-1, 1);
 800681a:	2201      	movs	r2, #1
 800681c:	f04f 31ff 	mov.w	r1, #4294967295
 8006820:	4829      	ldr	r0, [pc, #164]	; (80068c8 <cppLoop+0xc80>)
 8006822:	f7fb fbf3 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800682a:	f000 fc23 	bl	8007074 <HAL_Delay>

			selector++;
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <cppLoop+0xcc4>)
 8006830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006834:	b29b      	uxth	r3, r3
 8006836:	3301      	adds	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21a      	sxth	r2, r3
 800683c:	4b33      	ldr	r3, [pc, #204]	; (800690c <cppLoop+0xcc4>)
 800683e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006840:	4b32      	ldr	r3, [pc, #200]	; (800690c <cppLoop+0xcc4>)
 8006842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006846:	2b02      	cmp	r3, #2
 8006848:	dd02      	ble.n	8006850 <cppLoop+0xc08>
 800684a:	4b30      	ldr	r3, [pc, #192]	; (800690c <cppLoop+0xcc4>)
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	f04f 31ff 	mov.w	r1, #4294967295
 8006856:	481c      	ldr	r0, [pc, #112]	; (80068c8 <cppLoop+0xc80>)
 8006858:	f7fb fbd8 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 800685c:	e2cc      	b.n	8006df8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 800685e:	481d      	ldr	r0, [pc, #116]	; (80068d4 <cppLoop+0xc8c>)
 8006860:	f7fb fab4 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006864:	4603      	mov	r3, r0
 8006866:	2b10      	cmp	r3, #16
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8084 	beq.w	800697e <cppLoop+0xd36>
			led.LR(-1, 1);
 8006876:	2201      	movs	r2, #1
 8006878:	f04f 31ff 	mov.w	r1, #4294967295
 800687c:	4812      	ldr	r0, [pc, #72]	; (80068c8 <cppLoop+0xc80>)
 800687e:	f7fb fbc5 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006882:	2064      	movs	r0, #100	; 0x64
 8006884:	f000 fbf6 	bl	8007074 <HAL_Delay>
			if(selector == 0){
 8006888:	4b20      	ldr	r3, [pc, #128]	; (800690c <cppLoop+0xcc4>)
 800688a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d13e      	bne.n	8006910 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006892:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <cppLoop+0xcb0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7f9 fe6e 	bl	8000578 <__aeabi_f2d>
 800689c:	a308      	add	r3, pc, #32	; (adr r3, 80068c0 <cppLoop+0xc78>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fd0b 	bl	80002bc <__adddf3>
 80068a6:	4603      	mov	r3, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	4618      	mov	r0, r3
 80068ac:	4621      	mov	r1, r4
 80068ae:	f7fa f9b3 	bl	8000c18 <__aeabi_d2f>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <cppLoop+0xcb0>)
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e056      	b.n	8006968 <cppLoop+0xd20>
 80068ba:	bf00      	nop
 80068bc:	f3af 8000 	nop.w
 80068c0:	88e368f1 	.word	0x88e368f1
 80068c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80068c8:	20000598 	.word	0x20000598
 80068cc:	08017e38 	.word	0x08017e38
 80068d0:	08017e44 	.word	0x08017e44
 80068d4:	2000058c 	.word	0x2000058c
 80068d8:	3fc8f5c3 	.word	0x3fc8f5c3
 80068dc:	00000000 	.word	0x00000000
 80068e0:	2001f9dc 	.word	0x2001f9dc
 80068e4:	2001fcc0 	.word	0x2001fcc0
 80068e8:	408f4000 	.word	0x408f4000
 80068ec:	08017d6c 	.word	0x08017d6c
 80068f0:	08017d78 	.word	0x08017d78
 80068f4:	20037418 	.word	0x20037418
 80068f8:	20037414 	.word	0x20037414
 80068fc:	20037420 	.word	0x20037420
 8006900:	2003741c 	.word	0x2003741c
 8006904:	20037428 	.word	0x20037428
 8006908:	20037424 	.word	0x20037424
 800690c:	200373f8 	.word	0x200373f8
			else if(selector == 1){
 8006910:	4ba3      	ldr	r3, [pc, #652]	; (8006ba0 <cppLoop+0xf58>)
 8006912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d113      	bne.n	8006942 <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 800691a:	4ba2      	ldr	r3, [pc, #648]	; (8006ba4 <cppLoop+0xf5c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7f9 fe2a 	bl	8000578 <__aeabi_f2d>
 8006924:	a39c      	add	r3, pc, #624	; (adr r3, 8006b98 <cppLoop+0xf50>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7f9 fcc7 	bl	80002bc <__adddf3>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	4618      	mov	r0, r3
 8006934:	4621      	mov	r1, r4
 8006936:	f7fa f96f 	bl	8000c18 <__aeabi_d2f>
 800693a:	4602      	mov	r2, r0
 800693c:	4b99      	ldr	r3, [pc, #612]	; (8006ba4 <cppLoop+0xf5c>)
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e012      	b.n	8006968 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006942:	4b99      	ldr	r3, [pc, #612]	; (8006ba8 <cppLoop+0xf60>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f7f9 fe16 	bl	8000578 <__aeabi_f2d>
 800694c:	a392      	add	r3, pc, #584	; (adr r3, 8006b98 <cppLoop+0xf50>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fcb3 	bl	80002bc <__adddf3>
 8006956:	4603      	mov	r3, r0
 8006958:	460c      	mov	r4, r1
 800695a:	4618      	mov	r0, r3
 800695c:	4621      	mov	r1, r4
 800695e:	f7fa f95b 	bl	8000c18 <__aeabi_d2f>
 8006962:	4602      	mov	r2, r0
 8006964:	4b90      	ldr	r3, [pc, #576]	; (8006ba8 <cppLoop+0xf60>)
 8006966:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006968:	2152      	movs	r1, #82	; 0x52
 800696a:	4890      	ldr	r0, [pc, #576]	; (8006bac <cppLoop+0xf64>)
 800696c:	f7fb fa92 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006970:	2200      	movs	r2, #0
 8006972:	f04f 31ff 	mov.w	r1, #4294967295
 8006976:	488d      	ldr	r0, [pc, #564]	; (8006bac <cppLoop+0xf64>)
 8006978:	f7fb fb48 	bl	800200c <_ZN3LED2LREaa>
		break;
 800697c:	e23c      	b.n	8006df8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 800697e:	488c      	ldr	r0, [pc, #560]	; (8006bb0 <cppLoop+0xf68>)
 8006980:	f7fb fa24 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d058      	beq.n	8006a46 <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006994:	2201      	movs	r2, #1
 8006996:	f04f 31ff 	mov.w	r1, #4294967295
 800699a:	4884      	ldr	r0, [pc, #528]	; (8006bac <cppLoop+0xf64>)
 800699c:	f7fb fb36 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80069a0:	2064      	movs	r0, #100	; 0x64
 80069a2:	f000 fb67 	bl	8007074 <HAL_Delay>
			if(selector == 0){
 80069a6:	4b7e      	ldr	r3, [pc, #504]	; (8006ba0 <cppLoop+0xf58>)
 80069a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d113      	bne.n	80069d8 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 80069b0:	4b80      	ldr	r3, [pc, #512]	; (8006bb4 <cppLoop+0xf6c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7f9 fddf 	bl	8000578 <__aeabi_f2d>
 80069ba:	a377      	add	r3, pc, #476	; (adr r3, 8006b98 <cppLoop+0xf50>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fc7a 	bl	80002b8 <__aeabi_dsub>
 80069c4:	4603      	mov	r3, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	4618      	mov	r0, r3
 80069ca:	4621      	mov	r1, r4
 80069cc:	f7fa f924 	bl	8000c18 <__aeabi_d2f>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b78      	ldr	r3, [pc, #480]	; (8006bb4 <cppLoop+0xf6c>)
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e02b      	b.n	8006a30 <cppLoop+0xde8>
			else if(selector == 1){
 80069d8:	4b71      	ldr	r3, [pc, #452]	; (8006ba0 <cppLoop+0xf58>)
 80069da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d113      	bne.n	8006a0a <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 80069e2:	4b70      	ldr	r3, [pc, #448]	; (8006ba4 <cppLoop+0xf5c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7f9 fdc6 	bl	8000578 <__aeabi_f2d>
 80069ec:	a36a      	add	r3, pc, #424	; (adr r3, 8006b98 <cppLoop+0xf50>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fc61 	bl	80002b8 <__aeabi_dsub>
 80069f6:	4603      	mov	r3, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	4618      	mov	r0, r3
 80069fc:	4621      	mov	r1, r4
 80069fe:	f7fa f90b 	bl	8000c18 <__aeabi_d2f>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b67      	ldr	r3, [pc, #412]	; (8006ba4 <cppLoop+0xf5c>)
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e012      	b.n	8006a30 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8006a0a:	4b67      	ldr	r3, [pc, #412]	; (8006ba8 <cppLoop+0xf60>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fdb2 	bl	8000578 <__aeabi_f2d>
 8006a14:	a360      	add	r3, pc, #384	; (adr r3, 8006b98 <cppLoop+0xf50>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f7f9 fc4d 	bl	80002b8 <__aeabi_dsub>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	4618      	mov	r0, r3
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7fa f8f7 	bl	8000c18 <__aeabi_d2f>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ba8 <cppLoop+0xf60>)
 8006a2e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006a30:	2152      	movs	r1, #82	; 0x52
 8006a32:	485e      	ldr	r0, [pc, #376]	; (8006bac <cppLoop+0xf64>)
 8006a34:	f7fb fa2e 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a3e:	485b      	ldr	r0, [pc, #364]	; (8006bac <cppLoop+0xf64>)
 8006a40:	f7fb fae4 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006a44:	e1d8      	b.n	8006df8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 8006a46:	485a      	ldr	r0, [pc, #360]	; (8006bb0 <cppLoop+0xf68>)
 8006a48:	f7fb f9c0 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d048      	beq.n	8006aee <cppLoop+0xea6>
			led.LR(-1, 1);
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a62:	4852      	ldr	r0, [pc, #328]	; (8006bac <cppLoop+0xf64>)
 8006a64:	f7fb fad2 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a6c:	f000 fb02 	bl	8007074 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006a70:	f107 030c 	add.w	r3, r7, #12
 8006a74:	2201      	movs	r2, #1
 8006a76:	4950      	ldr	r1, [pc, #320]	; (8006bb8 <cppLoop+0xf70>)
 8006a78:	4850      	ldr	r0, [pc, #320]	; (8006bbc <cppLoop+0xf74>)
 8006a7a:	f7fa fddf 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	2201      	movs	r2, #1
 8006a84:	494e      	ldr	r1, [pc, #312]	; (8006bc0 <cppLoop+0xf78>)
 8006a86:	484d      	ldr	r0, [pc, #308]	; (8006bbc <cppLoop+0xf74>)
 8006a88:	f7fa fdd8 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	2201      	movs	r2, #1
 8006a90:	494c      	ldr	r1, [pc, #304]	; (8006bc4 <cppLoop+0xf7c>)
 8006a92:	484a      	ldr	r0, [pc, #296]	; (8006bbc <cppLoop+0xf74>)
 8006a94:	f7fa fdd2 	bl	800163c <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7f9 fd6c 	bl	8000578 <__aeabi_f2d>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 fd66 	bl	8000578 <__aeabi_f2d>
 8006aac:	4680      	mov	r8, r0
 8006aae:	4689      	mov	r9, r1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7f9 fd60 	bl	8000578 <__aeabi_f2d>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	ec43 2b12 	vmov	d2, r2, r3
 8006ac0:	ec49 8b11 	vmov	d1, r8, r9
 8006ac4:	ec45 4b10 	vmov	d0, r4, r5
 8006ac8:	483f      	ldr	r0, [pc, #252]	; (8006bc8 <cppLoop+0xf80>)
 8006aca:	f7fc fca1 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a38      	ldr	r2, [pc, #224]	; (8006bb4 <cppLoop+0xf6c>)
 8006ad2:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4a33      	ldr	r2, [pc, #204]	; (8006ba4 <cppLoop+0xf5c>)
 8006ad8:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a32      	ldr	r2, [pc, #200]	; (8006ba8 <cppLoop+0xf60>)
 8006ade:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae6:	4831      	ldr	r0, [pc, #196]	; (8006bac <cppLoop+0xf64>)
 8006ae8:	f7fb fa90 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006aec:	e184      	b.n	8006df8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 8006aee:	4830      	ldr	r0, [pc, #192]	; (8006bb0 <cppLoop+0xf68>)
 8006af0:	f7fb f96c 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8179 	beq.w	8006df8 <cppLoop+0x11b0>
			led.LR(-1, 1);
 8006b06:	2201      	movs	r2, #1
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	4827      	ldr	r0, [pc, #156]	; (8006bac <cppLoop+0xf64>)
 8006b0e:	f7fb fa7d 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006b12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b16:	f000 faad 	bl	8007074 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <cppLoop+0xf6c>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	4925      	ldr	r1, [pc, #148]	; (8006bb8 <cppLoop+0xf70>)
 8006b24:	4825      	ldr	r0, [pc, #148]	; (8006bbc <cppLoop+0xf74>)
 8006b26:	f7fa fd23 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <cppLoop+0xf5c>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	4923      	ldr	r1, [pc, #140]	; (8006bc0 <cppLoop+0xf78>)
 8006b34:	4821      	ldr	r0, [pc, #132]	; (8006bbc <cppLoop+0xf74>)
 8006b36:	f7fa fd1b 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <cppLoop+0xf60>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	4920      	ldr	r1, [pc, #128]	; (8006bc4 <cppLoop+0xf7c>)
 8006b44:	481d      	ldr	r0, [pc, #116]	; (8006bbc <cppLoop+0xf74>)
 8006b46:	f7fa fd13 	bl	8001570 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <cppLoop+0xf6c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fd12 	bl	8000578 <__aeabi_f2d>
 8006b54:	4604      	mov	r4, r0
 8006b56:	460d      	mov	r5, r1
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <cppLoop+0xf5c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7f9 fd0b 	bl	8000578 <__aeabi_f2d>
 8006b62:	4680      	mov	r8, r0
 8006b64:	4689      	mov	r9, r1
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <cppLoop+0xf60>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7f9 fd04 	bl	8000578 <__aeabi_f2d>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	ec43 2b12 	vmov	d2, r2, r3
 8006b78:	ec49 8b11 	vmov	d1, r8, r9
 8006b7c:	ec45 4b10 	vmov	d0, r4, r5
 8006b80:	4811      	ldr	r0, [pc, #68]	; (8006bc8 <cppLoop+0xf80>)
 8006b82:	f7fc fc45 	bl	8003410 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006b86:	2200      	movs	r2, #0
 8006b88:	f04f 31ff 	mov.w	r1, #4294967295
 8006b8c:	4807      	ldr	r0, [pc, #28]	; (8006bac <cppLoop+0xf64>)
 8006b8e:	f7fb fa3d 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006b92:	e131      	b.n	8006df8 <cppLoop+0x11b0>
 8006b94:	f3af 8000 	nop.w
 8006b98:	88e368f1 	.word	0x88e368f1
 8006b9c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006ba0:	200373f8 	.word	0x200373f8
 8006ba4:	2003741c 	.word	0x2003741c
 8006ba8:	20037424 	.word	0x20037424
 8006bac:	20000598 	.word	0x20000598
 8006bb0:	2000058c 	.word	0x2000058c
 8006bb4:	20037414 	.word	0x20037414
 8006bb8:	08017e4c 	.word	0x08017e4c
 8006bbc:	08017d90 	.word	0x08017d90
 8006bc0:	08017e54 	.word	0x08017e54
 8006bc4:	08017e5c 	.word	0x08017e5c
 8006bc8:	2001fcc0 	.word	0x2001fcc0

	case 9:
		led.fullColor('M');
 8006bcc:	214d      	movs	r1, #77	; 0x4d
 8006bce:	4898      	ldr	r0, [pc, #608]	; (8006e30 <cppLoop+0x11e8>)
 8006bd0:	f7fb f960 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006bd4:	f7fa fa64 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f7fa fa70 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006be0:	4894      	ldr	r0, [pc, #592]	; (8006e34 <cppLoop+0x11ec>)
 8006be2:	f7fa fa97 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006be6:	2101      	movs	r1, #1
 8006be8:	2000      	movs	r0, #0
 8006bea:	f7fa fa69 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006bee:	4892      	ldr	r0, [pc, #584]	; (8006e38 <cppLoop+0x11f0>)
 8006bf0:	f7fa fa90 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006bf4:	4891      	ldr	r0, [pc, #580]	; (8006e3c <cppLoop+0x11f4>)
 8006bf6:	f7fb f8e9 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80f8 	beq.w	8006dfc <cppLoop+0x11b4>
			HAL_Delay(1500);
 8006c0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006c10:	f000 fa30 	bl	8007074 <HAL_Delay>
			led.LR(-1, 1);
 8006c14:	2201      	movs	r2, #1
 8006c16:	f04f 31ff 	mov.w	r1, #4294967295
 8006c1a:	4885      	ldr	r0, [pc, #532]	; (8006e30 <cppLoop+0x11e8>)
 8006c1c:	f7fb f9f6 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006c20:	4887      	ldr	r0, [pc, #540]	; (8006e40 <cppLoop+0x11f8>)
 8006c22:	f7fc f913 	bl	8002e4c <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006c26:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8006e18 <cppLoop+0x11d0>
 8006c2a:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8006e20 <cppLoop+0x11d8>
 8006c2e:	4885      	ldr	r0, [pc, #532]	; (8006e44 <cppLoop+0x11fc>)
 8006c30:	f7fc f99e 	bl	8002f70 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c38:	f000 fa1c 	bl	8007074 <HAL_Delay>

			logger.stop();
 8006c3c:	4880      	ldr	r0, [pc, #512]	; (8006e40 <cppLoop+0x11f8>)
 8006c3e:	f7fc f914 	bl	8002e6a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006c42:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8006e28 <cppLoop+0x11e0>
 8006c46:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8006e28 <cppLoop+0x11e0>
 8006c4a:	487e      	ldr	r0, [pc, #504]	; (8006e44 <cppLoop+0x11fc>)
 8006c4c:	f7fc f990 	bl	8002f70 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006c50:	4a7d      	ldr	r2, [pc, #500]	; (8006e48 <cppLoop+0x1200>)
 8006c52:	497e      	ldr	r1, [pc, #504]	; (8006e4c <cppLoop+0x1204>)
 8006c54:	487a      	ldr	r0, [pc, #488]	; (8006e40 <cppLoop+0x11f8>)
 8006c56:	f7fc f8ac 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c60:	4873      	ldr	r0, [pc, #460]	; (8006e30 <cppLoop+0x11e8>)
 8006c62:	f7fb f9d3 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006c66:	e0c9      	b.n	8006dfc <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8006c68:	2159      	movs	r1, #89	; 0x59
 8006c6a:	4871      	ldr	r0, [pc, #452]	; (8006e30 <cppLoop+0x11e8>)
 8006c6c:	f7fb f912 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c70:	f7fa fa16 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c74:	2100      	movs	r1, #0
 8006c76:	2000      	movs	r0, #0
 8006c78:	f7fa fa22 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006c7c:	4874      	ldr	r0, [pc, #464]	; (8006e50 <cppLoop+0x1208>)
 8006c7e:	f7fa fa49 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c82:	2101      	movs	r1, #1
 8006c84:	2000      	movs	r0, #0
 8006c86:	f7fa fa1b 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006c8a:	4872      	ldr	r0, [pc, #456]	; (8006e54 <cppLoop+0x120c>)
 8006c8c:	f7fa fa42 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c90:	486a      	ldr	r0, [pc, #424]	; (8006e3c <cppLoop+0x11f4>)
 8006c92:	f7fb f89b 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2301      	moveq	r3, #1
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80ac 	beq.w	8006e00 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8006ca8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006cac:	f000 f9e2 	bl	8007074 <HAL_Delay>
			led.LR(-1, 1);
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb6:	485e      	ldr	r0, [pc, #376]	; (8006e30 <cppLoop+0x11e8>)
 8006cb8:	f7fb f9a8 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006cbc:	4860      	ldr	r0, [pc, #384]	; (8006e40 <cppLoop+0x11f8>)
 8006cbe:	f7fc f8c5 	bl	8002e4c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006cc2:	4865      	ldr	r0, [pc, #404]	; (8006e58 <cppLoop+0x1210>)
 8006cc4:	f7fc ffdf 	bl	8003c86 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8006cc8:	eddf 0a64 	vldr	s1, [pc, #400]	; 8006e5c <cppLoop+0x1214>
 8006ccc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006cd0:	4861      	ldr	r0, [pc, #388]	; (8006e58 <cppLoop+0x1210>)
 8006cd2:	f7fc ff61 	bl	8003b98 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cda:	f000 f9cb 	bl	8007074 <HAL_Delay>

			logger.stop();
 8006cde:	4858      	ldr	r0, [pc, #352]	; (8006e40 <cppLoop+0x11f8>)
 8006ce0:	f7fc f8c3 	bl	8002e6a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006ce4:	485c      	ldr	r0, [pc, #368]	; (8006e58 <cppLoop+0x1210>)
 8006ce6:	f7fc ffe3 	bl	8003cb0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006cea:	4a5d      	ldr	r2, [pc, #372]	; (8006e60 <cppLoop+0x1218>)
 8006cec:	4957      	ldr	r1, [pc, #348]	; (8006e4c <cppLoop+0x1204>)
 8006cee:	4854      	ldr	r0, [pc, #336]	; (8006e40 <cppLoop+0x11f8>)
 8006cf0:	f7fc f85f 	bl	8002db2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cfa:	484d      	ldr	r0, [pc, #308]	; (8006e30 <cppLoop+0x11e8>)
 8006cfc:	f7fb f986 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006d00:	e07e      	b.n	8006e00 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 8006d02:	2143      	movs	r1, #67	; 0x43
 8006d04:	484a      	ldr	r0, [pc, #296]	; (8006e30 <cppLoop+0x11e8>)
 8006d06:	f7fb f8c5 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d0a:	f7fa f9c9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2000      	movs	r0, #0
 8006d12:	f7fa f9d5 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006d16:	4853      	ldr	r0, [pc, #332]	; (8006e64 <cppLoop+0x121c>)
 8006d18:	f7fa f9fc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f7fa f9ce 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006d24:	4850      	ldr	r0, [pc, #320]	; (8006e68 <cppLoop+0x1220>)
 8006d26:	f7fa f9f5 	bl	8001114 <lcd_printf>

		break;
 8006d2a:	e06a      	b.n	8006e02 <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 8006d2c:	2152      	movs	r1, #82	; 0x52
 8006d2e:	4840      	ldr	r0, [pc, #256]	; (8006e30 <cppLoop+0x11e8>)
 8006d30:	f7fb f8b0 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d34:	f7fa f9b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d38:	2100      	movs	r1, #0
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7fa f9c0 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8006d40:	484a      	ldr	r0, [pc, #296]	; (8006e6c <cppLoop+0x1224>)
 8006d42:	f7fa f9e7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d46:	2101      	movs	r1, #1
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f7fa f9b9 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006d4e:	4846      	ldr	r0, [pc, #280]	; (8006e68 <cppLoop+0x1220>)
 8006d50:	f7fa f9e0 	bl	8001114 <lcd_printf>

		break;
 8006d54:	e055      	b.n	8006e02 <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 8006d56:	2147      	movs	r1, #71	; 0x47
 8006d58:	4835      	ldr	r0, [pc, #212]	; (8006e30 <cppLoop+0x11e8>)
 8006d5a:	f7fb f89b 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d5e:	f7fa f99f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d62:	2100      	movs	r1, #0
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7fa f9ab 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8006d6a:	4841      	ldr	r0, [pc, #260]	; (8006e70 <cppLoop+0x1228>)
 8006d6c:	f7fa f9d2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d70:	2101      	movs	r1, #1
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7fa f9a4 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006d78:	483b      	ldr	r0, [pc, #236]	; (8006e68 <cppLoop+0x1220>)
 8006d7a:	f7fa f9cb 	bl	8001114 <lcd_printf>

		break;
 8006d7e:	e040      	b.n	8006e02 <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8006d80:	2142      	movs	r1, #66	; 0x42
 8006d82:	482b      	ldr	r0, [pc, #172]	; (8006e30 <cppLoop+0x11e8>)
 8006d84:	f7fb f886 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d88:	f7fa f98a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7fa f996 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8006d94:	4837      	ldr	r0, [pc, #220]	; (8006e74 <cppLoop+0x122c>)
 8006d96:	f7fa f9bd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7fa f98f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006da2:	4831      	ldr	r0, [pc, #196]	; (8006e68 <cppLoop+0x1220>)
 8006da4:	f7fa f9b6 	bl	8001114 <lcd_printf>

		break;
 8006da8:	e02b      	b.n	8006e02 <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 8006daa:	214d      	movs	r1, #77	; 0x4d
 8006dac:	4820      	ldr	r0, [pc, #128]	; (8006e30 <cppLoop+0x11e8>)
 8006dae:	f7fb f871 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006db2:	f7fa f975 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006db6:	2100      	movs	r1, #0
 8006db8:	2000      	movs	r0, #0
 8006dba:	f7fa f981 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8006dbe:	482e      	ldr	r0, [pc, #184]	; (8006e78 <cppLoop+0x1230>)
 8006dc0:	f7fa f9a8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	f7fa f97a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006dcc:	4826      	ldr	r0, [pc, #152]	; (8006e68 <cppLoop+0x1220>)
 8006dce:	f7fa f9a1 	bl	8001114 <lcd_printf>

		break;
 8006dd2:	e016      	b.n	8006e02 <cppLoop+0x11ba>

	default:
		break;
 8006dd4:	bf00      	nop
 8006dd6:	e014      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006dd8:	bf00      	nop
 8006dda:	e012      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006ddc:	bf00      	nop
 8006dde:	e010      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006de0:	bf00      	nop
 8006de2:	e00e      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006de4:	bf00      	nop
 8006de6:	e00c      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006de8:	bf00      	nop
 8006dea:	e00a      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006dec:	bf00      	nop
 8006dee:	e008      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006df0:	bf00      	nop
 8006df2:	e006      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <cppLoop+0x11ba>
		break;
 8006e00:	bf00      	nop

	}

	HAL_Delay(30);
 8006e02:	201e      	movs	r0, #30
 8006e04:	f000 f936 	bl	8007074 <HAL_Delay>

}
 8006e08:	bf00      	nop
 8006e0a:	3724      	adds	r7, #36	; 0x24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e12:	bf00      	nop
 8006e14:	f3af 8000 	nop.w
 8006e18:	33333333 	.word	0x33333333
 8006e1c:	bfd33333 	.word	0xbfd33333
 8006e20:	33333333 	.word	0x33333333
 8006e24:	3fd33333 	.word	0x3fd33333
	...
 8006e30:	20000598 	.word	0x20000598
 8006e34:	08017e64 	.word	0x08017e64
 8006e38:	08017dc4 	.word	0x08017dc4
 8006e3c:	2000058c 	.word	0x2000058c
 8006e40:	200005bc 	.word	0x200005bc
 8006e44:	20000594 	.word	0x20000594
 8006e48:	08017e6c 	.word	0x08017e6c
 8006e4c:	08017e78 	.word	0x08017e78
 8006e50:	08017e84 	.word	0x08017e84
 8006e54:	08017e88 	.word	0x08017e88
 8006e58:	2001f9dc 	.word	0x2001f9dc
 8006e5c:	00000000 	.word	0x00000000
 8006e60:	08017e94 	.word	0x08017e94
 8006e64:	08017ea0 	.word	0x08017ea0
 8006e68:	08017eac 	.word	0x08017eac
 8006e6c:	08017eb8 	.word	0x08017eb8
 8006e70:	08017ec4 	.word	0x08017ec4
 8006e74:	08017ed0 	.word	0x08017ed0
 8006e78:	08017edc 	.word	0x08017edc

08006e7c <_Z41__static_initialization_and_destruction_0ii>:
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d133      	bne.n	8006ef4 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d12e      	bne.n	8006ef4 <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 8006e96:	4819      	ldr	r0, [pc, #100]	; (8006efc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006e98:	f7fb f8f0 	bl	800207c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006e9c:	4818      	ldr	r0, [pc, #96]	; (8006f00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006e9e:	f7fc fbdf 	bl	8003660 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006ea2:	4818      	ldr	r0, [pc, #96]	; (8006f04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006ea4:	f7fa ff86 	bl	8001db4 <_ZN8JoyStickC1Ev>
Motor motor;
 8006ea8:	4817      	ldr	r0, [pc, #92]	; (8006f08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006eaa:	f7fb ffed 	bl	8002e88 <_ZN5MotorC1Ev>
IMU imu;
 8006eae:	4817      	ldr	r0, [pc, #92]	; (8006f0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006eb0:	f7fa fd76 	bl	80019a0 <_ZN3IMUC1Ev>
Logger logger;
 8006eb4:	4816      	ldr	r0, [pc, #88]	; (8006f10 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006eb6:	f7fb fe97 	bl	8002be8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006eba:	4816      	ldr	r0, [pc, #88]	; (8006f14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ebc:	f7fa f94a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006ec0:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006ec2:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ec4:	4910      	ldr	r1, [pc, #64]	; (8006f08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ec6:	4814      	ldr	r0, [pc, #80]	; (8006f18 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006ec8:	f7fc fd36 	bl	8003938 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006ecc:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006ece:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006ed0:	490d      	ldr	r1, [pc, #52]	; (8006f08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ed2:	4812      	ldr	r0, [pc, #72]	; (8006f1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006ed4:	f7fb fc2a 	bl	800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006eda:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006edc:	490d      	ldr	r1, [pc, #52]	; (8006f14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006ede:	4810      	ldr	r0, [pc, #64]	; (8006f20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006ee0:	f7fc f8b8 	bl	8003054 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006ee4:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ee6:	490a      	ldr	r1, [pc, #40]	; (8006f10 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006ee8:	480e      	ldr	r0, [pc, #56]	; (8006f24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006eea:	f7fc fc23 	bl	8003734 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006eee:	480e      	ldr	r0, [pc, #56]	; (8006f28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006ef0:	f7fc f9d6 	bl	80032a0 <_ZN13PathFollowingC1Ev>
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000290 	.word	0x20000290
 8006f00:	20000588 	.word	0x20000588
 8006f04:	2000058c 	.word	0x2000058c
 8006f08:	20000594 	.word	0x20000594
 8006f0c:	200005a8 	.word	0x200005a8
 8006f10:	200005bc 	.word	0x200005bc
 8006f14:	2001f9c4 	.word	0x2001f9c4
 8006f18:	2001f9dc 	.word	0x2001f9dc
 8006f1c:	2001fa14 	.word	0x2001fa14
 8006f20:	2001fa80 	.word	0x2001fa80
 8006f24:	2001fab0 	.word	0x2001fab0
 8006f28:	2001fcc0 	.word	0x2001fcc0

08006f2c <_GLOBAL__sub_I_line_sensor>:
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f34:	2001      	movs	r0, #1
 8006f36:	f7ff ffa1 	bl	8006e7c <_Z41__static_initialization_and_destruction_0ii>
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f42:	e003      	b.n	8006f4c <LoopCopyDataInit>

08006f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f4a:	3104      	adds	r1, #4

08006f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f4c:	480b      	ldr	r0, [pc, #44]	; (8006f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f54:	d3f6      	bcc.n	8006f44 <CopyDataInit>
  ldr  r2, =_sbss
 8006f56:	4a0b      	ldr	r2, [pc, #44]	; (8006f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006f58:	e002      	b.n	8006f60 <LoopFillZerobss>

08006f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006f5c:	f842 3b04 	str.w	r3, [r2], #4

08006f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006f60:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006f64:	d3f9      	bcc.n	8006f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f66:	f7fe fcc7 	bl	80058f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f6a:	f00b fded 	bl	8012b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f6e:	f7fc ff8b 	bl	8003e88 <main>
  bx  lr    
 8006f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006f74:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006f78:	080184e0 	.word	0x080184e0
  ldr  r0, =_sdata
 8006f7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006f80:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006f84:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006f88:	2003be08 	.word	0x2003be08

08006f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f8c:	e7fe      	b.n	8006f8c <ADC_IRQHandler>
	...

08006f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <HAL_Init+0x40>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a0d      	ldr	r2, [pc, #52]	; (8006fd0 <HAL_Init+0x40>)
 8006f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <HAL_Init+0x40>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <HAL_Init+0x40>)
 8006fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <HAL_Init+0x40>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a07      	ldr	r2, [pc, #28]	; (8006fd0 <HAL_Init+0x40>)
 8006fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fb8:	2003      	movs	r0, #3
 8006fba:	f000 fd51 	bl	8007a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f000 f808 	bl	8006fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fc4:	f7fd fe86 	bl	8004cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40023c00 	.word	0x40023c00

08006fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <HAL_InitTick+0x54>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b12      	ldr	r3, [pc, #72]	; (800702c <HAL_InitTick+0x58>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fd69 	bl	8007aca <HAL_SYSTICK_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e00e      	b.n	8007020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d80a      	bhi.n	800701e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007008:	2200      	movs	r2, #0
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	f000 fd31 	bl	8007a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007014:	4a06      	ldr	r2, [pc, #24]	; (8007030 <HAL_InitTick+0x5c>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e000      	b.n	8007020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000000 	.word	0x20000000
 800702c:	20000008 	.word	0x20000008
 8007030:	20000004 	.word	0x20000004

08007034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_IncTick+0x20>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_IncTick+0x24>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4413      	add	r3, r2
 8007044:	4a04      	ldr	r2, [pc, #16]	; (8007058 <HAL_IncTick+0x24>)
 8007046:	6013      	str	r3, [r2, #0]
}
 8007048:	bf00      	nop
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000008 	.word	0x20000008
 8007058:	20039d90 	.word	0x20039d90

0800705c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return uwTick;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <HAL_GetTick+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20039d90 	.word	0x20039d90

08007074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800707c:	f7ff ffee 	bl	800705c <HAL_GetTick>
 8007080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d005      	beq.n	800709a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_Delay+0x40>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800709a:	bf00      	nop
 800709c:	f7ff ffde 	bl	800705c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d8f7      	bhi.n	800709c <HAL_Delay+0x28>
  {
  }
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000008 	.word	0x20000008

080070b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e033      	b.n	8007136 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fd fe24 	bl	8004d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d118      	bne.n	8007128 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070fe:	f023 0302 	bic.w	r3, r3, #2
 8007102:	f043 0202 	orr.w	r2, r3, #2
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa5a 	bl	80075c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
 8007126:	e001      	b.n	800712c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_ADC_Start_DMA+0x1e>
 800715a:	2302      	movs	r3, #2
 800715c:	e0cc      	b.n	80072f8 <HAL_ADC_Start_DMA+0x1b8>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d018      	beq.n	80071a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_ADC_Start_DMA+0x1c0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a5e      	ldr	r2, [pc, #376]	; (8007304 <HAL_ADC_Start_DMA+0x1c4>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	0c9a      	lsrs	r2, r3, #18
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007198:	e002      	b.n	80071a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f9      	bne.n	800719a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 80a0 	bne.w	80072f6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80071e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f4:	d106      	bne.n	8007204 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	f023 0206 	bic.w	r2, r3, #6
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44
 8007202:	e002      	b.n	800720a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007212:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <HAL_ADC_Start_DMA+0x1c8>)
 8007214:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	4a3c      	ldr	r2, [pc, #240]	; (800730c <HAL_ADC_Start_DMA+0x1cc>)
 800721c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	4a3b      	ldr	r2, [pc, #236]	; (8007310 <HAL_ADC_Start_DMA+0x1d0>)
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <HAL_ADC_Start_DMA+0x1d4>)
 800722c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007236:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007246:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007256:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	334c      	adds	r3, #76	; 0x4c
 8007262:	4619      	mov	r1, r3
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f000 fcea 	bl	8007c40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2b00      	cmp	r3, #0
 8007276:	d12a      	bne.n	80072ce <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a26      	ldr	r2, [pc, #152]	; (8007318 <HAL_ADC_Start_DMA+0x1d8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d015      	beq.n	80072ae <HAL_ADC_Start_DMA+0x16e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_ADC_Start_DMA+0x1dc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d105      	bne.n	8007298 <HAL_ADC_Start_DMA+0x158>
 800728c:	4b1e      	ldr	r3, [pc, #120]	; (8007308 <HAL_ADC_Start_DMA+0x1c8>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <HAL_ADC_Start_DMA+0x1e0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d129      	bne.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
 80072a2:	4b19      	ldr	r3, [pc, #100]	; (8007308 <HAL_ADC_Start_DMA+0x1c8>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d823      	bhi.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11c      	bne.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	e013      	b.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a11      	ldr	r2, [pc, #68]	; (8007318 <HAL_ADC_Start_DMA+0x1d8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d10e      	bne.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80072f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000000 	.word	0x20000000
 8007304:	431bde83 	.word	0x431bde83
 8007308:	40012300 	.word	0x40012300
 800730c:	080077bd 	.word	0x080077bd
 8007310:	08007877 	.word	0x08007877
 8007314:	08007893 	.word	0x08007893
 8007318:	40012000 	.word	0x40012000
 800731c:	40012100 	.word	0x40012100
 8007320:	40012200 	.word	0x40012200

08007324 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_ADC_ConfigChannel+0x1c>
 8007378:	2302      	movs	r3, #2
 800737a:	e113      	b.n	80075a4 <HAL_ADC_ConfigChannel+0x244>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b09      	cmp	r3, #9
 800738a:	d925      	bls.n	80073d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68d9      	ldr	r1, [r3, #12]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	3b1e      	subs	r3, #30
 80073a2:	2207      	movs	r2, #7
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	43da      	mvns	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	400a      	ands	r2, r1
 80073b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68d9      	ldr	r1, [r3, #12]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4618      	mov	r0, r3
 80073c4:	4603      	mov	r3, r0
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4403      	add	r3, r0
 80073ca:	3b1e      	subs	r3, #30
 80073cc:	409a      	lsls	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	e022      	b.n	800741e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6919      	ldr	r1, [r3, #16]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	2207      	movs	r2, #7
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	43da      	mvns	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	400a      	ands	r2, r1
 80073fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6919      	ldr	r1, [r3, #16]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	4618      	mov	r0, r3
 800740e:	4603      	mov	r3, r0
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4403      	add	r3, r0
 8007414:	409a      	lsls	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b06      	cmp	r3, #6
 8007424:	d824      	bhi.n	8007470 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	3b05      	subs	r3, #5
 8007438:	221f      	movs	r2, #31
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	43da      	mvns	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	400a      	ands	r2, r1
 8007446:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	4618      	mov	r0, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	3b05      	subs	r3, #5
 8007462:	fa00 f203 	lsl.w	r2, r0, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	635a      	str	r2, [r3, #52]	; 0x34
 800746e:	e04c      	b.n	800750a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b0c      	cmp	r3, #12
 8007476:	d824      	bhi.n	80074c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	3b23      	subs	r3, #35	; 0x23
 800748a:	221f      	movs	r2, #31
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	43da      	mvns	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	400a      	ands	r2, r1
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	4618      	mov	r0, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	3b23      	subs	r3, #35	; 0x23
 80074b4:	fa00 f203 	lsl.w	r2, r0, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
 80074c0:	e023      	b.n	800750a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	3b41      	subs	r3, #65	; 0x41
 80074d4:	221f      	movs	r2, #31
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43da      	mvns	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	400a      	ands	r2, r1
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4618      	mov	r0, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	3b41      	subs	r3, #65	; 0x41
 80074fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800750a:	4b29      	ldr	r3, [pc, #164]	; (80075b0 <HAL_ADC_ConfigChannel+0x250>)
 800750c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <HAL_ADC_ConfigChannel+0x254>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d10f      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x1d8>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b12      	cmp	r3, #18
 800751e:	d10b      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <HAL_ADC_ConfigChannel+0x254>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d12b      	bne.n	800759a <HAL_ADC_ConfigChannel+0x23a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_ADC_ConfigChannel+0x258>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x1f4>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b11      	cmp	r3, #17
 8007552:	d122      	bne.n	800759a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <HAL_ADC_ConfigChannel+0x258>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d111      	bne.n	800759a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <HAL_ADC_ConfigChannel+0x25c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a11      	ldr	r2, [pc, #68]	; (80075c0 <HAL_ADC_ConfigChannel+0x260>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	0c9a      	lsrs	r2, r3, #18
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800758c:	e002      	b.n	8007594 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	3b01      	subs	r3, #1
 8007592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f9      	bne.n	800758e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	40012300 	.word	0x40012300
 80075b4:	40012000 	.word	0x40012000
 80075b8:	10000012 	.word	0x10000012
 80075bc:	20000000 	.word	0x20000000
 80075c0:	431bde83 	.word	0x431bde83

080075c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075cc:	4b79      	ldr	r3, [pc, #484]	; (80077b4 <ADC_Init+0x1f0>)
 80075ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6859      	ldr	r1, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	021a      	lsls	r2, r3, #8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800761c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800763e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6899      	ldr	r1, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	4a58      	ldr	r2, [pc, #352]	; (80077b8 <ADC_Init+0x1f4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d022      	beq.n	80076a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800766a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6899      	ldr	r1, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800768c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6899      	ldr	r1, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	e00f      	b.n	80076c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0202 	bic.w	r2, r2, #2
 80076d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6899      	ldr	r1, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7e1b      	ldrb	r3, [r3, #24]
 80076dc:	005a      	lsls	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800770e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	3b01      	subs	r3, #1
 800771c:	035a      	lsls	r2, r3, #13
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	e007      	b.n	8007738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007736:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	3b01      	subs	r3, #1
 8007754:	051a      	lsls	r2, r3, #20
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800776c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6899      	ldr	r1, [r3, #8]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800777a:	025a      	lsls	r2, r3, #9
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6899      	ldr	r1, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	029a      	lsls	r2, r3, #10
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	609a      	str	r2, [r3, #8]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40012300 	.word	0x40012300
 80077b8:	0f000001 	.word	0x0f000001

080077bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d13c      	bne.n	8007850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d12b      	bne.n	8007848 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d127      	bne.n	8007848 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007810:	2b00      	cmp	r3, #0
 8007812:	d119      	bne.n	8007848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0220 	bic.w	r2, r2, #32
 8007822:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f043 0201 	orr.w	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fd6b 	bl	8007324 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800784e:	e00e      	b.n	800786e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff fd75 	bl	800734c <HAL_ADC_ErrorCallback>
}
 8007862:	e004      	b.n	800786e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fd57 	bl	8007338 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2240      	movs	r2, #64	; 0x40
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f043 0204 	orr.w	r2, r3, #4
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fd4a 	bl	800734c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <__NVIC_SetPriorityGrouping>:
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078d0:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <__NVIC_SetPriorityGrouping+0x44>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078dc:	4013      	ands	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078f2:	4a04      	ldr	r2, [pc, #16]	; (8007904 <__NVIC_SetPriorityGrouping+0x44>)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	60d3      	str	r3, [r2, #12]
}
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	e000ed00 	.word	0xe000ed00

08007908 <__NVIC_GetPriorityGrouping>:
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <__NVIC_GetPriorityGrouping+0x18>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	f003 0307 	and.w	r3, r3, #7
}
 8007916:	4618      	mov	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	e000ed00 	.word	0xe000ed00

08007924 <__NVIC_EnableIRQ>:
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800792e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007932:	2b00      	cmp	r3, #0
 8007934:	db0b      	blt.n	800794e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	f003 021f 	and.w	r2, r3, #31
 800793c:	4907      	ldr	r1, [pc, #28]	; (800795c <__NVIC_EnableIRQ+0x38>)
 800793e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	2001      	movs	r0, #1
 8007946:	fa00 f202 	lsl.w	r2, r0, r2
 800794a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	e000e100 	.word	0xe000e100

08007960 <__NVIC_SetPriority>:
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800796c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007970:	2b00      	cmp	r3, #0
 8007972:	db0a      	blt.n	800798a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	490c      	ldr	r1, [pc, #48]	; (80079ac <__NVIC_SetPriority+0x4c>)
 800797a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	440b      	add	r3, r1
 8007984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007988:	e00a      	b.n	80079a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4908      	ldr	r1, [pc, #32]	; (80079b0 <__NVIC_SetPriority+0x50>)
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	3b04      	subs	r3, #4
 8007998:	0112      	lsls	r2, r2, #4
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	440b      	add	r3, r1
 800799e:	761a      	strb	r2, [r3, #24]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	e000e100 	.word	0xe000e100
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <NVIC_EncodePriority>:
{
 80079b4:	b480      	push	{r7}
 80079b6:	b089      	sub	sp, #36	; 0x24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	bf28      	it	cs
 80079d2:	2304      	movcs	r3, #4
 80079d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	3304      	adds	r3, #4
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d902      	bls.n	80079e4 <NVIC_EncodePriority+0x30>
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3b03      	subs	r3, #3
 80079e2:	e000      	b.n	80079e6 <NVIC_EncodePriority+0x32>
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43da      	mvns	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	401a      	ands	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	fa01 f303 	lsl.w	r3, r1, r3
 8007a06:	43d9      	mvns	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a0c:	4313      	orrs	r3, r2
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3724      	adds	r7, #36	; 0x24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <SysTick_Config>:
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a2c:	d301      	bcc.n	8007a32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e00f      	b.n	8007a52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a32:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <SysTick_Config+0x40>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a3a:	210f      	movs	r1, #15
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	f7ff ff8e 	bl	8007960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <SysTick_Config+0x40>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a4a:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <SysTick_Config+0x40>)
 8007a4c:	2207      	movs	r2, #7
 8007a4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	e000e010 	.word	0xe000e010

08007a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff29 	bl	80078c0 <__NVIC_SetPriorityGrouping>
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a88:	f7ff ff3e 	bl	8007908 <__NVIC_GetPriorityGrouping>
 8007a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f7ff ff8e 	bl	80079b4 <NVIC_EncodePriority>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ff5d 	bl	8007960 <__NVIC_SetPriority>
}
 8007aa6:	bf00      	nop
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff ff31 	bl	8007924 <__NVIC_EnableIRQ>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ffa2 	bl	8007a1c <SysTick_Config>
 8007ad8:	4603      	mov	r3, r0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007af0:	f7ff fab4 	bl	800705c <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e099      	b.n	8007c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b20:	e00f      	b.n	8007b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b22:	f7ff fa9b 	bl	800705c <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d908      	bls.n	8007b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e078      	b.n	8007c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e8      	bne.n	8007b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4b38      	ldr	r3, [pc, #224]	; (8007c3c <HAL_DMA_Init+0x158>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d107      	bne.n	8007bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0307 	bic.w	r3, r3, #7
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d117      	bne.n	8007c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa9d 	bl	8008128 <DMA_CheckFifoParam>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2240      	movs	r2, #64	; 0x40
 8007bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c02:	2301      	movs	r3, #1
 8007c04:	e016      	b.n	8007c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa54 	bl	80080bc <DMA_CalcBaseAndBitshift>
 8007c14:	4603      	mov	r3, r0
 8007c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1c:	223f      	movs	r2, #63	; 0x3f
 8007c1e:	409a      	lsls	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	f010803f 	.word	0xf010803f

08007c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_DMA_Start_IT+0x26>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e040      	b.n	8007ce8 <HAL_DMA_Start_IT+0xa8>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d12f      	bne.n	8007cda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f9e6 	bl	8008060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c98:	223f      	movs	r2, #63	; 0x3f
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0216 	orr.w	r2, r2, #22
 8007cae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0208 	orr.w	r2, r2, #8
 8007cc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	e005      	b.n	8007ce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d004      	beq.n	8007d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2280      	movs	r2, #128	; 0x80
 8007d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e00c      	b.n	8007d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2205      	movs	r2, #5
 8007d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0201 	bic.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d40:	4b92      	ldr	r3, [pc, #584]	; (8007f8c <HAL_DMA_IRQHandler+0x258>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a92      	ldr	r2, [pc, #584]	; (8007f90 <HAL_DMA_IRQHandler+0x25c>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	0a9b      	lsrs	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5e:	2208      	movs	r2, #8
 8007d60:	409a      	lsls	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01a      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0204 	bic.w	r2, r2, #4
 8007d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f043 0201 	orr.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da4:	2201      	movs	r2, #1
 8007da6:	409a      	lsls	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d012      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dce:	f043 0202 	orr.w	r2, r3, #2
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dda:	2204      	movs	r2, #4
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df8:	2204      	movs	r2, #4
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e04:	f043 0204 	orr.w	r2, r3, #4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e10:	2210      	movs	r2, #16
 8007e12:	409a      	lsls	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d043      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d03c      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	2210      	movs	r2, #16
 8007e30:	409a      	lsls	r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d018      	beq.n	8007e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d024      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
 8007e62:	e01f      	b.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4798      	blx	r3
 8007e74:	e016      	b.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0208 	bic.w	r2, r2, #8
 8007e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 808e 	beq.w	8007fd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8086 	beq.w	8007fd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eca:	2220      	movs	r2, #32
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	d136      	bne.n	8007f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0216 	bic.w	r2, r2, #22
 8007eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695a      	ldr	r2, [r3, #20]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <HAL_DMA_IRQHandler+0x1da>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0208 	bic.w	r2, r2, #8
 8007f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f22:	223f      	movs	r2, #63	; 0x3f
 8007f24:	409a      	lsls	r2, r3
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d07d      	beq.n	800803e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
        }
        return;
 8007f4a:	e078      	b.n	800803e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d01c      	beq.n	8007f94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d108      	bne.n	8007f7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d030      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	e02b      	b.n	8007fd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d027      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
 8007f8a:	e022      	b.n	8007fd2 <HAL_DMA_IRQHandler+0x29e>
 8007f8c:	20000000 	.word	0x20000000
 8007f90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10f      	bne.n	8007fc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0210 	bic.w	r2, r2, #16
 8007fb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d032      	beq.n	8008040 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d022      	beq.n	800802c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3301      	adds	r3, #1
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	429a      	cmp	r2, r3
 8008008:	d307      	bcc.n	800801a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1f2      	bne.n	8007ffe <HAL_DMA_IRQHandler+0x2ca>
 8008018:	e000      	b.n	800801c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800801a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	4798      	blx	r3
 800803c:	e000      	b.n	8008040 <HAL_DMA_IRQHandler+0x30c>
        return;
 800803e:	bf00      	nop
    }
  }
}
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800807c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b40      	cmp	r3, #64	; 0x40
 800808c:	d108      	bne.n	80080a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800809e:	e007      	b.n	80080b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	60da      	str	r2, [r3, #12]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	3b10      	subs	r3, #16
 80080cc:	4a14      	ldr	r2, [pc, #80]	; (8008120 <DMA_CalcBaseAndBitshift+0x64>)
 80080ce:	fba2 2303 	umull	r2, r3, r2, r3
 80080d2:	091b      	lsrs	r3, r3, #4
 80080d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <DMA_CalcBaseAndBitshift+0x68>)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d909      	bls.n	80080fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	1d1a      	adds	r2, r3, #4
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	659a      	str	r2, [r3, #88]	; 0x58
 80080fc:	e007      	b.n	800810e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	aaaaaaab 	.word	0xaaaaaaab
 8008124:	08017f1c 	.word	0x08017f1c

08008128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d11f      	bne.n	8008182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d855      	bhi.n	80081f4 <DMA_CheckFifoParam+0xcc>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <DMA_CheckFifoParam+0x28>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008173 	.word	0x08008173
 8008158:	08008161 	.word	0x08008161
 800815c:	080081f5 	.word	0x080081f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d045      	beq.n	80081f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008170:	e042      	b.n	80081f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800817a:	d13f      	bne.n	80081fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008180:	e03c      	b.n	80081fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800818a:	d121      	bne.n	80081d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d836      	bhi.n	8008200 <DMA_CheckFifoParam+0xd8>
 8008192:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <DMA_CheckFifoParam+0x70>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081af 	.word	0x080081af
 80081a0:	080081a9 	.word	0x080081a9
 80081a4:	080081c1 	.word	0x080081c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
      break;
 80081ac:	e02f      	b.n	800820e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d024      	beq.n	8008204 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081be:	e021      	b.n	8008204 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081c8:	d11e      	bne.n	8008208 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80081ce:	e01b      	b.n	8008208 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d902      	bls.n	80081dc <DMA_CheckFifoParam+0xb4>
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d003      	beq.n	80081e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081da:	e018      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e015      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00e      	beq.n	800820c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	73fb      	strb	r3, [r7, #15]
      break;
 80081f2:	e00b      	b.n	800820c <DMA_CheckFifoParam+0xe4>
      break;
 80081f4:	bf00      	nop
 80081f6:	e00a      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;
 80081f8:	bf00      	nop
 80081fa:	e008      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;
 80081fc:	bf00      	nop
 80081fe:	e006      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;
 8008200:	bf00      	nop
 8008202:	e004      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;
 8008204:	bf00      	nop
 8008206:	e002      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;   
 8008208:	bf00      	nop
 800820a:	e000      	b.n	800820e <DMA_CheckFifoParam+0xe6>
      break;
 800820c:	bf00      	nop
    }
  } 
  
  return status; 
 800820e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e177      	b.n	8008528 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008238:	2201      	movs	r2, #1
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4013      	ands	r3, r2
 800824a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	f040 8166 	bne.w	8008522 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d00b      	beq.n	8008276 <HAL_GPIO_Init+0x5a>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d007      	beq.n	8008276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800826a:	2b11      	cmp	r3, #17
 800826c:	d003      	beq.n	8008276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b12      	cmp	r3, #18
 8008274:	d130      	bne.n	80082d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	2203      	movs	r2, #3
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4313      	orrs	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082ac:	2201      	movs	r2, #1
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	43db      	mvns	r3, r3
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	4013      	ands	r3, r2
 80082ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 0201 	and.w	r2, r3, #1
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	2203      	movs	r2, #3
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	43db      	mvns	r3, r3
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4013      	ands	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4313      	orrs	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d003      	beq.n	8008318 <HAL_GPIO_Init+0xfc>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b12      	cmp	r3, #18
 8008316:	d123      	bne.n	8008360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	08da      	lsrs	r2, r3, #3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3208      	adds	r2, #8
 8008320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	220f      	movs	r2, #15
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4013      	ands	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	fa02 f303 	lsl.w	r3, r2, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	4313      	orrs	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	08da      	lsrs	r2, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3208      	adds	r2, #8
 800835a:	69b9      	ldr	r1, [r7, #24]
 800835c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	2203      	movs	r2, #3
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	43db      	mvns	r3, r3
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	4013      	ands	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f003 0203 	and.w	r2, r3, #3
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4313      	orrs	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80c0 	beq.w	8008522 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	4b65      	ldr	r3, [pc, #404]	; (800853c <HAL_GPIO_Init+0x320>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	4a64      	ldr	r2, [pc, #400]	; (800853c <HAL_GPIO_Init+0x320>)
 80083ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b0:	6453      	str	r3, [r2, #68]	; 0x44
 80083b2:	4b62      	ldr	r3, [pc, #392]	; (800853c <HAL_GPIO_Init+0x320>)
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083be:	4a60      	ldr	r2, [pc, #384]	; (8008540 <HAL_GPIO_Init+0x324>)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	089b      	lsrs	r3, r3, #2
 80083c4:	3302      	adds	r3, #2
 80083c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	220f      	movs	r2, #15
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	43db      	mvns	r3, r3
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	4013      	ands	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a57      	ldr	r2, [pc, #348]	; (8008544 <HAL_GPIO_Init+0x328>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d037      	beq.n	800845a <HAL_GPIO_Init+0x23e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a56      	ldr	r2, [pc, #344]	; (8008548 <HAL_GPIO_Init+0x32c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d031      	beq.n	8008456 <HAL_GPIO_Init+0x23a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a55      	ldr	r2, [pc, #340]	; (800854c <HAL_GPIO_Init+0x330>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d02b      	beq.n	8008452 <HAL_GPIO_Init+0x236>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a54      	ldr	r2, [pc, #336]	; (8008550 <HAL_GPIO_Init+0x334>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d025      	beq.n	800844e <HAL_GPIO_Init+0x232>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a53      	ldr	r2, [pc, #332]	; (8008554 <HAL_GPIO_Init+0x338>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01f      	beq.n	800844a <HAL_GPIO_Init+0x22e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a52      	ldr	r2, [pc, #328]	; (8008558 <HAL_GPIO_Init+0x33c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d019      	beq.n	8008446 <HAL_GPIO_Init+0x22a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a51      	ldr	r2, [pc, #324]	; (800855c <HAL_GPIO_Init+0x340>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d013      	beq.n	8008442 <HAL_GPIO_Init+0x226>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a50      	ldr	r2, [pc, #320]	; (8008560 <HAL_GPIO_Init+0x344>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00d      	beq.n	800843e <HAL_GPIO_Init+0x222>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a4f      	ldr	r2, [pc, #316]	; (8008564 <HAL_GPIO_Init+0x348>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d007      	beq.n	800843a <HAL_GPIO_Init+0x21e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a4e      	ldr	r2, [pc, #312]	; (8008568 <HAL_GPIO_Init+0x34c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d101      	bne.n	8008436 <HAL_GPIO_Init+0x21a>
 8008432:	2309      	movs	r3, #9
 8008434:	e012      	b.n	800845c <HAL_GPIO_Init+0x240>
 8008436:	230a      	movs	r3, #10
 8008438:	e010      	b.n	800845c <HAL_GPIO_Init+0x240>
 800843a:	2308      	movs	r3, #8
 800843c:	e00e      	b.n	800845c <HAL_GPIO_Init+0x240>
 800843e:	2307      	movs	r3, #7
 8008440:	e00c      	b.n	800845c <HAL_GPIO_Init+0x240>
 8008442:	2306      	movs	r3, #6
 8008444:	e00a      	b.n	800845c <HAL_GPIO_Init+0x240>
 8008446:	2305      	movs	r3, #5
 8008448:	e008      	b.n	800845c <HAL_GPIO_Init+0x240>
 800844a:	2304      	movs	r3, #4
 800844c:	e006      	b.n	800845c <HAL_GPIO_Init+0x240>
 800844e:	2303      	movs	r3, #3
 8008450:	e004      	b.n	800845c <HAL_GPIO_Init+0x240>
 8008452:	2302      	movs	r3, #2
 8008454:	e002      	b.n	800845c <HAL_GPIO_Init+0x240>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <HAL_GPIO_Init+0x240>
 800845a:	2300      	movs	r3, #0
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	f002 0203 	and.w	r2, r2, #3
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	4093      	lsls	r3, r2
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800846c:	4934      	ldr	r1, [pc, #208]	; (8008540 <HAL_GPIO_Init+0x324>)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	089b      	lsrs	r3, r3, #2
 8008472:	3302      	adds	r3, #2
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800847a:	4b3c      	ldr	r3, [pc, #240]	; (800856c <HAL_GPIO_Init+0x350>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	43db      	mvns	r3, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4013      	ands	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800849e:	4a33      	ldr	r2, [pc, #204]	; (800856c <HAL_GPIO_Init+0x350>)
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084a4:	4b31      	ldr	r3, [pc, #196]	; (800856c <HAL_GPIO_Init+0x350>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	43db      	mvns	r3, r3
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	4013      	ands	r3, r2
 80084b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084c8:	4a28      	ldr	r2, [pc, #160]	; (800856c <HAL_GPIO_Init+0x350>)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084ce:	4b27      	ldr	r3, [pc, #156]	; (800856c <HAL_GPIO_Init+0x350>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084f2:	4a1e      	ldr	r2, [pc, #120]	; (800856c <HAL_GPIO_Init+0x350>)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084f8:	4b1c      	ldr	r3, [pc, #112]	; (800856c <HAL_GPIO_Init+0x350>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	43db      	mvns	r3, r3
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	4013      	ands	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <HAL_GPIO_Init+0x350>)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b0f      	cmp	r3, #15
 800852c:	f67f ae84 	bls.w	8008238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008530:	bf00      	nop
 8008532:	3724      	adds	r7, #36	; 0x24
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	40023800 	.word	0x40023800
 8008540:	40013800 	.word	0x40013800
 8008544:	40020000 	.word	0x40020000
 8008548:	40020400 	.word	0x40020400
 800854c:	40020800 	.word	0x40020800
 8008550:	40020c00 	.word	0x40020c00
 8008554:	40021000 	.word	0x40021000
 8008558:	40021400 	.word	0x40021400
 800855c:	40021800 	.word	0x40021800
 8008560:	40021c00 	.word	0x40021c00
 8008564:	40022000 	.word	0x40022000
 8008568:	40022400 	.word	0x40022400
 800856c:	40013c00 	.word	0x40013c00

08008570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	887b      	ldrh	r3, [r7, #2]
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008588:	2301      	movs	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]
 800858c:	e001      	b.n	8008592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	807b      	strh	r3, [r7, #2]
 80085ac:	4613      	mov	r3, r2
 80085ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085b0:	787b      	ldrb	r3, [r7, #1]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085b6:	887a      	ldrh	r2, [r7, #2]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085bc:	e003      	b.n	80085c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085be:	887b      	ldrh	r3, [r7, #2]
 80085c0:	041a      	lsls	r2, r3, #16
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	619a      	str	r2, [r3, #24]
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80085de:	4b08      	ldr	r3, [pc, #32]	; (8008600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	88fb      	ldrh	r3, [r7, #6]
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d006      	beq.n	80085f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80085ea:	4a05      	ldr	r2, [pc, #20]	; (8008600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fb fbca 	bl	8003d8c <HAL_GPIO_EXTI_Callback>
  }
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40013c00 	.word	0x40013c00

08008604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e11f      	b.n	8008856 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fc fc2c 	bl	8004e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2224      	movs	r2, #36	; 0x24
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008668:	f001 f96e 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800866c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4a7b      	ldr	r2, [pc, #492]	; (8008860 <HAL_I2C_Init+0x25c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d807      	bhi.n	8008688 <HAL_I2C_Init+0x84>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a7a      	ldr	r2, [pc, #488]	; (8008864 <HAL_I2C_Init+0x260>)
 800867c:	4293      	cmp	r3, r2
 800867e:	bf94      	ite	ls
 8008680:	2301      	movls	r3, #1
 8008682:	2300      	movhi	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	e006      	b.n	8008696 <HAL_I2C_Init+0x92>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a77      	ldr	r2, [pc, #476]	; (8008868 <HAL_I2C_Init+0x264>)
 800868c:	4293      	cmp	r3, r2
 800868e:	bf94      	ite	ls
 8008690:	2301      	movls	r3, #1
 8008692:	2300      	movhi	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e0db      	b.n	8008856 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a72      	ldr	r2, [pc, #456]	; (800886c <HAL_I2C_Init+0x268>)
 80086a2:	fba2 2303 	umull	r2, r3, r2, r3
 80086a6:	0c9b      	lsrs	r3, r3, #18
 80086a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4a64      	ldr	r2, [pc, #400]	; (8008860 <HAL_I2C_Init+0x25c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d802      	bhi.n	80086d8 <HAL_I2C_Init+0xd4>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3301      	adds	r3, #1
 80086d6:	e009      	b.n	80086ec <HAL_I2C_Init+0xe8>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	4a63      	ldr	r2, [pc, #396]	; (8008870 <HAL_I2C_Init+0x26c>)
 80086e4:	fba2 2303 	umull	r2, r3, r2, r3
 80086e8:	099b      	lsrs	r3, r3, #6
 80086ea:	3301      	adds	r3, #1
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80086fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4956      	ldr	r1, [pc, #344]	; (8008860 <HAL_I2C_Init+0x25c>)
 8008708:	428b      	cmp	r3, r1
 800870a:	d80d      	bhi.n	8008728 <HAL_I2C_Init+0x124>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1e59      	subs	r1, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	fbb1 f3f3 	udiv	r3, r1, r3
 800871a:	3301      	adds	r3, #1
 800871c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008720:	2b04      	cmp	r3, #4
 8008722:	bf38      	it	cc
 8008724:	2304      	movcc	r3, #4
 8008726:	e04f      	b.n	80087c8 <HAL_I2C_Init+0x1c4>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d111      	bne.n	8008754 <HAL_I2C_Init+0x150>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1e58      	subs	r0, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6859      	ldr	r1, [r3, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	440b      	add	r3, r1
 800873e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008742:	3301      	adds	r3, #1
 8008744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008748:	2b00      	cmp	r3, #0
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e012      	b.n	800877a <HAL_I2C_Init+0x176>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	1e58      	subs	r0, r3, #1
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	0099      	lsls	r1, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	fbb0 f3f3 	udiv	r3, r0, r3
 800876a:	3301      	adds	r3, #1
 800876c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_I2C_Init+0x17e>
 800877e:	2301      	movs	r3, #1
 8008780:	e022      	b.n	80087c8 <HAL_I2C_Init+0x1c4>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10e      	bne.n	80087a8 <HAL_I2C_Init+0x1a4>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1e58      	subs	r0, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6859      	ldr	r1, [r3, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	440b      	add	r3, r1
 8008798:	fbb0 f3f3 	udiv	r3, r0, r3
 800879c:	3301      	adds	r3, #1
 800879e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a6:	e00f      	b.n	80087c8 <HAL_I2C_Init+0x1c4>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	1e58      	subs	r0, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6859      	ldr	r1, [r3, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	0099      	lsls	r1, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80087be:	3301      	adds	r3, #1
 80087c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	6809      	ldr	r1, [r1, #0]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69da      	ldr	r2, [r3, #28]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80087f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6911      	ldr	r1, [r2, #16]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68d2      	ldr	r2, [r2, #12]
 8008802:	4311      	orrs	r1, r2
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	430b      	orrs	r3, r1
 800880a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	431a      	orrs	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	000186a0 	.word	0x000186a0
 8008864:	001e847f 	.word	0x001e847f
 8008868:	003d08ff 	.word	0x003d08ff
 800886c:	431bde83 	.word	0x431bde83
 8008870:	10624dd3 	.word	0x10624dd3

08008874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af02      	add	r7, sp, #8
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	461a      	mov	r2, r3
 8008880:	460b      	mov	r3, r1
 8008882:	817b      	strh	r3, [r7, #10]
 8008884:	4613      	mov	r3, r2
 8008886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008888:	f7fe fbe8 	bl	800705c <HAL_GetTick>
 800888c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b20      	cmp	r3, #32
 8008898:	f040 80e0 	bne.w	8008a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	2319      	movs	r3, #25
 80088a2:	2201      	movs	r2, #1
 80088a4:	4970      	ldr	r1, [pc, #448]	; (8008a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fc58 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0d3      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_I2C_Master_Transmit+0x50>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0cc      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d007      	beq.n	80088ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2221      	movs	r2, #33	; 0x21
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2210      	movs	r2, #16
 8008906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	893a      	ldrh	r2, [r7, #8]
 800891a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4a50      	ldr	r2, [pc, #320]	; (8008a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800892a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800892c:	8979      	ldrh	r1, [r7, #10]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fac2 	bl	8008ebc <I2C_MasterRequestWrite>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e08d      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008942:	2300      	movs	r3, #0
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008958:	e066      	b.n	8008a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	6a39      	ldr	r1, [r7, #32]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fcd2 	bl	8009308 <I2C_WaitOnTXEFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00d      	beq.n	8008986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	2b04      	cmp	r3, #4
 8008970:	d107      	bne.n	8008982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e06b      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d11b      	bne.n	80089fc <HAL_I2C_Master_Transmit+0x188>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	6a39      	ldr	r1, [r7, #32]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 fcc2 	bl	800938a <I2C_WaitOnBTFFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00d      	beq.n	8008a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d107      	bne.n	8008a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e01a      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d194      	bne.n	800895a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e000      	b.n	8008a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008a5c:	2302      	movs	r3, #2
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	00100002 	.word	0x00100002
 8008a6c:	ffff0000 	.word	0xffff0000

08008a70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08c      	sub	sp, #48	; 0x30
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	817b      	strh	r3, [r7, #10]
 8008a80:	4613      	mov	r3, r2
 8008a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a84:	f7fe faea 	bl	800705c <HAL_GetTick>
 8008a88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	f040 820b 	bne.w	8008eae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2319      	movs	r3, #25
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	497c      	ldr	r1, [pc, #496]	; (8008c94 <HAL_I2C_Master_Receive+0x224>)
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fb5a 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e1fe      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_I2C_Master_Receive+0x50>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e1f7      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d007      	beq.n	8008ae6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2222      	movs	r2, #34	; 0x22
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2210      	movs	r2, #16
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	893a      	ldrh	r2, [r7, #8]
 8008b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4a5c      	ldr	r2, [pc, #368]	; (8008c98 <HAL_I2C_Master_Receive+0x228>)
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b28:	8979      	ldrh	r1, [r7, #10]
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa46 	bl	8008fc0 <I2C_MasterRequestRead>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e1b8      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d113      	bne.n	8008b6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b46:	2300      	movs	r3, #0
 8008b48:	623b      	str	r3, [r7, #32]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	623b      	str	r3, [r7, #32]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e18c      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d11b      	bne.n	8008bae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	61fb      	str	r3, [r7, #28]
 8008b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e16c      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d11b      	bne.n	8008bee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	e14c      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c14:	e138      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	f200 80f1 	bhi.w	8008e02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d123      	bne.n	8008c70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fbed 	bl	800940c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e139      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c6e:	e10b      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d14e      	bne.n	8008d16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4906      	ldr	r1, [pc, #24]	; (8008c9c <HAL_I2C_Master_Receive+0x22c>)
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fa6a 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e10e      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
 8008c92:	bf00      	nop
 8008c94:	00100002 	.word	0x00100002
 8008c98:	ffff0000 	.word	0xffff0000
 8008c9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691a      	ldr	r2, [r3, #16]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d14:	e0b8      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4966      	ldr	r1, [pc, #408]	; (8008eb8 <HAL_I2C_Master_Receive+0x448>)
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fa1b 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0bf      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2200      	movs	r2, #0
 8008d7a:	494f      	ldr	r1, [pc, #316]	; (8008eb8 <HAL_I2C_Master_Receive+0x448>)
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f9ed 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e091      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e00:	e042      	b.n	8008e88 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fb00 	bl	800940c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e04c      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d118      	bne.n	8008e88 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e72:	3b01      	subs	r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aec2 	bne.w	8008c16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e000      	b.n	8008eb0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008eae:	2302      	movs	r3, #2
  }
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3728      	adds	r7, #40	; 0x28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	00010004 	.word	0x00010004

08008ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	607a      	str	r2, [r7, #4]
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d006      	beq.n	8008ee6 <I2C_MasterRequestWrite+0x2a>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d003      	beq.n	8008ee6 <I2C_MasterRequestWrite+0x2a>
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ee4:	d108      	bne.n	8008ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	e00b      	b.n	8008f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	2b12      	cmp	r3, #18
 8008efe:	d107      	bne.n	8008f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f91d 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00d      	beq.n	8008f44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f36:	d103      	bne.n	8008f40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e035      	b.n	8008fb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f4c:	d108      	bne.n	8008f60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f4e:	897b      	ldrh	r3, [r7, #10]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f5c:	611a      	str	r2, [r3, #16]
 8008f5e:	e01b      	b.n	8008f98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f60:	897b      	ldrh	r3, [r7, #10]
 8008f62:	11db      	asrs	r3, r3, #7
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0306 	and.w	r3, r3, #6
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f063 030f 	orn	r3, r3, #15
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	490e      	ldr	r1, [pc, #56]	; (8008fb8 <I2C_MasterRequestWrite+0xfc>)
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f943 	bl	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e010      	b.n	8008fb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f8e:	897b      	ldrh	r3, [r7, #10]
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4907      	ldr	r1, [pc, #28]	; (8008fbc <I2C_MasterRequestWrite+0x100>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f933 	bl	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	00010008 	.word	0x00010008
 8008fbc:	00010002 	.word	0x00010002

08008fc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d006      	beq.n	8008ffa <I2C_MasterRequestRead+0x3a>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d003      	beq.n	8008ffa <I2C_MasterRequestRead+0x3a>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ff8:	d108      	bne.n	800900c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e00b      	b.n	8009024 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	2b11      	cmp	r3, #17
 8009012:	d107      	bne.n	8009024 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f893 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904a:	d103      	bne.n	8009054 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e079      	b.n	800914c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009060:	d108      	bne.n	8009074 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009062:	897b      	ldrh	r3, [r7, #10]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	611a      	str	r2, [r3, #16]
 8009072:	e05f      	b.n	8009134 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009074:	897b      	ldrh	r3, [r7, #10]
 8009076:	11db      	asrs	r3, r3, #7
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0306 	and.w	r3, r3, #6
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f063 030f 	orn	r3, r3, #15
 8009084:	b2da      	uxtb	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4930      	ldr	r1, [pc, #192]	; (8009154 <I2C_MasterRequestRead+0x194>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f8b9 	bl	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e054      	b.n	800914c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090a2:	897b      	ldrh	r3, [r7, #10]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	4929      	ldr	r1, [pc, #164]	; (8009158 <I2C_MasterRequestRead+0x198>)
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 f8a9 	bl	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e044      	b.n	800914c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090c2:	2300      	movs	r3, #0
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f831 	bl	800915c <I2C_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00d      	beq.n	800911c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910e:	d103      	bne.n	8009118 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009116:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e017      	b.n	800914c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800911c:	897b      	ldrh	r3, [r7, #10]
 800911e:	11db      	asrs	r3, r3, #7
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0306 	and.w	r3, r3, #6
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f063 030e 	orn	r3, r3, #14
 800912c:	b2da      	uxtb	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	4907      	ldr	r1, [pc, #28]	; (8009158 <I2C_MasterRequestRead+0x198>)
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f865 	bl	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	00010008 	.word	0x00010008
 8009158:	00010002 	.word	0x00010002

0800915c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800916c:	e025      	b.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009174:	d021      	beq.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009176:	f7fd ff71 	bl	800705c <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d302      	bcc.n	800918c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d116      	bne.n	80091ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	f043 0220 	orr.w	r2, r3, #32
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e023      	b.n	8009202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	0c1b      	lsrs	r3, r3, #16
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d10d      	bne.n	80091e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	43da      	mvns	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4013      	ands	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bf0c      	ite	eq
 80091d6:	2301      	moveq	r3, #1
 80091d8:	2300      	movne	r3, #0
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	461a      	mov	r2, r3
 80091de:	e00c      	b.n	80091fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	43da      	mvns	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4013      	ands	r3, r2
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf0c      	ite	eq
 80091f2:	2301      	moveq	r3, #1
 80091f4:	2300      	movne	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d0b6      	beq.n	800916e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009218:	e051      	b.n	80092be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009228:	d123      	bne.n	8009272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	f043 0204 	orr.w	r2, r3, #4
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e046      	b.n	8009300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d021      	beq.n	80092be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927a:	f7fd feef 	bl	800705c <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d116      	bne.n	80092be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	f043 0220 	orr.w	r2, r3, #32
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e020      	b.n	8009300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d10c      	bne.n	80092e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	43da      	mvns	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4013      	ands	r3, r2
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bf14      	ite	ne
 80092da:	2301      	movne	r3, #1
 80092dc:	2300      	moveq	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	e00b      	b.n	80092fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	43da      	mvns	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4013      	ands	r3, r2
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bf14      	ite	ne
 80092f4:	2301      	movne	r3, #1
 80092f6:	2300      	moveq	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d18d      	bne.n	800921a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009314:	e02d      	b.n	8009372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 f8ce 	bl	80094b8 <I2C_IsAcknowledgeFailed>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e02d      	b.n	8009382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d021      	beq.n	8009372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932e:	f7fd fe95 	bl	800705c <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	d302      	bcc.n	8009344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d116      	bne.n	8009372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2220      	movs	r2, #32
 800934e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	f043 0220 	orr.w	r2, r3, #32
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e007      	b.n	8009382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937c:	2b80      	cmp	r3, #128	; 0x80
 800937e:	d1ca      	bne.n	8009316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009396:	e02d      	b.n	80093f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f88d 	bl	80094b8 <I2C_IsAcknowledgeFailed>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e02d      	b.n	8009404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d021      	beq.n	80093f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b0:	f7fd fe54 	bl	800705c <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d116      	bne.n	80093f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e0:	f043 0220 	orr.w	r2, r3, #32
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e007      	b.n	8009404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d1ca      	bne.n	8009398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009418:	e042      	b.n	80094a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b10      	cmp	r3, #16
 8009426:	d119      	bne.n	800945c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0210 	mvn.w	r2, #16
 8009430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e029      	b.n	80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945c:	f7fd fdfe 	bl	800705c <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d302      	bcc.n	8009472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d116      	bne.n	80094a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	f043 0220 	orr.w	r2, r3, #32
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e007      	b.n	80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d1b5      	bne.n	800941a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ce:	d11b      	bne.n	8009508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	f043 0204 	orr.w	r2, r3, #4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
	...

08009518 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009522:	2300      	movs	r3, #0
 8009524:	603b      	str	r3, [r7, #0]
 8009526:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	4a1f      	ldr	r2, [pc, #124]	; (80095a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800952c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009530:	6413      	str	r3, [r2, #64]	; 0x40
 8009532:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <HAL_PWREx_EnableOverDrive+0x94>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009544:	f7fd fd8a 	bl	800705c <HAL_GetTick>
 8009548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800954a:	e009      	b.n	8009560 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800954c:	f7fd fd86 	bl	800705c <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800955a:	d901      	bls.n	8009560 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e01f      	b.n	80095a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009560:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956c:	d1ee      	bne.n	800954c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009570:	2201      	movs	r2, #1
 8009572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009574:	f7fd fd72 	bl	800705c <HAL_GetTick>
 8009578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800957a:	e009      	b.n	8009590 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800957c:	f7fd fd6e 	bl	800705c <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800958a:	d901      	bls.n	8009590 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e007      	b.n	80095a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800959c:	d1ee      	bne.n	800957c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	40023800 	.word	0x40023800
 80095ac:	420e0040 	.word	0x420e0040
 80095b0:	40007000 	.word	0x40007000
 80095b4:	420e0044 	.word	0x420e0044

080095b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0cc      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095cc:	4b68      	ldr	r3, [pc, #416]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d90c      	bls.n	80095f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095da:	4b65      	ldr	r3, [pc, #404]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e2:	4b63      	ldr	r3, [pc, #396]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d001      	beq.n	80095f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0b8      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d020      	beq.n	8009642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800960c:	4b59      	ldr	r3, [pc, #356]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	4a58      	ldr	r2, [pc, #352]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009624:	4b53      	ldr	r3, [pc, #332]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	4a52      	ldr	r2, [pc, #328]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800962a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800962e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009630:	4b50      	ldr	r3, [pc, #320]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	494d      	ldr	r1, [pc, #308]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	4313      	orrs	r3, r2
 8009640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d044      	beq.n	80096d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d107      	bne.n	8009666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009656:	4b47      	ldr	r3, [pc, #284]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d119      	bne.n	8009696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e07f      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d003      	beq.n	8009676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009672:	2b03      	cmp	r3, #3
 8009674:	d107      	bne.n	8009686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009676:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e06f      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009686:	4b3b      	ldr	r3, [pc, #236]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e067      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009696:	4b37      	ldr	r3, [pc, #220]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f023 0203 	bic.w	r2, r3, #3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	4934      	ldr	r1, [pc, #208]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096a8:	f7fd fcd8 	bl	800705c <HAL_GetTick>
 80096ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ae:	e00a      	b.n	80096c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096b0:	f7fd fcd4 	bl	800705c <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80096be:	4293      	cmp	r3, r2
 80096c0:	d901      	bls.n	80096c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e04f      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c6:	4b2b      	ldr	r3, [pc, #172]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f003 020c 	and.w	r2, r3, #12
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d1eb      	bne.n	80096b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096d8:	4b25      	ldr	r3, [pc, #148]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d20c      	bcs.n	8009700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e6:	4b22      	ldr	r3, [pc, #136]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	b2d2      	uxtb	r2, r2
 80096ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <HAL_RCC_ClockConfig+0x1b8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d001      	beq.n	8009700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e032      	b.n	8009766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800970c:	4b19      	ldr	r3, [pc, #100]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	4916      	ldr	r1, [pc, #88]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800971a:	4313      	orrs	r3, r2
 800971c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800972a:	4b12      	ldr	r3, [pc, #72]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	00db      	lsls	r3, r3, #3
 8009738:	490e      	ldr	r1, [pc, #56]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 800973a:	4313      	orrs	r3, r2
 800973c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800973e:	f000 f821 	bl	8009784 <HAL_RCC_GetSysClockFreq>
 8009742:	4601      	mov	r1, r0
 8009744:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <HAL_RCC_ClockConfig+0x1bc>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	091b      	lsrs	r3, r3, #4
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	4a0a      	ldr	r2, [pc, #40]	; (8009778 <HAL_RCC_ClockConfig+0x1c0>)
 8009750:	5cd3      	ldrb	r3, [r2, r3]
 8009752:	fa21 f303 	lsr.w	r3, r1, r3
 8009756:	4a09      	ldr	r2, [pc, #36]	; (800977c <HAL_RCC_ClockConfig+0x1c4>)
 8009758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <HAL_RCC_ClockConfig+0x1c8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fc38 	bl	8006fd4 <HAL_InitTick>

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40023c00 	.word	0x40023c00
 8009774:	40023800 	.word	0x40023800
 8009778:	08017f04 	.word	0x08017f04
 800977c:	20000000 	.word	0x20000000
 8009780:	20000004 	.word	0x20000004

08009784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	2300      	movs	r3, #0
 8009794:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800979a:	4b63      	ldr	r3, [pc, #396]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 030c 	and.w	r3, r3, #12
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d007      	beq.n	80097b6 <HAL_RCC_GetSysClockFreq+0x32>
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	d008      	beq.n	80097bc <HAL_RCC_GetSysClockFreq+0x38>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 80b4 	bne.w	8009918 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097b0:	4b5e      	ldr	r3, [pc, #376]	; (800992c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80097b2:	60bb      	str	r3, [r7, #8]
       break;
 80097b4:	e0b3      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097b6:	4b5d      	ldr	r3, [pc, #372]	; (800992c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80097b8:	60bb      	str	r3, [r7, #8]
      break;
 80097ba:	e0b0      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097bc:	4b5a      	ldr	r3, [pc, #360]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097c6:	4b58      	ldr	r3, [pc, #352]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d04a      	beq.n	8009868 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097d2:	4b55      	ldr	r3, [pc, #340]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	f04f 0400 	mov.w	r4, #0
 80097dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	ea03 0501 	and.w	r5, r3, r1
 80097e8:	ea04 0602 	and.w	r6, r4, r2
 80097ec:	4629      	mov	r1, r5
 80097ee:	4632      	mov	r2, r6
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	f04f 0400 	mov.w	r4, #0
 80097f8:	0154      	lsls	r4, r2, #5
 80097fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80097fe:	014b      	lsls	r3, r1, #5
 8009800:	4619      	mov	r1, r3
 8009802:	4622      	mov	r2, r4
 8009804:	1b49      	subs	r1, r1, r5
 8009806:	eb62 0206 	sbc.w	r2, r2, r6
 800980a:	f04f 0300 	mov.w	r3, #0
 800980e:	f04f 0400 	mov.w	r4, #0
 8009812:	0194      	lsls	r4, r2, #6
 8009814:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009818:	018b      	lsls	r3, r1, #6
 800981a:	1a5b      	subs	r3, r3, r1
 800981c:	eb64 0402 	sbc.w	r4, r4, r2
 8009820:	f04f 0100 	mov.w	r1, #0
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	00e2      	lsls	r2, r4, #3
 800982a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800982e:	00d9      	lsls	r1, r3, #3
 8009830:	460b      	mov	r3, r1
 8009832:	4614      	mov	r4, r2
 8009834:	195b      	adds	r3, r3, r5
 8009836:	eb44 0406 	adc.w	r4, r4, r6
 800983a:	f04f 0100 	mov.w	r1, #0
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	02a2      	lsls	r2, r4, #10
 8009844:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009848:	0299      	lsls	r1, r3, #10
 800984a:	460b      	mov	r3, r1
 800984c:	4614      	mov	r4, r2
 800984e:	4618      	mov	r0, r3
 8009850:	4621      	mov	r1, r4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f04f 0400 	mov.w	r4, #0
 8009858:	461a      	mov	r2, r3
 800985a:	4623      	mov	r3, r4
 800985c:	f7f7 fa2c 	bl	8000cb8 <__aeabi_uldivmod>
 8009860:	4603      	mov	r3, r0
 8009862:	460c      	mov	r4, r1
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	e049      	b.n	80098fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009868:	4b2f      	ldr	r3, [pc, #188]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	099b      	lsrs	r3, r3, #6
 800986e:	f04f 0400 	mov.w	r4, #0
 8009872:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	ea03 0501 	and.w	r5, r3, r1
 800987e:	ea04 0602 	and.w	r6, r4, r2
 8009882:	4629      	mov	r1, r5
 8009884:	4632      	mov	r2, r6
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	f04f 0400 	mov.w	r4, #0
 800988e:	0154      	lsls	r4, r2, #5
 8009890:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009894:	014b      	lsls	r3, r1, #5
 8009896:	4619      	mov	r1, r3
 8009898:	4622      	mov	r2, r4
 800989a:	1b49      	subs	r1, r1, r5
 800989c:	eb62 0206 	sbc.w	r2, r2, r6
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	f04f 0400 	mov.w	r4, #0
 80098a8:	0194      	lsls	r4, r2, #6
 80098aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80098ae:	018b      	lsls	r3, r1, #6
 80098b0:	1a5b      	subs	r3, r3, r1
 80098b2:	eb64 0402 	sbc.w	r4, r4, r2
 80098b6:	f04f 0100 	mov.w	r1, #0
 80098ba:	f04f 0200 	mov.w	r2, #0
 80098be:	00e2      	lsls	r2, r4, #3
 80098c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098c4:	00d9      	lsls	r1, r3, #3
 80098c6:	460b      	mov	r3, r1
 80098c8:	4614      	mov	r4, r2
 80098ca:	195b      	adds	r3, r3, r5
 80098cc:	eb44 0406 	adc.w	r4, r4, r6
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	02a2      	lsls	r2, r4, #10
 80098da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80098de:	0299      	lsls	r1, r3, #10
 80098e0:	460b      	mov	r3, r1
 80098e2:	4614      	mov	r4, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	4621      	mov	r1, r4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f04f 0400 	mov.w	r4, #0
 80098ee:	461a      	mov	r2, r3
 80098f0:	4623      	mov	r3, r4
 80098f2:	f7f7 f9e1 	bl	8000cb8 <__aeabi_uldivmod>
 80098f6:	4603      	mov	r3, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	0c1b      	lsrs	r3, r3, #16
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	3301      	adds	r3, #1
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	60bb      	str	r3, [r7, #8]
      break;
 8009916:	e002      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009918:	4b04      	ldr	r3, [pc, #16]	; (800992c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800991a:	60bb      	str	r3, [r7, #8]
      break;
 800991c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800991e:	68bb      	ldr	r3, [r7, #8]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009928:	40023800 	.word	0x40023800
 800992c:	00f42400 	.word	0x00f42400

08009930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <HAL_RCC_GetHCLKFreq+0x14>)
 8009936:	681b      	ldr	r3, [r3, #0]
}
 8009938:	4618      	mov	r0, r3
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20000000 	.word	0x20000000

08009948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800994c:	f7ff fff0 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 8009950:	4601      	mov	r1, r0
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	0a9b      	lsrs	r3, r3, #10
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	4a03      	ldr	r2, [pc, #12]	; (800996c <HAL_RCC_GetPCLK1Freq+0x24>)
 800995e:	5cd3      	ldrb	r3, [r2, r3]
 8009960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009964:	4618      	mov	r0, r3
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40023800 	.word	0x40023800
 800996c:	08017f14 	.word	0x08017f14

08009970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009974:	f7ff ffdc 	bl	8009930 <HAL_RCC_GetHCLKFreq>
 8009978:	4601      	mov	r1, r0
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	0b5b      	lsrs	r3, r3, #13
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	4a03      	ldr	r2, [pc, #12]	; (8009994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009986:	5cd3      	ldrb	r3, [r2, r3]
 8009988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800998c:	4618      	mov	r0, r3
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40023800 	.word	0x40023800
 8009994:	08017f14 	.word	0x08017f14

08009998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00a      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80099c0:	4b66      	ldr	r3, [pc, #408]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	4963      	ldr	r1, [pc, #396]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80099e2:	4b5e      	ldr	r3, [pc, #376]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	495a      	ldr	r1, [pc, #360]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10b      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d075      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009a1c:	4b50      	ldr	r3, [pc, #320]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a22:	f7fd fb1b 	bl	800705c <HAL_GetTick>
 8009a26:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a28:	e008      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a2a:	f7fd fb17 	bl	800705c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e1dc      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a3c:	4b47      	ldr	r3, [pc, #284]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1f0      	bne.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	019a      	lsls	r2, r3, #6
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	071b      	lsls	r3, r3, #28
 8009a60:	493e      	ldr	r1, [pc, #248]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01f      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a74:	4b39      	ldr	r3, [pc, #228]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a7a:	0f1b      	lsrs	r3, r3, #28
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	019a      	lsls	r2, r3, #6
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	061b      	lsls	r3, r3, #24
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	071b      	lsls	r3, r3, #28
 8009a94:	4931      	ldr	r1, [pc, #196]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aa2:	f023 021f 	bic.w	r2, r3, #31
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	492b      	ldr	r1, [pc, #172]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00d      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	019a      	lsls	r2, r3, #6
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	061b      	lsls	r3, r3, #24
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	071b      	lsls	r3, r3, #28
 8009ad4:	4921      	ldr	r1, [pc, #132]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009adc:	4b20      	ldr	r3, [pc, #128]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ae2:	f7fd fabb 	bl	800705c <HAL_GetTick>
 8009ae6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ae8:	e008      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009aea:	f7fd fab7 	bl	800705c <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d901      	bls.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e17c      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009afc:	4b17      	ldr	r3, [pc, #92]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0f0      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d112      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 80ce 	beq.w	8009cca <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b36:	f040 80c8 	bne.w	8009cca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b40:	f7fd fa8c 	bl	800705c <HAL_GetTick>
 8009b44:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b46:	e00f      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009b48:	f7fd fa88 	bl	800705c <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d908      	bls.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e14d      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009b5a:	bf00      	nop
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	42470068 	.word	0x42470068
 8009b64:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b68:	4ba5      	ldr	r3, [pc, #660]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b74:	d0e8      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d02e      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009b82:	4b9f      	ldr	r3, [pc, #636]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	3301      	adds	r3, #1
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b94:	4b9a      	ldr	r3, [pc, #616]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9a:	0f1b      	lsrs	r3, r3, #28
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	019a      	lsls	r2, r3, #6
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	3b01      	subs	r3, #1
 8009bae:	041b      	lsls	r3, r3, #16
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	061b      	lsls	r3, r3, #24
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	071b      	lsls	r3, r3, #28
 8009bbe:	4990      	ldr	r1, [pc, #576]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009bc6:	4b8e      	ldr	r3, [pc, #568]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	4989      	ldr	r1, [pc, #548]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0308 	and.w	r3, r3, #8
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02c      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009bec:	4b84      	ldr	r3, [pc, #528]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	0c1b      	lsrs	r3, r3, #16
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009bfe:	4b80      	ldr	r3, [pc, #512]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	f003 030f 	and.w	r3, r3, #15
 8009c0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	019a      	lsls	r2, r3, #6
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	085b      	lsrs	r3, r3, #1
 8009c16:	3b01      	subs	r3, #1
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	061b      	lsls	r3, r3, #24
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	071b      	lsls	r3, r3, #28
 8009c28:	4975      	ldr	r1, [pc, #468]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009c30:	4b73      	ldr	r3, [pc, #460]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	4970      	ldr	r1, [pc, #448]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d024      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c5a:	d11f      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c5c:	4b68      	ldr	r3, [pc, #416]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	0e1b      	lsrs	r3, r3, #24
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c6a:	4b65      	ldr	r3, [pc, #404]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c70:	0f1b      	lsrs	r3, r3, #28
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	019a      	lsls	r2, r3, #6
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	3b01      	subs	r3, #1
 8009c86:	041b      	lsls	r3, r3, #16
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	061b      	lsls	r3, r3, #24
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	071b      	lsls	r3, r3, #28
 8009c94:	495a      	ldr	r1, [pc, #360]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c9c:	4b59      	ldr	r3, [pc, #356]	; (8009e04 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ca2:	f7fd f9db 	bl	800705c <HAL_GetTick>
 8009ca6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ca8:	e008      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009caa:	f7fd f9d7 	bl	800705c <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e09c      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cbc:	4b50      	ldr	r3, [pc, #320]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc8:	d1ef      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8083 	beq.w	8009dde <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60bb      	str	r3, [r7, #8]
 8009cdc:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce0:	4a47      	ldr	r2, [pc, #284]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8009ce8:	4b45      	ldr	r3, [pc, #276]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf0:	60bb      	str	r3, [r7, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009cf4:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a43      	ldr	r2, [pc, #268]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d00:	f7fd f9ac 	bl	800705c <HAL_GetTick>
 8009d04:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d06:	e008      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d08:	f7fd f9a8 	bl	800705c <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d901      	bls.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e06d      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d1a:	4b3b      	ldr	r3, [pc, #236]	; (8009e08 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f0      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d26:	4b36      	ldr	r3, [pc, #216]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d2e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d02f      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d028      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d44:	4b2e      	ldr	r3, [pc, #184]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d4c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d4e:	4b2f      	ldr	r3, [pc, #188]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d50:	2201      	movs	r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009d5a:	4a29      	ldr	r2, [pc, #164]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d60:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d114      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009d6c:	f7fd f976 	bl	800705c <HAL_GetTick>
 8009d70:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d72:	e00a      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d74:	f7fd f972 	bl	800705c <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d901      	bls.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e035      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0ee      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009da2:	d10d      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009da4:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009db8:	4911      	ldr	r1, [pc, #68]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]
 8009dbe:	e005      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4a0e      	ldr	r2, [pc, #56]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009dca:	6093      	str	r3, [r2, #8]
 8009dcc:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd8:	4909      	ldr	r1, [pc, #36]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0310 	and.w	r3, r3, #16
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009df0:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009df2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3720      	adds	r7, #32
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	40023800 	.word	0x40023800
 8009e04:	42470070 	.word	0x42470070
 8009e08:	40007000 	.word	0x40007000
 8009e0c:	42470e40 	.word	0x42470e40
 8009e10:	424711e0 	.word	0x424711e0

08009e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d075      	beq.n	8009f18 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e2c:	4ba2      	ldr	r3, [pc, #648]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f003 030c 	and.w	r3, r3, #12
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d00c      	beq.n	8009e52 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e38:	4b9f      	ldr	r3, [pc, #636]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d112      	bne.n	8009e6a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e44:	4b9c      	ldr	r3, [pc, #624]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e50:	d10b      	bne.n	8009e6a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e52:	4b99      	ldr	r3, [pc, #612]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d05b      	beq.n	8009f16 <HAL_RCC_OscConfig+0x102>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d157      	bne.n	8009f16 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e20b      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e72:	d106      	bne.n	8009e82 <HAL_RCC_OscConfig+0x6e>
 8009e74:	4b90      	ldr	r3, [pc, #576]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a8f      	ldr	r2, [pc, #572]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	e01d      	b.n	8009ebe <HAL_RCC_OscConfig+0xaa>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e8a:	d10c      	bne.n	8009ea6 <HAL_RCC_OscConfig+0x92>
 8009e8c:	4b8a      	ldr	r3, [pc, #552]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a89      	ldr	r2, [pc, #548]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	4b87      	ldr	r3, [pc, #540]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a86      	ldr	r2, [pc, #536]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	e00b      	b.n	8009ebe <HAL_RCC_OscConfig+0xaa>
 8009ea6:	4b84      	ldr	r3, [pc, #528]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a83      	ldr	r2, [pc, #524]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	4b81      	ldr	r3, [pc, #516]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a80      	ldr	r2, [pc, #512]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ebc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d013      	beq.n	8009eee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec6:	f7fd f8c9 	bl	800705c <HAL_GetTick>
 8009eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ece:	f7fd f8c5 	bl	800705c <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b64      	cmp	r3, #100	; 0x64
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e1d0      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ee0:	4b75      	ldr	r3, [pc, #468]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0f0      	beq.n	8009ece <HAL_RCC_OscConfig+0xba>
 8009eec:	e014      	b.n	8009f18 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eee:	f7fd f8b5 	bl	800705c <HAL_GetTick>
 8009ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ef4:	e008      	b.n	8009f08 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ef6:	f7fd f8b1 	bl	800705c <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b64      	cmp	r3, #100	; 0x64
 8009f02:	d901      	bls.n	8009f08 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e1bc      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f08:	4b6b      	ldr	r3, [pc, #428]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f0      	bne.n	8009ef6 <HAL_RCC_OscConfig+0xe2>
 8009f14:	e000      	b.n	8009f18 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d063      	beq.n	8009fec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f24:	4b64      	ldr	r3, [pc, #400]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 030c 	and.w	r3, r3, #12
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f30:	4b61      	ldr	r3, [pc, #388]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d11c      	bne.n	8009f76 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f3c:	4b5e      	ldr	r3, [pc, #376]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d116      	bne.n	8009f76 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f48:	4b5b      	ldr	r3, [pc, #364]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <HAL_RCC_OscConfig+0x14c>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d001      	beq.n	8009f60 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e190      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f60:	4b55      	ldr	r3, [pc, #340]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	4952      	ldr	r1, [pc, #328]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f74:	e03a      	b.n	8009fec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d020      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f7e:	4b4f      	ldr	r3, [pc, #316]	; (800a0bc <HAL_RCC_OscConfig+0x2a8>)
 8009f80:	2201      	movs	r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f84:	f7fd f86a 	bl	800705c <HAL_GetTick>
 8009f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f8c:	f7fd f866 	bl	800705c <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e171      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f9e:	4b46      	ldr	r3, [pc, #280]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0f0      	beq.n	8009f8c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009faa:	4b43      	ldr	r3, [pc, #268]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	493f      	ldr	r1, [pc, #252]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	600b      	str	r3, [r1, #0]
 8009fbe:	e015      	b.n	8009fec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fc0:	4b3e      	ldr	r3, [pc, #248]	; (800a0bc <HAL_RCC_OscConfig+0x2a8>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc6:	f7fd f849 	bl	800705c <HAL_GetTick>
 8009fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fcc:	e008      	b.n	8009fe0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fce:	f7fd f845 	bl	800705c <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d901      	bls.n	8009fe0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e150      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fe0:	4b35      	ldr	r3, [pc, #212]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1f0      	bne.n	8009fce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0308 	and.w	r3, r3, #8
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d030      	beq.n	800a05a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d016      	beq.n	800a02e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a000:	4b2f      	ldr	r3, [pc, #188]	; (800a0c0 <HAL_RCC_OscConfig+0x2ac>)
 800a002:	2201      	movs	r2, #1
 800a004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a006:	f7fd f829 	bl	800705c <HAL_GetTick>
 800a00a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a00c:	e008      	b.n	800a020 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a00e:	f7fd f825 	bl	800705c <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e130      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0f0      	beq.n	800a00e <HAL_RCC_OscConfig+0x1fa>
 800a02c:	e015      	b.n	800a05a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a02e:	4b24      	ldr	r3, [pc, #144]	; (800a0c0 <HAL_RCC_OscConfig+0x2ac>)
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a034:	f7fd f812 	bl	800705c <HAL_GetTick>
 800a038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a03a:	e008      	b.n	800a04e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a03c:	f7fd f80e 	bl	800705c <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d901      	bls.n	800a04e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e119      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a04e:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f0      	bne.n	800a03c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 809f 	beq.w	800a1a6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a068:	2300      	movs	r3, #0
 800a06a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a06c:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10f      	bne.n	800a098 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	4a0d      	ldr	r2, [pc, #52]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a086:	6413      	str	r3, [r2, #64]	; 0x40
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <HAL_RCC_OscConfig+0x2a4>)
 800a08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a094:	2301      	movs	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a098:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <HAL_RCC_OscConfig+0x2b0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d120      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0a4:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <HAL_RCC_OscConfig+0x2b0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a06      	ldr	r2, [pc, #24]	; (800a0c4 <HAL_RCC_OscConfig+0x2b0>)
 800a0aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0b0:	f7fc ffd4 	bl	800705c <HAL_GetTick>
 800a0b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0b6:	e010      	b.n	800a0da <HAL_RCC_OscConfig+0x2c6>
 800a0b8:	40023800 	.word	0x40023800
 800a0bc:	42470000 	.word	0x42470000
 800a0c0:	42470e80 	.word	0x42470e80
 800a0c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0c8:	f7fc ffc8 	bl	800705c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e0d3      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0da:	4b6c      	ldr	r3, [pc, #432]	; (800a28c <HAL_RCC_OscConfig+0x478>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d106      	bne.n	800a0fc <HAL_RCC_OscConfig+0x2e8>
 800a0ee:	4b68      	ldr	r3, [pc, #416]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	4a67      	ldr	r2, [pc, #412]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0fa:	e01c      	b.n	800a136 <HAL_RCC_OscConfig+0x322>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b05      	cmp	r3, #5
 800a102:	d10c      	bne.n	800a11e <HAL_RCC_OscConfig+0x30a>
 800a104:	4b62      	ldr	r3, [pc, #392]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a108:	4a61      	ldr	r2, [pc, #388]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a10a:	f043 0304 	orr.w	r3, r3, #4
 800a10e:	6713      	str	r3, [r2, #112]	; 0x70
 800a110:	4b5f      	ldr	r3, [pc, #380]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a114:	4a5e      	ldr	r2, [pc, #376]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	6713      	str	r3, [r2, #112]	; 0x70
 800a11c:	e00b      	b.n	800a136 <HAL_RCC_OscConfig+0x322>
 800a11e:	4b5c      	ldr	r3, [pc, #368]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	4a5b      	ldr	r2, [pc, #364]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	6713      	str	r3, [r2, #112]	; 0x70
 800a12a:	4b59      	ldr	r3, [pc, #356]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12e:	4a58      	ldr	r2, [pc, #352]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a130:	f023 0304 	bic.w	r3, r3, #4
 800a134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d015      	beq.n	800a16a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a13e:	f7fc ff8d 	bl	800705c <HAL_GetTick>
 800a142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a144:	e00a      	b.n	800a15c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a146:	f7fc ff89 	bl	800705c <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	f241 3288 	movw	r2, #5000	; 0x1388
 800a154:	4293      	cmp	r3, r2
 800a156:	d901      	bls.n	800a15c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e092      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a15c:	4b4c      	ldr	r3, [pc, #304]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0ee      	beq.n	800a146 <HAL_RCC_OscConfig+0x332>
 800a168:	e014      	b.n	800a194 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16a:	f7fc ff77 	bl	800705c <HAL_GetTick>
 800a16e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a170:	e00a      	b.n	800a188 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a172:	f7fc ff73 	bl	800705c <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a180:	4293      	cmp	r3, r2
 800a182:	d901      	bls.n	800a188 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e07c      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a188:	4b41      	ldr	r3, [pc, #260]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1ee      	bne.n	800a172 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d105      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a19a:	4b3d      	ldr	r3, [pc, #244]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	4a3c      	ldr	r2, [pc, #240]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a1a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d068      	beq.n	800a280 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1ae:	4b38      	ldr	r3, [pc, #224]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d060      	beq.n	800a27c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d145      	bne.n	800a24e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c2:	4b34      	ldr	r3, [pc, #208]	; (800a294 <HAL_RCC_OscConfig+0x480>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c8:	f7fc ff48 	bl	800705c <HAL_GetTick>
 800a1cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1ce:	e008      	b.n	800a1e2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1d0:	f7fc ff44 	bl	800705c <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d901      	bls.n	800a1e2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e04f      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1e2:	4b2b      	ldr	r3, [pc, #172]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1f0      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69da      	ldr	r2, [r3, #28]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	019b      	lsls	r3, r3, #6
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	085b      	lsrs	r3, r3, #1
 800a206:	3b01      	subs	r3, #1
 800a208:	041b      	lsls	r3, r3, #16
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	061b      	lsls	r3, r3, #24
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a218:	071b      	lsls	r3, r3, #28
 800a21a:	491d      	ldr	r1, [pc, #116]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a220:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <HAL_RCC_OscConfig+0x480>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a226:	f7fc ff19 	bl	800705c <HAL_GetTick>
 800a22a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a22c:	e008      	b.n	800a240 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a22e:	f7fc ff15 	bl	800705c <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d901      	bls.n	800a240 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e020      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a240:	4b13      	ldr	r3, [pc, #76]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0f0      	beq.n	800a22e <HAL_RCC_OscConfig+0x41a>
 800a24c:	e018      	b.n	800a280 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a24e:	4b11      	ldr	r3, [pc, #68]	; (800a294 <HAL_RCC_OscConfig+0x480>)
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a254:	f7fc ff02 	bl	800705c <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a25c:	f7fc fefe 	bl	800705c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e009      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a26e:	4b08      	ldr	r3, [pc, #32]	; (800a290 <HAL_RCC_OscConfig+0x47c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f0      	bne.n	800a25c <HAL_RCC_OscConfig+0x448>
 800a27a:	e001      	b.n	800a280 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e000      	b.n	800a282 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	40007000 	.word	0x40007000
 800a290:	40023800 	.word	0x40023800
 800a294:	42470060 	.word	0x42470060

0800a298 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e022      	b.n	800a2f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d105      	bne.n	800a2c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7fa fe5f 	bl	8004f80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f814 	bl	800a2f8 <HAL_SD_InitCard>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e00a      	b.n	800a2f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2f8:	b5b0      	push	{r4, r5, r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af04      	add	r7, sp, #16
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a300:	2300      	movs	r3, #0
 800a302:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a308:	2300      	movs	r3, #0
 800a30a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a310:	2300      	movs	r3, #0
 800a312:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a314:	2376      	movs	r3, #118	; 0x76
 800a316:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681d      	ldr	r5, [r3, #0]
 800a31c:	466c      	mov	r4, sp
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a330:	4628      	mov	r0, r5
 800a332:	f003 fa87 	bl	800d844 <SDIO_Init>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e031      	b.n	800a3ac <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a348:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <HAL_SD_InitCard+0xbc>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f003 fabf 	bl	800d8d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a358:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <HAL_SD_InitCard+0xbc>)
 800a35a:	2201      	movs	r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 ffc6 	bl	800b2f0 <SD_PowerON>
 800a364:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00b      	beq.n	800a384 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e013      	b.n	800a3ac <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fee5 	bl	800b154 <SD_InitCard>
 800a38a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e000      	b.n	800a3ac <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3728      	adds	r7, #40	; 0x28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3b4:	422580a0 	.word	0x422580a0

0800a3b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	; 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d107      	bne.n	800a3e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e0c7      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	f040 80c0 	bne.w	800a56e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	441a      	add	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d907      	bls.n	800a412 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e0ae      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2203      	movs	r2, #3
 800a416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a430:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	4a50      	ldr	r2, [pc, #320]	; (800a578 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	4a4f      	ldr	r2, [pc, #316]	; (800a57c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	2200      	movs	r2, #0
 800a448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3380      	adds	r3, #128	; 0x80
 800a454:	4619      	mov	r1, r3
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	025b      	lsls	r3, r3, #9
 800a45c:	089b      	lsrs	r3, r3, #2
 800a45e:	f7fd fbef 	bl	8007c40 <HAL_DMA_Start_IT>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d017      	beq.n	800a498 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a476:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a40      	ldr	r2, [pc, #256]	; (800a580 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e06b      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a498:	4b3a      	ldr	r3, [pc, #232]	; (800a584 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d002      	beq.n	800a4ac <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	025b      	lsls	r3, r3, #9
 800a4aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f003 faa1 	bl	800d9fc <SDMMC_CmdBlockLength>
 800a4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00f      	beq.n	800a4e2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a2e      	ldr	r2, [pc, #184]	; (800a580 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e046      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	025b      	lsls	r3, r3, #9
 800a4ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a4ee:	2390      	movs	r3, #144	; 0x90
 800a4f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f107 0210 	add.w	r2, r7, #16
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f003 fa4b 	bl	800d9a4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d90a      	bls.n	800a52a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2282      	movs	r2, #130	; 0x82
 800a518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a520:	4618      	mov	r0, r3
 800a522:	f003 faaf 	bl	800da84 <SDMMC_CmdReadMultiBlock>
 800a526:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a528:	e009      	b.n	800a53e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2281      	movs	r2, #129	; 0x81
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a536:	4618      	mov	r0, r3
 800a538:	f003 fa82 	bl	800da40 <SDMMC_CmdReadSingleBlock>
 800a53c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d012      	beq.n	800a56a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a0d      	ldr	r2, [pc, #52]	; (800a580 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a54a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	431a      	orrs	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e002      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	e000      	b.n	800a570 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a56e:	2302      	movs	r3, #2
  }
}
 800a570:	4618      	mov	r0, r3
 800a572:	3730      	adds	r7, #48	; 0x30
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	0800af63 	.word	0x0800af63
 800a57c:	0800afd5 	.word	0x0800afd5
 800a580:	004005ff 	.word	0x004005ff
 800a584:	4225858c 	.word	0x4225858c

0800a588 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08c      	sub	sp, #48	; 0x30
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d107      	bne.n	800a5b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e0ca      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	f040 80c3 	bne.w	800a744 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	441a      	add	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d907      	bls.n	800a5e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e0b1      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 021a 	orr.w	r2, r2, #26
 800a600:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	4a52      	ldr	r2, [pc, #328]	; (800a750 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	4a51      	ldr	r2, [pc, #324]	; (800a754 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a610:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	2200      	movs	r2, #0
 800a618:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d002      	beq.n	800a628 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	025b      	lsls	r3, r3, #9
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a630:	4618      	mov	r0, r3
 800a632:	f003 f9e3 	bl	800d9fc <SDMMC_CmdBlockLength>
 800a636:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00f      	beq.n	800a65e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a45      	ldr	r2, [pc, #276]	; (800a758 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	431a      	orrs	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e073      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d90a      	bls.n	800a67a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	22a0      	movs	r2, #160	; 0xa0
 800a668:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a670:	4618      	mov	r0, r3
 800a672:	f003 fa4b 	bl	800db0c <SDMMC_CmdWriteMultiBlock>
 800a676:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a678:	e009      	b.n	800a68e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2290      	movs	r2, #144	; 0x90
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a686:	4618      	mov	r0, r3
 800a688:	f003 fa1e 	bl	800dac8 <SDMMC_CmdWriteSingleBlock>
 800a68c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d012      	beq.n	800a6ba <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a2f      	ldr	r2, [pc, #188]	; (800a758 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e045      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a6ba:	4b28      	ldr	r3, [pc, #160]	; (800a75c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3380      	adds	r3, #128	; 0x80
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	025b      	lsls	r3, r3, #9
 800a6d2:	089b      	lsrs	r3, r3, #2
 800a6d4:	f7fd fab4 	bl	8007c40 <HAL_DMA_Start_IT>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01a      	beq.n	800a714 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 021a 	bic.w	r2, r2, #26
 800a6ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a19      	ldr	r2, [pc, #100]	; (800a758 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e018      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a714:	f04f 33ff 	mov.w	r3, #4294967295
 800a718:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	025b      	lsls	r3, r3, #9
 800a71e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a720:	2390      	movs	r3, #144	; 0x90
 800a722:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a724:	2300      	movs	r3, #0
 800a726:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a728:	2300      	movs	r3, #0
 800a72a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f107 0210 	add.w	r2, r7, #16
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f003 f932 	bl	800d9a4 <SDIO_ConfigData>

      return HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	e000      	b.n	800a746 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a744:	2302      	movs	r3, #2
  }
}
 800a746:	4618      	mov	r0, r3
 800a748:	3730      	adds	r7, #48	; 0x30
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	0800af39 	.word	0x0800af39
 800a754:	0800afd5 	.word	0x0800afd5
 800a758:	004005ff 	.word	0x004005ff
 800a75c:	4225858c 	.word	0x4225858c

0800a760 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <HAL_SD_IRQHandler+0x2e>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f003 0308 	and.w	r3, r3, #8
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 ffc8 	bl	800b71c <SD_Read_IT>
 800a78c:	e155      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 808f 	beq.w	800a8bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a7b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a7ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d039      	beq.n	800a84a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <HAL_SD_IRQHandler+0x8a>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d011      	beq.n	800a80e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f003 f9ae 	bl	800db50 <SDMMC_CmdStopTransfer>
 800a7f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d008      	beq.n	800a80e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	431a      	orrs	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f91f 	bl	800aa4c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f240 523a 	movw	r2, #1338	; 0x53a
 800a816:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <HAL_SD_IRQHandler+0xda>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f003 fe04 	bl	800e448 <HAL_SD_RxCpltCallback>
 800a840:	e0fb      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f003 fdf6 	bl	800e434 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a848:	e0f7      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80f2 	beq.w	800aa3a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d011      	beq.n	800a884 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f003 f973 	bl	800db50 <SDMMC_CmdStopTransfer>
 800a86a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d008      	beq.n	800a884 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f8e4 	bl	800aa4c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f040 80d5 	bne.w	800aa3a <HAL_SD_IRQHandler+0x2da>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	f040 80cf 	bne.w	800aa3a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0208 	bic.w	r2, r2, #8
 800a8aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f003 fdbd 	bl	800e434 <HAL_SD_TxCpltCallback>
}
 800a8ba:	e0be      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d008      	beq.n	800a8dc <HAL_SD_IRQHandler+0x17c>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 ff72 	bl	800b7be <SD_Write_IT>
 800a8da:	e0ae      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80a7 	beq.w	800aa3a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	f043 0202 	orr.w	r2, r3, #2
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	f043 0208 	orr.w	r2, r3, #8
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a926:	f003 0320 	and.w	r3, r3, #32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	f043 0220 	orr.w	r2, r3, #32
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	f043 0210 	orr.w	r2, r3, #16
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f240 523a 	movw	r2, #1338	; 0x53a
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a96c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4618      	mov	r0, r3
 800a974:	f003 f8ec 	bl	800db50 <SDMMC_CmdStopTransfer>
 800a978:	4602      	mov	r2, r0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	431a      	orrs	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f003 0308 	and.w	r3, r3, #8
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f855 	bl	800aa4c <HAL_SD_ErrorCallback>
}
 800a9a2:	e04a      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d045      	beq.n	800aa3a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <HAL_SD_IRQHandler+0x262>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d011      	beq.n	800a9e6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c6:	4a1f      	ldr	r2, [pc, #124]	; (800aa44 <HAL_SD_IRQHandler+0x2e4>)
 800a9c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fd f98e 	bl	8007cf0 <HAL_DMA_Abort_IT>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02f      	beq.n	800aa3a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 fb4a 	bl	800b078 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a9e4:	e029      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <HAL_SD_IRQHandler+0x29a>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d011      	beq.n	800aa1e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <HAL_SD_IRQHandler+0x2e8>)
 800aa00:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fd f972 	bl	8007cf0 <HAL_DMA_Abort_IT>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d013      	beq.n	800aa3a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fb65 	bl	800b0e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa1c:	e00d      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f003 fcf4 	bl	800e420 <HAL_SD_AbortCallback>
}
 800aa38:	e7ff      	b.n	800aa3a <HAL_SD_IRQHandler+0x2da>
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	0800b079 	.word	0x0800b079
 800aa48:	0800b0e7 	.word	0x0800b0e7

0800aa4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa6e:	0f9b      	lsrs	r3, r3, #30
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa7a:	0e9b      	lsrs	r3, r3, #26
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 030f 	and.w	r3, r3, #15
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa8c:	0e1b      	lsrs	r3, r3, #24
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa9e:	0c1b      	lsrs	r3, r3, #16
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaaa:	0a1b      	lsrs	r3, r3, #8
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aac0:	0d1b      	lsrs	r3, r3, #20
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aacc:	0c1b      	lsrs	r3, r3, #16
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	f003 030f 	and.w	r3, r3, #15
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aade:	0bdb      	lsrs	r3, r3, #15
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf0:	0b9b      	lsrs	r3, r3, #14
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab02:	0b5b      	lsrs	r3, r3, #13
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab14:	0b1b      	lsrs	r3, r3, #12
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2200      	movs	r2, #0
 800ab26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d163      	bne.n	800abf8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab34:	009a      	lsls	r2, r3, #2
 800ab36:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ab40:	0f92      	lsrs	r2, r2, #30
 800ab42:	431a      	orrs	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab4c:	0edb      	lsrs	r3, r3, #27
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5e:	0e1b      	lsrs	r3, r3, #24
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab70:	0d5b      	lsrs	r3, r3, #21
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab82:	0c9b      	lsrs	r3, r3, #18
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab94:	0bdb      	lsrs	r3, r3, #15
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	7e1b      	ldrb	r3, [r3, #24]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	3302      	adds	r3, #2
 800abb8:	2201      	movs	r2, #1
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800abc2:	fb02 f203 	mul.w	r2, r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	7a1b      	ldrb	r3, [r3, #8]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 030f 	and.w	r3, r3, #15
 800abd4:	2201      	movs	r2, #1
 800abd6:	409a      	lsls	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800abe4:	0a52      	lsrs	r2, r2, #9
 800abe6:	fb02 f203 	mul.w	r2, r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abf4:	661a      	str	r2, [r3, #96]	; 0x60
 800abf6:	e031      	b.n	800ac5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d11d      	bne.n	800ac3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac04:	041b      	lsls	r3, r3, #16
 800ac06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0e:	0c1b      	lsrs	r3, r3, #16
 800ac10:	431a      	orrs	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	029a      	lsls	r2, r3, #10
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	661a      	str	r2, [r3, #96]	; 0x60
 800ac3a:	e00f      	b.n	800ac5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a58      	ldr	r2, [pc, #352]	; (800ada4 <HAL_SD_GetCardCSD+0x344>)
 800ac42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e09d      	b.n	800ad98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac60:	0b9b      	lsrs	r3, r3, #14
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac72:	09db      	lsrs	r3, r3, #7
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac94:	0fdb      	lsrs	r3, r3, #31
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca0:	0f5b      	lsrs	r3, r3, #29
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb2:	0e9b      	lsrs	r3, r3, #26
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc4:	0d9b      	lsrs	r3, r3, #22
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	b2da      	uxtb	r2, r3
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd6:	0d5b      	lsrs	r3, r3, #21
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf2:	0c1b      	lsrs	r3, r3, #16
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad06:	0bdb      	lsrs	r3, r3, #15
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	0b9b      	lsrs	r3, r3, #14
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2e:	0b5b      	lsrs	r3, r3, #13
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	0b1b      	lsrs	r3, r3, #12
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad56:	0a9b      	lsrs	r3, r3, #10
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6a:	0a1b      	lsrs	r3, r3, #8
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0303 	and.w	r3, r3, #3
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	004005ff 	.word	0x004005ff

0800ada8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	b08e      	sub	sp, #56	; 0x38
 800ae04:	af04      	add	r7, sp, #16
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d02e      	beq.n	800ae78 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae20:	d106      	bne.n	800ae30 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae2e:	e029      	b.n	800ae84 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae36:	d10a      	bne.n	800ae4e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fb0f 	bl	800b45c <SD_WideBus_Enable>
 800ae3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	431a      	orrs	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae4c:	e01a      	b.n	800ae84 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fb4c 	bl	800b4f2 <SD_WideBus_Disable>
 800ae5a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	639a      	str	r2, [r3, #56]	; 0x38
 800ae68:	e00c      	b.n	800ae84 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	639a      	str	r2, [r3, #56]	; 0x38
 800ae76:	e005      	b.n	800ae84 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a18      	ldr	r2, [pc, #96]	; (800aef4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e024      	b.n	800aeea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	466c      	mov	r4, sp
 800aec8:	f107 0318 	add.w	r3, r7, #24
 800aecc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aed4:	f107 030c 	add.w	r3, r7, #12
 800aed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeda:	4628      	mov	r0, r5
 800aedc:	f002 fcb2 	bl	800d844 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3728      	adds	r7, #40	; 0x28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bdb0      	pop	{r4, r5, r7, pc}
 800aef2:	bf00      	nop
 800aef4:	004005ff 	.word	0x004005ff

0800aef8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af04:	f107 030c 	add.w	r3, r7, #12
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa7e 	bl	800b40c <SD_SendStatus>
 800af10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	431a      	orrs	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	0a5b      	lsrs	r3, r3, #9
 800af28:	f003 030f 	and.w	r3, r3, #15
 800af2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af2e:	693b      	ldr	r3, [r7, #16]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af44:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af74:	2b82      	cmp	r3, #130	; 0x82
 800af76:	d111      	bne.n	800af9c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f002 fde7 	bl	800db50 <SDMMC_CmdStopTransfer>
 800af82:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d008      	beq.n	800af9c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	431a      	orrs	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f7ff fd58 	bl	800aa4c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0208 	bic.w	r2, r2, #8
 800afaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f240 523a 	movw	r2, #1338	; 0x53a
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f003 fa3f 	bl	800e448 <HAL_SD_RxCpltCallback>
#endif
}
 800afca:	bf00      	nop
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fd f830 	bl	8008048 <HAL_DMA_GetError>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b02      	cmp	r3, #2
 800afec:	d03e      	beq.n	800b06c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d002      	beq.n	800b00a <SD_DMAError+0x36>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d12d      	bne.n	800b066 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a19      	ldr	r2, [pc, #100]	; (800b074 <SD_DMAError+0xa0>)
 800b010:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b020:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f7ff ff62 	bl	800aef8 <HAL_SD_GetCardState>
 800b034:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b06      	cmp	r3, #6
 800b03a:	d002      	beq.n	800b042 <SD_DMAError+0x6e>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b05      	cmp	r3, #5
 800b040:	d10a      	bne.n	800b058 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f002 fd82 	bl	800db50 <SDMMC_CmdStopTransfer>
 800b04c:	4602      	mov	r2, r0
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	431a      	orrs	r2, r3
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2200      	movs	r2, #0
 800b064:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b066:	6978      	ldr	r0, [r7, #20]
 800b068:	f7ff fcf0 	bl	800aa4c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b06c:	bf00      	nop
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	004005ff 	.word	0x004005ff

0800b078 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7ff ff31 	bl	800aef8 <HAL_SD_GetCardState>
 800b096:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b06      	cmp	r3, #6
 800b0aa:	d002      	beq.n	800b0b2 <SD_DMATxAbort+0x3a>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d10a      	bne.n	800b0c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f002 fd4a 	bl	800db50 <SDMMC_CmdStopTransfer>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d103      	bne.n	800b0d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f003 f9a5 	bl	800e420 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b0d6:	e002      	b.n	800b0de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fcb7 	bl	800aa4c <HAL_SD_ErrorCallback>
}
 800b0de:	bf00      	nop
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0fc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fefa 	bl	800aef8 <HAL_SD_GetCardState>
 800b104:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b06      	cmp	r3, #6
 800b118:	d002      	beq.n	800b120 <SD_DMARxAbort+0x3a>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b05      	cmp	r3, #5
 800b11e:	d10a      	bne.n	800b136 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f002 fd13 	bl	800db50 <SDMMC_CmdStopTransfer>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	431a      	orrs	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d103      	bne.n	800b146 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f003 f96e 	bl	800e420 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b144:	e002      	b.n	800b14c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fc80 	bl	800aa4c <HAL_SD_ErrorCallback>
}
 800b14c:	bf00      	nop
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b154:	b5b0      	push	{r4, r5, r7, lr}
 800b156:	b094      	sub	sp, #80	; 0x50
 800b158:	af04      	add	r7, sp, #16
 800b15a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b15c:	2301      	movs	r3, #1
 800b15e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f002 fbc5 	bl	800d8f4 <SDIO_GetPowerState>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b170:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b174:	e0b7      	b.n	800b2e6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d02f      	beq.n	800b1de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f002 fdee 	bl	800dd64 <SDMMC_CmdSendCID>
 800b188:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <SD_InitCard+0x40>
    {
      return errorstate;
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	e0a8      	b.n	800b2e6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f002 fbef 	bl	800d97e <SDIO_GetResponse>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2104      	movs	r1, #4
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f002 fbe6 	bl	800d97e <SDIO_GetResponse>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2108      	movs	r1, #8
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f002 fbdd 	bl	800d97e <SDIO_GetResponse>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	210c      	movs	r1, #12
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f002 fbd4 	bl	800d97e <SDIO_GetResponse>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d00d      	beq.n	800b202 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f107 020e 	add.w	r2, r7, #14
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f002 fdf4 	bl	800ddde <SDMMC_CmdSetRelAdd>
 800b1f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <SD_InitCard+0xae>
    {
      return errorstate;
 800b1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b200:	e071      	b.n	800b2e6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b206:	2b03      	cmp	r3, #3
 800b208:	d036      	beq.n	800b278 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b20a:	89fb      	ldrh	r3, [r7, #14]
 800b20c:	461a      	mov	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f002 fdbe 	bl	800dda0 <SDMMC_CmdSendCSD>
 800b224:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	e05a      	b.n	800b2e6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f002 fba1 	bl	800d97e <SDIO_GetResponse>
 800b23c:	4602      	mov	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2104      	movs	r1, #4
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 fb98 	bl	800d97e <SDIO_GetResponse>
 800b24e:	4602      	mov	r2, r0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2108      	movs	r1, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f002 fb8f 	bl	800d97e <SDIO_GetResponse>
 800b260:	4602      	mov	r2, r0
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	210c      	movs	r1, #12
 800b26c:	4618      	mov	r0, r3
 800b26e:	f002 fb86 	bl	800d97e <SDIO_GetResponse>
 800b272:	4602      	mov	r2, r0
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2104      	movs	r1, #4
 800b27e:	4618      	mov	r0, r3
 800b280:	f002 fb7d 	bl	800d97e <SDIO_GetResponse>
 800b284:	4603      	mov	r3, r0
 800b286:	0d1a      	lsrs	r2, r3, #20
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b28c:	f107 0310 	add.w	r3, r7, #16
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff fbe4 	bl	800aa60 <HAL_SD_GetCardCSD>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b29e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2a2:	e020      	b.n	800b2e6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	041b      	lsls	r3, r3, #16
 800b2ae:	f04f 0400 	mov.w	r4, #0
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	f002 fc6c 	bl	800db94 <SDMMC_CmdSelDesel>
 800b2bc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <SD_InitCard+0x174>
  {
    return errorstate;
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c6:	e00e      	b.n	800b2e6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681d      	ldr	r5, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	466c      	mov	r4, sp
 800b2d0:	f103 0210 	add.w	r2, r3, #16
 800b2d4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2da:	3304      	adds	r3, #4
 800b2dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f002 fab0 	bl	800d844 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3740      	adds	r7, #64	; 0x40
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b2f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	2300      	movs	r3, #0
 800b302:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fc66 	bl	800dbda <SDMMC_CmdGoIdleState>
 800b30e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	e072      	b.n	800b400 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f002 fc79 	bl	800dc16 <SDMMC_CmdOperCond>
 800b324:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00d      	beq.n	800b348 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4618      	mov	r0, r3
 800b338:	f002 fc4f 	bl	800dbda <SDMMC_CmdGoIdleState>
 800b33c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	e05b      	b.n	800b400 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b352:	2b01      	cmp	r3, #1
 800b354:	d137      	bne.n	800b3c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2100      	movs	r1, #0
 800b35c:	4618      	mov	r0, r3
 800b35e:	f002 fc79 	bl	800dc54 <SDMMC_CmdAppCommand>
 800b362:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d02d      	beq.n	800b3c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b36a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b36e:	e047      	b.n	800b400 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2100      	movs	r1, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f002 fc6c 	bl	800dc54 <SDMMC_CmdAppCommand>
 800b37c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <SD_PowerON+0x98>
    {
      return errorstate;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	e03b      	b.n	800b400 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	491e      	ldr	r1, [pc, #120]	; (800b408 <SD_PowerON+0x118>)
 800b38e:	4618      	mov	r0, r3
 800b390:	f002 fc82 	bl	800dc98 <SDMMC_CmdAppOperCommand>
 800b394:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b39c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3a0:	e02e      	b.n	800b400 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f002 fae8 	bl	800d97e <SDIO_GetResponse>
 800b3ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	0fdb      	lsrs	r3, r3, #31
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <SD_PowerON+0xcc>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e000      	b.n	800b3be <SD_PowerON+0xce>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]

    count++;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d802      	bhi.n	800b3d6 <SD_PowerON+0xe6>
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0cc      	beq.n	800b370 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d902      	bls.n	800b3e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b3e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3e4:	e00c      	b.n	800b400 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	645a      	str	r2, [r3, #68]	; 0x44
 800b3f6:	e002      	b.n	800b3fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	c1100000 	.word	0xc1100000

0800b40c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b420:	e018      	b.n	800b454 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42a:	041b      	lsls	r3, r3, #16
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f002 fcf6 	bl	800de20 <SDMMC_CmdSendStatus>
 800b434:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	e009      	b.n	800b454 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f002 fa99 	bl	800d97e <SDIO_GetResponse>
 800b44c:	4602      	mov	r2, r0
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b464:	2300      	movs	r3, #0
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fa83 	bl	800d97e <SDIO_GetResponse>
 800b478:	4603      	mov	r3, r0
 800b47a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b482:	d102      	bne.n	800b48a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b488:	e02f      	b.n	800b4ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b48a:	f107 030c 	add.w	r3, r7, #12
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f879 	bl	800b588 <SD_FindSCR>
 800b496:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	e023      	b.n	800b4ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01c      	beq.n	800b4e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b4:	041b      	lsls	r3, r3, #16
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f002 fbcb 	bl	800dc54 <SDMMC_CmdAppCommand>
 800b4be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	e00f      	b.n	800b4ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2102      	movs	r1, #2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f002 fc04 	bl	800dcde <SDMMC_CmdBusWidth>
 800b4d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	e003      	b.n	800b4ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e001      	b.n	800b4ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b086      	sub	sp, #24
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2100      	movs	r1, #0
 800b508:	4618      	mov	r0, r3
 800b50a:	f002 fa38 	bl	800d97e <SDIO_GetResponse>
 800b50e:	4603      	mov	r3, r0
 800b510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b518:	d102      	bne.n	800b520 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b51a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b51e:	e02f      	b.n	800b580 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f82e 	bl	800b588 <SD_FindSCR>
 800b52c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	e023      	b.n	800b580 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d01c      	beq.n	800b57c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54a:	041b      	lsls	r3, r3, #16
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f002 fb80 	bl	800dc54 <SDMMC_CmdAppCommand>
 800b554:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	e00f      	b.n	800b580 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2100      	movs	r1, #0
 800b566:	4618      	mov	r0, r3
 800b568:	f002 fbb9 	bl	800dcde <SDMMC_CmdBusWidth>
 800b56c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	e003      	b.n	800b580 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b578:	2300      	movs	r3, #0
 800b57a:	e001      	b.n	800b580 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b57c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b08f      	sub	sp, #60	; 0x3c
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b592:	f7fb fd63 	bl	800705c <HAL_GetTick>
 800b596:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b59c:	2300      	movs	r3, #0
 800b59e:	60bb      	str	r3, [r7, #8]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2108      	movs	r1, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f002 fa24 	bl	800d9fc <SDMMC_CmdBlockLength>
 800b5b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	e0a9      	b.n	800b714 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	041b      	lsls	r3, r3, #16
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f002 fb41 	bl	800dc54 <SDMMC_CmdAppCommand>
 800b5d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <SD_FindSCR+0x56>
  {
    return errorstate;
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	e09a      	b.n	800b714 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5de:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b5e4:	2308      	movs	r3, #8
 800b5e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b5e8:	2330      	movs	r3, #48	; 0x30
 800b5ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f107 0210 	add.w	r2, r7, #16
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f002 f9ce 	bl	800d9a4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f002 fb88 	bl	800dd22 <SDMMC_CmdSendSCR>
 800b612:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	d022      	beq.n	800b660 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	e07a      	b.n	800b714 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	f107 0208 	add.w	r2, r7, #8
 800b638:	18d4      	adds	r4, r2, r3
 800b63a:	4608      	mov	r0, r1
 800b63c:	f002 f92d 	bl	800d89a <SDIO_ReadFIFO>
 800b640:	4603      	mov	r3, r0
 800b642:	6023      	str	r3, [r4, #0]
      index++;
 800b644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b646:	3301      	adds	r3, #1
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b64a:	f7fb fd07 	bl	800705c <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b658:	d102      	bne.n	800b660 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b65a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b65e:	e059      	b.n	800b714 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b666:	f240 432a 	movw	r3, #1066	; 0x42a
 800b66a:	4013      	ands	r3, r2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0d6      	beq.n	800b61e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b676:	f003 0308 	and.w	r3, r3, #8
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2208      	movs	r2, #8
 800b684:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b686:	2308      	movs	r3, #8
 800b688:	e044      	b.n	800b714 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2202      	movs	r2, #2
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e037      	b.n	800b714 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	e02a      	b.n	800b714 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	061a      	lsls	r2, r3, #24
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	0a1b      	lsrs	r3, r3, #8
 800b6da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	0e1b      	lsrs	r3, r3, #24
 800b6e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	601a      	str	r2, [r3, #0]
    scr++;
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	061a      	lsls	r2, r3, #24
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b706:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	0e1b      	lsrs	r3, r3, #24
 800b70c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	373c      	adds	r7, #60	; 0x3c
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd90      	pop	{r4, r7, pc}

0800b71c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b728:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d03f      	beq.n	800b7b6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b736:	2300      	movs	r3, #0
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	e033      	b.n	800b7a4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f002 f8aa 	bl	800d89a <SDIO_ReadFIFO>
 800b746:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3301      	adds	r3, #1
 800b754:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	3b01      	subs	r3, #1
 800b75a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	0a1b      	lsrs	r3, r3, #8
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	3b01      	subs	r3, #1
 800b770:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	0c1b      	lsrs	r3, r3, #16
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3b01      	subs	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	0e1b      	lsrs	r3, r3, #24
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b07      	cmp	r3, #7
 800b7a8:	d9c8      	bls.n	800b73c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b7b6:	bf00      	nop
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d043      	beq.n	800b860 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e037      	b.n	800b84e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	021a      	lsls	r2, r3, #8
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	3b01      	subs	r3, #1
 800b806:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	041a      	lsls	r2, r3, #16
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	4313      	orrs	r3, r2
 800b812:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3301      	adds	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	061a      	lsls	r2, r3, #24
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4313      	orrs	r3, r2
 800b82a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3b01      	subs	r3, #1
 800b836:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f107 0208 	add.w	r2, r7, #8
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f002 f836 	bl	800d8b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	3301      	adds	r3, #1
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b07      	cmp	r3, #7
 800b852:	d9c4      	bls.n	800b7de <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b860:	bf00      	nop
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e056      	b.n	800b928 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7f9 fc65 	bl	8005164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2202      	movs	r2, #2
 800b89e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	431a      	orrs	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	ea42 0103 	orr.w	r1, r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	0c1b      	lsrs	r3, r3, #16
 800b8f8:	f003 0104 	and.w	r1, r3, #4
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	69da      	ldr	r2, [r3, #28]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b916:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	4613      	mov	r3, r2
 800b93e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_SPI_Transmit+0x22>
 800b94e:	2302      	movs	r3, #2
 800b950:	e11e      	b.n	800bb90 <HAL_SPI_Transmit+0x260>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b95a:	f7fb fb7f 	bl	800705c <HAL_GetTick>
 800b95e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d002      	beq.n	800b976 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b970:	2302      	movs	r3, #2
 800b972:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b974:	e103      	b.n	800bb7e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <HAL_SPI_Transmit+0x52>
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d102      	bne.n	800b988 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b986:	e0fa      	b.n	800bb7e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2203      	movs	r2, #3
 800b98c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	88fa      	ldrh	r2, [r7, #6]
 800b9a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	88fa      	ldrh	r2, [r7, #6]
 800b9a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9ce:	d107      	bne.n	800b9e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ea:	2b40      	cmp	r3, #64	; 0x40
 800b9ec:	d007      	beq.n	800b9fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba06:	d14b      	bne.n	800baa0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <HAL_SPI_Transmit+0xe6>
 800ba10:	8afb      	ldrh	r3, [r7, #22]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d13e      	bne.n	800ba94 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1a:	881a      	ldrh	r2, [r3, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba26:	1c9a      	adds	r2, r3, #2
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ba3a:	e02b      	b.n	800ba94 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d112      	bne.n	800ba70 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4e:	881a      	ldrh	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba6e:	e011      	b.n	800ba94 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba70:	f7fb faf4 	bl	800705c <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d803      	bhi.n	800ba88 <HAL_SPI_Transmit+0x158>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba86:	d102      	bne.n	800ba8e <HAL_SPI_Transmit+0x15e>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba92:	e074      	b.n	800bb7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1ce      	bne.n	800ba3c <HAL_SPI_Transmit+0x10c>
 800ba9e:	e04c      	b.n	800bb3a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <HAL_SPI_Transmit+0x17e>
 800baa8:	8afb      	ldrh	r3, [r7, #22]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d140      	bne.n	800bb30 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	330c      	adds	r3, #12
 800bab8:	7812      	ldrb	r2, [r2, #0]
 800baba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baca:	b29b      	uxth	r3, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bad4:	e02c      	b.n	800bb30 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f003 0302 	and.w	r3, r3, #2
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d113      	bne.n	800bb0c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	7812      	ldrb	r2, [r2, #0]
 800baf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3b01      	subs	r3, #1
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb0a:	e011      	b.n	800bb30 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb0c:	f7fb faa6 	bl	800705c <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d803      	bhi.n	800bb24 <HAL_SPI_Transmit+0x1f4>
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d102      	bne.n	800bb2a <HAL_SPI_Transmit+0x1fa>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb2e:	e026      	b.n	800bb7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1cd      	bne.n	800bad6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fba4 	bl	800c28c <SPI_EndRxTxTransaction>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb58:	2300      	movs	r3, #0
 800bb5a:	613b      	str	r3, [r7, #16]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	613b      	str	r3, [r7, #16]
 800bb6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	77fb      	strb	r3, [r7, #31]
 800bb7a:	e000      	b.n	800bb7e <HAL_SPI_Transmit+0x24e>
  }

error:
 800bb7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3720      	adds	r7, #32
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	603b      	str	r3, [r7, #0]
 800bba4:	4613      	mov	r3, r2
 800bba6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbb4:	d112      	bne.n	800bbdc <HAL_SPI_Receive+0x44>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10e      	bne.n	800bbdc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2204      	movs	r2, #4
 800bbc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbc6:	88fa      	ldrh	r2, [r7, #6]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 f8e9 	bl	800bdaa <HAL_SPI_TransmitReceive>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	e0e2      	b.n	800bda2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d101      	bne.n	800bbea <HAL_SPI_Receive+0x52>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e0db      	b.n	800bda2 <HAL_SPI_Receive+0x20a>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf2:	f7fb fa33 	bl	800705c <HAL_GetTick>
 800bbf6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc04:	2302      	movs	r3, #2
 800bc06:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc08:	e0c2      	b.n	800bd90 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <HAL_SPI_Receive+0x7e>
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d102      	bne.n	800bc1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc1a:	e0b9      	b.n	800bd90 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2204      	movs	r2, #4
 800bc20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	88fa      	ldrh	r2, [r7, #6]
 800bc34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc62:	d107      	bne.n	800bc74 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7e:	2b40      	cmp	r3, #64	; 0x40
 800bc80:	d007      	beq.n	800bc92 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d162      	bne.n	800bd60 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bc9a:	e02e      	b.n	800bcfa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d115      	bne.n	800bcd6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f103 020c 	add.w	r2, r3, #12
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	7812      	ldrb	r2, [r2, #0]
 800bcb8:	b2d2      	uxtb	r2, r2
 800bcba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	3b01      	subs	r3, #1
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcd4:	e011      	b.n	800bcfa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcd6:	f7fb f9c1 	bl	800705c <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d803      	bhi.n	800bcee <HAL_SPI_Receive+0x156>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcec:	d102      	bne.n	800bcf4 <HAL_SPI_Receive+0x15c>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bcf8:	e04a      	b.n	800bd90 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1cb      	bne.n	800bc9c <HAL_SPI_Receive+0x104>
 800bd04:	e031      	b.n	800bd6a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d113      	bne.n	800bd3c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	b292      	uxth	r2, r2
 800bd20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	1c9a      	adds	r2, r3, #2
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd3a:	e011      	b.n	800bd60 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd3c:	f7fb f98e 	bl	800705c <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d803      	bhi.n	800bd54 <HAL_SPI_Receive+0x1bc>
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d102      	bne.n	800bd5a <HAL_SPI_Receive+0x1c2>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d102      	bne.n	800bd60 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd5e:	e017      	b.n	800bd90 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1cd      	bne.n	800bd06 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd6a:	693a      	ldr	r2, [r7, #16]
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 fa27 	bl	800c1c2 <SPI_EndRxTransaction>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2220      	movs	r2, #32
 800bd7e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	75fb      	strb	r3, [r7, #23]
 800bd8c:	e000      	b.n	800bd90 <HAL_SPI_Receive+0x1f8>
  }

error :
 800bd8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b08c      	sub	sp, #48	; 0x30
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d101      	bne.n	800bdd0 <HAL_SPI_TransmitReceive+0x26>
 800bdcc:	2302      	movs	r3, #2
 800bdce:	e18a      	b.n	800c0e6 <HAL_SPI_TransmitReceive+0x33c>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdd8:	f7fb f940 	bl	800705c <HAL_GetTick>
 800bddc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bde4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bdee:	887b      	ldrh	r3, [r7, #2]
 800bdf0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bdf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d00f      	beq.n	800be1a <HAL_SPI_TransmitReceive+0x70>
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be00:	d107      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x68>
 800be0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d003      	beq.n	800be1a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800be12:	2302      	movs	r3, #2
 800be14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be18:	e15b      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d005      	beq.n	800be2c <HAL_SPI_TransmitReceive+0x82>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <HAL_SPI_TransmitReceive+0x82>
 800be26:	887b      	ldrh	r3, [r7, #2]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d103      	bne.n	800be34 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be32:	e14e      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d003      	beq.n	800be48 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2205      	movs	r2, #5
 800be44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	887a      	ldrh	r2, [r7, #2]
 800be58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	887a      	ldrh	r2, [r7, #2]
 800be5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	887a      	ldrh	r2, [r7, #2]
 800be6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	887a      	ldrh	r2, [r7, #2]
 800be70:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be88:	2b40      	cmp	r3, #64	; 0x40
 800be8a:	d007      	beq.n	800be9c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bea4:	d178      	bne.n	800bf98 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_SPI_TransmitReceive+0x10a>
 800beae:	8b7b      	ldrh	r3, [r7, #26]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d166      	bne.n	800bf82 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb8:	881a      	ldrh	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec4:	1c9a      	adds	r2, r3, #2
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bece:	b29b      	uxth	r3, r3
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bed8:	e053      	b.n	800bf82 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d11b      	bne.n	800bf20 <HAL_SPI_TransmitReceive+0x176>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beec:	b29b      	uxth	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d016      	beq.n	800bf20 <HAL_SPI_TransmitReceive+0x176>
 800bef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d113      	bne.n	800bf20 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	881a      	ldrh	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf08:	1c9a      	adds	r2, r3, #2
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d119      	bne.n	800bf62 <HAL_SPI_TransmitReceive+0x1b8>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d014      	beq.n	800bf62 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68da      	ldr	r2, [r3, #12]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	b292      	uxth	r2, r2
 800bf44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4a:	1c9a      	adds	r2, r3, #2
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf62:	f7fb f87b 	bl	800705c <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d807      	bhi.n	800bf82 <HAL_SPI_TransmitReceive+0x1d8>
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf78:	d003      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf80:	e0a7      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1a6      	bne.n	800beda <HAL_SPI_TransmitReceive+0x130>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1a1      	bne.n	800beda <HAL_SPI_TransmitReceive+0x130>
 800bf96:	e07c      	b.n	800c092 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <HAL_SPI_TransmitReceive+0x1fc>
 800bfa0:	8b7b      	ldrh	r3, [r7, #26]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d16b      	bne.n	800c07e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	330c      	adds	r3, #12
 800bfb0:	7812      	ldrb	r2, [r2, #0]
 800bfb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfcc:	e057      	b.n	800c07e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d11c      	bne.n	800c016 <HAL_SPI_TransmitReceive+0x26c>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d017      	beq.n	800c016 <HAL_SPI_TransmitReceive+0x26c>
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d114      	bne.n	800c016 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	330c      	adds	r3, #12
 800bff6:	7812      	ldrb	r2, [r2, #0]
 800bff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c008:	b29b      	uxth	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	2b01      	cmp	r3, #1
 800c022:	d119      	bne.n	800c058 <HAL_SPI_TransmitReceive+0x2ae>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d014      	beq.n	800c058 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b29a      	uxth	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c054:	2301      	movs	r3, #1
 800c056:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c058:	f7fb f800 	bl	800705c <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c064:	429a      	cmp	r2, r3
 800c066:	d803      	bhi.n	800c070 <HAL_SPI_TransmitReceive+0x2c6>
 800c068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d102      	bne.n	800c076 <HAL_SPI_TransmitReceive+0x2cc>
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	2b00      	cmp	r3, #0
 800c074:	d103      	bne.n	800c07e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c07c:	e029      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c082:	b29b      	uxth	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1a2      	bne.n	800bfce <HAL_SPI_TransmitReceive+0x224>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d19d      	bne.n	800bfce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f8f8 	bl	800c28c <SPI_EndRxTxTransaction>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d006      	beq.n	800c0b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c0ae:	e010      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10b      	bne.n	800c0d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	e000      	b.n	800c0d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c0d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c0e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3730      	adds	r7, #48	; 0x30
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	603b      	str	r3, [r7, #0]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0fe:	e04c      	b.n	800c19a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c106:	d048      	beq.n	800c19a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c108:	f7fa ffa8 	bl	800705c <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	d902      	bls.n	800c11e <SPI_WaitFlagStateUntilTimeout+0x30>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d13d      	bne.n	800c19a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c12c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c136:	d111      	bne.n	800c15c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c140:	d004      	beq.n	800c14c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c14a:	d107      	bne.n	800c15c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c15a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c164:	d10f      	bne.n	800c186 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c196:	2303      	movs	r3, #3
 800c198:	e00f      	b.n	800c1ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	689a      	ldr	r2, [r3, #8]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	bf0c      	ite	eq
 800c1aa:	2301      	moveq	r3, #1
 800c1ac:	2300      	movne	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d1a3      	bne.n	800c100 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af02      	add	r7, sp, #8
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1d6:	d111      	bne.n	800c1fc <SPI_EndRxTransaction+0x3a>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1e0:	d004      	beq.n	800c1ec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ea:	d107      	bne.n	800c1fc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1fa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c204:	d12a      	bne.n	800c25c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c20e:	d012      	beq.n	800c236 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2200      	movs	r2, #0
 800c218:	2180      	movs	r1, #128	; 0x80
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f7ff ff67 	bl	800c0ee <SPI_WaitFlagStateUntilTimeout>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d02d      	beq.n	800c282 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22a:	f043 0220 	orr.w	r2, r3, #32
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e026      	b.n	800c284 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2200      	movs	r2, #0
 800c23e:	2101      	movs	r1, #1
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff ff54 	bl	800c0ee <SPI_WaitFlagStateUntilTimeout>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01a      	beq.n	800c282 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c250:	f043 0220 	orr.w	r2, r3, #32
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	e013      	b.n	800c284 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2200      	movs	r2, #0
 800c264:	2101      	movs	r1, #1
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f7ff ff41 	bl	800c0ee <SPI_WaitFlagStateUntilTimeout>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c276:	f043 0220 	orr.w	r2, r3, #32
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c27e:	2303      	movs	r3, #3
 800c280:	e000      	b.n	800c284 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af02      	add	r7, sp, #8
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c298:	4b1b      	ldr	r3, [pc, #108]	; (800c308 <SPI_EndRxTxTransaction+0x7c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a1b      	ldr	r2, [pc, #108]	; (800c30c <SPI_EndRxTxTransaction+0x80>)
 800c29e:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a2:	0d5b      	lsrs	r3, r3, #21
 800c2a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2a8:	fb02 f303 	mul.w	r3, r2, r3
 800c2ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2b6:	d112      	bne.n	800c2de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2180      	movs	r1, #128	; 0x80
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff ff13 	bl	800c0ee <SPI_WaitFlagStateUntilTimeout>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d016      	beq.n	800c2fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d2:	f043 0220 	orr.w	r2, r3, #32
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e00f      	b.n	800c2fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f4:	2b80      	cmp	r3, #128	; 0x80
 800c2f6:	d0f2      	beq.n	800c2de <SPI_EndRxTxTransaction+0x52>
 800c2f8:	e000      	b.n	800c2fc <SPI_EndRxTxTransaction+0x70>
        break;
 800c2fa:	bf00      	nop
  }

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000000 	.word	0x20000000
 800c30c:	165e9f81 	.word	0x165e9f81

0800c310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e01d      	b.n	800c35e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7f8 ffd0 	bl	80052dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3304      	adds	r3, #4
 800c34c:	4619      	mov	r1, r3
 800c34e:	4610      	mov	r0, r2
 800c350:	f000 fb56 	bl	800ca00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c366:	b480      	push	{r7}
 800c368:	b085      	sub	sp, #20
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0201 	orr.w	r2, r2, #1
 800c37c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f003 0307 	and.w	r3, r3, #7
 800c388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b06      	cmp	r3, #6
 800c38e:	d007      	beq.n	800c3a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0201 	orr.w	r2, r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e01d      	b.n	800c3fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7f8 ff0d 	bl	80051f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f000 fb07 	bl	800ca00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2201      	movs	r2, #1
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fd42 	bl	800cea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a15      	ldr	r2, [pc, #84]	; (800c478 <HAL_TIM_PWM_Start+0x74>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d004      	beq.n	800c430 <HAL_TIM_PWM_Start+0x2c>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a14      	ldr	r2, [pc, #80]	; (800c47c <HAL_TIM_PWM_Start+0x78>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d101      	bne.n	800c434 <HAL_TIM_PWM_Start+0x30>
 800c430:	2301      	movs	r3, #1
 800c432:	e000      	b.n	800c436 <HAL_TIM_PWM_Start+0x32>
 800c434:	2300      	movs	r3, #0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f003 0307 	and.w	r3, r3, #7
 800c454:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b06      	cmp	r3, #6
 800c45a:	d007      	beq.n	800c46c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0201 	orr.w	r2, r2, #1
 800c46a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	40010000 	.word	0x40010000
 800c47c:	40010400 	.word	0x40010400

0800c480 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e083      	b.n	800c59c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7f8 ffa7 	bl	80053fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4c4:	f023 0307 	bic.w	r3, r3, #7
 800c4c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	f000 fa93 	bl	800ca00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c502:	f023 0303 	bic.w	r3, r3, #3
 800c506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	4313      	orrs	r3, r2
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	4313      	orrs	r3, r2
 800c518:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c520:	f023 030c 	bic.w	r3, r3, #12
 800c524:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c52c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	021b      	lsls	r3, r3, #8
 800c53c:	4313      	orrs	r3, r2
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	011a      	lsls	r2, r3, #4
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	031b      	lsls	r3, r3, #12
 800c550:	4313      	orrs	r3, r2
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	4313      	orrs	r3, r2
 800c556:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c55e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c566:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	011b      	lsls	r3, r3, #4
 800c572:	4313      	orrs	r3, r2
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <HAL_TIM_Encoder_Start+0x16>
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	d008      	beq.n	800c5ca <HAL_TIM_Encoder_Start+0x26>
 800c5b8:	e00f      	b.n	800c5da <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 fc6c 	bl	800cea0 <TIM_CCxChannelCmd>
      break;
 800c5c8:	e016      	b.n	800c5f8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	2104      	movs	r1, #4
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 fc64 	bl	800cea0 <TIM_CCxChannelCmd>
      break;
 800c5d8:	e00e      	b.n	800c5f8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fc5c 	bl	800cea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	2104      	movs	r1, #4
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fc55 	bl	800cea0 <TIM_CCxChannelCmd>
      break;
 800c5f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f042 0201 	orr.w	r2, r2, #1
 800c606:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	f003 0302 	and.w	r3, r3, #2
 800c624:	2b02      	cmp	r3, #2
 800c626:	d122      	bne.n	800c66e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b02      	cmp	r3, #2
 800c634:	d11b      	bne.n	800c66e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f06f 0202 	mvn.w	r2, #2
 800c63e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	f003 0303 	and.w	r3, r3, #3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f9b5 	bl	800c9c4 <HAL_TIM_IC_CaptureCallback>
 800c65a:	e005      	b.n	800c668 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f9a7 	bl	800c9b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9b8 	bl	800c9d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d122      	bne.n	800c6c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f003 0304 	and.w	r3, r3, #4
 800c686:	2b04      	cmp	r3, #4
 800c688:	d11b      	bne.n	800c6c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f06f 0204 	mvn.w	r2, #4
 800c692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f98b 	bl	800c9c4 <HAL_TIM_IC_CaptureCallback>
 800c6ae:	e005      	b.n	800c6bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f97d 	bl	800c9b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f98e 	bl	800c9d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	f003 0308 	and.w	r3, r3, #8
 800c6cc:	2b08      	cmp	r3, #8
 800c6ce:	d122      	bne.n	800c716 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	f003 0308 	and.w	r3, r3, #8
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	d11b      	bne.n	800c716 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f06f 0208 	mvn.w	r2, #8
 800c6e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2204      	movs	r2, #4
 800c6ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	f003 0303 	and.w	r3, r3, #3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d003      	beq.n	800c704 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f961 	bl	800c9c4 <HAL_TIM_IC_CaptureCallback>
 800c702:	e005      	b.n	800c710 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f953 	bl	800c9b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f964 	bl	800c9d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b10      	cmp	r3, #16
 800c722:	d122      	bne.n	800c76a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f003 0310 	and.w	r3, r3, #16
 800c72e:	2b10      	cmp	r3, #16
 800c730:	d11b      	bne.n	800c76a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f06f 0210 	mvn.w	r2, #16
 800c73a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2208      	movs	r2, #8
 800c740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f937 	bl	800c9c4 <HAL_TIM_IC_CaptureCallback>
 800c756:	e005      	b.n	800c764 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f929 	bl	800c9b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f93a 	bl	800c9d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b01      	cmp	r3, #1
 800c776:	d10e      	bne.n	800c796 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b01      	cmp	r3, #1
 800c784:	d107      	bne.n	800c796 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f06f 0201 	mvn.w	r2, #1
 800c78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7f7 fb09 	bl	8003da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a0:	2b80      	cmp	r3, #128	; 0x80
 800c7a2:	d10e      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ae:	2b80      	cmp	r3, #128	; 0x80
 800c7b0:	d107      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fc6d 	bl	800d09c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7cc:	2b40      	cmp	r3, #64	; 0x40
 800c7ce:	d10e      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7da:	2b40      	cmp	r3, #64	; 0x40
 800c7dc:	d107      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f8ff 	bl	800c9ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0320 	and.w	r3, r3, #32
 800c7f8:	2b20      	cmp	r3, #32
 800c7fa:	d10e      	bne.n	800c81a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0320 	and.w	r3, r3, #32
 800c806:	2b20      	cmp	r3, #32
 800c808:	d107      	bne.n	800c81a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0220 	mvn.w	r2, #32
 800c812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fc37 	bl	800d088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c836:	2b01      	cmp	r3, #1
 800c838:	d101      	bne.n	800c83e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c83a:	2302      	movs	r3, #2
 800c83c:	e0b4      	b.n	800c9a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2202      	movs	r2, #2
 800c84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b0c      	cmp	r3, #12
 800c852:	f200 809f 	bhi.w	800c994 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c856:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c891 	.word	0x0800c891
 800c860:	0800c995 	.word	0x0800c995
 800c864:	0800c995 	.word	0x0800c995
 800c868:	0800c995 	.word	0x0800c995
 800c86c:	0800c8d1 	.word	0x0800c8d1
 800c870:	0800c995 	.word	0x0800c995
 800c874:	0800c995 	.word	0x0800c995
 800c878:	0800c995 	.word	0x0800c995
 800c87c:	0800c913 	.word	0x0800c913
 800c880:	0800c995 	.word	0x0800c995
 800c884:	0800c995 	.word	0x0800c995
 800c888:	0800c995 	.word	0x0800c995
 800c88c:	0800c953 	.word	0x0800c953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68b9      	ldr	r1, [r7, #8]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f952 	bl	800cb40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	699a      	ldr	r2, [r3, #24]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f042 0208 	orr.w	r2, r2, #8
 800c8aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	699a      	ldr	r2, [r3, #24]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f022 0204 	bic.w	r2, r2, #4
 800c8ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6999      	ldr	r1, [r3, #24]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	691a      	ldr	r2, [r3, #16]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	619a      	str	r2, [r3, #24]
      break;
 800c8ce:	e062      	b.n	800c996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68b9      	ldr	r1, [r7, #8]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f9a2 	bl	800cc20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	699a      	ldr	r2, [r3, #24]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	699a      	ldr	r2, [r3, #24]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6999      	ldr	r1, [r3, #24]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	021a      	lsls	r2, r3, #8
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	430a      	orrs	r2, r1
 800c90e:	619a      	str	r2, [r3, #24]
      break;
 800c910:	e041      	b.n	800c996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 f9f7 	bl	800cd0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	69da      	ldr	r2, [r3, #28]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f042 0208 	orr.w	r2, r2, #8
 800c92c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69da      	ldr	r2, [r3, #28]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f022 0204 	bic.w	r2, r2, #4
 800c93c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	69d9      	ldr	r1, [r3, #28]
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	691a      	ldr	r2, [r3, #16]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	430a      	orrs	r2, r1
 800c94e:	61da      	str	r2, [r3, #28]
      break;
 800c950:	e021      	b.n	800c996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 fa4b 	bl	800cdf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69da      	ldr	r2, [r3, #28]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c96c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69da      	ldr	r2, [r3, #28]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c97c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69d9      	ldr	r1, [r3, #28]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	021a      	lsls	r2, r3, #8
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	61da      	str	r2, [r3, #28]
      break;
 800c992:	e000      	b.n	800c996 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c994:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a40      	ldr	r2, [pc, #256]	; (800cb14 <TIM_Base_SetConfig+0x114>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d013      	beq.n	800ca40 <TIM_Base_SetConfig+0x40>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca1e:	d00f      	beq.n	800ca40 <TIM_Base_SetConfig+0x40>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a3d      	ldr	r2, [pc, #244]	; (800cb18 <TIM_Base_SetConfig+0x118>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d00b      	beq.n	800ca40 <TIM_Base_SetConfig+0x40>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a3c      	ldr	r2, [pc, #240]	; (800cb1c <TIM_Base_SetConfig+0x11c>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d007      	beq.n	800ca40 <TIM_Base_SetConfig+0x40>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a3b      	ldr	r2, [pc, #236]	; (800cb20 <TIM_Base_SetConfig+0x120>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d003      	beq.n	800ca40 <TIM_Base_SetConfig+0x40>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a3a      	ldr	r2, [pc, #232]	; (800cb24 <TIM_Base_SetConfig+0x124>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d108      	bne.n	800ca52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a2f      	ldr	r2, [pc, #188]	; (800cb14 <TIM_Base_SetConfig+0x114>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d02b      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca60:	d027      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a2c      	ldr	r2, [pc, #176]	; (800cb18 <TIM_Base_SetConfig+0x118>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d023      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a2b      	ldr	r2, [pc, #172]	; (800cb1c <TIM_Base_SetConfig+0x11c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d01f      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a2a      	ldr	r2, [pc, #168]	; (800cb20 <TIM_Base_SetConfig+0x120>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d01b      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a29      	ldr	r2, [pc, #164]	; (800cb24 <TIM_Base_SetConfig+0x124>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d017      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a28      	ldr	r2, [pc, #160]	; (800cb28 <TIM_Base_SetConfig+0x128>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d013      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a27      	ldr	r2, [pc, #156]	; (800cb2c <TIM_Base_SetConfig+0x12c>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d00f      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a26      	ldr	r2, [pc, #152]	; (800cb30 <TIM_Base_SetConfig+0x130>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d00b      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4a25      	ldr	r2, [pc, #148]	; (800cb34 <TIM_Base_SetConfig+0x134>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d007      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a24      	ldr	r2, [pc, #144]	; (800cb38 <TIM_Base_SetConfig+0x138>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d003      	beq.n	800cab2 <TIM_Base_SetConfig+0xb2>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a23      	ldr	r2, [pc, #140]	; (800cb3c <TIM_Base_SetConfig+0x13c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d108      	bne.n	800cac4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	4313      	orrs	r3, r2
 800cad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	689a      	ldr	r2, [r3, #8]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <TIM_Base_SetConfig+0x114>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d003      	beq.n	800caf8 <TIM_Base_SetConfig+0xf8>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a0c      	ldr	r2, [pc, #48]	; (800cb24 <TIM_Base_SetConfig+0x124>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d103      	bne.n	800cb00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	691a      	ldr	r2, [r3, #16]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	615a      	str	r2, [r3, #20]
}
 800cb06:	bf00      	nop
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	40010000 	.word	0x40010000
 800cb18:	40000400 	.word	0x40000400
 800cb1c:	40000800 	.word	0x40000800
 800cb20:	40000c00 	.word	0x40000c00
 800cb24:	40010400 	.word	0x40010400
 800cb28:	40014000 	.word	0x40014000
 800cb2c:	40014400 	.word	0x40014400
 800cb30:	40014800 	.word	0x40014800
 800cb34:	40001800 	.word	0x40001800
 800cb38:	40001c00 	.word	0x40001c00
 800cb3c:	40002000 	.word	0x40002000

0800cb40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	f023 0201 	bic.w	r2, r3, #1
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f023 0302 	bic.w	r3, r3, #2
 800cb88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a20      	ldr	r2, [pc, #128]	; (800cc18 <TIM_OC1_SetConfig+0xd8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d003      	beq.n	800cba4 <TIM_OC1_SetConfig+0x64>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a1f      	ldr	r2, [pc, #124]	; (800cc1c <TIM_OC1_SetConfig+0xdc>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d10c      	bne.n	800cbbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f023 0308 	bic.w	r3, r3, #8
 800cbaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f023 0304 	bic.w	r3, r3, #4
 800cbbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a15      	ldr	r2, [pc, #84]	; (800cc18 <TIM_OC1_SetConfig+0xd8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d003      	beq.n	800cbce <TIM_OC1_SetConfig+0x8e>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a14      	ldr	r2, [pc, #80]	; (800cc1c <TIM_OC1_SetConfig+0xdc>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d111      	bne.n	800cbf2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	693a      	ldr	r2, [r7, #16]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	621a      	str	r2, [r3, #32]
}
 800cc0c:	bf00      	nop
 800cc0e:	371c      	adds	r7, #28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	40010000 	.word	0x40010000
 800cc1c:	40010400 	.word	0x40010400

0800cc20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	f023 0210 	bic.w	r2, r3, #16
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f023 0320 	bic.w	r3, r3, #32
 800cc6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	011b      	lsls	r3, r3, #4
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a22      	ldr	r2, [pc, #136]	; (800cd04 <TIM_OC2_SetConfig+0xe4>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d003      	beq.n	800cc88 <TIM_OC2_SetConfig+0x68>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <TIM_OC2_SetConfig+0xe8>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d10d      	bne.n	800cca4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	011b      	lsls	r3, r3, #4
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a17      	ldr	r2, [pc, #92]	; (800cd04 <TIM_OC2_SetConfig+0xe4>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d003      	beq.n	800ccb4 <TIM_OC2_SetConfig+0x94>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a16      	ldr	r2, [pc, #88]	; (800cd08 <TIM_OC2_SetConfig+0xe8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d113      	bne.n	800ccdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	40010000 	.word	0x40010000
 800cd08:	40010400 	.word	0x40010400

0800cd0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b087      	sub	sp, #28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a1b      	ldr	r3, [r3, #32]
 800cd26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	69db      	ldr	r3, [r3, #28]
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f023 0303 	bic.w	r3, r3, #3
 800cd42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	021b      	lsls	r3, r3, #8
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a21      	ldr	r2, [pc, #132]	; (800cdec <TIM_OC3_SetConfig+0xe0>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d003      	beq.n	800cd72 <TIM_OC3_SetConfig+0x66>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a20      	ldr	r2, [pc, #128]	; (800cdf0 <TIM_OC3_SetConfig+0xe4>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d10d      	bne.n	800cd8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a16      	ldr	r2, [pc, #88]	; (800cdec <TIM_OC3_SetConfig+0xe0>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d003      	beq.n	800cd9e <TIM_OC3_SetConfig+0x92>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <TIM_OC3_SetConfig+0xe4>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d113      	bne.n	800cdc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cda4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	621a      	str	r2, [r3, #32]
}
 800cde0:	bf00      	nop
 800cde2:	371c      	adds	r7, #28
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr
 800cdec:	40010000 	.word	0x40010000
 800cdf0:	40010400 	.word	0x40010400

0800cdf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a1b      	ldr	r3, [r3, #32]
 800ce02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	031b      	lsls	r3, r3, #12
 800ce46:	693a      	ldr	r2, [r7, #16]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a12      	ldr	r2, [pc, #72]	; (800ce98 <TIM_OC4_SetConfig+0xa4>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d003      	beq.n	800ce5c <TIM_OC4_SetConfig+0x68>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a11      	ldr	r2, [pc, #68]	; (800ce9c <TIM_OC4_SetConfig+0xa8>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d109      	bne.n	800ce70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	019b      	lsls	r3, r3, #6
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	621a      	str	r2, [r3, #32]
}
 800ce8a:	bf00      	nop
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	40010000 	.word	0x40010000
 800ce9c:	40010400 	.word	0x40010400

0800cea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	f003 031f 	and.w	r3, r3, #31
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6a1a      	ldr	r2, [r3, #32]
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	43db      	mvns	r3, r3
 800cec2:	401a      	ands	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6a1a      	ldr	r2, [r3, #32]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 031f 	and.w	r3, r3, #31
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	fa01 f303 	lsl.w	r3, r1, r3
 800ced8:	431a      	orrs	r2, r3
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	621a      	str	r2, [r3, #32]
}
 800cede:	bf00      	nop
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
	...

0800ceec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d101      	bne.n	800cf04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf00:	2302      	movs	r3, #2
 800cf02:	e05a      	b.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2202      	movs	r2, #2
 800cf10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a21      	ldr	r2, [pc, #132]	; (800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d022      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf50:	d01d      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a1d      	ldr	r2, [pc, #116]	; (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d018      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a1b      	ldr	r2, [pc, #108]	; (800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d013      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a1a      	ldr	r2, [pc, #104]	; (800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d00e      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a18      	ldr	r2, [pc, #96]	; (800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d009      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a17      	ldr	r2, [pc, #92]	; (800cfdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d004      	beq.n	800cf8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a15      	ldr	r2, [pc, #84]	; (800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d10c      	bne.n	800cfa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40010000 	.word	0x40010000
 800cfcc:	40000400 	.word	0x40000400
 800cfd0:	40000800 	.word	0x40000800
 800cfd4:	40000c00 	.word	0x40000c00
 800cfd8:	40010400 	.word	0x40010400
 800cfdc:	40014000 	.word	0x40014000
 800cfe0:	40001800 	.word	0x40001800

0800cfe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e03d      	b.n	800d07c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	4313      	orrs	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	4313      	orrs	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	4313      	orrs	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e03f      	b.n	800d142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7f8 faba 	bl	8005650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2224      	movs	r2, #36	; 0x24
 800d0e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f829 	bl	800d14c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	691a      	ldr	r2, [r3, #16]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	695a      	ldr	r2, [r3, #20]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68da      	ldr	r2, [r3, #12]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2220      	movs	r2, #32
 800d134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2220      	movs	r2, #32
 800d13c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
	...

0800d14c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	b085      	sub	sp, #20
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68da      	ldr	r2, [r3, #12]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	430a      	orrs	r2, r1
 800d16a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	431a      	orrs	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	431a      	orrs	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	69db      	ldr	r3, [r3, #28]
 800d180:	4313      	orrs	r3, r2
 800d182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d18e:	f023 030c 	bic.w	r3, r3, #12
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	6812      	ldr	r2, [r2, #0]
 800d196:	68f9      	ldr	r1, [r7, #12]
 800d198:	430b      	orrs	r3, r1
 800d19a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	699a      	ldr	r2, [r3, #24]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	430a      	orrs	r2, r1
 800d1b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	69db      	ldr	r3, [r3, #28]
 800d1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1ba:	f040 818b 	bne.w	800d4d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4ac1      	ldr	r2, [pc, #772]	; (800d4c8 <UART_SetConfig+0x37c>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d005      	beq.n	800d1d4 <UART_SetConfig+0x88>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4abf      	ldr	r2, [pc, #764]	; (800d4cc <UART_SetConfig+0x380>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	f040 80bd 	bne.w	800d34e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d1d4:	f7fc fbcc 	bl	8009970 <HAL_RCC_GetPCLK2Freq>
 800d1d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	461d      	mov	r5, r3
 800d1de:	f04f 0600 	mov.w	r6, #0
 800d1e2:	46a8      	mov	r8, r5
 800d1e4:	46b1      	mov	r9, r6
 800d1e6:	eb18 0308 	adds.w	r3, r8, r8
 800d1ea:	eb49 0409 	adc.w	r4, r9, r9
 800d1ee:	4698      	mov	r8, r3
 800d1f0:	46a1      	mov	r9, r4
 800d1f2:	eb18 0805 	adds.w	r8, r8, r5
 800d1f6:	eb49 0906 	adc.w	r9, r9, r6
 800d1fa:	f04f 0100 	mov.w	r1, #0
 800d1fe:	f04f 0200 	mov.w	r2, #0
 800d202:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d206:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d20a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d20e:	4688      	mov	r8, r1
 800d210:	4691      	mov	r9, r2
 800d212:	eb18 0005 	adds.w	r0, r8, r5
 800d216:	eb49 0106 	adc.w	r1, r9, r6
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	461d      	mov	r5, r3
 800d220:	f04f 0600 	mov.w	r6, #0
 800d224:	196b      	adds	r3, r5, r5
 800d226:	eb46 0406 	adc.w	r4, r6, r6
 800d22a:	461a      	mov	r2, r3
 800d22c:	4623      	mov	r3, r4
 800d22e:	f7f3 fd43 	bl	8000cb8 <__aeabi_uldivmod>
 800d232:	4603      	mov	r3, r0
 800d234:	460c      	mov	r4, r1
 800d236:	461a      	mov	r2, r3
 800d238:	4ba5      	ldr	r3, [pc, #660]	; (800d4d0 <UART_SetConfig+0x384>)
 800d23a:	fba3 2302 	umull	r2, r3, r3, r2
 800d23e:	095b      	lsrs	r3, r3, #5
 800d240:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	461d      	mov	r5, r3
 800d248:	f04f 0600 	mov.w	r6, #0
 800d24c:	46a9      	mov	r9, r5
 800d24e:	46b2      	mov	sl, r6
 800d250:	eb19 0309 	adds.w	r3, r9, r9
 800d254:	eb4a 040a 	adc.w	r4, sl, sl
 800d258:	4699      	mov	r9, r3
 800d25a:	46a2      	mov	sl, r4
 800d25c:	eb19 0905 	adds.w	r9, r9, r5
 800d260:	eb4a 0a06 	adc.w	sl, sl, r6
 800d264:	f04f 0100 	mov.w	r1, #0
 800d268:	f04f 0200 	mov.w	r2, #0
 800d26c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d270:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d274:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d278:	4689      	mov	r9, r1
 800d27a:	4692      	mov	sl, r2
 800d27c:	eb19 0005 	adds.w	r0, r9, r5
 800d280:	eb4a 0106 	adc.w	r1, sl, r6
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	461d      	mov	r5, r3
 800d28a:	f04f 0600 	mov.w	r6, #0
 800d28e:	196b      	adds	r3, r5, r5
 800d290:	eb46 0406 	adc.w	r4, r6, r6
 800d294:	461a      	mov	r2, r3
 800d296:	4623      	mov	r3, r4
 800d298:	f7f3 fd0e 	bl	8000cb8 <__aeabi_uldivmod>
 800d29c:	4603      	mov	r3, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b8b      	ldr	r3, [pc, #556]	; (800d4d0 <UART_SetConfig+0x384>)
 800d2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d2a8:	095b      	lsrs	r3, r3, #5
 800d2aa:	2164      	movs	r1, #100	; 0x64
 800d2ac:	fb01 f303 	mul.w	r3, r1, r3
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	3332      	adds	r3, #50	; 0x32
 800d2b6:	4a86      	ldr	r2, [pc, #536]	; (800d4d0 <UART_SetConfig+0x384>)
 800d2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2bc:	095b      	lsrs	r3, r3, #5
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2c4:	4498      	add	r8, r3
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	461d      	mov	r5, r3
 800d2ca:	f04f 0600 	mov.w	r6, #0
 800d2ce:	46a9      	mov	r9, r5
 800d2d0:	46b2      	mov	sl, r6
 800d2d2:	eb19 0309 	adds.w	r3, r9, r9
 800d2d6:	eb4a 040a 	adc.w	r4, sl, sl
 800d2da:	4699      	mov	r9, r3
 800d2dc:	46a2      	mov	sl, r4
 800d2de:	eb19 0905 	adds.w	r9, r9, r5
 800d2e2:	eb4a 0a06 	adc.w	sl, sl, r6
 800d2e6:	f04f 0100 	mov.w	r1, #0
 800d2ea:	f04f 0200 	mov.w	r2, #0
 800d2ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2fa:	4689      	mov	r9, r1
 800d2fc:	4692      	mov	sl, r2
 800d2fe:	eb19 0005 	adds.w	r0, r9, r5
 800d302:	eb4a 0106 	adc.w	r1, sl, r6
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	461d      	mov	r5, r3
 800d30c:	f04f 0600 	mov.w	r6, #0
 800d310:	196b      	adds	r3, r5, r5
 800d312:	eb46 0406 	adc.w	r4, r6, r6
 800d316:	461a      	mov	r2, r3
 800d318:	4623      	mov	r3, r4
 800d31a:	f7f3 fccd 	bl	8000cb8 <__aeabi_uldivmod>
 800d31e:	4603      	mov	r3, r0
 800d320:	460c      	mov	r4, r1
 800d322:	461a      	mov	r2, r3
 800d324:	4b6a      	ldr	r3, [pc, #424]	; (800d4d0 <UART_SetConfig+0x384>)
 800d326:	fba3 1302 	umull	r1, r3, r3, r2
 800d32a:	095b      	lsrs	r3, r3, #5
 800d32c:	2164      	movs	r1, #100	; 0x64
 800d32e:	fb01 f303 	mul.w	r3, r1, r3
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	00db      	lsls	r3, r3, #3
 800d336:	3332      	adds	r3, #50	; 0x32
 800d338:	4a65      	ldr	r2, [pc, #404]	; (800d4d0 <UART_SetConfig+0x384>)
 800d33a:	fba2 2303 	umull	r2, r3, r2, r3
 800d33e:	095b      	lsrs	r3, r3, #5
 800d340:	f003 0207 	and.w	r2, r3, #7
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4442      	add	r2, r8
 800d34a:	609a      	str	r2, [r3, #8]
 800d34c:	e26f      	b.n	800d82e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d34e:	f7fc fafb 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800d352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	461d      	mov	r5, r3
 800d358:	f04f 0600 	mov.w	r6, #0
 800d35c:	46a8      	mov	r8, r5
 800d35e:	46b1      	mov	r9, r6
 800d360:	eb18 0308 	adds.w	r3, r8, r8
 800d364:	eb49 0409 	adc.w	r4, r9, r9
 800d368:	4698      	mov	r8, r3
 800d36a:	46a1      	mov	r9, r4
 800d36c:	eb18 0805 	adds.w	r8, r8, r5
 800d370:	eb49 0906 	adc.w	r9, r9, r6
 800d374:	f04f 0100 	mov.w	r1, #0
 800d378:	f04f 0200 	mov.w	r2, #0
 800d37c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d388:	4688      	mov	r8, r1
 800d38a:	4691      	mov	r9, r2
 800d38c:	eb18 0005 	adds.w	r0, r8, r5
 800d390:	eb49 0106 	adc.w	r1, r9, r6
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	461d      	mov	r5, r3
 800d39a:	f04f 0600 	mov.w	r6, #0
 800d39e:	196b      	adds	r3, r5, r5
 800d3a0:	eb46 0406 	adc.w	r4, r6, r6
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4623      	mov	r3, r4
 800d3a8:	f7f3 fc86 	bl	8000cb8 <__aeabi_uldivmod>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4b47      	ldr	r3, [pc, #284]	; (800d4d0 <UART_SetConfig+0x384>)
 800d3b4:	fba3 2302 	umull	r2, r3, r3, r2
 800d3b8:	095b      	lsrs	r3, r3, #5
 800d3ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	461d      	mov	r5, r3
 800d3c2:	f04f 0600 	mov.w	r6, #0
 800d3c6:	46a9      	mov	r9, r5
 800d3c8:	46b2      	mov	sl, r6
 800d3ca:	eb19 0309 	adds.w	r3, r9, r9
 800d3ce:	eb4a 040a 	adc.w	r4, sl, sl
 800d3d2:	4699      	mov	r9, r3
 800d3d4:	46a2      	mov	sl, r4
 800d3d6:	eb19 0905 	adds.w	r9, r9, r5
 800d3da:	eb4a 0a06 	adc.w	sl, sl, r6
 800d3de:	f04f 0100 	mov.w	r1, #0
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d3ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3f2:	4689      	mov	r9, r1
 800d3f4:	4692      	mov	sl, r2
 800d3f6:	eb19 0005 	adds.w	r0, r9, r5
 800d3fa:	eb4a 0106 	adc.w	r1, sl, r6
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	461d      	mov	r5, r3
 800d404:	f04f 0600 	mov.w	r6, #0
 800d408:	196b      	adds	r3, r5, r5
 800d40a:	eb46 0406 	adc.w	r4, r6, r6
 800d40e:	461a      	mov	r2, r3
 800d410:	4623      	mov	r3, r4
 800d412:	f7f3 fc51 	bl	8000cb8 <__aeabi_uldivmod>
 800d416:	4603      	mov	r3, r0
 800d418:	460c      	mov	r4, r1
 800d41a:	461a      	mov	r2, r3
 800d41c:	4b2c      	ldr	r3, [pc, #176]	; (800d4d0 <UART_SetConfig+0x384>)
 800d41e:	fba3 1302 	umull	r1, r3, r3, r2
 800d422:	095b      	lsrs	r3, r3, #5
 800d424:	2164      	movs	r1, #100	; 0x64
 800d426:	fb01 f303 	mul.w	r3, r1, r3
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	00db      	lsls	r3, r3, #3
 800d42e:	3332      	adds	r3, #50	; 0x32
 800d430:	4a27      	ldr	r2, [pc, #156]	; (800d4d0 <UART_SetConfig+0x384>)
 800d432:	fba2 2303 	umull	r2, r3, r2, r3
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d43e:	4498      	add	r8, r3
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	461d      	mov	r5, r3
 800d444:	f04f 0600 	mov.w	r6, #0
 800d448:	46a9      	mov	r9, r5
 800d44a:	46b2      	mov	sl, r6
 800d44c:	eb19 0309 	adds.w	r3, r9, r9
 800d450:	eb4a 040a 	adc.w	r4, sl, sl
 800d454:	4699      	mov	r9, r3
 800d456:	46a2      	mov	sl, r4
 800d458:	eb19 0905 	adds.w	r9, r9, r5
 800d45c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d460:	f04f 0100 	mov.w	r1, #0
 800d464:	f04f 0200 	mov.w	r2, #0
 800d468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d46c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d474:	4689      	mov	r9, r1
 800d476:	4692      	mov	sl, r2
 800d478:	eb19 0005 	adds.w	r0, r9, r5
 800d47c:	eb4a 0106 	adc.w	r1, sl, r6
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	461d      	mov	r5, r3
 800d486:	f04f 0600 	mov.w	r6, #0
 800d48a:	196b      	adds	r3, r5, r5
 800d48c:	eb46 0406 	adc.w	r4, r6, r6
 800d490:	461a      	mov	r2, r3
 800d492:	4623      	mov	r3, r4
 800d494:	f7f3 fc10 	bl	8000cb8 <__aeabi_uldivmod>
 800d498:	4603      	mov	r3, r0
 800d49a:	460c      	mov	r4, r1
 800d49c:	461a      	mov	r2, r3
 800d49e:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <UART_SetConfig+0x384>)
 800d4a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d4a4:	095b      	lsrs	r3, r3, #5
 800d4a6:	2164      	movs	r1, #100	; 0x64
 800d4a8:	fb01 f303 	mul.w	r3, r1, r3
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	3332      	adds	r3, #50	; 0x32
 800d4b2:	4a07      	ldr	r2, [pc, #28]	; (800d4d0 <UART_SetConfig+0x384>)
 800d4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b8:	095b      	lsrs	r3, r3, #5
 800d4ba:	f003 0207 	and.w	r2, r3, #7
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4442      	add	r2, r8
 800d4c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d4c6:	e1b2      	b.n	800d82e <UART_SetConfig+0x6e2>
 800d4c8:	40011000 	.word	0x40011000
 800d4cc:	40011400 	.word	0x40011400
 800d4d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4ad7      	ldr	r2, [pc, #860]	; (800d838 <UART_SetConfig+0x6ec>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d005      	beq.n	800d4ea <UART_SetConfig+0x39e>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4ad6      	ldr	r2, [pc, #856]	; (800d83c <UART_SetConfig+0x6f0>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	f040 80d1 	bne.w	800d68c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4ea:	f7fc fa41 	bl	8009970 <HAL_RCC_GetPCLK2Freq>
 800d4ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	469a      	mov	sl, r3
 800d4f4:	f04f 0b00 	mov.w	fp, #0
 800d4f8:	46d0      	mov	r8, sl
 800d4fa:	46d9      	mov	r9, fp
 800d4fc:	eb18 0308 	adds.w	r3, r8, r8
 800d500:	eb49 0409 	adc.w	r4, r9, r9
 800d504:	4698      	mov	r8, r3
 800d506:	46a1      	mov	r9, r4
 800d508:	eb18 080a 	adds.w	r8, r8, sl
 800d50c:	eb49 090b 	adc.w	r9, r9, fp
 800d510:	f04f 0100 	mov.w	r1, #0
 800d514:	f04f 0200 	mov.w	r2, #0
 800d518:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d51c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d520:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d524:	4688      	mov	r8, r1
 800d526:	4691      	mov	r9, r2
 800d528:	eb1a 0508 	adds.w	r5, sl, r8
 800d52c:	eb4b 0609 	adc.w	r6, fp, r9
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	4619      	mov	r1, r3
 800d536:	f04f 0200 	mov.w	r2, #0
 800d53a:	f04f 0300 	mov.w	r3, #0
 800d53e:	f04f 0400 	mov.w	r4, #0
 800d542:	0094      	lsls	r4, r2, #2
 800d544:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d548:	008b      	lsls	r3, r1, #2
 800d54a:	461a      	mov	r2, r3
 800d54c:	4623      	mov	r3, r4
 800d54e:	4628      	mov	r0, r5
 800d550:	4631      	mov	r1, r6
 800d552:	f7f3 fbb1 	bl	8000cb8 <__aeabi_uldivmod>
 800d556:	4603      	mov	r3, r0
 800d558:	460c      	mov	r4, r1
 800d55a:	461a      	mov	r2, r3
 800d55c:	4bb8      	ldr	r3, [pc, #736]	; (800d840 <UART_SetConfig+0x6f4>)
 800d55e:	fba3 2302 	umull	r2, r3, r3, r2
 800d562:	095b      	lsrs	r3, r3, #5
 800d564:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	469b      	mov	fp, r3
 800d56c:	f04f 0c00 	mov.w	ip, #0
 800d570:	46d9      	mov	r9, fp
 800d572:	46e2      	mov	sl, ip
 800d574:	eb19 0309 	adds.w	r3, r9, r9
 800d578:	eb4a 040a 	adc.w	r4, sl, sl
 800d57c:	4699      	mov	r9, r3
 800d57e:	46a2      	mov	sl, r4
 800d580:	eb19 090b 	adds.w	r9, r9, fp
 800d584:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d588:	f04f 0100 	mov.w	r1, #0
 800d58c:	f04f 0200 	mov.w	r2, #0
 800d590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d594:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d598:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d59c:	4689      	mov	r9, r1
 800d59e:	4692      	mov	sl, r2
 800d5a0:	eb1b 0509 	adds.w	r5, fp, r9
 800d5a4:	eb4c 060a 	adc.w	r6, ip, sl
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f04f 0200 	mov.w	r2, #0
 800d5b2:	f04f 0300 	mov.w	r3, #0
 800d5b6:	f04f 0400 	mov.w	r4, #0
 800d5ba:	0094      	lsls	r4, r2, #2
 800d5bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5c0:	008b      	lsls	r3, r1, #2
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	4623      	mov	r3, r4
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	f7f3 fb75 	bl	8000cb8 <__aeabi_uldivmod>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	4b9a      	ldr	r3, [pc, #616]	; (800d840 <UART_SetConfig+0x6f4>)
 800d5d6:	fba3 1302 	umull	r1, r3, r3, r2
 800d5da:	095b      	lsrs	r3, r3, #5
 800d5dc:	2164      	movs	r1, #100	; 0x64
 800d5de:	fb01 f303 	mul.w	r3, r1, r3
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	011b      	lsls	r3, r3, #4
 800d5e6:	3332      	adds	r3, #50	; 0x32
 800d5e8:	4a95      	ldr	r2, [pc, #596]	; (800d840 <UART_SetConfig+0x6f4>)
 800d5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ee:	095b      	lsrs	r3, r3, #5
 800d5f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5f4:	4498      	add	r8, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	469b      	mov	fp, r3
 800d5fa:	f04f 0c00 	mov.w	ip, #0
 800d5fe:	46d9      	mov	r9, fp
 800d600:	46e2      	mov	sl, ip
 800d602:	eb19 0309 	adds.w	r3, r9, r9
 800d606:	eb4a 040a 	adc.w	r4, sl, sl
 800d60a:	4699      	mov	r9, r3
 800d60c:	46a2      	mov	sl, r4
 800d60e:	eb19 090b 	adds.w	r9, r9, fp
 800d612:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d616:	f04f 0100 	mov.w	r1, #0
 800d61a:	f04f 0200 	mov.w	r2, #0
 800d61e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d622:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d626:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d62a:	4689      	mov	r9, r1
 800d62c:	4692      	mov	sl, r2
 800d62e:	eb1b 0509 	adds.w	r5, fp, r9
 800d632:	eb4c 060a 	adc.w	r6, ip, sl
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	4619      	mov	r1, r3
 800d63c:	f04f 0200 	mov.w	r2, #0
 800d640:	f04f 0300 	mov.w	r3, #0
 800d644:	f04f 0400 	mov.w	r4, #0
 800d648:	0094      	lsls	r4, r2, #2
 800d64a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d64e:	008b      	lsls	r3, r1, #2
 800d650:	461a      	mov	r2, r3
 800d652:	4623      	mov	r3, r4
 800d654:	4628      	mov	r0, r5
 800d656:	4631      	mov	r1, r6
 800d658:	f7f3 fb2e 	bl	8000cb8 <__aeabi_uldivmod>
 800d65c:	4603      	mov	r3, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	461a      	mov	r2, r3
 800d662:	4b77      	ldr	r3, [pc, #476]	; (800d840 <UART_SetConfig+0x6f4>)
 800d664:	fba3 1302 	umull	r1, r3, r3, r2
 800d668:	095b      	lsrs	r3, r3, #5
 800d66a:	2164      	movs	r1, #100	; 0x64
 800d66c:	fb01 f303 	mul.w	r3, r1, r3
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	011b      	lsls	r3, r3, #4
 800d674:	3332      	adds	r3, #50	; 0x32
 800d676:	4a72      	ldr	r2, [pc, #456]	; (800d840 <UART_SetConfig+0x6f4>)
 800d678:	fba2 2303 	umull	r2, r3, r2, r3
 800d67c:	095b      	lsrs	r3, r3, #5
 800d67e:	f003 020f 	and.w	r2, r3, #15
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4442      	add	r2, r8
 800d688:	609a      	str	r2, [r3, #8]
 800d68a:	e0d0      	b.n	800d82e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d68c:	f7fc f95c 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800d690:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	469a      	mov	sl, r3
 800d696:	f04f 0b00 	mov.w	fp, #0
 800d69a:	46d0      	mov	r8, sl
 800d69c:	46d9      	mov	r9, fp
 800d69e:	eb18 0308 	adds.w	r3, r8, r8
 800d6a2:	eb49 0409 	adc.w	r4, r9, r9
 800d6a6:	4698      	mov	r8, r3
 800d6a8:	46a1      	mov	r9, r4
 800d6aa:	eb18 080a 	adds.w	r8, r8, sl
 800d6ae:	eb49 090b 	adc.w	r9, r9, fp
 800d6b2:	f04f 0100 	mov.w	r1, #0
 800d6b6:	f04f 0200 	mov.w	r2, #0
 800d6ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d6be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d6c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d6c6:	4688      	mov	r8, r1
 800d6c8:	4691      	mov	r9, r2
 800d6ca:	eb1a 0508 	adds.w	r5, sl, r8
 800d6ce:	eb4b 0609 	adc.w	r6, fp, r9
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	f04f 0400 	mov.w	r4, #0
 800d6e4:	0094      	lsls	r4, r2, #2
 800d6e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6ea:	008b      	lsls	r3, r1, #2
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4623      	mov	r3, r4
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	f7f3 fae0 	bl	8000cb8 <__aeabi_uldivmod>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4b50      	ldr	r3, [pc, #320]	; (800d840 <UART_SetConfig+0x6f4>)
 800d700:	fba3 2302 	umull	r2, r3, r3, r2
 800d704:	095b      	lsrs	r3, r3, #5
 800d706:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	469b      	mov	fp, r3
 800d70e:	f04f 0c00 	mov.w	ip, #0
 800d712:	46d9      	mov	r9, fp
 800d714:	46e2      	mov	sl, ip
 800d716:	eb19 0309 	adds.w	r3, r9, r9
 800d71a:	eb4a 040a 	adc.w	r4, sl, sl
 800d71e:	4699      	mov	r9, r3
 800d720:	46a2      	mov	sl, r4
 800d722:	eb19 090b 	adds.w	r9, r9, fp
 800d726:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d72a:	f04f 0100 	mov.w	r1, #0
 800d72e:	f04f 0200 	mov.w	r2, #0
 800d732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d736:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d73a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d73e:	4689      	mov	r9, r1
 800d740:	4692      	mov	sl, r2
 800d742:	eb1b 0509 	adds.w	r5, fp, r9
 800d746:	eb4c 060a 	adc.w	r6, ip, sl
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	4619      	mov	r1, r3
 800d750:	f04f 0200 	mov.w	r2, #0
 800d754:	f04f 0300 	mov.w	r3, #0
 800d758:	f04f 0400 	mov.w	r4, #0
 800d75c:	0094      	lsls	r4, r2, #2
 800d75e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d762:	008b      	lsls	r3, r1, #2
 800d764:	461a      	mov	r2, r3
 800d766:	4623      	mov	r3, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	4631      	mov	r1, r6
 800d76c:	f7f3 faa4 	bl	8000cb8 <__aeabi_uldivmod>
 800d770:	4603      	mov	r3, r0
 800d772:	460c      	mov	r4, r1
 800d774:	461a      	mov	r2, r3
 800d776:	4b32      	ldr	r3, [pc, #200]	; (800d840 <UART_SetConfig+0x6f4>)
 800d778:	fba3 1302 	umull	r1, r3, r3, r2
 800d77c:	095b      	lsrs	r3, r3, #5
 800d77e:	2164      	movs	r1, #100	; 0x64
 800d780:	fb01 f303 	mul.w	r3, r1, r3
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	011b      	lsls	r3, r3, #4
 800d788:	3332      	adds	r3, #50	; 0x32
 800d78a:	4a2d      	ldr	r2, [pc, #180]	; (800d840 <UART_SetConfig+0x6f4>)
 800d78c:	fba2 2303 	umull	r2, r3, r2, r3
 800d790:	095b      	lsrs	r3, r3, #5
 800d792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d796:	4498      	add	r8, r3
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	469b      	mov	fp, r3
 800d79c:	f04f 0c00 	mov.w	ip, #0
 800d7a0:	46d9      	mov	r9, fp
 800d7a2:	46e2      	mov	sl, ip
 800d7a4:	eb19 0309 	adds.w	r3, r9, r9
 800d7a8:	eb4a 040a 	adc.w	r4, sl, sl
 800d7ac:	4699      	mov	r9, r3
 800d7ae:	46a2      	mov	sl, r4
 800d7b0:	eb19 090b 	adds.w	r9, r9, fp
 800d7b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d7b8:	f04f 0100 	mov.w	r1, #0
 800d7bc:	f04f 0200 	mov.w	r2, #0
 800d7c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7cc:	4689      	mov	r9, r1
 800d7ce:	4692      	mov	sl, r2
 800d7d0:	eb1b 0509 	adds.w	r5, fp, r9
 800d7d4:	eb4c 060a 	adc.w	r6, ip, sl
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4619      	mov	r1, r3
 800d7de:	f04f 0200 	mov.w	r2, #0
 800d7e2:	f04f 0300 	mov.w	r3, #0
 800d7e6:	f04f 0400 	mov.w	r4, #0
 800d7ea:	0094      	lsls	r4, r2, #2
 800d7ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7f0:	008b      	lsls	r3, r1, #2
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	4623      	mov	r3, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	f7f3 fa5d 	bl	8000cb8 <__aeabi_uldivmod>
 800d7fe:	4603      	mov	r3, r0
 800d800:	460c      	mov	r4, r1
 800d802:	461a      	mov	r2, r3
 800d804:	4b0e      	ldr	r3, [pc, #56]	; (800d840 <UART_SetConfig+0x6f4>)
 800d806:	fba3 1302 	umull	r1, r3, r3, r2
 800d80a:	095b      	lsrs	r3, r3, #5
 800d80c:	2164      	movs	r1, #100	; 0x64
 800d80e:	fb01 f303 	mul.w	r3, r1, r3
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	011b      	lsls	r3, r3, #4
 800d816:	3332      	adds	r3, #50	; 0x32
 800d818:	4a09      	ldr	r2, [pc, #36]	; (800d840 <UART_SetConfig+0x6f4>)
 800d81a:	fba2 2303 	umull	r2, r3, r2, r3
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	f003 020f 	and.w	r2, r3, #15
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4442      	add	r2, r8
 800d82a:	609a      	str	r2, [r3, #8]
}
 800d82c:	e7ff      	b.n	800d82e <UART_SetConfig+0x6e2>
 800d82e:	bf00      	nop
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	40011000 	.word	0x40011000
 800d83c:	40011400 	.word	0x40011400
 800d840:	51eb851f 	.word	0x51eb851f

0800d844 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d844:	b084      	sub	sp, #16
 800d846:	b480      	push	{r7}
 800d848:	b085      	sub	sp, #20
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	f107 001c 	add.w	r0, r7, #28
 800d852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d85a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d85c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d85e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d862:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d866:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d86a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d86e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d87e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	431a      	orrs	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	b004      	add	sp, #16
 800d898:	4770      	bx	lr

0800d89a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2203      	movs	r2, #3
 800d8e2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d8e4:	2002      	movs	r0, #2
 800d8e6:	f7f9 fbc5 	bl	8007074 <HAL_Delay>
  
  return HAL_OK;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 0303 	and.w	r3, r3, #3
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d92e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d934:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d93a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	4313      	orrs	r3, r2
 800d940:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d94a:	f023 030f 	bic.w	r3, r3, #15
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	431a      	orrs	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	b2db      	uxtb	r3, r3
}
 800d972:	4618      	mov	r0, r3
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d97e:	b480      	push	{r7}
 800d980:	b085      	sub	sp, #20
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
 800d986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	3314      	adds	r3, #20
 800d98c:	461a      	mov	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	4413      	add	r3, r2
 800d992:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
}  
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d9d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	431a      	orrs	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0

}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da0a:	2310      	movs	r3, #16
 800da0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da0e:	2340      	movs	r3, #64	; 0x40
 800da10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da12:	2300      	movs	r3, #0
 800da14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	4619      	mov	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff ff74 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800da28:	f241 3288 	movw	r2, #5000	; 0x1388
 800da2c:	2110      	movs	r1, #16
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fa40 	bl	800deb4 <SDMMC_GetCmdResp1>
 800da34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da36:	69fb      	ldr	r3, [r7, #28]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da4e:	2311      	movs	r3, #17
 800da50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da52:	2340      	movs	r3, #64	; 0x40
 800da54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da56:	2300      	movs	r3, #0
 800da58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da60:	f107 0308 	add.w	r3, r7, #8
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff ff52 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800da6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da70:	2111      	movs	r1, #17
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa1e 	bl	800deb4 <SDMMC_GetCmdResp1>
 800da78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da7a:	69fb      	ldr	r3, [r7, #28]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b088      	sub	sp, #32
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da92:	2312      	movs	r3, #18
 800da94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da96:	2340      	movs	r3, #64	; 0x40
 800da98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da9a:	2300      	movs	r3, #0
 800da9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff ff30 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab4:	2112      	movs	r1, #18
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f9fc 	bl	800deb4 <SDMMC_GetCmdResp1>
 800dabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dabe:	69fb      	ldr	r3, [r7, #28]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dad6:	2318      	movs	r3, #24
 800dad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dada:	2340      	movs	r3, #64	; 0x40
 800dadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dae8:	f107 0308 	add.w	r3, r7, #8
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff ff0e 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800daf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf8:	2118      	movs	r1, #24
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f9da 	bl	800deb4 <SDMMC_GetCmdResp1>
 800db00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db02:	69fb      	ldr	r3, [r7, #28]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db1a:	2319      	movs	r3, #25
 800db1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db1e:	2340      	movs	r3, #64	; 0x40
 800db20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db22:	2300      	movs	r3, #0
 800db24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db2c:	f107 0308 	add.w	r3, r7, #8
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff feec 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800db38:	f241 3288 	movw	r2, #5000	; 0x1388
 800db3c:	2119      	movs	r1, #25
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f9b8 	bl	800deb4 <SDMMC_GetCmdResp1>
 800db44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db46:	69fb      	ldr	r3, [r7, #28]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3720      	adds	r7, #32
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db58:	2300      	movs	r3, #0
 800db5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db5c:	230c      	movs	r3, #12
 800db5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db60:	2340      	movs	r3, #64	; 0x40
 800db62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db64:	2300      	movs	r3, #0
 800db66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	4619      	mov	r1, r3
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f7ff fecb 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800db7a:	4a05      	ldr	r2, [pc, #20]	; (800db90 <SDMMC_CmdStopTransfer+0x40>)
 800db7c:	210c      	movs	r1, #12
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f998 	bl	800deb4 <SDMMC_GetCmdResp1>
 800db84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db86:	69fb      	ldr	r3, [r7, #28]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	05f5e100 	.word	0x05f5e100

0800db94 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dba4:	2307      	movs	r3, #7
 800dba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dba8:	2340      	movs	r3, #64	; 0x40
 800dbaa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbac:	2300      	movs	r3, #0
 800dbae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbb6:	f107 0310 	add.w	r3, r7, #16
 800dbba:	4619      	mov	r1, r3
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff fea7 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dbc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbc6:	2107      	movs	r1, #7
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f000 f973 	bl	800deb4 <SDMMC_GetCmdResp1>
 800dbce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3728      	adds	r7, #40	; 0x28
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b088      	sub	sp, #32
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff fe86 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 f92d 	bl	800de64 <SDMMC_GetCmdError>
 800dc0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b088      	sub	sp, #32
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc24:	2308      	movs	r3, #8
 800dc26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc36:	f107 0308 	add.w	r3, r7, #8
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fe67 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fb16 	bl	800e274 <SDMMC_GetCmdResp7>
 800dc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc4a:	69fb      	ldr	r3, [r7, #28]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3720      	adds	r7, #32
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b088      	sub	sp, #32
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc62:	2337      	movs	r3, #55	; 0x37
 800dc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc66:	2340      	movs	r3, #64	; 0x40
 800dc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc74:	f107 0308 	add.w	r3, r7, #8
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff fe48 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dc80:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc84:	2137      	movs	r1, #55	; 0x37
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f914 	bl	800deb4 <SDMMC_GetCmdResp1>
 800dc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3720      	adds	r7, #32
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dcae:	2329      	movs	r3, #41	; 0x29
 800dcb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcb2:	2340      	movs	r3, #64	; 0x40
 800dcb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcc0:	f107 0308 	add.w	r3, r7, #8
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff fe22 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fa23 	bl	800e118 <SDMMC_GetCmdResp3>
 800dcd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcd4:	69fb      	ldr	r3, [r7, #28]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3720      	adds	r7, #32
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b088      	sub	sp, #32
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dcec:	2306      	movs	r3, #6
 800dcee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcf0:	2340      	movs	r3, #64	; 0x40
 800dcf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcfe:	f107 0308 	add.w	r3, r7, #8
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7ff fe03 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800dd0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd0e:	2106      	movs	r1, #6
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f8cf 	bl	800deb4 <SDMMC_GetCmdResp1>
 800dd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd18:	69fb      	ldr	r3, [r7, #28]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b088      	sub	sp, #32
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd2e:	2333      	movs	r3, #51	; 0x33
 800dd30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd32:	2340      	movs	r3, #64	; 0x40
 800dd34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd36:	2300      	movs	r3, #0
 800dd38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7ff fde2 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dd4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd50:	2133      	movs	r1, #51	; 0x33
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f8ae 	bl	800deb4 <SDMMC_GetCmdResp1>
 800dd58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd5a:	69fb      	ldr	r3, [r7, #28]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3720      	adds	r7, #32
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd70:	2302      	movs	r3, #2
 800dd72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dd74:	23c0      	movs	r3, #192	; 0xc0
 800dd76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd82:	f107 0308 	add.w	r3, r7, #8
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff fdc1 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f97c 	bl	800e08c <SDMMC_GetCmdResp2>
 800dd94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd96:	69fb      	ldr	r3, [r7, #28]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3720      	adds	r7, #32
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddae:	2309      	movs	r3, #9
 800ddb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ddb2:	23c0      	movs	r3, #192	; 0xc0
 800ddb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddc0:	f107 0308 	add.w	r3, r7, #8
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fda2 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f95d 	bl	800e08c <SDMMC_GetCmdResp2>
 800ddd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b088      	sub	sp, #32
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dde8:	2300      	movs	r3, #0
 800ddea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ddec:	2303      	movs	r3, #3
 800ddee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddf0:	2340      	movs	r3, #64	; 0x40
 800ddf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fd83 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	2103      	movs	r1, #3
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f9bc 	bl	800e18c <SDMMC_GetCmdResp6>
 800de14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de16:	69fb      	ldr	r3, [r7, #28]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b088      	sub	sp, #32
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de2e:	230d      	movs	r3, #13
 800de30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de32:	2340      	movs	r3, #64	; 0x40
 800de34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fd62 	bl	800d910 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800de4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800de50:	210d      	movs	r1, #13
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f82e 	bl	800deb4 <SDMMC_GetCmdResp1>
 800de58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de5a:	69fb      	ldr	r3, [r7, #28]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800de64:	b490      	push	{r4, r7}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de6c:	4b0f      	ldr	r3, [pc, #60]	; (800deac <SDMMC_GetCmdError+0x48>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a0f      	ldr	r2, [pc, #60]	; (800deb0 <SDMMC_GetCmdError+0x4c>)
 800de72:	fba2 2303 	umull	r2, r3, r2, r3
 800de76:	0a5b      	lsrs	r3, r3, #9
 800de78:	f241 3288 	movw	r2, #5000	; 0x1388
 800de7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de80:	4623      	mov	r3, r4
 800de82:	1e5c      	subs	r4, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d102      	bne.n	800de8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de8c:	e009      	b.n	800dea2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de96:	2b00      	cmp	r3, #0
 800de98:	d0f2      	beq.n	800de80 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	22c5      	movs	r2, #197	; 0xc5
 800de9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bc90      	pop	{r4, r7}
 800deaa:	4770      	bx	lr
 800deac:	20000000 	.word	0x20000000
 800deb0:	10624dd3 	.word	0x10624dd3

0800deb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	460b      	mov	r3, r1
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dec2:	4b6f      	ldr	r3, [pc, #444]	; (800e080 <SDMMC_GetCmdResp1+0x1cc>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a6f      	ldr	r2, [pc, #444]	; (800e084 <SDMMC_GetCmdResp1+0x1d0>)
 800dec8:	fba2 2303 	umull	r2, r3, r2, r3
 800decc:	0a5b      	lsrs	r3, r3, #9
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ded4:	4623      	mov	r3, r4
 800ded6:	1e5c      	subs	r4, r3, #1
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dee0:	e0c9      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800deee:	2b00      	cmp	r3, #0
 800def0:	d0f0      	beq.n	800ded4 <SDMMC_GetCmdResp1+0x20>
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1eb      	bne.n	800ded4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df00:	f003 0304 	and.w	r3, r3, #4
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2204      	movs	r2, #4
 800df0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df0e:	2304      	movs	r3, #4
 800df10:	e0b1      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d004      	beq.n	800df28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2201      	movs	r2, #1
 800df22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df24:	2301      	movs	r3, #1
 800df26:	e0a6      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	22c5      	movs	r2, #197	; 0xc5
 800df2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f7ff fd18 	bl	800d964 <SDIO_GetCommandResponse>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	7afb      	ldrb	r3, [r7, #11]
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d001      	beq.n	800df42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df3e:	2301      	movs	r3, #1
 800df40:	e099      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800df42:	2100      	movs	r1, #0
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff fd1a 	bl	800d97e <SDIO_GetResponse>
 800df4a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	4b4e      	ldr	r3, [pc, #312]	; (800e088 <SDMMC_GetCmdResp1+0x1d4>)
 800df50:	4013      	ands	r3, r2
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800df56:	2300      	movs	r3, #0
 800df58:	e08d      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	da02      	bge.n	800df66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df64:	e087      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df70:	2340      	movs	r3, #64	; 0x40
 800df72:	e080      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df7e:	2380      	movs	r3, #128	; 0x80
 800df80:	e079      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df90:	e071      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfa0:	e069      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb0:	e061      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfc0:	e059      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfd0:	e051      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfe0:	e049      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dfec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dff0:	e041      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800dffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e000:	e039      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e00c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e010:	e031      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e01c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e020:	e029      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e02c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e030:	e021      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e03c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e040:	e019      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e04c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e050:	e011      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e05c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e060:	e009      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	f003 0308 	and.w	r3, r3, #8
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e06c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e070:	e001      	b.n	800e076 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e076:	4618      	mov	r0, r3
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd90      	pop	{r4, r7, pc}
 800e07e:	bf00      	nop
 800e080:	20000000 	.word	0x20000000
 800e084:	10624dd3 	.word	0x10624dd3
 800e088:	fdffe008 	.word	0xfdffe008

0800e08c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e08c:	b490      	push	{r4, r7}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e094:	4b1e      	ldr	r3, [pc, #120]	; (800e110 <SDMMC_GetCmdResp2+0x84>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a1e      	ldr	r2, [pc, #120]	; (800e114 <SDMMC_GetCmdResp2+0x88>)
 800e09a:	fba2 2303 	umull	r2, r3, r2, r3
 800e09e:	0a5b      	lsrs	r3, r3, #9
 800e0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e0a8:	4623      	mov	r3, r4
 800e0aa:	1e5c      	subs	r4, r3, #1
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d102      	bne.n	800e0b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0b4:	e026      	b.n	800e104 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0f0      	beq.n	800e0a8 <SDMMC_GetCmdResp2+0x1c>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1eb      	bne.n	800e0a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d4:	f003 0304 	and.w	r3, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2204      	movs	r2, #4
 800e0e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0e2:	2304      	movs	r3, #4
 800e0e4:	e00e      	b.n	800e104 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ea:	f003 0301 	and.w	r3, r3, #1
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d004      	beq.n	800e0fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e003      	b.n	800e104 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	22c5      	movs	r2, #197	; 0xc5
 800e100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bc90      	pop	{r4, r7}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	20000000 	.word	0x20000000
 800e114:	10624dd3 	.word	0x10624dd3

0800e118 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e118:	b490      	push	{r4, r7}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e120:	4b18      	ldr	r3, [pc, #96]	; (800e184 <SDMMC_GetCmdResp3+0x6c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a18      	ldr	r2, [pc, #96]	; (800e188 <SDMMC_GetCmdResp3+0x70>)
 800e126:	fba2 2303 	umull	r2, r3, r2, r3
 800e12a:	0a5b      	lsrs	r3, r3, #9
 800e12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e134:	4623      	mov	r3, r4
 800e136:	1e5c      	subs	r4, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e140:	e01b      	b.n	800e17a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e146:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d0f0      	beq.n	800e134 <SDMMC_GetCmdResp3+0x1c>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1eb      	bne.n	800e134 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e160:	f003 0304 	and.w	r3, r3, #4
 800e164:	2b00      	cmp	r3, #0
 800e166:	d004      	beq.n	800e172 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2204      	movs	r2, #4
 800e16c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e16e:	2304      	movs	r3, #4
 800e170:	e003      	b.n	800e17a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	22c5      	movs	r2, #197	; 0xc5
 800e176:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bc90      	pop	{r4, r7}
 800e182:	4770      	bx	lr
 800e184:	20000000 	.word	0x20000000
 800e188:	10624dd3 	.word	0x10624dd3

0800e18c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b087      	sub	sp, #28
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	460b      	mov	r3, r1
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e19a:	4b34      	ldr	r3, [pc, #208]	; (800e26c <SDMMC_GetCmdResp6+0xe0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a34      	ldr	r2, [pc, #208]	; (800e270 <SDMMC_GetCmdResp6+0xe4>)
 800e1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a4:	0a5b      	lsrs	r3, r3, #9
 800e1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e1ae:	4623      	mov	r3, r4
 800e1b0:	1e5c      	subs	r4, r3, #1
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d102      	bne.n	800e1bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1ba:	e052      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d0f0      	beq.n	800e1ae <SDMMC_GetCmdResp6+0x22>
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1eb      	bne.n	800e1ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1da:	f003 0304 	and.w	r3, r3, #4
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d004      	beq.n	800e1ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2204      	movs	r2, #4
 800e1e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	e03a      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d004      	beq.n	800e202 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e02f      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f7ff fbae 	bl	800d964 <SDIO_GetCommandResponse>
 800e208:	4603      	mov	r3, r0
 800e20a:	461a      	mov	r2, r3
 800e20c:	7afb      	ldrb	r3, [r7, #11]
 800e20e:	4293      	cmp	r3, r2
 800e210:	d001      	beq.n	800e216 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e212:	2301      	movs	r3, #1
 800e214:	e025      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	22c5      	movs	r2, #197	; 0xc5
 800e21a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e21c:	2100      	movs	r1, #0
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f7ff fbad 	bl	800d97e <SDIO_GetResponse>
 800e224:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	0c1b      	lsrs	r3, r3, #16
 800e234:	b29a      	uxth	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	e011      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e24c:	e009      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e25c:	e001      	b.n	800e262 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e25e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e262:	4618      	mov	r0, r3
 800e264:	371c      	adds	r7, #28
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20000000 	.word	0x20000000
 800e270:	10624dd3 	.word	0x10624dd3

0800e274 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e274:	b490      	push	{r4, r7}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e27c:	4b21      	ldr	r3, [pc, #132]	; (800e304 <SDMMC_GetCmdResp7+0x90>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a21      	ldr	r2, [pc, #132]	; (800e308 <SDMMC_GetCmdResp7+0x94>)
 800e282:	fba2 2303 	umull	r2, r3, r2, r3
 800e286:	0a5b      	lsrs	r3, r3, #9
 800e288:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e290:	4623      	mov	r3, r4
 800e292:	1e5c      	subs	r4, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e29c:	e02c      	b.n	800e2f8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d0f0      	beq.n	800e290 <SDMMC_GetCmdResp7+0x1c>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d1eb      	bne.n	800e290 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	f003 0304 	and.w	r3, r3, #4
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2ca:	2304      	movs	r3, #4
 800e2cc:	e014      	b.n	800e2f8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d004      	beq.n	800e2e4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e009      	b.n	800e2f8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2240      	movs	r2, #64	; 0x40
 800e2f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2f6:	2300      	movs	r3, #0
  
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bc90      	pop	{r4, r7}
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	20000000 	.word	0x20000000
 800e308:	10624dd3 	.word	0x10624dd3

0800e30c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e310:	4904      	ldr	r1, [pc, #16]	; (800e324 <MX_FATFS_Init+0x18>)
 800e312:	4805      	ldr	r0, [pc, #20]	; (800e328 <MX_FATFS_Init+0x1c>)
 800e314:	f003 fb9c 	bl	8011a50 <FATFS_LinkDriver>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	4b03      	ldr	r3, [pc, #12]	; (800e32c <MX_FATFS_Init+0x20>)
 800e31e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e320:	bf00      	nop
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20039d98 	.word	0x20039d98
 800e328:	08017f24 	.word	0x08017f24
 800e32c:	20039d94 	.word	0x20039d94

0800e330 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e33a:	f000 f896 	bl	800e46a <BSP_SD_IsDetected>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b01      	cmp	r3, #1
 800e342:	d001      	beq.n	800e348 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e012      	b.n	800e36e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e348:	480b      	ldr	r0, [pc, #44]	; (800e378 <BSP_SD_Init+0x48>)
 800e34a:	f7fb ffa5 	bl	800a298 <HAL_SD_Init>
 800e34e:	4603      	mov	r3, r0
 800e350:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e352:	79fb      	ldrb	r3, [r7, #7]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d109      	bne.n	800e36c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e35c:	4806      	ldr	r0, [pc, #24]	; (800e378 <BSP_SD_Init+0x48>)
 800e35e:	f7fc fd4f 	bl	800ae00 <HAL_SD_ConfigWideBusOperation>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e36c:	79fb      	ldrb	r3, [r7, #7]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	20039b94 	.word	0x20039b94

0800e37c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b086      	sub	sp, #24
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	68f9      	ldr	r1, [r7, #12]
 800e392:	4806      	ldr	r0, [pc, #24]	; (800e3ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800e394:	f7fc f810 	bl	800a3b8 <HAL_SD_ReadBlocks_DMA>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	20039b94 	.word	0x20039b94

0800e3b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	68f9      	ldr	r1, [r7, #12]
 800e3c6:	4806      	ldr	r0, [pc, #24]	; (800e3e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e3c8:	f7fc f8de 	bl	800a588 <HAL_SD_WriteBlocks_DMA>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20039b94 	.word	0x20039b94

0800e3e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e3e8:	4805      	ldr	r0, [pc, #20]	; (800e400 <BSP_SD_GetCardState+0x1c>)
 800e3ea:	f7fc fd85 	bl	800aef8 <HAL_SD_GetCardState>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	bf14      	ite	ne
 800e3f4:	2301      	movne	r3, #1
 800e3f6:	2300      	moveq	r3, #0
 800e3f8:	b2db      	uxtb	r3, r3
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	20039b94 	.word	0x20039b94

0800e404 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e40c:	6879      	ldr	r1, [r7, #4]
 800e40e:	4803      	ldr	r0, [pc, #12]	; (800e41c <BSP_SD_GetCardInfo+0x18>)
 800e410:	f7fc fcca 	bl	800ada8 <HAL_SD_GetCardInfo>
}
 800e414:	bf00      	nop
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	20039b94 	.word	0x20039b94

0800e420 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e428:	f000 f818 	bl	800e45c <BSP_SD_AbortCallback>
}
 800e42c:	bf00      	nop
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e43c:	f000 f9a8 	bl	800e790 <BSP_SD_WriteCpltCallback>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e450:	f000 f9aa 	bl	800e7a8 <BSP_SD_ReadCpltCallback>
}
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e45c:	b480      	push	{r7}
 800e45e:	af00      	add	r7, sp, #0

}
 800e460:	bf00      	nop
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b082      	sub	sp, #8
 800e46e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e470:	2301      	movs	r3, #1
 800e472:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e474:	f000 f80c 	bl	800e490 <BSP_PlatformIsDetected>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e47e:	2300      	movs	r3, #0
 800e480:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e482:	79fb      	ldrb	r3, [r7, #7]
 800e484:	b2db      	uxtb	r3, r3
}
 800e486:	4618      	mov	r0, r3
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e496:	2301      	movs	r3, #1
 800e498:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e49a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e49e:	4806      	ldr	r0, [pc, #24]	; (800e4b8 <BSP_PlatformIsDetected+0x28>)
 800e4a0:	f7fa f866 	bl	8008570 <HAL_GPIO_ReadPin>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	40020000 	.word	0x40020000

0800e4bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e4c4:	f7f8 fdca 	bl	800705c <HAL_GetTick>
 800e4c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e4ca:	e006      	b.n	800e4da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4cc:	f7ff ff8a 	bl	800e3e4 <BSP_SD_GetCardState>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e009      	b.n	800e4ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e4da:	f7f8 fdbf 	bl	800705c <HAL_GetTick>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d8f0      	bhi.n	800e4cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e4ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e502:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <SD_CheckStatus+0x38>)
 800e504:	2201      	movs	r2, #1
 800e506:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e508:	f7ff ff6c 	bl	800e3e4 <BSP_SD_GetCardState>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d107      	bne.n	800e522 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e512:	4b07      	ldr	r3, [pc, #28]	; (800e530 <SD_CheckStatus+0x38>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	b2db      	uxtb	r3, r3
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	4b04      	ldr	r3, [pc, #16]	; (800e530 <SD_CheckStatus+0x38>)
 800e520:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e522:	4b03      	ldr	r3, [pc, #12]	; (800e530 <SD_CheckStatus+0x38>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	b2db      	uxtb	r3, r3
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20000009 	.word	0x20000009

0800e534 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e53e:	f7ff fef7 	bl	800e330 <BSP_SD_Init>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d107      	bne.n	800e558 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7ff ffd4 	bl	800e4f8 <SD_CheckStatus>
 800e550:	4603      	mov	r3, r0
 800e552:	461a      	mov	r2, r3
 800e554:	4b04      	ldr	r3, [pc, #16]	; (800e568 <SD_initialize+0x34>)
 800e556:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e558:	4b03      	ldr	r3, [pc, #12]	; (800e568 <SD_initialize+0x34>)
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	b2db      	uxtb	r3, r3
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000009 	.word	0x20000009

0800e56c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	4603      	mov	r3, r0
 800e574:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff ffbd 	bl	800e4f8 <SD_CheckStatus>
 800e57e:	4603      	mov	r3, r0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60b9      	str	r1, [r7, #8]
 800e590:	607a      	str	r2, [r7, #4]
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	4603      	mov	r3, r0
 800e596:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e59c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e5a0:	f7ff ff8c 	bl	800e4bc <SD_CheckStatusWithTimeout>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	da01      	bge.n	800e5ae <SD_read+0x26>
  {
    return res;
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	e03b      	b.n	800e626 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	6879      	ldr	r1, [r7, #4]
 800e5b2:	68b8      	ldr	r0, [r7, #8]
 800e5b4:	f7ff fee2 	bl	800e37c <BSP_SD_ReadBlocks_DMA>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d132      	bne.n	800e624 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e5be:	4b1c      	ldr	r3, [pc, #112]	; (800e630 <SD_read+0xa8>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e5c4:	f7f8 fd4a 	bl	800705c <HAL_GetTick>
 800e5c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5ca:	bf00      	nop
 800e5cc:	4b18      	ldr	r3, [pc, #96]	; (800e630 <SD_read+0xa8>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d108      	bne.n	800e5e6 <SD_read+0x5e>
 800e5d4:	f7f8 fd42 	bl	800705c <HAL_GetTick>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	f247 522f 	movw	r2, #29999	; 0x752f
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d9f2      	bls.n	800e5cc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e5e6:	4b12      	ldr	r3, [pc, #72]	; (800e630 <SD_read+0xa8>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d102      	bne.n	800e5f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	75fb      	strb	r3, [r7, #23]
 800e5f2:	e017      	b.n	800e624 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e5f4:	4b0e      	ldr	r3, [pc, #56]	; (800e630 <SD_read+0xa8>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e5fa:	f7f8 fd2f 	bl	800705c <HAL_GetTick>
 800e5fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e600:	e007      	b.n	800e612 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e602:	f7ff feef 	bl	800e3e4 <BSP_SD_GetCardState>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <SD_read+0x8a>
          {
            res = RES_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e610:	e008      	b.n	800e624 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e612:	f7f8 fd23 	bl	800705c <HAL_GetTick>
 800e616:	4602      	mov	r2, r0
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e620:	4293      	cmp	r3, r2
 800e622:	d9ee      	bls.n	800e602 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e624:	7dfb      	ldrb	r3, [r7, #23]
}
 800e626:	4618      	mov	r0, r3
 800e628:	3718      	adds	r7, #24
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20037430 	.word	0x20037430

0800e634 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60b9      	str	r1, [r7, #8]
 800e63c:	607a      	str	r2, [r7, #4]
 800e63e:	603b      	str	r3, [r7, #0]
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e648:	4b24      	ldr	r3, [pc, #144]	; (800e6dc <SD_write+0xa8>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e64e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e652:	f7ff ff33 	bl	800e4bc <SD_CheckStatusWithTimeout>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	da01      	bge.n	800e660 <SD_write+0x2c>
  {
    return res;
 800e65c:	7dfb      	ldrb	r3, [r7, #23]
 800e65e:	e038      	b.n	800e6d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	6879      	ldr	r1, [r7, #4]
 800e664:	68b8      	ldr	r0, [r7, #8]
 800e666:	f7ff fea3 	bl	800e3b0 <BSP_SD_WriteBlocks_DMA>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d12f      	bne.n	800e6d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e670:	f7f8 fcf4 	bl	800705c <HAL_GetTick>
 800e674:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e676:	bf00      	nop
 800e678:	4b18      	ldr	r3, [pc, #96]	; (800e6dc <SD_write+0xa8>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d108      	bne.n	800e692 <SD_write+0x5e>
 800e680:	f7f8 fcec 	bl	800705c <HAL_GetTick>
 800e684:	4602      	mov	r2, r0
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e68e:	4293      	cmp	r3, r2
 800e690:	d9f2      	bls.n	800e678 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e692:	4b12      	ldr	r3, [pc, #72]	; (800e6dc <SD_write+0xa8>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d102      	bne.n	800e6a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	75fb      	strb	r3, [r7, #23]
 800e69e:	e017      	b.n	800e6d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <SD_write+0xa8>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e6a6:	f7f8 fcd9 	bl	800705c <HAL_GetTick>
 800e6aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6ac:	e007      	b.n	800e6be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6ae:	f7ff fe99 	bl	800e3e4 <BSP_SD_GetCardState>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <SD_write+0x8a>
          {
            res = RES_OK;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	75fb      	strb	r3, [r7, #23]
            break;
 800e6bc:	e008      	b.n	800e6d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6be:	f7f8 fccd 	bl	800705c <HAL_GetTick>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d9ee      	bls.n	800e6ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2003742c 	.word	0x2003742c

0800e6e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b08c      	sub	sp, #48	; 0x30
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	603a      	str	r2, [r7, #0]
 800e6ea:	71fb      	strb	r3, [r7, #7]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e6f6:	4b25      	ldr	r3, [pc, #148]	; (800e78c <SD_ioctl+0xac>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b00      	cmp	r3, #0
 800e702:	d001      	beq.n	800e708 <SD_ioctl+0x28>
 800e704:	2303      	movs	r3, #3
 800e706:	e03c      	b.n	800e782 <SD_ioctl+0xa2>

  switch (cmd)
 800e708:	79bb      	ldrb	r3, [r7, #6]
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d834      	bhi.n	800e778 <SD_ioctl+0x98>
 800e70e:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <SD_ioctl+0x34>)
 800e710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e714:	0800e725 	.word	0x0800e725
 800e718:	0800e72d 	.word	0x0800e72d
 800e71c:	0800e745 	.word	0x0800e745
 800e720:	0800e75f 	.word	0x0800e75f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e72a:	e028      	b.n	800e77e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e72c:	f107 030c 	add.w	r3, r7, #12
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fe67 	bl	800e404 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e742:	e01c      	b.n	800e77e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e744:	f107 030c 	add.w	r3, r7, #12
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff fe5b 	bl	800e404 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	b29a      	uxth	r2, r3
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e75c:	e00f      	b.n	800e77e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e75e:	f107 030c 	add.w	r3, r7, #12
 800e762:	4618      	mov	r0, r3
 800e764:	f7ff fe4e 	bl	800e404 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	0a5a      	lsrs	r2, r3, #9
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e776:	e002      	b.n	800e77e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e778:	2304      	movs	r3, #4
 800e77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e77e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e782:	4618      	mov	r0, r3
 800e784:	3730      	adds	r7, #48	; 0x30
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20000009 	.word	0x20000009

0800e790 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e790:	b480      	push	{r7}
 800e792:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e794:	4b03      	ldr	r3, [pc, #12]	; (800e7a4 <BSP_SD_WriteCpltCallback+0x14>)
 800e796:	2201      	movs	r2, #1
 800e798:	601a      	str	r2, [r3, #0]
}
 800e79a:	bf00      	nop
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	2003742c 	.word	0x2003742c

0800e7a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e7ac:	4b03      	ldr	r3, [pc, #12]	; (800e7bc <BSP_SD_ReadCpltCallback+0x14>)
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	601a      	str	r2, [r3, #0]
}
 800e7b2:	bf00      	nop
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	20037430 	.word	0x20037430

0800e7c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	4a08      	ldr	r2, [pc, #32]	; (800e7f0 <disk_status+0x30>)
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4413      	add	r3, r2
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	79fa      	ldrb	r2, [r7, #7]
 800e7d8:	4905      	ldr	r1, [pc, #20]	; (800e7f0 <disk_status+0x30>)
 800e7da:	440a      	add	r2, r1
 800e7dc:	7a12      	ldrb	r2, [r2, #8]
 800e7de:	4610      	mov	r0, r2
 800e7e0:	4798      	blx	r3
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	2003745c 	.word	0x2003745c

0800e7f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	4a0d      	ldr	r2, [pc, #52]	; (800e83c <disk_initialize+0x48>)
 800e806:	5cd3      	ldrb	r3, [r2, r3]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d111      	bne.n	800e830 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	4a0b      	ldr	r2, [pc, #44]	; (800e83c <disk_initialize+0x48>)
 800e810:	2101      	movs	r1, #1
 800e812:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	4a09      	ldr	r2, [pc, #36]	; (800e83c <disk_initialize+0x48>)
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	4413      	add	r3, r2
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	79fa      	ldrb	r2, [r7, #7]
 800e822:	4906      	ldr	r1, [pc, #24]	; (800e83c <disk_initialize+0x48>)
 800e824:	440a      	add	r2, r1
 800e826:	7a12      	ldrb	r2, [r2, #8]
 800e828:	4610      	mov	r0, r2
 800e82a:	4798      	blx	r3
 800e82c:	4603      	mov	r3, r0
 800e82e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e830:	7bfb      	ldrb	r3, [r7, #15]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	2003745c 	.word	0x2003745c

0800e840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e840:	b590      	push	{r4, r7, lr}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	60b9      	str	r1, [r7, #8]
 800e848:	607a      	str	r2, [r7, #4]
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	4603      	mov	r3, r0
 800e84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e850:	7bfb      	ldrb	r3, [r7, #15]
 800e852:	4a0a      	ldr	r2, [pc, #40]	; (800e87c <disk_read+0x3c>)
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4413      	add	r3, r2
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	689c      	ldr	r4, [r3, #8]
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	4a07      	ldr	r2, [pc, #28]	; (800e87c <disk_read+0x3c>)
 800e860:	4413      	add	r3, r2
 800e862:	7a18      	ldrb	r0, [r3, #8]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	68b9      	ldr	r1, [r7, #8]
 800e86a:	47a0      	blx	r4
 800e86c:	4603      	mov	r3, r0
 800e86e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e870:	7dfb      	ldrb	r3, [r7, #23]
}
 800e872:	4618      	mov	r0, r3
 800e874:	371c      	adds	r7, #28
 800e876:	46bd      	mov	sp, r7
 800e878:	bd90      	pop	{r4, r7, pc}
 800e87a:	bf00      	nop
 800e87c:	2003745c 	.word	0x2003745c

0800e880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e880:	b590      	push	{r4, r7, lr}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	60b9      	str	r1, [r7, #8]
 800e888:	607a      	str	r2, [r7, #4]
 800e88a:	603b      	str	r3, [r7, #0]
 800e88c:	4603      	mov	r3, r0
 800e88e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	4a0a      	ldr	r2, [pc, #40]	; (800e8bc <disk_write+0x3c>)
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4413      	add	r3, r2
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	68dc      	ldr	r4, [r3, #12]
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	4a07      	ldr	r2, [pc, #28]	; (800e8bc <disk_write+0x3c>)
 800e8a0:	4413      	add	r3, r2
 800e8a2:	7a18      	ldrb	r0, [r3, #8]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	47a0      	blx	r4
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd90      	pop	{r4, r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	2003745c 	.word	0x2003745c

0800e8c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	603a      	str	r2, [r7, #0]
 800e8ca:	71fb      	strb	r3, [r7, #7]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e8d0:	79fb      	ldrb	r3, [r7, #7]
 800e8d2:	4a09      	ldr	r2, [pc, #36]	; (800e8f8 <disk_ioctl+0x38>)
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	79fa      	ldrb	r2, [r7, #7]
 800e8de:	4906      	ldr	r1, [pc, #24]	; (800e8f8 <disk_ioctl+0x38>)
 800e8e0:	440a      	add	r2, r1
 800e8e2:	7a10      	ldrb	r0, [r2, #8]
 800e8e4:	79b9      	ldrb	r1, [r7, #6]
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	4798      	blx	r3
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800e8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	2003745c 	.word	0x2003745c

0800e8fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3301      	adds	r3, #1
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e90c:	89fb      	ldrh	r3, [r7, #14]
 800e90e:	021b      	lsls	r3, r3, #8
 800e910:	b21a      	sxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	b21b      	sxth	r3, r3
 800e918:	4313      	orrs	r3, r2
 800e91a:	b21b      	sxth	r3, r3
 800e91c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e91e:	89fb      	ldrh	r3, [r7, #14]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3303      	adds	r3, #3
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	021b      	lsls	r3, r3, #8
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	3202      	adds	r2, #2
 800e944:	7812      	ldrb	r2, [r2, #0]
 800e946:	4313      	orrs	r3, r2
 800e948:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	021b      	lsls	r3, r3, #8
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	3201      	adds	r2, #1
 800e952:	7812      	ldrb	r2, [r2, #0]
 800e954:	4313      	orrs	r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	021b      	lsls	r3, r3, #8
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	7812      	ldrb	r2, [r2, #0]
 800e960:	4313      	orrs	r3, r2
 800e962:	60fb      	str	r3, [r7, #12]
	return rv;
 800e964:	68fb      	ldr	r3, [r7, #12]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e972:	b480      	push	{r7}
 800e974:	b083      	sub	sp, #12
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	460b      	mov	r3, r1
 800e97c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	887a      	ldrh	r2, [r7, #2]
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	887b      	ldrh	r3, [r7, #2]
 800e98c:	0a1b      	lsrs	r3, r3, #8
 800e98e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	887a      	ldrh	r2, [r7, #2]
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	1c5a      	adds	r2, r3, #1
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	b2d2      	uxtb	r2, r2
 800e9bc:	701a      	strb	r2, [r3, #0]
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	0a1b      	lsrs	r3, r3, #8
 800e9c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	607a      	str	r2, [r7, #4]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	b2d2      	uxtb	r2, r2
 800e9ce:	701a      	strb	r2, [r3, #0]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	0a1b      	lsrs	r3, r3, #8
 800e9d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	1c5a      	adds	r2, r3, #1
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	b2d2      	uxtb	r2, r2
 800e9e0:	701a      	strb	r2, [r3, #0]
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	0a1b      	lsrs	r3, r3, #8
 800e9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	607a      	str	r2, [r7, #4]
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	b2d2      	uxtb	r2, r2
 800e9f2:	701a      	strb	r2, [r3, #0]
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00d      	beq.n	800ea36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	1c53      	adds	r3, r2, #1
 800ea1e:	613b      	str	r3, [r7, #16]
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	1c59      	adds	r1, r3, #1
 800ea24:	6179      	str	r1, [r7, #20]
 800ea26:	7812      	ldrb	r2, [r2, #0]
 800ea28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	607b      	str	r3, [r7, #4]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1f1      	bne.n	800ea1a <mem_cpy+0x1a>
	}
}
 800ea36:	bf00      	nop
 800ea38:	371c      	adds	r7, #28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ea42:	b480      	push	{r7}
 800ea44:	b087      	sub	sp, #28
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	60f8      	str	r0, [r7, #12]
 800ea4a:	60b9      	str	r1, [r7, #8]
 800ea4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	617a      	str	r2, [r7, #20]
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	b2d2      	uxtb	r2, r2
 800ea5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	607b      	str	r3, [r7, #4]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1f3      	bne.n	800ea52 <mem_set+0x10>
}
 800ea6a:	bf00      	nop
 800ea6c:	371c      	adds	r7, #28
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ea76:	b480      	push	{r7}
 800ea78:	b089      	sub	sp, #36	; 0x24
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	60f8      	str	r0, [r7, #12]
 800ea7e:	60b9      	str	r1, [r7, #8]
 800ea80:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	61fb      	str	r3, [r7, #28]
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	1c5a      	adds	r2, r3, #1
 800ea92:	61fa      	str	r2, [r7, #28]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	4619      	mov	r1, r3
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	61ba      	str	r2, [r7, #24]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	1acb      	subs	r3, r1, r3
 800eaa2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d002      	beq.n	800eab6 <mem_cmp+0x40>
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0eb      	beq.n	800ea8e <mem_cmp+0x18>

	return r;
 800eab6:	697b      	ldr	r3, [r7, #20]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3724      	adds	r7, #36	; 0x24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eace:	e002      	b.n	800ead6 <chk_chr+0x12>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3301      	adds	r3, #1
 800ead4:	607b      	str	r3, [r7, #4]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d005      	beq.n	800eaea <chk_chr+0x26>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d1f2      	bne.n	800ead0 <chk_chr+0xc>
	return *str;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	781b      	ldrb	r3, [r3, #0]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	370c      	adds	r7, #12
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
	...

0800eafc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb06:	2300      	movs	r3, #0
 800eb08:	60bb      	str	r3, [r7, #8]
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	e029      	b.n	800eb64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eb10:	4a27      	ldr	r2, [pc, #156]	; (800ebb0 <chk_lock+0xb4>)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	011b      	lsls	r3, r3, #4
 800eb16:	4413      	add	r3, r2
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d01d      	beq.n	800eb5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb1e:	4a24      	ldr	r2, [pc, #144]	; (800ebb0 <chk_lock+0xb4>)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	011b      	lsls	r3, r3, #4
 800eb24:	4413      	add	r3, r2
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d116      	bne.n	800eb5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eb30:	4a1f      	ldr	r2, [pc, #124]	; (800ebb0 <chk_lock+0xb4>)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	4413      	add	r3, r2
 800eb38:	3304      	adds	r3, #4
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d10c      	bne.n	800eb5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb44:	4a1a      	ldr	r2, [pc, #104]	; (800ebb0 <chk_lock+0xb4>)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	011b      	lsls	r3, r3, #4
 800eb4a:	4413      	add	r3, r2
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d102      	bne.n	800eb5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb58:	e007      	b.n	800eb6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3301      	adds	r3, #1
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d9d2      	bls.n	800eb10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d109      	bne.n	800eb84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d102      	bne.n	800eb7c <chk_lock+0x80>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d101      	bne.n	800eb80 <chk_lock+0x84>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	e010      	b.n	800eba2 <chk_lock+0xa6>
 800eb80:	2312      	movs	r3, #18
 800eb82:	e00e      	b.n	800eba2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d108      	bne.n	800eb9c <chk_lock+0xa0>
 800eb8a:	4a09      	ldr	r2, [pc, #36]	; (800ebb0 <chk_lock+0xb4>)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	011b      	lsls	r3, r3, #4
 800eb90:	4413      	add	r3, r2
 800eb92:	330c      	adds	r3, #12
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb9a:	d101      	bne.n	800eba0 <chk_lock+0xa4>
 800eb9c:	2310      	movs	r3, #16
 800eb9e:	e000      	b.n	800eba2 <chk_lock+0xa6>
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	2003743c 	.word	0x2003743c

0800ebb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	607b      	str	r3, [r7, #4]
 800ebbe:	e002      	b.n	800ebc6 <enq_lock+0x12>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d806      	bhi.n	800ebda <enq_lock+0x26>
 800ebcc:	4a09      	ldr	r2, [pc, #36]	; (800ebf4 <enq_lock+0x40>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	011b      	lsls	r3, r3, #4
 800ebd2:	4413      	add	r3, r2
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1f2      	bne.n	800ebc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	bf14      	ite	ne
 800ebe0:	2301      	movne	r3, #1
 800ebe2:	2300      	moveq	r3, #0
 800ebe4:	b2db      	uxtb	r3, r3
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	2003743c 	.word	0x2003743c

0800ebf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e01f      	b.n	800ec48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ec08:	4a41      	ldr	r2, [pc, #260]	; (800ed10 <inc_lock+0x118>)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	011b      	lsls	r3, r3, #4
 800ec0e:	4413      	add	r3, r2
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d113      	bne.n	800ec42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ec1a:	4a3d      	ldr	r2, [pc, #244]	; (800ed10 <inc_lock+0x118>)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	011b      	lsls	r3, r3, #4
 800ec20:	4413      	add	r3, r2
 800ec22:	3304      	adds	r3, #4
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d109      	bne.n	800ec42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ec2e:	4a38      	ldr	r2, [pc, #224]	; (800ed10 <inc_lock+0x118>)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	011b      	lsls	r3, r3, #4
 800ec34:	4413      	add	r3, r2
 800ec36:	3308      	adds	r3, #8
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d006      	beq.n	800ec50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d9dc      	bls.n	800ec08 <inc_lock+0x10>
 800ec4e:	e000      	b.n	800ec52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ec50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d132      	bne.n	800ecbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e002      	b.n	800ec64 <inc_lock+0x6c>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3301      	adds	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d806      	bhi.n	800ec78 <inc_lock+0x80>
 800ec6a:	4a29      	ldr	r2, [pc, #164]	; (800ed10 <inc_lock+0x118>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	011b      	lsls	r3, r3, #4
 800ec70:	4413      	add	r3, r2
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1f2      	bne.n	800ec5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b02      	cmp	r3, #2
 800ec7c:	d101      	bne.n	800ec82 <inc_lock+0x8a>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e040      	b.n	800ed04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	4922      	ldr	r1, [pc, #136]	; (800ed10 <inc_lock+0x118>)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	440b      	add	r3, r1
 800ec8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	689a      	ldr	r2, [r3, #8]
 800ec94:	491e      	ldr	r1, [pc, #120]	; (800ed10 <inc_lock+0x118>)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	011b      	lsls	r3, r3, #4
 800ec9a:	440b      	add	r3, r1
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	695a      	ldr	r2, [r3, #20]
 800eca4:	491a      	ldr	r1, [pc, #104]	; (800ed10 <inc_lock+0x118>)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	011b      	lsls	r3, r3, #4
 800ecaa:	440b      	add	r3, r1
 800ecac:	3308      	adds	r3, #8
 800ecae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ecb0:	4a17      	ldr	r2, [pc, #92]	; (800ed10 <inc_lock+0x118>)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	011b      	lsls	r3, r3, #4
 800ecb6:	4413      	add	r3, r2
 800ecb8:	330c      	adds	r3, #12
 800ecba:	2200      	movs	r2, #0
 800ecbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d009      	beq.n	800ecd8 <inc_lock+0xe0>
 800ecc4:	4a12      	ldr	r2, [pc, #72]	; (800ed10 <inc_lock+0x118>)
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	011b      	lsls	r3, r3, #4
 800ecca:	4413      	add	r3, r2
 800eccc:	330c      	adds	r3, #12
 800ecce:	881b      	ldrh	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <inc_lock+0xe0>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e015      	b.n	800ed04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d108      	bne.n	800ecf0 <inc_lock+0xf8>
 800ecde:	4a0c      	ldr	r2, [pc, #48]	; (800ed10 <inc_lock+0x118>)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	4413      	add	r3, r2
 800ece6:	330c      	adds	r3, #12
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	3301      	adds	r3, #1
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	e001      	b.n	800ecf4 <inc_lock+0xfc>
 800ecf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecf4:	4906      	ldr	r1, [pc, #24]	; (800ed10 <inc_lock+0x118>)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	011b      	lsls	r3, r3, #4
 800ecfa:	440b      	add	r3, r1
 800ecfc:	330c      	adds	r3, #12
 800ecfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3301      	adds	r3, #1
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3714      	adds	r7, #20
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	2003743c 	.word	0x2003743c

0800ed14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	607b      	str	r3, [r7, #4]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d825      	bhi.n	800ed74 <dec_lock+0x60>
		n = Files[i].ctr;
 800ed28:	4a17      	ldr	r2, [pc, #92]	; (800ed88 <dec_lock+0x74>)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	4413      	add	r3, r2
 800ed30:	330c      	adds	r3, #12
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ed36:	89fb      	ldrh	r3, [r7, #14]
 800ed38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed3c:	d101      	bne.n	800ed42 <dec_lock+0x2e>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ed42:	89fb      	ldrh	r3, [r7, #14]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <dec_lock+0x3a>
 800ed48:	89fb      	ldrh	r3, [r7, #14]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ed4e:	4a0e      	ldr	r2, [pc, #56]	; (800ed88 <dec_lock+0x74>)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	4413      	add	r3, r2
 800ed56:	330c      	adds	r3, #12
 800ed58:	89fa      	ldrh	r2, [r7, #14]
 800ed5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed5c:	89fb      	ldrh	r3, [r7, #14]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d105      	bne.n	800ed6e <dec_lock+0x5a>
 800ed62:	4a09      	ldr	r2, [pc, #36]	; (800ed88 <dec_lock+0x74>)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	011b      	lsls	r3, r3, #4
 800ed68:	4413      	add	r3, r2
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	737b      	strb	r3, [r7, #13]
 800ed72:	e001      	b.n	800ed78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed74:	2302      	movs	r3, #2
 800ed76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ed78:	7b7b      	ldrb	r3, [r7, #13]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3714      	adds	r7, #20
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	2003743c 	.word	0x2003743c

0800ed8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed94:	2300      	movs	r3, #0
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	e010      	b.n	800edbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed9a:	4a0d      	ldr	r2, [pc, #52]	; (800edd0 <clear_lock+0x44>)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	011b      	lsls	r3, r3, #4
 800eda0:	4413      	add	r3, r2
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d105      	bne.n	800edb6 <clear_lock+0x2a>
 800edaa:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <clear_lock+0x44>)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	011b      	lsls	r3, r3, #4
 800edb0:	4413      	add	r3, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d9eb      	bls.n	800ed9a <clear_lock+0xe>
	}
}
 800edc2:	bf00      	nop
 800edc4:	3714      	adds	r7, #20
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	2003743c 	.word	0x2003743c

0800edd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eddc:	2300      	movs	r3, #0
 800edde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	78db      	ldrb	r3, [r3, #3]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d034      	beq.n	800ee52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	7858      	ldrb	r0, [r3, #1]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800edf8:	2301      	movs	r3, #1
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	f7ff fd40 	bl	800e880 <disk_write>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	73fb      	strb	r3, [r7, #15]
 800ee0a:	e022      	b.n	800ee52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee16:	697a      	ldr	r2, [r7, #20]
 800ee18:	1ad2      	subs	r2, r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d217      	bcs.n	800ee52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	789b      	ldrb	r3, [r3, #2]
 800ee26:	613b      	str	r3, [r7, #16]
 800ee28:	e010      	b.n	800ee4c <sync_window+0x78>
					wsect += fs->fsize;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	4413      	add	r3, r2
 800ee32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	7858      	ldrb	r0, [r3, #1]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee3e:	2301      	movs	r3, #1
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	f7ff fd1d 	bl	800e880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	613b      	str	r3, [r7, #16]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d8eb      	bhi.n	800ee2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d01b      	beq.n	800eeac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f7ff ffad 	bl	800edd4 <sync_window>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d113      	bne.n	800eeac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7858      	ldrb	r0, [r3, #1]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee8e:	2301      	movs	r3, #1
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	f7ff fcd5 	bl	800e840 <disk_read>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d004      	beq.n	800eea6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eea0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff ff87 	bl	800edd4 <sync_window>
 800eec6:	4603      	mov	r3, r0
 800eec8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d159      	bne.n	800ef84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d149      	bne.n	800ef6c <sync_fs+0xb4>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	791b      	ldrb	r3, [r3, #4]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d145      	bne.n	800ef6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	461a      	mov	r2, r3
 800eeec:	2100      	movs	r1, #0
 800eeee:	f7ff fda8 	bl	800ea42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	3338      	adds	r3, #56	; 0x38
 800eef6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eefa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7ff fd37 	bl	800e972 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	3338      	adds	r3, #56	; 0x38
 800ef08:	4921      	ldr	r1, [pc, #132]	; (800ef90 <sync_fs+0xd8>)
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7ff fd4c 	bl	800e9a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3338      	adds	r3, #56	; 0x38
 800ef14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef18:	491e      	ldr	r1, [pc, #120]	; (800ef94 <sync_fs+0xdc>)
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff fd44 	bl	800e9a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	3338      	adds	r3, #56	; 0x38
 800ef24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	695b      	ldr	r3, [r3, #20]
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4610      	mov	r0, r2
 800ef30:	f7ff fd3a 	bl	800e9a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3338      	adds	r3, #56	; 0x38
 800ef38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	4619      	mov	r1, r3
 800ef42:	4610      	mov	r0, r2
 800ef44:	f7ff fd30 	bl	800e9a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4c:	1c5a      	adds	r2, r3, #1
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	7858      	ldrb	r0, [r3, #1]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef60:	2301      	movs	r3, #1
 800ef62:	f7ff fc8d 	bl	800e880 <disk_write>
			fs->fsi_flag = 0;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	785b      	ldrb	r3, [r3, #1]
 800ef70:	2200      	movs	r2, #0
 800ef72:	2100      	movs	r1, #0
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff fca3 	bl	800e8c0 <disk_ioctl>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d001      	beq.n	800ef84 <sync_fs+0xcc>
 800ef80:	2301      	movs	r3, #1
 800ef82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	41615252 	.word	0x41615252
 800ef94:	61417272 	.word	0x61417272

0800ef98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	3b02      	subs	r3, #2
 800efa6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	3b02      	subs	r3, #2
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d301      	bcc.n	800efb8 <clust2sect+0x20>
 800efb4:	2300      	movs	r3, #0
 800efb6:	e008      	b.n	800efca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	895b      	ldrh	r3, [r3, #10]
 800efbc:	461a      	mov	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	fb03 f202 	mul.w	r2, r3, r2
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc8:	4413      	add	r3, r2
}
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b086      	sub	sp, #24
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d904      	bls.n	800eff6 <get_fat+0x20>
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d302      	bcc.n	800effc <get_fat+0x26>
		val = 1;	/* Internal error */
 800eff6:	2301      	movs	r3, #1
 800eff8:	617b      	str	r3, [r7, #20]
 800effa:	e0b7      	b.n	800f16c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800effc:	f04f 33ff 	mov.w	r3, #4294967295
 800f000:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	2b02      	cmp	r3, #2
 800f008:	d05a      	beq.n	800f0c0 <get_fat+0xea>
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d07d      	beq.n	800f10a <get_fat+0x134>
 800f00e:	2b01      	cmp	r3, #1
 800f010:	f040 80a2 	bne.w	800f158 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	085b      	lsrs	r3, r3, #1
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4413      	add	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	899b      	ldrh	r3, [r3, #12]
 800f02a:	4619      	mov	r1, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f032:	4413      	add	r3, r2
 800f034:	4619      	mov	r1, r3
 800f036:	6938      	ldr	r0, [r7, #16]
 800f038:	f7ff ff10 	bl	800ee5c <move_window>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f040 808d 	bne.w	800f15e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	60fa      	str	r2, [r7, #12]
 800f04a:	693a      	ldr	r2, [r7, #16]
 800f04c:	8992      	ldrh	r2, [r2, #12]
 800f04e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f052:	fb02 f201 	mul.w	r2, r2, r1
 800f056:	1a9b      	subs	r3, r3, r2
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	4413      	add	r3, r2
 800f05c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f060:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	899b      	ldrh	r3, [r3, #12]
 800f06a:	4619      	mov	r1, r3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f072:	4413      	add	r3, r2
 800f074:	4619      	mov	r1, r3
 800f076:	6938      	ldr	r0, [r7, #16]
 800f078:	f7ff fef0 	bl	800ee5c <move_window>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d16f      	bne.n	800f162 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	899b      	ldrh	r3, [r3, #12]
 800f086:	461a      	mov	r2, r3
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f08e:	fb02 f201 	mul.w	r2, r2, r1
 800f092:	1a9b      	subs	r3, r3, r2
 800f094:	693a      	ldr	r2, [r7, #16]
 800f096:	4413      	add	r3, r2
 800f098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f09c:	021b      	lsls	r3, r3, #8
 800f09e:	461a      	mov	r2, r3
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	f003 0301 	and.w	r3, r3, #1
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <get_fat+0xe0>
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	091b      	lsrs	r3, r3, #4
 800f0b4:	e002      	b.n	800f0bc <get_fat+0xe6>
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f0bc:	617b      	str	r3, [r7, #20]
			break;
 800f0be:	e055      	b.n	800f16c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	899b      	ldrh	r3, [r3, #12]
 800f0c8:	085b      	lsrs	r3, r3, #1
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0d4:	4413      	add	r3, r2
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6938      	ldr	r0, [r7, #16]
 800f0da:	f7ff febf 	bl	800ee5c <move_window>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d140      	bne.n	800f166 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	8992      	ldrh	r2, [r2, #12]
 800f0f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0f6:	fb02 f200 	mul.w	r2, r2, r0
 800f0fa:	1a9b      	subs	r3, r3, r2
 800f0fc:	440b      	add	r3, r1
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fbfc 	bl	800e8fc <ld_word>
 800f104:	4603      	mov	r3, r0
 800f106:	617b      	str	r3, [r7, #20]
			break;
 800f108:	e030      	b.n	800f16c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	899b      	ldrh	r3, [r3, #12]
 800f112:	089b      	lsrs	r3, r3, #2
 800f114:	b29b      	uxth	r3, r3
 800f116:	4619      	mov	r1, r3
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f11e:	4413      	add	r3, r2
 800f120:	4619      	mov	r1, r3
 800f122:	6938      	ldr	r0, [r7, #16]
 800f124:	f7ff fe9a 	bl	800ee5c <move_window>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d11d      	bne.n	800f16a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	693a      	ldr	r2, [r7, #16]
 800f13a:	8992      	ldrh	r2, [r2, #12]
 800f13c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f140:	fb02 f200 	mul.w	r2, r2, r0
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	440b      	add	r3, r1
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fbef 	bl	800e92c <ld_dword>
 800f14e:	4603      	mov	r3, r0
 800f150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f154:	617b      	str	r3, [r7, #20]
			break;
 800f156:	e009      	b.n	800f16c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f158:	2301      	movs	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	e006      	b.n	800f16c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f15e:	bf00      	nop
 800f160:	e004      	b.n	800f16c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f162:	bf00      	nop
 800f164:	e002      	b.n	800f16c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f166:	bf00      	nop
 800f168:	e000      	b.n	800f16c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f16a:	bf00      	nop
		}
	}

	return val;
 800f16c:	697b      	ldr	r3, [r7, #20]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3718      	adds	r7, #24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f176:	b590      	push	{r4, r7, lr}
 800f178:	b089      	sub	sp, #36	; 0x24
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	60f8      	str	r0, [r7, #12]
 800f17e:	60b9      	str	r1, [r7, #8]
 800f180:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f182:	2302      	movs	r3, #2
 800f184:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	f240 8106 	bls.w	800f39a <put_fat+0x224>
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	429a      	cmp	r2, r3
 800f196:	f080 8100 	bcs.w	800f39a <put_fat+0x224>
		switch (fs->fs_type) {
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	f000 8088 	beq.w	800f2b4 <put_fat+0x13e>
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	f000 80b0 	beq.w	800f30a <put_fat+0x194>
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	f040 80f5 	bne.w	800f39a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	61bb      	str	r3, [r7, #24]
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	085b      	lsrs	r3, r3, #1
 800f1b8:	69ba      	ldr	r2, [r7, #24]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	899b      	ldrh	r3, [r3, #12]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1ce:	4413      	add	r3, r2
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7ff fe42 	bl	800ee5c <move_window>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1dc:	7ffb      	ldrb	r3, [r7, #31]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f040 80d4 	bne.w	800f38c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	61ba      	str	r2, [r7, #24]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	8992      	ldrh	r2, [r2, #12]
 800f1f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1f8:	fb02 f200 	mul.w	r2, r2, r0
 800f1fc:	1a9b      	subs	r3, r3, r2
 800f1fe:	440b      	add	r3, r1
 800f200:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00d      	beq.n	800f228 <put_fat+0xb2>
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	b25b      	sxtb	r3, r3
 800f212:	f003 030f 	and.w	r3, r3, #15
 800f216:	b25a      	sxtb	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	011b      	lsls	r3, r3, #4
 800f21e:	b25b      	sxtb	r3, r3
 800f220:	4313      	orrs	r3, r2
 800f222:	b25b      	sxtb	r3, r3
 800f224:	b2db      	uxtb	r3, r3
 800f226:	e001      	b.n	800f22c <put_fat+0xb6>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2201      	movs	r2, #1
 800f234:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	899b      	ldrh	r3, [r3, #12]
 800f23e:	4619      	mov	r1, r3
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	fbb3 f3f1 	udiv	r3, r3, r1
 800f246:	4413      	add	r3, r2
 800f248:	4619      	mov	r1, r3
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fe06 	bl	800ee5c <move_window>
 800f250:	4603      	mov	r3, r0
 800f252:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f254:	7ffb      	ldrb	r3, [r7, #31]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f040 809a 	bne.w	800f390 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	899b      	ldrh	r3, [r3, #12]
 800f266:	461a      	mov	r2, r3
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f26e:	fb02 f200 	mul.w	r2, r2, r0
 800f272:	1a9b      	subs	r3, r3, r2
 800f274:	440b      	add	r3, r1
 800f276:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <put_fat+0x114>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	091b      	lsrs	r3, r3, #4
 800f286:	b2db      	uxtb	r3, r3
 800f288:	e00e      	b.n	800f2a8 <put_fat+0x132>
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	f023 030f 	bic.w	r3, r3, #15
 800f294:	b25a      	sxtb	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	b25b      	sxtb	r3, r3
 800f29c:	f003 030f 	and.w	r3, r3, #15
 800f2a0:	b25b      	sxtb	r3, r3
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	b25b      	sxtb	r3, r3
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	70da      	strb	r2, [r3, #3]
			break;
 800f2b2:	e072      	b.n	800f39a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	899b      	ldrh	r3, [r3, #12]
 800f2bc:	085b      	lsrs	r3, r3, #1
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2c8:	4413      	add	r3, r2
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7ff fdc5 	bl	800ee5c <move_window>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2d6:	7ffb      	ldrb	r3, [r7, #31]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d15b      	bne.n	800f394 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	8992      	ldrh	r2, [r2, #12]
 800f2ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2ee:	fb02 f200 	mul.w	r2, r2, r0
 800f2f2:	1a9b      	subs	r3, r3, r2
 800f2f4:	440b      	add	r3, r1
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	b292      	uxth	r2, r2
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff fb38 	bl	800e972 <st_word>
			fs->wflag = 1;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2201      	movs	r2, #1
 800f306:	70da      	strb	r2, [r3, #3]
			break;
 800f308:	e047      	b.n	800f39a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	089b      	lsrs	r3, r3, #2
 800f314:	b29b      	uxth	r3, r3
 800f316:	4619      	mov	r1, r3
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f31e:	4413      	add	r3, r2
 800f320:	4619      	mov	r1, r3
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7ff fd9a 	bl	800ee5c <move_window>
 800f328:	4603      	mov	r3, r0
 800f32a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f32c:	7ffb      	ldrb	r3, [r7, #31]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d132      	bne.n	800f398 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	8992      	ldrh	r2, [r2, #12]
 800f346:	fbb3 f0f2 	udiv	r0, r3, r2
 800f34a:	fb02 f200 	mul.w	r2, r2, r0
 800f34e:	1a9b      	subs	r3, r3, r2
 800f350:	440b      	add	r3, r1
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff faea 	bl	800e92c <ld_dword>
 800f358:	4603      	mov	r3, r0
 800f35a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f35e:	4323      	orrs	r3, r4
 800f360:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	8992      	ldrh	r2, [r2, #12]
 800f370:	fbb3 f0f2 	udiv	r0, r3, r2
 800f374:	fb02 f200 	mul.w	r2, r2, r0
 800f378:	1a9b      	subs	r3, r3, r2
 800f37a:	440b      	add	r3, r1
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fb12 	bl	800e9a8 <st_dword>
			fs->wflag = 1;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2201      	movs	r2, #1
 800f388:	70da      	strb	r2, [r3, #3]
			break;
 800f38a:	e006      	b.n	800f39a <put_fat+0x224>
			if (res != FR_OK) break;
 800f38c:	bf00      	nop
 800f38e:	e004      	b.n	800f39a <put_fat+0x224>
			if (res != FR_OK) break;
 800f390:	bf00      	nop
 800f392:	e002      	b.n	800f39a <put_fat+0x224>
			if (res != FR_OK) break;
 800f394:	bf00      	nop
 800f396:	e000      	b.n	800f39a <put_fat+0x224>
			if (res != FR_OK) break;
 800f398:	bf00      	nop
		}
	}
	return res;
 800f39a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3724      	adds	r7, #36	; 0x24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd90      	pop	{r4, r7, pc}

0800f3a4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b088      	sub	sp, #32
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d904      	bls.n	800f3ca <remove_chain+0x26>
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	69db      	ldr	r3, [r3, #28]
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d301      	bcc.n	800f3ce <remove_chain+0x2a>
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	e04b      	b.n	800f466 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00c      	beq.n	800f3ee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d8:	6879      	ldr	r1, [r7, #4]
 800f3da:	69b8      	ldr	r0, [r7, #24]
 800f3dc:	f7ff fecb 	bl	800f176 <put_fat>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f3e4:	7ffb      	ldrb	r3, [r7, #31]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <remove_chain+0x4a>
 800f3ea:	7ffb      	ldrb	r3, [r7, #31]
 800f3ec:	e03b      	b.n	800f466 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff fdf0 	bl	800efd6 <get_fat>
 800f3f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d031      	beq.n	800f462 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d101      	bne.n	800f408 <remove_chain+0x64>
 800f404:	2302      	movs	r3, #2
 800f406:	e02e      	b.n	800f466 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40e:	d101      	bne.n	800f414 <remove_chain+0x70>
 800f410:	2301      	movs	r3, #1
 800f412:	e028      	b.n	800f466 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f414:	2200      	movs	r2, #0
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	69b8      	ldr	r0, [r7, #24]
 800f41a:	f7ff feac 	bl	800f176 <put_fat>
 800f41e:	4603      	mov	r3, r0
 800f420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f422:	7ffb      	ldrb	r3, [r7, #31]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <remove_chain+0x88>
 800f428:	7ffb      	ldrb	r3, [r7, #31]
 800f42a:	e01c      	b.n	800f466 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	695a      	ldr	r2, [r3, #20]
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	3b02      	subs	r3, #2
 800f436:	429a      	cmp	r2, r3
 800f438:	d20b      	bcs.n	800f452 <remove_chain+0xae>
			fs->free_clst++;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	695b      	ldr	r3, [r3, #20]
 800f43e:	1c5a      	adds	r2, r3, #1
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	791b      	ldrb	r3, [r3, #4]
 800f448:	f043 0301 	orr.w	r3, r3, #1
 800f44c:	b2da      	uxtb	r2, r3
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d3c6      	bcc.n	800f3ee <remove_chain+0x4a>
 800f460:	e000      	b.n	800f464 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f462:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3720      	adds	r7, #32
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b088      	sub	sp, #32
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d10d      	bne.n	800f4a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d004      	beq.n	800f49a <create_chain+0x2c>
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	69db      	ldr	r3, [r3, #28]
 800f494:	69ba      	ldr	r2, [r7, #24]
 800f496:	429a      	cmp	r2, r3
 800f498:	d31b      	bcc.n	800f4d2 <create_chain+0x64>
 800f49a:	2301      	movs	r3, #1
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	e018      	b.n	800f4d2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7ff fd97 	bl	800efd6 <get_fat>
 800f4a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d801      	bhi.n	800f4b4 <create_chain+0x46>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e070      	b.n	800f596 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ba:	d101      	bne.n	800f4c0 <create_chain+0x52>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	e06a      	b.n	800f596 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	69db      	ldr	r3, [r3, #28]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d201      	bcs.n	800f4ce <create_chain+0x60>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	e063      	b.n	800f596 <create_chain+0x128>
		scl = clst;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	69db      	ldr	r3, [r3, #28]
 800f4e0:	69fa      	ldr	r2, [r7, #28]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d307      	bcc.n	800f4f6 <create_chain+0x88>
				ncl = 2;
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f4ea:	69fa      	ldr	r2, [r7, #28]
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d901      	bls.n	800f4f6 <create_chain+0x88>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e04f      	b.n	800f596 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f4f6:	69f9      	ldr	r1, [r7, #28]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fd6c 	bl	800efd6 <get_fat>
 800f4fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00e      	beq.n	800f524 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d003      	beq.n	800f514 <create_chain+0xa6>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f512:	d101      	bne.n	800f518 <create_chain+0xaa>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	e03e      	b.n	800f596 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f518:	69fa      	ldr	r2, [r7, #28]
 800f51a:	69bb      	ldr	r3, [r7, #24]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d1da      	bne.n	800f4d6 <create_chain+0x68>
 800f520:	2300      	movs	r3, #0
 800f522:	e038      	b.n	800f596 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f524:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f526:	f04f 32ff 	mov.w	r2, #4294967295
 800f52a:	69f9      	ldr	r1, [r7, #28]
 800f52c:	6938      	ldr	r0, [r7, #16]
 800f52e:	f7ff fe22 	bl	800f176 <put_fat>
 800f532:	4603      	mov	r3, r0
 800f534:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f536:	7dfb      	ldrb	r3, [r7, #23]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d109      	bne.n	800f550 <create_chain+0xe2>
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d006      	beq.n	800f550 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	6839      	ldr	r1, [r7, #0]
 800f546:	6938      	ldr	r0, [r7, #16]
 800f548:	f7ff fe15 	bl	800f176 <put_fat>
 800f54c:	4603      	mov	r3, r0
 800f54e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f550:	7dfb      	ldrb	r3, [r7, #23]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d116      	bne.n	800f584 <create_chain+0x116>
		fs->last_clst = ncl;
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	69fa      	ldr	r2, [r7, #28]
 800f55a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	695a      	ldr	r2, [r3, #20]
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	3b02      	subs	r3, #2
 800f566:	429a      	cmp	r2, r3
 800f568:	d804      	bhi.n	800f574 <create_chain+0x106>
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	1e5a      	subs	r2, r3, #1
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	791b      	ldrb	r3, [r3, #4]
 800f578:	f043 0301 	orr.w	r3, r3, #1
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	711a      	strb	r2, [r3, #4]
 800f582:	e007      	b.n	800f594 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b01      	cmp	r3, #1
 800f588:	d102      	bne.n	800f590 <create_chain+0x122>
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295
 800f58e:	e000      	b.n	800f592 <create_chain+0x124>
 800f590:	2301      	movs	r3, #1
 800f592:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f594:	69fb      	ldr	r3, [r7, #28]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3720      	adds	r7, #32
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f59e:	b480      	push	{r7}
 800f5a0:	b087      	sub	sp, #28
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	8952      	ldrh	r2, [r2, #10]
 800f5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	1d1a      	adds	r2, r3, #4
 800f5d0:	613a      	str	r2, [r7, #16]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <clmt_clust+0x42>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e010      	b.n	800f602 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d307      	bcc.n	800f5f8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5f6:	e7e9      	b.n	800f5cc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f5f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	4413      	add	r3, r2
}
 800f602:	4618      	mov	r0, r3
 800f604:	371c      	adds	r7, #28
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b086      	sub	sp, #24
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f624:	d204      	bcs.n	800f630 <dir_sdi+0x22>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	f003 031f 	and.w	r3, r3, #31
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f630:	2302      	movs	r3, #2
 800f632:	e071      	b.n	800f718 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d106      	bne.n	800f654 <dir_sdi+0x46>
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	d902      	bls.n	800f654 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f652:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10c      	bne.n	800f674 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	095b      	lsrs	r3, r3, #5
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	8912      	ldrh	r2, [r2, #8]
 800f662:	4293      	cmp	r3, r2
 800f664:	d301      	bcc.n	800f66a <dir_sdi+0x5c>
 800f666:	2302      	movs	r3, #2
 800f668:	e056      	b.n	800f718 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	61da      	str	r2, [r3, #28]
 800f672:	e02d      	b.n	800f6d0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	895b      	ldrh	r3, [r3, #10]
 800f678:	461a      	mov	r2, r3
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	fb03 f302 	mul.w	r3, r3, r2
 800f682:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f684:	e019      	b.n	800f6ba <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6979      	ldr	r1, [r7, #20]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7ff fca3 	bl	800efd6 <get_fat>
 800f690:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f698:	d101      	bne.n	800f69e <dir_sdi+0x90>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e03c      	b.n	800f718 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d904      	bls.n	800f6ae <dir_sdi+0xa0>
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d301      	bcc.n	800f6b2 <dir_sdi+0xa4>
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	e032      	b.n	800f718 <dir_sdi+0x10a>
			ofs -= csz;
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	1ad3      	subs	r3, r2, r3
 800f6b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d2e1      	bcs.n	800f686 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f6c2:	6979      	ldr	r1, [r7, #20]
 800f6c4:	6938      	ldr	r0, [r7, #16]
 800f6c6:	f7ff fc67 	bl	800ef98 <clust2sect>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	69db      	ldr	r3, [r3, #28]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d101      	bne.n	800f6e2 <dir_sdi+0xd4>
 800f6de:	2302      	movs	r3, #2
 800f6e0:	e01a      	b.n	800f718 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	69da      	ldr	r2, [r3, #28]
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6f2:	441a      	add	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	461a      	mov	r2, r3
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	fbb3 f0f2 	udiv	r0, r3, r2
 800f70a:	fb02 f200 	mul.w	r2, r2, r0
 800f70e:	1a9b      	subs	r3, r3, r2
 800f710:	18ca      	adds	r2, r1, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3718      	adds	r7, #24
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	695b      	ldr	r3, [r3, #20]
 800f734:	3320      	adds	r3, #32
 800f736:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	69db      	ldr	r3, [r3, #28]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <dir_next+0x28>
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f746:	d301      	bcc.n	800f74c <dir_next+0x2c>
 800f748:	2304      	movs	r3, #4
 800f74a:	e0bb      	b.n	800f8c4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	899b      	ldrh	r3, [r3, #12]
 800f750:	461a      	mov	r2, r3
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	fbb3 f1f2 	udiv	r1, r3, r2
 800f758:	fb02 f201 	mul.w	r2, r2, r1
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f040 809d 	bne.w	800f89e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	1c5a      	adds	r2, r3, #1
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10b      	bne.n	800f78e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	095b      	lsrs	r3, r3, #5
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	8912      	ldrh	r2, [r2, #8]
 800f77e:	4293      	cmp	r3, r2
 800f780:	f0c0 808d 	bcc.w	800f89e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	61da      	str	r2, [r3, #28]
 800f78a:	2304      	movs	r3, #4
 800f78c:	e09a      	b.n	800f8c4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	461a      	mov	r2, r3
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	fbb3 f3f2 	udiv	r3, r3, r2
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	8952      	ldrh	r2, [r2, #10]
 800f79e:	3a01      	subs	r2, #1
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d17b      	bne.n	800f89e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	4610      	mov	r0, r2
 800f7b0:	f7ff fc11 	bl	800efd6 <get_fat>
 800f7b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d801      	bhi.n	800f7c0 <dir_next+0xa0>
 800f7bc:	2302      	movs	r3, #2
 800f7be:	e081      	b.n	800f8c4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c6:	d101      	bne.n	800f7cc <dir_next+0xac>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e07b      	b.n	800f8c4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	69db      	ldr	r3, [r3, #28]
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d359      	bcc.n	800f88a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d104      	bne.n	800f7e6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	61da      	str	r2, [r3, #28]
 800f7e2:	2304      	movs	r3, #4
 800f7e4:	e06e      	b.n	800f8c4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	699b      	ldr	r3, [r3, #24]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	f7ff fe3d 	bl	800f46e <create_chain>
 800f7f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d101      	bne.n	800f800 <dir_next+0xe0>
 800f7fc:	2307      	movs	r3, #7
 800f7fe:	e061      	b.n	800f8c4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d101      	bne.n	800f80a <dir_next+0xea>
 800f806:	2302      	movs	r3, #2
 800f808:	e05c      	b.n	800f8c4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f810:	d101      	bne.n	800f816 <dir_next+0xf6>
 800f812:	2301      	movs	r3, #1
 800f814:	e056      	b.n	800f8c4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff fadc 	bl	800edd4 <sync_window>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <dir_next+0x106>
 800f822:	2301      	movs	r3, #1
 800f824:	e04e      	b.n	800f8c4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	899b      	ldrh	r3, [r3, #12]
 800f830:	461a      	mov	r2, r3
 800f832:	2100      	movs	r1, #0
 800f834:	f7ff f905 	bl	800ea42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f838:	2300      	movs	r3, #0
 800f83a:	613b      	str	r3, [r7, #16]
 800f83c:	6979      	ldr	r1, [r7, #20]
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f7ff fbaa 	bl	800ef98 <clust2sect>
 800f844:	4602      	mov	r2, r0
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	635a      	str	r2, [r3, #52]	; 0x34
 800f84a:	e012      	b.n	800f872 <dir_next+0x152>
						fs->wflag = 1;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2201      	movs	r2, #1
 800f850:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7ff fabe 	bl	800edd4 <sync_window>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <dir_next+0x142>
 800f85e:	2301      	movs	r3, #1
 800f860:	e030      	b.n	800f8c4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	3301      	adds	r3, #1
 800f866:	613b      	str	r3, [r7, #16]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86c:	1c5a      	adds	r2, r3, #1
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	635a      	str	r2, [r3, #52]	; 0x34
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	895b      	ldrh	r3, [r3, #10]
 800f876:	461a      	mov	r2, r3
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d3e6      	bcc.n	800f84c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	1ad2      	subs	r2, r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f890:	6979      	ldr	r1, [r7, #20]
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff fb80 	bl	800ef98 <clust2sect>
 800f898:	4602      	mov	r2, r0
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	899b      	ldrh	r3, [r3, #12]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8b6:	fb02 f200 	mul.w	r2, r2, r0
 800f8ba:	1a9b      	subs	r3, r3, r2
 800f8bc:	18ca      	adds	r2, r1, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3718      	adds	r7, #24
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f8dc:	2100      	movs	r1, #0
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7ff fe95 	bl	800f60e <dir_sdi>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8e8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d12b      	bne.n	800f946 <dir_alloc+0x7a>
		n = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f7ff faaf 	bl	800ee5c <move_window>
 800f8fe:	4603      	mov	r3, r0
 800f900:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f902:	7dfb      	ldrb	r3, [r7, #23]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d11d      	bne.n	800f944 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2be5      	cmp	r3, #229	; 0xe5
 800f910:	d004      	beq.n	800f91c <dir_alloc+0x50>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a1b      	ldr	r3, [r3, #32]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d107      	bne.n	800f92c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	3301      	adds	r3, #1
 800f920:	613b      	str	r3, [r7, #16]
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	429a      	cmp	r2, r3
 800f928:	d102      	bne.n	800f930 <dir_alloc+0x64>
 800f92a:	e00c      	b.n	800f946 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f92c:	2300      	movs	r3, #0
 800f92e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f930:	2101      	movs	r1, #1
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff fef4 	bl	800f720 <dir_next>
 800f938:	4603      	mov	r3, r0
 800f93a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d0d7      	beq.n	800f8f2 <dir_alloc+0x26>
 800f942:	e000      	b.n	800f946 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f944:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	2b04      	cmp	r3, #4
 800f94a:	d101      	bne.n	800f950 <dir_alloc+0x84>
 800f94c:	2307      	movs	r3, #7
 800f94e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f950:	7dfb      	ldrb	r3, [r7, #23]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3718      	adds	r7, #24
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	331a      	adds	r3, #26
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fe ffc7 	bl	800e8fc <ld_word>
 800f96e:	4603      	mov	r3, r0
 800f970:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b03      	cmp	r3, #3
 800f978:	d109      	bne.n	800f98e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	3314      	adds	r3, #20
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe ffbc 	bl	800e8fc <ld_word>
 800f984:	4603      	mov	r3, r0
 800f986:	041b      	lsls	r3, r3, #16
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f98e:	68fb      	ldr	r3, [r7, #12]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	331a      	adds	r3, #26
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	b292      	uxth	r2, r2
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe ffdf 	bl	800e972 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d109      	bne.n	800f9d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	f103 0214 	add.w	r2, r3, #20
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	0c1b      	lsrs	r3, r3, #16
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	f7fe ffd1 	bl	800e972 <st_word>
	}
}
 800f9d0:	bf00      	nop
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f9e2:	2304      	movs	r3, #4
 800f9e4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f9ec:	e03c      	b.n	800fa68 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	69db      	ldr	r3, [r3, #28]
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6938      	ldr	r0, [r7, #16]
 800f9f6:	f7ff fa31 	bl	800ee5c <move_window>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d136      	bne.n	800fa72 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a1b      	ldr	r3, [r3, #32]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fa12:	2304      	movs	r3, #4
 800fa14:	75fb      	strb	r3, [r7, #23]
 800fa16:	e031      	b.n	800fa7c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a1b      	ldr	r3, [r3, #32]
 800fa1c:	330b      	adds	r3, #11
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa24:	73bb      	strb	r3, [r7, #14]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	7bba      	ldrb	r2, [r7, #14]
 800fa2a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	2be5      	cmp	r3, #229	; 0xe5
 800fa30:	d011      	beq.n	800fa56 <dir_read+0x7e>
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
 800fa34:	2b2e      	cmp	r3, #46	; 0x2e
 800fa36:	d00e      	beq.n	800fa56 <dir_read+0x7e>
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
 800fa3a:	2b0f      	cmp	r3, #15
 800fa3c:	d00b      	beq.n	800fa56 <dir_read+0x7e>
 800fa3e:	7bbb      	ldrb	r3, [r7, #14]
 800fa40:	f023 0320 	bic.w	r3, r3, #32
 800fa44:	2b08      	cmp	r3, #8
 800fa46:	bf0c      	ite	eq
 800fa48:	2301      	moveq	r3, #1
 800fa4a:	2300      	movne	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	461a      	mov	r2, r3
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d00f      	beq.n	800fa76 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fa56:	2100      	movs	r1, #0
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff fe61 	bl	800f720 <dir_next>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa62:	7dfb      	ldrb	r3, [r7, #23]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d108      	bne.n	800fa7a <dir_read+0xa2>
	while (dp->sect) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	69db      	ldr	r3, [r3, #28]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1be      	bne.n	800f9ee <dir_read+0x16>
 800fa70:	e004      	b.n	800fa7c <dir_read+0xa4>
		if (res != FR_OK) break;
 800fa72:	bf00      	nop
 800fa74:	e002      	b.n	800fa7c <dir_read+0xa4>
				break;
 800fa76:	bf00      	nop
 800fa78:	e000      	b.n	800fa7c <dir_read+0xa4>
		if (res != FR_OK) break;
 800fa7a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fa7c:	7dfb      	ldrb	r3, [r7, #23]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <dir_read+0xb0>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	61da      	str	r2, [r3, #28]
	return res;
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b086      	sub	sp, #24
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800faa0:	2100      	movs	r1, #0
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7ff fdb3 	bl	800f60e <dir_sdi>
 800faa8:	4603      	mov	r3, r0
 800faaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <dir_find+0x24>
 800fab2:	7dfb      	ldrb	r3, [r7, #23]
 800fab4:	e03e      	b.n	800fb34 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	69db      	ldr	r3, [r3, #28]
 800faba:	4619      	mov	r1, r3
 800fabc:	6938      	ldr	r0, [r7, #16]
 800fabe:	f7ff f9cd 	bl	800ee5c <move_window>
 800fac2:	4603      	mov	r3, r0
 800fac4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fac6:	7dfb      	ldrb	r3, [r7, #23]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d12f      	bne.n	800fb2c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <dir_find+0x4e>
 800fada:	2304      	movs	r3, #4
 800fadc:	75fb      	strb	r3, [r7, #23]
 800fade:	e028      	b.n	800fb32 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a1b      	ldr	r3, [r3, #32]
 800fae4:	330b      	adds	r3, #11
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faec:	b2da      	uxtb	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a1b      	ldr	r3, [r3, #32]
 800faf6:	330b      	adds	r3, #11
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f003 0308 	and.w	r3, r3, #8
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10a      	bne.n	800fb18 <dir_find+0x86>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a18      	ldr	r0, [r3, #32]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3324      	adds	r3, #36	; 0x24
 800fb0a:	220b      	movs	r2, #11
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	f7fe ffb2 	bl	800ea76 <mem_cmp>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00b      	beq.n	800fb30 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb18:	2100      	movs	r1, #0
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff fe00 	bl	800f720 <dir_next>
 800fb20:	4603      	mov	r3, r0
 800fb22:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0c5      	beq.n	800fab6 <dir_find+0x24>
 800fb2a:	e002      	b.n	800fb32 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fb2c:	bf00      	nop
 800fb2e:	e000      	b.n	800fb32 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb30:	bf00      	nop

	return res;
 800fb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3718      	adds	r7, #24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7ff febd 	bl	800f8cc <dir_alloc>
 800fb52:	4603      	mov	r3, r0
 800fb54:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d11c      	bne.n	800fb96 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	69db      	ldr	r3, [r3, #28]
 800fb60:	4619      	mov	r1, r3
 800fb62:	68b8      	ldr	r0, [r7, #8]
 800fb64:	f7ff f97a 	bl	800ee5c <move_window>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d111      	bne.n	800fb96 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	2220      	movs	r2, #32
 800fb78:	2100      	movs	r1, #0
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fe ff61 	bl	800ea42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a18      	ldr	r0, [r3, #32]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	3324      	adds	r3, #36	; 0x24
 800fb88:	220b      	movs	r2, #11
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	f7fe ff38 	bl	800ea00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2201      	movs	r2, #1
 800fb94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff f951 	bl	800ee5c <move_window>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fbbe:	7afb      	ldrb	r3, [r7, #11]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d106      	bne.n	800fbd2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	22e5      	movs	r2, #229	; 0xe5
 800fbca:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fbd2:	7afb      	ldrb	r3, [r7, #11]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	60fb      	str	r3, [r7, #12]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3324      	adds	r3, #36	; 0x24
 800fbf0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fbf2:	220b      	movs	r2, #11
 800fbf4:	2120      	movs	r1, #32
 800fbf6:	68b8      	ldr	r0, [r7, #8]
 800fbf8:	f7fe ff23 	bl	800ea42 <mem_set>
	si = i = 0; ni = 8;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	613b      	str	r3, [r7, #16]
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	2308      	movs	r3, #8
 800fc06:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b2e      	cmp	r3, #46	; 0x2e
 800fc12:	d12f      	bne.n	800fc74 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	617a      	str	r2, [r7, #20]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800fc22:	7ffb      	ldrb	r3, [r7, #31]
 800fc24:	2b2e      	cmp	r3, #46	; 0x2e
 800fc26:	d10a      	bne.n	800fc3e <create_name+0x62>
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d807      	bhi.n	800fc3e <create_name+0x62>
			sfn[i++] = c;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	613a      	str	r2, [r7, #16]
 800fc34:	68ba      	ldr	r2, [r7, #8]
 800fc36:	4413      	add	r3, r2
 800fc38:	7ffa      	ldrb	r2, [r7, #31]
 800fc3a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fc3c:	e7ea      	b.n	800fc14 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fc3e:	7ffb      	ldrb	r3, [r7, #31]
 800fc40:	2b2f      	cmp	r3, #47	; 0x2f
 800fc42:	d007      	beq.n	800fc54 <create_name+0x78>
 800fc44:	7ffb      	ldrb	r3, [r7, #31]
 800fc46:	2b5c      	cmp	r3, #92	; 0x5c
 800fc48:	d004      	beq.n	800fc54 <create_name+0x78>
 800fc4a:	7ffb      	ldrb	r3, [r7, #31]
 800fc4c:	2b20      	cmp	r3, #32
 800fc4e:	d901      	bls.n	800fc54 <create_name+0x78>
 800fc50:	2306      	movs	r3, #6
 800fc52:	e084      	b.n	800fd5e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	441a      	add	r2, r3
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fc5e:	7ffb      	ldrb	r3, [r7, #31]
 800fc60:	2b20      	cmp	r3, #32
 800fc62:	d801      	bhi.n	800fc68 <create_name+0x8c>
 800fc64:	2224      	movs	r2, #36	; 0x24
 800fc66:	e000      	b.n	800fc6a <create_name+0x8e>
 800fc68:	2220      	movs	r2, #32
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	330b      	adds	r3, #11
 800fc6e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	e074      	b.n	800fd5e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	617a      	str	r2, [r7, #20]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fc82:	7ffb      	ldrb	r3, [r7, #31]
 800fc84:	2b20      	cmp	r3, #32
 800fc86:	d94e      	bls.n	800fd26 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fc88:	7ffb      	ldrb	r3, [r7, #31]
 800fc8a:	2b2f      	cmp	r3, #47	; 0x2f
 800fc8c:	d006      	beq.n	800fc9c <create_name+0xc0>
 800fc8e:	7ffb      	ldrb	r3, [r7, #31]
 800fc90:	2b5c      	cmp	r3, #92	; 0x5c
 800fc92:	d110      	bne.n	800fcb6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fc94:	e002      	b.n	800fc9c <create_name+0xc0>
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	4413      	add	r3, r2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2b2f      	cmp	r3, #47	; 0x2f
 800fca6:	d0f6      	beq.n	800fc96 <create_name+0xba>
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b5c      	cmp	r3, #92	; 0x5c
 800fcb2:	d0f0      	beq.n	800fc96 <create_name+0xba>
			break;
 800fcb4:	e038      	b.n	800fd28 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fcb6:	7ffb      	ldrb	r3, [r7, #31]
 800fcb8:	2b2e      	cmp	r3, #46	; 0x2e
 800fcba:	d003      	beq.n	800fcc4 <create_name+0xe8>
 800fcbc:	693a      	ldr	r2, [r7, #16]
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d30c      	bcc.n	800fcde <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	2b0b      	cmp	r3, #11
 800fcc8:	d002      	beq.n	800fcd0 <create_name+0xf4>
 800fcca:	7ffb      	ldrb	r3, [r7, #31]
 800fccc:	2b2e      	cmp	r3, #46	; 0x2e
 800fcce:	d001      	beq.n	800fcd4 <create_name+0xf8>
 800fcd0:	2306      	movs	r3, #6
 800fcd2:	e044      	b.n	800fd5e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800fcd4:	2308      	movs	r3, #8
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	230b      	movs	r3, #11
 800fcda:	61bb      	str	r3, [r7, #24]
			continue;
 800fcdc:	e022      	b.n	800fd24 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fcde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	da04      	bge.n	800fcf0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fce6:	7ffb      	ldrb	r3, [r7, #31]
 800fce8:	3b80      	subs	r3, #128	; 0x80
 800fcea:	4a1f      	ldr	r2, [pc, #124]	; (800fd68 <create_name+0x18c>)
 800fcec:	5cd3      	ldrb	r3, [r2, r3]
 800fcee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fcf0:	7ffb      	ldrb	r3, [r7, #31]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	481d      	ldr	r0, [pc, #116]	; (800fd6c <create_name+0x190>)
 800fcf6:	f7fe fee5 	bl	800eac4 <chk_chr>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <create_name+0x128>
 800fd00:	2306      	movs	r3, #6
 800fd02:	e02c      	b.n	800fd5e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fd04:	7ffb      	ldrb	r3, [r7, #31]
 800fd06:	2b60      	cmp	r3, #96	; 0x60
 800fd08:	d905      	bls.n	800fd16 <create_name+0x13a>
 800fd0a:	7ffb      	ldrb	r3, [r7, #31]
 800fd0c:	2b7a      	cmp	r3, #122	; 0x7a
 800fd0e:	d802      	bhi.n	800fd16 <create_name+0x13a>
 800fd10:	7ffb      	ldrb	r3, [r7, #31]
 800fd12:	3b20      	subs	r3, #32
 800fd14:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	1c5a      	adds	r2, r3, #1
 800fd1a:	613a      	str	r2, [r7, #16]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	4413      	add	r3, r2
 800fd20:	7ffa      	ldrb	r2, [r7, #31]
 800fd22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fd24:	e7a6      	b.n	800fc74 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fd26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	441a      	add	r2, r3
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <create_name+0x160>
 800fd38:	2306      	movs	r3, #6
 800fd3a:	e010      	b.n	800fd5e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	2be5      	cmp	r3, #229	; 0xe5
 800fd42:	d102      	bne.n	800fd4a <create_name+0x16e>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2205      	movs	r2, #5
 800fd48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fd4a:	7ffb      	ldrb	r3, [r7, #31]
 800fd4c:	2b20      	cmp	r3, #32
 800fd4e:	d801      	bhi.n	800fd54 <create_name+0x178>
 800fd50:	2204      	movs	r2, #4
 800fd52:	e000      	b.n	800fd56 <create_name+0x17a>
 800fd54:	2200      	movs	r2, #0
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	330b      	adds	r3, #11
 800fd5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fd5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3720      	adds	r7, #32
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	08017f38 	.word	0x08017f38
 800fd6c:	08017ee8 	.word	0x08017ee8

0800fd70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b2f      	cmp	r3, #47	; 0x2f
 800fd8a:	d00b      	beq.n	800fda4 <follow_path+0x34>
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b5c      	cmp	r3, #92	; 0x5c
 800fd92:	d007      	beq.n	800fda4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	699a      	ldr	r2, [r3, #24]
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	609a      	str	r2, [r3, #8]
 800fd9c:	e00d      	b.n	800fdba <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	3301      	adds	r3, #1
 800fda2:	603b      	str	r3, [r7, #0]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b2f      	cmp	r3, #47	; 0x2f
 800fdaa:	d0f8      	beq.n	800fd9e <follow_path+0x2e>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b5c      	cmp	r3, #92	; 0x5c
 800fdb2:	d0f4      	beq.n	800fd9e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b1f      	cmp	r3, #31
 800fdc0:	d80a      	bhi.n	800fdd8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2280      	movs	r2, #128	; 0x80
 800fdc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7ff fc1e 	bl	800f60e <dir_sdi>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75fb      	strb	r3, [r7, #23]
 800fdd6:	e05b      	b.n	800fe90 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdd8:	463b      	mov	r3, r7
 800fdda:	4619      	mov	r1, r3
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7ff fefd 	bl	800fbdc <create_name>
 800fde2:	4603      	mov	r3, r0
 800fde4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fde6:	7dfb      	ldrb	r3, [r7, #23]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d14c      	bne.n	800fe86 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff fe50 	bl	800fa92 <dir_find>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fdfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fdfe:	7dfb      	ldrb	r3, [r7, #23]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d01b      	beq.n	800fe3c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fe04:	7dfb      	ldrb	r3, [r7, #23]
 800fe06:	2b04      	cmp	r3, #4
 800fe08:	d13f      	bne.n	800fe8a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fe0a:	7afb      	ldrb	r3, [r7, #11]
 800fe0c:	f003 0320 	and.w	r3, r3, #32
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00b      	beq.n	800fe2c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fe14:	7afb      	ldrb	r3, [r7, #11]
 800fe16:	f003 0304 	and.w	r3, r3, #4
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d031      	beq.n	800fe82 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2280      	movs	r2, #128	; 0x80
 800fe22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fe2a:	e02e      	b.n	800fe8a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fe2c:	7afb      	ldrb	r3, [r7, #11]
 800fe2e:	f003 0304 	and.w	r3, r3, #4
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d129      	bne.n	800fe8a <follow_path+0x11a>
 800fe36:	2305      	movs	r3, #5
 800fe38:	75fb      	strb	r3, [r7, #23]
				break;
 800fe3a:	e026      	b.n	800fe8a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe3c:	7afb      	ldrb	r3, [r7, #11]
 800fe3e:	f003 0304 	and.w	r3, r3, #4
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d123      	bne.n	800fe8e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	799b      	ldrb	r3, [r3, #6]
 800fe4a:	f003 0310 	and.w	r3, r3, #16
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fe52:	2305      	movs	r3, #5
 800fe54:	75fb      	strb	r3, [r7, #23]
 800fe56:	e01b      	b.n	800fe90 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	695b      	ldr	r3, [r3, #20]
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	8992      	ldrh	r2, [r2, #12]
 800fe66:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe6a:	fb02 f200 	mul.w	r2, r2, r0
 800fe6e:	1a9b      	subs	r3, r3, r2
 800fe70:	440b      	add	r3, r1
 800fe72:	4619      	mov	r1, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7ff fd70 	bl	800f95a <ld_clust>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	609a      	str	r2, [r3, #8]
 800fe80:	e7aa      	b.n	800fdd8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fe82:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe84:	e7a8      	b.n	800fdd8 <follow_path+0x68>
			if (res != FR_OK) break;
 800fe86:	bf00      	nop
 800fe88:	e002      	b.n	800fe90 <follow_path+0x120>
				break;
 800fe8a:	bf00      	nop
 800fe8c:	e000      	b.n	800fe90 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe8e:	bf00      	nop
			}
		}
	}

	return res;
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	b087      	sub	sp, #28
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fea2:	f04f 33ff 	mov.w	r3, #4294967295
 800fea6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d031      	beq.n	800ff14 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	617b      	str	r3, [r7, #20]
 800feb6:	e002      	b.n	800febe <get_ldnumber+0x24>
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	3301      	adds	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b20      	cmp	r3, #32
 800fec4:	d903      	bls.n	800fece <get_ldnumber+0x34>
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b3a      	cmp	r3, #58	; 0x3a
 800fecc:	d1f4      	bne.n	800feb8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2b3a      	cmp	r3, #58	; 0x3a
 800fed4:	d11c      	bne.n	800ff10 <get_ldnumber+0x76>
			tp = *path;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	1c5a      	adds	r2, r3, #1
 800fee0:	60fa      	str	r2, [r7, #12]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	3b30      	subs	r3, #48	; 0x30
 800fee6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	2b09      	cmp	r3, #9
 800feec:	d80e      	bhi.n	800ff0c <get_ldnumber+0x72>
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d10a      	bne.n	800ff0c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d107      	bne.n	800ff0c <get_ldnumber+0x72>
					vol = (int)i;
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	3301      	adds	r3, #1
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	697a      	ldr	r2, [r7, #20]
 800ff0a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	e002      	b.n	800ff16 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ff10:	2300      	movs	r3, #0
 800ff12:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ff14:	693b      	ldr	r3, [r7, #16]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	70da      	strb	r2, [r3, #3]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff3c:	6839      	ldr	r1, [r7, #0]
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7fe ff8c 	bl	800ee5c <move_window>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <check_fs+0x2a>
 800ff4a:	2304      	movs	r3, #4
 800ff4c:	e038      	b.n	800ffc0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	3338      	adds	r3, #56	; 0x38
 800ff52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fcd0 	bl	800e8fc <ld_word>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d001      	beq.n	800ff6c <check_fs+0x48>
 800ff68:	2303      	movs	r3, #3
 800ff6a:	e029      	b.n	800ffc0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff72:	2be9      	cmp	r3, #233	; 0xe9
 800ff74:	d009      	beq.n	800ff8a <check_fs+0x66>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff7c:	2beb      	cmp	r3, #235	; 0xeb
 800ff7e:	d11e      	bne.n	800ffbe <check_fs+0x9a>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ff86:	2b90      	cmp	r3, #144	; 0x90
 800ff88:	d119      	bne.n	800ffbe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	3338      	adds	r3, #56	; 0x38
 800ff8e:	3336      	adds	r3, #54	; 0x36
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe fccb 	bl	800e92c <ld_dword>
 800ff96:	4603      	mov	r3, r0
 800ff98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ff9c:	4a0a      	ldr	r2, [pc, #40]	; (800ffc8 <check_fs+0xa4>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d101      	bne.n	800ffa6 <check_fs+0x82>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	e00c      	b.n	800ffc0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	3338      	adds	r3, #56	; 0x38
 800ffaa:	3352      	adds	r3, #82	; 0x52
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fcbd 	bl	800e92c <ld_dword>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <check_fs+0xa8>)
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d101      	bne.n	800ffbe <check_fs+0x9a>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e000      	b.n	800ffc0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ffbe:	2302      	movs	r3, #2
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	00544146 	.word	0x00544146
 800ffcc:	33544146 	.word	0x33544146

0800ffd0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b096      	sub	sp, #88	; 0x58
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f7ff ff58 	bl	800fe9a <get_ldnumber>
 800ffea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ffec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	da01      	bge.n	800fff6 <find_volume+0x26>
 800fff2:	230b      	movs	r3, #11
 800fff4:	e268      	b.n	80104c8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fff6:	4ab0      	ldr	r2, [pc, #704]	; (80102b8 <find_volume+0x2e8>)
 800fff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fffe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	2b00      	cmp	r3, #0
 8010004:	d101      	bne.n	801000a <find_volume+0x3a>
 8010006:	230c      	movs	r3, #12
 8010008:	e25e      	b.n	80104c8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801000e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010010:	79fb      	ldrb	r3, [r7, #7]
 8010012:	f023 0301 	bic.w	r3, r3, #1
 8010016:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d01a      	beq.n	8010056 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	785b      	ldrb	r3, [r3, #1]
 8010024:	4618      	mov	r0, r3
 8010026:	f7fe fbcb 	bl	800e7c0 <disk_status>
 801002a:	4603      	mov	r3, r0
 801002c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010034:	f003 0301 	and.w	r3, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10c      	bne.n	8010056 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d007      	beq.n	8010052 <find_volume+0x82>
 8010042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010046:	f003 0304 	and.w	r3, r3, #4
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801004e:	230a      	movs	r3, #10
 8010050:	e23a      	b.n	80104c8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010052:	2300      	movs	r3, #0
 8010054:	e238      	b.n	80104c8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	2200      	movs	r2, #0
 801005a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801005c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801005e:	b2da      	uxtb	r2, r3
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010066:	785b      	ldrb	r3, [r3, #1]
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe fbc3 	bl	800e7f4 <disk_initialize>
 801006e:	4603      	mov	r3, r0
 8010070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010078:	f003 0301 	and.w	r3, r3, #1
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010080:	2303      	movs	r3, #3
 8010082:	e221      	b.n	80104c8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d007      	beq.n	801009a <find_volume+0xca>
 801008a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801008e:	f003 0304 	and.w	r3, r3, #4
 8010092:	2b00      	cmp	r3, #0
 8010094:	d001      	beq.n	801009a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010096:	230a      	movs	r3, #10
 8010098:	e216      	b.n	80104c8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801009a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009c:	7858      	ldrb	r0, [r3, #1]
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	330c      	adds	r3, #12
 80100a2:	461a      	mov	r2, r3
 80100a4:	2102      	movs	r1, #2
 80100a6:	f7fe fc0b 	bl	800e8c0 <disk_ioctl>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d001      	beq.n	80100b4 <find_volume+0xe4>
 80100b0:	2301      	movs	r3, #1
 80100b2:	e209      	b.n	80104c8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	899b      	ldrh	r3, [r3, #12]
 80100b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100bc:	d80d      	bhi.n	80100da <find_volume+0x10a>
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	899b      	ldrh	r3, [r3, #12]
 80100c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100c6:	d308      	bcc.n	80100da <find_volume+0x10a>
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	899b      	ldrh	r3, [r3, #12]
 80100cc:	461a      	mov	r2, r3
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	899b      	ldrh	r3, [r3, #12]
 80100d2:	3b01      	subs	r3, #1
 80100d4:	4013      	ands	r3, r2
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <find_volume+0x10e>
 80100da:	2301      	movs	r3, #1
 80100dc:	e1f4      	b.n	80104c8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80100e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100e6:	f7ff ff1d 	bl	800ff24 <check_fs>
 80100ea:	4603      	mov	r3, r0
 80100ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80100f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	d14b      	bne.n	8010190 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80100f8:	2300      	movs	r3, #0
 80100fa:	643b      	str	r3, [r7, #64]	; 0x40
 80100fc:	e01f      	b.n	801013e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010106:	011b      	lsls	r3, r3, #4
 8010108:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801010c:	4413      	add	r3, r2
 801010e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	3304      	adds	r3, #4
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d006      	beq.n	8010128 <find_volume+0x158>
 801011a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011c:	3308      	adds	r3, #8
 801011e:	4618      	mov	r0, r3
 8010120:	f7fe fc04 	bl	800e92c <ld_dword>
 8010124:	4602      	mov	r2, r0
 8010126:	e000      	b.n	801012a <find_volume+0x15a>
 8010128:	2200      	movs	r2, #0
 801012a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010132:	440b      	add	r3, r1
 8010134:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013a:	3301      	adds	r3, #1
 801013c:	643b      	str	r3, [r7, #64]	; 0x40
 801013e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010140:	2b03      	cmp	r3, #3
 8010142:	d9dc      	bls.n	80100fe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010144:	2300      	movs	r3, #0
 8010146:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801014a:	2b00      	cmp	r3, #0
 801014c:	d002      	beq.n	8010154 <find_volume+0x184>
 801014e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010150:	3b01      	subs	r3, #1
 8010152:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801015c:	4413      	add	r3, r2
 801015e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010162:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010166:	2b00      	cmp	r3, #0
 8010168:	d005      	beq.n	8010176 <find_volume+0x1a6>
 801016a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801016c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801016e:	f7ff fed9 	bl	800ff24 <check_fs>
 8010172:	4603      	mov	r3, r0
 8010174:	e000      	b.n	8010178 <find_volume+0x1a8>
 8010176:	2303      	movs	r3, #3
 8010178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801017c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010180:	2b01      	cmp	r3, #1
 8010182:	d905      	bls.n	8010190 <find_volume+0x1c0>
 8010184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010186:	3301      	adds	r3, #1
 8010188:	643b      	str	r3, [r7, #64]	; 0x40
 801018a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801018c:	2b03      	cmp	r3, #3
 801018e:	d9e1      	bls.n	8010154 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010194:	2b04      	cmp	r3, #4
 8010196:	d101      	bne.n	801019c <find_volume+0x1cc>
 8010198:	2301      	movs	r3, #1
 801019a:	e195      	b.n	80104c8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801019c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d901      	bls.n	80101a8 <find_volume+0x1d8>
 80101a4:	230d      	movs	r3, #13
 80101a6:	e18f      	b.n	80104c8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80101a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101aa:	3338      	adds	r3, #56	; 0x38
 80101ac:	330b      	adds	r3, #11
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fba4 	bl	800e8fc <ld_word>
 80101b4:	4603      	mov	r3, r0
 80101b6:	461a      	mov	r2, r3
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	899b      	ldrh	r3, [r3, #12]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d001      	beq.n	80101c4 <find_volume+0x1f4>
 80101c0:	230d      	movs	r3, #13
 80101c2:	e181      	b.n	80104c8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80101c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c6:	3338      	adds	r3, #56	; 0x38
 80101c8:	3316      	adds	r3, #22
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fe fb96 	bl	800e8fc <ld_word>
 80101d0:	4603      	mov	r3, r0
 80101d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80101d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d106      	bne.n	80101e8 <find_volume+0x218>
 80101da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101dc:	3338      	adds	r3, #56	; 0x38
 80101de:	3324      	adds	r3, #36	; 0x24
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe fba3 	bl	800e92c <ld_dword>
 80101e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80101ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80101f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80101f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fa:	789b      	ldrb	r3, [r3, #2]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d005      	beq.n	801020c <find_volume+0x23c>
 8010200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010202:	789b      	ldrb	r3, [r3, #2]
 8010204:	2b02      	cmp	r3, #2
 8010206:	d001      	beq.n	801020c <find_volume+0x23c>
 8010208:	230d      	movs	r3, #13
 801020a:	e15d      	b.n	80104c8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801020c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020e:	789b      	ldrb	r3, [r3, #2]
 8010210:	461a      	mov	r2, r3
 8010212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010214:	fb02 f303 	mul.w	r3, r2, r3
 8010218:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010220:	b29a      	uxth	r2, r3
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010228:	895b      	ldrh	r3, [r3, #10]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d008      	beq.n	8010240 <find_volume+0x270>
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	895b      	ldrh	r3, [r3, #10]
 8010232:	461a      	mov	r2, r3
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	895b      	ldrh	r3, [r3, #10]
 8010238:	3b01      	subs	r3, #1
 801023a:	4013      	ands	r3, r2
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <find_volume+0x274>
 8010240:	230d      	movs	r3, #13
 8010242:	e141      	b.n	80104c8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	3338      	adds	r3, #56	; 0x38
 8010248:	3311      	adds	r3, #17
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe fb56 	bl	800e8fc <ld_word>
 8010250:	4603      	mov	r3, r0
 8010252:	461a      	mov	r2, r3
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	891b      	ldrh	r3, [r3, #8]
 801025c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801025e:	8992      	ldrh	r2, [r2, #12]
 8010260:	0952      	lsrs	r2, r2, #5
 8010262:	b292      	uxth	r2, r2
 8010264:	fbb3 f1f2 	udiv	r1, r3, r2
 8010268:	fb02 f201 	mul.w	r2, r2, r1
 801026c:	1a9b      	subs	r3, r3, r2
 801026e:	b29b      	uxth	r3, r3
 8010270:	2b00      	cmp	r3, #0
 8010272:	d001      	beq.n	8010278 <find_volume+0x2a8>
 8010274:	230d      	movs	r3, #13
 8010276:	e127      	b.n	80104c8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027a:	3338      	adds	r3, #56	; 0x38
 801027c:	3313      	adds	r3, #19
 801027e:	4618      	mov	r0, r3
 8010280:	f7fe fb3c 	bl	800e8fc <ld_word>
 8010284:	4603      	mov	r3, r0
 8010286:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801028a:	2b00      	cmp	r3, #0
 801028c:	d106      	bne.n	801029c <find_volume+0x2cc>
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	3338      	adds	r3, #56	; 0x38
 8010292:	3320      	adds	r3, #32
 8010294:	4618      	mov	r0, r3
 8010296:	f7fe fb49 	bl	800e92c <ld_dword>
 801029a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801029c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029e:	3338      	adds	r3, #56	; 0x38
 80102a0:	330e      	adds	r3, #14
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fb2a 	bl	800e8fc <ld_word>
 80102a8:	4603      	mov	r3, r0
 80102aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80102ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d104      	bne.n	80102bc <find_volume+0x2ec>
 80102b2:	230d      	movs	r3, #13
 80102b4:	e108      	b.n	80104c8 <find_volume+0x4f8>
 80102b6:	bf00      	nop
 80102b8:	20037434 	.word	0x20037434

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80102bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102c0:	4413      	add	r3, r2
 80102c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102c4:	8911      	ldrh	r1, [r2, #8]
 80102c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102c8:	8992      	ldrh	r2, [r2, #12]
 80102ca:	0952      	lsrs	r2, r2, #5
 80102cc:	b292      	uxth	r2, r2
 80102ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80102d2:	b292      	uxth	r2, r2
 80102d4:	4413      	add	r3, r2
 80102d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80102d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	429a      	cmp	r2, r3
 80102de:	d201      	bcs.n	80102e4 <find_volume+0x314>
 80102e0:	230d      	movs	r3, #13
 80102e2:	e0f1      	b.n	80104c8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80102e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102ec:	8952      	ldrh	r2, [r2, #10]
 80102ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80102f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <find_volume+0x32e>
 80102fa:	230d      	movs	r3, #13
 80102fc:	e0e4      	b.n	80104c8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80102fe:	2303      	movs	r3, #3
 8010300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010306:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801030a:	4293      	cmp	r3, r2
 801030c:	d802      	bhi.n	8010314 <find_volume+0x344>
 801030e:	2302      	movs	r3, #2
 8010310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	f640 72f5 	movw	r2, #4085	; 0xff5
 801031a:	4293      	cmp	r3, r2
 801031c:	d802      	bhi.n	8010324 <find_volume+0x354>
 801031e:	2301      	movs	r3, #1
 8010320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	1c9a      	adds	r2, r3, #2
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010330:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010332:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010336:	441a      	add	r2, r3
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801033c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801033e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010340:	441a      	add	r2, r3
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801034a:	2b03      	cmp	r3, #3
 801034c:	d11e      	bne.n	801038c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	3338      	adds	r3, #56	; 0x38
 8010352:	332a      	adds	r3, #42	; 0x2a
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe fad1 	bl	800e8fc <ld_word>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d001      	beq.n	8010364 <find_volume+0x394>
 8010360:	230d      	movs	r3, #13
 8010362:	e0b1      	b.n	80104c8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	891b      	ldrh	r3, [r3, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d001      	beq.n	8010370 <find_volume+0x3a0>
 801036c:	230d      	movs	r3, #13
 801036e:	e0ab      	b.n	80104c8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	3338      	adds	r3, #56	; 0x38
 8010374:	332c      	adds	r3, #44	; 0x2c
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fad8 	bl	800e92c <ld_dword>
 801037c:	4602      	mov	r2, r0
 801037e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010380:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010384:	69db      	ldr	r3, [r3, #28]
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	647b      	str	r3, [r7, #68]	; 0x44
 801038a:	e01f      	b.n	80103cc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	891b      	ldrh	r3, [r3, #8]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d101      	bne.n	8010398 <find_volume+0x3c8>
 8010394:	230d      	movs	r3, #13
 8010396:	e097      	b.n	80104c8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801039c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801039e:	441a      	add	r2, r3
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80103a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d103      	bne.n	80103b4 <find_volume+0x3e4>
 80103ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ae:	69db      	ldr	r3, [r3, #28]
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	e00a      	b.n	80103ca <find_volume+0x3fa>
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	69da      	ldr	r2, [r3, #28]
 80103b8:	4613      	mov	r3, r2
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	4413      	add	r3, r2
 80103be:	085a      	lsrs	r2, r3, #1
 80103c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c2:	69db      	ldr	r3, [r3, #28]
 80103c4:	f003 0301 	and.w	r3, r3, #1
 80103c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80103ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	6a1a      	ldr	r2, [r3, #32]
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	899b      	ldrh	r3, [r3, #12]
 80103d4:	4619      	mov	r1, r3
 80103d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d8:	440b      	add	r3, r1
 80103da:	3b01      	subs	r3, #1
 80103dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103de:	8989      	ldrh	r1, [r1, #12]
 80103e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d201      	bcs.n	80103ec <find_volume+0x41c>
 80103e8:	230d      	movs	r3, #13
 80103ea:	e06d      	b.n	80104c8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80103ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ee:	f04f 32ff 	mov.w	r2, #4294967295
 80103f2:	615a      	str	r2, [r3, #20]
 80103f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f6:	695a      	ldr	r2, [r3, #20]
 80103f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80103fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fe:	2280      	movs	r2, #128	; 0x80
 8010400:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010406:	2b03      	cmp	r3, #3
 8010408:	d149      	bne.n	801049e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801040a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040c:	3338      	adds	r3, #56	; 0x38
 801040e:	3330      	adds	r3, #48	; 0x30
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe fa73 	bl	800e8fc <ld_word>
 8010416:	4603      	mov	r3, r0
 8010418:	2b01      	cmp	r3, #1
 801041a:	d140      	bne.n	801049e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801041c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041e:	3301      	adds	r3, #1
 8010420:	4619      	mov	r1, r3
 8010422:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010424:	f7fe fd1a 	bl	800ee5c <move_window>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d137      	bne.n	801049e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010430:	2200      	movs	r2, #0
 8010432:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010436:	3338      	adds	r3, #56	; 0x38
 8010438:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801043c:	4618      	mov	r0, r3
 801043e:	f7fe fa5d 	bl	800e8fc <ld_word>
 8010442:	4603      	mov	r3, r0
 8010444:	461a      	mov	r2, r3
 8010446:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801044a:	429a      	cmp	r2, r3
 801044c:	d127      	bne.n	801049e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801044e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010450:	3338      	adds	r3, #56	; 0x38
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe fa6a 	bl	800e92c <ld_dword>
 8010458:	4602      	mov	r2, r0
 801045a:	4b1d      	ldr	r3, [pc, #116]	; (80104d0 <find_volume+0x500>)
 801045c:	429a      	cmp	r2, r3
 801045e:	d11e      	bne.n	801049e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010462:	3338      	adds	r3, #56	; 0x38
 8010464:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe fa5f 	bl	800e92c <ld_dword>
 801046e:	4602      	mov	r2, r0
 8010470:	4b18      	ldr	r3, [pc, #96]	; (80104d4 <find_volume+0x504>)
 8010472:	429a      	cmp	r2, r3
 8010474:	d113      	bne.n	801049e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	3338      	adds	r3, #56	; 0x38
 801047a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801047e:	4618      	mov	r0, r3
 8010480:	f7fe fa54 	bl	800e92c <ld_dword>
 8010484:	4602      	mov	r2, r0
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	3338      	adds	r3, #56	; 0x38
 801048e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010492:	4618      	mov	r0, r3
 8010494:	f7fe fa4a 	bl	800e92c <ld_dword>
 8010498:	4602      	mov	r2, r0
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80104a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <find_volume+0x508>)
 80104a8:	881b      	ldrh	r3, [r3, #0]
 80104aa:	3301      	adds	r3, #1
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <find_volume+0x508>)
 80104b0:	801a      	strh	r2, [r3, #0]
 80104b2:	4b09      	ldr	r3, [pc, #36]	; (80104d8 <find_volume+0x508>)
 80104b4:	881a      	ldrh	r2, [r3, #0]
 80104b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80104ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104bc:	2200      	movs	r2, #0
 80104be:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80104c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104c2:	f7fe fc63 	bl	800ed8c <clear_lock>
#endif
	return FR_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3758      	adds	r7, #88	; 0x58
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	41615252 	.word	0x41615252
 80104d4:	61417272 	.word	0x61417272
 80104d8:	20037438 	.word	0x20037438

080104dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80104e6:	2309      	movs	r3, #9
 80104e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d01c      	beq.n	801052a <validate+0x4e>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d018      	beq.n	801052a <validate+0x4e>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d013      	beq.n	801052a <validate+0x4e>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	889a      	ldrh	r2, [r3, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	88db      	ldrh	r3, [r3, #6]
 801050c:	429a      	cmp	r2, r3
 801050e:	d10c      	bne.n	801052a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe f952 	bl	800e7c0 <disk_status>
 801051c:	4603      	mov	r3, r0
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	d101      	bne.n	801052a <validate+0x4e>
			res = FR_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d102      	bne.n	8010536 <validate+0x5a>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	e000      	b.n	8010538 <validate+0x5c>
 8010536:	2300      	movs	r3, #0
 8010538:	683a      	ldr	r2, [r7, #0]
 801053a:	6013      	str	r3, [r2, #0]
	return res;
 801053c:	7bfb      	ldrb	r3, [r7, #15]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
	...

08010548 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	4613      	mov	r3, r2
 8010554:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801055a:	f107 0310 	add.w	r3, r7, #16
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff fc9b 	bl	800fe9a <get_ldnumber>
 8010564:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	2b00      	cmp	r3, #0
 801056a:	da01      	bge.n	8010570 <f_mount+0x28>
 801056c:	230b      	movs	r3, #11
 801056e:	e02b      	b.n	80105c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010570:	4a17      	ldr	r2, [pc, #92]	; (80105d0 <f_mount+0x88>)
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010578:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d005      	beq.n	801058c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010580:	69b8      	ldr	r0, [r7, #24]
 8010582:	f7fe fc03 	bl	800ed8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	2200      	movs	r2, #0
 801058a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2200      	movs	r2, #0
 8010596:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	490d      	ldr	r1, [pc, #52]	; (80105d0 <f_mount+0x88>)
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d002      	beq.n	80105ae <f_mount+0x66>
 80105a8:	79fb      	ldrb	r3, [r7, #7]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d001      	beq.n	80105b2 <f_mount+0x6a>
 80105ae:	2300      	movs	r3, #0
 80105b0:	e00a      	b.n	80105c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80105b2:	f107 010c 	add.w	r1, r7, #12
 80105b6:	f107 0308 	add.w	r3, r7, #8
 80105ba:	2200      	movs	r2, #0
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff fd07 	bl	800ffd0 <find_volume>
 80105c2:	4603      	mov	r3, r0
 80105c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80105c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	20037434 	.word	0x20037434

080105d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b098      	sub	sp, #96	; 0x60
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	4613      	mov	r3, r2
 80105e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d101      	bne.n	80105ec <f_open+0x18>
 80105e8:	2309      	movs	r3, #9
 80105ea:	e1ba      	b.n	8010962 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80105f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80105f4:	79fa      	ldrb	r2, [r7, #7]
 80105f6:	f107 0110 	add.w	r1, r7, #16
 80105fa:	f107 0308 	add.w	r3, r7, #8
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff fce6 	bl	800ffd0 <find_volume>
 8010604:	4603      	mov	r3, r0
 8010606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801060a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801060e:	2b00      	cmp	r3, #0
 8010610:	f040 819e 	bne.w	8010950 <f_open+0x37c>
		dj.obj.fs = fs;
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	f107 0314 	add.w	r3, r7, #20
 801061e:	4611      	mov	r1, r2
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fba5 	bl	800fd70 <follow_path>
 8010626:	4603      	mov	r3, r0
 8010628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801062c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010630:	2b00      	cmp	r3, #0
 8010632:	d11a      	bne.n	801066a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010634:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010638:	b25b      	sxtb	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	da03      	bge.n	8010646 <f_open+0x72>
				res = FR_INVALID_NAME;
 801063e:	2306      	movs	r3, #6
 8010640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010644:	e011      	b.n	801066a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	f023 0301 	bic.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	bf14      	ite	ne
 8010650:	2301      	movne	r3, #1
 8010652:	2300      	moveq	r3, #0
 8010654:	b2db      	uxtb	r3, r3
 8010656:	461a      	mov	r2, r3
 8010658:	f107 0314 	add.w	r3, r7, #20
 801065c:	4611      	mov	r1, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7fe fa4c 	bl	800eafc <chk_lock>
 8010664:	4603      	mov	r3, r0
 8010666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801066a:	79fb      	ldrb	r3, [r7, #7]
 801066c:	f003 031c 	and.w	r3, r3, #28
 8010670:	2b00      	cmp	r3, #0
 8010672:	d07e      	beq.n	8010772 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010678:	2b00      	cmp	r3, #0
 801067a:	d017      	beq.n	80106ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801067c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010680:	2b04      	cmp	r3, #4
 8010682:	d10e      	bne.n	80106a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010684:	f7fe fa96 	bl	800ebb4 <enq_lock>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d006      	beq.n	801069c <f_open+0xc8>
 801068e:	f107 0314 	add.w	r3, r7, #20
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff fa52 	bl	800fb3c <dir_register>
 8010698:	4603      	mov	r3, r0
 801069a:	e000      	b.n	801069e <f_open+0xca>
 801069c:	2312      	movs	r3, #18
 801069e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80106a2:	79fb      	ldrb	r3, [r7, #7]
 80106a4:	f043 0308 	orr.w	r3, r3, #8
 80106a8:	71fb      	strb	r3, [r7, #7]
 80106aa:	e010      	b.n	80106ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80106ac:	7ebb      	ldrb	r3, [r7, #26]
 80106ae:	f003 0311 	and.w	r3, r3, #17
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d003      	beq.n	80106be <f_open+0xea>
					res = FR_DENIED;
 80106b6:	2307      	movs	r3, #7
 80106b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106bc:	e007      	b.n	80106ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80106be:	79fb      	ldrb	r3, [r7, #7]
 80106c0:	f003 0304 	and.w	r3, r3, #4
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d002      	beq.n	80106ce <f_open+0xfa>
 80106c8:	2308      	movs	r3, #8
 80106ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80106ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d167      	bne.n	80107a6 <f_open+0x1d2>
 80106d6:	79fb      	ldrb	r3, [r7, #7]
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d062      	beq.n	80107a6 <f_open+0x1d2>
				dw = GET_FATTIME();
 80106e0:	4ba2      	ldr	r3, [pc, #648]	; (801096c <f_open+0x398>)
 80106e2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80106e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e6:	330e      	adds	r3, #14
 80106e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fe f95c 	bl	800e9a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80106f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f2:	3316      	adds	r3, #22
 80106f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fe f956 	bl	800e9a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106fe:	330b      	adds	r3, #11
 8010700:	2220      	movs	r2, #32
 8010702:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010708:	4611      	mov	r1, r2
 801070a:	4618      	mov	r0, r3
 801070c:	f7ff f925 	bl	800f95a <ld_clust>
 8010710:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010716:	2200      	movs	r2, #0
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff f93d 	bl	800f998 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010720:	331c      	adds	r3, #28
 8010722:	2100      	movs	r1, #0
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe f93f 	bl	800e9a8 <st_dword>
					fs->wflag = 1;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	2201      	movs	r2, #1
 801072e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d037      	beq.n	80107a6 <f_open+0x1d2>
						dw = fs->winsect;
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801073a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801073c:	f107 0314 	add.w	r3, r7, #20
 8010740:	2200      	movs	r2, #0
 8010742:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010744:	4618      	mov	r0, r3
 8010746:	f7fe fe2d 	bl	800f3a4 <remove_chain>
 801074a:	4603      	mov	r3, r0
 801074c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010754:	2b00      	cmp	r3, #0
 8010756:	d126      	bne.n	80107a6 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801075c:	4618      	mov	r0, r3
 801075e:	f7fe fb7d 	bl	800ee5c <move_window>
 8010762:	4603      	mov	r3, r0
 8010764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801076c:	3a01      	subs	r2, #1
 801076e:	611a      	str	r2, [r3, #16]
 8010770:	e019      	b.n	80107a6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010776:	2b00      	cmp	r3, #0
 8010778:	d115      	bne.n	80107a6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801077a:	7ebb      	ldrb	r3, [r7, #26]
 801077c:	f003 0310 	and.w	r3, r3, #16
 8010780:	2b00      	cmp	r3, #0
 8010782:	d003      	beq.n	801078c <f_open+0x1b8>
					res = FR_NO_FILE;
 8010784:	2304      	movs	r3, #4
 8010786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801078a:	e00c      	b.n	80107a6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	f003 0302 	and.w	r3, r3, #2
 8010792:	2b00      	cmp	r3, #0
 8010794:	d007      	beq.n	80107a6 <f_open+0x1d2>
 8010796:	7ebb      	ldrb	r3, [r7, #26]
 8010798:	f003 0301 	and.w	r3, r3, #1
 801079c:	2b00      	cmp	r3, #0
 801079e:	d002      	beq.n	80107a6 <f_open+0x1d2>
						res = FR_DENIED;
 80107a0:	2307      	movs	r3, #7
 80107a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80107a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d128      	bne.n	8010800 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	f003 0308 	and.w	r3, r3, #8
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d003      	beq.n	80107c0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107be:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80107c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80107ce:	79fb      	ldrb	r3, [r7, #7]
 80107d0:	f023 0301 	bic.w	r3, r3, #1
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bf14      	ite	ne
 80107d8:	2301      	movne	r3, #1
 80107da:	2300      	moveq	r3, #0
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	461a      	mov	r2, r3
 80107e0:	f107 0314 	add.w	r3, r7, #20
 80107e4:	4611      	mov	r1, r2
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fe fa06 	bl	800ebf8 <inc_lock>
 80107ec:	4602      	mov	r2, r0
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d102      	bne.n	8010800 <f_open+0x22c>
 80107fa:	2302      	movs	r3, #2
 80107fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010804:	2b00      	cmp	r3, #0
 8010806:	f040 80a3 	bne.w	8010950 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801080e:	4611      	mov	r1, r2
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff f8a2 	bl	800f95a <ld_clust>
 8010816:	4602      	mov	r2, r0
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801081e:	331c      	adds	r3, #28
 8010820:	4618      	mov	r0, r3
 8010822:	f7fe f883 	bl	800e92c <ld_dword>
 8010826:	4602      	mov	r2, r0
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	88da      	ldrh	r2, [r3, #6]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	79fa      	ldrb	r2, [r7, #7]
 8010844:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2200      	movs	r2, #0
 8010850:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2200      	movs	r2, #0
 8010856:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	3330      	adds	r3, #48	; 0x30
 801085c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010860:	2100      	movs	r1, #0
 8010862:	4618      	mov	r0, r3
 8010864:	f7fe f8ed 	bl	800ea42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010868:	79fb      	ldrb	r3, [r7, #7]
 801086a:	f003 0320 	and.w	r3, r3, #32
 801086e:	2b00      	cmp	r3, #0
 8010870:	d06e      	beq.n	8010950 <f_open+0x37c>
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d06a      	beq.n	8010950 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	68da      	ldr	r2, [r3, #12]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	895b      	ldrh	r3, [r3, #10]
 8010886:	461a      	mov	r2, r3
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	899b      	ldrh	r3, [r3, #12]
 801088c:	fb03 f302 	mul.w	r3, r3, r2
 8010890:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	689b      	ldr	r3, [r3, #8]
 8010896:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	657b      	str	r3, [r7, #84]	; 0x54
 801089e:	e016      	b.n	80108ce <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe fb96 	bl	800efd6 <get_fat>
 80108aa:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80108ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d802      	bhi.n	80108b8 <f_open+0x2e4>
 80108b2:	2302      	movs	r3, #2
 80108b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80108b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108be:	d102      	bne.n	80108c6 <f_open+0x2f2>
 80108c0:	2301      	movs	r3, #1
 80108c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80108c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	657b      	str	r3, [r7, #84]	; 0x54
 80108ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d103      	bne.n	80108de <f_open+0x30a>
 80108d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108da:	429a      	cmp	r2, r3
 80108dc:	d8e0      	bhi.n	80108a0 <f_open+0x2cc>
				}
				fp->clust = clst;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108e2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80108e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d131      	bne.n	8010950 <f_open+0x37c>
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	899b      	ldrh	r3, [r3, #12]
 80108f0:	461a      	mov	r2, r3
 80108f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80108f8:	fb02 f201 	mul.w	r2, r2, r1
 80108fc:	1a9b      	subs	r3, r3, r2
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d026      	beq.n	8010950 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010906:	4618      	mov	r0, r3
 8010908:	f7fe fb46 	bl	800ef98 <clust2sect>
 801090c:	6478      	str	r0, [r7, #68]	; 0x44
 801090e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010910:	2b00      	cmp	r3, #0
 8010912:	d103      	bne.n	801091c <f_open+0x348>
						res = FR_INT_ERR;
 8010914:	2302      	movs	r3, #2
 8010916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801091a:	e019      	b.n	8010950 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	899b      	ldrh	r3, [r3, #12]
 8010920:	461a      	mov	r2, r3
 8010922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010924:	fbb3 f2f2 	udiv	r2, r3, r2
 8010928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092a:	441a      	add	r2, r3
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	7858      	ldrb	r0, [r3, #1]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6a1a      	ldr	r2, [r3, #32]
 801093e:	2301      	movs	r3, #1
 8010940:	f7fd ff7e 	bl	800e840 <disk_read>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <f_open+0x37c>
 801094a:	2301      	movs	r3, #1
 801094c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <f_open+0x38a>
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2200      	movs	r2, #0
 801095c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801095e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010962:	4618      	mov	r0, r3
 8010964:	3760      	adds	r7, #96	; 0x60
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	274a0000 	.word	0x274a0000

08010970 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b08e      	sub	sp, #56	; 0x38
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
 801097c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2200      	movs	r2, #0
 8010986:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f107 0214 	add.w	r2, r7, #20
 801098e:	4611      	mov	r1, r2
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff fda3 	bl	80104dc <validate>
 8010996:	4603      	mov	r3, r0
 8010998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801099c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d107      	bne.n	80109b4 <f_read+0x44>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	7d5b      	ldrb	r3, [r3, #21]
 80109a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <f_read+0x4a>
 80109b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109b8:	e135      	b.n	8010c26 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	7d1b      	ldrb	r3, [r3, #20]
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <f_read+0x5a>
 80109c6:	2307      	movs	r3, #7
 80109c8:	e12d      	b.n	8010c26 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	429a      	cmp	r2, r3
 80109dc:	f240 811e 	bls.w	8010c1c <f_read+0x2ac>
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80109e4:	e11a      	b.n	8010c1c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	697a      	ldr	r2, [r7, #20]
 80109ec:	8992      	ldrh	r2, [r2, #12]
 80109ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80109f2:	fb02 f201 	mul.w	r2, r2, r1
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f040 80d5 	bne.w	8010ba8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	699b      	ldr	r3, [r3, #24]
 8010a02:	697a      	ldr	r2, [r7, #20]
 8010a04:	8992      	ldrh	r2, [r2, #12]
 8010a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	8952      	ldrh	r2, [r2, #10]
 8010a0e:	3a01      	subs	r2, #1
 8010a10:	4013      	ands	r3, r2
 8010a12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d12f      	bne.n	8010a7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	699b      	ldr	r3, [r3, #24]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d103      	bne.n	8010a2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	633b      	str	r3, [r7, #48]	; 0x30
 8010a28:	e013      	b.n	8010a52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d007      	beq.n	8010a42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	4619      	mov	r1, r3
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7fe fdb0 	bl	800f59e <clmt_clust>
 8010a3e:	6338      	str	r0, [r7, #48]	; 0x30
 8010a40:	e007      	b.n	8010a52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	69db      	ldr	r3, [r3, #28]
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f7fe fac3 	bl	800efd6 <get_fat>
 8010a50:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d804      	bhi.n	8010a62 <f_read+0xf2>
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	755a      	strb	r2, [r3, #21]
 8010a5e:	2302      	movs	r3, #2
 8010a60:	e0e1      	b.n	8010c26 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a68:	d104      	bne.n	8010a74 <f_read+0x104>
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	755a      	strb	r2, [r3, #21]
 8010a70:	2301      	movs	r3, #1
 8010a72:	e0d8      	b.n	8010c26 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a7a:	697a      	ldr	r2, [r7, #20]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	69db      	ldr	r3, [r3, #28]
 8010a80:	4619      	mov	r1, r3
 8010a82:	4610      	mov	r0, r2
 8010a84:	f7fe fa88 	bl	800ef98 <clust2sect>
 8010a88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d104      	bne.n	8010a9a <f_read+0x12a>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2202      	movs	r2, #2
 8010a94:	755a      	strb	r2, [r3, #21]
 8010a96:	2302      	movs	r3, #2
 8010a98:	e0c5      	b.n	8010c26 <f_read+0x2b6>
			sect += csect;
 8010a9a:	69ba      	ldr	r2, [r7, #24]
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	899b      	ldrh	r3, [r3, #12]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d041      	beq.n	8010b3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010ab6:	69fa      	ldr	r2, [r7, #28]
 8010ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aba:	4413      	add	r3, r2
 8010abc:	697a      	ldr	r2, [r7, #20]
 8010abe:	8952      	ldrh	r2, [r2, #10]
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d905      	bls.n	8010ad0 <f_read+0x160>
					cc = fs->csize - csect;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	895b      	ldrh	r3, [r3, #10]
 8010ac8:	461a      	mov	r2, r3
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	7858      	ldrb	r0, [r3, #1]
 8010ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad6:	69ba      	ldr	r2, [r7, #24]
 8010ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ada:	f7fd feb1 	bl	800e840 <disk_read>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d004      	beq.n	8010aee <f_read+0x17e>
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	755a      	strb	r2, [r3, #21]
 8010aea:	2301      	movs	r3, #1
 8010aec:	e09b      	b.n	8010c26 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	7d1b      	ldrb	r3, [r3, #20]
 8010af2:	b25b      	sxtb	r3, r3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	da18      	bge.n	8010b2a <f_read+0x1ba>
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6a1a      	ldr	r2, [r3, #32]
 8010afc:	69bb      	ldr	r3, [r7, #24]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d911      	bls.n	8010b2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6a1a      	ldr	r2, [r3, #32]
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	697a      	ldr	r2, [r7, #20]
 8010b10:	8992      	ldrh	r2, [r2, #12]
 8010b12:	fb02 f303 	mul.w	r3, r2, r3
 8010b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b18:	18d0      	adds	r0, r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	899b      	ldrh	r3, [r3, #12]
 8010b24:	461a      	mov	r2, r3
 8010b26:	f7fd ff6b 	bl	800ea00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b32:	fb02 f303 	mul.w	r3, r2, r3
 8010b36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010b38:	e05c      	b.n	8010bf4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6a1b      	ldr	r3, [r3, #32]
 8010b3e:	69ba      	ldr	r2, [r7, #24]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d02e      	beq.n	8010ba2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
 8010b48:	b25b      	sxtb	r3, r3
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	da18      	bge.n	8010b80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	7858      	ldrb	r0, [r3, #1]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6a1a      	ldr	r2, [r3, #32]
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	f7fd fe8f 	bl	800e880 <disk_write>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d004      	beq.n	8010b72 <f_read+0x202>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	755a      	strb	r2, [r3, #21]
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e059      	b.n	8010c26 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	7d1b      	ldrb	r3, [r3, #20]
 8010b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	7858      	ldrb	r0, [r3, #1]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	69ba      	ldr	r2, [r7, #24]
 8010b8e:	f7fd fe57 	bl	800e840 <disk_read>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <f_read+0x232>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	755a      	strb	r2, [r3, #21]
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e041      	b.n	8010c26 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	69ba      	ldr	r2, [r7, #24]
 8010ba6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	899b      	ldrh	r3, [r3, #12]
 8010bac:	4618      	mov	r0, r3
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	699b      	ldr	r3, [r3, #24]
 8010bb2:	697a      	ldr	r2, [r7, #20]
 8010bb4:	8992      	ldrh	r2, [r2, #12]
 8010bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bba:	fb02 f201 	mul.w	r2, r2, r1
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	1ac3      	subs	r3, r0, r3
 8010bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d901      	bls.n	8010bd0 <f_read+0x260>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	699b      	ldr	r3, [r3, #24]
 8010bda:	697a      	ldr	r2, [r7, #20]
 8010bdc:	8992      	ldrh	r2, [r2, #12]
 8010bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8010be2:	fb02 f200 	mul.w	r2, r2, r0
 8010be6:	1a9b      	subs	r3, r3, r2
 8010be8:	440b      	add	r3, r1
 8010bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bec:	4619      	mov	r1, r3
 8010bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bf0:	f7fd ff06 	bl	800ea00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf8:	4413      	add	r3, r2
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	699a      	ldr	r2, [r3, #24]
 8010c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c02:	441a      	add	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	619a      	str	r2, [r3, #24]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0e:	441a      	add	r2, r3
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f47f aee1 	bne.w	80109e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3738      	adds	r7, #56	; 0x38
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b08c      	sub	sp, #48	; 0x30
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	60f8      	str	r0, [r7, #12]
 8010c36:	60b9      	str	r1, [r7, #8]
 8010c38:	607a      	str	r2, [r7, #4]
 8010c3a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2200      	movs	r2, #0
 8010c44:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f107 0210 	add.w	r2, r7, #16
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff fc44 	bl	80104dc <validate>
 8010c54:	4603      	mov	r3, r0
 8010c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d107      	bne.n	8010c72 <f_write+0x44>
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	7d5b      	ldrb	r3, [r3, #21]
 8010c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <f_write+0x4a>
 8010c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c76:	e16a      	b.n	8010f4e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	7d1b      	ldrb	r3, [r3, #20]
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d101      	bne.n	8010c88 <f_write+0x5a>
 8010c84:	2307      	movs	r3, #7
 8010c86:	e162      	b.n	8010f4e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	699a      	ldr	r2, [r3, #24]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	441a      	add	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	f080 814c 	bcs.w	8010f32 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	43db      	mvns	r3, r3
 8010ca0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ca2:	e146      	b.n	8010f32 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	8992      	ldrh	r2, [r2, #12]
 8010cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cb0:	fb02 f201 	mul.w	r2, r2, r1
 8010cb4:	1a9b      	subs	r3, r3, r2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f040 80f1 	bne.w	8010e9e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	693a      	ldr	r2, [r7, #16]
 8010cc2:	8992      	ldrh	r2, [r2, #12]
 8010cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cc8:	693a      	ldr	r2, [r7, #16]
 8010cca:	8952      	ldrh	r2, [r2, #10]
 8010ccc:	3a01      	subs	r2, #1
 8010cce:	4013      	ands	r3, r2
 8010cd0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d143      	bne.n	8010d60 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	699b      	ldr	r3, [r3, #24]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10c      	bne.n	8010cfa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d11a      	bne.n	8010d22 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2100      	movs	r1, #0
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fe fbbc 	bl	800f46e <create_chain>
 8010cf6:	62b8      	str	r0, [r7, #40]	; 0x28
 8010cf8:	e013      	b.n	8010d22 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d007      	beq.n	8010d12 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	699b      	ldr	r3, [r3, #24]
 8010d06:	4619      	mov	r1, r3
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f7fe fc48 	bl	800f59e <clmt_clust>
 8010d0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d10:	e007      	b.n	8010d22 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	69db      	ldr	r3, [r3, #28]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	4610      	mov	r0, r2
 8010d1c:	f7fe fba7 	bl	800f46e <create_chain>
 8010d20:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 8109 	beq.w	8010f3c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d104      	bne.n	8010d3a <f_write+0x10c>
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2202      	movs	r2, #2
 8010d34:	755a      	strb	r2, [r3, #21]
 8010d36:	2302      	movs	r3, #2
 8010d38:	e109      	b.n	8010f4e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d40:	d104      	bne.n	8010d4c <f_write+0x11e>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2201      	movs	r2, #1
 8010d46:	755a      	strb	r2, [r3, #21]
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e100      	b.n	8010f4e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d50:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d102      	bne.n	8010d60 <f_write+0x132>
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d5e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
 8010d64:	b25b      	sxtb	r3, r3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	da18      	bge.n	8010d9c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	7858      	ldrb	r0, [r3, #1]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6a1a      	ldr	r2, [r3, #32]
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f7fd fd81 	bl	800e880 <disk_write>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <f_write+0x160>
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2201      	movs	r2, #1
 8010d88:	755a      	strb	r2, [r3, #21]
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e0df      	b.n	8010f4e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	7d1b      	ldrb	r3, [r3, #20]
 8010d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	4619      	mov	r1, r3
 8010da4:	4610      	mov	r0, r2
 8010da6:	f7fe f8f7 	bl	800ef98 <clust2sect>
 8010daa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d104      	bne.n	8010dbc <f_write+0x18e>
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2202      	movs	r2, #2
 8010db6:	755a      	strb	r2, [r3, #21]
 8010db8:	2302      	movs	r3, #2
 8010dba:	e0c8      	b.n	8010f4e <f_write+0x320>
			sect += csect;
 8010dbc:	697a      	ldr	r2, [r7, #20]
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	899b      	ldrh	r3, [r3, #12]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d043      	beq.n	8010e60 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010dd8:	69ba      	ldr	r2, [r7, #24]
 8010dda:	6a3b      	ldr	r3, [r7, #32]
 8010ddc:	4413      	add	r3, r2
 8010dde:	693a      	ldr	r2, [r7, #16]
 8010de0:	8952      	ldrh	r2, [r2, #10]
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d905      	bls.n	8010df2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	461a      	mov	r2, r3
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	7858      	ldrb	r0, [r3, #1]
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	69f9      	ldr	r1, [r7, #28]
 8010dfc:	f7fd fd40 	bl	800e880 <disk_write>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d004      	beq.n	8010e10 <f_write+0x1e2>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2201      	movs	r2, #1
 8010e0a:	755a      	strb	r2, [r3, #21]
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e09e      	b.n	8010f4e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6a1a      	ldr	r2, [r3, #32]
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	6a3a      	ldr	r2, [r7, #32]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d918      	bls.n	8010e50 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	6a1a      	ldr	r2, [r3, #32]
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	8992      	ldrh	r2, [r2, #12]
 8010e30:	fb02 f303 	mul.w	r3, r2, r3
 8010e34:	69fa      	ldr	r2, [r7, #28]
 8010e36:	18d1      	adds	r1, r2, r3
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	899b      	ldrh	r3, [r3, #12]
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	f7fd fddf 	bl	800ea00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	7d1b      	ldrb	r3, [r3, #20]
 8010e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	899b      	ldrh	r3, [r3, #12]
 8010e54:	461a      	mov	r2, r3
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	fb02 f303 	mul.w	r3, r2, r3
 8010e5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010e5e:	e04b      	b.n	8010ef8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6a1b      	ldr	r3, [r3, #32]
 8010e64:	697a      	ldr	r2, [r7, #20]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d016      	beq.n	8010e98 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	699a      	ldr	r2, [r3, #24]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d210      	bcs.n	8010e98 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	7858      	ldrb	r0, [r3, #1]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e80:	2301      	movs	r3, #1
 8010e82:	697a      	ldr	r2, [r7, #20]
 8010e84:	f7fd fcdc 	bl	800e840 <disk_read>
 8010e88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2201      	movs	r2, #1
 8010e92:	755a      	strb	r2, [r3, #21]
 8010e94:	2301      	movs	r3, #1
 8010e96:	e05a      	b.n	8010f4e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	697a      	ldr	r2, [r7, #20]
 8010e9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	899b      	ldrh	r3, [r3, #12]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	699b      	ldr	r3, [r3, #24]
 8010ea8:	693a      	ldr	r2, [r7, #16]
 8010eaa:	8992      	ldrh	r2, [r2, #12]
 8010eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eb0:	fb02 f201 	mul.w	r2, r2, r1
 8010eb4:	1a9b      	subs	r3, r3, r2
 8010eb6:	1ac3      	subs	r3, r0, r3
 8010eb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d901      	bls.n	8010ec6 <f_write+0x298>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	699b      	ldr	r3, [r3, #24]
 8010ed0:	693a      	ldr	r2, [r7, #16]
 8010ed2:	8992      	ldrh	r2, [r2, #12]
 8010ed4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ed8:	fb02 f200 	mul.w	r2, r2, r0
 8010edc:	1a9b      	subs	r3, r3, r2
 8010ede:	440b      	add	r3, r1
 8010ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee2:	69f9      	ldr	r1, [r7, #28]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fd8b 	bl	800ea00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	7d1b      	ldrb	r3, [r3, #20]
 8010eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010ef8:	69fa      	ldr	r2, [r7, #28]
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	4413      	add	r3, r2
 8010efe:	61fb      	str	r3, [r7, #28]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	699a      	ldr	r2, [r3, #24]
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	441a      	add	r2, r3
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	619a      	str	r2, [r3, #24]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	68da      	ldr	r2, [r3, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	bf38      	it	cc
 8010f18:	461a      	movcc	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	60da      	str	r2, [r3, #12]
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	681a      	ldr	r2, [r3, #0]
 8010f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f24:	441a      	add	r2, r3
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f47f aeb5 	bne.w	8010ca4 <f_write+0x76>
 8010f3a:	e000      	b.n	8010f3e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f3c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	7d1b      	ldrb	r3, [r3, #20]
 8010f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3730      	adds	r7, #48	; 0x30
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b086      	sub	sp, #24
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f107 0208 	add.w	r2, r7, #8
 8010f66:	4611      	mov	r1, r2
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fab7 	bl	80104dc <validate>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d167      	bne.n	8011048 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7d1b      	ldrb	r3, [r3, #20]
 8010f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d061      	beq.n	8011048 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	7d1b      	ldrb	r3, [r3, #20]
 8010f88:	b25b      	sxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	da15      	bge.n	8010fba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	7858      	ldrb	r0, [r3, #1]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6a1a      	ldr	r2, [r3, #32]
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	f7fd fc6f 	bl	800e880 <disk_write>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d001      	beq.n	8010fac <f_sync+0x54>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	e04e      	b.n	801104a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7d1b      	ldrb	r3, [r3, #20]
 8010fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010fba:	4b26      	ldr	r3, [pc, #152]	; (8011054 <f_sync+0xfc>)
 8010fbc:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	f7fd ff48 	bl	800ee5c <move_window>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010fd0:	7dfb      	ldrb	r3, [r7, #23]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d138      	bne.n	8011048 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fda:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	330b      	adds	r3, #11
 8010fe0:	781a      	ldrb	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	330b      	adds	r3, #11
 8010fe6:	f042 0220 	orr.w	r2, r2, #32
 8010fea:	b2d2      	uxtb	r2, r2
 8010fec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6818      	ldr	r0, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	68f9      	ldr	r1, [r7, #12]
 8010ffa:	f7fe fccd 	bl	800f998 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f103 021c 	add.w	r2, r3, #28
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	4619      	mov	r1, r3
 801100a:	4610      	mov	r0, r2
 801100c:	f7fd fccc 	bl	800e9a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	3316      	adds	r3, #22
 8011014:	6939      	ldr	r1, [r7, #16]
 8011016:	4618      	mov	r0, r3
 8011018:	f7fd fcc6 	bl	800e9a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3312      	adds	r3, #18
 8011020:	2100      	movs	r1, #0
 8011022:	4618      	mov	r0, r3
 8011024:	f7fd fca5 	bl	800e972 <st_word>
					fs->wflag = 1;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2201      	movs	r2, #1
 801102c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	4618      	mov	r0, r3
 8011032:	f7fd ff41 	bl	800eeb8 <sync_fs>
 8011036:	4603      	mov	r3, r0
 8011038:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7d1b      	ldrb	r3, [r3, #20]
 801103e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011042:	b2da      	uxtb	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011048:	7dfb      	ldrb	r3, [r7, #23]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	274a0000 	.word	0x274a0000

08011058 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f7ff ff79 	bl	8010f58 <f_sync>
 8011066:	4603      	mov	r3, r0
 8011068:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801106a:	7bfb      	ldrb	r3, [r7, #15]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d118      	bne.n	80110a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f107 0208 	add.w	r2, r7, #8
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f7ff fa2f 	bl	80104dc <validate>
 801107e:	4603      	mov	r3, r0
 8011080:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011082:	7bfb      	ldrb	r3, [r7, #15]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10c      	bne.n	80110a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	4618      	mov	r0, r3
 801108e:	f7fd fe41 	bl	800ed14 <dec_lock>
 8011092:	4603      	mov	r3, r0
 8011094:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011096:	7bfb      	ldrb	r3, [r7, #15]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d102      	bne.n	80110a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80110a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b091      	sub	sp, #68	; 0x44
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80110b4:	f107 0108 	add.w	r1, r7, #8
 80110b8:	1d3b      	adds	r3, r7, #4
 80110ba:	2200      	movs	r2, #0
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe ff87 	bl	800ffd0 <find_volume>
 80110c2:	4603      	mov	r3, r0
 80110c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80110c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d131      	bne.n	8011134 <f_chdir+0x88>
		dj.obj.fs = fs;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	f107 030c 	add.w	r3, r7, #12
 80110da:	4611      	mov	r1, r2
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fe fe47 	bl	800fd70 <follow_path>
 80110e2:	4603      	mov	r3, r0
 80110e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80110e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d11a      	bne.n	8011126 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80110f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80110f4:	b25b      	sxtb	r3, r3
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	da03      	bge.n	8011102 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	697a      	ldr	r2, [r7, #20]
 80110fe:	619a      	str	r2, [r3, #24]
 8011100:	e011      	b.n	8011126 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011102:	7cbb      	ldrb	r3, [r7, #18]
 8011104:	f003 0310 	and.w	r3, r3, #16
 8011108:	2b00      	cmp	r3, #0
 801110a:	d009      	beq.n	8011120 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011110:	68bc      	ldr	r4, [r7, #8]
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f7fe fc20 	bl	800f95a <ld_clust>
 801111a:	4603      	mov	r3, r0
 801111c:	61a3      	str	r3, [r4, #24]
 801111e:	e002      	b.n	8011126 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011120:	2305      	movs	r3, #5
 8011122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011126:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801112a:	2b04      	cmp	r3, #4
 801112c:	d102      	bne.n	8011134 <f_chdir+0x88>
 801112e:	2305      	movs	r3, #5
 8011130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011138:	4618      	mov	r0, r3
 801113a:	3744      	adds	r7, #68	; 0x44
 801113c:	46bd      	mov	sp, r7
 801113e:	bd90      	pop	{r4, r7, pc}

08011140 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b090      	sub	sp, #64	; 0x40
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f107 0208 	add.w	r2, r7, #8
 8011150:	4611      	mov	r1, r2
 8011152:	4618      	mov	r0, r3
 8011154:	f7ff f9c2 	bl	80104dc <validate>
 8011158:	4603      	mov	r3, r0
 801115a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801115e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011162:	2b00      	cmp	r3, #0
 8011164:	d103      	bne.n	801116e <f_lseek+0x2e>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	7d5b      	ldrb	r3, [r3, #21]
 801116a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801116e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <f_lseek+0x3c>
 8011176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801117a:	e201      	b.n	8011580 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 80d9 	beq.w	8011338 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801118c:	d15a      	bne.n	8011244 <f_lseek+0x104>
			tbl = fp->cltbl;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011192:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011196:	1d1a      	adds	r2, r3, #4
 8011198:	627a      	str	r2, [r7, #36]	; 0x24
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	617b      	str	r3, [r7, #20]
 801119e:	2302      	movs	r3, #2
 80111a0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80111a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d03a      	beq.n	8011224 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	613b      	str	r3, [r7, #16]
 80111b2:	2300      	movs	r3, #0
 80111b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b8:	3302      	adds	r3, #2
 80111ba:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80111bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111be:	60fb      	str	r3, [r7, #12]
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	3301      	adds	r3, #1
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fd ff03 	bl	800efd6 <get_fat>
 80111d0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d804      	bhi.n	80111e2 <f_lseek+0xa2>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2202      	movs	r2, #2
 80111dc:	755a      	strb	r2, [r3, #21]
 80111de:	2302      	movs	r3, #2
 80111e0:	e1ce      	b.n	8011580 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e8:	d104      	bne.n	80111f4 <f_lseek+0xb4>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2201      	movs	r2, #1
 80111ee:	755a      	strb	r2, [r3, #21]
 80111f0:	2301      	movs	r3, #1
 80111f2:	e1c5      	b.n	8011580 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3301      	adds	r3, #1
 80111f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d0de      	beq.n	80111bc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80111fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	429a      	cmp	r2, r3
 8011204:	d809      	bhi.n	801121a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011208:	1d1a      	adds	r2, r3, #4
 801120a:	627a      	str	r2, [r7, #36]	; 0x24
 801120c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	627a      	str	r2, [r7, #36]	; 0x24
 8011216:	693a      	ldr	r2, [r7, #16]
 8011218:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	69db      	ldr	r3, [r3, #28]
 801121e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011220:	429a      	cmp	r2, r3
 8011222:	d3c4      	bcc.n	80111ae <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801122a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801122c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	429a      	cmp	r2, r3
 8011232:	d803      	bhi.n	801123c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	e19f      	b.n	801157c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801123c:	2311      	movs	r3, #17
 801123e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011242:	e19b      	b.n	801157c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	683a      	ldr	r2, [r7, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d902      	bls.n	8011254 <f_lseek+0x114>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	683a      	ldr	r2, [r7, #0]
 8011258:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	f000 818d 	beq.w	801157c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	3b01      	subs	r3, #1
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7fe f998 	bl	800f59e <clmt_clust>
 801126e:	4602      	mov	r2, r0
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	69db      	ldr	r3, [r3, #28]
 801127a:	4619      	mov	r1, r3
 801127c:	4610      	mov	r0, r2
 801127e:	f7fd fe8b 	bl	800ef98 <clust2sect>
 8011282:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d104      	bne.n	8011294 <f_lseek+0x154>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2202      	movs	r2, #2
 801128e:	755a      	strb	r2, [r3, #21]
 8011290:	2302      	movs	r3, #2
 8011292:	e175      	b.n	8011580 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	3b01      	subs	r3, #1
 8011298:	68ba      	ldr	r2, [r7, #8]
 801129a:	8992      	ldrh	r2, [r2, #12]
 801129c:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	8952      	ldrh	r2, [r2, #10]
 80112a4:	3a01      	subs	r2, #1
 80112a6:	4013      	ands	r3, r2
 80112a8:	69ba      	ldr	r2, [r7, #24]
 80112aa:	4413      	add	r3, r2
 80112ac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	8992      	ldrh	r2, [r2, #12]
 80112b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80112ba:	fb02 f201 	mul.w	r2, r2, r1
 80112be:	1a9b      	subs	r3, r3, r2
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 815b 	beq.w	801157c <f_lseek+0x43c>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a1b      	ldr	r3, [r3, #32]
 80112ca:	69ba      	ldr	r2, [r7, #24]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	f000 8155 	beq.w	801157c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	7d1b      	ldrb	r3, [r3, #20]
 80112d6:	b25b      	sxtb	r3, r3
 80112d8:	2b00      	cmp	r3, #0
 80112da:	da18      	bge.n	801130e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	7858      	ldrb	r0, [r3, #1]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6a1a      	ldr	r2, [r3, #32]
 80112ea:	2301      	movs	r3, #1
 80112ec:	f7fd fac8 	bl	800e880 <disk_write>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d004      	beq.n	8011300 <f_lseek+0x1c0>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2201      	movs	r2, #1
 80112fa:	755a      	strb	r2, [r3, #21]
 80112fc:	2301      	movs	r3, #1
 80112fe:	e13f      	b.n	8011580 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7d1b      	ldrb	r3, [r3, #20]
 8011304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011308:	b2da      	uxtb	r2, r3
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	7858      	ldrb	r0, [r3, #1]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011318:	2301      	movs	r3, #1
 801131a:	69ba      	ldr	r2, [r7, #24]
 801131c:	f7fd fa90 	bl	800e840 <disk_read>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d004      	beq.n	8011330 <f_lseek+0x1f0>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2201      	movs	r2, #1
 801132a:	755a      	strb	r2, [r3, #21]
 801132c:	2301      	movs	r3, #1
 801132e:	e127      	b.n	8011580 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	621a      	str	r2, [r3, #32]
 8011336:	e121      	b.n	801157c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	429a      	cmp	r2, r3
 8011340:	d908      	bls.n	8011354 <f_lseek+0x214>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	7d1b      	ldrb	r3, [r3, #20]
 8011346:	f003 0302 	and.w	r3, r3, #2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d102      	bne.n	8011354 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801135a:	2300      	movs	r3, #0
 801135c:	637b      	str	r3, [r7, #52]	; 0x34
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011362:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	f000 80b5 	beq.w	80114d6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	895b      	ldrh	r3, [r3, #10]
 8011370:	461a      	mov	r2, r3
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	fb03 f302 	mul.w	r3, r3, r2
 801137a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801137c:	6a3b      	ldr	r3, [r7, #32]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d01b      	beq.n	80113ba <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	1e5a      	subs	r2, r3, #1
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	fbb2 f2f3 	udiv	r2, r2, r3
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	1e59      	subs	r1, r3, #1
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011396:	429a      	cmp	r2, r3
 8011398:	d30f      	bcc.n	80113ba <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	1e5a      	subs	r2, r3, #1
 801139e:	69fb      	ldr	r3, [r7, #28]
 80113a0:	425b      	negs	r3, r3
 80113a2:	401a      	ands	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	699b      	ldr	r3, [r3, #24]
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	69db      	ldr	r3, [r3, #28]
 80113b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80113b8:	e022      	b.n	8011400 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80113c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d119      	bne.n	80113fa <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2100      	movs	r1, #0
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fe f84f 	bl	800f46e <create_chain>
 80113d0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d104      	bne.n	80113e2 <f_lseek+0x2a2>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2202      	movs	r2, #2
 80113dc:	755a      	strb	r2, [r3, #21]
 80113de:	2302      	movs	r3, #2
 80113e0:	e0ce      	b.n	8011580 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e8:	d104      	bne.n	80113f4 <f_lseek+0x2b4>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2201      	movs	r2, #1
 80113ee:	755a      	strb	r2, [r3, #21]
 80113f0:	2301      	movs	r3, #1
 80113f2:	e0c5      	b.n	8011580 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113f8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113fe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011402:	2b00      	cmp	r3, #0
 8011404:	d067      	beq.n	80114d6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011406:	e03a      	b.n	801147e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699a      	ldr	r2, [r3, #24]
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	441a      	add	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00b      	beq.n	8011440 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801142c:	4618      	mov	r0, r3
 801142e:	f7fe f81e 	bl	800f46e <create_chain>
 8011432:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011436:	2b00      	cmp	r3, #0
 8011438:	d108      	bne.n	801144c <f_lseek+0x30c>
							ofs = 0; break;
 801143a:	2300      	movs	r3, #0
 801143c:	603b      	str	r3, [r7, #0]
 801143e:	e022      	b.n	8011486 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011444:	4618      	mov	r0, r3
 8011446:	f7fd fdc6 	bl	800efd6 <get_fat>
 801144a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801144c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011452:	d104      	bne.n	801145e <f_lseek+0x31e>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	755a      	strb	r2, [r3, #21]
 801145a:	2301      	movs	r3, #1
 801145c:	e090      	b.n	8011580 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011460:	2b01      	cmp	r3, #1
 8011462:	d904      	bls.n	801146e <f_lseek+0x32e>
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	69db      	ldr	r3, [r3, #28]
 8011468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801146a:	429a      	cmp	r2, r3
 801146c:	d304      	bcc.n	8011478 <f_lseek+0x338>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2202      	movs	r2, #2
 8011472:	755a      	strb	r2, [r3, #21]
 8011474:	2302      	movs	r3, #2
 8011476:	e083      	b.n	8011580 <f_lseek+0x440>
					fp->clust = clst;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801147c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	429a      	cmp	r2, r3
 8011484:	d8c0      	bhi.n	8011408 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	699a      	ldr	r2, [r3, #24]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	441a      	add	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	899b      	ldrh	r3, [r3, #12]
 8011496:	461a      	mov	r2, r3
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	fbb3 f1f2 	udiv	r1, r3, r2
 801149e:	fb02 f201 	mul.w	r2, r2, r1
 80114a2:	1a9b      	subs	r3, r3, r2
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d016      	beq.n	80114d6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fd fd73 	bl	800ef98 <clust2sect>
 80114b2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80114b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d104      	bne.n	80114c4 <f_lseek+0x384>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2202      	movs	r2, #2
 80114be:	755a      	strb	r2, [r3, #21]
 80114c0:	2302      	movs	r3, #2
 80114c2:	e05d      	b.n	8011580 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	899b      	ldrh	r3, [r3, #12]
 80114c8:	461a      	mov	r2, r3
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80114d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114d2:	4413      	add	r3, r2
 80114d4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	699a      	ldr	r2, [r3, #24]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d90a      	bls.n	80114f8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	699a      	ldr	r2, [r3, #24]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	7d1b      	ldrb	r3, [r3, #20]
 80114ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114f2:	b2da      	uxtb	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	68ba      	ldr	r2, [r7, #8]
 80114fe:	8992      	ldrh	r2, [r2, #12]
 8011500:	fbb3 f1f2 	udiv	r1, r3, r2
 8011504:	fb02 f201 	mul.w	r2, r2, r1
 8011508:	1a9b      	subs	r3, r3, r2
 801150a:	2b00      	cmp	r3, #0
 801150c:	d036      	beq.n	801157c <f_lseek+0x43c>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a1b      	ldr	r3, [r3, #32]
 8011512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011514:	429a      	cmp	r2, r3
 8011516:	d031      	beq.n	801157c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	7d1b      	ldrb	r3, [r3, #20]
 801151c:	b25b      	sxtb	r3, r3
 801151e:	2b00      	cmp	r3, #0
 8011520:	da18      	bge.n	8011554 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	7858      	ldrb	r0, [r3, #1]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6a1a      	ldr	r2, [r3, #32]
 8011530:	2301      	movs	r3, #1
 8011532:	f7fd f9a5 	bl	800e880 <disk_write>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d004      	beq.n	8011546 <f_lseek+0x406>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2201      	movs	r2, #1
 8011540:	755a      	strb	r2, [r3, #21]
 8011542:	2301      	movs	r3, #1
 8011544:	e01c      	b.n	8011580 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7d1b      	ldrb	r3, [r3, #20]
 801154a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801154e:	b2da      	uxtb	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	7858      	ldrb	r0, [r3, #1]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801155e:	2301      	movs	r3, #1
 8011560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011562:	f7fd f96d 	bl	800e840 <disk_read>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d004      	beq.n	8011576 <f_lseek+0x436>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2201      	movs	r2, #1
 8011570:	755a      	strb	r2, [r3, #21]
 8011572:	2301      	movs	r3, #1
 8011574:	e004      	b.n	8011580 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801157a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801157c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011580:	4618      	mov	r0, r3
 8011582:	3740      	adds	r7, #64	; 0x40
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b09e      	sub	sp, #120	; 0x78
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011590:	2300      	movs	r3, #0
 8011592:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011594:	f107 010c 	add.w	r1, r7, #12
 8011598:	1d3b      	adds	r3, r7, #4
 801159a:	2202      	movs	r2, #2
 801159c:	4618      	mov	r0, r3
 801159e:	f7fe fd17 	bl	800ffd0 <find_volume>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80115ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f040 80a4 	bne.w	80116fe <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115bc:	4611      	mov	r1, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fe fbd6 	bl	800fd70 <follow_path>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80115ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d108      	bne.n	80115e4 <f_unlink+0x5c>
 80115d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80115d6:	f003 0320 	and.w	r3, r3, #32
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d002      	beq.n	80115e4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80115de:	2306      	movs	r3, #6
 80115e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80115e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d108      	bne.n	80115fe <f_unlink+0x76>
 80115ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115f0:	2102      	movs	r1, #2
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fd fa82 	bl	800eafc <chk_lock>
 80115f8:	4603      	mov	r3, r0
 80115fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80115fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011602:	2b00      	cmp	r3, #0
 8011604:	d17b      	bne.n	80116fe <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801160a:	b25b      	sxtb	r3, r3
 801160c:	2b00      	cmp	r3, #0
 801160e:	da03      	bge.n	8011618 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011610:	2306      	movs	r3, #6
 8011612:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011616:	e008      	b.n	801162a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011618:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011624:	2307      	movs	r3, #7
 8011626:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801162a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801162e:	2b00      	cmp	r3, #0
 8011630:	d13d      	bne.n	80116ae <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f7fe f98e 	bl	800f95a <ld_clust>
 801163e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011640:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011644:	f003 0310 	and.w	r3, r3, #16
 8011648:	2b00      	cmp	r3, #0
 801164a:	d030      	beq.n	80116ae <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011652:	429a      	cmp	r2, r3
 8011654:	d103      	bne.n	801165e <f_unlink+0xd6>
						res = FR_DENIED;
 8011656:	2307      	movs	r3, #7
 8011658:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801165c:	e027      	b.n	80116ae <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011664:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011666:	f107 0310 	add.w	r3, r7, #16
 801166a:	2100      	movs	r1, #0
 801166c:	4618      	mov	r0, r3
 801166e:	f7fd ffce 	bl	800f60e <dir_sdi>
 8011672:	4603      	mov	r3, r0
 8011674:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011678:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801167c:	2b00      	cmp	r3, #0
 801167e:	d116      	bne.n	80116ae <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011680:	f107 0310 	add.w	r3, r7, #16
 8011684:	2100      	movs	r1, #0
 8011686:	4618      	mov	r0, r3
 8011688:	f7fe f9a6 	bl	800f9d8 <dir_read>
 801168c:	4603      	mov	r3, r0
 801168e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011692:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011696:	2b00      	cmp	r3, #0
 8011698:	d102      	bne.n	80116a0 <f_unlink+0x118>
 801169a:	2307      	movs	r3, #7
 801169c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80116a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116a4:	2b04      	cmp	r3, #4
 80116a6:	d102      	bne.n	80116ae <f_unlink+0x126>
 80116a8:	2300      	movs	r3, #0
 80116aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80116ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d123      	bne.n	80116fe <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80116b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fe fa70 	bl	800fba0 <dir_remove>
 80116c0:	4603      	mov	r3, r0
 80116c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80116c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10c      	bne.n	80116e8 <f_unlink+0x160>
 80116ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80116d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80116d8:	2200      	movs	r2, #0
 80116da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fd fe61 	bl	800f3a4 <remove_chain>
 80116e2:	4603      	mov	r3, r0
 80116e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80116e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d106      	bne.n	80116fe <f_unlink+0x176>
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fd fbe0 	bl	800eeb8 <sync_fs>
 80116f8:	4603      	mov	r3, r0
 80116fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80116fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011702:	4618      	mov	r0, r3
 8011704:	3778      	adds	r7, #120	; 0x78
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b096      	sub	sp, #88	; 0x58
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011714:	f107 0108 	add.w	r1, r7, #8
 8011718:	1d3b      	adds	r3, r7, #4
 801171a:	2202      	movs	r2, #2
 801171c:	4618      	mov	r0, r3
 801171e:	f7fe fc57 	bl	800ffd0 <find_volume>
 8011722:	4603      	mov	r3, r0
 8011724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801172c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011730:	2b00      	cmp	r3, #0
 8011732:	f040 80fe 	bne.w	8011932 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	f107 030c 	add.w	r3, r7, #12
 801173c:	4611      	mov	r1, r2
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fb16 	bl	800fd70 <follow_path>
 8011744:	4603      	mov	r3, r0
 8011746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801174a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <f_mkdir+0x4c>
 8011752:	2308      	movs	r3, #8
 8011754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801175c:	2b04      	cmp	r3, #4
 801175e:	d108      	bne.n	8011772 <f_mkdir+0x66>
 8011760:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011764:	f003 0320 	and.w	r3, r3, #32
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801176c:	2306      	movs	r3, #6
 801176e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011776:	2b04      	cmp	r3, #4
 8011778:	f040 80db 	bne.w	8011932 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801177c:	f107 030c 	add.w	r3, r7, #12
 8011780:	2100      	movs	r1, #0
 8011782:	4618      	mov	r0, r3
 8011784:	f7fd fe73 	bl	800f46e <create_chain>
 8011788:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	895b      	ldrh	r3, [r3, #10]
 801178e:	461a      	mov	r2, r3
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	899b      	ldrh	r3, [r3, #12]
 8011794:	fb03 f302 	mul.w	r3, r3, r2
 8011798:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80117a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d102      	bne.n	80117ac <f_mkdir+0xa0>
 80117a6:	2307      	movs	r3, #7
 80117a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80117ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	d102      	bne.n	80117b8 <f_mkdir+0xac>
 80117b2:	2302      	movs	r3, #2
 80117b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117be:	d102      	bne.n	80117c6 <f_mkdir+0xba>
 80117c0:	2301      	movs	r3, #1
 80117c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80117c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d106      	bne.n	80117dc <f_mkdir+0xd0>
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd faff 	bl	800edd4 <sync_window>
 80117d6:	4603      	mov	r3, r0
 80117d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80117dc:	4b58      	ldr	r3, [pc, #352]	; (8011940 <f_mkdir+0x234>)
 80117de:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80117e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d16c      	bne.n	80118c2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fd fbd3 	bl	800ef98 <clust2sect>
 80117f2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	3338      	adds	r3, #56	; 0x38
 80117f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	899b      	ldrh	r3, [r3, #12]
 80117fe:	461a      	mov	r2, r3
 8011800:	2100      	movs	r1, #0
 8011802:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011804:	f7fd f91d 	bl	800ea42 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011808:	220b      	movs	r2, #11
 801180a:	2120      	movs	r1, #32
 801180c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801180e:	f7fd f918 	bl	800ea42 <mem_set>
					dir[DIR_Name] = '.';
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	222e      	movs	r2, #46	; 0x2e
 8011816:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181a:	330b      	adds	r3, #11
 801181c:	2210      	movs	r2, #16
 801181e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011822:	3316      	adds	r3, #22
 8011824:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011826:	4618      	mov	r0, r3
 8011828:	f7fd f8be 	bl	800e9a8 <st_dword>
					st_clust(fs, dir, dcl);
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011832:	4618      	mov	r0, r3
 8011834:	f7fe f8b0 	bl	800f998 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801183a:	3320      	adds	r3, #32
 801183c:	2220      	movs	r2, #32
 801183e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011840:	4618      	mov	r0, r3
 8011842:	f7fd f8dd 	bl	800ea00 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011848:	3321      	adds	r3, #33	; 0x21
 801184a:	222e      	movs	r2, #46	; 0x2e
 801184c:	701a      	strb	r2, [r3, #0]
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	2b03      	cmp	r3, #3
 8011858:	d106      	bne.n	8011868 <f_mkdir+0x15c>
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011860:	429a      	cmp	r2, r3
 8011862:	d101      	bne.n	8011868 <f_mkdir+0x15c>
 8011864:	2300      	movs	r3, #0
 8011866:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011868:	68b8      	ldr	r0, [r7, #8]
 801186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186c:	3320      	adds	r3, #32
 801186e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011870:	4619      	mov	r1, r3
 8011872:	f7fe f891 	bl	800f998 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	895b      	ldrh	r3, [r3, #10]
 801187a:	653b      	str	r3, [r7, #80]	; 0x50
 801187c:	e01c      	b.n	80118b8 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801187e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011880:	1c5a      	adds	r2, r3, #1
 8011882:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2201      	movs	r2, #1
 801188c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	4618      	mov	r0, r3
 8011892:	f7fd fa9f 	bl	800edd4 <sync_window>
 8011896:	4603      	mov	r3, r0
 8011898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801189c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d10d      	bne.n	80118c0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	461a      	mov	r2, r3
 80118aa:	2100      	movs	r1, #0
 80118ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118ae:	f7fd f8c8 	bl	800ea42 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80118b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b4:	3b01      	subs	r3, #1
 80118b6:	653b      	str	r3, [r7, #80]	; 0x50
 80118b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d1df      	bne.n	801187e <f_mkdir+0x172>
 80118be:	e000      	b.n	80118c2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80118c0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80118c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d107      	bne.n	80118da <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80118ca:	f107 030c 	add.w	r3, r7, #12
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe f934 	bl	800fb3c <dir_register>
 80118d4:	4603      	mov	r3, r0
 80118d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80118da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d120      	bne.n	8011924 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80118e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80118e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e8:	3316      	adds	r3, #22
 80118ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fd f85b 	bl	800e9a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fe f84d 	bl	800f998 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80118fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011900:	330b      	adds	r3, #11
 8011902:	2210      	movs	r2, #16
 8011904:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	2201      	movs	r2, #1
 801190a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801190c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10e      	bne.n	8011932 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd face 	bl	800eeb8 <sync_fs>
 801191c:	4603      	mov	r3, r0
 801191e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011922:	e006      	b.n	8011932 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011924:	f107 030c 	add.w	r3, r7, #12
 8011928:	2200      	movs	r2, #0
 801192a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801192c:	4618      	mov	r0, r3
 801192e:	f7fd fd39 	bl	800f3a4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011936:	4618      	mov	r0, r3
 8011938:	3758      	adds	r7, #88	; 0x58
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	274a0000 	.word	0x274a0000

08011944 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b088      	sub	sp, #32
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011950:	2300      	movs	r3, #0
 8011952:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011958:	e017      	b.n	801198a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801195a:	f107 0310 	add.w	r3, r7, #16
 801195e:	f107 0114 	add.w	r1, r7, #20
 8011962:	2201      	movs	r2, #1
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f7ff f803 	bl	8010970 <f_read>
		if (rc != 1) break;
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d112      	bne.n	8011996 <f_gets+0x52>
		c = s[0];
 8011970:	7d3b      	ldrb	r3, [r7, #20]
 8011972:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	1c5a      	adds	r2, r3, #1
 8011978:	61ba      	str	r2, [r7, #24]
 801197a:	7dfa      	ldrb	r2, [r7, #23]
 801197c:	701a      	strb	r2, [r3, #0]
		n++;
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	3301      	adds	r3, #1
 8011982:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011984:	7dfb      	ldrb	r3, [r7, #23]
 8011986:	2b0a      	cmp	r3, #10
 8011988:	d007      	beq.n	801199a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	3b01      	subs	r3, #1
 801198e:	69fa      	ldr	r2, [r7, #28]
 8011990:	429a      	cmp	r2, r3
 8011992:	dbe2      	blt.n	801195a <f_gets+0x16>
 8011994:	e002      	b.n	801199c <f_gets+0x58>
		if (rc != 1) break;
 8011996:	bf00      	nop
 8011998:	e000      	b.n	801199c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801199a:	bf00      	nop
	}
	*p = 0;
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	2200      	movs	r2, #0
 80119a0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80119a2:	69fb      	ldr	r3, [r7, #28]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <f_gets+0x68>
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	e000      	b.n	80119ae <f_gets+0x6a>
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3720      	adds	r7, #32
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	4613      	mov	r3, r2
 80119c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80119c6:	2301      	movs	r3, #1
 80119c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80119ce:	4b1f      	ldr	r3, [pc, #124]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119d0:	7a5b      	ldrb	r3, [r3, #9]
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d131      	bne.n	8011a3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80119d8:	4b1c      	ldr	r3, [pc, #112]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119da:	7a5b      	ldrb	r3, [r3, #9]
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	461a      	mov	r2, r3
 80119e0:	4b1a      	ldr	r3, [pc, #104]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119e2:	2100      	movs	r1, #0
 80119e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80119e6:	4b19      	ldr	r3, [pc, #100]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119e8:	7a5b      	ldrb	r3, [r3, #9]
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	4a17      	ldr	r2, [pc, #92]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	4413      	add	r3, r2
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80119f6:	4b15      	ldr	r3, [pc, #84]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 80119f8:	7a5b      	ldrb	r3, [r3, #9]
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	461a      	mov	r2, r3
 80119fe:	4b13      	ldr	r3, [pc, #76]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 8011a00:	4413      	add	r3, r2
 8011a02:	79fa      	ldrb	r2, [r7, #7]
 8011a04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a06:	4b11      	ldr	r3, [pc, #68]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 8011a08:	7a5b      	ldrb	r3, [r3, #9]
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	1c5a      	adds	r2, r3, #1
 8011a0e:	b2d1      	uxtb	r1, r2
 8011a10:	4a0e      	ldr	r2, [pc, #56]	; (8011a4c <FATFS_LinkDriverEx+0x94>)
 8011a12:	7251      	strb	r1, [r2, #9]
 8011a14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a16:	7dbb      	ldrb	r3, [r7, #22]
 8011a18:	3330      	adds	r3, #48	; 0x30
 8011a1a:	b2da      	uxtb	r2, r3
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	3301      	adds	r3, #1
 8011a24:	223a      	movs	r2, #58	; 0x3a
 8011a26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	222f      	movs	r2, #47	; 0x2f
 8011a2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	3303      	adds	r3, #3
 8011a34:	2200      	movs	r2, #0
 8011a36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	371c      	adds	r7, #28
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	2003745c 	.word	0x2003745c

08011a50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	6839      	ldr	r1, [r7, #0]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7ff ffaa 	bl	80119b8 <FATFS_LinkDriverEx>
 8011a64:	4603      	mov	r3, r0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <__cxa_guard_acquire>:
 8011a6e:	6803      	ldr	r3, [r0, #0]
 8011a70:	07db      	lsls	r3, r3, #31
 8011a72:	d406      	bmi.n	8011a82 <__cxa_guard_acquire+0x14>
 8011a74:	7843      	ldrb	r3, [r0, #1]
 8011a76:	b103      	cbz	r3, 8011a7a <__cxa_guard_acquire+0xc>
 8011a78:	deff      	udf	#255	; 0xff
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	7043      	strb	r3, [r0, #1]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	4770      	bx	lr
 8011a82:	2000      	movs	r0, #0
 8011a84:	4770      	bx	lr

08011a86 <__cxa_guard_release>:
 8011a86:	2301      	movs	r3, #1
 8011a88:	6003      	str	r3, [r0, #0]
 8011a8a:	4770      	bx	lr
 8011a8c:	0000      	movs	r0, r0
	...

08011a90 <cos>:
 8011a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a92:	ec51 0b10 	vmov	r0, r1, d0
 8011a96:	4a1e      	ldr	r2, [pc, #120]	; (8011b10 <cos+0x80>)
 8011a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	dc06      	bgt.n	8011aae <cos+0x1e>
 8011aa0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011b08 <cos+0x78>
 8011aa4:	f000 fa74 	bl	8011f90 <__kernel_cos>
 8011aa8:	ec51 0b10 	vmov	r0, r1, d0
 8011aac:	e007      	b.n	8011abe <cos+0x2e>
 8011aae:	4a19      	ldr	r2, [pc, #100]	; (8011b14 <cos+0x84>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	dd09      	ble.n	8011ac8 <cos+0x38>
 8011ab4:	ee10 2a10 	vmov	r2, s0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	f7ee fbfd 	bl	80002b8 <__aeabi_dsub>
 8011abe:	ec41 0b10 	vmov	d0, r0, r1
 8011ac2:	b005      	add	sp, #20
 8011ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ac8:	4668      	mov	r0, sp
 8011aca:	f000 f86d 	bl	8011ba8 <__ieee754_rem_pio2>
 8011ace:	f000 0003 	and.w	r0, r0, #3
 8011ad2:	2801      	cmp	r0, #1
 8011ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ad8:	ed9d 0b00 	vldr	d0, [sp]
 8011adc:	d007      	beq.n	8011aee <cos+0x5e>
 8011ade:	2802      	cmp	r0, #2
 8011ae0:	d00e      	beq.n	8011b00 <cos+0x70>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d0de      	beq.n	8011aa4 <cos+0x14>
 8011ae6:	2001      	movs	r0, #1
 8011ae8:	f000 fe5a 	bl	80127a0 <__kernel_sin>
 8011aec:	e7dc      	b.n	8011aa8 <cos+0x18>
 8011aee:	f000 fe57 	bl	80127a0 <__kernel_sin>
 8011af2:	ec53 2b10 	vmov	r2, r3, d0
 8011af6:	ee10 0a10 	vmov	r0, s0
 8011afa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011afe:	e7de      	b.n	8011abe <cos+0x2e>
 8011b00:	f000 fa46 	bl	8011f90 <__kernel_cos>
 8011b04:	e7f5      	b.n	8011af2 <cos+0x62>
 8011b06:	bf00      	nop
	...
 8011b10:	3fe921fb 	.word	0x3fe921fb
 8011b14:	7fefffff 	.word	0x7fefffff

08011b18 <sin>:
 8011b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b1a:	ec51 0b10 	vmov	r0, r1, d0
 8011b1e:	4a20      	ldr	r2, [pc, #128]	; (8011ba0 <sin+0x88>)
 8011b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b24:	4293      	cmp	r3, r2
 8011b26:	dc07      	bgt.n	8011b38 <sin+0x20>
 8011b28:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011b98 <sin+0x80>
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	f000 fe37 	bl	80127a0 <__kernel_sin>
 8011b32:	ec51 0b10 	vmov	r0, r1, d0
 8011b36:	e007      	b.n	8011b48 <sin+0x30>
 8011b38:	4a1a      	ldr	r2, [pc, #104]	; (8011ba4 <sin+0x8c>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	dd09      	ble.n	8011b52 <sin+0x3a>
 8011b3e:	ee10 2a10 	vmov	r2, s0
 8011b42:	460b      	mov	r3, r1
 8011b44:	f7ee fbb8 	bl	80002b8 <__aeabi_dsub>
 8011b48:	ec41 0b10 	vmov	d0, r0, r1
 8011b4c:	b005      	add	sp, #20
 8011b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b52:	4668      	mov	r0, sp
 8011b54:	f000 f828 	bl	8011ba8 <__ieee754_rem_pio2>
 8011b58:	f000 0003 	and.w	r0, r0, #3
 8011b5c:	2801      	cmp	r0, #1
 8011b5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b62:	ed9d 0b00 	vldr	d0, [sp]
 8011b66:	d004      	beq.n	8011b72 <sin+0x5a>
 8011b68:	2802      	cmp	r0, #2
 8011b6a:	d005      	beq.n	8011b78 <sin+0x60>
 8011b6c:	b970      	cbnz	r0, 8011b8c <sin+0x74>
 8011b6e:	2001      	movs	r0, #1
 8011b70:	e7dd      	b.n	8011b2e <sin+0x16>
 8011b72:	f000 fa0d 	bl	8011f90 <__kernel_cos>
 8011b76:	e7dc      	b.n	8011b32 <sin+0x1a>
 8011b78:	2001      	movs	r0, #1
 8011b7a:	f000 fe11 	bl	80127a0 <__kernel_sin>
 8011b7e:	ec53 2b10 	vmov	r2, r3, d0
 8011b82:	ee10 0a10 	vmov	r0, s0
 8011b86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b8a:	e7dd      	b.n	8011b48 <sin+0x30>
 8011b8c:	f000 fa00 	bl	8011f90 <__kernel_cos>
 8011b90:	e7f5      	b.n	8011b7e <sin+0x66>
 8011b92:	bf00      	nop
 8011b94:	f3af 8000 	nop.w
	...
 8011ba0:	3fe921fb 	.word	0x3fe921fb
 8011ba4:	7fefffff 	.word	0x7fefffff

08011ba8 <__ieee754_rem_pio2>:
 8011ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bac:	ec57 6b10 	vmov	r6, r7, d0
 8011bb0:	4bc3      	ldr	r3, [pc, #780]	; (8011ec0 <__ieee754_rem_pio2+0x318>)
 8011bb2:	b08d      	sub	sp, #52	; 0x34
 8011bb4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011bb8:	4598      	cmp	r8, r3
 8011bba:	4604      	mov	r4, r0
 8011bbc:	9704      	str	r7, [sp, #16]
 8011bbe:	dc07      	bgt.n	8011bd0 <__ieee754_rem_pio2+0x28>
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	ed84 0b00 	vstr	d0, [r4]
 8011bc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011bcc:	2500      	movs	r5, #0
 8011bce:	e027      	b.n	8011c20 <__ieee754_rem_pio2+0x78>
 8011bd0:	4bbc      	ldr	r3, [pc, #752]	; (8011ec4 <__ieee754_rem_pio2+0x31c>)
 8011bd2:	4598      	cmp	r8, r3
 8011bd4:	dc75      	bgt.n	8011cc2 <__ieee754_rem_pio2+0x11a>
 8011bd6:	9b04      	ldr	r3, [sp, #16]
 8011bd8:	4dbb      	ldr	r5, [pc, #748]	; (8011ec8 <__ieee754_rem_pio2+0x320>)
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	ee10 0a10 	vmov	r0, s0
 8011be0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011e88 <__ieee754_rem_pio2+0x2e0>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	4639      	mov	r1, r7
 8011be8:	dd36      	ble.n	8011c58 <__ieee754_rem_pio2+0xb0>
 8011bea:	f7ee fb65 	bl	80002b8 <__aeabi_dsub>
 8011bee:	45a8      	cmp	r8, r5
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	460f      	mov	r7, r1
 8011bf4:	d018      	beq.n	8011c28 <__ieee754_rem_pio2+0x80>
 8011bf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x2e8>)
 8011bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfc:	f7ee fb5c 	bl	80002b8 <__aeabi_dsub>
 8011c00:	4602      	mov	r2, r0
 8011c02:	460b      	mov	r3, r1
 8011c04:	e9c4 2300 	strd	r2, r3, [r4]
 8011c08:	4630      	mov	r0, r6
 8011c0a:	4639      	mov	r1, r7
 8011c0c:	f7ee fb54 	bl	80002b8 <__aeabi_dsub>
 8011c10:	a39f      	add	r3, pc, #636	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x2e8>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee fb4f 	bl	80002b8 <__aeabi_dsub>
 8011c1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c1e:	2501      	movs	r5, #1
 8011c20:	4628      	mov	r0, r5
 8011c22:	b00d      	add	sp, #52	; 0x34
 8011c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c28:	a39b      	add	r3, pc, #620	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x2f0>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	f7ee fb43 	bl	80002b8 <__aeabi_dsub>
 8011c32:	a39b      	add	r3, pc, #620	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x2f8>)
 8011c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c38:	4606      	mov	r6, r0
 8011c3a:	460f      	mov	r7, r1
 8011c3c:	f7ee fb3c 	bl	80002b8 <__aeabi_dsub>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	e9c4 2300 	strd	r2, r3, [r4]
 8011c48:	4630      	mov	r0, r6
 8011c4a:	4639      	mov	r1, r7
 8011c4c:	f7ee fb34 	bl	80002b8 <__aeabi_dsub>
 8011c50:	a393      	add	r3, pc, #588	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x2f8>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	e7de      	b.n	8011c16 <__ieee754_rem_pio2+0x6e>
 8011c58:	f7ee fb30 	bl	80002bc <__adddf3>
 8011c5c:	45a8      	cmp	r8, r5
 8011c5e:	4606      	mov	r6, r0
 8011c60:	460f      	mov	r7, r1
 8011c62:	d016      	beq.n	8011c92 <__ieee754_rem_pio2+0xea>
 8011c64:	a38a      	add	r3, pc, #552	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x2e8>)
 8011c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6a:	f7ee fb27 	bl	80002bc <__adddf3>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	460b      	mov	r3, r1
 8011c72:	e9c4 2300 	strd	r2, r3, [r4]
 8011c76:	4630      	mov	r0, r6
 8011c78:	4639      	mov	r1, r7
 8011c7a:	f7ee fb1d 	bl	80002b8 <__aeabi_dsub>
 8011c7e:	a384      	add	r3, pc, #528	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x2e8>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	f7ee fb1a 	bl	80002bc <__adddf3>
 8011c88:	f04f 35ff 	mov.w	r5, #4294967295
 8011c8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c90:	e7c6      	b.n	8011c20 <__ieee754_rem_pio2+0x78>
 8011c92:	a381      	add	r3, pc, #516	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x2f0>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	f7ee fb10 	bl	80002bc <__adddf3>
 8011c9c:	a380      	add	r3, pc, #512	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x2f8>)
 8011c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca2:	4606      	mov	r6, r0
 8011ca4:	460f      	mov	r7, r1
 8011ca6:	f7ee fb09 	bl	80002bc <__adddf3>
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	e9c4 2300 	strd	r2, r3, [r4]
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	4639      	mov	r1, r7
 8011cb6:	f7ee faff 	bl	80002b8 <__aeabi_dsub>
 8011cba:	a379      	add	r3, pc, #484	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x2f8>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	e7e0      	b.n	8011c84 <__ieee754_rem_pio2+0xdc>
 8011cc2:	4b82      	ldr	r3, [pc, #520]	; (8011ecc <__ieee754_rem_pio2+0x324>)
 8011cc4:	4598      	cmp	r8, r3
 8011cc6:	f300 80d0 	bgt.w	8011e6a <__ieee754_rem_pio2+0x2c2>
 8011cca:	f000 fe23 	bl	8012914 <fabs>
 8011cce:	ec57 6b10 	vmov	r6, r7, d0
 8011cd2:	ee10 0a10 	vmov	r0, s0
 8011cd6:	a374      	add	r3, pc, #464	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x300>)
 8011cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cdc:	4639      	mov	r1, r7
 8011cde:	f7ee fca3 	bl	8000628 <__aeabi_dmul>
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	4b7a      	ldr	r3, [pc, #488]	; (8011ed0 <__ieee754_rem_pio2+0x328>)
 8011ce6:	f7ee fae9 	bl	80002bc <__adddf3>
 8011cea:	f7ee ff4d 	bl	8000b88 <__aeabi_d2iz>
 8011cee:	4605      	mov	r5, r0
 8011cf0:	f7ee fc30 	bl	8000554 <__aeabi_i2d>
 8011cf4:	a364      	add	r3, pc, #400	; (adr r3, 8011e88 <__ieee754_rem_pio2+0x2e0>)
 8011cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cfe:	f7ee fc93 	bl	8000628 <__aeabi_dmul>
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	f7ee fad5 	bl	80002b8 <__aeabi_dsub>
 8011d0e:	a360      	add	r3, pc, #384	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x2e8>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	4682      	mov	sl, r0
 8011d16:	468b      	mov	fp, r1
 8011d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d1c:	f7ee fc84 	bl	8000628 <__aeabi_dmul>
 8011d20:	2d1f      	cmp	r5, #31
 8011d22:	4606      	mov	r6, r0
 8011d24:	460f      	mov	r7, r1
 8011d26:	dc0c      	bgt.n	8011d42 <__ieee754_rem_pio2+0x19a>
 8011d28:	1e6a      	subs	r2, r5, #1
 8011d2a:	4b6a      	ldr	r3, [pc, #424]	; (8011ed4 <__ieee754_rem_pio2+0x32c>)
 8011d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d30:	4543      	cmp	r3, r8
 8011d32:	d006      	beq.n	8011d42 <__ieee754_rem_pio2+0x19a>
 8011d34:	4632      	mov	r2, r6
 8011d36:	463b      	mov	r3, r7
 8011d38:	4650      	mov	r0, sl
 8011d3a:	4659      	mov	r1, fp
 8011d3c:	f7ee fabc 	bl	80002b8 <__aeabi_dsub>
 8011d40:	e00e      	b.n	8011d60 <__ieee754_rem_pio2+0x1b8>
 8011d42:	4632      	mov	r2, r6
 8011d44:	463b      	mov	r3, r7
 8011d46:	4650      	mov	r0, sl
 8011d48:	4659      	mov	r1, fp
 8011d4a:	f7ee fab5 	bl	80002b8 <__aeabi_dsub>
 8011d4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d52:	9305      	str	r3, [sp, #20]
 8011d54:	9a05      	ldr	r2, [sp, #20]
 8011d56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	2b10      	cmp	r3, #16
 8011d5e:	dc02      	bgt.n	8011d66 <__ieee754_rem_pio2+0x1be>
 8011d60:	e9c4 0100 	strd	r0, r1, [r4]
 8011d64:	e039      	b.n	8011dda <__ieee754_rem_pio2+0x232>
 8011d66:	a34c      	add	r3, pc, #304	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x2f0>)
 8011d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d70:	f7ee fc5a 	bl	8000628 <__aeabi_dmul>
 8011d74:	4606      	mov	r6, r0
 8011d76:	460f      	mov	r7, r1
 8011d78:	4602      	mov	r2, r0
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4650      	mov	r0, sl
 8011d7e:	4659      	mov	r1, fp
 8011d80:	f7ee fa9a 	bl	80002b8 <__aeabi_dsub>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	4680      	mov	r8, r0
 8011d8a:	4689      	mov	r9, r1
 8011d8c:	4650      	mov	r0, sl
 8011d8e:	4659      	mov	r1, fp
 8011d90:	f7ee fa92 	bl	80002b8 <__aeabi_dsub>
 8011d94:	4632      	mov	r2, r6
 8011d96:	463b      	mov	r3, r7
 8011d98:	f7ee fa8e 	bl	80002b8 <__aeabi_dsub>
 8011d9c:	a340      	add	r3, pc, #256	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x2f8>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	4606      	mov	r6, r0
 8011da4:	460f      	mov	r7, r1
 8011da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011daa:	f7ee fc3d 	bl	8000628 <__aeabi_dmul>
 8011dae:	4632      	mov	r2, r6
 8011db0:	463b      	mov	r3, r7
 8011db2:	f7ee fa81 	bl	80002b8 <__aeabi_dsub>
 8011db6:	4602      	mov	r2, r0
 8011db8:	460b      	mov	r3, r1
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460f      	mov	r7, r1
 8011dbe:	4640      	mov	r0, r8
 8011dc0:	4649      	mov	r1, r9
 8011dc2:	f7ee fa79 	bl	80002b8 <__aeabi_dsub>
 8011dc6:	9a05      	ldr	r2, [sp, #20]
 8011dc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	2b31      	cmp	r3, #49	; 0x31
 8011dd0:	dc20      	bgt.n	8011e14 <__ieee754_rem_pio2+0x26c>
 8011dd2:	e9c4 0100 	strd	r0, r1, [r4]
 8011dd6:	46c2      	mov	sl, r8
 8011dd8:	46cb      	mov	fp, r9
 8011dda:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011dde:	4650      	mov	r0, sl
 8011de0:	4642      	mov	r2, r8
 8011de2:	464b      	mov	r3, r9
 8011de4:	4659      	mov	r1, fp
 8011de6:	f7ee fa67 	bl	80002b8 <__aeabi_dsub>
 8011dea:	463b      	mov	r3, r7
 8011dec:	4632      	mov	r2, r6
 8011dee:	f7ee fa63 	bl	80002b8 <__aeabi_dsub>
 8011df2:	9b04      	ldr	r3, [sp, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011dfa:	f6bf af11 	bge.w	8011c20 <__ieee754_rem_pio2+0x78>
 8011dfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e02:	6063      	str	r3, [r4, #4]
 8011e04:	f8c4 8000 	str.w	r8, [r4]
 8011e08:	60a0      	str	r0, [r4, #8]
 8011e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e0e:	60e3      	str	r3, [r4, #12]
 8011e10:	426d      	negs	r5, r5
 8011e12:	e705      	b.n	8011c20 <__ieee754_rem_pio2+0x78>
 8011e14:	a326      	add	r3, pc, #152	; (adr r3, 8011eb0 <__ieee754_rem_pio2+0x308>)
 8011e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e1e:	f7ee fc03 	bl	8000628 <__aeabi_dmul>
 8011e22:	4606      	mov	r6, r0
 8011e24:	460f      	mov	r7, r1
 8011e26:	4602      	mov	r2, r0
 8011e28:	460b      	mov	r3, r1
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	4649      	mov	r1, r9
 8011e2e:	f7ee fa43 	bl	80002b8 <__aeabi_dsub>
 8011e32:	4602      	mov	r2, r0
 8011e34:	460b      	mov	r3, r1
 8011e36:	4682      	mov	sl, r0
 8011e38:	468b      	mov	fp, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fa3b 	bl	80002b8 <__aeabi_dsub>
 8011e42:	4632      	mov	r2, r6
 8011e44:	463b      	mov	r3, r7
 8011e46:	f7ee fa37 	bl	80002b8 <__aeabi_dsub>
 8011e4a:	a31b      	add	r3, pc, #108	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x310>)
 8011e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e50:	4606      	mov	r6, r0
 8011e52:	460f      	mov	r7, r1
 8011e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e58:	f7ee fbe6 	bl	8000628 <__aeabi_dmul>
 8011e5c:	4632      	mov	r2, r6
 8011e5e:	463b      	mov	r3, r7
 8011e60:	f7ee fa2a 	bl	80002b8 <__aeabi_dsub>
 8011e64:	4606      	mov	r6, r0
 8011e66:	460f      	mov	r7, r1
 8011e68:	e764      	b.n	8011d34 <__ieee754_rem_pio2+0x18c>
 8011e6a:	4b1b      	ldr	r3, [pc, #108]	; (8011ed8 <__ieee754_rem_pio2+0x330>)
 8011e6c:	4598      	cmp	r8, r3
 8011e6e:	dd35      	ble.n	8011edc <__ieee754_rem_pio2+0x334>
 8011e70:	ee10 2a10 	vmov	r2, s0
 8011e74:	463b      	mov	r3, r7
 8011e76:	4630      	mov	r0, r6
 8011e78:	4639      	mov	r1, r7
 8011e7a:	f7ee fa1d 	bl	80002b8 <__aeabi_dsub>
 8011e7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e82:	e9c4 0100 	strd	r0, r1, [r4]
 8011e86:	e6a1      	b.n	8011bcc <__ieee754_rem_pio2+0x24>
 8011e88:	54400000 	.word	0x54400000
 8011e8c:	3ff921fb 	.word	0x3ff921fb
 8011e90:	1a626331 	.word	0x1a626331
 8011e94:	3dd0b461 	.word	0x3dd0b461
 8011e98:	1a600000 	.word	0x1a600000
 8011e9c:	3dd0b461 	.word	0x3dd0b461
 8011ea0:	2e037073 	.word	0x2e037073
 8011ea4:	3ba3198a 	.word	0x3ba3198a
 8011ea8:	6dc9c883 	.word	0x6dc9c883
 8011eac:	3fe45f30 	.word	0x3fe45f30
 8011eb0:	2e000000 	.word	0x2e000000
 8011eb4:	3ba3198a 	.word	0x3ba3198a
 8011eb8:	252049c1 	.word	0x252049c1
 8011ebc:	397b839a 	.word	0x397b839a
 8011ec0:	3fe921fb 	.word	0x3fe921fb
 8011ec4:	4002d97b 	.word	0x4002d97b
 8011ec8:	3ff921fb 	.word	0x3ff921fb
 8011ecc:	413921fb 	.word	0x413921fb
 8011ed0:	3fe00000 	.word	0x3fe00000
 8011ed4:	08017fb8 	.word	0x08017fb8
 8011ed8:	7fefffff 	.word	0x7fefffff
 8011edc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011ee0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011ee4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011ee8:	4630      	mov	r0, r6
 8011eea:	460f      	mov	r7, r1
 8011eec:	f7ee fe4c 	bl	8000b88 <__aeabi_d2iz>
 8011ef0:	f7ee fb30 	bl	8000554 <__aeabi_i2d>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	4630      	mov	r0, r6
 8011efa:	4639      	mov	r1, r7
 8011efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f00:	f7ee f9da 	bl	80002b8 <__aeabi_dsub>
 8011f04:	2200      	movs	r2, #0
 8011f06:	4b1f      	ldr	r3, [pc, #124]	; (8011f84 <__ieee754_rem_pio2+0x3dc>)
 8011f08:	f7ee fb8e 	bl	8000628 <__aeabi_dmul>
 8011f0c:	460f      	mov	r7, r1
 8011f0e:	4606      	mov	r6, r0
 8011f10:	f7ee fe3a 	bl	8000b88 <__aeabi_d2iz>
 8011f14:	f7ee fb1e 	bl	8000554 <__aeabi_i2d>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	4639      	mov	r1, r7
 8011f20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011f24:	f7ee f9c8 	bl	80002b8 <__aeabi_dsub>
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4b16      	ldr	r3, [pc, #88]	; (8011f84 <__ieee754_rem_pio2+0x3dc>)
 8011f2c:	f7ee fb7c 	bl	8000628 <__aeabi_dmul>
 8011f30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011f34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011f38:	f04f 0803 	mov.w	r8, #3
 8011f3c:	2600      	movs	r6, #0
 8011f3e:	2700      	movs	r7, #0
 8011f40:	4632      	mov	r2, r6
 8011f42:	463b      	mov	r3, r7
 8011f44:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8011f4c:	f7ee fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 8011f50:	b9b0      	cbnz	r0, 8011f80 <__ieee754_rem_pio2+0x3d8>
 8011f52:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <__ieee754_rem_pio2+0x3e0>)
 8011f54:	9301      	str	r3, [sp, #4]
 8011f56:	2302      	movs	r3, #2
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	462a      	mov	r2, r5
 8011f5c:	4643      	mov	r3, r8
 8011f5e:	4621      	mov	r1, r4
 8011f60:	a806      	add	r0, sp, #24
 8011f62:	f000 f8dd 	bl	8012120 <__kernel_rem_pio2>
 8011f66:	9b04      	ldr	r3, [sp, #16]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	f6bf ae58 	bge.w	8011c20 <__ieee754_rem_pio2+0x78>
 8011f70:	6863      	ldr	r3, [r4, #4]
 8011f72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f76:	6063      	str	r3, [r4, #4]
 8011f78:	68e3      	ldr	r3, [r4, #12]
 8011f7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f7e:	e746      	b.n	8011e0e <__ieee754_rem_pio2+0x266>
 8011f80:	46d0      	mov	r8, sl
 8011f82:	e7dd      	b.n	8011f40 <__ieee754_rem_pio2+0x398>
 8011f84:	41700000 	.word	0x41700000
 8011f88:	08018038 	.word	0x08018038
 8011f8c:	00000000 	.word	0x00000000

08011f90 <__kernel_cos>:
 8011f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f94:	ec59 8b10 	vmov	r8, r9, d0
 8011f98:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011f9c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011fa0:	ed2d 8b02 	vpush	{d8}
 8011fa4:	eeb0 8a41 	vmov.f32	s16, s2
 8011fa8:	eef0 8a61 	vmov.f32	s17, s3
 8011fac:	da07      	bge.n	8011fbe <__kernel_cos+0x2e>
 8011fae:	ee10 0a10 	vmov	r0, s0
 8011fb2:	4649      	mov	r1, r9
 8011fb4:	f7ee fde8 	bl	8000b88 <__aeabi_d2iz>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	f000 8089 	beq.w	80120d0 <__kernel_cos+0x140>
 8011fbe:	4642      	mov	r2, r8
 8011fc0:	464b      	mov	r3, r9
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee fb2f 	bl	8000628 <__aeabi_dmul>
 8011fca:	2200      	movs	r2, #0
 8011fcc:	4b4e      	ldr	r3, [pc, #312]	; (8012108 <__kernel_cos+0x178>)
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	f7ee fb29 	bl	8000628 <__aeabi_dmul>
 8011fd6:	a340      	add	r3, pc, #256	; (adr r3, 80120d8 <__kernel_cos+0x148>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	4682      	mov	sl, r0
 8011fde:	468b      	mov	fp, r1
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	f7ee fb20 	bl	8000628 <__aeabi_dmul>
 8011fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80120e0 <__kernel_cos+0x150>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f965 	bl	80002bc <__adddf3>
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	f7ee fb17 	bl	8000628 <__aeabi_dmul>
 8011ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80120e8 <__kernel_cos+0x158>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	f7ee f95a 	bl	80002b8 <__aeabi_dsub>
 8012004:	4622      	mov	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	f7ee fb0e 	bl	8000628 <__aeabi_dmul>
 801200c:	a338      	add	r3, pc, #224	; (adr r3, 80120f0 <__kernel_cos+0x160>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	f7ee f953 	bl	80002bc <__adddf3>
 8012016:	4622      	mov	r2, r4
 8012018:	462b      	mov	r3, r5
 801201a:	f7ee fb05 	bl	8000628 <__aeabi_dmul>
 801201e:	a336      	add	r3, pc, #216	; (adr r3, 80120f8 <__kernel_cos+0x168>)
 8012020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012024:	f7ee f948 	bl	80002b8 <__aeabi_dsub>
 8012028:	4622      	mov	r2, r4
 801202a:	462b      	mov	r3, r5
 801202c:	f7ee fafc 	bl	8000628 <__aeabi_dmul>
 8012030:	a333      	add	r3, pc, #204	; (adr r3, 8012100 <__kernel_cos+0x170>)
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	f7ee f941 	bl	80002bc <__adddf3>
 801203a:	4622      	mov	r2, r4
 801203c:	462b      	mov	r3, r5
 801203e:	f7ee faf3 	bl	8000628 <__aeabi_dmul>
 8012042:	4622      	mov	r2, r4
 8012044:	462b      	mov	r3, r5
 8012046:	f7ee faef 	bl	8000628 <__aeabi_dmul>
 801204a:	ec53 2b18 	vmov	r2, r3, d8
 801204e:	4604      	mov	r4, r0
 8012050:	460d      	mov	r5, r1
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	f7ee fae7 	bl	8000628 <__aeabi_dmul>
 801205a:	460b      	mov	r3, r1
 801205c:	4602      	mov	r2, r0
 801205e:	4629      	mov	r1, r5
 8012060:	4620      	mov	r0, r4
 8012062:	f7ee f929 	bl	80002b8 <__aeabi_dsub>
 8012066:	4b29      	ldr	r3, [pc, #164]	; (801210c <__kernel_cos+0x17c>)
 8012068:	429e      	cmp	r6, r3
 801206a:	4680      	mov	r8, r0
 801206c:	4689      	mov	r9, r1
 801206e:	dc11      	bgt.n	8012094 <__kernel_cos+0x104>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4650      	mov	r0, sl
 8012076:	4659      	mov	r1, fp
 8012078:	f7ee f91e 	bl	80002b8 <__aeabi_dsub>
 801207c:	460b      	mov	r3, r1
 801207e:	4924      	ldr	r1, [pc, #144]	; (8012110 <__kernel_cos+0x180>)
 8012080:	4602      	mov	r2, r0
 8012082:	2000      	movs	r0, #0
 8012084:	f7ee f918 	bl	80002b8 <__aeabi_dsub>
 8012088:	ecbd 8b02 	vpop	{d8}
 801208c:	ec41 0b10 	vmov	d0, r0, r1
 8012090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012094:	4b1f      	ldr	r3, [pc, #124]	; (8012114 <__kernel_cos+0x184>)
 8012096:	491e      	ldr	r1, [pc, #120]	; (8012110 <__kernel_cos+0x180>)
 8012098:	429e      	cmp	r6, r3
 801209a:	bfcc      	ite	gt
 801209c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012118 <__kernel_cos+0x188>)
 801209e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80120a2:	2400      	movs	r4, #0
 80120a4:	4622      	mov	r2, r4
 80120a6:	462b      	mov	r3, r5
 80120a8:	2000      	movs	r0, #0
 80120aa:	f7ee f905 	bl	80002b8 <__aeabi_dsub>
 80120ae:	4622      	mov	r2, r4
 80120b0:	4606      	mov	r6, r0
 80120b2:	460f      	mov	r7, r1
 80120b4:	462b      	mov	r3, r5
 80120b6:	4650      	mov	r0, sl
 80120b8:	4659      	mov	r1, fp
 80120ba:	f7ee f8fd 	bl	80002b8 <__aeabi_dsub>
 80120be:	4642      	mov	r2, r8
 80120c0:	464b      	mov	r3, r9
 80120c2:	f7ee f8f9 	bl	80002b8 <__aeabi_dsub>
 80120c6:	4602      	mov	r2, r0
 80120c8:	460b      	mov	r3, r1
 80120ca:	4630      	mov	r0, r6
 80120cc:	4639      	mov	r1, r7
 80120ce:	e7d9      	b.n	8012084 <__kernel_cos+0xf4>
 80120d0:	2000      	movs	r0, #0
 80120d2:	490f      	ldr	r1, [pc, #60]	; (8012110 <__kernel_cos+0x180>)
 80120d4:	e7d8      	b.n	8012088 <__kernel_cos+0xf8>
 80120d6:	bf00      	nop
 80120d8:	be8838d4 	.word	0xbe8838d4
 80120dc:	bda8fae9 	.word	0xbda8fae9
 80120e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80120e4:	3e21ee9e 	.word	0x3e21ee9e
 80120e8:	809c52ad 	.word	0x809c52ad
 80120ec:	3e927e4f 	.word	0x3e927e4f
 80120f0:	19cb1590 	.word	0x19cb1590
 80120f4:	3efa01a0 	.word	0x3efa01a0
 80120f8:	16c15177 	.word	0x16c15177
 80120fc:	3f56c16c 	.word	0x3f56c16c
 8012100:	5555554c 	.word	0x5555554c
 8012104:	3fa55555 	.word	0x3fa55555
 8012108:	3fe00000 	.word	0x3fe00000
 801210c:	3fd33332 	.word	0x3fd33332
 8012110:	3ff00000 	.word	0x3ff00000
 8012114:	3fe90000 	.word	0x3fe90000
 8012118:	3fd20000 	.word	0x3fd20000
 801211c:	00000000 	.word	0x00000000

08012120 <__kernel_rem_pio2>:
 8012120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012124:	ed2d 8b02 	vpush	{d8}
 8012128:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801212c:	1ed4      	subs	r4, r2, #3
 801212e:	9308      	str	r3, [sp, #32]
 8012130:	9101      	str	r1, [sp, #4]
 8012132:	4bc5      	ldr	r3, [pc, #788]	; (8012448 <__kernel_rem_pio2+0x328>)
 8012134:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012136:	9009      	str	r0, [sp, #36]	; 0x24
 8012138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801213c:	9304      	str	r3, [sp, #16]
 801213e:	9b08      	ldr	r3, [sp, #32]
 8012140:	3b01      	subs	r3, #1
 8012142:	9307      	str	r3, [sp, #28]
 8012144:	2318      	movs	r3, #24
 8012146:	fb94 f4f3 	sdiv	r4, r4, r3
 801214a:	f06f 0317 	mvn.w	r3, #23
 801214e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012152:	fb04 3303 	mla	r3, r4, r3, r3
 8012156:	eb03 0a02 	add.w	sl, r3, r2
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	9a07      	ldr	r2, [sp, #28]
 801215e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012438 <__kernel_rem_pio2+0x318>
 8012162:	eb03 0802 	add.w	r8, r3, r2
 8012166:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012168:	1aa7      	subs	r7, r4, r2
 801216a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801216e:	ae22      	add	r6, sp, #136	; 0x88
 8012170:	2500      	movs	r5, #0
 8012172:	4545      	cmp	r5, r8
 8012174:	dd13      	ble.n	801219e <__kernel_rem_pio2+0x7e>
 8012176:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012438 <__kernel_rem_pio2+0x318>
 801217a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801217e:	2600      	movs	r6, #0
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	429e      	cmp	r6, r3
 8012184:	dc32      	bgt.n	80121ec <__kernel_rem_pio2+0xcc>
 8012186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012188:	9302      	str	r3, [sp, #8]
 801218a:	9b08      	ldr	r3, [sp, #32]
 801218c:	199d      	adds	r5, r3, r6
 801218e:	ab22      	add	r3, sp, #136	; 0x88
 8012190:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012194:	9306      	str	r3, [sp, #24]
 8012196:	ec59 8b18 	vmov	r8, r9, d8
 801219a:	2700      	movs	r7, #0
 801219c:	e01f      	b.n	80121de <__kernel_rem_pio2+0xbe>
 801219e:	42ef      	cmn	r7, r5
 80121a0:	d407      	bmi.n	80121b2 <__kernel_rem_pio2+0x92>
 80121a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80121a6:	f7ee f9d5 	bl	8000554 <__aeabi_i2d>
 80121aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121ae:	3501      	adds	r5, #1
 80121b0:	e7df      	b.n	8012172 <__kernel_rem_pio2+0x52>
 80121b2:	ec51 0b18 	vmov	r0, r1, d8
 80121b6:	e7f8      	b.n	80121aa <__kernel_rem_pio2+0x8a>
 80121b8:	9906      	ldr	r1, [sp, #24]
 80121ba:	9d02      	ldr	r5, [sp, #8]
 80121bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80121c0:	9106      	str	r1, [sp, #24]
 80121c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80121c6:	9502      	str	r5, [sp, #8]
 80121c8:	f7ee fa2e 	bl	8000628 <__aeabi_dmul>
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	4640      	mov	r0, r8
 80121d2:	4649      	mov	r1, r9
 80121d4:	f7ee f872 	bl	80002bc <__adddf3>
 80121d8:	3701      	adds	r7, #1
 80121da:	4680      	mov	r8, r0
 80121dc:	4689      	mov	r9, r1
 80121de:	9b07      	ldr	r3, [sp, #28]
 80121e0:	429f      	cmp	r7, r3
 80121e2:	dde9      	ble.n	80121b8 <__kernel_rem_pio2+0x98>
 80121e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80121e8:	3601      	adds	r6, #1
 80121ea:	e7c9      	b.n	8012180 <__kernel_rem_pio2+0x60>
 80121ec:	9b04      	ldr	r3, [sp, #16]
 80121ee:	aa0e      	add	r2, sp, #56	; 0x38
 80121f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121f4:	930c      	str	r3, [sp, #48]	; 0x30
 80121f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80121f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80121fc:	9c04      	ldr	r4, [sp, #16]
 80121fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012200:	ab9a      	add	r3, sp, #616	; 0x268
 8012202:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012206:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801220a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801220e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012212:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012216:	ab9a      	add	r3, sp, #616	; 0x268
 8012218:	445b      	add	r3, fp
 801221a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801221e:	2500      	movs	r5, #0
 8012220:	1b63      	subs	r3, r4, r5
 8012222:	2b00      	cmp	r3, #0
 8012224:	dc78      	bgt.n	8012318 <__kernel_rem_pio2+0x1f8>
 8012226:	4650      	mov	r0, sl
 8012228:	ec49 8b10 	vmov	d0, r8, r9
 801222c:	f000 fc00 	bl	8012a30 <scalbn>
 8012230:	ec57 6b10 	vmov	r6, r7, d0
 8012234:	2200      	movs	r2, #0
 8012236:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801223a:	ee10 0a10 	vmov	r0, s0
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee f9f2 	bl	8000628 <__aeabi_dmul>
 8012244:	ec41 0b10 	vmov	d0, r0, r1
 8012248:	f000 fb6e 	bl	8012928 <floor>
 801224c:	2200      	movs	r2, #0
 801224e:	ec51 0b10 	vmov	r0, r1, d0
 8012252:	4b7e      	ldr	r3, [pc, #504]	; (801244c <__kernel_rem_pio2+0x32c>)
 8012254:	f7ee f9e8 	bl	8000628 <__aeabi_dmul>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7ee f82a 	bl	80002b8 <__aeabi_dsub>
 8012264:	460f      	mov	r7, r1
 8012266:	4606      	mov	r6, r0
 8012268:	f7ee fc8e 	bl	8000b88 <__aeabi_d2iz>
 801226c:	9006      	str	r0, [sp, #24]
 801226e:	f7ee f971 	bl	8000554 <__aeabi_i2d>
 8012272:	4602      	mov	r2, r0
 8012274:	460b      	mov	r3, r1
 8012276:	4630      	mov	r0, r6
 8012278:	4639      	mov	r1, r7
 801227a:	f7ee f81d 	bl	80002b8 <__aeabi_dsub>
 801227e:	f1ba 0f00 	cmp.w	sl, #0
 8012282:	4606      	mov	r6, r0
 8012284:	460f      	mov	r7, r1
 8012286:	dd6c      	ble.n	8012362 <__kernel_rem_pio2+0x242>
 8012288:	1e62      	subs	r2, r4, #1
 801228a:	ab0e      	add	r3, sp, #56	; 0x38
 801228c:	f1ca 0118 	rsb	r1, sl, #24
 8012290:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012294:	9d06      	ldr	r5, [sp, #24]
 8012296:	fa40 f301 	asr.w	r3, r0, r1
 801229a:	441d      	add	r5, r3
 801229c:	408b      	lsls	r3, r1
 801229e:	1ac0      	subs	r0, r0, r3
 80122a0:	ab0e      	add	r3, sp, #56	; 0x38
 80122a2:	9506      	str	r5, [sp, #24]
 80122a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80122a8:	f1ca 0317 	rsb	r3, sl, #23
 80122ac:	fa40 f303 	asr.w	r3, r0, r3
 80122b0:	9302      	str	r3, [sp, #8]
 80122b2:	9b02      	ldr	r3, [sp, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	dd62      	ble.n	801237e <__kernel_rem_pio2+0x25e>
 80122b8:	9b06      	ldr	r3, [sp, #24]
 80122ba:	2200      	movs	r2, #0
 80122bc:	3301      	adds	r3, #1
 80122be:	9306      	str	r3, [sp, #24]
 80122c0:	4615      	mov	r5, r2
 80122c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80122c6:	4294      	cmp	r4, r2
 80122c8:	f300 8095 	bgt.w	80123f6 <__kernel_rem_pio2+0x2d6>
 80122cc:	f1ba 0f00 	cmp.w	sl, #0
 80122d0:	dd07      	ble.n	80122e2 <__kernel_rem_pio2+0x1c2>
 80122d2:	f1ba 0f01 	cmp.w	sl, #1
 80122d6:	f000 80a2 	beq.w	801241e <__kernel_rem_pio2+0x2fe>
 80122da:	f1ba 0f02 	cmp.w	sl, #2
 80122de:	f000 80c1 	beq.w	8012464 <__kernel_rem_pio2+0x344>
 80122e2:	9b02      	ldr	r3, [sp, #8]
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d14a      	bne.n	801237e <__kernel_rem_pio2+0x25e>
 80122e8:	4632      	mov	r2, r6
 80122ea:	463b      	mov	r3, r7
 80122ec:	2000      	movs	r0, #0
 80122ee:	4958      	ldr	r1, [pc, #352]	; (8012450 <__kernel_rem_pio2+0x330>)
 80122f0:	f7ed ffe2 	bl	80002b8 <__aeabi_dsub>
 80122f4:	4606      	mov	r6, r0
 80122f6:	460f      	mov	r7, r1
 80122f8:	2d00      	cmp	r5, #0
 80122fa:	d040      	beq.n	801237e <__kernel_rem_pio2+0x25e>
 80122fc:	4650      	mov	r0, sl
 80122fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012440 <__kernel_rem_pio2+0x320>
 8012302:	f000 fb95 	bl	8012a30 <scalbn>
 8012306:	4630      	mov	r0, r6
 8012308:	4639      	mov	r1, r7
 801230a:	ec53 2b10 	vmov	r2, r3, d0
 801230e:	f7ed ffd3 	bl	80002b8 <__aeabi_dsub>
 8012312:	4606      	mov	r6, r0
 8012314:	460f      	mov	r7, r1
 8012316:	e032      	b.n	801237e <__kernel_rem_pio2+0x25e>
 8012318:	2200      	movs	r2, #0
 801231a:	4b4e      	ldr	r3, [pc, #312]	; (8012454 <__kernel_rem_pio2+0x334>)
 801231c:	4640      	mov	r0, r8
 801231e:	4649      	mov	r1, r9
 8012320:	f7ee f982 	bl	8000628 <__aeabi_dmul>
 8012324:	f7ee fc30 	bl	8000b88 <__aeabi_d2iz>
 8012328:	f7ee f914 	bl	8000554 <__aeabi_i2d>
 801232c:	2200      	movs	r2, #0
 801232e:	4b4a      	ldr	r3, [pc, #296]	; (8012458 <__kernel_rem_pio2+0x338>)
 8012330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012334:	f7ee f978 	bl	8000628 <__aeabi_dmul>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4640      	mov	r0, r8
 801233e:	4649      	mov	r1, r9
 8012340:	f7ed ffba 	bl	80002b8 <__aeabi_dsub>
 8012344:	f7ee fc20 	bl	8000b88 <__aeabi_d2iz>
 8012348:	ab0e      	add	r3, sp, #56	; 0x38
 801234a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801234e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012356:	f7ed ffb1 	bl	80002bc <__adddf3>
 801235a:	3501      	adds	r5, #1
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	e75e      	b.n	8012220 <__kernel_rem_pio2+0x100>
 8012362:	d105      	bne.n	8012370 <__kernel_rem_pio2+0x250>
 8012364:	1e63      	subs	r3, r4, #1
 8012366:	aa0e      	add	r2, sp, #56	; 0x38
 8012368:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801236c:	15c3      	asrs	r3, r0, #23
 801236e:	e79f      	b.n	80122b0 <__kernel_rem_pio2+0x190>
 8012370:	2200      	movs	r2, #0
 8012372:	4b3a      	ldr	r3, [pc, #232]	; (801245c <__kernel_rem_pio2+0x33c>)
 8012374:	f7ee fbde 	bl	8000b34 <__aeabi_dcmpge>
 8012378:	2800      	cmp	r0, #0
 801237a:	d139      	bne.n	80123f0 <__kernel_rem_pio2+0x2d0>
 801237c:	9002      	str	r0, [sp, #8]
 801237e:	2200      	movs	r2, #0
 8012380:	2300      	movs	r3, #0
 8012382:	4630      	mov	r0, r6
 8012384:	4639      	mov	r1, r7
 8012386:	f7ee fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 801238a:	2800      	cmp	r0, #0
 801238c:	f000 80c7 	beq.w	801251e <__kernel_rem_pio2+0x3fe>
 8012390:	1e65      	subs	r5, r4, #1
 8012392:	462b      	mov	r3, r5
 8012394:	2200      	movs	r2, #0
 8012396:	9904      	ldr	r1, [sp, #16]
 8012398:	428b      	cmp	r3, r1
 801239a:	da6a      	bge.n	8012472 <__kernel_rem_pio2+0x352>
 801239c:	2a00      	cmp	r2, #0
 801239e:	f000 8088 	beq.w	80124b2 <__kernel_rem_pio2+0x392>
 80123a2:	ab0e      	add	r3, sp, #56	; 0x38
 80123a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80123a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80b4 	beq.w	801251a <__kernel_rem_pio2+0x3fa>
 80123b2:	4650      	mov	r0, sl
 80123b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012440 <__kernel_rem_pio2+0x320>
 80123b8:	f000 fb3a 	bl	8012a30 <scalbn>
 80123bc:	00ec      	lsls	r4, r5, #3
 80123be:	ab72      	add	r3, sp, #456	; 0x1c8
 80123c0:	191e      	adds	r6, r3, r4
 80123c2:	ec59 8b10 	vmov	r8, r9, d0
 80123c6:	f106 0a08 	add.w	sl, r6, #8
 80123ca:	462f      	mov	r7, r5
 80123cc:	2f00      	cmp	r7, #0
 80123ce:	f280 80df 	bge.w	8012590 <__kernel_rem_pio2+0x470>
 80123d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012438 <__kernel_rem_pio2+0x318>
 80123d6:	f04f 0a00 	mov.w	sl, #0
 80123da:	eba5 030a 	sub.w	r3, r5, sl
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f2c0 810a 	blt.w	80125f8 <__kernel_rem_pio2+0x4d8>
 80123e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012460 <__kernel_rem_pio2+0x340>
 80123e8:	ec59 8b18 	vmov	r8, r9, d8
 80123ec:	2700      	movs	r7, #0
 80123ee:	e0f5      	b.n	80125dc <__kernel_rem_pio2+0x4bc>
 80123f0:	2302      	movs	r3, #2
 80123f2:	9302      	str	r3, [sp, #8]
 80123f4:	e760      	b.n	80122b8 <__kernel_rem_pio2+0x198>
 80123f6:	ab0e      	add	r3, sp, #56	; 0x38
 80123f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123fc:	b94d      	cbnz	r5, 8012412 <__kernel_rem_pio2+0x2f2>
 80123fe:	b12b      	cbz	r3, 801240c <__kernel_rem_pio2+0x2ec>
 8012400:	a80e      	add	r0, sp, #56	; 0x38
 8012402:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012406:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801240a:	2301      	movs	r3, #1
 801240c:	3201      	adds	r2, #1
 801240e:	461d      	mov	r5, r3
 8012410:	e759      	b.n	80122c6 <__kernel_rem_pio2+0x1a6>
 8012412:	a80e      	add	r0, sp, #56	; 0x38
 8012414:	1acb      	subs	r3, r1, r3
 8012416:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801241a:	462b      	mov	r3, r5
 801241c:	e7f6      	b.n	801240c <__kernel_rem_pio2+0x2ec>
 801241e:	1e62      	subs	r2, r4, #1
 8012420:	ab0e      	add	r3, sp, #56	; 0x38
 8012422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801242a:	a90e      	add	r1, sp, #56	; 0x38
 801242c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012430:	e757      	b.n	80122e2 <__kernel_rem_pio2+0x1c2>
 8012432:	bf00      	nop
 8012434:	f3af 8000 	nop.w
	...
 8012444:	3ff00000 	.word	0x3ff00000
 8012448:	08018180 	.word	0x08018180
 801244c:	40200000 	.word	0x40200000
 8012450:	3ff00000 	.word	0x3ff00000
 8012454:	3e700000 	.word	0x3e700000
 8012458:	41700000 	.word	0x41700000
 801245c:	3fe00000 	.word	0x3fe00000
 8012460:	08018140 	.word	0x08018140
 8012464:	1e62      	subs	r2, r4, #1
 8012466:	ab0e      	add	r3, sp, #56	; 0x38
 8012468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801246c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012470:	e7db      	b.n	801242a <__kernel_rem_pio2+0x30a>
 8012472:	a90e      	add	r1, sp, #56	; 0x38
 8012474:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012478:	3b01      	subs	r3, #1
 801247a:	430a      	orrs	r2, r1
 801247c:	e78b      	b.n	8012396 <__kernel_rem_pio2+0x276>
 801247e:	3301      	adds	r3, #1
 8012480:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012484:	2900      	cmp	r1, #0
 8012486:	d0fa      	beq.n	801247e <__kernel_rem_pio2+0x35e>
 8012488:	9a08      	ldr	r2, [sp, #32]
 801248a:	4422      	add	r2, r4
 801248c:	00d2      	lsls	r2, r2, #3
 801248e:	a922      	add	r1, sp, #136	; 0x88
 8012490:	18e3      	adds	r3, r4, r3
 8012492:	9206      	str	r2, [sp, #24]
 8012494:	440a      	add	r2, r1
 8012496:	9302      	str	r3, [sp, #8]
 8012498:	f10b 0108 	add.w	r1, fp, #8
 801249c:	f102 0308 	add.w	r3, r2, #8
 80124a0:	1c66      	adds	r6, r4, #1
 80124a2:	910a      	str	r1, [sp, #40]	; 0x28
 80124a4:	2500      	movs	r5, #0
 80124a6:	930d      	str	r3, [sp, #52]	; 0x34
 80124a8:	9b02      	ldr	r3, [sp, #8]
 80124aa:	42b3      	cmp	r3, r6
 80124ac:	da04      	bge.n	80124b8 <__kernel_rem_pio2+0x398>
 80124ae:	461c      	mov	r4, r3
 80124b0:	e6a6      	b.n	8012200 <__kernel_rem_pio2+0xe0>
 80124b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124b4:	2301      	movs	r3, #1
 80124b6:	e7e3      	b.n	8012480 <__kernel_rem_pio2+0x360>
 80124b8:	9b06      	ldr	r3, [sp, #24]
 80124ba:	18ef      	adds	r7, r5, r3
 80124bc:	ab22      	add	r3, sp, #136	; 0x88
 80124be:	441f      	add	r7, r3
 80124c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80124c6:	f7ee f845 	bl	8000554 <__aeabi_i2d>
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	461c      	mov	r4, r3
 80124ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124d0:	e9c7 0100 	strd	r0, r1, [r7]
 80124d4:	eb03 0b05 	add.w	fp, r3, r5
 80124d8:	2700      	movs	r7, #0
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	f04f 0900 	mov.w	r9, #0
 80124e2:	9b07      	ldr	r3, [sp, #28]
 80124e4:	429f      	cmp	r7, r3
 80124e6:	dd08      	ble.n	80124fa <__kernel_rem_pio2+0x3da>
 80124e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124ea:	aa72      	add	r2, sp, #456	; 0x1c8
 80124ec:	18eb      	adds	r3, r5, r3
 80124ee:	4413      	add	r3, r2
 80124f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80124f4:	3601      	adds	r6, #1
 80124f6:	3508      	adds	r5, #8
 80124f8:	e7d6      	b.n	80124a8 <__kernel_rem_pio2+0x388>
 80124fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80124fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012502:	f7ee f891 	bl	8000628 <__aeabi_dmul>
 8012506:	4602      	mov	r2, r0
 8012508:	460b      	mov	r3, r1
 801250a:	4640      	mov	r0, r8
 801250c:	4649      	mov	r1, r9
 801250e:	f7ed fed5 	bl	80002bc <__adddf3>
 8012512:	3701      	adds	r7, #1
 8012514:	4680      	mov	r8, r0
 8012516:	4689      	mov	r9, r1
 8012518:	e7e3      	b.n	80124e2 <__kernel_rem_pio2+0x3c2>
 801251a:	3d01      	subs	r5, #1
 801251c:	e741      	b.n	80123a2 <__kernel_rem_pio2+0x282>
 801251e:	f1ca 0000 	rsb	r0, sl, #0
 8012522:	ec47 6b10 	vmov	d0, r6, r7
 8012526:	f000 fa83 	bl	8012a30 <scalbn>
 801252a:	ec57 6b10 	vmov	r6, r7, d0
 801252e:	2200      	movs	r2, #0
 8012530:	4b99      	ldr	r3, [pc, #612]	; (8012798 <__kernel_rem_pio2+0x678>)
 8012532:	ee10 0a10 	vmov	r0, s0
 8012536:	4639      	mov	r1, r7
 8012538:	f7ee fafc 	bl	8000b34 <__aeabi_dcmpge>
 801253c:	b1f8      	cbz	r0, 801257e <__kernel_rem_pio2+0x45e>
 801253e:	2200      	movs	r2, #0
 8012540:	4b96      	ldr	r3, [pc, #600]	; (801279c <__kernel_rem_pio2+0x67c>)
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	f7ee f86f 	bl	8000628 <__aeabi_dmul>
 801254a:	f7ee fb1d 	bl	8000b88 <__aeabi_d2iz>
 801254e:	4680      	mov	r8, r0
 8012550:	f7ee f800 	bl	8000554 <__aeabi_i2d>
 8012554:	2200      	movs	r2, #0
 8012556:	4b90      	ldr	r3, [pc, #576]	; (8012798 <__kernel_rem_pio2+0x678>)
 8012558:	f7ee f866 	bl	8000628 <__aeabi_dmul>
 801255c:	460b      	mov	r3, r1
 801255e:	4602      	mov	r2, r0
 8012560:	4639      	mov	r1, r7
 8012562:	4630      	mov	r0, r6
 8012564:	f7ed fea8 	bl	80002b8 <__aeabi_dsub>
 8012568:	f7ee fb0e 	bl	8000b88 <__aeabi_d2iz>
 801256c:	1c65      	adds	r5, r4, #1
 801256e:	ab0e      	add	r3, sp, #56	; 0x38
 8012570:	f10a 0a18 	add.w	sl, sl, #24
 8012574:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012578:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801257c:	e719      	b.n	80123b2 <__kernel_rem_pio2+0x292>
 801257e:	4630      	mov	r0, r6
 8012580:	4639      	mov	r1, r7
 8012582:	f7ee fb01 	bl	8000b88 <__aeabi_d2iz>
 8012586:	ab0e      	add	r3, sp, #56	; 0x38
 8012588:	4625      	mov	r5, r4
 801258a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801258e:	e710      	b.n	80123b2 <__kernel_rem_pio2+0x292>
 8012590:	ab0e      	add	r3, sp, #56	; 0x38
 8012592:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012596:	f7ed ffdd 	bl	8000554 <__aeabi_i2d>
 801259a:	4642      	mov	r2, r8
 801259c:	464b      	mov	r3, r9
 801259e:	f7ee f843 	bl	8000628 <__aeabi_dmul>
 80125a2:	2200      	movs	r2, #0
 80125a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80125a8:	4b7c      	ldr	r3, [pc, #496]	; (801279c <__kernel_rem_pio2+0x67c>)
 80125aa:	4640      	mov	r0, r8
 80125ac:	4649      	mov	r1, r9
 80125ae:	f7ee f83b 	bl	8000628 <__aeabi_dmul>
 80125b2:	3f01      	subs	r7, #1
 80125b4:	4680      	mov	r8, r0
 80125b6:	4689      	mov	r9, r1
 80125b8:	e708      	b.n	80123cc <__kernel_rem_pio2+0x2ac>
 80125ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80125c6:	f7ee f82f 	bl	8000628 <__aeabi_dmul>
 80125ca:	4602      	mov	r2, r0
 80125cc:	460b      	mov	r3, r1
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ed fe73 	bl	80002bc <__adddf3>
 80125d6:	3701      	adds	r7, #1
 80125d8:	4680      	mov	r8, r0
 80125da:	4689      	mov	r9, r1
 80125dc:	9b04      	ldr	r3, [sp, #16]
 80125de:	429f      	cmp	r7, r3
 80125e0:	dc01      	bgt.n	80125e6 <__kernel_rem_pio2+0x4c6>
 80125e2:	45ba      	cmp	sl, r7
 80125e4:	dae9      	bge.n	80125ba <__kernel_rem_pio2+0x49a>
 80125e6:	ab4a      	add	r3, sp, #296	; 0x128
 80125e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80125ec:	e9c3 8900 	strd	r8, r9, [r3]
 80125f0:	f10a 0a01 	add.w	sl, sl, #1
 80125f4:	3e08      	subs	r6, #8
 80125f6:	e6f0      	b.n	80123da <__kernel_rem_pio2+0x2ba>
 80125f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80125fa:	2b03      	cmp	r3, #3
 80125fc:	d85b      	bhi.n	80126b6 <__kernel_rem_pio2+0x596>
 80125fe:	e8df f003 	tbb	[pc, r3]
 8012602:	264a      	.short	0x264a
 8012604:	0226      	.short	0x0226
 8012606:	ab9a      	add	r3, sp, #616	; 0x268
 8012608:	441c      	add	r4, r3
 801260a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801260e:	46a2      	mov	sl, r4
 8012610:	46ab      	mov	fp, r5
 8012612:	f1bb 0f00 	cmp.w	fp, #0
 8012616:	dc6c      	bgt.n	80126f2 <__kernel_rem_pio2+0x5d2>
 8012618:	46a2      	mov	sl, r4
 801261a:	46ab      	mov	fp, r5
 801261c:	f1bb 0f01 	cmp.w	fp, #1
 8012620:	f300 8086 	bgt.w	8012730 <__kernel_rem_pio2+0x610>
 8012624:	2000      	movs	r0, #0
 8012626:	2100      	movs	r1, #0
 8012628:	2d01      	cmp	r5, #1
 801262a:	f300 80a0 	bgt.w	801276e <__kernel_rem_pio2+0x64e>
 801262e:	9b02      	ldr	r3, [sp, #8]
 8012630:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012634:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012638:	2b00      	cmp	r3, #0
 801263a:	f040 809e 	bne.w	801277a <__kernel_rem_pio2+0x65a>
 801263e:	9b01      	ldr	r3, [sp, #4]
 8012640:	e9c3 7800 	strd	r7, r8, [r3]
 8012644:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012648:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801264c:	e033      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 801264e:	3408      	adds	r4, #8
 8012650:	ab4a      	add	r3, sp, #296	; 0x128
 8012652:	441c      	add	r4, r3
 8012654:	462e      	mov	r6, r5
 8012656:	2000      	movs	r0, #0
 8012658:	2100      	movs	r1, #0
 801265a:	2e00      	cmp	r6, #0
 801265c:	da3a      	bge.n	80126d4 <__kernel_rem_pio2+0x5b4>
 801265e:	9b02      	ldr	r3, [sp, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d03d      	beq.n	80126e0 <__kernel_rem_pio2+0x5c0>
 8012664:	4602      	mov	r2, r0
 8012666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801266a:	9c01      	ldr	r4, [sp, #4]
 801266c:	e9c4 2300 	strd	r2, r3, [r4]
 8012670:	4602      	mov	r2, r0
 8012672:	460b      	mov	r3, r1
 8012674:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012678:	f7ed fe1e 	bl	80002b8 <__aeabi_dsub>
 801267c:	ae4c      	add	r6, sp, #304	; 0x130
 801267e:	2401      	movs	r4, #1
 8012680:	42a5      	cmp	r5, r4
 8012682:	da30      	bge.n	80126e6 <__kernel_rem_pio2+0x5c6>
 8012684:	9b02      	ldr	r3, [sp, #8]
 8012686:	b113      	cbz	r3, 801268e <__kernel_rem_pio2+0x56e>
 8012688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801268c:	4619      	mov	r1, r3
 801268e:	9b01      	ldr	r3, [sp, #4]
 8012690:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012694:	e00f      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 8012696:	ab9a      	add	r3, sp, #616	; 0x268
 8012698:	441c      	add	r4, r3
 801269a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801269e:	2000      	movs	r0, #0
 80126a0:	2100      	movs	r1, #0
 80126a2:	2d00      	cmp	r5, #0
 80126a4:	da10      	bge.n	80126c8 <__kernel_rem_pio2+0x5a8>
 80126a6:	9b02      	ldr	r3, [sp, #8]
 80126a8:	b113      	cbz	r3, 80126b0 <__kernel_rem_pio2+0x590>
 80126aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126ae:	4619      	mov	r1, r3
 80126b0:	9b01      	ldr	r3, [sp, #4]
 80126b2:	e9c3 0100 	strd	r0, r1, [r3]
 80126b6:	9b06      	ldr	r3, [sp, #24]
 80126b8:	f003 0007 	and.w	r0, r3, #7
 80126bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80126c0:	ecbd 8b02 	vpop	{d8}
 80126c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126cc:	f7ed fdf6 	bl	80002bc <__adddf3>
 80126d0:	3d01      	subs	r5, #1
 80126d2:	e7e6      	b.n	80126a2 <__kernel_rem_pio2+0x582>
 80126d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126d8:	f7ed fdf0 	bl	80002bc <__adddf3>
 80126dc:	3e01      	subs	r6, #1
 80126de:	e7bc      	b.n	801265a <__kernel_rem_pio2+0x53a>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	e7c1      	b.n	801266a <__kernel_rem_pio2+0x54a>
 80126e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80126ea:	f7ed fde7 	bl	80002bc <__adddf3>
 80126ee:	3401      	adds	r4, #1
 80126f0:	e7c6      	b.n	8012680 <__kernel_rem_pio2+0x560>
 80126f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80126f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80126fa:	4640      	mov	r0, r8
 80126fc:	ec53 2b17 	vmov	r2, r3, d7
 8012700:	4649      	mov	r1, r9
 8012702:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012706:	f7ed fdd9 	bl	80002bc <__adddf3>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4606      	mov	r6, r0
 8012710:	460f      	mov	r7, r1
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f7ed fdcf 	bl	80002b8 <__aeabi_dsub>
 801271a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801271e:	f7ed fdcd 	bl	80002bc <__adddf3>
 8012722:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012726:	e9ca 0100 	strd	r0, r1, [sl]
 801272a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801272e:	e770      	b.n	8012612 <__kernel_rem_pio2+0x4f2>
 8012730:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012734:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012738:	4630      	mov	r0, r6
 801273a:	ec53 2b17 	vmov	r2, r3, d7
 801273e:	4639      	mov	r1, r7
 8012740:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012744:	f7ed fdba 	bl	80002bc <__adddf3>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	4680      	mov	r8, r0
 801274e:	4689      	mov	r9, r1
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	f7ed fdb0 	bl	80002b8 <__aeabi_dsub>
 8012758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801275c:	f7ed fdae 	bl	80002bc <__adddf3>
 8012760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012764:	e9ca 0100 	strd	r0, r1, [sl]
 8012768:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801276c:	e756      	b.n	801261c <__kernel_rem_pio2+0x4fc>
 801276e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012772:	f7ed fda3 	bl	80002bc <__adddf3>
 8012776:	3d01      	subs	r5, #1
 8012778:	e756      	b.n	8012628 <__kernel_rem_pio2+0x508>
 801277a:	9b01      	ldr	r3, [sp, #4]
 801277c:	9a01      	ldr	r2, [sp, #4]
 801277e:	601f      	str	r7, [r3, #0]
 8012780:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012784:	605c      	str	r4, [r3, #4]
 8012786:	609d      	str	r5, [r3, #8]
 8012788:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801278c:	60d3      	str	r3, [r2, #12]
 801278e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012792:	6110      	str	r0, [r2, #16]
 8012794:	6153      	str	r3, [r2, #20]
 8012796:	e78e      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 8012798:	41700000 	.word	0x41700000
 801279c:	3e700000 	.word	0x3e700000

080127a0 <__kernel_sin>:
 80127a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a4:	ec55 4b10 	vmov	r4, r5, d0
 80127a8:	b085      	sub	sp, #20
 80127aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80127ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80127b2:	ed8d 1b00 	vstr	d1, [sp]
 80127b6:	9002      	str	r0, [sp, #8]
 80127b8:	da06      	bge.n	80127c8 <__kernel_sin+0x28>
 80127ba:	ee10 0a10 	vmov	r0, s0
 80127be:	4629      	mov	r1, r5
 80127c0:	f7ee f9e2 	bl	8000b88 <__aeabi_d2iz>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d051      	beq.n	801286c <__kernel_sin+0xcc>
 80127c8:	4622      	mov	r2, r4
 80127ca:	462b      	mov	r3, r5
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f7ed ff2a 	bl	8000628 <__aeabi_dmul>
 80127d4:	4682      	mov	sl, r0
 80127d6:	468b      	mov	fp, r1
 80127d8:	4602      	mov	r2, r0
 80127da:	460b      	mov	r3, r1
 80127dc:	4620      	mov	r0, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	a341      	add	r3, pc, #260	; (adr r3, 80128ec <__kernel_sin+0x14c>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	4680      	mov	r8, r0
 80127ec:	4689      	mov	r9, r1
 80127ee:	4650      	mov	r0, sl
 80127f0:	4659      	mov	r1, fp
 80127f2:	f7ed ff19 	bl	8000628 <__aeabi_dmul>
 80127f6:	a33f      	add	r3, pc, #252	; (adr r3, 80128f4 <__kernel_sin+0x154>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	f7ed fd5c 	bl	80002b8 <__aeabi_dsub>
 8012800:	4652      	mov	r2, sl
 8012802:	465b      	mov	r3, fp
 8012804:	f7ed ff10 	bl	8000628 <__aeabi_dmul>
 8012808:	a33c      	add	r3, pc, #240	; (adr r3, 80128fc <__kernel_sin+0x15c>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd55 	bl	80002bc <__adddf3>
 8012812:	4652      	mov	r2, sl
 8012814:	465b      	mov	r3, fp
 8012816:	f7ed ff07 	bl	8000628 <__aeabi_dmul>
 801281a:	a33a      	add	r3, pc, #232	; (adr r3, 8012904 <__kernel_sin+0x164>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed fd4a 	bl	80002b8 <__aeabi_dsub>
 8012824:	4652      	mov	r2, sl
 8012826:	465b      	mov	r3, fp
 8012828:	f7ed fefe 	bl	8000628 <__aeabi_dmul>
 801282c:	a337      	add	r3, pc, #220	; (adr r3, 801290c <__kernel_sin+0x16c>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	f7ed fd43 	bl	80002bc <__adddf3>
 8012836:	9b02      	ldr	r3, [sp, #8]
 8012838:	4606      	mov	r6, r0
 801283a:	460f      	mov	r7, r1
 801283c:	b9db      	cbnz	r3, 8012876 <__kernel_sin+0xd6>
 801283e:	4602      	mov	r2, r0
 8012840:	460b      	mov	r3, r1
 8012842:	4650      	mov	r0, sl
 8012844:	4659      	mov	r1, fp
 8012846:	f7ed feef 	bl	8000628 <__aeabi_dmul>
 801284a:	a325      	add	r3, pc, #148	; (adr r3, 80128e0 <__kernel_sin+0x140>)
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012850:	f7ed fd32 	bl	80002b8 <__aeabi_dsub>
 8012854:	4642      	mov	r2, r8
 8012856:	464b      	mov	r3, r9
 8012858:	f7ed fee6 	bl	8000628 <__aeabi_dmul>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	4620      	mov	r0, r4
 8012862:	4629      	mov	r1, r5
 8012864:	f7ed fd2a 	bl	80002bc <__adddf3>
 8012868:	4604      	mov	r4, r0
 801286a:	460d      	mov	r5, r1
 801286c:	ec45 4b10 	vmov	d0, r4, r5
 8012870:	b005      	add	sp, #20
 8012872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012876:	2200      	movs	r2, #0
 8012878:	4b1b      	ldr	r3, [pc, #108]	; (80128e8 <__kernel_sin+0x148>)
 801287a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801287e:	f7ed fed3 	bl	8000628 <__aeabi_dmul>
 8012882:	4632      	mov	r2, r6
 8012884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012888:	463b      	mov	r3, r7
 801288a:	4640      	mov	r0, r8
 801288c:	4649      	mov	r1, r9
 801288e:	f7ed fecb 	bl	8000628 <__aeabi_dmul>
 8012892:	4602      	mov	r2, r0
 8012894:	460b      	mov	r3, r1
 8012896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801289a:	f7ed fd0d 	bl	80002b8 <__aeabi_dsub>
 801289e:	4652      	mov	r2, sl
 80128a0:	465b      	mov	r3, fp
 80128a2:	f7ed fec1 	bl	8000628 <__aeabi_dmul>
 80128a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128aa:	f7ed fd05 	bl	80002b8 <__aeabi_dsub>
 80128ae:	a30c      	add	r3, pc, #48	; (adr r3, 80128e0 <__kernel_sin+0x140>)
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	4606      	mov	r6, r0
 80128b6:	460f      	mov	r7, r1
 80128b8:	4640      	mov	r0, r8
 80128ba:	4649      	mov	r1, r9
 80128bc:	f7ed feb4 	bl	8000628 <__aeabi_dmul>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4630      	mov	r0, r6
 80128c6:	4639      	mov	r1, r7
 80128c8:	f7ed fcf8 	bl	80002bc <__adddf3>
 80128cc:	4602      	mov	r2, r0
 80128ce:	460b      	mov	r3, r1
 80128d0:	4620      	mov	r0, r4
 80128d2:	4629      	mov	r1, r5
 80128d4:	f7ed fcf0 	bl	80002b8 <__aeabi_dsub>
 80128d8:	e7c6      	b.n	8012868 <__kernel_sin+0xc8>
 80128da:	bf00      	nop
 80128dc:	f3af 8000 	nop.w
 80128e0:	55555549 	.word	0x55555549
 80128e4:	3fc55555 	.word	0x3fc55555
 80128e8:	3fe00000 	.word	0x3fe00000
 80128ec:	5acfd57c 	.word	0x5acfd57c
 80128f0:	3de5d93a 	.word	0x3de5d93a
 80128f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80128f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80128fc:	57b1fe7d 	.word	0x57b1fe7d
 8012900:	3ec71de3 	.word	0x3ec71de3
 8012904:	19c161d5 	.word	0x19c161d5
 8012908:	3f2a01a0 	.word	0x3f2a01a0
 801290c:	1110f8a6 	.word	0x1110f8a6
 8012910:	3f811111 	.word	0x3f811111

08012914 <fabs>:
 8012914:	ec51 0b10 	vmov	r0, r1, d0
 8012918:	ee10 2a10 	vmov	r2, s0
 801291c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012920:	ec43 2b10 	vmov	d0, r2, r3
 8012924:	4770      	bx	lr
	...

08012928 <floor>:
 8012928:	ec51 0b10 	vmov	r0, r1, d0
 801292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012930:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012934:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012938:	2e13      	cmp	r6, #19
 801293a:	460c      	mov	r4, r1
 801293c:	ee10 5a10 	vmov	r5, s0
 8012940:	4680      	mov	r8, r0
 8012942:	dc34      	bgt.n	80129ae <floor+0x86>
 8012944:	2e00      	cmp	r6, #0
 8012946:	da16      	bge.n	8012976 <floor+0x4e>
 8012948:	a335      	add	r3, pc, #212	; (adr r3, 8012a20 <floor+0xf8>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	f7ed fcb5 	bl	80002bc <__adddf3>
 8012952:	2200      	movs	r2, #0
 8012954:	2300      	movs	r3, #0
 8012956:	f7ee f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 801295a:	b148      	cbz	r0, 8012970 <floor+0x48>
 801295c:	2c00      	cmp	r4, #0
 801295e:	da59      	bge.n	8012a14 <floor+0xec>
 8012960:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012964:	4a30      	ldr	r2, [pc, #192]	; (8012a28 <floor+0x100>)
 8012966:	432b      	orrs	r3, r5
 8012968:	2500      	movs	r5, #0
 801296a:	42ab      	cmp	r3, r5
 801296c:	bf18      	it	ne
 801296e:	4614      	movne	r4, r2
 8012970:	4621      	mov	r1, r4
 8012972:	4628      	mov	r0, r5
 8012974:	e025      	b.n	80129c2 <floor+0x9a>
 8012976:	4f2d      	ldr	r7, [pc, #180]	; (8012a2c <floor+0x104>)
 8012978:	4137      	asrs	r7, r6
 801297a:	ea01 0307 	and.w	r3, r1, r7
 801297e:	4303      	orrs	r3, r0
 8012980:	d01f      	beq.n	80129c2 <floor+0x9a>
 8012982:	a327      	add	r3, pc, #156	; (adr r3, 8012a20 <floor+0xf8>)
 8012984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012988:	f7ed fc98 	bl	80002bc <__adddf3>
 801298c:	2200      	movs	r2, #0
 801298e:	2300      	movs	r3, #0
 8012990:	f7ee f8da 	bl	8000b48 <__aeabi_dcmpgt>
 8012994:	2800      	cmp	r0, #0
 8012996:	d0eb      	beq.n	8012970 <floor+0x48>
 8012998:	2c00      	cmp	r4, #0
 801299a:	bfbe      	ittt	lt
 801299c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80129a4:	19a4      	addlt	r4, r4, r6
 80129a6:	ea24 0407 	bic.w	r4, r4, r7
 80129aa:	2500      	movs	r5, #0
 80129ac:	e7e0      	b.n	8012970 <floor+0x48>
 80129ae:	2e33      	cmp	r6, #51	; 0x33
 80129b0:	dd0b      	ble.n	80129ca <floor+0xa2>
 80129b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80129b6:	d104      	bne.n	80129c2 <floor+0x9a>
 80129b8:	ee10 2a10 	vmov	r2, s0
 80129bc:	460b      	mov	r3, r1
 80129be:	f7ed fc7d 	bl	80002bc <__adddf3>
 80129c2:	ec41 0b10 	vmov	d0, r0, r1
 80129c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80129ce:	f04f 33ff 	mov.w	r3, #4294967295
 80129d2:	fa23 f707 	lsr.w	r7, r3, r7
 80129d6:	4207      	tst	r7, r0
 80129d8:	d0f3      	beq.n	80129c2 <floor+0x9a>
 80129da:	a311      	add	r3, pc, #68	; (adr r3, 8012a20 <floor+0xf8>)
 80129dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e0:	f7ed fc6c 	bl	80002bc <__adddf3>
 80129e4:	2200      	movs	r2, #0
 80129e6:	2300      	movs	r3, #0
 80129e8:	f7ee f8ae 	bl	8000b48 <__aeabi_dcmpgt>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d0bf      	beq.n	8012970 <floor+0x48>
 80129f0:	2c00      	cmp	r4, #0
 80129f2:	da02      	bge.n	80129fa <floor+0xd2>
 80129f4:	2e14      	cmp	r6, #20
 80129f6:	d103      	bne.n	8012a00 <floor+0xd8>
 80129f8:	3401      	adds	r4, #1
 80129fa:	ea25 0507 	bic.w	r5, r5, r7
 80129fe:	e7b7      	b.n	8012970 <floor+0x48>
 8012a00:	2301      	movs	r3, #1
 8012a02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a06:	fa03 f606 	lsl.w	r6, r3, r6
 8012a0a:	4435      	add	r5, r6
 8012a0c:	4545      	cmp	r5, r8
 8012a0e:	bf38      	it	cc
 8012a10:	18e4      	addcc	r4, r4, r3
 8012a12:	e7f2      	b.n	80129fa <floor+0xd2>
 8012a14:	2500      	movs	r5, #0
 8012a16:	462c      	mov	r4, r5
 8012a18:	e7aa      	b.n	8012970 <floor+0x48>
 8012a1a:	bf00      	nop
 8012a1c:	f3af 8000 	nop.w
 8012a20:	8800759c 	.word	0x8800759c
 8012a24:	7e37e43c 	.word	0x7e37e43c
 8012a28:	bff00000 	.word	0xbff00000
 8012a2c:	000fffff 	.word	0x000fffff

08012a30 <scalbn>:
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	ec55 4b10 	vmov	r4, r5, d0
 8012a36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	462b      	mov	r3, r5
 8012a3e:	b9aa      	cbnz	r2, 8012a6c <scalbn+0x3c>
 8012a40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a44:	4323      	orrs	r3, r4
 8012a46:	d03b      	beq.n	8012ac0 <scalbn+0x90>
 8012a48:	4b31      	ldr	r3, [pc, #196]	; (8012b10 <scalbn+0xe0>)
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	ee10 0a10 	vmov	r0, s0
 8012a52:	f7ed fde9 	bl	8000628 <__aeabi_dmul>
 8012a56:	4b2f      	ldr	r3, [pc, #188]	; (8012b14 <scalbn+0xe4>)
 8012a58:	429e      	cmp	r6, r3
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	da12      	bge.n	8012a86 <scalbn+0x56>
 8012a60:	a327      	add	r3, pc, #156	; (adr r3, 8012b00 <scalbn+0xd0>)
 8012a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a66:	f7ed fddf 	bl	8000628 <__aeabi_dmul>
 8012a6a:	e009      	b.n	8012a80 <scalbn+0x50>
 8012a6c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012a70:	428a      	cmp	r2, r1
 8012a72:	d10c      	bne.n	8012a8e <scalbn+0x5e>
 8012a74:	ee10 2a10 	vmov	r2, s0
 8012a78:	4620      	mov	r0, r4
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	f7ed fc1e 	bl	80002bc <__adddf3>
 8012a80:	4604      	mov	r4, r0
 8012a82:	460d      	mov	r5, r1
 8012a84:	e01c      	b.n	8012ac0 <scalbn+0x90>
 8012a86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	3a36      	subs	r2, #54	; 0x36
 8012a8e:	4432      	add	r2, r6
 8012a90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012a94:	428a      	cmp	r2, r1
 8012a96:	dd0b      	ble.n	8012ab0 <scalbn+0x80>
 8012a98:	ec45 4b11 	vmov	d1, r4, r5
 8012a9c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012b08 <scalbn+0xd8>
 8012aa0:	f000 f83c 	bl	8012b1c <copysign>
 8012aa4:	a318      	add	r3, pc, #96	; (adr r3, 8012b08 <scalbn+0xd8>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	ec51 0b10 	vmov	r0, r1, d0
 8012aae:	e7da      	b.n	8012a66 <scalbn+0x36>
 8012ab0:	2a00      	cmp	r2, #0
 8012ab2:	dd08      	ble.n	8012ac6 <scalbn+0x96>
 8012ab4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ab8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012abc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ac0:	ec45 4b10 	vmov	d0, r4, r5
 8012ac4:	bd70      	pop	{r4, r5, r6, pc}
 8012ac6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012aca:	da0d      	bge.n	8012ae8 <scalbn+0xb8>
 8012acc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ad0:	429e      	cmp	r6, r3
 8012ad2:	ec45 4b11 	vmov	d1, r4, r5
 8012ad6:	dce1      	bgt.n	8012a9c <scalbn+0x6c>
 8012ad8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b00 <scalbn+0xd0>
 8012adc:	f000 f81e 	bl	8012b1c <copysign>
 8012ae0:	a307      	add	r3, pc, #28	; (adr r3, 8012b00 <scalbn+0xd0>)
 8012ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae6:	e7e0      	b.n	8012aaa <scalbn+0x7a>
 8012ae8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012aec:	3236      	adds	r2, #54	; 0x36
 8012aee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012af2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012af6:	4620      	mov	r0, r4
 8012af8:	4629      	mov	r1, r5
 8012afa:	2200      	movs	r2, #0
 8012afc:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <scalbn+0xe8>)
 8012afe:	e7b2      	b.n	8012a66 <scalbn+0x36>
 8012b00:	c2f8f359 	.word	0xc2f8f359
 8012b04:	01a56e1f 	.word	0x01a56e1f
 8012b08:	8800759c 	.word	0x8800759c
 8012b0c:	7e37e43c 	.word	0x7e37e43c
 8012b10:	43500000 	.word	0x43500000
 8012b14:	ffff3cb0 	.word	0xffff3cb0
 8012b18:	3c900000 	.word	0x3c900000

08012b1c <copysign>:
 8012b1c:	ec51 0b10 	vmov	r0, r1, d0
 8012b20:	ee11 0a90 	vmov	r0, s3
 8012b24:	ee10 2a10 	vmov	r2, s0
 8012b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012b2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012b30:	ea41 0300 	orr.w	r3, r1, r0
 8012b34:	ec43 2b10 	vmov	d0, r2, r3
 8012b38:	4770      	bx	lr
	...

08012b3c <__errno>:
 8012b3c:	4b01      	ldr	r3, [pc, #4]	; (8012b44 <__errno+0x8>)
 8012b3e:	6818      	ldr	r0, [r3, #0]
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	2000000c 	.word	0x2000000c

08012b48 <__libc_init_array>:
 8012b48:	b570      	push	{r4, r5, r6, lr}
 8012b4a:	4e0d      	ldr	r6, [pc, #52]	; (8012b80 <__libc_init_array+0x38>)
 8012b4c:	4c0d      	ldr	r4, [pc, #52]	; (8012b84 <__libc_init_array+0x3c>)
 8012b4e:	1ba4      	subs	r4, r4, r6
 8012b50:	10a4      	asrs	r4, r4, #2
 8012b52:	2500      	movs	r5, #0
 8012b54:	42a5      	cmp	r5, r4
 8012b56:	d109      	bne.n	8012b6c <__libc_init_array+0x24>
 8012b58:	4e0b      	ldr	r6, [pc, #44]	; (8012b88 <__libc_init_array+0x40>)
 8012b5a:	4c0c      	ldr	r4, [pc, #48]	; (8012b8c <__libc_init_array+0x44>)
 8012b5c:	f004 ff38 	bl	80179d0 <_init>
 8012b60:	1ba4      	subs	r4, r4, r6
 8012b62:	10a4      	asrs	r4, r4, #2
 8012b64:	2500      	movs	r5, #0
 8012b66:	42a5      	cmp	r5, r4
 8012b68:	d105      	bne.n	8012b76 <__libc_init_array+0x2e>
 8012b6a:	bd70      	pop	{r4, r5, r6, pc}
 8012b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b70:	4798      	blx	r3
 8012b72:	3501      	adds	r5, #1
 8012b74:	e7ee      	b.n	8012b54 <__libc_init_array+0xc>
 8012b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b7a:	4798      	blx	r3
 8012b7c:	3501      	adds	r5, #1
 8012b7e:	e7f2      	b.n	8012b66 <__libc_init_array+0x1e>
 8012b80:	080184d4 	.word	0x080184d4
 8012b84:	080184d4 	.word	0x080184d4
 8012b88:	080184d4 	.word	0x080184d4
 8012b8c:	080184dc 	.word	0x080184dc

08012b90 <memcpy>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	1e43      	subs	r3, r0, #1
 8012b94:	440a      	add	r2, r1
 8012b96:	4291      	cmp	r1, r2
 8012b98:	d100      	bne.n	8012b9c <memcpy+0xc>
 8012b9a:	bd10      	pop	{r4, pc}
 8012b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ba4:	e7f7      	b.n	8012b96 <memcpy+0x6>

08012ba6 <memset>:
 8012ba6:	4402      	add	r2, r0
 8012ba8:	4603      	mov	r3, r0
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d100      	bne.n	8012bb0 <memset+0xa>
 8012bae:	4770      	bx	lr
 8012bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8012bb4:	e7f9      	b.n	8012baa <memset+0x4>

08012bb6 <__cvt>:
 8012bb6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bba:	ec55 4b10 	vmov	r4, r5, d0
 8012bbe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bc4:	2d00      	cmp	r5, #0
 8012bc6:	460e      	mov	r6, r1
 8012bc8:	4691      	mov	r9, r2
 8012bca:	4619      	mov	r1, r3
 8012bcc:	bfb8      	it	lt
 8012bce:	4622      	movlt	r2, r4
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	f027 0720 	bic.w	r7, r7, #32
 8012bd6:	bfbb      	ittet	lt
 8012bd8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012bdc:	461d      	movlt	r5, r3
 8012bde:	2300      	movge	r3, #0
 8012be0:	232d      	movlt	r3, #45	; 0x2d
 8012be2:	bfb8      	it	lt
 8012be4:	4614      	movlt	r4, r2
 8012be6:	2f46      	cmp	r7, #70	; 0x46
 8012be8:	700b      	strb	r3, [r1, #0]
 8012bea:	d004      	beq.n	8012bf6 <__cvt+0x40>
 8012bec:	2f45      	cmp	r7, #69	; 0x45
 8012bee:	d100      	bne.n	8012bf2 <__cvt+0x3c>
 8012bf0:	3601      	adds	r6, #1
 8012bf2:	2102      	movs	r1, #2
 8012bf4:	e000      	b.n	8012bf8 <__cvt+0x42>
 8012bf6:	2103      	movs	r1, #3
 8012bf8:	ab03      	add	r3, sp, #12
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	ab02      	add	r3, sp, #8
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	4632      	mov	r2, r6
 8012c02:	4653      	mov	r3, sl
 8012c04:	ec45 4b10 	vmov	d0, r4, r5
 8012c08:	f001 ffb2 	bl	8014b70 <_dtoa_r>
 8012c0c:	2f47      	cmp	r7, #71	; 0x47
 8012c0e:	4680      	mov	r8, r0
 8012c10:	d102      	bne.n	8012c18 <__cvt+0x62>
 8012c12:	f019 0f01 	tst.w	r9, #1
 8012c16:	d026      	beq.n	8012c66 <__cvt+0xb0>
 8012c18:	2f46      	cmp	r7, #70	; 0x46
 8012c1a:	eb08 0906 	add.w	r9, r8, r6
 8012c1e:	d111      	bne.n	8012c44 <__cvt+0x8e>
 8012c20:	f898 3000 	ldrb.w	r3, [r8]
 8012c24:	2b30      	cmp	r3, #48	; 0x30
 8012c26:	d10a      	bne.n	8012c3e <__cvt+0x88>
 8012c28:	2200      	movs	r2, #0
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	4629      	mov	r1, r5
 8012c30:	f7ed ff62 	bl	8000af8 <__aeabi_dcmpeq>
 8012c34:	b918      	cbnz	r0, 8012c3e <__cvt+0x88>
 8012c36:	f1c6 0601 	rsb	r6, r6, #1
 8012c3a:	f8ca 6000 	str.w	r6, [sl]
 8012c3e:	f8da 3000 	ldr.w	r3, [sl]
 8012c42:	4499      	add	r9, r3
 8012c44:	2200      	movs	r2, #0
 8012c46:	2300      	movs	r3, #0
 8012c48:	4620      	mov	r0, r4
 8012c4a:	4629      	mov	r1, r5
 8012c4c:	f7ed ff54 	bl	8000af8 <__aeabi_dcmpeq>
 8012c50:	b938      	cbnz	r0, 8012c62 <__cvt+0xac>
 8012c52:	2230      	movs	r2, #48	; 0x30
 8012c54:	9b03      	ldr	r3, [sp, #12]
 8012c56:	454b      	cmp	r3, r9
 8012c58:	d205      	bcs.n	8012c66 <__cvt+0xb0>
 8012c5a:	1c59      	adds	r1, r3, #1
 8012c5c:	9103      	str	r1, [sp, #12]
 8012c5e:	701a      	strb	r2, [r3, #0]
 8012c60:	e7f8      	b.n	8012c54 <__cvt+0x9e>
 8012c62:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c66:	9b03      	ldr	r3, [sp, #12]
 8012c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c6a:	eba3 0308 	sub.w	r3, r3, r8
 8012c6e:	4640      	mov	r0, r8
 8012c70:	6013      	str	r3, [r2, #0]
 8012c72:	b004      	add	sp, #16
 8012c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012c78 <__exponent>:
 8012c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c7a:	2900      	cmp	r1, #0
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	bfba      	itte	lt
 8012c80:	4249      	neglt	r1, r1
 8012c82:	232d      	movlt	r3, #45	; 0x2d
 8012c84:	232b      	movge	r3, #43	; 0x2b
 8012c86:	2909      	cmp	r1, #9
 8012c88:	f804 2b02 	strb.w	r2, [r4], #2
 8012c8c:	7043      	strb	r3, [r0, #1]
 8012c8e:	dd20      	ble.n	8012cd2 <__exponent+0x5a>
 8012c90:	f10d 0307 	add.w	r3, sp, #7
 8012c94:	461f      	mov	r7, r3
 8012c96:	260a      	movs	r6, #10
 8012c98:	fb91 f5f6 	sdiv	r5, r1, r6
 8012c9c:	fb06 1115 	mls	r1, r6, r5, r1
 8012ca0:	3130      	adds	r1, #48	; 0x30
 8012ca2:	2d09      	cmp	r5, #9
 8012ca4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012ca8:	f103 32ff 	add.w	r2, r3, #4294967295
 8012cac:	4629      	mov	r1, r5
 8012cae:	dc09      	bgt.n	8012cc4 <__exponent+0x4c>
 8012cb0:	3130      	adds	r1, #48	; 0x30
 8012cb2:	3b02      	subs	r3, #2
 8012cb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012cb8:	42bb      	cmp	r3, r7
 8012cba:	4622      	mov	r2, r4
 8012cbc:	d304      	bcc.n	8012cc8 <__exponent+0x50>
 8012cbe:	1a10      	subs	r0, r2, r0
 8012cc0:	b003      	add	sp, #12
 8012cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	e7e7      	b.n	8012c98 <__exponent+0x20>
 8012cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ccc:	f804 2b01 	strb.w	r2, [r4], #1
 8012cd0:	e7f2      	b.n	8012cb8 <__exponent+0x40>
 8012cd2:	2330      	movs	r3, #48	; 0x30
 8012cd4:	4419      	add	r1, r3
 8012cd6:	7083      	strb	r3, [r0, #2]
 8012cd8:	1d02      	adds	r2, r0, #4
 8012cda:	70c1      	strb	r1, [r0, #3]
 8012cdc:	e7ef      	b.n	8012cbe <__exponent+0x46>
	...

08012ce0 <_printf_float>:
 8012ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce4:	b08d      	sub	sp, #52	; 0x34
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012cec:	4616      	mov	r6, r2
 8012cee:	461f      	mov	r7, r3
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	f003 f9a9 	bl	8016048 <_localeconv_r>
 8012cf6:	6803      	ldr	r3, [r0, #0]
 8012cf8:	9304      	str	r3, [sp, #16]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ed fa80 	bl	8000200 <strlen>
 8012d00:	2300      	movs	r3, #0
 8012d02:	930a      	str	r3, [sp, #40]	; 0x28
 8012d04:	f8d8 3000 	ldr.w	r3, [r8]
 8012d08:	9005      	str	r0, [sp, #20]
 8012d0a:	3307      	adds	r3, #7
 8012d0c:	f023 0307 	bic.w	r3, r3, #7
 8012d10:	f103 0208 	add.w	r2, r3, #8
 8012d14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d18:	f8d4 b000 	ldr.w	fp, [r4]
 8012d1c:	f8c8 2000 	str.w	r2, [r8]
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d28:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d30:	9307      	str	r3, [sp, #28]
 8012d32:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d36:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3a:	4ba7      	ldr	r3, [pc, #668]	; (8012fd8 <_printf_float+0x2f8>)
 8012d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d40:	f7ed ff0c 	bl	8000b5c <__aeabi_dcmpun>
 8012d44:	bb70      	cbnz	r0, 8012da4 <_printf_float+0xc4>
 8012d46:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4a:	4ba3      	ldr	r3, [pc, #652]	; (8012fd8 <_printf_float+0x2f8>)
 8012d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d50:	f7ed fee6 	bl	8000b20 <__aeabi_dcmple>
 8012d54:	bb30      	cbnz	r0, 8012da4 <_printf_float+0xc4>
 8012d56:	2200      	movs	r2, #0
 8012d58:	2300      	movs	r3, #0
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	f7ed fed5 	bl	8000b0c <__aeabi_dcmplt>
 8012d62:	b110      	cbz	r0, 8012d6a <_printf_float+0x8a>
 8012d64:	232d      	movs	r3, #45	; 0x2d
 8012d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d6a:	4a9c      	ldr	r2, [pc, #624]	; (8012fdc <_printf_float+0x2fc>)
 8012d6c:	4b9c      	ldr	r3, [pc, #624]	; (8012fe0 <_printf_float+0x300>)
 8012d6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012d72:	bf8c      	ite	hi
 8012d74:	4690      	movhi	r8, r2
 8012d76:	4698      	movls	r8, r3
 8012d78:	2303      	movs	r3, #3
 8012d7a:	f02b 0204 	bic.w	r2, fp, #4
 8012d7e:	6123      	str	r3, [r4, #16]
 8012d80:	6022      	str	r2, [r4, #0]
 8012d82:	f04f 0900 	mov.w	r9, #0
 8012d86:	9700      	str	r7, [sp, #0]
 8012d88:	4633      	mov	r3, r6
 8012d8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d8c:	4621      	mov	r1, r4
 8012d8e:	4628      	mov	r0, r5
 8012d90:	f000 f9e6 	bl	8013160 <_printf_common>
 8012d94:	3001      	adds	r0, #1
 8012d96:	f040 808d 	bne.w	8012eb4 <_printf_float+0x1d4>
 8012d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9e:	b00d      	add	sp, #52	; 0x34
 8012da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da4:	4642      	mov	r2, r8
 8012da6:	464b      	mov	r3, r9
 8012da8:	4640      	mov	r0, r8
 8012daa:	4649      	mov	r1, r9
 8012dac:	f7ed fed6 	bl	8000b5c <__aeabi_dcmpun>
 8012db0:	b110      	cbz	r0, 8012db8 <_printf_float+0xd8>
 8012db2:	4a8c      	ldr	r2, [pc, #560]	; (8012fe4 <_printf_float+0x304>)
 8012db4:	4b8c      	ldr	r3, [pc, #560]	; (8012fe8 <_printf_float+0x308>)
 8012db6:	e7da      	b.n	8012d6e <_printf_float+0x8e>
 8012db8:	6861      	ldr	r1, [r4, #4]
 8012dba:	1c4b      	adds	r3, r1, #1
 8012dbc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012dc0:	a80a      	add	r0, sp, #40	; 0x28
 8012dc2:	d13e      	bne.n	8012e42 <_printf_float+0x162>
 8012dc4:	2306      	movs	r3, #6
 8012dc6:	6063      	str	r3, [r4, #4]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012dce:	ab09      	add	r3, sp, #36	; 0x24
 8012dd0:	9300      	str	r3, [sp, #0]
 8012dd2:	ec49 8b10 	vmov	d0, r8, r9
 8012dd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012dda:	6022      	str	r2, [r4, #0]
 8012ddc:	f8cd a004 	str.w	sl, [sp, #4]
 8012de0:	6861      	ldr	r1, [r4, #4]
 8012de2:	4628      	mov	r0, r5
 8012de4:	f7ff fee7 	bl	8012bb6 <__cvt>
 8012de8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012dec:	2b47      	cmp	r3, #71	; 0x47
 8012dee:	4680      	mov	r8, r0
 8012df0:	d109      	bne.n	8012e06 <_printf_float+0x126>
 8012df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df4:	1cd8      	adds	r0, r3, #3
 8012df6:	db02      	blt.n	8012dfe <_printf_float+0x11e>
 8012df8:	6862      	ldr	r2, [r4, #4]
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	dd47      	ble.n	8012e8e <_printf_float+0x1ae>
 8012dfe:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e02:	fa5f fa8a 	uxtb.w	sl, sl
 8012e06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e0c:	d824      	bhi.n	8012e58 <_printf_float+0x178>
 8012e0e:	3901      	subs	r1, #1
 8012e10:	4652      	mov	r2, sl
 8012e12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e16:	9109      	str	r1, [sp, #36]	; 0x24
 8012e18:	f7ff ff2e 	bl	8012c78 <__exponent>
 8012e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e1e:	1813      	adds	r3, r2, r0
 8012e20:	2a01      	cmp	r2, #1
 8012e22:	4681      	mov	r9, r0
 8012e24:	6123      	str	r3, [r4, #16]
 8012e26:	dc02      	bgt.n	8012e2e <_printf_float+0x14e>
 8012e28:	6822      	ldr	r2, [r4, #0]
 8012e2a:	07d1      	lsls	r1, r2, #31
 8012e2c:	d501      	bpl.n	8012e32 <_printf_float+0x152>
 8012e2e:	3301      	adds	r3, #1
 8012e30:	6123      	str	r3, [r4, #16]
 8012e32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d0a5      	beq.n	8012d86 <_printf_float+0xa6>
 8012e3a:	232d      	movs	r3, #45	; 0x2d
 8012e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e40:	e7a1      	b.n	8012d86 <_printf_float+0xa6>
 8012e42:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012e46:	f000 8177 	beq.w	8013138 <_printf_float+0x458>
 8012e4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e4e:	d1bb      	bne.n	8012dc8 <_printf_float+0xe8>
 8012e50:	2900      	cmp	r1, #0
 8012e52:	d1b9      	bne.n	8012dc8 <_printf_float+0xe8>
 8012e54:	2301      	movs	r3, #1
 8012e56:	e7b6      	b.n	8012dc6 <_printf_float+0xe6>
 8012e58:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012e5c:	d119      	bne.n	8012e92 <_printf_float+0x1b2>
 8012e5e:	2900      	cmp	r1, #0
 8012e60:	6863      	ldr	r3, [r4, #4]
 8012e62:	dd0c      	ble.n	8012e7e <_printf_float+0x19e>
 8012e64:	6121      	str	r1, [r4, #16]
 8012e66:	b913      	cbnz	r3, 8012e6e <_printf_float+0x18e>
 8012e68:	6822      	ldr	r2, [r4, #0]
 8012e6a:	07d2      	lsls	r2, r2, #31
 8012e6c:	d502      	bpl.n	8012e74 <_printf_float+0x194>
 8012e6e:	3301      	adds	r3, #1
 8012e70:	440b      	add	r3, r1
 8012e72:	6123      	str	r3, [r4, #16]
 8012e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e76:	65a3      	str	r3, [r4, #88]	; 0x58
 8012e78:	f04f 0900 	mov.w	r9, #0
 8012e7c:	e7d9      	b.n	8012e32 <_printf_float+0x152>
 8012e7e:	b913      	cbnz	r3, 8012e86 <_printf_float+0x1a6>
 8012e80:	6822      	ldr	r2, [r4, #0]
 8012e82:	07d0      	lsls	r0, r2, #31
 8012e84:	d501      	bpl.n	8012e8a <_printf_float+0x1aa>
 8012e86:	3302      	adds	r3, #2
 8012e88:	e7f3      	b.n	8012e72 <_printf_float+0x192>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e7f1      	b.n	8012e72 <_printf_float+0x192>
 8012e8e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012e92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012e96:	4293      	cmp	r3, r2
 8012e98:	db05      	blt.n	8012ea6 <_printf_float+0x1c6>
 8012e9a:	6822      	ldr	r2, [r4, #0]
 8012e9c:	6123      	str	r3, [r4, #16]
 8012e9e:	07d1      	lsls	r1, r2, #31
 8012ea0:	d5e8      	bpl.n	8012e74 <_printf_float+0x194>
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	e7e5      	b.n	8012e72 <_printf_float+0x192>
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	bfd4      	ite	le
 8012eaa:	f1c3 0302 	rsble	r3, r3, #2
 8012eae:	2301      	movgt	r3, #1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	e7de      	b.n	8012e72 <_printf_float+0x192>
 8012eb4:	6823      	ldr	r3, [r4, #0]
 8012eb6:	055a      	lsls	r2, r3, #21
 8012eb8:	d407      	bmi.n	8012eca <_printf_float+0x1ea>
 8012eba:	6923      	ldr	r3, [r4, #16]
 8012ebc:	4642      	mov	r2, r8
 8012ebe:	4631      	mov	r1, r6
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	47b8      	blx	r7
 8012ec4:	3001      	adds	r0, #1
 8012ec6:	d12b      	bne.n	8012f20 <_printf_float+0x240>
 8012ec8:	e767      	b.n	8012d9a <_printf_float+0xba>
 8012eca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012ece:	f240 80dc 	bls.w	801308a <_printf_float+0x3aa>
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012eda:	f7ed fe0d 	bl	8000af8 <__aeabi_dcmpeq>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d033      	beq.n	8012f4a <_printf_float+0x26a>
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	4a41      	ldr	r2, [pc, #260]	; (8012fec <_printf_float+0x30c>)
 8012ee6:	4631      	mov	r1, r6
 8012ee8:	4628      	mov	r0, r5
 8012eea:	47b8      	blx	r7
 8012eec:	3001      	adds	r0, #1
 8012eee:	f43f af54 	beq.w	8012d9a <_printf_float+0xba>
 8012ef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	db02      	blt.n	8012f00 <_printf_float+0x220>
 8012efa:	6823      	ldr	r3, [r4, #0]
 8012efc:	07d8      	lsls	r0, r3, #31
 8012efe:	d50f      	bpl.n	8012f20 <_printf_float+0x240>
 8012f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f04:	4631      	mov	r1, r6
 8012f06:	4628      	mov	r0, r5
 8012f08:	47b8      	blx	r7
 8012f0a:	3001      	adds	r0, #1
 8012f0c:	f43f af45 	beq.w	8012d9a <_printf_float+0xba>
 8012f10:	f04f 0800 	mov.w	r8, #0
 8012f14:	f104 091a 	add.w	r9, r4, #26
 8012f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f1a:	3b01      	subs	r3, #1
 8012f1c:	4543      	cmp	r3, r8
 8012f1e:	dc09      	bgt.n	8012f34 <_printf_float+0x254>
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	079b      	lsls	r3, r3, #30
 8012f24:	f100 8103 	bmi.w	801312e <_printf_float+0x44e>
 8012f28:	68e0      	ldr	r0, [r4, #12]
 8012f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f2c:	4298      	cmp	r0, r3
 8012f2e:	bfb8      	it	lt
 8012f30:	4618      	movlt	r0, r3
 8012f32:	e734      	b.n	8012d9e <_printf_float+0xbe>
 8012f34:	2301      	movs	r3, #1
 8012f36:	464a      	mov	r2, r9
 8012f38:	4631      	mov	r1, r6
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	47b8      	blx	r7
 8012f3e:	3001      	adds	r0, #1
 8012f40:	f43f af2b 	beq.w	8012d9a <_printf_float+0xba>
 8012f44:	f108 0801 	add.w	r8, r8, #1
 8012f48:	e7e6      	b.n	8012f18 <_printf_float+0x238>
 8012f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	dc2b      	bgt.n	8012fa8 <_printf_float+0x2c8>
 8012f50:	2301      	movs	r3, #1
 8012f52:	4a26      	ldr	r2, [pc, #152]	; (8012fec <_printf_float+0x30c>)
 8012f54:	4631      	mov	r1, r6
 8012f56:	4628      	mov	r0, r5
 8012f58:	47b8      	blx	r7
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	f43f af1d 	beq.w	8012d9a <_printf_float+0xba>
 8012f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f62:	b923      	cbnz	r3, 8012f6e <_printf_float+0x28e>
 8012f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f66:	b913      	cbnz	r3, 8012f6e <_printf_float+0x28e>
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	07d9      	lsls	r1, r3, #31
 8012f6c:	d5d8      	bpl.n	8012f20 <_printf_float+0x240>
 8012f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f72:	4631      	mov	r1, r6
 8012f74:	4628      	mov	r0, r5
 8012f76:	47b8      	blx	r7
 8012f78:	3001      	adds	r0, #1
 8012f7a:	f43f af0e 	beq.w	8012d9a <_printf_float+0xba>
 8012f7e:	f04f 0900 	mov.w	r9, #0
 8012f82:	f104 0a1a 	add.w	sl, r4, #26
 8012f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f88:	425b      	negs	r3, r3
 8012f8a:	454b      	cmp	r3, r9
 8012f8c:	dc01      	bgt.n	8012f92 <_printf_float+0x2b2>
 8012f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f90:	e794      	b.n	8012ebc <_printf_float+0x1dc>
 8012f92:	2301      	movs	r3, #1
 8012f94:	4652      	mov	r2, sl
 8012f96:	4631      	mov	r1, r6
 8012f98:	4628      	mov	r0, r5
 8012f9a:	47b8      	blx	r7
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	f43f aefc 	beq.w	8012d9a <_printf_float+0xba>
 8012fa2:	f109 0901 	add.w	r9, r9, #1
 8012fa6:	e7ee      	b.n	8012f86 <_printf_float+0x2a6>
 8012fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012fac:	429a      	cmp	r2, r3
 8012fae:	bfa8      	it	ge
 8012fb0:	461a      	movge	r2, r3
 8012fb2:	2a00      	cmp	r2, #0
 8012fb4:	4691      	mov	r9, r2
 8012fb6:	dd07      	ble.n	8012fc8 <_printf_float+0x2e8>
 8012fb8:	4613      	mov	r3, r2
 8012fba:	4631      	mov	r1, r6
 8012fbc:	4642      	mov	r2, r8
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	47b8      	blx	r7
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	f43f aee9 	beq.w	8012d9a <_printf_float+0xba>
 8012fc8:	f104 031a 	add.w	r3, r4, #26
 8012fcc:	f04f 0b00 	mov.w	fp, #0
 8012fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012fd4:	9306      	str	r3, [sp, #24]
 8012fd6:	e015      	b.n	8013004 <_printf_float+0x324>
 8012fd8:	7fefffff 	.word	0x7fefffff
 8012fdc:	08018198 	.word	0x08018198
 8012fe0:	08018194 	.word	0x08018194
 8012fe4:	080181a0 	.word	0x080181a0
 8012fe8:	0801819c 	.word	0x0801819c
 8012fec:	080183c3 	.word	0x080183c3
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	9a06      	ldr	r2, [sp, #24]
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	47b8      	blx	r7
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f43f aecd 	beq.w	8012d9a <_printf_float+0xba>
 8013000:	f10b 0b01 	add.w	fp, fp, #1
 8013004:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013008:	ebaa 0309 	sub.w	r3, sl, r9
 801300c:	455b      	cmp	r3, fp
 801300e:	dcef      	bgt.n	8012ff0 <_printf_float+0x310>
 8013010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013014:	429a      	cmp	r2, r3
 8013016:	44d0      	add	r8, sl
 8013018:	db15      	blt.n	8013046 <_printf_float+0x366>
 801301a:	6823      	ldr	r3, [r4, #0]
 801301c:	07da      	lsls	r2, r3, #31
 801301e:	d412      	bmi.n	8013046 <_printf_float+0x366>
 8013020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013024:	eba3 020a 	sub.w	r2, r3, sl
 8013028:	eba3 0a01 	sub.w	sl, r3, r1
 801302c:	4592      	cmp	sl, r2
 801302e:	bfa8      	it	ge
 8013030:	4692      	movge	sl, r2
 8013032:	f1ba 0f00 	cmp.w	sl, #0
 8013036:	dc0e      	bgt.n	8013056 <_printf_float+0x376>
 8013038:	f04f 0800 	mov.w	r8, #0
 801303c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013040:	f104 091a 	add.w	r9, r4, #26
 8013044:	e019      	b.n	801307a <_printf_float+0x39a>
 8013046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801304a:	4631      	mov	r1, r6
 801304c:	4628      	mov	r0, r5
 801304e:	47b8      	blx	r7
 8013050:	3001      	adds	r0, #1
 8013052:	d1e5      	bne.n	8013020 <_printf_float+0x340>
 8013054:	e6a1      	b.n	8012d9a <_printf_float+0xba>
 8013056:	4653      	mov	r3, sl
 8013058:	4642      	mov	r2, r8
 801305a:	4631      	mov	r1, r6
 801305c:	4628      	mov	r0, r5
 801305e:	47b8      	blx	r7
 8013060:	3001      	adds	r0, #1
 8013062:	d1e9      	bne.n	8013038 <_printf_float+0x358>
 8013064:	e699      	b.n	8012d9a <_printf_float+0xba>
 8013066:	2301      	movs	r3, #1
 8013068:	464a      	mov	r2, r9
 801306a:	4631      	mov	r1, r6
 801306c:	4628      	mov	r0, r5
 801306e:	47b8      	blx	r7
 8013070:	3001      	adds	r0, #1
 8013072:	f43f ae92 	beq.w	8012d9a <_printf_float+0xba>
 8013076:	f108 0801 	add.w	r8, r8, #1
 801307a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801307e:	1a9b      	subs	r3, r3, r2
 8013080:	eba3 030a 	sub.w	r3, r3, sl
 8013084:	4543      	cmp	r3, r8
 8013086:	dcee      	bgt.n	8013066 <_printf_float+0x386>
 8013088:	e74a      	b.n	8012f20 <_printf_float+0x240>
 801308a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801308c:	2a01      	cmp	r2, #1
 801308e:	dc01      	bgt.n	8013094 <_printf_float+0x3b4>
 8013090:	07db      	lsls	r3, r3, #31
 8013092:	d53a      	bpl.n	801310a <_printf_float+0x42a>
 8013094:	2301      	movs	r3, #1
 8013096:	4642      	mov	r2, r8
 8013098:	4631      	mov	r1, r6
 801309a:	4628      	mov	r0, r5
 801309c:	47b8      	blx	r7
 801309e:	3001      	adds	r0, #1
 80130a0:	f43f ae7b 	beq.w	8012d9a <_printf_float+0xba>
 80130a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130a8:	4631      	mov	r1, r6
 80130aa:	4628      	mov	r0, r5
 80130ac:	47b8      	blx	r7
 80130ae:	3001      	adds	r0, #1
 80130b0:	f108 0801 	add.w	r8, r8, #1
 80130b4:	f43f ae71 	beq.w	8012d9a <_printf_float+0xba>
 80130b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130ba:	2200      	movs	r2, #0
 80130bc:	f103 3aff 	add.w	sl, r3, #4294967295
 80130c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130c4:	2300      	movs	r3, #0
 80130c6:	f7ed fd17 	bl	8000af8 <__aeabi_dcmpeq>
 80130ca:	b9c8      	cbnz	r0, 8013100 <_printf_float+0x420>
 80130cc:	4653      	mov	r3, sl
 80130ce:	4642      	mov	r2, r8
 80130d0:	4631      	mov	r1, r6
 80130d2:	4628      	mov	r0, r5
 80130d4:	47b8      	blx	r7
 80130d6:	3001      	adds	r0, #1
 80130d8:	d10e      	bne.n	80130f8 <_printf_float+0x418>
 80130da:	e65e      	b.n	8012d9a <_printf_float+0xba>
 80130dc:	2301      	movs	r3, #1
 80130de:	4652      	mov	r2, sl
 80130e0:	4631      	mov	r1, r6
 80130e2:	4628      	mov	r0, r5
 80130e4:	47b8      	blx	r7
 80130e6:	3001      	adds	r0, #1
 80130e8:	f43f ae57 	beq.w	8012d9a <_printf_float+0xba>
 80130ec:	f108 0801 	add.w	r8, r8, #1
 80130f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f2:	3b01      	subs	r3, #1
 80130f4:	4543      	cmp	r3, r8
 80130f6:	dcf1      	bgt.n	80130dc <_printf_float+0x3fc>
 80130f8:	464b      	mov	r3, r9
 80130fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80130fe:	e6de      	b.n	8012ebe <_printf_float+0x1de>
 8013100:	f04f 0800 	mov.w	r8, #0
 8013104:	f104 0a1a 	add.w	sl, r4, #26
 8013108:	e7f2      	b.n	80130f0 <_printf_float+0x410>
 801310a:	2301      	movs	r3, #1
 801310c:	e7df      	b.n	80130ce <_printf_float+0x3ee>
 801310e:	2301      	movs	r3, #1
 8013110:	464a      	mov	r2, r9
 8013112:	4631      	mov	r1, r6
 8013114:	4628      	mov	r0, r5
 8013116:	47b8      	blx	r7
 8013118:	3001      	adds	r0, #1
 801311a:	f43f ae3e 	beq.w	8012d9a <_printf_float+0xba>
 801311e:	f108 0801 	add.w	r8, r8, #1
 8013122:	68e3      	ldr	r3, [r4, #12]
 8013124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013126:	1a9b      	subs	r3, r3, r2
 8013128:	4543      	cmp	r3, r8
 801312a:	dcf0      	bgt.n	801310e <_printf_float+0x42e>
 801312c:	e6fc      	b.n	8012f28 <_printf_float+0x248>
 801312e:	f04f 0800 	mov.w	r8, #0
 8013132:	f104 0919 	add.w	r9, r4, #25
 8013136:	e7f4      	b.n	8013122 <_printf_float+0x442>
 8013138:	2900      	cmp	r1, #0
 801313a:	f43f ae8b 	beq.w	8012e54 <_printf_float+0x174>
 801313e:	2300      	movs	r3, #0
 8013140:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013144:	ab09      	add	r3, sp, #36	; 0x24
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	ec49 8b10 	vmov	d0, r8, r9
 801314c:	6022      	str	r2, [r4, #0]
 801314e:	f8cd a004 	str.w	sl, [sp, #4]
 8013152:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013156:	4628      	mov	r0, r5
 8013158:	f7ff fd2d 	bl	8012bb6 <__cvt>
 801315c:	4680      	mov	r8, r0
 801315e:	e648      	b.n	8012df2 <_printf_float+0x112>

08013160 <_printf_common>:
 8013160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013164:	4691      	mov	r9, r2
 8013166:	461f      	mov	r7, r3
 8013168:	688a      	ldr	r2, [r1, #8]
 801316a:	690b      	ldr	r3, [r1, #16]
 801316c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013170:	4293      	cmp	r3, r2
 8013172:	bfb8      	it	lt
 8013174:	4613      	movlt	r3, r2
 8013176:	f8c9 3000 	str.w	r3, [r9]
 801317a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801317e:	4606      	mov	r6, r0
 8013180:	460c      	mov	r4, r1
 8013182:	b112      	cbz	r2, 801318a <_printf_common+0x2a>
 8013184:	3301      	adds	r3, #1
 8013186:	f8c9 3000 	str.w	r3, [r9]
 801318a:	6823      	ldr	r3, [r4, #0]
 801318c:	0699      	lsls	r1, r3, #26
 801318e:	bf42      	ittt	mi
 8013190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013194:	3302      	addmi	r3, #2
 8013196:	f8c9 3000 	strmi.w	r3, [r9]
 801319a:	6825      	ldr	r5, [r4, #0]
 801319c:	f015 0506 	ands.w	r5, r5, #6
 80131a0:	d107      	bne.n	80131b2 <_printf_common+0x52>
 80131a2:	f104 0a19 	add.w	sl, r4, #25
 80131a6:	68e3      	ldr	r3, [r4, #12]
 80131a8:	f8d9 2000 	ldr.w	r2, [r9]
 80131ac:	1a9b      	subs	r3, r3, r2
 80131ae:	42ab      	cmp	r3, r5
 80131b0:	dc28      	bgt.n	8013204 <_printf_common+0xa4>
 80131b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80131b6:	6822      	ldr	r2, [r4, #0]
 80131b8:	3300      	adds	r3, #0
 80131ba:	bf18      	it	ne
 80131bc:	2301      	movne	r3, #1
 80131be:	0692      	lsls	r2, r2, #26
 80131c0:	d42d      	bmi.n	801321e <_printf_common+0xbe>
 80131c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131c6:	4639      	mov	r1, r7
 80131c8:	4630      	mov	r0, r6
 80131ca:	47c0      	blx	r8
 80131cc:	3001      	adds	r0, #1
 80131ce:	d020      	beq.n	8013212 <_printf_common+0xb2>
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	68e5      	ldr	r5, [r4, #12]
 80131d4:	f8d9 2000 	ldr.w	r2, [r9]
 80131d8:	f003 0306 	and.w	r3, r3, #6
 80131dc:	2b04      	cmp	r3, #4
 80131de:	bf08      	it	eq
 80131e0:	1aad      	subeq	r5, r5, r2
 80131e2:	68a3      	ldr	r3, [r4, #8]
 80131e4:	6922      	ldr	r2, [r4, #16]
 80131e6:	bf0c      	ite	eq
 80131e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131ec:	2500      	movne	r5, #0
 80131ee:	4293      	cmp	r3, r2
 80131f0:	bfc4      	itt	gt
 80131f2:	1a9b      	subgt	r3, r3, r2
 80131f4:	18ed      	addgt	r5, r5, r3
 80131f6:	f04f 0900 	mov.w	r9, #0
 80131fa:	341a      	adds	r4, #26
 80131fc:	454d      	cmp	r5, r9
 80131fe:	d11a      	bne.n	8013236 <_printf_common+0xd6>
 8013200:	2000      	movs	r0, #0
 8013202:	e008      	b.n	8013216 <_printf_common+0xb6>
 8013204:	2301      	movs	r3, #1
 8013206:	4652      	mov	r2, sl
 8013208:	4639      	mov	r1, r7
 801320a:	4630      	mov	r0, r6
 801320c:	47c0      	blx	r8
 801320e:	3001      	adds	r0, #1
 8013210:	d103      	bne.n	801321a <_printf_common+0xba>
 8013212:	f04f 30ff 	mov.w	r0, #4294967295
 8013216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801321a:	3501      	adds	r5, #1
 801321c:	e7c3      	b.n	80131a6 <_printf_common+0x46>
 801321e:	18e1      	adds	r1, r4, r3
 8013220:	1c5a      	adds	r2, r3, #1
 8013222:	2030      	movs	r0, #48	; 0x30
 8013224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013228:	4422      	add	r2, r4
 801322a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801322e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013232:	3302      	adds	r3, #2
 8013234:	e7c5      	b.n	80131c2 <_printf_common+0x62>
 8013236:	2301      	movs	r3, #1
 8013238:	4622      	mov	r2, r4
 801323a:	4639      	mov	r1, r7
 801323c:	4630      	mov	r0, r6
 801323e:	47c0      	blx	r8
 8013240:	3001      	adds	r0, #1
 8013242:	d0e6      	beq.n	8013212 <_printf_common+0xb2>
 8013244:	f109 0901 	add.w	r9, r9, #1
 8013248:	e7d8      	b.n	80131fc <_printf_common+0x9c>
	...

0801324c <_printf_i>:
 801324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013254:	460c      	mov	r4, r1
 8013256:	7e09      	ldrb	r1, [r1, #24]
 8013258:	b085      	sub	sp, #20
 801325a:	296e      	cmp	r1, #110	; 0x6e
 801325c:	4617      	mov	r7, r2
 801325e:	4606      	mov	r6, r0
 8013260:	4698      	mov	r8, r3
 8013262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013264:	f000 80b3 	beq.w	80133ce <_printf_i+0x182>
 8013268:	d822      	bhi.n	80132b0 <_printf_i+0x64>
 801326a:	2963      	cmp	r1, #99	; 0x63
 801326c:	d036      	beq.n	80132dc <_printf_i+0x90>
 801326e:	d80a      	bhi.n	8013286 <_printf_i+0x3a>
 8013270:	2900      	cmp	r1, #0
 8013272:	f000 80b9 	beq.w	80133e8 <_printf_i+0x19c>
 8013276:	2958      	cmp	r1, #88	; 0x58
 8013278:	f000 8083 	beq.w	8013382 <_printf_i+0x136>
 801327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013284:	e032      	b.n	80132ec <_printf_i+0xa0>
 8013286:	2964      	cmp	r1, #100	; 0x64
 8013288:	d001      	beq.n	801328e <_printf_i+0x42>
 801328a:	2969      	cmp	r1, #105	; 0x69
 801328c:	d1f6      	bne.n	801327c <_printf_i+0x30>
 801328e:	6820      	ldr	r0, [r4, #0]
 8013290:	6813      	ldr	r3, [r2, #0]
 8013292:	0605      	lsls	r5, r0, #24
 8013294:	f103 0104 	add.w	r1, r3, #4
 8013298:	d52a      	bpl.n	80132f0 <_printf_i+0xa4>
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	6011      	str	r1, [r2, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	da03      	bge.n	80132aa <_printf_i+0x5e>
 80132a2:	222d      	movs	r2, #45	; 0x2d
 80132a4:	425b      	negs	r3, r3
 80132a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80132aa:	486f      	ldr	r0, [pc, #444]	; (8013468 <_printf_i+0x21c>)
 80132ac:	220a      	movs	r2, #10
 80132ae:	e039      	b.n	8013324 <_printf_i+0xd8>
 80132b0:	2973      	cmp	r1, #115	; 0x73
 80132b2:	f000 809d 	beq.w	80133f0 <_printf_i+0x1a4>
 80132b6:	d808      	bhi.n	80132ca <_printf_i+0x7e>
 80132b8:	296f      	cmp	r1, #111	; 0x6f
 80132ba:	d020      	beq.n	80132fe <_printf_i+0xb2>
 80132bc:	2970      	cmp	r1, #112	; 0x70
 80132be:	d1dd      	bne.n	801327c <_printf_i+0x30>
 80132c0:	6823      	ldr	r3, [r4, #0]
 80132c2:	f043 0320 	orr.w	r3, r3, #32
 80132c6:	6023      	str	r3, [r4, #0]
 80132c8:	e003      	b.n	80132d2 <_printf_i+0x86>
 80132ca:	2975      	cmp	r1, #117	; 0x75
 80132cc:	d017      	beq.n	80132fe <_printf_i+0xb2>
 80132ce:	2978      	cmp	r1, #120	; 0x78
 80132d0:	d1d4      	bne.n	801327c <_printf_i+0x30>
 80132d2:	2378      	movs	r3, #120	; 0x78
 80132d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80132d8:	4864      	ldr	r0, [pc, #400]	; (801346c <_printf_i+0x220>)
 80132da:	e055      	b.n	8013388 <_printf_i+0x13c>
 80132dc:	6813      	ldr	r3, [r2, #0]
 80132de:	1d19      	adds	r1, r3, #4
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6011      	str	r1, [r2, #0]
 80132e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132ec:	2301      	movs	r3, #1
 80132ee:	e08c      	b.n	801340a <_printf_i+0x1be>
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	6011      	str	r1, [r2, #0]
 80132f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80132f8:	bf18      	it	ne
 80132fa:	b21b      	sxthne	r3, r3
 80132fc:	e7cf      	b.n	801329e <_printf_i+0x52>
 80132fe:	6813      	ldr	r3, [r2, #0]
 8013300:	6825      	ldr	r5, [r4, #0]
 8013302:	1d18      	adds	r0, r3, #4
 8013304:	6010      	str	r0, [r2, #0]
 8013306:	0628      	lsls	r0, r5, #24
 8013308:	d501      	bpl.n	801330e <_printf_i+0xc2>
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	e002      	b.n	8013314 <_printf_i+0xc8>
 801330e:	0668      	lsls	r0, r5, #25
 8013310:	d5fb      	bpl.n	801330a <_printf_i+0xbe>
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	4854      	ldr	r0, [pc, #336]	; (8013468 <_printf_i+0x21c>)
 8013316:	296f      	cmp	r1, #111	; 0x6f
 8013318:	bf14      	ite	ne
 801331a:	220a      	movne	r2, #10
 801331c:	2208      	moveq	r2, #8
 801331e:	2100      	movs	r1, #0
 8013320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013324:	6865      	ldr	r5, [r4, #4]
 8013326:	60a5      	str	r5, [r4, #8]
 8013328:	2d00      	cmp	r5, #0
 801332a:	f2c0 8095 	blt.w	8013458 <_printf_i+0x20c>
 801332e:	6821      	ldr	r1, [r4, #0]
 8013330:	f021 0104 	bic.w	r1, r1, #4
 8013334:	6021      	str	r1, [r4, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d13d      	bne.n	80133b6 <_printf_i+0x16a>
 801333a:	2d00      	cmp	r5, #0
 801333c:	f040 808e 	bne.w	801345c <_printf_i+0x210>
 8013340:	4665      	mov	r5, ip
 8013342:	2a08      	cmp	r2, #8
 8013344:	d10b      	bne.n	801335e <_printf_i+0x112>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	07db      	lsls	r3, r3, #31
 801334a:	d508      	bpl.n	801335e <_printf_i+0x112>
 801334c:	6923      	ldr	r3, [r4, #16]
 801334e:	6862      	ldr	r2, [r4, #4]
 8013350:	429a      	cmp	r2, r3
 8013352:	bfde      	ittt	le
 8013354:	2330      	movle	r3, #48	; 0x30
 8013356:	f805 3c01 	strble.w	r3, [r5, #-1]
 801335a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801335e:	ebac 0305 	sub.w	r3, ip, r5
 8013362:	6123      	str	r3, [r4, #16]
 8013364:	f8cd 8000 	str.w	r8, [sp]
 8013368:	463b      	mov	r3, r7
 801336a:	aa03      	add	r2, sp, #12
 801336c:	4621      	mov	r1, r4
 801336e:	4630      	mov	r0, r6
 8013370:	f7ff fef6 	bl	8013160 <_printf_common>
 8013374:	3001      	adds	r0, #1
 8013376:	d14d      	bne.n	8013414 <_printf_i+0x1c8>
 8013378:	f04f 30ff 	mov.w	r0, #4294967295
 801337c:	b005      	add	sp, #20
 801337e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013382:	4839      	ldr	r0, [pc, #228]	; (8013468 <_printf_i+0x21c>)
 8013384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013388:	6813      	ldr	r3, [r2, #0]
 801338a:	6821      	ldr	r1, [r4, #0]
 801338c:	1d1d      	adds	r5, r3, #4
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	6015      	str	r5, [r2, #0]
 8013392:	060a      	lsls	r2, r1, #24
 8013394:	d50b      	bpl.n	80133ae <_printf_i+0x162>
 8013396:	07ca      	lsls	r2, r1, #31
 8013398:	bf44      	itt	mi
 801339a:	f041 0120 	orrmi.w	r1, r1, #32
 801339e:	6021      	strmi	r1, [r4, #0]
 80133a0:	b91b      	cbnz	r3, 80133aa <_printf_i+0x15e>
 80133a2:	6822      	ldr	r2, [r4, #0]
 80133a4:	f022 0220 	bic.w	r2, r2, #32
 80133a8:	6022      	str	r2, [r4, #0]
 80133aa:	2210      	movs	r2, #16
 80133ac:	e7b7      	b.n	801331e <_printf_i+0xd2>
 80133ae:	064d      	lsls	r5, r1, #25
 80133b0:	bf48      	it	mi
 80133b2:	b29b      	uxthmi	r3, r3
 80133b4:	e7ef      	b.n	8013396 <_printf_i+0x14a>
 80133b6:	4665      	mov	r5, ip
 80133b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80133bc:	fb02 3311 	mls	r3, r2, r1, r3
 80133c0:	5cc3      	ldrb	r3, [r0, r3]
 80133c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80133c6:	460b      	mov	r3, r1
 80133c8:	2900      	cmp	r1, #0
 80133ca:	d1f5      	bne.n	80133b8 <_printf_i+0x16c>
 80133cc:	e7b9      	b.n	8013342 <_printf_i+0xf6>
 80133ce:	6813      	ldr	r3, [r2, #0]
 80133d0:	6825      	ldr	r5, [r4, #0]
 80133d2:	6961      	ldr	r1, [r4, #20]
 80133d4:	1d18      	adds	r0, r3, #4
 80133d6:	6010      	str	r0, [r2, #0]
 80133d8:	0628      	lsls	r0, r5, #24
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	d501      	bpl.n	80133e2 <_printf_i+0x196>
 80133de:	6019      	str	r1, [r3, #0]
 80133e0:	e002      	b.n	80133e8 <_printf_i+0x19c>
 80133e2:	066a      	lsls	r2, r5, #25
 80133e4:	d5fb      	bpl.n	80133de <_printf_i+0x192>
 80133e6:	8019      	strh	r1, [r3, #0]
 80133e8:	2300      	movs	r3, #0
 80133ea:	6123      	str	r3, [r4, #16]
 80133ec:	4665      	mov	r5, ip
 80133ee:	e7b9      	b.n	8013364 <_printf_i+0x118>
 80133f0:	6813      	ldr	r3, [r2, #0]
 80133f2:	1d19      	adds	r1, r3, #4
 80133f4:	6011      	str	r1, [r2, #0]
 80133f6:	681d      	ldr	r5, [r3, #0]
 80133f8:	6862      	ldr	r2, [r4, #4]
 80133fa:	2100      	movs	r1, #0
 80133fc:	4628      	mov	r0, r5
 80133fe:	f7ec ff07 	bl	8000210 <memchr>
 8013402:	b108      	cbz	r0, 8013408 <_printf_i+0x1bc>
 8013404:	1b40      	subs	r0, r0, r5
 8013406:	6060      	str	r0, [r4, #4]
 8013408:	6863      	ldr	r3, [r4, #4]
 801340a:	6123      	str	r3, [r4, #16]
 801340c:	2300      	movs	r3, #0
 801340e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013412:	e7a7      	b.n	8013364 <_printf_i+0x118>
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	462a      	mov	r2, r5
 8013418:	4639      	mov	r1, r7
 801341a:	4630      	mov	r0, r6
 801341c:	47c0      	blx	r8
 801341e:	3001      	adds	r0, #1
 8013420:	d0aa      	beq.n	8013378 <_printf_i+0x12c>
 8013422:	6823      	ldr	r3, [r4, #0]
 8013424:	079b      	lsls	r3, r3, #30
 8013426:	d413      	bmi.n	8013450 <_printf_i+0x204>
 8013428:	68e0      	ldr	r0, [r4, #12]
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	4298      	cmp	r0, r3
 801342e:	bfb8      	it	lt
 8013430:	4618      	movlt	r0, r3
 8013432:	e7a3      	b.n	801337c <_printf_i+0x130>
 8013434:	2301      	movs	r3, #1
 8013436:	464a      	mov	r2, r9
 8013438:	4639      	mov	r1, r7
 801343a:	4630      	mov	r0, r6
 801343c:	47c0      	blx	r8
 801343e:	3001      	adds	r0, #1
 8013440:	d09a      	beq.n	8013378 <_printf_i+0x12c>
 8013442:	3501      	adds	r5, #1
 8013444:	68e3      	ldr	r3, [r4, #12]
 8013446:	9a03      	ldr	r2, [sp, #12]
 8013448:	1a9b      	subs	r3, r3, r2
 801344a:	42ab      	cmp	r3, r5
 801344c:	dcf2      	bgt.n	8013434 <_printf_i+0x1e8>
 801344e:	e7eb      	b.n	8013428 <_printf_i+0x1dc>
 8013450:	2500      	movs	r5, #0
 8013452:	f104 0919 	add.w	r9, r4, #25
 8013456:	e7f5      	b.n	8013444 <_printf_i+0x1f8>
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1ac      	bne.n	80133b6 <_printf_i+0x16a>
 801345c:	7803      	ldrb	r3, [r0, #0]
 801345e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013466:	e76c      	b.n	8013342 <_printf_i+0xf6>
 8013468:	080181a4 	.word	0x080181a4
 801346c:	080181b5 	.word	0x080181b5

08013470 <_scanf_float>:
 8013470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013474:	469a      	mov	sl, r3
 8013476:	688b      	ldr	r3, [r1, #8]
 8013478:	4616      	mov	r6, r2
 801347a:	1e5a      	subs	r2, r3, #1
 801347c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013480:	b087      	sub	sp, #28
 8013482:	bf83      	ittte	hi
 8013484:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013488:	189b      	addhi	r3, r3, r2
 801348a:	9301      	strhi	r3, [sp, #4]
 801348c:	2300      	movls	r3, #0
 801348e:	bf86      	itte	hi
 8013490:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013494:	608b      	strhi	r3, [r1, #8]
 8013496:	9301      	strls	r3, [sp, #4]
 8013498:	680b      	ldr	r3, [r1, #0]
 801349a:	4688      	mov	r8, r1
 801349c:	f04f 0b00 	mov.w	fp, #0
 80134a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80134a4:	f848 3b1c 	str.w	r3, [r8], #28
 80134a8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80134ac:	4607      	mov	r7, r0
 80134ae:	460c      	mov	r4, r1
 80134b0:	4645      	mov	r5, r8
 80134b2:	465a      	mov	r2, fp
 80134b4:	46d9      	mov	r9, fp
 80134b6:	f8cd b008 	str.w	fp, [sp, #8]
 80134ba:	68a1      	ldr	r1, [r4, #8]
 80134bc:	b181      	cbz	r1, 80134e0 <_scanf_float+0x70>
 80134be:	6833      	ldr	r3, [r6, #0]
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	2b49      	cmp	r3, #73	; 0x49
 80134c4:	d071      	beq.n	80135aa <_scanf_float+0x13a>
 80134c6:	d84d      	bhi.n	8013564 <_scanf_float+0xf4>
 80134c8:	2b39      	cmp	r3, #57	; 0x39
 80134ca:	d840      	bhi.n	801354e <_scanf_float+0xde>
 80134cc:	2b31      	cmp	r3, #49	; 0x31
 80134ce:	f080 8088 	bcs.w	80135e2 <_scanf_float+0x172>
 80134d2:	2b2d      	cmp	r3, #45	; 0x2d
 80134d4:	f000 8090 	beq.w	80135f8 <_scanf_float+0x188>
 80134d8:	d815      	bhi.n	8013506 <_scanf_float+0x96>
 80134da:	2b2b      	cmp	r3, #43	; 0x2b
 80134dc:	f000 808c 	beq.w	80135f8 <_scanf_float+0x188>
 80134e0:	f1b9 0f00 	cmp.w	r9, #0
 80134e4:	d003      	beq.n	80134ee <_scanf_float+0x7e>
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80134ec:	6023      	str	r3, [r4, #0]
 80134ee:	3a01      	subs	r2, #1
 80134f0:	2a01      	cmp	r2, #1
 80134f2:	f200 80ea 	bhi.w	80136ca <_scanf_float+0x25a>
 80134f6:	4545      	cmp	r5, r8
 80134f8:	f200 80dc 	bhi.w	80136b4 <_scanf_float+0x244>
 80134fc:	2601      	movs	r6, #1
 80134fe:	4630      	mov	r0, r6
 8013500:	b007      	add	sp, #28
 8013502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013506:	2b2e      	cmp	r3, #46	; 0x2e
 8013508:	f000 809f 	beq.w	801364a <_scanf_float+0x1da>
 801350c:	2b30      	cmp	r3, #48	; 0x30
 801350e:	d1e7      	bne.n	80134e0 <_scanf_float+0x70>
 8013510:	6820      	ldr	r0, [r4, #0]
 8013512:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013516:	d064      	beq.n	80135e2 <_scanf_float+0x172>
 8013518:	9b01      	ldr	r3, [sp, #4]
 801351a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801351e:	6020      	str	r0, [r4, #0]
 8013520:	f109 0901 	add.w	r9, r9, #1
 8013524:	b11b      	cbz	r3, 801352e <_scanf_float+0xbe>
 8013526:	3b01      	subs	r3, #1
 8013528:	3101      	adds	r1, #1
 801352a:	9301      	str	r3, [sp, #4]
 801352c:	60a1      	str	r1, [r4, #8]
 801352e:	68a3      	ldr	r3, [r4, #8]
 8013530:	3b01      	subs	r3, #1
 8013532:	60a3      	str	r3, [r4, #8]
 8013534:	6923      	ldr	r3, [r4, #16]
 8013536:	3301      	adds	r3, #1
 8013538:	6123      	str	r3, [r4, #16]
 801353a:	6873      	ldr	r3, [r6, #4]
 801353c:	3b01      	subs	r3, #1
 801353e:	2b00      	cmp	r3, #0
 8013540:	6073      	str	r3, [r6, #4]
 8013542:	f340 80ac 	ble.w	801369e <_scanf_float+0x22e>
 8013546:	6833      	ldr	r3, [r6, #0]
 8013548:	3301      	adds	r3, #1
 801354a:	6033      	str	r3, [r6, #0]
 801354c:	e7b5      	b.n	80134ba <_scanf_float+0x4a>
 801354e:	2b45      	cmp	r3, #69	; 0x45
 8013550:	f000 8085 	beq.w	801365e <_scanf_float+0x1ee>
 8013554:	2b46      	cmp	r3, #70	; 0x46
 8013556:	d06a      	beq.n	801362e <_scanf_float+0x1be>
 8013558:	2b41      	cmp	r3, #65	; 0x41
 801355a:	d1c1      	bne.n	80134e0 <_scanf_float+0x70>
 801355c:	2a01      	cmp	r2, #1
 801355e:	d1bf      	bne.n	80134e0 <_scanf_float+0x70>
 8013560:	2202      	movs	r2, #2
 8013562:	e046      	b.n	80135f2 <_scanf_float+0x182>
 8013564:	2b65      	cmp	r3, #101	; 0x65
 8013566:	d07a      	beq.n	801365e <_scanf_float+0x1ee>
 8013568:	d818      	bhi.n	801359c <_scanf_float+0x12c>
 801356a:	2b54      	cmp	r3, #84	; 0x54
 801356c:	d066      	beq.n	801363c <_scanf_float+0x1cc>
 801356e:	d811      	bhi.n	8013594 <_scanf_float+0x124>
 8013570:	2b4e      	cmp	r3, #78	; 0x4e
 8013572:	d1b5      	bne.n	80134e0 <_scanf_float+0x70>
 8013574:	2a00      	cmp	r2, #0
 8013576:	d146      	bne.n	8013606 <_scanf_float+0x196>
 8013578:	f1b9 0f00 	cmp.w	r9, #0
 801357c:	d145      	bne.n	801360a <_scanf_float+0x19a>
 801357e:	6821      	ldr	r1, [r4, #0]
 8013580:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013584:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013588:	d13f      	bne.n	801360a <_scanf_float+0x19a>
 801358a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801358e:	6021      	str	r1, [r4, #0]
 8013590:	2201      	movs	r2, #1
 8013592:	e02e      	b.n	80135f2 <_scanf_float+0x182>
 8013594:	2b59      	cmp	r3, #89	; 0x59
 8013596:	d01e      	beq.n	80135d6 <_scanf_float+0x166>
 8013598:	2b61      	cmp	r3, #97	; 0x61
 801359a:	e7de      	b.n	801355a <_scanf_float+0xea>
 801359c:	2b6e      	cmp	r3, #110	; 0x6e
 801359e:	d0e9      	beq.n	8013574 <_scanf_float+0x104>
 80135a0:	d815      	bhi.n	80135ce <_scanf_float+0x15e>
 80135a2:	2b66      	cmp	r3, #102	; 0x66
 80135a4:	d043      	beq.n	801362e <_scanf_float+0x1be>
 80135a6:	2b69      	cmp	r3, #105	; 0x69
 80135a8:	d19a      	bne.n	80134e0 <_scanf_float+0x70>
 80135aa:	f1bb 0f00 	cmp.w	fp, #0
 80135ae:	d138      	bne.n	8013622 <_scanf_float+0x1b2>
 80135b0:	f1b9 0f00 	cmp.w	r9, #0
 80135b4:	d197      	bne.n	80134e6 <_scanf_float+0x76>
 80135b6:	6821      	ldr	r1, [r4, #0]
 80135b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80135bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80135c0:	d195      	bne.n	80134ee <_scanf_float+0x7e>
 80135c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80135c6:	6021      	str	r1, [r4, #0]
 80135c8:	f04f 0b01 	mov.w	fp, #1
 80135cc:	e011      	b.n	80135f2 <_scanf_float+0x182>
 80135ce:	2b74      	cmp	r3, #116	; 0x74
 80135d0:	d034      	beq.n	801363c <_scanf_float+0x1cc>
 80135d2:	2b79      	cmp	r3, #121	; 0x79
 80135d4:	d184      	bne.n	80134e0 <_scanf_float+0x70>
 80135d6:	f1bb 0f07 	cmp.w	fp, #7
 80135da:	d181      	bne.n	80134e0 <_scanf_float+0x70>
 80135dc:	f04f 0b08 	mov.w	fp, #8
 80135e0:	e007      	b.n	80135f2 <_scanf_float+0x182>
 80135e2:	eb12 0f0b 	cmn.w	r2, fp
 80135e6:	f47f af7b 	bne.w	80134e0 <_scanf_float+0x70>
 80135ea:	6821      	ldr	r1, [r4, #0]
 80135ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80135f0:	6021      	str	r1, [r4, #0]
 80135f2:	702b      	strb	r3, [r5, #0]
 80135f4:	3501      	adds	r5, #1
 80135f6:	e79a      	b.n	801352e <_scanf_float+0xbe>
 80135f8:	6821      	ldr	r1, [r4, #0]
 80135fa:	0608      	lsls	r0, r1, #24
 80135fc:	f57f af70 	bpl.w	80134e0 <_scanf_float+0x70>
 8013600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013604:	e7f4      	b.n	80135f0 <_scanf_float+0x180>
 8013606:	2a02      	cmp	r2, #2
 8013608:	d047      	beq.n	801369a <_scanf_float+0x22a>
 801360a:	f1bb 0f01 	cmp.w	fp, #1
 801360e:	d003      	beq.n	8013618 <_scanf_float+0x1a8>
 8013610:	f1bb 0f04 	cmp.w	fp, #4
 8013614:	f47f af64 	bne.w	80134e0 <_scanf_float+0x70>
 8013618:	f10b 0b01 	add.w	fp, fp, #1
 801361c:	fa5f fb8b 	uxtb.w	fp, fp
 8013620:	e7e7      	b.n	80135f2 <_scanf_float+0x182>
 8013622:	f1bb 0f03 	cmp.w	fp, #3
 8013626:	d0f7      	beq.n	8013618 <_scanf_float+0x1a8>
 8013628:	f1bb 0f05 	cmp.w	fp, #5
 801362c:	e7f2      	b.n	8013614 <_scanf_float+0x1a4>
 801362e:	f1bb 0f02 	cmp.w	fp, #2
 8013632:	f47f af55 	bne.w	80134e0 <_scanf_float+0x70>
 8013636:	f04f 0b03 	mov.w	fp, #3
 801363a:	e7da      	b.n	80135f2 <_scanf_float+0x182>
 801363c:	f1bb 0f06 	cmp.w	fp, #6
 8013640:	f47f af4e 	bne.w	80134e0 <_scanf_float+0x70>
 8013644:	f04f 0b07 	mov.w	fp, #7
 8013648:	e7d3      	b.n	80135f2 <_scanf_float+0x182>
 801364a:	6821      	ldr	r1, [r4, #0]
 801364c:	0588      	lsls	r0, r1, #22
 801364e:	f57f af47 	bpl.w	80134e0 <_scanf_float+0x70>
 8013652:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013656:	6021      	str	r1, [r4, #0]
 8013658:	f8cd 9008 	str.w	r9, [sp, #8]
 801365c:	e7c9      	b.n	80135f2 <_scanf_float+0x182>
 801365e:	6821      	ldr	r1, [r4, #0]
 8013660:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013664:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013668:	d006      	beq.n	8013678 <_scanf_float+0x208>
 801366a:	0548      	lsls	r0, r1, #21
 801366c:	f57f af38 	bpl.w	80134e0 <_scanf_float+0x70>
 8013670:	f1b9 0f00 	cmp.w	r9, #0
 8013674:	f43f af3b 	beq.w	80134ee <_scanf_float+0x7e>
 8013678:	0588      	lsls	r0, r1, #22
 801367a:	bf58      	it	pl
 801367c:	9802      	ldrpl	r0, [sp, #8]
 801367e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013682:	bf58      	it	pl
 8013684:	eba9 0000 	subpl.w	r0, r9, r0
 8013688:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801368c:	bf58      	it	pl
 801368e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013692:	6021      	str	r1, [r4, #0]
 8013694:	f04f 0900 	mov.w	r9, #0
 8013698:	e7ab      	b.n	80135f2 <_scanf_float+0x182>
 801369a:	2203      	movs	r2, #3
 801369c:	e7a9      	b.n	80135f2 <_scanf_float+0x182>
 801369e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136a2:	9205      	str	r2, [sp, #20]
 80136a4:	4631      	mov	r1, r6
 80136a6:	4638      	mov	r0, r7
 80136a8:	4798      	blx	r3
 80136aa:	9a05      	ldr	r2, [sp, #20]
 80136ac:	2800      	cmp	r0, #0
 80136ae:	f43f af04 	beq.w	80134ba <_scanf_float+0x4a>
 80136b2:	e715      	b.n	80134e0 <_scanf_float+0x70>
 80136b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136bc:	4632      	mov	r2, r6
 80136be:	4638      	mov	r0, r7
 80136c0:	4798      	blx	r3
 80136c2:	6923      	ldr	r3, [r4, #16]
 80136c4:	3b01      	subs	r3, #1
 80136c6:	6123      	str	r3, [r4, #16]
 80136c8:	e715      	b.n	80134f6 <_scanf_float+0x86>
 80136ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80136ce:	2b06      	cmp	r3, #6
 80136d0:	d80a      	bhi.n	80136e8 <_scanf_float+0x278>
 80136d2:	f1bb 0f02 	cmp.w	fp, #2
 80136d6:	d968      	bls.n	80137aa <_scanf_float+0x33a>
 80136d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80136dc:	fa5f fb8b 	uxtb.w	fp, fp
 80136e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80136e4:	455d      	cmp	r5, fp
 80136e6:	d14b      	bne.n	8013780 <_scanf_float+0x310>
 80136e8:	6823      	ldr	r3, [r4, #0]
 80136ea:	05da      	lsls	r2, r3, #23
 80136ec:	d51f      	bpl.n	801372e <_scanf_float+0x2be>
 80136ee:	055b      	lsls	r3, r3, #21
 80136f0:	d468      	bmi.n	80137c4 <_scanf_float+0x354>
 80136f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80136f6:	6923      	ldr	r3, [r4, #16]
 80136f8:	2965      	cmp	r1, #101	; 0x65
 80136fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80136fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8013702:	6123      	str	r3, [r4, #16]
 8013704:	d00d      	beq.n	8013722 <_scanf_float+0x2b2>
 8013706:	2945      	cmp	r1, #69	; 0x45
 8013708:	d00b      	beq.n	8013722 <_scanf_float+0x2b2>
 801370a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801370e:	4632      	mov	r2, r6
 8013710:	4638      	mov	r0, r7
 8013712:	4798      	blx	r3
 8013714:	6923      	ldr	r3, [r4, #16]
 8013716:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801371a:	3b01      	subs	r3, #1
 801371c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013720:	6123      	str	r3, [r4, #16]
 8013722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013726:	4632      	mov	r2, r6
 8013728:	4638      	mov	r0, r7
 801372a:	4798      	blx	r3
 801372c:	465d      	mov	r5, fp
 801372e:	6826      	ldr	r6, [r4, #0]
 8013730:	f016 0610 	ands.w	r6, r6, #16
 8013734:	d17a      	bne.n	801382c <_scanf_float+0x3bc>
 8013736:	702e      	strb	r6, [r5, #0]
 8013738:	6823      	ldr	r3, [r4, #0]
 801373a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013742:	d142      	bne.n	80137ca <_scanf_float+0x35a>
 8013744:	9b02      	ldr	r3, [sp, #8]
 8013746:	eba9 0303 	sub.w	r3, r9, r3
 801374a:	425a      	negs	r2, r3
 801374c:	2b00      	cmp	r3, #0
 801374e:	d149      	bne.n	80137e4 <_scanf_float+0x374>
 8013750:	2200      	movs	r2, #0
 8013752:	4641      	mov	r1, r8
 8013754:	4638      	mov	r0, r7
 8013756:	f000 ffdf 	bl	8014718 <_strtod_r>
 801375a:	6825      	ldr	r5, [r4, #0]
 801375c:	f8da 3000 	ldr.w	r3, [sl]
 8013760:	f015 0f02 	tst.w	r5, #2
 8013764:	f103 0204 	add.w	r2, r3, #4
 8013768:	ec59 8b10 	vmov	r8, r9, d0
 801376c:	f8ca 2000 	str.w	r2, [sl]
 8013770:	d043      	beq.n	80137fa <_scanf_float+0x38a>
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	e9c3 8900 	strd	r8, r9, [r3]
 8013778:	68e3      	ldr	r3, [r4, #12]
 801377a:	3301      	adds	r3, #1
 801377c:	60e3      	str	r3, [r4, #12]
 801377e:	e6be      	b.n	80134fe <_scanf_float+0x8e>
 8013780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013784:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013788:	4632      	mov	r2, r6
 801378a:	4638      	mov	r0, r7
 801378c:	4798      	blx	r3
 801378e:	6923      	ldr	r3, [r4, #16]
 8013790:	3b01      	subs	r3, #1
 8013792:	6123      	str	r3, [r4, #16]
 8013794:	e7a6      	b.n	80136e4 <_scanf_float+0x274>
 8013796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801379a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801379e:	4632      	mov	r2, r6
 80137a0:	4638      	mov	r0, r7
 80137a2:	4798      	blx	r3
 80137a4:	6923      	ldr	r3, [r4, #16]
 80137a6:	3b01      	subs	r3, #1
 80137a8:	6123      	str	r3, [r4, #16]
 80137aa:	4545      	cmp	r5, r8
 80137ac:	d8f3      	bhi.n	8013796 <_scanf_float+0x326>
 80137ae:	e6a5      	b.n	80134fc <_scanf_float+0x8c>
 80137b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137b8:	4632      	mov	r2, r6
 80137ba:	4638      	mov	r0, r7
 80137bc:	4798      	blx	r3
 80137be:	6923      	ldr	r3, [r4, #16]
 80137c0:	3b01      	subs	r3, #1
 80137c2:	6123      	str	r3, [r4, #16]
 80137c4:	4545      	cmp	r5, r8
 80137c6:	d8f3      	bhi.n	80137b0 <_scanf_float+0x340>
 80137c8:	e698      	b.n	80134fc <_scanf_float+0x8c>
 80137ca:	9b03      	ldr	r3, [sp, #12]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d0bf      	beq.n	8013750 <_scanf_float+0x2e0>
 80137d0:	9904      	ldr	r1, [sp, #16]
 80137d2:	230a      	movs	r3, #10
 80137d4:	4632      	mov	r2, r6
 80137d6:	3101      	adds	r1, #1
 80137d8:	4638      	mov	r0, r7
 80137da:	f001 f829 	bl	8014830 <_strtol_r>
 80137de:	9b03      	ldr	r3, [sp, #12]
 80137e0:	9d04      	ldr	r5, [sp, #16]
 80137e2:	1ac2      	subs	r2, r0, r3
 80137e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80137e8:	429d      	cmp	r5, r3
 80137ea:	bf28      	it	cs
 80137ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80137f0:	490f      	ldr	r1, [pc, #60]	; (8013830 <_scanf_float+0x3c0>)
 80137f2:	4628      	mov	r0, r5
 80137f4:	f000 f8e8 	bl	80139c8 <siprintf>
 80137f8:	e7aa      	b.n	8013750 <_scanf_float+0x2e0>
 80137fa:	f015 0504 	ands.w	r5, r5, #4
 80137fe:	d1b8      	bne.n	8013772 <_scanf_float+0x302>
 8013800:	681f      	ldr	r7, [r3, #0]
 8013802:	ee10 2a10 	vmov	r2, s0
 8013806:	464b      	mov	r3, r9
 8013808:	ee10 0a10 	vmov	r0, s0
 801380c:	4649      	mov	r1, r9
 801380e:	f7ed f9a5 	bl	8000b5c <__aeabi_dcmpun>
 8013812:	b128      	cbz	r0, 8013820 <_scanf_float+0x3b0>
 8013814:	4628      	mov	r0, r5
 8013816:	f000 f89d 	bl	8013954 <nanf>
 801381a:	ed87 0a00 	vstr	s0, [r7]
 801381e:	e7ab      	b.n	8013778 <_scanf_float+0x308>
 8013820:	4640      	mov	r0, r8
 8013822:	4649      	mov	r1, r9
 8013824:	f7ed f9f8 	bl	8000c18 <__aeabi_d2f>
 8013828:	6038      	str	r0, [r7, #0]
 801382a:	e7a5      	b.n	8013778 <_scanf_float+0x308>
 801382c:	2600      	movs	r6, #0
 801382e:	e666      	b.n	80134fe <_scanf_float+0x8e>
 8013830:	080181c6 	.word	0x080181c6

08013834 <iprintf>:
 8013834:	b40f      	push	{r0, r1, r2, r3}
 8013836:	4b0a      	ldr	r3, [pc, #40]	; (8013860 <iprintf+0x2c>)
 8013838:	b513      	push	{r0, r1, r4, lr}
 801383a:	681c      	ldr	r4, [r3, #0]
 801383c:	b124      	cbz	r4, 8013848 <iprintf+0x14>
 801383e:	69a3      	ldr	r3, [r4, #24]
 8013840:	b913      	cbnz	r3, 8013848 <iprintf+0x14>
 8013842:	4620      	mov	r0, r4
 8013844:	f002 f83c 	bl	80158c0 <__sinit>
 8013848:	ab05      	add	r3, sp, #20
 801384a:	9a04      	ldr	r2, [sp, #16]
 801384c:	68a1      	ldr	r1, [r4, #8]
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	4620      	mov	r0, r4
 8013852:	f003 fc73 	bl	801713c <_vfiprintf_r>
 8013856:	b002      	add	sp, #8
 8013858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801385c:	b004      	add	sp, #16
 801385e:	4770      	bx	lr
 8013860:	2000000c 	.word	0x2000000c

08013864 <putchar>:
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4b08      	ldr	r3, [pc, #32]	; (8013888 <putchar+0x24>)
 8013868:	681c      	ldr	r4, [r3, #0]
 801386a:	4605      	mov	r5, r0
 801386c:	b124      	cbz	r4, 8013878 <putchar+0x14>
 801386e:	69a3      	ldr	r3, [r4, #24]
 8013870:	b913      	cbnz	r3, 8013878 <putchar+0x14>
 8013872:	4620      	mov	r0, r4
 8013874:	f002 f824 	bl	80158c0 <__sinit>
 8013878:	68a2      	ldr	r2, [r4, #8]
 801387a:	4629      	mov	r1, r5
 801387c:	4620      	mov	r0, r4
 801387e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013882:	f003 bec9 	b.w	8017618 <_putc_r>
 8013886:	bf00      	nop
 8013888:	2000000c 	.word	0x2000000c

0801388c <_puts_r>:
 801388c:	b570      	push	{r4, r5, r6, lr}
 801388e:	460e      	mov	r6, r1
 8013890:	4605      	mov	r5, r0
 8013892:	b118      	cbz	r0, 801389c <_puts_r+0x10>
 8013894:	6983      	ldr	r3, [r0, #24]
 8013896:	b90b      	cbnz	r3, 801389c <_puts_r+0x10>
 8013898:	f002 f812 	bl	80158c0 <__sinit>
 801389c:	69ab      	ldr	r3, [r5, #24]
 801389e:	68ac      	ldr	r4, [r5, #8]
 80138a0:	b913      	cbnz	r3, 80138a8 <_puts_r+0x1c>
 80138a2:	4628      	mov	r0, r5
 80138a4:	f002 f80c 	bl	80158c0 <__sinit>
 80138a8:	4b23      	ldr	r3, [pc, #140]	; (8013938 <_puts_r+0xac>)
 80138aa:	429c      	cmp	r4, r3
 80138ac:	d117      	bne.n	80138de <_puts_r+0x52>
 80138ae:	686c      	ldr	r4, [r5, #4]
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	071b      	lsls	r3, r3, #28
 80138b4:	d51d      	bpl.n	80138f2 <_puts_r+0x66>
 80138b6:	6923      	ldr	r3, [r4, #16]
 80138b8:	b1db      	cbz	r3, 80138f2 <_puts_r+0x66>
 80138ba:	3e01      	subs	r6, #1
 80138bc:	68a3      	ldr	r3, [r4, #8]
 80138be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80138c2:	3b01      	subs	r3, #1
 80138c4:	60a3      	str	r3, [r4, #8]
 80138c6:	b9e9      	cbnz	r1, 8013904 <_puts_r+0x78>
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	da2e      	bge.n	801392a <_puts_r+0x9e>
 80138cc:	4622      	mov	r2, r4
 80138ce:	210a      	movs	r1, #10
 80138d0:	4628      	mov	r0, r5
 80138d2:	f000 ffdf 	bl	8014894 <__swbuf_r>
 80138d6:	3001      	adds	r0, #1
 80138d8:	d011      	beq.n	80138fe <_puts_r+0x72>
 80138da:	200a      	movs	r0, #10
 80138dc:	e011      	b.n	8013902 <_puts_r+0x76>
 80138de:	4b17      	ldr	r3, [pc, #92]	; (801393c <_puts_r+0xb0>)
 80138e0:	429c      	cmp	r4, r3
 80138e2:	d101      	bne.n	80138e8 <_puts_r+0x5c>
 80138e4:	68ac      	ldr	r4, [r5, #8]
 80138e6:	e7e3      	b.n	80138b0 <_puts_r+0x24>
 80138e8:	4b15      	ldr	r3, [pc, #84]	; (8013940 <_puts_r+0xb4>)
 80138ea:	429c      	cmp	r4, r3
 80138ec:	bf08      	it	eq
 80138ee:	68ec      	ldreq	r4, [r5, #12]
 80138f0:	e7de      	b.n	80138b0 <_puts_r+0x24>
 80138f2:	4621      	mov	r1, r4
 80138f4:	4628      	mov	r0, r5
 80138f6:	f001 f831 	bl	801495c <__swsetup_r>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d0dd      	beq.n	80138ba <_puts_r+0x2e>
 80138fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013902:	bd70      	pop	{r4, r5, r6, pc}
 8013904:	2b00      	cmp	r3, #0
 8013906:	da04      	bge.n	8013912 <_puts_r+0x86>
 8013908:	69a2      	ldr	r2, [r4, #24]
 801390a:	429a      	cmp	r2, r3
 801390c:	dc06      	bgt.n	801391c <_puts_r+0x90>
 801390e:	290a      	cmp	r1, #10
 8013910:	d004      	beq.n	801391c <_puts_r+0x90>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	1c5a      	adds	r2, r3, #1
 8013916:	6022      	str	r2, [r4, #0]
 8013918:	7019      	strb	r1, [r3, #0]
 801391a:	e7cf      	b.n	80138bc <_puts_r+0x30>
 801391c:	4622      	mov	r2, r4
 801391e:	4628      	mov	r0, r5
 8013920:	f000 ffb8 	bl	8014894 <__swbuf_r>
 8013924:	3001      	adds	r0, #1
 8013926:	d1c9      	bne.n	80138bc <_puts_r+0x30>
 8013928:	e7e9      	b.n	80138fe <_puts_r+0x72>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	200a      	movs	r0, #10
 801392e:	1c5a      	adds	r2, r3, #1
 8013930:	6022      	str	r2, [r4, #0]
 8013932:	7018      	strb	r0, [r3, #0]
 8013934:	e7e5      	b.n	8013902 <_puts_r+0x76>
 8013936:	bf00      	nop
 8013938:	08018250 	.word	0x08018250
 801393c:	08018270 	.word	0x08018270
 8013940:	08018230 	.word	0x08018230

08013944 <puts>:
 8013944:	4b02      	ldr	r3, [pc, #8]	; (8013950 <puts+0xc>)
 8013946:	4601      	mov	r1, r0
 8013948:	6818      	ldr	r0, [r3, #0]
 801394a:	f7ff bf9f 	b.w	801388c <_puts_r>
 801394e:	bf00      	nop
 8013950:	2000000c 	.word	0x2000000c

08013954 <nanf>:
 8013954:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801395c <nanf+0x8>
 8013958:	4770      	bx	lr
 801395a:	bf00      	nop
 801395c:	7fc00000 	.word	0x7fc00000

08013960 <sniprintf>:
 8013960:	b40c      	push	{r2, r3}
 8013962:	b530      	push	{r4, r5, lr}
 8013964:	4b17      	ldr	r3, [pc, #92]	; (80139c4 <sniprintf+0x64>)
 8013966:	1e0c      	subs	r4, r1, #0
 8013968:	b09d      	sub	sp, #116	; 0x74
 801396a:	681d      	ldr	r5, [r3, #0]
 801396c:	da08      	bge.n	8013980 <sniprintf+0x20>
 801396e:	238b      	movs	r3, #139	; 0x8b
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	f04f 30ff 	mov.w	r0, #4294967295
 8013976:	b01d      	add	sp, #116	; 0x74
 8013978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801397c:	b002      	add	sp, #8
 801397e:	4770      	bx	lr
 8013980:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013984:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013988:	bf14      	ite	ne
 801398a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801398e:	4623      	moveq	r3, r4
 8013990:	9304      	str	r3, [sp, #16]
 8013992:	9307      	str	r3, [sp, #28]
 8013994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013998:	9002      	str	r0, [sp, #8]
 801399a:	9006      	str	r0, [sp, #24]
 801399c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80139a2:	ab21      	add	r3, sp, #132	; 0x84
 80139a4:	a902      	add	r1, sp, #8
 80139a6:	4628      	mov	r0, r5
 80139a8:	9301      	str	r3, [sp, #4]
 80139aa:	f003 f8fb 	bl	8016ba4 <_svfiprintf_r>
 80139ae:	1c43      	adds	r3, r0, #1
 80139b0:	bfbc      	itt	lt
 80139b2:	238b      	movlt	r3, #139	; 0x8b
 80139b4:	602b      	strlt	r3, [r5, #0]
 80139b6:	2c00      	cmp	r4, #0
 80139b8:	d0dd      	beq.n	8013976 <sniprintf+0x16>
 80139ba:	9b02      	ldr	r3, [sp, #8]
 80139bc:	2200      	movs	r2, #0
 80139be:	701a      	strb	r2, [r3, #0]
 80139c0:	e7d9      	b.n	8013976 <sniprintf+0x16>
 80139c2:	bf00      	nop
 80139c4:	2000000c 	.word	0x2000000c

080139c8 <siprintf>:
 80139c8:	b40e      	push	{r1, r2, r3}
 80139ca:	b500      	push	{lr}
 80139cc:	b09c      	sub	sp, #112	; 0x70
 80139ce:	ab1d      	add	r3, sp, #116	; 0x74
 80139d0:	9002      	str	r0, [sp, #8]
 80139d2:	9006      	str	r0, [sp, #24]
 80139d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139d8:	4809      	ldr	r0, [pc, #36]	; (8013a00 <siprintf+0x38>)
 80139da:	9107      	str	r1, [sp, #28]
 80139dc:	9104      	str	r1, [sp, #16]
 80139de:	4909      	ldr	r1, [pc, #36]	; (8013a04 <siprintf+0x3c>)
 80139e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80139e4:	9105      	str	r1, [sp, #20]
 80139e6:	6800      	ldr	r0, [r0, #0]
 80139e8:	9301      	str	r3, [sp, #4]
 80139ea:	a902      	add	r1, sp, #8
 80139ec:	f003 f8da 	bl	8016ba4 <_svfiprintf_r>
 80139f0:	9b02      	ldr	r3, [sp, #8]
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
 80139f6:	b01c      	add	sp, #112	; 0x70
 80139f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80139fc:	b003      	add	sp, #12
 80139fe:	4770      	bx	lr
 8013a00:	2000000c 	.word	0x2000000c
 8013a04:	ffff0208 	.word	0xffff0208

08013a08 <siscanf>:
 8013a08:	b40e      	push	{r1, r2, r3}
 8013a0a:	b530      	push	{r4, r5, lr}
 8013a0c:	b09c      	sub	sp, #112	; 0x70
 8013a0e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013a10:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a14:	f854 5b04 	ldr.w	r5, [r4], #4
 8013a18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a1c:	9002      	str	r0, [sp, #8]
 8013a1e:	9006      	str	r0, [sp, #24]
 8013a20:	f7ec fbee 	bl	8000200 <strlen>
 8013a24:	4b0b      	ldr	r3, [pc, #44]	; (8013a54 <siscanf+0x4c>)
 8013a26:	9003      	str	r0, [sp, #12]
 8013a28:	9007      	str	r0, [sp, #28]
 8013a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a2c:	480a      	ldr	r0, [pc, #40]	; (8013a58 <siscanf+0x50>)
 8013a2e:	9401      	str	r4, [sp, #4]
 8013a30:	2300      	movs	r3, #0
 8013a32:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a34:	9314      	str	r3, [sp, #80]	; 0x50
 8013a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a3e:	462a      	mov	r2, r5
 8013a40:	4623      	mov	r3, r4
 8013a42:	a902      	add	r1, sp, #8
 8013a44:	6800      	ldr	r0, [r0, #0]
 8013a46:	f003 f9ff 	bl	8016e48 <__ssvfiscanf_r>
 8013a4a:	b01c      	add	sp, #112	; 0x70
 8013a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a50:	b003      	add	sp, #12
 8013a52:	4770      	bx	lr
 8013a54:	08013a7f 	.word	0x08013a7f
 8013a58:	2000000c 	.word	0x2000000c

08013a5c <__sread>:
 8013a5c:	b510      	push	{r4, lr}
 8013a5e:	460c      	mov	r4, r1
 8013a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a64:	f003 fe0e 	bl	8017684 <_read_r>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	bfab      	itete	ge
 8013a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8013a70:	181b      	addge	r3, r3, r0
 8013a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a76:	bfac      	ite	ge
 8013a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a7a:	81a3      	strhlt	r3, [r4, #12]
 8013a7c:	bd10      	pop	{r4, pc}

08013a7e <__seofread>:
 8013a7e:	2000      	movs	r0, #0
 8013a80:	4770      	bx	lr

08013a82 <__swrite>:
 8013a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a86:	461f      	mov	r7, r3
 8013a88:	898b      	ldrh	r3, [r1, #12]
 8013a8a:	05db      	lsls	r3, r3, #23
 8013a8c:	4605      	mov	r5, r0
 8013a8e:	460c      	mov	r4, r1
 8013a90:	4616      	mov	r6, r2
 8013a92:	d505      	bpl.n	8013aa0 <__swrite+0x1e>
 8013a94:	2302      	movs	r3, #2
 8013a96:	2200      	movs	r2, #0
 8013a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a9c:	f002 fae2 	bl	8016064 <_lseek_r>
 8013aa0:	89a3      	ldrh	r3, [r4, #12]
 8013aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013aaa:	81a3      	strh	r3, [r4, #12]
 8013aac:	4632      	mov	r2, r6
 8013aae:	463b      	mov	r3, r7
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab6:	f000 bf3f 	b.w	8014938 <_write_r>

08013aba <__sseek>:
 8013aba:	b510      	push	{r4, lr}
 8013abc:	460c      	mov	r4, r1
 8013abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac2:	f002 facf 	bl	8016064 <_lseek_r>
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	bf15      	itete	ne
 8013acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ad6:	81a3      	strheq	r3, [r4, #12]
 8013ad8:	bf18      	it	ne
 8013ada:	81a3      	strhne	r3, [r4, #12]
 8013adc:	bd10      	pop	{r4, pc}

08013ade <__sclose>:
 8013ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae2:	f000 bfa9 	b.w	8014a38 <_close_r>

08013ae6 <strcpy>:
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aec:	f803 2b01 	strb.w	r2, [r3], #1
 8013af0:	2a00      	cmp	r2, #0
 8013af2:	d1f9      	bne.n	8013ae8 <strcpy+0x2>
 8013af4:	4770      	bx	lr

08013af6 <sulp>:
 8013af6:	b570      	push	{r4, r5, r6, lr}
 8013af8:	4604      	mov	r4, r0
 8013afa:	460d      	mov	r5, r1
 8013afc:	ec45 4b10 	vmov	d0, r4, r5
 8013b00:	4616      	mov	r6, r2
 8013b02:	f002 fe0b 	bl	801671c <__ulp>
 8013b06:	ec51 0b10 	vmov	r0, r1, d0
 8013b0a:	b17e      	cbz	r6, 8013b2c <sulp+0x36>
 8013b0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	dd09      	ble.n	8013b2c <sulp+0x36>
 8013b18:	051b      	lsls	r3, r3, #20
 8013b1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b1e:	2400      	movs	r4, #0
 8013b20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b24:	4622      	mov	r2, r4
 8013b26:	462b      	mov	r3, r5
 8013b28:	f7ec fd7e 	bl	8000628 <__aeabi_dmul>
 8013b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b30 <_strtod_l>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	461f      	mov	r7, r3
 8013b36:	b0a1      	sub	sp, #132	; 0x84
 8013b38:	2300      	movs	r3, #0
 8013b3a:	4681      	mov	r9, r0
 8013b3c:	4638      	mov	r0, r7
 8013b3e:	460e      	mov	r6, r1
 8013b40:	9217      	str	r2, [sp, #92]	; 0x5c
 8013b42:	931c      	str	r3, [sp, #112]	; 0x70
 8013b44:	f002 fa7e 	bl	8016044 <__localeconv_l>
 8013b48:	4680      	mov	r8, r0
 8013b4a:	6800      	ldr	r0, [r0, #0]
 8013b4c:	f7ec fb58 	bl	8000200 <strlen>
 8013b50:	f04f 0a00 	mov.w	sl, #0
 8013b54:	4604      	mov	r4, r0
 8013b56:	f04f 0b00 	mov.w	fp, #0
 8013b5a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b5e:	781a      	ldrb	r2, [r3, #0]
 8013b60:	2a0d      	cmp	r2, #13
 8013b62:	d832      	bhi.n	8013bca <_strtod_l+0x9a>
 8013b64:	2a09      	cmp	r2, #9
 8013b66:	d236      	bcs.n	8013bd6 <_strtod_l+0xa6>
 8013b68:	2a00      	cmp	r2, #0
 8013b6a:	d03e      	beq.n	8013bea <_strtod_l+0xba>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8013b70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013b72:	782b      	ldrb	r3, [r5, #0]
 8013b74:	2b30      	cmp	r3, #48	; 0x30
 8013b76:	f040 80ac 	bne.w	8013cd2 <_strtod_l+0x1a2>
 8013b7a:	786b      	ldrb	r3, [r5, #1]
 8013b7c:	2b58      	cmp	r3, #88	; 0x58
 8013b7e:	d001      	beq.n	8013b84 <_strtod_l+0x54>
 8013b80:	2b78      	cmp	r3, #120	; 0x78
 8013b82:	d167      	bne.n	8013c54 <_strtod_l+0x124>
 8013b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	ab1c      	add	r3, sp, #112	; 0x70
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	9702      	str	r7, [sp, #8]
 8013b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8013b90:	4a88      	ldr	r2, [pc, #544]	; (8013db4 <_strtod_l+0x284>)
 8013b92:	a91b      	add	r1, sp, #108	; 0x6c
 8013b94:	4648      	mov	r0, r9
 8013b96:	f001 ff6c 	bl	8015a72 <__gethex>
 8013b9a:	f010 0407 	ands.w	r4, r0, #7
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	d005      	beq.n	8013bae <_strtod_l+0x7e>
 8013ba2:	2c06      	cmp	r4, #6
 8013ba4:	d12b      	bne.n	8013bfe <_strtod_l+0xce>
 8013ba6:	3501      	adds	r5, #1
 8013ba8:	2300      	movs	r3, #0
 8013baa:	951b      	str	r5, [sp, #108]	; 0x6c
 8013bac:	930d      	str	r3, [sp, #52]	; 0x34
 8013bae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f040 859a 	bne.w	80146ea <_strtod_l+0xbba>
 8013bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bb8:	b1e3      	cbz	r3, 8013bf4 <_strtod_l+0xc4>
 8013bba:	4652      	mov	r2, sl
 8013bbc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013bc0:	ec43 2b10 	vmov	d0, r2, r3
 8013bc4:	b021      	add	sp, #132	; 0x84
 8013bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bca:	2a2b      	cmp	r2, #43	; 0x2b
 8013bcc:	d015      	beq.n	8013bfa <_strtod_l+0xca>
 8013bce:	2a2d      	cmp	r2, #45	; 0x2d
 8013bd0:	d004      	beq.n	8013bdc <_strtod_l+0xac>
 8013bd2:	2a20      	cmp	r2, #32
 8013bd4:	d1ca      	bne.n	8013b6c <_strtod_l+0x3c>
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bda:	e7bf      	b.n	8013b5c <_strtod_l+0x2c>
 8013bdc:	2201      	movs	r2, #1
 8013bde:	920d      	str	r2, [sp, #52]	; 0x34
 8013be0:	1c5a      	adds	r2, r3, #1
 8013be2:	921b      	str	r2, [sp, #108]	; 0x6c
 8013be4:	785b      	ldrb	r3, [r3, #1]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d1c2      	bne.n	8013b70 <_strtod_l+0x40>
 8013bea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bec:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f040 8579 	bne.w	80146e6 <_strtod_l+0xbb6>
 8013bf4:	4652      	mov	r2, sl
 8013bf6:	465b      	mov	r3, fp
 8013bf8:	e7e2      	b.n	8013bc0 <_strtod_l+0x90>
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	e7ef      	b.n	8013bde <_strtod_l+0xae>
 8013bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c00:	b13a      	cbz	r2, 8013c12 <_strtod_l+0xe2>
 8013c02:	2135      	movs	r1, #53	; 0x35
 8013c04:	a81e      	add	r0, sp, #120	; 0x78
 8013c06:	f002 fe81 	bl	801690c <__copybits>
 8013c0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c0c:	4648      	mov	r0, r9
 8013c0e:	f002 faed 	bl	80161ec <_Bfree>
 8013c12:	3c01      	subs	r4, #1
 8013c14:	2c04      	cmp	r4, #4
 8013c16:	d806      	bhi.n	8013c26 <_strtod_l+0xf6>
 8013c18:	e8df f004 	tbb	[pc, r4]
 8013c1c:	1714030a 	.word	0x1714030a
 8013c20:	0a          	.byte	0x0a
 8013c21:	00          	.byte	0x00
 8013c22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013c26:	0730      	lsls	r0, r6, #28
 8013c28:	d5c1      	bpl.n	8013bae <_strtod_l+0x7e>
 8013c2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c2e:	e7be      	b.n	8013bae <_strtod_l+0x7e>
 8013c30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013c34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013c3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013c3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013c42:	e7f0      	b.n	8013c26 <_strtod_l+0xf6>
 8013c44:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013db8 <_strtod_l+0x288>
 8013c48:	e7ed      	b.n	8013c26 <_strtod_l+0xf6>
 8013c4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013c4e:	f04f 3aff 	mov.w	sl, #4294967295
 8013c52:	e7e8      	b.n	8013c26 <_strtod_l+0xf6>
 8013c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c56:	1c5a      	adds	r2, r3, #1
 8013c58:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c5a:	785b      	ldrb	r3, [r3, #1]
 8013c5c:	2b30      	cmp	r3, #48	; 0x30
 8013c5e:	d0f9      	beq.n	8013c54 <_strtod_l+0x124>
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d0a4      	beq.n	8013bae <_strtod_l+0x7e>
 8013c64:	2301      	movs	r3, #1
 8013c66:	2500      	movs	r5, #0
 8013c68:	9306      	str	r3, [sp, #24]
 8013c6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c6c:	9308      	str	r3, [sp, #32]
 8013c6e:	9507      	str	r5, [sp, #28]
 8013c70:	9505      	str	r5, [sp, #20]
 8013c72:	220a      	movs	r2, #10
 8013c74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013c76:	7807      	ldrb	r7, [r0, #0]
 8013c78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013c7c:	b2d9      	uxtb	r1, r3
 8013c7e:	2909      	cmp	r1, #9
 8013c80:	d929      	bls.n	8013cd6 <_strtod_l+0x1a6>
 8013c82:	4622      	mov	r2, r4
 8013c84:	f8d8 1000 	ldr.w	r1, [r8]
 8013c88:	f003 fd50 	bl	801772c <strncmp>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	d031      	beq.n	8013cf4 <_strtod_l+0x1c4>
 8013c90:	2000      	movs	r0, #0
 8013c92:	9c05      	ldr	r4, [sp, #20]
 8013c94:	9004      	str	r0, [sp, #16]
 8013c96:	463b      	mov	r3, r7
 8013c98:	4602      	mov	r2, r0
 8013c9a:	2b65      	cmp	r3, #101	; 0x65
 8013c9c:	d001      	beq.n	8013ca2 <_strtod_l+0x172>
 8013c9e:	2b45      	cmp	r3, #69	; 0x45
 8013ca0:	d114      	bne.n	8013ccc <_strtod_l+0x19c>
 8013ca2:	b924      	cbnz	r4, 8013cae <_strtod_l+0x17e>
 8013ca4:	b910      	cbnz	r0, 8013cac <_strtod_l+0x17c>
 8013ca6:	9b06      	ldr	r3, [sp, #24]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d09e      	beq.n	8013bea <_strtod_l+0xba>
 8013cac:	2400      	movs	r4, #0
 8013cae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013cb0:	1c73      	adds	r3, r6, #1
 8013cb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cb4:	7873      	ldrb	r3, [r6, #1]
 8013cb6:	2b2b      	cmp	r3, #43	; 0x2b
 8013cb8:	d078      	beq.n	8013dac <_strtod_l+0x27c>
 8013cba:	2b2d      	cmp	r3, #45	; 0x2d
 8013cbc:	d070      	beq.n	8013da0 <_strtod_l+0x270>
 8013cbe:	f04f 0c00 	mov.w	ip, #0
 8013cc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013cc6:	2f09      	cmp	r7, #9
 8013cc8:	d97c      	bls.n	8013dc4 <_strtod_l+0x294>
 8013cca:	961b      	str	r6, [sp, #108]	; 0x6c
 8013ccc:	f04f 0e00 	mov.w	lr, #0
 8013cd0:	e09a      	b.n	8013e08 <_strtod_l+0x2d8>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	e7c7      	b.n	8013c66 <_strtod_l+0x136>
 8013cd6:	9905      	ldr	r1, [sp, #20]
 8013cd8:	2908      	cmp	r1, #8
 8013cda:	bfdd      	ittte	le
 8013cdc:	9907      	ldrle	r1, [sp, #28]
 8013cde:	fb02 3301 	mlale	r3, r2, r1, r3
 8013ce2:	9307      	strle	r3, [sp, #28]
 8013ce4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013ce8:	9b05      	ldr	r3, [sp, #20]
 8013cea:	3001      	adds	r0, #1
 8013cec:	3301      	adds	r3, #1
 8013cee:	9305      	str	r3, [sp, #20]
 8013cf0:	901b      	str	r0, [sp, #108]	; 0x6c
 8013cf2:	e7bf      	b.n	8013c74 <_strtod_l+0x144>
 8013cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cf6:	191a      	adds	r2, r3, r4
 8013cf8:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cfa:	9a05      	ldr	r2, [sp, #20]
 8013cfc:	5d1b      	ldrb	r3, [r3, r4]
 8013cfe:	2a00      	cmp	r2, #0
 8013d00:	d037      	beq.n	8013d72 <_strtod_l+0x242>
 8013d02:	9c05      	ldr	r4, [sp, #20]
 8013d04:	4602      	mov	r2, r0
 8013d06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013d0a:	2909      	cmp	r1, #9
 8013d0c:	d913      	bls.n	8013d36 <_strtod_l+0x206>
 8013d0e:	2101      	movs	r1, #1
 8013d10:	9104      	str	r1, [sp, #16]
 8013d12:	e7c2      	b.n	8013c9a <_strtod_l+0x16a>
 8013d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d16:	1c5a      	adds	r2, r3, #1
 8013d18:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d1a:	785b      	ldrb	r3, [r3, #1]
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	2b30      	cmp	r3, #48	; 0x30
 8013d20:	d0f8      	beq.n	8013d14 <_strtod_l+0x1e4>
 8013d22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013d26:	2a08      	cmp	r2, #8
 8013d28:	f200 84e4 	bhi.w	80146f4 <_strtod_l+0xbc4>
 8013d2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d2e:	9208      	str	r2, [sp, #32]
 8013d30:	4602      	mov	r2, r0
 8013d32:	2000      	movs	r0, #0
 8013d34:	4604      	mov	r4, r0
 8013d36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013d3a:	f100 0101 	add.w	r1, r0, #1
 8013d3e:	d012      	beq.n	8013d66 <_strtod_l+0x236>
 8013d40:	440a      	add	r2, r1
 8013d42:	eb00 0c04 	add.w	ip, r0, r4
 8013d46:	4621      	mov	r1, r4
 8013d48:	270a      	movs	r7, #10
 8013d4a:	458c      	cmp	ip, r1
 8013d4c:	d113      	bne.n	8013d76 <_strtod_l+0x246>
 8013d4e:	1821      	adds	r1, r4, r0
 8013d50:	2908      	cmp	r1, #8
 8013d52:	f104 0401 	add.w	r4, r4, #1
 8013d56:	4404      	add	r4, r0
 8013d58:	dc19      	bgt.n	8013d8e <_strtod_l+0x25e>
 8013d5a:	9b07      	ldr	r3, [sp, #28]
 8013d5c:	210a      	movs	r1, #10
 8013d5e:	fb01 e303 	mla	r3, r1, r3, lr
 8013d62:	9307      	str	r3, [sp, #28]
 8013d64:	2100      	movs	r1, #0
 8013d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d68:	1c58      	adds	r0, r3, #1
 8013d6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d6c:	785b      	ldrb	r3, [r3, #1]
 8013d6e:	4608      	mov	r0, r1
 8013d70:	e7c9      	b.n	8013d06 <_strtod_l+0x1d6>
 8013d72:	9805      	ldr	r0, [sp, #20]
 8013d74:	e7d3      	b.n	8013d1e <_strtod_l+0x1ee>
 8013d76:	2908      	cmp	r1, #8
 8013d78:	f101 0101 	add.w	r1, r1, #1
 8013d7c:	dc03      	bgt.n	8013d86 <_strtod_l+0x256>
 8013d7e:	9b07      	ldr	r3, [sp, #28]
 8013d80:	437b      	muls	r3, r7
 8013d82:	9307      	str	r3, [sp, #28]
 8013d84:	e7e1      	b.n	8013d4a <_strtod_l+0x21a>
 8013d86:	2910      	cmp	r1, #16
 8013d88:	bfd8      	it	le
 8013d8a:	437d      	mulle	r5, r7
 8013d8c:	e7dd      	b.n	8013d4a <_strtod_l+0x21a>
 8013d8e:	2c10      	cmp	r4, #16
 8013d90:	bfdc      	itt	le
 8013d92:	210a      	movle	r1, #10
 8013d94:	fb01 e505 	mlale	r5, r1, r5, lr
 8013d98:	e7e4      	b.n	8013d64 <_strtod_l+0x234>
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	9304      	str	r3, [sp, #16]
 8013d9e:	e781      	b.n	8013ca4 <_strtod_l+0x174>
 8013da0:	f04f 0c01 	mov.w	ip, #1
 8013da4:	1cb3      	adds	r3, r6, #2
 8013da6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013da8:	78b3      	ldrb	r3, [r6, #2]
 8013daa:	e78a      	b.n	8013cc2 <_strtod_l+0x192>
 8013dac:	f04f 0c00 	mov.w	ip, #0
 8013db0:	e7f8      	b.n	8013da4 <_strtod_l+0x274>
 8013db2:	bf00      	nop
 8013db4:	080181cc 	.word	0x080181cc
 8013db8:	7ff00000 	.word	0x7ff00000
 8013dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dbe:	1c5f      	adds	r7, r3, #1
 8013dc0:	971b      	str	r7, [sp, #108]	; 0x6c
 8013dc2:	785b      	ldrb	r3, [r3, #1]
 8013dc4:	2b30      	cmp	r3, #48	; 0x30
 8013dc6:	d0f9      	beq.n	8013dbc <_strtod_l+0x28c>
 8013dc8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013dcc:	2f08      	cmp	r7, #8
 8013dce:	f63f af7d 	bhi.w	8013ccc <_strtod_l+0x19c>
 8013dd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8013dda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ddc:	1c5f      	adds	r7, r3, #1
 8013dde:	971b      	str	r7, [sp, #108]	; 0x6c
 8013de0:	785b      	ldrb	r3, [r3, #1]
 8013de2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013de6:	f1b8 0f09 	cmp.w	r8, #9
 8013dea:	d937      	bls.n	8013e5c <_strtod_l+0x32c>
 8013dec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dee:	1a7f      	subs	r7, r7, r1
 8013df0:	2f08      	cmp	r7, #8
 8013df2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013df6:	dc37      	bgt.n	8013e68 <_strtod_l+0x338>
 8013df8:	45be      	cmp	lr, r7
 8013dfa:	bfa8      	it	ge
 8013dfc:	46be      	movge	lr, r7
 8013dfe:	f1bc 0f00 	cmp.w	ip, #0
 8013e02:	d001      	beq.n	8013e08 <_strtod_l+0x2d8>
 8013e04:	f1ce 0e00 	rsb	lr, lr, #0
 8013e08:	2c00      	cmp	r4, #0
 8013e0a:	d151      	bne.n	8013eb0 <_strtod_l+0x380>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	f47f aece 	bne.w	8013bae <_strtod_l+0x7e>
 8013e12:	9a06      	ldr	r2, [sp, #24]
 8013e14:	2a00      	cmp	r2, #0
 8013e16:	f47f aeca 	bne.w	8013bae <_strtod_l+0x7e>
 8013e1a:	9a04      	ldr	r2, [sp, #16]
 8013e1c:	2a00      	cmp	r2, #0
 8013e1e:	f47f aee4 	bne.w	8013bea <_strtod_l+0xba>
 8013e22:	2b4e      	cmp	r3, #78	; 0x4e
 8013e24:	d027      	beq.n	8013e76 <_strtod_l+0x346>
 8013e26:	dc21      	bgt.n	8013e6c <_strtod_l+0x33c>
 8013e28:	2b49      	cmp	r3, #73	; 0x49
 8013e2a:	f47f aede 	bne.w	8013bea <_strtod_l+0xba>
 8013e2e:	49a0      	ldr	r1, [pc, #640]	; (80140b0 <_strtod_l+0x580>)
 8013e30:	a81b      	add	r0, sp, #108	; 0x6c
 8013e32:	f002 f851 	bl	8015ed8 <__match>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	f43f aed7 	beq.w	8013bea <_strtod_l+0xba>
 8013e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e3e:	499d      	ldr	r1, [pc, #628]	; (80140b4 <_strtod_l+0x584>)
 8013e40:	3b01      	subs	r3, #1
 8013e42:	a81b      	add	r0, sp, #108	; 0x6c
 8013e44:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e46:	f002 f847 	bl	8015ed8 <__match>
 8013e4a:	b910      	cbnz	r0, 8013e52 <_strtod_l+0x322>
 8013e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e4e:	3301      	adds	r3, #1
 8013e50:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e52:	f8df b274 	ldr.w	fp, [pc, #628]	; 80140c8 <_strtod_l+0x598>
 8013e56:	f04f 0a00 	mov.w	sl, #0
 8013e5a:	e6a8      	b.n	8013bae <_strtod_l+0x7e>
 8013e5c:	210a      	movs	r1, #10
 8013e5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013e62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013e66:	e7b8      	b.n	8013dda <_strtod_l+0x2aa>
 8013e68:	46be      	mov	lr, r7
 8013e6a:	e7c8      	b.n	8013dfe <_strtod_l+0x2ce>
 8013e6c:	2b69      	cmp	r3, #105	; 0x69
 8013e6e:	d0de      	beq.n	8013e2e <_strtod_l+0x2fe>
 8013e70:	2b6e      	cmp	r3, #110	; 0x6e
 8013e72:	f47f aeba 	bne.w	8013bea <_strtod_l+0xba>
 8013e76:	4990      	ldr	r1, [pc, #576]	; (80140b8 <_strtod_l+0x588>)
 8013e78:	a81b      	add	r0, sp, #108	; 0x6c
 8013e7a:	f002 f82d 	bl	8015ed8 <__match>
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	f43f aeb3 	beq.w	8013bea <_strtod_l+0xba>
 8013e84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	2b28      	cmp	r3, #40	; 0x28
 8013e8a:	d10e      	bne.n	8013eaa <_strtod_l+0x37a>
 8013e8c:	aa1e      	add	r2, sp, #120	; 0x78
 8013e8e:	498b      	ldr	r1, [pc, #556]	; (80140bc <_strtod_l+0x58c>)
 8013e90:	a81b      	add	r0, sp, #108	; 0x6c
 8013e92:	f002 f835 	bl	8015f00 <__hexnan>
 8013e96:	2805      	cmp	r0, #5
 8013e98:	d107      	bne.n	8013eaa <_strtod_l+0x37a>
 8013e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013ea0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013ea4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013ea8:	e681      	b.n	8013bae <_strtod_l+0x7e>
 8013eaa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80140d0 <_strtod_l+0x5a0>
 8013eae:	e7d2      	b.n	8013e56 <_strtod_l+0x326>
 8013eb0:	ebae 0302 	sub.w	r3, lr, r2
 8013eb4:	9306      	str	r3, [sp, #24]
 8013eb6:	9b05      	ldr	r3, [sp, #20]
 8013eb8:	9807      	ldr	r0, [sp, #28]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	bf08      	it	eq
 8013ebe:	4623      	moveq	r3, r4
 8013ec0:	2c10      	cmp	r4, #16
 8013ec2:	9305      	str	r3, [sp, #20]
 8013ec4:	46a0      	mov	r8, r4
 8013ec6:	bfa8      	it	ge
 8013ec8:	f04f 0810 	movge.w	r8, #16
 8013ecc:	f7ec fb32 	bl	8000534 <__aeabi_ui2d>
 8013ed0:	2c09      	cmp	r4, #9
 8013ed2:	4682      	mov	sl, r0
 8013ed4:	468b      	mov	fp, r1
 8013ed6:	dc13      	bgt.n	8013f00 <_strtod_l+0x3d0>
 8013ed8:	9b06      	ldr	r3, [sp, #24]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	f43f ae67 	beq.w	8013bae <_strtod_l+0x7e>
 8013ee0:	9b06      	ldr	r3, [sp, #24]
 8013ee2:	dd7a      	ble.n	8013fda <_strtod_l+0x4aa>
 8013ee4:	2b16      	cmp	r3, #22
 8013ee6:	dc61      	bgt.n	8013fac <_strtod_l+0x47c>
 8013ee8:	4a75      	ldr	r2, [pc, #468]	; (80140c0 <_strtod_l+0x590>)
 8013eea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013eee:	e9de 0100 	ldrd	r0, r1, [lr]
 8013ef2:	4652      	mov	r2, sl
 8013ef4:	465b      	mov	r3, fp
 8013ef6:	f7ec fb97 	bl	8000628 <__aeabi_dmul>
 8013efa:	4682      	mov	sl, r0
 8013efc:	468b      	mov	fp, r1
 8013efe:	e656      	b.n	8013bae <_strtod_l+0x7e>
 8013f00:	4b6f      	ldr	r3, [pc, #444]	; (80140c0 <_strtod_l+0x590>)
 8013f02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f0a:	f7ec fb8d 	bl	8000628 <__aeabi_dmul>
 8013f0e:	4606      	mov	r6, r0
 8013f10:	4628      	mov	r0, r5
 8013f12:	460f      	mov	r7, r1
 8013f14:	f7ec fb0e 	bl	8000534 <__aeabi_ui2d>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	4639      	mov	r1, r7
 8013f20:	f7ec f9cc 	bl	80002bc <__adddf3>
 8013f24:	2c0f      	cmp	r4, #15
 8013f26:	4682      	mov	sl, r0
 8013f28:	468b      	mov	fp, r1
 8013f2a:	ddd5      	ble.n	8013ed8 <_strtod_l+0x3a8>
 8013f2c:	9b06      	ldr	r3, [sp, #24]
 8013f2e:	eba4 0808 	sub.w	r8, r4, r8
 8013f32:	4498      	add	r8, r3
 8013f34:	f1b8 0f00 	cmp.w	r8, #0
 8013f38:	f340 8096 	ble.w	8014068 <_strtod_l+0x538>
 8013f3c:	f018 030f 	ands.w	r3, r8, #15
 8013f40:	d00a      	beq.n	8013f58 <_strtod_l+0x428>
 8013f42:	495f      	ldr	r1, [pc, #380]	; (80140c0 <_strtod_l+0x590>)
 8013f44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f48:	4652      	mov	r2, sl
 8013f4a:	465b      	mov	r3, fp
 8013f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f50:	f7ec fb6a 	bl	8000628 <__aeabi_dmul>
 8013f54:	4682      	mov	sl, r0
 8013f56:	468b      	mov	fp, r1
 8013f58:	f038 080f 	bics.w	r8, r8, #15
 8013f5c:	d073      	beq.n	8014046 <_strtod_l+0x516>
 8013f5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013f62:	dd47      	ble.n	8013ff4 <_strtod_l+0x4c4>
 8013f64:	2400      	movs	r4, #0
 8013f66:	46a0      	mov	r8, r4
 8013f68:	9407      	str	r4, [sp, #28]
 8013f6a:	9405      	str	r4, [sp, #20]
 8013f6c:	2322      	movs	r3, #34	; 0x22
 8013f6e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80140c8 <_strtod_l+0x598>
 8013f72:	f8c9 3000 	str.w	r3, [r9]
 8013f76:	f04f 0a00 	mov.w	sl, #0
 8013f7a:	9b07      	ldr	r3, [sp, #28]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f43f ae16 	beq.w	8013bae <_strtod_l+0x7e>
 8013f82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f84:	4648      	mov	r0, r9
 8013f86:	f002 f931 	bl	80161ec <_Bfree>
 8013f8a:	9905      	ldr	r1, [sp, #20]
 8013f8c:	4648      	mov	r0, r9
 8013f8e:	f002 f92d 	bl	80161ec <_Bfree>
 8013f92:	4641      	mov	r1, r8
 8013f94:	4648      	mov	r0, r9
 8013f96:	f002 f929 	bl	80161ec <_Bfree>
 8013f9a:	9907      	ldr	r1, [sp, #28]
 8013f9c:	4648      	mov	r0, r9
 8013f9e:	f002 f925 	bl	80161ec <_Bfree>
 8013fa2:	4621      	mov	r1, r4
 8013fa4:	4648      	mov	r0, r9
 8013fa6:	f002 f921 	bl	80161ec <_Bfree>
 8013faa:	e600      	b.n	8013bae <_strtod_l+0x7e>
 8013fac:	9a06      	ldr	r2, [sp, #24]
 8013fae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	dbba      	blt.n	8013f2c <_strtod_l+0x3fc>
 8013fb6:	4d42      	ldr	r5, [pc, #264]	; (80140c0 <_strtod_l+0x590>)
 8013fb8:	f1c4 040f 	rsb	r4, r4, #15
 8013fbc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013fc0:	4652      	mov	r2, sl
 8013fc2:	465b      	mov	r3, fp
 8013fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc8:	f7ec fb2e 	bl	8000628 <__aeabi_dmul>
 8013fcc:	9b06      	ldr	r3, [sp, #24]
 8013fce:	1b1c      	subs	r4, r3, r4
 8013fd0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013fd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fd8:	e78d      	b.n	8013ef6 <_strtod_l+0x3c6>
 8013fda:	f113 0f16 	cmn.w	r3, #22
 8013fde:	dba5      	blt.n	8013f2c <_strtod_l+0x3fc>
 8013fe0:	4a37      	ldr	r2, [pc, #220]	; (80140c0 <_strtod_l+0x590>)
 8013fe2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013fe6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013fea:	4650      	mov	r0, sl
 8013fec:	4659      	mov	r1, fp
 8013fee:	f7ec fc45 	bl	800087c <__aeabi_ddiv>
 8013ff2:	e782      	b.n	8013efa <_strtod_l+0x3ca>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	4e33      	ldr	r6, [pc, #204]	; (80140c4 <_strtod_l+0x594>)
 8013ff8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013ffc:	4650      	mov	r0, sl
 8013ffe:	4659      	mov	r1, fp
 8014000:	461d      	mov	r5, r3
 8014002:	f1b8 0f01 	cmp.w	r8, #1
 8014006:	dc21      	bgt.n	801404c <_strtod_l+0x51c>
 8014008:	b10b      	cbz	r3, 801400e <_strtod_l+0x4de>
 801400a:	4682      	mov	sl, r0
 801400c:	468b      	mov	fp, r1
 801400e:	4b2d      	ldr	r3, [pc, #180]	; (80140c4 <_strtod_l+0x594>)
 8014010:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014014:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014018:	4652      	mov	r2, sl
 801401a:	465b      	mov	r3, fp
 801401c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014020:	f7ec fb02 	bl	8000628 <__aeabi_dmul>
 8014024:	4b28      	ldr	r3, [pc, #160]	; (80140c8 <_strtod_l+0x598>)
 8014026:	460a      	mov	r2, r1
 8014028:	400b      	ands	r3, r1
 801402a:	4928      	ldr	r1, [pc, #160]	; (80140cc <_strtod_l+0x59c>)
 801402c:	428b      	cmp	r3, r1
 801402e:	4682      	mov	sl, r0
 8014030:	d898      	bhi.n	8013f64 <_strtod_l+0x434>
 8014032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014036:	428b      	cmp	r3, r1
 8014038:	bf86      	itte	hi
 801403a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80140d4 <_strtod_l+0x5a4>
 801403e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014042:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014046:	2300      	movs	r3, #0
 8014048:	9304      	str	r3, [sp, #16]
 801404a:	e077      	b.n	801413c <_strtod_l+0x60c>
 801404c:	f018 0f01 	tst.w	r8, #1
 8014050:	d006      	beq.n	8014060 <_strtod_l+0x530>
 8014052:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405a:	f7ec fae5 	bl	8000628 <__aeabi_dmul>
 801405e:	2301      	movs	r3, #1
 8014060:	3501      	adds	r5, #1
 8014062:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014066:	e7cc      	b.n	8014002 <_strtod_l+0x4d2>
 8014068:	d0ed      	beq.n	8014046 <_strtod_l+0x516>
 801406a:	f1c8 0800 	rsb	r8, r8, #0
 801406e:	f018 020f 	ands.w	r2, r8, #15
 8014072:	d00a      	beq.n	801408a <_strtod_l+0x55a>
 8014074:	4b12      	ldr	r3, [pc, #72]	; (80140c0 <_strtod_l+0x590>)
 8014076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801407a:	4650      	mov	r0, sl
 801407c:	4659      	mov	r1, fp
 801407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014082:	f7ec fbfb 	bl	800087c <__aeabi_ddiv>
 8014086:	4682      	mov	sl, r0
 8014088:	468b      	mov	fp, r1
 801408a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801408e:	d0da      	beq.n	8014046 <_strtod_l+0x516>
 8014090:	f1b8 0f1f 	cmp.w	r8, #31
 8014094:	dd20      	ble.n	80140d8 <_strtod_l+0x5a8>
 8014096:	2400      	movs	r4, #0
 8014098:	46a0      	mov	r8, r4
 801409a:	9407      	str	r4, [sp, #28]
 801409c:	9405      	str	r4, [sp, #20]
 801409e:	2322      	movs	r3, #34	; 0x22
 80140a0:	f04f 0a00 	mov.w	sl, #0
 80140a4:	f04f 0b00 	mov.w	fp, #0
 80140a8:	f8c9 3000 	str.w	r3, [r9]
 80140ac:	e765      	b.n	8013f7a <_strtod_l+0x44a>
 80140ae:	bf00      	nop
 80140b0:	08018199 	.word	0x08018199
 80140b4:	08018223 	.word	0x08018223
 80140b8:	080181a1 	.word	0x080181a1
 80140bc:	080181e0 	.word	0x080181e0
 80140c0:	080182c8 	.word	0x080182c8
 80140c4:	080182a0 	.word	0x080182a0
 80140c8:	7ff00000 	.word	0x7ff00000
 80140cc:	7ca00000 	.word	0x7ca00000
 80140d0:	fff80000 	.word	0xfff80000
 80140d4:	7fefffff 	.word	0x7fefffff
 80140d8:	f018 0310 	ands.w	r3, r8, #16
 80140dc:	bf18      	it	ne
 80140de:	236a      	movne	r3, #106	; 0x6a
 80140e0:	4da0      	ldr	r5, [pc, #640]	; (8014364 <_strtod_l+0x834>)
 80140e2:	9304      	str	r3, [sp, #16]
 80140e4:	4650      	mov	r0, sl
 80140e6:	4659      	mov	r1, fp
 80140e8:	2300      	movs	r3, #0
 80140ea:	f1b8 0f00 	cmp.w	r8, #0
 80140ee:	f300 810a 	bgt.w	8014306 <_strtod_l+0x7d6>
 80140f2:	b10b      	cbz	r3, 80140f8 <_strtod_l+0x5c8>
 80140f4:	4682      	mov	sl, r0
 80140f6:	468b      	mov	fp, r1
 80140f8:	9b04      	ldr	r3, [sp, #16]
 80140fa:	b1bb      	cbz	r3, 801412c <_strtod_l+0x5fc>
 80140fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014100:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014104:	2b00      	cmp	r3, #0
 8014106:	4659      	mov	r1, fp
 8014108:	dd10      	ble.n	801412c <_strtod_l+0x5fc>
 801410a:	2b1f      	cmp	r3, #31
 801410c:	f340 8107 	ble.w	801431e <_strtod_l+0x7ee>
 8014110:	2b34      	cmp	r3, #52	; 0x34
 8014112:	bfde      	ittt	le
 8014114:	3b20      	suble	r3, #32
 8014116:	f04f 32ff 	movle.w	r2, #4294967295
 801411a:	fa02 f303 	lslle.w	r3, r2, r3
 801411e:	f04f 0a00 	mov.w	sl, #0
 8014122:	bfcc      	ite	gt
 8014124:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014128:	ea03 0b01 	andle.w	fp, r3, r1
 801412c:	2200      	movs	r2, #0
 801412e:	2300      	movs	r3, #0
 8014130:	4650      	mov	r0, sl
 8014132:	4659      	mov	r1, fp
 8014134:	f7ec fce0 	bl	8000af8 <__aeabi_dcmpeq>
 8014138:	2800      	cmp	r0, #0
 801413a:	d1ac      	bne.n	8014096 <_strtod_l+0x566>
 801413c:	9b07      	ldr	r3, [sp, #28]
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	9a05      	ldr	r2, [sp, #20]
 8014142:	9908      	ldr	r1, [sp, #32]
 8014144:	4623      	mov	r3, r4
 8014146:	4648      	mov	r0, r9
 8014148:	f002 f8a2 	bl	8016290 <__s2b>
 801414c:	9007      	str	r0, [sp, #28]
 801414e:	2800      	cmp	r0, #0
 8014150:	f43f af08 	beq.w	8013f64 <_strtod_l+0x434>
 8014154:	9a06      	ldr	r2, [sp, #24]
 8014156:	9b06      	ldr	r3, [sp, #24]
 8014158:	2a00      	cmp	r2, #0
 801415a:	f1c3 0300 	rsb	r3, r3, #0
 801415e:	bfa8      	it	ge
 8014160:	2300      	movge	r3, #0
 8014162:	930e      	str	r3, [sp, #56]	; 0x38
 8014164:	2400      	movs	r4, #0
 8014166:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801416a:	9316      	str	r3, [sp, #88]	; 0x58
 801416c:	46a0      	mov	r8, r4
 801416e:	9b07      	ldr	r3, [sp, #28]
 8014170:	4648      	mov	r0, r9
 8014172:	6859      	ldr	r1, [r3, #4]
 8014174:	f002 f806 	bl	8016184 <_Balloc>
 8014178:	9005      	str	r0, [sp, #20]
 801417a:	2800      	cmp	r0, #0
 801417c:	f43f aef6 	beq.w	8013f6c <_strtod_l+0x43c>
 8014180:	9b07      	ldr	r3, [sp, #28]
 8014182:	691a      	ldr	r2, [r3, #16]
 8014184:	3202      	adds	r2, #2
 8014186:	f103 010c 	add.w	r1, r3, #12
 801418a:	0092      	lsls	r2, r2, #2
 801418c:	300c      	adds	r0, #12
 801418e:	f7fe fcff 	bl	8012b90 <memcpy>
 8014192:	aa1e      	add	r2, sp, #120	; 0x78
 8014194:	a91d      	add	r1, sp, #116	; 0x74
 8014196:	ec4b ab10 	vmov	d0, sl, fp
 801419a:	4648      	mov	r0, r9
 801419c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80141a0:	f002 fb32 	bl	8016808 <__d2b>
 80141a4:	901c      	str	r0, [sp, #112]	; 0x70
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f43f aee0 	beq.w	8013f6c <_strtod_l+0x43c>
 80141ac:	2101      	movs	r1, #1
 80141ae:	4648      	mov	r0, r9
 80141b0:	f002 f8fa 	bl	80163a8 <__i2b>
 80141b4:	4680      	mov	r8, r0
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f43f aed8 	beq.w	8013f6c <_strtod_l+0x43c>
 80141bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80141be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141c0:	2e00      	cmp	r6, #0
 80141c2:	bfab      	itete	ge
 80141c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80141c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80141c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80141ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80141cc:	bfac      	ite	ge
 80141ce:	18f7      	addge	r7, r6, r3
 80141d0:	1b9d      	sublt	r5, r3, r6
 80141d2:	9b04      	ldr	r3, [sp, #16]
 80141d4:	1af6      	subs	r6, r6, r3
 80141d6:	4416      	add	r6, r2
 80141d8:	4b63      	ldr	r3, [pc, #396]	; (8014368 <_strtod_l+0x838>)
 80141da:	3e01      	subs	r6, #1
 80141dc:	429e      	cmp	r6, r3
 80141de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80141e2:	f280 80af 	bge.w	8014344 <_strtod_l+0x814>
 80141e6:	1b9b      	subs	r3, r3, r6
 80141e8:	2b1f      	cmp	r3, #31
 80141ea:	eba2 0203 	sub.w	r2, r2, r3
 80141ee:	f04f 0101 	mov.w	r1, #1
 80141f2:	f300 809b 	bgt.w	801432c <_strtod_l+0x7fc>
 80141f6:	fa01 f303 	lsl.w	r3, r1, r3
 80141fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80141fc:	2300      	movs	r3, #0
 80141fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014200:	18be      	adds	r6, r7, r2
 8014202:	9b04      	ldr	r3, [sp, #16]
 8014204:	42b7      	cmp	r7, r6
 8014206:	4415      	add	r5, r2
 8014208:	441d      	add	r5, r3
 801420a:	463b      	mov	r3, r7
 801420c:	bfa8      	it	ge
 801420e:	4633      	movge	r3, r6
 8014210:	42ab      	cmp	r3, r5
 8014212:	bfa8      	it	ge
 8014214:	462b      	movge	r3, r5
 8014216:	2b00      	cmp	r3, #0
 8014218:	bfc2      	ittt	gt
 801421a:	1af6      	subgt	r6, r6, r3
 801421c:	1aed      	subgt	r5, r5, r3
 801421e:	1aff      	subgt	r7, r7, r3
 8014220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014222:	b1bb      	cbz	r3, 8014254 <_strtod_l+0x724>
 8014224:	4641      	mov	r1, r8
 8014226:	461a      	mov	r2, r3
 8014228:	4648      	mov	r0, r9
 801422a:	f002 f95d 	bl	80164e8 <__pow5mult>
 801422e:	4680      	mov	r8, r0
 8014230:	2800      	cmp	r0, #0
 8014232:	f43f ae9b 	beq.w	8013f6c <_strtod_l+0x43c>
 8014236:	4601      	mov	r1, r0
 8014238:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801423a:	4648      	mov	r0, r9
 801423c:	f002 f8bd 	bl	80163ba <__multiply>
 8014240:	900c      	str	r0, [sp, #48]	; 0x30
 8014242:	2800      	cmp	r0, #0
 8014244:	f43f ae92 	beq.w	8013f6c <_strtod_l+0x43c>
 8014248:	991c      	ldr	r1, [sp, #112]	; 0x70
 801424a:	4648      	mov	r0, r9
 801424c:	f001 ffce 	bl	80161ec <_Bfree>
 8014250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014252:	931c      	str	r3, [sp, #112]	; 0x70
 8014254:	2e00      	cmp	r6, #0
 8014256:	dc7a      	bgt.n	801434e <_strtod_l+0x81e>
 8014258:	9b06      	ldr	r3, [sp, #24]
 801425a:	2b00      	cmp	r3, #0
 801425c:	dd08      	ble.n	8014270 <_strtod_l+0x740>
 801425e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014260:	9905      	ldr	r1, [sp, #20]
 8014262:	4648      	mov	r0, r9
 8014264:	f002 f940 	bl	80164e8 <__pow5mult>
 8014268:	9005      	str	r0, [sp, #20]
 801426a:	2800      	cmp	r0, #0
 801426c:	f43f ae7e 	beq.w	8013f6c <_strtod_l+0x43c>
 8014270:	2d00      	cmp	r5, #0
 8014272:	dd08      	ble.n	8014286 <_strtod_l+0x756>
 8014274:	462a      	mov	r2, r5
 8014276:	9905      	ldr	r1, [sp, #20]
 8014278:	4648      	mov	r0, r9
 801427a:	f002 f983 	bl	8016584 <__lshift>
 801427e:	9005      	str	r0, [sp, #20]
 8014280:	2800      	cmp	r0, #0
 8014282:	f43f ae73 	beq.w	8013f6c <_strtod_l+0x43c>
 8014286:	2f00      	cmp	r7, #0
 8014288:	dd08      	ble.n	801429c <_strtod_l+0x76c>
 801428a:	4641      	mov	r1, r8
 801428c:	463a      	mov	r2, r7
 801428e:	4648      	mov	r0, r9
 8014290:	f002 f978 	bl	8016584 <__lshift>
 8014294:	4680      	mov	r8, r0
 8014296:	2800      	cmp	r0, #0
 8014298:	f43f ae68 	beq.w	8013f6c <_strtod_l+0x43c>
 801429c:	9a05      	ldr	r2, [sp, #20]
 801429e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142a0:	4648      	mov	r0, r9
 80142a2:	f002 f9dd 	bl	8016660 <__mdiff>
 80142a6:	4604      	mov	r4, r0
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f43f ae5f 	beq.w	8013f6c <_strtod_l+0x43c>
 80142ae:	68c3      	ldr	r3, [r0, #12]
 80142b0:	930c      	str	r3, [sp, #48]	; 0x30
 80142b2:	2300      	movs	r3, #0
 80142b4:	60c3      	str	r3, [r0, #12]
 80142b6:	4641      	mov	r1, r8
 80142b8:	f002 f9b8 	bl	801662c <__mcmp>
 80142bc:	2800      	cmp	r0, #0
 80142be:	da55      	bge.n	801436c <_strtod_l+0x83c>
 80142c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142c2:	b9e3      	cbnz	r3, 80142fe <_strtod_l+0x7ce>
 80142c4:	f1ba 0f00 	cmp.w	sl, #0
 80142c8:	d119      	bne.n	80142fe <_strtod_l+0x7ce>
 80142ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142ce:	b9b3      	cbnz	r3, 80142fe <_strtod_l+0x7ce>
 80142d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142d4:	0d1b      	lsrs	r3, r3, #20
 80142d6:	051b      	lsls	r3, r3, #20
 80142d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80142dc:	d90f      	bls.n	80142fe <_strtod_l+0x7ce>
 80142de:	6963      	ldr	r3, [r4, #20]
 80142e0:	b913      	cbnz	r3, 80142e8 <_strtod_l+0x7b8>
 80142e2:	6923      	ldr	r3, [r4, #16]
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	dd0a      	ble.n	80142fe <_strtod_l+0x7ce>
 80142e8:	4621      	mov	r1, r4
 80142ea:	2201      	movs	r2, #1
 80142ec:	4648      	mov	r0, r9
 80142ee:	f002 f949 	bl	8016584 <__lshift>
 80142f2:	4641      	mov	r1, r8
 80142f4:	4604      	mov	r4, r0
 80142f6:	f002 f999 	bl	801662c <__mcmp>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	dc67      	bgt.n	80143ce <_strtod_l+0x89e>
 80142fe:	9b04      	ldr	r3, [sp, #16]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d171      	bne.n	80143e8 <_strtod_l+0x8b8>
 8014304:	e63d      	b.n	8013f82 <_strtod_l+0x452>
 8014306:	f018 0f01 	tst.w	r8, #1
 801430a:	d004      	beq.n	8014316 <_strtod_l+0x7e6>
 801430c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014310:	f7ec f98a 	bl	8000628 <__aeabi_dmul>
 8014314:	2301      	movs	r3, #1
 8014316:	ea4f 0868 	mov.w	r8, r8, asr #1
 801431a:	3508      	adds	r5, #8
 801431c:	e6e5      	b.n	80140ea <_strtod_l+0x5ba>
 801431e:	f04f 32ff 	mov.w	r2, #4294967295
 8014322:	fa02 f303 	lsl.w	r3, r2, r3
 8014326:	ea03 0a0a 	and.w	sl, r3, sl
 801432a:	e6ff      	b.n	801412c <_strtod_l+0x5fc>
 801432c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014330:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014334:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014338:	36e2      	adds	r6, #226	; 0xe2
 801433a:	fa01 f306 	lsl.w	r3, r1, r6
 801433e:	930a      	str	r3, [sp, #40]	; 0x28
 8014340:	910f      	str	r1, [sp, #60]	; 0x3c
 8014342:	e75d      	b.n	8014200 <_strtod_l+0x6d0>
 8014344:	2300      	movs	r3, #0
 8014346:	930a      	str	r3, [sp, #40]	; 0x28
 8014348:	2301      	movs	r3, #1
 801434a:	930f      	str	r3, [sp, #60]	; 0x3c
 801434c:	e758      	b.n	8014200 <_strtod_l+0x6d0>
 801434e:	4632      	mov	r2, r6
 8014350:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014352:	4648      	mov	r0, r9
 8014354:	f002 f916 	bl	8016584 <__lshift>
 8014358:	901c      	str	r0, [sp, #112]	; 0x70
 801435a:	2800      	cmp	r0, #0
 801435c:	f47f af7c 	bne.w	8014258 <_strtod_l+0x728>
 8014360:	e604      	b.n	8013f6c <_strtod_l+0x43c>
 8014362:	bf00      	nop
 8014364:	080181f8 	.word	0x080181f8
 8014368:	fffffc02 	.word	0xfffffc02
 801436c:	465d      	mov	r5, fp
 801436e:	f040 8086 	bne.w	801447e <_strtod_l+0x94e>
 8014372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014378:	b32a      	cbz	r2, 80143c6 <_strtod_l+0x896>
 801437a:	4aaf      	ldr	r2, [pc, #700]	; (8014638 <_strtod_l+0xb08>)
 801437c:	4293      	cmp	r3, r2
 801437e:	d153      	bne.n	8014428 <_strtod_l+0x8f8>
 8014380:	9b04      	ldr	r3, [sp, #16]
 8014382:	4650      	mov	r0, sl
 8014384:	b1d3      	cbz	r3, 80143bc <_strtod_l+0x88c>
 8014386:	4aad      	ldr	r2, [pc, #692]	; (801463c <_strtod_l+0xb0c>)
 8014388:	402a      	ands	r2, r5
 801438a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801438e:	f04f 31ff 	mov.w	r1, #4294967295
 8014392:	d816      	bhi.n	80143c2 <_strtod_l+0x892>
 8014394:	0d12      	lsrs	r2, r2, #20
 8014396:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801439a:	fa01 f303 	lsl.w	r3, r1, r3
 801439e:	4298      	cmp	r0, r3
 80143a0:	d142      	bne.n	8014428 <_strtod_l+0x8f8>
 80143a2:	4ba7      	ldr	r3, [pc, #668]	; (8014640 <_strtod_l+0xb10>)
 80143a4:	429d      	cmp	r5, r3
 80143a6:	d102      	bne.n	80143ae <_strtod_l+0x87e>
 80143a8:	3001      	adds	r0, #1
 80143aa:	f43f addf 	beq.w	8013f6c <_strtod_l+0x43c>
 80143ae:	4ba3      	ldr	r3, [pc, #652]	; (801463c <_strtod_l+0xb0c>)
 80143b0:	402b      	ands	r3, r5
 80143b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80143b6:	f04f 0a00 	mov.w	sl, #0
 80143ba:	e7a0      	b.n	80142fe <_strtod_l+0x7ce>
 80143bc:	f04f 33ff 	mov.w	r3, #4294967295
 80143c0:	e7ed      	b.n	801439e <_strtod_l+0x86e>
 80143c2:	460b      	mov	r3, r1
 80143c4:	e7eb      	b.n	801439e <_strtod_l+0x86e>
 80143c6:	bb7b      	cbnz	r3, 8014428 <_strtod_l+0x8f8>
 80143c8:	f1ba 0f00 	cmp.w	sl, #0
 80143cc:	d12c      	bne.n	8014428 <_strtod_l+0x8f8>
 80143ce:	9904      	ldr	r1, [sp, #16]
 80143d0:	4a9a      	ldr	r2, [pc, #616]	; (801463c <_strtod_l+0xb0c>)
 80143d2:	465b      	mov	r3, fp
 80143d4:	b1f1      	cbz	r1, 8014414 <_strtod_l+0x8e4>
 80143d6:	ea02 010b 	and.w	r1, r2, fp
 80143da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143de:	dc19      	bgt.n	8014414 <_strtod_l+0x8e4>
 80143e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143e4:	f77f ae5b 	ble.w	801409e <_strtod_l+0x56e>
 80143e8:	4a96      	ldr	r2, [pc, #600]	; (8014644 <_strtod_l+0xb14>)
 80143ea:	2300      	movs	r3, #0
 80143ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80143f0:	4650      	mov	r0, sl
 80143f2:	4659      	mov	r1, fp
 80143f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80143f8:	f7ec f916 	bl	8000628 <__aeabi_dmul>
 80143fc:	4682      	mov	sl, r0
 80143fe:	468b      	mov	fp, r1
 8014400:	2900      	cmp	r1, #0
 8014402:	f47f adbe 	bne.w	8013f82 <_strtod_l+0x452>
 8014406:	2800      	cmp	r0, #0
 8014408:	f47f adbb 	bne.w	8013f82 <_strtod_l+0x452>
 801440c:	2322      	movs	r3, #34	; 0x22
 801440e:	f8c9 3000 	str.w	r3, [r9]
 8014412:	e5b6      	b.n	8013f82 <_strtod_l+0x452>
 8014414:	4013      	ands	r3, r2
 8014416:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801441a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801441e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014422:	f04f 3aff 	mov.w	sl, #4294967295
 8014426:	e76a      	b.n	80142fe <_strtod_l+0x7ce>
 8014428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801442a:	b193      	cbz	r3, 8014452 <_strtod_l+0x922>
 801442c:	422b      	tst	r3, r5
 801442e:	f43f af66 	beq.w	80142fe <_strtod_l+0x7ce>
 8014432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014434:	9a04      	ldr	r2, [sp, #16]
 8014436:	4650      	mov	r0, sl
 8014438:	4659      	mov	r1, fp
 801443a:	b173      	cbz	r3, 801445a <_strtod_l+0x92a>
 801443c:	f7ff fb5b 	bl	8013af6 <sulp>
 8014440:	4602      	mov	r2, r0
 8014442:	460b      	mov	r3, r1
 8014444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014448:	f7eb ff38 	bl	80002bc <__adddf3>
 801444c:	4682      	mov	sl, r0
 801444e:	468b      	mov	fp, r1
 8014450:	e755      	b.n	80142fe <_strtod_l+0x7ce>
 8014452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014454:	ea13 0f0a 	tst.w	r3, sl
 8014458:	e7e9      	b.n	801442e <_strtod_l+0x8fe>
 801445a:	f7ff fb4c 	bl	8013af6 <sulp>
 801445e:	4602      	mov	r2, r0
 8014460:	460b      	mov	r3, r1
 8014462:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014466:	f7eb ff27 	bl	80002b8 <__aeabi_dsub>
 801446a:	2200      	movs	r2, #0
 801446c:	2300      	movs	r3, #0
 801446e:	4682      	mov	sl, r0
 8014470:	468b      	mov	fp, r1
 8014472:	f7ec fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8014476:	2800      	cmp	r0, #0
 8014478:	f47f ae11 	bne.w	801409e <_strtod_l+0x56e>
 801447c:	e73f      	b.n	80142fe <_strtod_l+0x7ce>
 801447e:	4641      	mov	r1, r8
 8014480:	4620      	mov	r0, r4
 8014482:	f002 fa10 	bl	80168a6 <__ratio>
 8014486:	ec57 6b10 	vmov	r6, r7, d0
 801448a:	2200      	movs	r2, #0
 801448c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014490:	ee10 0a10 	vmov	r0, s0
 8014494:	4639      	mov	r1, r7
 8014496:	f7ec fb43 	bl	8000b20 <__aeabi_dcmple>
 801449a:	2800      	cmp	r0, #0
 801449c:	d077      	beq.n	801458e <_strtod_l+0xa5e>
 801449e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d04a      	beq.n	801453a <_strtod_l+0xa0a>
 80144a4:	4b68      	ldr	r3, [pc, #416]	; (8014648 <_strtod_l+0xb18>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80144ac:	4f66      	ldr	r7, [pc, #408]	; (8014648 <_strtod_l+0xb18>)
 80144ae:	2600      	movs	r6, #0
 80144b0:	4b62      	ldr	r3, [pc, #392]	; (801463c <_strtod_l+0xb0c>)
 80144b2:	402b      	ands	r3, r5
 80144b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80144b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144b8:	4b64      	ldr	r3, [pc, #400]	; (801464c <_strtod_l+0xb1c>)
 80144ba:	429a      	cmp	r2, r3
 80144bc:	f040 80ce 	bne.w	801465c <_strtod_l+0xb2c>
 80144c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80144cc:	ec4b ab10 	vmov	d0, sl, fp
 80144d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80144d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144d8:	f002 f920 	bl	801671c <__ulp>
 80144dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144e0:	ec53 2b10 	vmov	r2, r3, d0
 80144e4:	f7ec f8a0 	bl	8000628 <__aeabi_dmul>
 80144e8:	4652      	mov	r2, sl
 80144ea:	465b      	mov	r3, fp
 80144ec:	f7eb fee6 	bl	80002bc <__adddf3>
 80144f0:	460b      	mov	r3, r1
 80144f2:	4952      	ldr	r1, [pc, #328]	; (801463c <_strtod_l+0xb0c>)
 80144f4:	4a56      	ldr	r2, [pc, #344]	; (8014650 <_strtod_l+0xb20>)
 80144f6:	4019      	ands	r1, r3
 80144f8:	4291      	cmp	r1, r2
 80144fa:	4682      	mov	sl, r0
 80144fc:	d95b      	bls.n	80145b6 <_strtod_l+0xa86>
 80144fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014500:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014504:	4293      	cmp	r3, r2
 8014506:	d103      	bne.n	8014510 <_strtod_l+0x9e0>
 8014508:	9b08      	ldr	r3, [sp, #32]
 801450a:	3301      	adds	r3, #1
 801450c:	f43f ad2e 	beq.w	8013f6c <_strtod_l+0x43c>
 8014510:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014640 <_strtod_l+0xb10>
 8014514:	f04f 3aff 	mov.w	sl, #4294967295
 8014518:	991c      	ldr	r1, [sp, #112]	; 0x70
 801451a:	4648      	mov	r0, r9
 801451c:	f001 fe66 	bl	80161ec <_Bfree>
 8014520:	9905      	ldr	r1, [sp, #20]
 8014522:	4648      	mov	r0, r9
 8014524:	f001 fe62 	bl	80161ec <_Bfree>
 8014528:	4641      	mov	r1, r8
 801452a:	4648      	mov	r0, r9
 801452c:	f001 fe5e 	bl	80161ec <_Bfree>
 8014530:	4621      	mov	r1, r4
 8014532:	4648      	mov	r0, r9
 8014534:	f001 fe5a 	bl	80161ec <_Bfree>
 8014538:	e619      	b.n	801416e <_strtod_l+0x63e>
 801453a:	f1ba 0f00 	cmp.w	sl, #0
 801453e:	d11a      	bne.n	8014576 <_strtod_l+0xa46>
 8014540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014544:	b9eb      	cbnz	r3, 8014582 <_strtod_l+0xa52>
 8014546:	2200      	movs	r2, #0
 8014548:	4b3f      	ldr	r3, [pc, #252]	; (8014648 <_strtod_l+0xb18>)
 801454a:	4630      	mov	r0, r6
 801454c:	4639      	mov	r1, r7
 801454e:	f7ec fadd 	bl	8000b0c <__aeabi_dcmplt>
 8014552:	b9c8      	cbnz	r0, 8014588 <_strtod_l+0xa58>
 8014554:	4630      	mov	r0, r6
 8014556:	4639      	mov	r1, r7
 8014558:	2200      	movs	r2, #0
 801455a:	4b3e      	ldr	r3, [pc, #248]	; (8014654 <_strtod_l+0xb24>)
 801455c:	f7ec f864 	bl	8000628 <__aeabi_dmul>
 8014560:	4606      	mov	r6, r0
 8014562:	460f      	mov	r7, r1
 8014564:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014568:	9618      	str	r6, [sp, #96]	; 0x60
 801456a:	9319      	str	r3, [sp, #100]	; 0x64
 801456c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014570:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014574:	e79c      	b.n	80144b0 <_strtod_l+0x980>
 8014576:	f1ba 0f01 	cmp.w	sl, #1
 801457a:	d102      	bne.n	8014582 <_strtod_l+0xa52>
 801457c:	2d00      	cmp	r5, #0
 801457e:	f43f ad8e 	beq.w	801409e <_strtod_l+0x56e>
 8014582:	2200      	movs	r2, #0
 8014584:	4b34      	ldr	r3, [pc, #208]	; (8014658 <_strtod_l+0xb28>)
 8014586:	e78f      	b.n	80144a8 <_strtod_l+0x978>
 8014588:	2600      	movs	r6, #0
 801458a:	4f32      	ldr	r7, [pc, #200]	; (8014654 <_strtod_l+0xb24>)
 801458c:	e7ea      	b.n	8014564 <_strtod_l+0xa34>
 801458e:	4b31      	ldr	r3, [pc, #196]	; (8014654 <_strtod_l+0xb24>)
 8014590:	4630      	mov	r0, r6
 8014592:	4639      	mov	r1, r7
 8014594:	2200      	movs	r2, #0
 8014596:	f7ec f847 	bl	8000628 <__aeabi_dmul>
 801459a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801459c:	4606      	mov	r6, r0
 801459e:	460f      	mov	r7, r1
 80145a0:	b933      	cbnz	r3, 80145b0 <_strtod_l+0xa80>
 80145a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145a6:	9010      	str	r0, [sp, #64]	; 0x40
 80145a8:	9311      	str	r3, [sp, #68]	; 0x44
 80145aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80145ae:	e7df      	b.n	8014570 <_strtod_l+0xa40>
 80145b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80145b4:	e7f9      	b.n	80145aa <_strtod_l+0xa7a>
 80145b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80145ba:	9b04      	ldr	r3, [sp, #16]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d1ab      	bne.n	8014518 <_strtod_l+0x9e8>
 80145c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80145c4:	0d1b      	lsrs	r3, r3, #20
 80145c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145c8:	051b      	lsls	r3, r3, #20
 80145ca:	429a      	cmp	r2, r3
 80145cc:	465d      	mov	r5, fp
 80145ce:	d1a3      	bne.n	8014518 <_strtod_l+0x9e8>
 80145d0:	4639      	mov	r1, r7
 80145d2:	4630      	mov	r0, r6
 80145d4:	f7ec fad8 	bl	8000b88 <__aeabi_d2iz>
 80145d8:	f7eb ffbc 	bl	8000554 <__aeabi_i2d>
 80145dc:	460b      	mov	r3, r1
 80145de:	4602      	mov	r2, r0
 80145e0:	4639      	mov	r1, r7
 80145e2:	4630      	mov	r0, r6
 80145e4:	f7eb fe68 	bl	80002b8 <__aeabi_dsub>
 80145e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145ea:	4606      	mov	r6, r0
 80145ec:	460f      	mov	r7, r1
 80145ee:	b933      	cbnz	r3, 80145fe <_strtod_l+0xace>
 80145f0:	f1ba 0f00 	cmp.w	sl, #0
 80145f4:	d103      	bne.n	80145fe <_strtod_l+0xace>
 80145f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80145fa:	2d00      	cmp	r5, #0
 80145fc:	d06d      	beq.n	80146da <_strtod_l+0xbaa>
 80145fe:	a30a      	add	r3, pc, #40	; (adr r3, 8014628 <_strtod_l+0xaf8>)
 8014600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014604:	4630      	mov	r0, r6
 8014606:	4639      	mov	r1, r7
 8014608:	f7ec fa80 	bl	8000b0c <__aeabi_dcmplt>
 801460c:	2800      	cmp	r0, #0
 801460e:	f47f acb8 	bne.w	8013f82 <_strtod_l+0x452>
 8014612:	a307      	add	r3, pc, #28	; (adr r3, 8014630 <_strtod_l+0xb00>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	4630      	mov	r0, r6
 801461a:	4639      	mov	r1, r7
 801461c:	f7ec fa94 	bl	8000b48 <__aeabi_dcmpgt>
 8014620:	2800      	cmp	r0, #0
 8014622:	f43f af79 	beq.w	8014518 <_strtod_l+0x9e8>
 8014626:	e4ac      	b.n	8013f82 <_strtod_l+0x452>
 8014628:	94a03595 	.word	0x94a03595
 801462c:	3fdfffff 	.word	0x3fdfffff
 8014630:	35afe535 	.word	0x35afe535
 8014634:	3fe00000 	.word	0x3fe00000
 8014638:	000fffff 	.word	0x000fffff
 801463c:	7ff00000 	.word	0x7ff00000
 8014640:	7fefffff 	.word	0x7fefffff
 8014644:	39500000 	.word	0x39500000
 8014648:	3ff00000 	.word	0x3ff00000
 801464c:	7fe00000 	.word	0x7fe00000
 8014650:	7c9fffff 	.word	0x7c9fffff
 8014654:	3fe00000 	.word	0x3fe00000
 8014658:	bff00000 	.word	0xbff00000
 801465c:	9b04      	ldr	r3, [sp, #16]
 801465e:	b333      	cbz	r3, 80146ae <_strtod_l+0xb7e>
 8014660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014662:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014666:	d822      	bhi.n	80146ae <_strtod_l+0xb7e>
 8014668:	a327      	add	r3, pc, #156	; (adr r3, 8014708 <_strtod_l+0xbd8>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	4630      	mov	r0, r6
 8014670:	4639      	mov	r1, r7
 8014672:	f7ec fa55 	bl	8000b20 <__aeabi_dcmple>
 8014676:	b1a0      	cbz	r0, 80146a2 <_strtod_l+0xb72>
 8014678:	4639      	mov	r1, r7
 801467a:	4630      	mov	r0, r6
 801467c:	f7ec faac 	bl	8000bd8 <__aeabi_d2uiz>
 8014680:	2800      	cmp	r0, #0
 8014682:	bf08      	it	eq
 8014684:	2001      	moveq	r0, #1
 8014686:	f7eb ff55 	bl	8000534 <__aeabi_ui2d>
 801468a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801468c:	4606      	mov	r6, r0
 801468e:	460f      	mov	r7, r1
 8014690:	bb03      	cbnz	r3, 80146d4 <_strtod_l+0xba4>
 8014692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014696:	9012      	str	r0, [sp, #72]	; 0x48
 8014698:	9313      	str	r3, [sp, #76]	; 0x4c
 801469a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801469e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80146a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80146aa:	1a9b      	subs	r3, r3, r2
 80146ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80146ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80146b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80146b6:	f002 f831 	bl	801671c <__ulp>
 80146ba:	4650      	mov	r0, sl
 80146bc:	ec53 2b10 	vmov	r2, r3, d0
 80146c0:	4659      	mov	r1, fp
 80146c2:	f7eb ffb1 	bl	8000628 <__aeabi_dmul>
 80146c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146ca:	f7eb fdf7 	bl	80002bc <__adddf3>
 80146ce:	4682      	mov	sl, r0
 80146d0:	468b      	mov	fp, r1
 80146d2:	e772      	b.n	80145ba <_strtod_l+0xa8a>
 80146d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80146d8:	e7df      	b.n	801469a <_strtod_l+0xb6a>
 80146da:	a30d      	add	r3, pc, #52	; (adr r3, 8014710 <_strtod_l+0xbe0>)
 80146dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e0:	f7ec fa14 	bl	8000b0c <__aeabi_dcmplt>
 80146e4:	e79c      	b.n	8014620 <_strtod_l+0xaf0>
 80146e6:	2300      	movs	r3, #0
 80146e8:	930d      	str	r3, [sp, #52]	; 0x34
 80146ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80146ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146ee:	6013      	str	r3, [r2, #0]
 80146f0:	f7ff ba61 	b.w	8013bb6 <_strtod_l+0x86>
 80146f4:	2b65      	cmp	r3, #101	; 0x65
 80146f6:	f04f 0200 	mov.w	r2, #0
 80146fa:	f43f ab4e 	beq.w	8013d9a <_strtod_l+0x26a>
 80146fe:	2101      	movs	r1, #1
 8014700:	4614      	mov	r4, r2
 8014702:	9104      	str	r1, [sp, #16]
 8014704:	f7ff bacb 	b.w	8013c9e <_strtod_l+0x16e>
 8014708:	ffc00000 	.word	0xffc00000
 801470c:	41dfffff 	.word	0x41dfffff
 8014710:	94a03595 	.word	0x94a03595
 8014714:	3fcfffff 	.word	0x3fcfffff

08014718 <_strtod_r>:
 8014718:	4b05      	ldr	r3, [pc, #20]	; (8014730 <_strtod_r+0x18>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	b410      	push	{r4}
 801471e:	6a1b      	ldr	r3, [r3, #32]
 8014720:	4c04      	ldr	r4, [pc, #16]	; (8014734 <_strtod_r+0x1c>)
 8014722:	2b00      	cmp	r3, #0
 8014724:	bf08      	it	eq
 8014726:	4623      	moveq	r3, r4
 8014728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801472c:	f7ff ba00 	b.w	8013b30 <_strtod_l>
 8014730:	2000000c 	.word	0x2000000c
 8014734:	20000070 	.word	0x20000070

08014738 <_strtol_l.isra.0>:
 8014738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801473c:	4680      	mov	r8, r0
 801473e:	4689      	mov	r9, r1
 8014740:	4692      	mov	sl, r2
 8014742:	461e      	mov	r6, r3
 8014744:	460f      	mov	r7, r1
 8014746:	463d      	mov	r5, r7
 8014748:	9808      	ldr	r0, [sp, #32]
 801474a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801474e:	f001 fc67 	bl	8016020 <__locale_ctype_ptr_l>
 8014752:	4420      	add	r0, r4
 8014754:	7843      	ldrb	r3, [r0, #1]
 8014756:	f013 0308 	ands.w	r3, r3, #8
 801475a:	d132      	bne.n	80147c2 <_strtol_l.isra.0+0x8a>
 801475c:	2c2d      	cmp	r4, #45	; 0x2d
 801475e:	d132      	bne.n	80147c6 <_strtol_l.isra.0+0x8e>
 8014760:	787c      	ldrb	r4, [r7, #1]
 8014762:	1cbd      	adds	r5, r7, #2
 8014764:	2201      	movs	r2, #1
 8014766:	2e00      	cmp	r6, #0
 8014768:	d05d      	beq.n	8014826 <_strtol_l.isra.0+0xee>
 801476a:	2e10      	cmp	r6, #16
 801476c:	d109      	bne.n	8014782 <_strtol_l.isra.0+0x4a>
 801476e:	2c30      	cmp	r4, #48	; 0x30
 8014770:	d107      	bne.n	8014782 <_strtol_l.isra.0+0x4a>
 8014772:	782b      	ldrb	r3, [r5, #0]
 8014774:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014778:	2b58      	cmp	r3, #88	; 0x58
 801477a:	d14f      	bne.n	801481c <_strtol_l.isra.0+0xe4>
 801477c:	786c      	ldrb	r4, [r5, #1]
 801477e:	2610      	movs	r6, #16
 8014780:	3502      	adds	r5, #2
 8014782:	2a00      	cmp	r2, #0
 8014784:	bf14      	ite	ne
 8014786:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801478a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801478e:	2700      	movs	r7, #0
 8014790:	fbb1 fcf6 	udiv	ip, r1, r6
 8014794:	4638      	mov	r0, r7
 8014796:	fb06 1e1c 	mls	lr, r6, ip, r1
 801479a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801479e:	2b09      	cmp	r3, #9
 80147a0:	d817      	bhi.n	80147d2 <_strtol_l.isra.0+0x9a>
 80147a2:	461c      	mov	r4, r3
 80147a4:	42a6      	cmp	r6, r4
 80147a6:	dd23      	ble.n	80147f0 <_strtol_l.isra.0+0xb8>
 80147a8:	1c7b      	adds	r3, r7, #1
 80147aa:	d007      	beq.n	80147bc <_strtol_l.isra.0+0x84>
 80147ac:	4584      	cmp	ip, r0
 80147ae:	d31c      	bcc.n	80147ea <_strtol_l.isra.0+0xb2>
 80147b0:	d101      	bne.n	80147b6 <_strtol_l.isra.0+0x7e>
 80147b2:	45a6      	cmp	lr, r4
 80147b4:	db19      	blt.n	80147ea <_strtol_l.isra.0+0xb2>
 80147b6:	fb00 4006 	mla	r0, r0, r6, r4
 80147ba:	2701      	movs	r7, #1
 80147bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147c0:	e7eb      	b.n	801479a <_strtol_l.isra.0+0x62>
 80147c2:	462f      	mov	r7, r5
 80147c4:	e7bf      	b.n	8014746 <_strtol_l.isra.0+0xe>
 80147c6:	2c2b      	cmp	r4, #43	; 0x2b
 80147c8:	bf04      	itt	eq
 80147ca:	1cbd      	addeq	r5, r7, #2
 80147cc:	787c      	ldrbeq	r4, [r7, #1]
 80147ce:	461a      	mov	r2, r3
 80147d0:	e7c9      	b.n	8014766 <_strtol_l.isra.0+0x2e>
 80147d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80147d6:	2b19      	cmp	r3, #25
 80147d8:	d801      	bhi.n	80147de <_strtol_l.isra.0+0xa6>
 80147da:	3c37      	subs	r4, #55	; 0x37
 80147dc:	e7e2      	b.n	80147a4 <_strtol_l.isra.0+0x6c>
 80147de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80147e2:	2b19      	cmp	r3, #25
 80147e4:	d804      	bhi.n	80147f0 <_strtol_l.isra.0+0xb8>
 80147e6:	3c57      	subs	r4, #87	; 0x57
 80147e8:	e7dc      	b.n	80147a4 <_strtol_l.isra.0+0x6c>
 80147ea:	f04f 37ff 	mov.w	r7, #4294967295
 80147ee:	e7e5      	b.n	80147bc <_strtol_l.isra.0+0x84>
 80147f0:	1c7b      	adds	r3, r7, #1
 80147f2:	d108      	bne.n	8014806 <_strtol_l.isra.0+0xce>
 80147f4:	2322      	movs	r3, #34	; 0x22
 80147f6:	f8c8 3000 	str.w	r3, [r8]
 80147fa:	4608      	mov	r0, r1
 80147fc:	f1ba 0f00 	cmp.w	sl, #0
 8014800:	d107      	bne.n	8014812 <_strtol_l.isra.0+0xda>
 8014802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014806:	b102      	cbz	r2, 801480a <_strtol_l.isra.0+0xd2>
 8014808:	4240      	negs	r0, r0
 801480a:	f1ba 0f00 	cmp.w	sl, #0
 801480e:	d0f8      	beq.n	8014802 <_strtol_l.isra.0+0xca>
 8014810:	b10f      	cbz	r7, 8014816 <_strtol_l.isra.0+0xde>
 8014812:	f105 39ff 	add.w	r9, r5, #4294967295
 8014816:	f8ca 9000 	str.w	r9, [sl]
 801481a:	e7f2      	b.n	8014802 <_strtol_l.isra.0+0xca>
 801481c:	2430      	movs	r4, #48	; 0x30
 801481e:	2e00      	cmp	r6, #0
 8014820:	d1af      	bne.n	8014782 <_strtol_l.isra.0+0x4a>
 8014822:	2608      	movs	r6, #8
 8014824:	e7ad      	b.n	8014782 <_strtol_l.isra.0+0x4a>
 8014826:	2c30      	cmp	r4, #48	; 0x30
 8014828:	d0a3      	beq.n	8014772 <_strtol_l.isra.0+0x3a>
 801482a:	260a      	movs	r6, #10
 801482c:	e7a9      	b.n	8014782 <_strtol_l.isra.0+0x4a>
	...

08014830 <_strtol_r>:
 8014830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014832:	4c06      	ldr	r4, [pc, #24]	; (801484c <_strtol_r+0x1c>)
 8014834:	4d06      	ldr	r5, [pc, #24]	; (8014850 <_strtol_r+0x20>)
 8014836:	6824      	ldr	r4, [r4, #0]
 8014838:	6a24      	ldr	r4, [r4, #32]
 801483a:	2c00      	cmp	r4, #0
 801483c:	bf08      	it	eq
 801483e:	462c      	moveq	r4, r5
 8014840:	9400      	str	r4, [sp, #0]
 8014842:	f7ff ff79 	bl	8014738 <_strtol_l.isra.0>
 8014846:	b003      	add	sp, #12
 8014848:	bd30      	pop	{r4, r5, pc}
 801484a:	bf00      	nop
 801484c:	2000000c 	.word	0x2000000c
 8014850:	20000070 	.word	0x20000070

08014854 <_vsiprintf_r>:
 8014854:	b500      	push	{lr}
 8014856:	b09b      	sub	sp, #108	; 0x6c
 8014858:	9100      	str	r1, [sp, #0]
 801485a:	9104      	str	r1, [sp, #16]
 801485c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014860:	9105      	str	r1, [sp, #20]
 8014862:	9102      	str	r1, [sp, #8]
 8014864:	4905      	ldr	r1, [pc, #20]	; (801487c <_vsiprintf_r+0x28>)
 8014866:	9103      	str	r1, [sp, #12]
 8014868:	4669      	mov	r1, sp
 801486a:	f002 f99b 	bl	8016ba4 <_svfiprintf_r>
 801486e:	9b00      	ldr	r3, [sp, #0]
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
 8014874:	b01b      	add	sp, #108	; 0x6c
 8014876:	f85d fb04 	ldr.w	pc, [sp], #4
 801487a:	bf00      	nop
 801487c:	ffff0208 	.word	0xffff0208

08014880 <vsiprintf>:
 8014880:	4613      	mov	r3, r2
 8014882:	460a      	mov	r2, r1
 8014884:	4601      	mov	r1, r0
 8014886:	4802      	ldr	r0, [pc, #8]	; (8014890 <vsiprintf+0x10>)
 8014888:	6800      	ldr	r0, [r0, #0]
 801488a:	f7ff bfe3 	b.w	8014854 <_vsiprintf_r>
 801488e:	bf00      	nop
 8014890:	2000000c 	.word	0x2000000c

08014894 <__swbuf_r>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	460e      	mov	r6, r1
 8014898:	4614      	mov	r4, r2
 801489a:	4605      	mov	r5, r0
 801489c:	b118      	cbz	r0, 80148a6 <__swbuf_r+0x12>
 801489e:	6983      	ldr	r3, [r0, #24]
 80148a0:	b90b      	cbnz	r3, 80148a6 <__swbuf_r+0x12>
 80148a2:	f001 f80d 	bl	80158c0 <__sinit>
 80148a6:	4b21      	ldr	r3, [pc, #132]	; (801492c <__swbuf_r+0x98>)
 80148a8:	429c      	cmp	r4, r3
 80148aa:	d12a      	bne.n	8014902 <__swbuf_r+0x6e>
 80148ac:	686c      	ldr	r4, [r5, #4]
 80148ae:	69a3      	ldr	r3, [r4, #24]
 80148b0:	60a3      	str	r3, [r4, #8]
 80148b2:	89a3      	ldrh	r3, [r4, #12]
 80148b4:	071a      	lsls	r2, r3, #28
 80148b6:	d52e      	bpl.n	8014916 <__swbuf_r+0x82>
 80148b8:	6923      	ldr	r3, [r4, #16]
 80148ba:	b363      	cbz	r3, 8014916 <__swbuf_r+0x82>
 80148bc:	6923      	ldr	r3, [r4, #16]
 80148be:	6820      	ldr	r0, [r4, #0]
 80148c0:	1ac0      	subs	r0, r0, r3
 80148c2:	6963      	ldr	r3, [r4, #20]
 80148c4:	b2f6      	uxtb	r6, r6
 80148c6:	4283      	cmp	r3, r0
 80148c8:	4637      	mov	r7, r6
 80148ca:	dc04      	bgt.n	80148d6 <__swbuf_r+0x42>
 80148cc:	4621      	mov	r1, r4
 80148ce:	4628      	mov	r0, r5
 80148d0:	f000 ff8c 	bl	80157ec <_fflush_r>
 80148d4:	bb28      	cbnz	r0, 8014922 <__swbuf_r+0x8e>
 80148d6:	68a3      	ldr	r3, [r4, #8]
 80148d8:	3b01      	subs	r3, #1
 80148da:	60a3      	str	r3, [r4, #8]
 80148dc:	6823      	ldr	r3, [r4, #0]
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	6022      	str	r2, [r4, #0]
 80148e2:	701e      	strb	r6, [r3, #0]
 80148e4:	6963      	ldr	r3, [r4, #20]
 80148e6:	3001      	adds	r0, #1
 80148e8:	4283      	cmp	r3, r0
 80148ea:	d004      	beq.n	80148f6 <__swbuf_r+0x62>
 80148ec:	89a3      	ldrh	r3, [r4, #12]
 80148ee:	07db      	lsls	r3, r3, #31
 80148f0:	d519      	bpl.n	8014926 <__swbuf_r+0x92>
 80148f2:	2e0a      	cmp	r6, #10
 80148f4:	d117      	bne.n	8014926 <__swbuf_r+0x92>
 80148f6:	4621      	mov	r1, r4
 80148f8:	4628      	mov	r0, r5
 80148fa:	f000 ff77 	bl	80157ec <_fflush_r>
 80148fe:	b190      	cbz	r0, 8014926 <__swbuf_r+0x92>
 8014900:	e00f      	b.n	8014922 <__swbuf_r+0x8e>
 8014902:	4b0b      	ldr	r3, [pc, #44]	; (8014930 <__swbuf_r+0x9c>)
 8014904:	429c      	cmp	r4, r3
 8014906:	d101      	bne.n	801490c <__swbuf_r+0x78>
 8014908:	68ac      	ldr	r4, [r5, #8]
 801490a:	e7d0      	b.n	80148ae <__swbuf_r+0x1a>
 801490c:	4b09      	ldr	r3, [pc, #36]	; (8014934 <__swbuf_r+0xa0>)
 801490e:	429c      	cmp	r4, r3
 8014910:	bf08      	it	eq
 8014912:	68ec      	ldreq	r4, [r5, #12]
 8014914:	e7cb      	b.n	80148ae <__swbuf_r+0x1a>
 8014916:	4621      	mov	r1, r4
 8014918:	4628      	mov	r0, r5
 801491a:	f000 f81f 	bl	801495c <__swsetup_r>
 801491e:	2800      	cmp	r0, #0
 8014920:	d0cc      	beq.n	80148bc <__swbuf_r+0x28>
 8014922:	f04f 37ff 	mov.w	r7, #4294967295
 8014926:	4638      	mov	r0, r7
 8014928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801492a:	bf00      	nop
 801492c:	08018250 	.word	0x08018250
 8014930:	08018270 	.word	0x08018270
 8014934:	08018230 	.word	0x08018230

08014938 <_write_r>:
 8014938:	b538      	push	{r3, r4, r5, lr}
 801493a:	4c07      	ldr	r4, [pc, #28]	; (8014958 <_write_r+0x20>)
 801493c:	4605      	mov	r5, r0
 801493e:	4608      	mov	r0, r1
 8014940:	4611      	mov	r1, r2
 8014942:	2200      	movs	r2, #0
 8014944:	6022      	str	r2, [r4, #0]
 8014946:	461a      	mov	r2, r3
 8014948:	f7ef fa04 	bl	8003d54 <_write>
 801494c:	1c43      	adds	r3, r0, #1
 801494e:	d102      	bne.n	8014956 <_write_r+0x1e>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	b103      	cbz	r3, 8014956 <_write_r+0x1e>
 8014954:	602b      	str	r3, [r5, #0]
 8014956:	bd38      	pop	{r3, r4, r5, pc}
 8014958:	2003be04 	.word	0x2003be04

0801495c <__swsetup_r>:
 801495c:	4b32      	ldr	r3, [pc, #200]	; (8014a28 <__swsetup_r+0xcc>)
 801495e:	b570      	push	{r4, r5, r6, lr}
 8014960:	681d      	ldr	r5, [r3, #0]
 8014962:	4606      	mov	r6, r0
 8014964:	460c      	mov	r4, r1
 8014966:	b125      	cbz	r5, 8014972 <__swsetup_r+0x16>
 8014968:	69ab      	ldr	r3, [r5, #24]
 801496a:	b913      	cbnz	r3, 8014972 <__swsetup_r+0x16>
 801496c:	4628      	mov	r0, r5
 801496e:	f000 ffa7 	bl	80158c0 <__sinit>
 8014972:	4b2e      	ldr	r3, [pc, #184]	; (8014a2c <__swsetup_r+0xd0>)
 8014974:	429c      	cmp	r4, r3
 8014976:	d10f      	bne.n	8014998 <__swsetup_r+0x3c>
 8014978:	686c      	ldr	r4, [r5, #4]
 801497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801497e:	b29a      	uxth	r2, r3
 8014980:	0715      	lsls	r5, r2, #28
 8014982:	d42c      	bmi.n	80149de <__swsetup_r+0x82>
 8014984:	06d0      	lsls	r0, r2, #27
 8014986:	d411      	bmi.n	80149ac <__swsetup_r+0x50>
 8014988:	2209      	movs	r2, #9
 801498a:	6032      	str	r2, [r6, #0]
 801498c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014990:	81a3      	strh	r3, [r4, #12]
 8014992:	f04f 30ff 	mov.w	r0, #4294967295
 8014996:	e03e      	b.n	8014a16 <__swsetup_r+0xba>
 8014998:	4b25      	ldr	r3, [pc, #148]	; (8014a30 <__swsetup_r+0xd4>)
 801499a:	429c      	cmp	r4, r3
 801499c:	d101      	bne.n	80149a2 <__swsetup_r+0x46>
 801499e:	68ac      	ldr	r4, [r5, #8]
 80149a0:	e7eb      	b.n	801497a <__swsetup_r+0x1e>
 80149a2:	4b24      	ldr	r3, [pc, #144]	; (8014a34 <__swsetup_r+0xd8>)
 80149a4:	429c      	cmp	r4, r3
 80149a6:	bf08      	it	eq
 80149a8:	68ec      	ldreq	r4, [r5, #12]
 80149aa:	e7e6      	b.n	801497a <__swsetup_r+0x1e>
 80149ac:	0751      	lsls	r1, r2, #29
 80149ae:	d512      	bpl.n	80149d6 <__swsetup_r+0x7a>
 80149b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149b2:	b141      	cbz	r1, 80149c6 <__swsetup_r+0x6a>
 80149b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149b8:	4299      	cmp	r1, r3
 80149ba:	d002      	beq.n	80149c2 <__swsetup_r+0x66>
 80149bc:	4630      	mov	r0, r6
 80149be:	f001 ffef 	bl	80169a0 <_free_r>
 80149c2:	2300      	movs	r3, #0
 80149c4:	6363      	str	r3, [r4, #52]	; 0x34
 80149c6:	89a3      	ldrh	r3, [r4, #12]
 80149c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80149cc:	81a3      	strh	r3, [r4, #12]
 80149ce:	2300      	movs	r3, #0
 80149d0:	6063      	str	r3, [r4, #4]
 80149d2:	6923      	ldr	r3, [r4, #16]
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	f043 0308 	orr.w	r3, r3, #8
 80149dc:	81a3      	strh	r3, [r4, #12]
 80149de:	6923      	ldr	r3, [r4, #16]
 80149e0:	b94b      	cbnz	r3, 80149f6 <__swsetup_r+0x9a>
 80149e2:	89a3      	ldrh	r3, [r4, #12]
 80149e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80149e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149ec:	d003      	beq.n	80149f6 <__swsetup_r+0x9a>
 80149ee:	4621      	mov	r1, r4
 80149f0:	4630      	mov	r0, r6
 80149f2:	f001 fb6d 	bl	80160d0 <__smakebuf_r>
 80149f6:	89a2      	ldrh	r2, [r4, #12]
 80149f8:	f012 0301 	ands.w	r3, r2, #1
 80149fc:	d00c      	beq.n	8014a18 <__swsetup_r+0xbc>
 80149fe:	2300      	movs	r3, #0
 8014a00:	60a3      	str	r3, [r4, #8]
 8014a02:	6963      	ldr	r3, [r4, #20]
 8014a04:	425b      	negs	r3, r3
 8014a06:	61a3      	str	r3, [r4, #24]
 8014a08:	6923      	ldr	r3, [r4, #16]
 8014a0a:	b953      	cbnz	r3, 8014a22 <__swsetup_r+0xc6>
 8014a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014a14:	d1ba      	bne.n	801498c <__swsetup_r+0x30>
 8014a16:	bd70      	pop	{r4, r5, r6, pc}
 8014a18:	0792      	lsls	r2, r2, #30
 8014a1a:	bf58      	it	pl
 8014a1c:	6963      	ldrpl	r3, [r4, #20]
 8014a1e:	60a3      	str	r3, [r4, #8]
 8014a20:	e7f2      	b.n	8014a08 <__swsetup_r+0xac>
 8014a22:	2000      	movs	r0, #0
 8014a24:	e7f7      	b.n	8014a16 <__swsetup_r+0xba>
 8014a26:	bf00      	nop
 8014a28:	2000000c 	.word	0x2000000c
 8014a2c:	08018250 	.word	0x08018250
 8014a30:	08018270 	.word	0x08018270
 8014a34:	08018230 	.word	0x08018230

08014a38 <_close_r>:
 8014a38:	b538      	push	{r3, r4, r5, lr}
 8014a3a:	4c06      	ldr	r4, [pc, #24]	; (8014a54 <_close_r+0x1c>)
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	4605      	mov	r5, r0
 8014a40:	4608      	mov	r0, r1
 8014a42:	6023      	str	r3, [r4, #0]
 8014a44:	f7f0 feed 	bl	8005822 <_close>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d102      	bne.n	8014a52 <_close_r+0x1a>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	b103      	cbz	r3, 8014a52 <_close_r+0x1a>
 8014a50:	602b      	str	r3, [r5, #0]
 8014a52:	bd38      	pop	{r3, r4, r5, pc}
 8014a54:	2003be04 	.word	0x2003be04

08014a58 <quorem>:
 8014a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5c:	6903      	ldr	r3, [r0, #16]
 8014a5e:	690c      	ldr	r4, [r1, #16]
 8014a60:	42a3      	cmp	r3, r4
 8014a62:	4680      	mov	r8, r0
 8014a64:	f2c0 8082 	blt.w	8014b6c <quorem+0x114>
 8014a68:	3c01      	subs	r4, #1
 8014a6a:	f101 0714 	add.w	r7, r1, #20
 8014a6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014a72:	f100 0614 	add.w	r6, r0, #20
 8014a76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014a7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014a7e:	eb06 030c 	add.w	r3, r6, ip
 8014a82:	3501      	adds	r5, #1
 8014a84:	eb07 090c 	add.w	r9, r7, ip
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8014a8e:	b395      	cbz	r5, 8014af6 <quorem+0x9e>
 8014a90:	f04f 0a00 	mov.w	sl, #0
 8014a94:	4638      	mov	r0, r7
 8014a96:	46b6      	mov	lr, r6
 8014a98:	46d3      	mov	fp, sl
 8014a9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8014a9e:	b293      	uxth	r3, r2
 8014aa0:	fb05 a303 	mla	r3, r5, r3, sl
 8014aa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	ebab 0303 	sub.w	r3, fp, r3
 8014aae:	0c12      	lsrs	r2, r2, #16
 8014ab0:	f8de b000 	ldr.w	fp, [lr]
 8014ab4:	fb05 a202 	mla	r2, r5, r2, sl
 8014ab8:	fa13 f38b 	uxtah	r3, r3, fp
 8014abc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014ac0:	fa1f fb82 	uxth.w	fp, r2
 8014ac4:	f8de 2000 	ldr.w	r2, [lr]
 8014ac8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ad6:	4581      	cmp	r9, r0
 8014ad8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014adc:	f84e 3b04 	str.w	r3, [lr], #4
 8014ae0:	d2db      	bcs.n	8014a9a <quorem+0x42>
 8014ae2:	f856 300c 	ldr.w	r3, [r6, ip]
 8014ae6:	b933      	cbnz	r3, 8014af6 <quorem+0x9e>
 8014ae8:	9b01      	ldr	r3, [sp, #4]
 8014aea:	3b04      	subs	r3, #4
 8014aec:	429e      	cmp	r6, r3
 8014aee:	461a      	mov	r2, r3
 8014af0:	d330      	bcc.n	8014b54 <quorem+0xfc>
 8014af2:	f8c8 4010 	str.w	r4, [r8, #16]
 8014af6:	4640      	mov	r0, r8
 8014af8:	f001 fd98 	bl	801662c <__mcmp>
 8014afc:	2800      	cmp	r0, #0
 8014afe:	db25      	blt.n	8014b4c <quorem+0xf4>
 8014b00:	3501      	adds	r5, #1
 8014b02:	4630      	mov	r0, r6
 8014b04:	f04f 0c00 	mov.w	ip, #0
 8014b08:	f857 2b04 	ldr.w	r2, [r7], #4
 8014b0c:	f8d0 e000 	ldr.w	lr, [r0]
 8014b10:	b293      	uxth	r3, r2
 8014b12:	ebac 0303 	sub.w	r3, ip, r3
 8014b16:	0c12      	lsrs	r2, r2, #16
 8014b18:	fa13 f38e 	uxtah	r3, r3, lr
 8014b1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b2a:	45b9      	cmp	r9, r7
 8014b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014b30:	f840 3b04 	str.w	r3, [r0], #4
 8014b34:	d2e8      	bcs.n	8014b08 <quorem+0xb0>
 8014b36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014b3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014b3e:	b92a      	cbnz	r2, 8014b4c <quorem+0xf4>
 8014b40:	3b04      	subs	r3, #4
 8014b42:	429e      	cmp	r6, r3
 8014b44:	461a      	mov	r2, r3
 8014b46:	d30b      	bcc.n	8014b60 <quorem+0x108>
 8014b48:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	b003      	add	sp, #12
 8014b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b54:	6812      	ldr	r2, [r2, #0]
 8014b56:	3b04      	subs	r3, #4
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	d1ca      	bne.n	8014af2 <quorem+0x9a>
 8014b5c:	3c01      	subs	r4, #1
 8014b5e:	e7c5      	b.n	8014aec <quorem+0x94>
 8014b60:	6812      	ldr	r2, [r2, #0]
 8014b62:	3b04      	subs	r3, #4
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	d1ef      	bne.n	8014b48 <quorem+0xf0>
 8014b68:	3c01      	subs	r4, #1
 8014b6a:	e7ea      	b.n	8014b42 <quorem+0xea>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	e7ee      	b.n	8014b4e <quorem+0xf6>

08014b70 <_dtoa_r>:
 8014b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b74:	ec57 6b10 	vmov	r6, r7, d0
 8014b78:	b097      	sub	sp, #92	; 0x5c
 8014b7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014b7c:	9106      	str	r1, [sp, #24]
 8014b7e:	4604      	mov	r4, r0
 8014b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b82:	9312      	str	r3, [sp, #72]	; 0x48
 8014b84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014b88:	e9cd 6700 	strd	r6, r7, [sp]
 8014b8c:	b93d      	cbnz	r5, 8014b9e <_dtoa_r+0x2e>
 8014b8e:	2010      	movs	r0, #16
 8014b90:	f001 fade 	bl	8016150 <malloc>
 8014b94:	6260      	str	r0, [r4, #36]	; 0x24
 8014b96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014b9a:	6005      	str	r5, [r0, #0]
 8014b9c:	60c5      	str	r5, [r0, #12]
 8014b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ba0:	6819      	ldr	r1, [r3, #0]
 8014ba2:	b151      	cbz	r1, 8014bba <_dtoa_r+0x4a>
 8014ba4:	685a      	ldr	r2, [r3, #4]
 8014ba6:	604a      	str	r2, [r1, #4]
 8014ba8:	2301      	movs	r3, #1
 8014baa:	4093      	lsls	r3, r2
 8014bac:	608b      	str	r3, [r1, #8]
 8014bae:	4620      	mov	r0, r4
 8014bb0:	f001 fb1c 	bl	80161ec <_Bfree>
 8014bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	601a      	str	r2, [r3, #0]
 8014bba:	1e3b      	subs	r3, r7, #0
 8014bbc:	bfbb      	ittet	lt
 8014bbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014bc2:	9301      	strlt	r3, [sp, #4]
 8014bc4:	2300      	movge	r3, #0
 8014bc6:	2201      	movlt	r2, #1
 8014bc8:	bfac      	ite	ge
 8014bca:	f8c8 3000 	strge.w	r3, [r8]
 8014bce:	f8c8 2000 	strlt.w	r2, [r8]
 8014bd2:	4baf      	ldr	r3, [pc, #700]	; (8014e90 <_dtoa_r+0x320>)
 8014bd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bd8:	ea33 0308 	bics.w	r3, r3, r8
 8014bdc:	d114      	bne.n	8014c08 <_dtoa_r+0x98>
 8014bde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014be0:	f242 730f 	movw	r3, #9999	; 0x270f
 8014be4:	6013      	str	r3, [r2, #0]
 8014be6:	9b00      	ldr	r3, [sp, #0]
 8014be8:	b923      	cbnz	r3, 8014bf4 <_dtoa_r+0x84>
 8014bea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	f000 8542 	beq.w	8015678 <_dtoa_r+0xb08>
 8014bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014ea4 <_dtoa_r+0x334>
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f000 8544 	beq.w	8015688 <_dtoa_r+0xb18>
 8014c00:	f10b 0303 	add.w	r3, fp, #3
 8014c04:	f000 bd3e 	b.w	8015684 <_dtoa_r+0xb14>
 8014c08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	2300      	movs	r3, #0
 8014c10:	4630      	mov	r0, r6
 8014c12:	4639      	mov	r1, r7
 8014c14:	f7eb ff70 	bl	8000af8 <__aeabi_dcmpeq>
 8014c18:	4681      	mov	r9, r0
 8014c1a:	b168      	cbz	r0, 8014c38 <_dtoa_r+0xc8>
 8014c1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c1e:	2301      	movs	r3, #1
 8014c20:	6013      	str	r3, [r2, #0]
 8014c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 8524 	beq.w	8015672 <_dtoa_r+0xb02>
 8014c2a:	4b9a      	ldr	r3, [pc, #616]	; (8014e94 <_dtoa_r+0x324>)
 8014c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014c32:	6013      	str	r3, [r2, #0]
 8014c34:	f000 bd28 	b.w	8015688 <_dtoa_r+0xb18>
 8014c38:	aa14      	add	r2, sp, #80	; 0x50
 8014c3a:	a915      	add	r1, sp, #84	; 0x54
 8014c3c:	ec47 6b10 	vmov	d0, r6, r7
 8014c40:	4620      	mov	r0, r4
 8014c42:	f001 fde1 	bl	8016808 <__d2b>
 8014c46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014c4a:	9004      	str	r0, [sp, #16]
 8014c4c:	2d00      	cmp	r5, #0
 8014c4e:	d07c      	beq.n	8014d4a <_dtoa_r+0x1da>
 8014c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014c58:	46b2      	mov	sl, r6
 8014c5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014c62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014c66:	2200      	movs	r2, #0
 8014c68:	4b8b      	ldr	r3, [pc, #556]	; (8014e98 <_dtoa_r+0x328>)
 8014c6a:	4650      	mov	r0, sl
 8014c6c:	4659      	mov	r1, fp
 8014c6e:	f7eb fb23 	bl	80002b8 <__aeabi_dsub>
 8014c72:	a381      	add	r3, pc, #516	; (adr r3, 8014e78 <_dtoa_r+0x308>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c78:	f7eb fcd6 	bl	8000628 <__aeabi_dmul>
 8014c7c:	a380      	add	r3, pc, #512	; (adr r3, 8014e80 <_dtoa_r+0x310>)
 8014c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c82:	f7eb fb1b 	bl	80002bc <__adddf3>
 8014c86:	4606      	mov	r6, r0
 8014c88:	4628      	mov	r0, r5
 8014c8a:	460f      	mov	r7, r1
 8014c8c:	f7eb fc62 	bl	8000554 <__aeabi_i2d>
 8014c90:	a37d      	add	r3, pc, #500	; (adr r3, 8014e88 <_dtoa_r+0x318>)
 8014c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c96:	f7eb fcc7 	bl	8000628 <__aeabi_dmul>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	4639      	mov	r1, r7
 8014ca2:	f7eb fb0b 	bl	80002bc <__adddf3>
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	460f      	mov	r7, r1
 8014caa:	f7eb ff6d 	bl	8000b88 <__aeabi_d2iz>
 8014cae:	2200      	movs	r2, #0
 8014cb0:	4682      	mov	sl, r0
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	4639      	mov	r1, r7
 8014cb8:	f7eb ff28 	bl	8000b0c <__aeabi_dcmplt>
 8014cbc:	b148      	cbz	r0, 8014cd2 <_dtoa_r+0x162>
 8014cbe:	4650      	mov	r0, sl
 8014cc0:	f7eb fc48 	bl	8000554 <__aeabi_i2d>
 8014cc4:	4632      	mov	r2, r6
 8014cc6:	463b      	mov	r3, r7
 8014cc8:	f7eb ff16 	bl	8000af8 <__aeabi_dcmpeq>
 8014ccc:	b908      	cbnz	r0, 8014cd2 <_dtoa_r+0x162>
 8014cce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cd2:	f1ba 0f16 	cmp.w	sl, #22
 8014cd6:	d859      	bhi.n	8014d8c <_dtoa_r+0x21c>
 8014cd8:	4970      	ldr	r1, [pc, #448]	; (8014e9c <_dtoa_r+0x32c>)
 8014cda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ce6:	f7eb ff2f 	bl	8000b48 <__aeabi_dcmpgt>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d050      	beq.n	8014d90 <_dtoa_r+0x220>
 8014cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014cf8:	1b5d      	subs	r5, r3, r5
 8014cfa:	f1b5 0801 	subs.w	r8, r5, #1
 8014cfe:	bf49      	itett	mi
 8014d00:	f1c5 0301 	rsbmi	r3, r5, #1
 8014d04:	2300      	movpl	r3, #0
 8014d06:	9305      	strmi	r3, [sp, #20]
 8014d08:	f04f 0800 	movmi.w	r8, #0
 8014d0c:	bf58      	it	pl
 8014d0e:	9305      	strpl	r3, [sp, #20]
 8014d10:	f1ba 0f00 	cmp.w	sl, #0
 8014d14:	db3e      	blt.n	8014d94 <_dtoa_r+0x224>
 8014d16:	2300      	movs	r3, #0
 8014d18:	44d0      	add	r8, sl
 8014d1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014d1e:	9307      	str	r3, [sp, #28]
 8014d20:	9b06      	ldr	r3, [sp, #24]
 8014d22:	2b09      	cmp	r3, #9
 8014d24:	f200 8090 	bhi.w	8014e48 <_dtoa_r+0x2d8>
 8014d28:	2b05      	cmp	r3, #5
 8014d2a:	bfc4      	itt	gt
 8014d2c:	3b04      	subgt	r3, #4
 8014d2e:	9306      	strgt	r3, [sp, #24]
 8014d30:	9b06      	ldr	r3, [sp, #24]
 8014d32:	f1a3 0302 	sub.w	r3, r3, #2
 8014d36:	bfcc      	ite	gt
 8014d38:	2500      	movgt	r5, #0
 8014d3a:	2501      	movle	r5, #1
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	f200 808f 	bhi.w	8014e60 <_dtoa_r+0x2f0>
 8014d42:	e8df f003 	tbb	[pc, r3]
 8014d46:	7f7d      	.short	0x7f7d
 8014d48:	7131      	.short	0x7131
 8014d4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014d4e:	441d      	add	r5, r3
 8014d50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014d54:	2820      	cmp	r0, #32
 8014d56:	dd13      	ble.n	8014d80 <_dtoa_r+0x210>
 8014d58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014d5c:	9b00      	ldr	r3, [sp, #0]
 8014d5e:	fa08 f800 	lsl.w	r8, r8, r0
 8014d62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014d66:	fa23 f000 	lsr.w	r0, r3, r0
 8014d6a:	ea48 0000 	orr.w	r0, r8, r0
 8014d6e:	f7eb fbe1 	bl	8000534 <__aeabi_ui2d>
 8014d72:	2301      	movs	r3, #1
 8014d74:	4682      	mov	sl, r0
 8014d76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014d7a:	3d01      	subs	r5, #1
 8014d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d7e:	e772      	b.n	8014c66 <_dtoa_r+0xf6>
 8014d80:	9b00      	ldr	r3, [sp, #0]
 8014d82:	f1c0 0020 	rsb	r0, r0, #32
 8014d86:	fa03 f000 	lsl.w	r0, r3, r0
 8014d8a:	e7f0      	b.n	8014d6e <_dtoa_r+0x1fe>
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e7b1      	b.n	8014cf4 <_dtoa_r+0x184>
 8014d90:	900f      	str	r0, [sp, #60]	; 0x3c
 8014d92:	e7b0      	b.n	8014cf6 <_dtoa_r+0x186>
 8014d94:	9b05      	ldr	r3, [sp, #20]
 8014d96:	eba3 030a 	sub.w	r3, r3, sl
 8014d9a:	9305      	str	r3, [sp, #20]
 8014d9c:	f1ca 0300 	rsb	r3, sl, #0
 8014da0:	9307      	str	r3, [sp, #28]
 8014da2:	2300      	movs	r3, #0
 8014da4:	930e      	str	r3, [sp, #56]	; 0x38
 8014da6:	e7bb      	b.n	8014d20 <_dtoa_r+0x1b0>
 8014da8:	2301      	movs	r3, #1
 8014daa:	930a      	str	r3, [sp, #40]	; 0x28
 8014dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	dd59      	ble.n	8014e66 <_dtoa_r+0x2f6>
 8014db2:	9302      	str	r3, [sp, #8]
 8014db4:	4699      	mov	r9, r3
 8014db6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014db8:	2200      	movs	r2, #0
 8014dba:	6072      	str	r2, [r6, #4]
 8014dbc:	2204      	movs	r2, #4
 8014dbe:	f102 0014 	add.w	r0, r2, #20
 8014dc2:	4298      	cmp	r0, r3
 8014dc4:	6871      	ldr	r1, [r6, #4]
 8014dc6:	d953      	bls.n	8014e70 <_dtoa_r+0x300>
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f001 f9db 	bl	8016184 <_Balloc>
 8014dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dd0:	6030      	str	r0, [r6, #0]
 8014dd2:	f1b9 0f0e 	cmp.w	r9, #14
 8014dd6:	f8d3 b000 	ldr.w	fp, [r3]
 8014dda:	f200 80e6 	bhi.w	8014faa <_dtoa_r+0x43a>
 8014dde:	2d00      	cmp	r5, #0
 8014de0:	f000 80e3 	beq.w	8014faa <_dtoa_r+0x43a>
 8014de4:	ed9d 7b00 	vldr	d7, [sp]
 8014de8:	f1ba 0f00 	cmp.w	sl, #0
 8014dec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014df0:	dd74      	ble.n	8014edc <_dtoa_r+0x36c>
 8014df2:	4a2a      	ldr	r2, [pc, #168]	; (8014e9c <_dtoa_r+0x32c>)
 8014df4:	f00a 030f 	and.w	r3, sl, #15
 8014df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014dfc:	ed93 7b00 	vldr	d7, [r3]
 8014e00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014e04:	06f0      	lsls	r0, r6, #27
 8014e06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014e0a:	d565      	bpl.n	8014ed8 <_dtoa_r+0x368>
 8014e0c:	4b24      	ldr	r3, [pc, #144]	; (8014ea0 <_dtoa_r+0x330>)
 8014e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e16:	f7eb fd31 	bl	800087c <__aeabi_ddiv>
 8014e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8014e1e:	f006 060f 	and.w	r6, r6, #15
 8014e22:	2503      	movs	r5, #3
 8014e24:	4f1e      	ldr	r7, [pc, #120]	; (8014ea0 <_dtoa_r+0x330>)
 8014e26:	e04c      	b.n	8014ec2 <_dtoa_r+0x352>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e2e:	4453      	add	r3, sl
 8014e30:	f103 0901 	add.w	r9, r3, #1
 8014e34:	9302      	str	r3, [sp, #8]
 8014e36:	464b      	mov	r3, r9
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	bfb8      	it	lt
 8014e3c:	2301      	movlt	r3, #1
 8014e3e:	e7ba      	b.n	8014db6 <_dtoa_r+0x246>
 8014e40:	2300      	movs	r3, #0
 8014e42:	e7b2      	b.n	8014daa <_dtoa_r+0x23a>
 8014e44:	2300      	movs	r3, #0
 8014e46:	e7f0      	b.n	8014e2a <_dtoa_r+0x2ba>
 8014e48:	2501      	movs	r5, #1
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	9306      	str	r3, [sp, #24]
 8014e4e:	950a      	str	r5, [sp, #40]	; 0x28
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295
 8014e54:	9302      	str	r3, [sp, #8]
 8014e56:	4699      	mov	r9, r3
 8014e58:	2200      	movs	r2, #0
 8014e5a:	2312      	movs	r3, #18
 8014e5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e5e:	e7aa      	b.n	8014db6 <_dtoa_r+0x246>
 8014e60:	2301      	movs	r3, #1
 8014e62:	930a      	str	r3, [sp, #40]	; 0x28
 8014e64:	e7f4      	b.n	8014e50 <_dtoa_r+0x2e0>
 8014e66:	2301      	movs	r3, #1
 8014e68:	9302      	str	r3, [sp, #8]
 8014e6a:	4699      	mov	r9, r3
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	e7f5      	b.n	8014e5c <_dtoa_r+0x2ec>
 8014e70:	3101      	adds	r1, #1
 8014e72:	6071      	str	r1, [r6, #4]
 8014e74:	0052      	lsls	r2, r2, #1
 8014e76:	e7a2      	b.n	8014dbe <_dtoa_r+0x24e>
 8014e78:	636f4361 	.word	0x636f4361
 8014e7c:	3fd287a7 	.word	0x3fd287a7
 8014e80:	8b60c8b3 	.word	0x8b60c8b3
 8014e84:	3fc68a28 	.word	0x3fc68a28
 8014e88:	509f79fb 	.word	0x509f79fb
 8014e8c:	3fd34413 	.word	0x3fd34413
 8014e90:	7ff00000 	.word	0x7ff00000
 8014e94:	080183c4 	.word	0x080183c4
 8014e98:	3ff80000 	.word	0x3ff80000
 8014e9c:	080182c8 	.word	0x080182c8
 8014ea0:	080182a0 	.word	0x080182a0
 8014ea4:	08018229 	.word	0x08018229
 8014ea8:	07f1      	lsls	r1, r6, #31
 8014eaa:	d508      	bpl.n	8014ebe <_dtoa_r+0x34e>
 8014eac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014eb4:	f7eb fbb8 	bl	8000628 <__aeabi_dmul>
 8014eb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ebc:	3501      	adds	r5, #1
 8014ebe:	1076      	asrs	r6, r6, #1
 8014ec0:	3708      	adds	r7, #8
 8014ec2:	2e00      	cmp	r6, #0
 8014ec4:	d1f0      	bne.n	8014ea8 <_dtoa_r+0x338>
 8014ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ece:	f7eb fcd5 	bl	800087c <__aeabi_ddiv>
 8014ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8014ed6:	e01a      	b.n	8014f0e <_dtoa_r+0x39e>
 8014ed8:	2502      	movs	r5, #2
 8014eda:	e7a3      	b.n	8014e24 <_dtoa_r+0x2b4>
 8014edc:	f000 80a0 	beq.w	8015020 <_dtoa_r+0x4b0>
 8014ee0:	f1ca 0600 	rsb	r6, sl, #0
 8014ee4:	4b9f      	ldr	r3, [pc, #636]	; (8015164 <_dtoa_r+0x5f4>)
 8014ee6:	4fa0      	ldr	r7, [pc, #640]	; (8015168 <_dtoa_r+0x5f8>)
 8014ee8:	f006 020f 	and.w	r2, r6, #15
 8014eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ef8:	f7eb fb96 	bl	8000628 <__aeabi_dmul>
 8014efc:	e9cd 0100 	strd	r0, r1, [sp]
 8014f00:	1136      	asrs	r6, r6, #4
 8014f02:	2300      	movs	r3, #0
 8014f04:	2502      	movs	r5, #2
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	d17f      	bne.n	801500a <_dtoa_r+0x49a>
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d1e1      	bne.n	8014ed2 <_dtoa_r+0x362>
 8014f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f000 8087 	beq.w	8015024 <_dtoa_r+0x4b4>
 8014f16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	4b93      	ldr	r3, [pc, #588]	; (801516c <_dtoa_r+0x5fc>)
 8014f1e:	4630      	mov	r0, r6
 8014f20:	4639      	mov	r1, r7
 8014f22:	f7eb fdf3 	bl	8000b0c <__aeabi_dcmplt>
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d07c      	beq.n	8015024 <_dtoa_r+0x4b4>
 8014f2a:	f1b9 0f00 	cmp.w	r9, #0
 8014f2e:	d079      	beq.n	8015024 <_dtoa_r+0x4b4>
 8014f30:	9b02      	ldr	r3, [sp, #8]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	dd35      	ble.n	8014fa2 <_dtoa_r+0x432>
 8014f36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014f3a:	9308      	str	r3, [sp, #32]
 8014f3c:	4639      	mov	r1, r7
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4b8b      	ldr	r3, [pc, #556]	; (8015170 <_dtoa_r+0x600>)
 8014f42:	4630      	mov	r0, r6
 8014f44:	f7eb fb70 	bl	8000628 <__aeabi_dmul>
 8014f48:	e9cd 0100 	strd	r0, r1, [sp]
 8014f4c:	9f02      	ldr	r7, [sp, #8]
 8014f4e:	3501      	adds	r5, #1
 8014f50:	4628      	mov	r0, r5
 8014f52:	f7eb faff 	bl	8000554 <__aeabi_i2d>
 8014f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f5a:	f7eb fb65 	bl	8000628 <__aeabi_dmul>
 8014f5e:	2200      	movs	r2, #0
 8014f60:	4b84      	ldr	r3, [pc, #528]	; (8015174 <_dtoa_r+0x604>)
 8014f62:	f7eb f9ab 	bl	80002bc <__adddf3>
 8014f66:	4605      	mov	r5, r0
 8014f68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014f6c:	2f00      	cmp	r7, #0
 8014f6e:	d15d      	bne.n	801502c <_dtoa_r+0x4bc>
 8014f70:	2200      	movs	r2, #0
 8014f72:	4b81      	ldr	r3, [pc, #516]	; (8015178 <_dtoa_r+0x608>)
 8014f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f78:	f7eb f99e 	bl	80002b8 <__aeabi_dsub>
 8014f7c:	462a      	mov	r2, r5
 8014f7e:	4633      	mov	r3, r6
 8014f80:	e9cd 0100 	strd	r0, r1, [sp]
 8014f84:	f7eb fde0 	bl	8000b48 <__aeabi_dcmpgt>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	f040 8288 	bne.w	801549e <_dtoa_r+0x92e>
 8014f8e:	462a      	mov	r2, r5
 8014f90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f98:	f7eb fdb8 	bl	8000b0c <__aeabi_dcmplt>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	f040 827c 	bne.w	801549a <_dtoa_r+0x92a>
 8014fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8014faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	f2c0 8150 	blt.w	8015252 <_dtoa_r+0x6e2>
 8014fb2:	f1ba 0f0e 	cmp.w	sl, #14
 8014fb6:	f300 814c 	bgt.w	8015252 <_dtoa_r+0x6e2>
 8014fba:	4b6a      	ldr	r3, [pc, #424]	; (8015164 <_dtoa_r+0x5f4>)
 8014fbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fc0:	ed93 7b00 	vldr	d7, [r3]
 8014fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014fcc:	f280 80d8 	bge.w	8015180 <_dtoa_r+0x610>
 8014fd0:	f1b9 0f00 	cmp.w	r9, #0
 8014fd4:	f300 80d4 	bgt.w	8015180 <_dtoa_r+0x610>
 8014fd8:	f040 825e 	bne.w	8015498 <_dtoa_r+0x928>
 8014fdc:	2200      	movs	r2, #0
 8014fde:	4b66      	ldr	r3, [pc, #408]	; (8015178 <_dtoa_r+0x608>)
 8014fe0:	ec51 0b17 	vmov	r0, r1, d7
 8014fe4:	f7eb fb20 	bl	8000628 <__aeabi_dmul>
 8014fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fec:	f7eb fda2 	bl	8000b34 <__aeabi_dcmpge>
 8014ff0:	464f      	mov	r7, r9
 8014ff2:	464e      	mov	r6, r9
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	f040 8234 	bne.w	8015462 <_dtoa_r+0x8f2>
 8014ffa:	2331      	movs	r3, #49	; 0x31
 8014ffc:	f10b 0501 	add.w	r5, fp, #1
 8015000:	f88b 3000 	strb.w	r3, [fp]
 8015004:	f10a 0a01 	add.w	sl, sl, #1
 8015008:	e22f      	b.n	801546a <_dtoa_r+0x8fa>
 801500a:	07f2      	lsls	r2, r6, #31
 801500c:	d505      	bpl.n	801501a <_dtoa_r+0x4aa>
 801500e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015012:	f7eb fb09 	bl	8000628 <__aeabi_dmul>
 8015016:	3501      	adds	r5, #1
 8015018:	2301      	movs	r3, #1
 801501a:	1076      	asrs	r6, r6, #1
 801501c:	3708      	adds	r7, #8
 801501e:	e772      	b.n	8014f06 <_dtoa_r+0x396>
 8015020:	2502      	movs	r5, #2
 8015022:	e774      	b.n	8014f0e <_dtoa_r+0x39e>
 8015024:	f8cd a020 	str.w	sl, [sp, #32]
 8015028:	464f      	mov	r7, r9
 801502a:	e791      	b.n	8014f50 <_dtoa_r+0x3e0>
 801502c:	4b4d      	ldr	r3, [pc, #308]	; (8015164 <_dtoa_r+0x5f4>)
 801502e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015032:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015038:	2b00      	cmp	r3, #0
 801503a:	d047      	beq.n	80150cc <_dtoa_r+0x55c>
 801503c:	4602      	mov	r2, r0
 801503e:	460b      	mov	r3, r1
 8015040:	2000      	movs	r0, #0
 8015042:	494e      	ldr	r1, [pc, #312]	; (801517c <_dtoa_r+0x60c>)
 8015044:	f7eb fc1a 	bl	800087c <__aeabi_ddiv>
 8015048:	462a      	mov	r2, r5
 801504a:	4633      	mov	r3, r6
 801504c:	f7eb f934 	bl	80002b8 <__aeabi_dsub>
 8015050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015054:	465d      	mov	r5, fp
 8015056:	e9dd 0100 	ldrd	r0, r1, [sp]
 801505a:	f7eb fd95 	bl	8000b88 <__aeabi_d2iz>
 801505e:	4606      	mov	r6, r0
 8015060:	f7eb fa78 	bl	8000554 <__aeabi_i2d>
 8015064:	4602      	mov	r2, r0
 8015066:	460b      	mov	r3, r1
 8015068:	e9dd 0100 	ldrd	r0, r1, [sp]
 801506c:	f7eb f924 	bl	80002b8 <__aeabi_dsub>
 8015070:	3630      	adds	r6, #48	; 0x30
 8015072:	f805 6b01 	strb.w	r6, [r5], #1
 8015076:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801507a:	e9cd 0100 	strd	r0, r1, [sp]
 801507e:	f7eb fd45 	bl	8000b0c <__aeabi_dcmplt>
 8015082:	2800      	cmp	r0, #0
 8015084:	d163      	bne.n	801514e <_dtoa_r+0x5de>
 8015086:	e9dd 2300 	ldrd	r2, r3, [sp]
 801508a:	2000      	movs	r0, #0
 801508c:	4937      	ldr	r1, [pc, #220]	; (801516c <_dtoa_r+0x5fc>)
 801508e:	f7eb f913 	bl	80002b8 <__aeabi_dsub>
 8015092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015096:	f7eb fd39 	bl	8000b0c <__aeabi_dcmplt>
 801509a:	2800      	cmp	r0, #0
 801509c:	f040 80b7 	bne.w	801520e <_dtoa_r+0x69e>
 80150a0:	eba5 030b 	sub.w	r3, r5, fp
 80150a4:	429f      	cmp	r7, r3
 80150a6:	f77f af7c 	ble.w	8014fa2 <_dtoa_r+0x432>
 80150aa:	2200      	movs	r2, #0
 80150ac:	4b30      	ldr	r3, [pc, #192]	; (8015170 <_dtoa_r+0x600>)
 80150ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80150b2:	f7eb fab9 	bl	8000628 <__aeabi_dmul>
 80150b6:	2200      	movs	r2, #0
 80150b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150bc:	4b2c      	ldr	r3, [pc, #176]	; (8015170 <_dtoa_r+0x600>)
 80150be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150c2:	f7eb fab1 	bl	8000628 <__aeabi_dmul>
 80150c6:	e9cd 0100 	strd	r0, r1, [sp]
 80150ca:	e7c4      	b.n	8015056 <_dtoa_r+0x4e6>
 80150cc:	462a      	mov	r2, r5
 80150ce:	4633      	mov	r3, r6
 80150d0:	f7eb faaa 	bl	8000628 <__aeabi_dmul>
 80150d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150d8:	eb0b 0507 	add.w	r5, fp, r7
 80150dc:	465e      	mov	r6, fp
 80150de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150e2:	f7eb fd51 	bl	8000b88 <__aeabi_d2iz>
 80150e6:	4607      	mov	r7, r0
 80150e8:	f7eb fa34 	bl	8000554 <__aeabi_i2d>
 80150ec:	3730      	adds	r7, #48	; 0x30
 80150ee:	4602      	mov	r2, r0
 80150f0:	460b      	mov	r3, r1
 80150f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150f6:	f7eb f8df 	bl	80002b8 <__aeabi_dsub>
 80150fa:	f806 7b01 	strb.w	r7, [r6], #1
 80150fe:	42ae      	cmp	r6, r5
 8015100:	e9cd 0100 	strd	r0, r1, [sp]
 8015104:	f04f 0200 	mov.w	r2, #0
 8015108:	d126      	bne.n	8015158 <_dtoa_r+0x5e8>
 801510a:	4b1c      	ldr	r3, [pc, #112]	; (801517c <_dtoa_r+0x60c>)
 801510c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015110:	f7eb f8d4 	bl	80002bc <__adddf3>
 8015114:	4602      	mov	r2, r0
 8015116:	460b      	mov	r3, r1
 8015118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801511c:	f7eb fd14 	bl	8000b48 <__aeabi_dcmpgt>
 8015120:	2800      	cmp	r0, #0
 8015122:	d174      	bne.n	801520e <_dtoa_r+0x69e>
 8015124:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015128:	2000      	movs	r0, #0
 801512a:	4914      	ldr	r1, [pc, #80]	; (801517c <_dtoa_r+0x60c>)
 801512c:	f7eb f8c4 	bl	80002b8 <__aeabi_dsub>
 8015130:	4602      	mov	r2, r0
 8015132:	460b      	mov	r3, r1
 8015134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015138:	f7eb fce8 	bl	8000b0c <__aeabi_dcmplt>
 801513c:	2800      	cmp	r0, #0
 801513e:	f43f af30 	beq.w	8014fa2 <_dtoa_r+0x432>
 8015142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015146:	2b30      	cmp	r3, #48	; 0x30
 8015148:	f105 32ff 	add.w	r2, r5, #4294967295
 801514c:	d002      	beq.n	8015154 <_dtoa_r+0x5e4>
 801514e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015152:	e04a      	b.n	80151ea <_dtoa_r+0x67a>
 8015154:	4615      	mov	r5, r2
 8015156:	e7f4      	b.n	8015142 <_dtoa_r+0x5d2>
 8015158:	4b05      	ldr	r3, [pc, #20]	; (8015170 <_dtoa_r+0x600>)
 801515a:	f7eb fa65 	bl	8000628 <__aeabi_dmul>
 801515e:	e9cd 0100 	strd	r0, r1, [sp]
 8015162:	e7bc      	b.n	80150de <_dtoa_r+0x56e>
 8015164:	080182c8 	.word	0x080182c8
 8015168:	080182a0 	.word	0x080182a0
 801516c:	3ff00000 	.word	0x3ff00000
 8015170:	40240000 	.word	0x40240000
 8015174:	401c0000 	.word	0x401c0000
 8015178:	40140000 	.word	0x40140000
 801517c:	3fe00000 	.word	0x3fe00000
 8015180:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015184:	465d      	mov	r5, fp
 8015186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801518a:	4630      	mov	r0, r6
 801518c:	4639      	mov	r1, r7
 801518e:	f7eb fb75 	bl	800087c <__aeabi_ddiv>
 8015192:	f7eb fcf9 	bl	8000b88 <__aeabi_d2iz>
 8015196:	4680      	mov	r8, r0
 8015198:	f7eb f9dc 	bl	8000554 <__aeabi_i2d>
 801519c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151a0:	f7eb fa42 	bl	8000628 <__aeabi_dmul>
 80151a4:	4602      	mov	r2, r0
 80151a6:	460b      	mov	r3, r1
 80151a8:	4630      	mov	r0, r6
 80151aa:	4639      	mov	r1, r7
 80151ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80151b0:	f7eb f882 	bl	80002b8 <__aeabi_dsub>
 80151b4:	f805 6b01 	strb.w	r6, [r5], #1
 80151b8:	eba5 060b 	sub.w	r6, r5, fp
 80151bc:	45b1      	cmp	r9, r6
 80151be:	4602      	mov	r2, r0
 80151c0:	460b      	mov	r3, r1
 80151c2:	d139      	bne.n	8015238 <_dtoa_r+0x6c8>
 80151c4:	f7eb f87a 	bl	80002bc <__adddf3>
 80151c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151cc:	4606      	mov	r6, r0
 80151ce:	460f      	mov	r7, r1
 80151d0:	f7eb fcba 	bl	8000b48 <__aeabi_dcmpgt>
 80151d4:	b9c8      	cbnz	r0, 801520a <_dtoa_r+0x69a>
 80151d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151da:	4630      	mov	r0, r6
 80151dc:	4639      	mov	r1, r7
 80151de:	f7eb fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 80151e2:	b110      	cbz	r0, 80151ea <_dtoa_r+0x67a>
 80151e4:	f018 0f01 	tst.w	r8, #1
 80151e8:	d10f      	bne.n	801520a <_dtoa_r+0x69a>
 80151ea:	9904      	ldr	r1, [sp, #16]
 80151ec:	4620      	mov	r0, r4
 80151ee:	f000 fffd 	bl	80161ec <_Bfree>
 80151f2:	2300      	movs	r3, #0
 80151f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151f6:	702b      	strb	r3, [r5, #0]
 80151f8:	f10a 0301 	add.w	r3, sl, #1
 80151fc:	6013      	str	r3, [r2, #0]
 80151fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015200:	2b00      	cmp	r3, #0
 8015202:	f000 8241 	beq.w	8015688 <_dtoa_r+0xb18>
 8015206:	601d      	str	r5, [r3, #0]
 8015208:	e23e      	b.n	8015688 <_dtoa_r+0xb18>
 801520a:	f8cd a020 	str.w	sl, [sp, #32]
 801520e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015212:	2a39      	cmp	r2, #57	; 0x39
 8015214:	f105 33ff 	add.w	r3, r5, #4294967295
 8015218:	d108      	bne.n	801522c <_dtoa_r+0x6bc>
 801521a:	459b      	cmp	fp, r3
 801521c:	d10a      	bne.n	8015234 <_dtoa_r+0x6c4>
 801521e:	9b08      	ldr	r3, [sp, #32]
 8015220:	3301      	adds	r3, #1
 8015222:	9308      	str	r3, [sp, #32]
 8015224:	2330      	movs	r3, #48	; 0x30
 8015226:	f88b 3000 	strb.w	r3, [fp]
 801522a:	465b      	mov	r3, fp
 801522c:	781a      	ldrb	r2, [r3, #0]
 801522e:	3201      	adds	r2, #1
 8015230:	701a      	strb	r2, [r3, #0]
 8015232:	e78c      	b.n	801514e <_dtoa_r+0x5de>
 8015234:	461d      	mov	r5, r3
 8015236:	e7ea      	b.n	801520e <_dtoa_r+0x69e>
 8015238:	2200      	movs	r2, #0
 801523a:	4b9b      	ldr	r3, [pc, #620]	; (80154a8 <_dtoa_r+0x938>)
 801523c:	f7eb f9f4 	bl	8000628 <__aeabi_dmul>
 8015240:	2200      	movs	r2, #0
 8015242:	2300      	movs	r3, #0
 8015244:	4606      	mov	r6, r0
 8015246:	460f      	mov	r7, r1
 8015248:	f7eb fc56 	bl	8000af8 <__aeabi_dcmpeq>
 801524c:	2800      	cmp	r0, #0
 801524e:	d09a      	beq.n	8015186 <_dtoa_r+0x616>
 8015250:	e7cb      	b.n	80151ea <_dtoa_r+0x67a>
 8015252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015254:	2a00      	cmp	r2, #0
 8015256:	f000 808b 	beq.w	8015370 <_dtoa_r+0x800>
 801525a:	9a06      	ldr	r2, [sp, #24]
 801525c:	2a01      	cmp	r2, #1
 801525e:	dc6e      	bgt.n	801533e <_dtoa_r+0x7ce>
 8015260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015262:	2a00      	cmp	r2, #0
 8015264:	d067      	beq.n	8015336 <_dtoa_r+0x7c6>
 8015266:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801526a:	9f07      	ldr	r7, [sp, #28]
 801526c:	9d05      	ldr	r5, [sp, #20]
 801526e:	9a05      	ldr	r2, [sp, #20]
 8015270:	2101      	movs	r1, #1
 8015272:	441a      	add	r2, r3
 8015274:	4620      	mov	r0, r4
 8015276:	9205      	str	r2, [sp, #20]
 8015278:	4498      	add	r8, r3
 801527a:	f001 f895 	bl	80163a8 <__i2b>
 801527e:	4606      	mov	r6, r0
 8015280:	2d00      	cmp	r5, #0
 8015282:	dd0c      	ble.n	801529e <_dtoa_r+0x72e>
 8015284:	f1b8 0f00 	cmp.w	r8, #0
 8015288:	dd09      	ble.n	801529e <_dtoa_r+0x72e>
 801528a:	4545      	cmp	r5, r8
 801528c:	9a05      	ldr	r2, [sp, #20]
 801528e:	462b      	mov	r3, r5
 8015290:	bfa8      	it	ge
 8015292:	4643      	movge	r3, r8
 8015294:	1ad2      	subs	r2, r2, r3
 8015296:	9205      	str	r2, [sp, #20]
 8015298:	1aed      	subs	r5, r5, r3
 801529a:	eba8 0803 	sub.w	r8, r8, r3
 801529e:	9b07      	ldr	r3, [sp, #28]
 80152a0:	b1eb      	cbz	r3, 80152de <_dtoa_r+0x76e>
 80152a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d067      	beq.n	8015378 <_dtoa_r+0x808>
 80152a8:	b18f      	cbz	r7, 80152ce <_dtoa_r+0x75e>
 80152aa:	4631      	mov	r1, r6
 80152ac:	463a      	mov	r2, r7
 80152ae:	4620      	mov	r0, r4
 80152b0:	f001 f91a 	bl	80164e8 <__pow5mult>
 80152b4:	9a04      	ldr	r2, [sp, #16]
 80152b6:	4601      	mov	r1, r0
 80152b8:	4606      	mov	r6, r0
 80152ba:	4620      	mov	r0, r4
 80152bc:	f001 f87d 	bl	80163ba <__multiply>
 80152c0:	9904      	ldr	r1, [sp, #16]
 80152c2:	9008      	str	r0, [sp, #32]
 80152c4:	4620      	mov	r0, r4
 80152c6:	f000 ff91 	bl	80161ec <_Bfree>
 80152ca:	9b08      	ldr	r3, [sp, #32]
 80152cc:	9304      	str	r3, [sp, #16]
 80152ce:	9b07      	ldr	r3, [sp, #28]
 80152d0:	1bda      	subs	r2, r3, r7
 80152d2:	d004      	beq.n	80152de <_dtoa_r+0x76e>
 80152d4:	9904      	ldr	r1, [sp, #16]
 80152d6:	4620      	mov	r0, r4
 80152d8:	f001 f906 	bl	80164e8 <__pow5mult>
 80152dc:	9004      	str	r0, [sp, #16]
 80152de:	2101      	movs	r1, #1
 80152e0:	4620      	mov	r0, r4
 80152e2:	f001 f861 	bl	80163a8 <__i2b>
 80152e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152e8:	4607      	mov	r7, r0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	f000 81d0 	beq.w	8015690 <_dtoa_r+0xb20>
 80152f0:	461a      	mov	r2, r3
 80152f2:	4601      	mov	r1, r0
 80152f4:	4620      	mov	r0, r4
 80152f6:	f001 f8f7 	bl	80164e8 <__pow5mult>
 80152fa:	9b06      	ldr	r3, [sp, #24]
 80152fc:	2b01      	cmp	r3, #1
 80152fe:	4607      	mov	r7, r0
 8015300:	dc40      	bgt.n	8015384 <_dtoa_r+0x814>
 8015302:	9b00      	ldr	r3, [sp, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d139      	bne.n	801537c <_dtoa_r+0x80c>
 8015308:	9b01      	ldr	r3, [sp, #4]
 801530a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801530e:	2b00      	cmp	r3, #0
 8015310:	d136      	bne.n	8015380 <_dtoa_r+0x810>
 8015312:	9b01      	ldr	r3, [sp, #4]
 8015314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015318:	0d1b      	lsrs	r3, r3, #20
 801531a:	051b      	lsls	r3, r3, #20
 801531c:	b12b      	cbz	r3, 801532a <_dtoa_r+0x7ba>
 801531e:	9b05      	ldr	r3, [sp, #20]
 8015320:	3301      	adds	r3, #1
 8015322:	9305      	str	r3, [sp, #20]
 8015324:	f108 0801 	add.w	r8, r8, #1
 8015328:	2301      	movs	r3, #1
 801532a:	9307      	str	r3, [sp, #28]
 801532c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801532e:	2b00      	cmp	r3, #0
 8015330:	d12a      	bne.n	8015388 <_dtoa_r+0x818>
 8015332:	2001      	movs	r0, #1
 8015334:	e030      	b.n	8015398 <_dtoa_r+0x828>
 8015336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015338:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801533c:	e795      	b.n	801526a <_dtoa_r+0x6fa>
 801533e:	9b07      	ldr	r3, [sp, #28]
 8015340:	f109 37ff 	add.w	r7, r9, #4294967295
 8015344:	42bb      	cmp	r3, r7
 8015346:	bfbf      	itttt	lt
 8015348:	9b07      	ldrlt	r3, [sp, #28]
 801534a:	9707      	strlt	r7, [sp, #28]
 801534c:	1afa      	sublt	r2, r7, r3
 801534e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015350:	bfbb      	ittet	lt
 8015352:	189b      	addlt	r3, r3, r2
 8015354:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015356:	1bdf      	subge	r7, r3, r7
 8015358:	2700      	movlt	r7, #0
 801535a:	f1b9 0f00 	cmp.w	r9, #0
 801535e:	bfb5      	itete	lt
 8015360:	9b05      	ldrlt	r3, [sp, #20]
 8015362:	9d05      	ldrge	r5, [sp, #20]
 8015364:	eba3 0509 	sublt.w	r5, r3, r9
 8015368:	464b      	movge	r3, r9
 801536a:	bfb8      	it	lt
 801536c:	2300      	movlt	r3, #0
 801536e:	e77e      	b.n	801526e <_dtoa_r+0x6fe>
 8015370:	9f07      	ldr	r7, [sp, #28]
 8015372:	9d05      	ldr	r5, [sp, #20]
 8015374:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015376:	e783      	b.n	8015280 <_dtoa_r+0x710>
 8015378:	9a07      	ldr	r2, [sp, #28]
 801537a:	e7ab      	b.n	80152d4 <_dtoa_r+0x764>
 801537c:	2300      	movs	r3, #0
 801537e:	e7d4      	b.n	801532a <_dtoa_r+0x7ba>
 8015380:	9b00      	ldr	r3, [sp, #0]
 8015382:	e7d2      	b.n	801532a <_dtoa_r+0x7ba>
 8015384:	2300      	movs	r3, #0
 8015386:	9307      	str	r3, [sp, #28]
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801538e:	6918      	ldr	r0, [r3, #16]
 8015390:	f000 ffbc 	bl	801630c <__hi0bits>
 8015394:	f1c0 0020 	rsb	r0, r0, #32
 8015398:	4440      	add	r0, r8
 801539a:	f010 001f 	ands.w	r0, r0, #31
 801539e:	d047      	beq.n	8015430 <_dtoa_r+0x8c0>
 80153a0:	f1c0 0320 	rsb	r3, r0, #32
 80153a4:	2b04      	cmp	r3, #4
 80153a6:	dd3b      	ble.n	8015420 <_dtoa_r+0x8b0>
 80153a8:	9b05      	ldr	r3, [sp, #20]
 80153aa:	f1c0 001c 	rsb	r0, r0, #28
 80153ae:	4403      	add	r3, r0
 80153b0:	9305      	str	r3, [sp, #20]
 80153b2:	4405      	add	r5, r0
 80153b4:	4480      	add	r8, r0
 80153b6:	9b05      	ldr	r3, [sp, #20]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	dd05      	ble.n	80153c8 <_dtoa_r+0x858>
 80153bc:	461a      	mov	r2, r3
 80153be:	9904      	ldr	r1, [sp, #16]
 80153c0:	4620      	mov	r0, r4
 80153c2:	f001 f8df 	bl	8016584 <__lshift>
 80153c6:	9004      	str	r0, [sp, #16]
 80153c8:	f1b8 0f00 	cmp.w	r8, #0
 80153cc:	dd05      	ble.n	80153da <_dtoa_r+0x86a>
 80153ce:	4639      	mov	r1, r7
 80153d0:	4642      	mov	r2, r8
 80153d2:	4620      	mov	r0, r4
 80153d4:	f001 f8d6 	bl	8016584 <__lshift>
 80153d8:	4607      	mov	r7, r0
 80153da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153dc:	b353      	cbz	r3, 8015434 <_dtoa_r+0x8c4>
 80153de:	4639      	mov	r1, r7
 80153e0:	9804      	ldr	r0, [sp, #16]
 80153e2:	f001 f923 	bl	801662c <__mcmp>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	da24      	bge.n	8015434 <_dtoa_r+0x8c4>
 80153ea:	2300      	movs	r3, #0
 80153ec:	220a      	movs	r2, #10
 80153ee:	9904      	ldr	r1, [sp, #16]
 80153f0:	4620      	mov	r0, r4
 80153f2:	f000 ff12 	bl	801621a <__multadd>
 80153f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153f8:	9004      	str	r0, [sp, #16]
 80153fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80153fe:	2b00      	cmp	r3, #0
 8015400:	f000 814d 	beq.w	801569e <_dtoa_r+0xb2e>
 8015404:	2300      	movs	r3, #0
 8015406:	4631      	mov	r1, r6
 8015408:	220a      	movs	r2, #10
 801540a:	4620      	mov	r0, r4
 801540c:	f000 ff05 	bl	801621a <__multadd>
 8015410:	9b02      	ldr	r3, [sp, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	4606      	mov	r6, r0
 8015416:	dc4f      	bgt.n	80154b8 <_dtoa_r+0x948>
 8015418:	9b06      	ldr	r3, [sp, #24]
 801541a:	2b02      	cmp	r3, #2
 801541c:	dd4c      	ble.n	80154b8 <_dtoa_r+0x948>
 801541e:	e011      	b.n	8015444 <_dtoa_r+0x8d4>
 8015420:	d0c9      	beq.n	80153b6 <_dtoa_r+0x846>
 8015422:	9a05      	ldr	r2, [sp, #20]
 8015424:	331c      	adds	r3, #28
 8015426:	441a      	add	r2, r3
 8015428:	9205      	str	r2, [sp, #20]
 801542a:	441d      	add	r5, r3
 801542c:	4498      	add	r8, r3
 801542e:	e7c2      	b.n	80153b6 <_dtoa_r+0x846>
 8015430:	4603      	mov	r3, r0
 8015432:	e7f6      	b.n	8015422 <_dtoa_r+0x8b2>
 8015434:	f1b9 0f00 	cmp.w	r9, #0
 8015438:	dc38      	bgt.n	80154ac <_dtoa_r+0x93c>
 801543a:	9b06      	ldr	r3, [sp, #24]
 801543c:	2b02      	cmp	r3, #2
 801543e:	dd35      	ble.n	80154ac <_dtoa_r+0x93c>
 8015440:	f8cd 9008 	str.w	r9, [sp, #8]
 8015444:	9b02      	ldr	r3, [sp, #8]
 8015446:	b963      	cbnz	r3, 8015462 <_dtoa_r+0x8f2>
 8015448:	4639      	mov	r1, r7
 801544a:	2205      	movs	r2, #5
 801544c:	4620      	mov	r0, r4
 801544e:	f000 fee4 	bl	801621a <__multadd>
 8015452:	4601      	mov	r1, r0
 8015454:	4607      	mov	r7, r0
 8015456:	9804      	ldr	r0, [sp, #16]
 8015458:	f001 f8e8 	bl	801662c <__mcmp>
 801545c:	2800      	cmp	r0, #0
 801545e:	f73f adcc 	bgt.w	8014ffa <_dtoa_r+0x48a>
 8015462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015464:	465d      	mov	r5, fp
 8015466:	ea6f 0a03 	mvn.w	sl, r3
 801546a:	f04f 0900 	mov.w	r9, #0
 801546e:	4639      	mov	r1, r7
 8015470:	4620      	mov	r0, r4
 8015472:	f000 febb 	bl	80161ec <_Bfree>
 8015476:	2e00      	cmp	r6, #0
 8015478:	f43f aeb7 	beq.w	80151ea <_dtoa_r+0x67a>
 801547c:	f1b9 0f00 	cmp.w	r9, #0
 8015480:	d005      	beq.n	801548e <_dtoa_r+0x91e>
 8015482:	45b1      	cmp	r9, r6
 8015484:	d003      	beq.n	801548e <_dtoa_r+0x91e>
 8015486:	4649      	mov	r1, r9
 8015488:	4620      	mov	r0, r4
 801548a:	f000 feaf 	bl	80161ec <_Bfree>
 801548e:	4631      	mov	r1, r6
 8015490:	4620      	mov	r0, r4
 8015492:	f000 feab 	bl	80161ec <_Bfree>
 8015496:	e6a8      	b.n	80151ea <_dtoa_r+0x67a>
 8015498:	2700      	movs	r7, #0
 801549a:	463e      	mov	r6, r7
 801549c:	e7e1      	b.n	8015462 <_dtoa_r+0x8f2>
 801549e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80154a2:	463e      	mov	r6, r7
 80154a4:	e5a9      	b.n	8014ffa <_dtoa_r+0x48a>
 80154a6:	bf00      	nop
 80154a8:	40240000 	.word	0x40240000
 80154ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f000 80fa 	beq.w	80156ac <_dtoa_r+0xb3c>
 80154b8:	2d00      	cmp	r5, #0
 80154ba:	dd05      	ble.n	80154c8 <_dtoa_r+0x958>
 80154bc:	4631      	mov	r1, r6
 80154be:	462a      	mov	r2, r5
 80154c0:	4620      	mov	r0, r4
 80154c2:	f001 f85f 	bl	8016584 <__lshift>
 80154c6:	4606      	mov	r6, r0
 80154c8:	9b07      	ldr	r3, [sp, #28]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d04c      	beq.n	8015568 <_dtoa_r+0x9f8>
 80154ce:	6871      	ldr	r1, [r6, #4]
 80154d0:	4620      	mov	r0, r4
 80154d2:	f000 fe57 	bl	8016184 <_Balloc>
 80154d6:	6932      	ldr	r2, [r6, #16]
 80154d8:	3202      	adds	r2, #2
 80154da:	4605      	mov	r5, r0
 80154dc:	0092      	lsls	r2, r2, #2
 80154de:	f106 010c 	add.w	r1, r6, #12
 80154e2:	300c      	adds	r0, #12
 80154e4:	f7fd fb54 	bl	8012b90 <memcpy>
 80154e8:	2201      	movs	r2, #1
 80154ea:	4629      	mov	r1, r5
 80154ec:	4620      	mov	r0, r4
 80154ee:	f001 f849 	bl	8016584 <__lshift>
 80154f2:	9b00      	ldr	r3, [sp, #0]
 80154f4:	f8cd b014 	str.w	fp, [sp, #20]
 80154f8:	f003 0301 	and.w	r3, r3, #1
 80154fc:	46b1      	mov	r9, r6
 80154fe:	9307      	str	r3, [sp, #28]
 8015500:	4606      	mov	r6, r0
 8015502:	4639      	mov	r1, r7
 8015504:	9804      	ldr	r0, [sp, #16]
 8015506:	f7ff faa7 	bl	8014a58 <quorem>
 801550a:	4649      	mov	r1, r9
 801550c:	4605      	mov	r5, r0
 801550e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015512:	9804      	ldr	r0, [sp, #16]
 8015514:	f001 f88a 	bl	801662c <__mcmp>
 8015518:	4632      	mov	r2, r6
 801551a:	9000      	str	r0, [sp, #0]
 801551c:	4639      	mov	r1, r7
 801551e:	4620      	mov	r0, r4
 8015520:	f001 f89e 	bl	8016660 <__mdiff>
 8015524:	68c3      	ldr	r3, [r0, #12]
 8015526:	4602      	mov	r2, r0
 8015528:	bb03      	cbnz	r3, 801556c <_dtoa_r+0x9fc>
 801552a:	4601      	mov	r1, r0
 801552c:	9008      	str	r0, [sp, #32]
 801552e:	9804      	ldr	r0, [sp, #16]
 8015530:	f001 f87c 	bl	801662c <__mcmp>
 8015534:	9a08      	ldr	r2, [sp, #32]
 8015536:	4603      	mov	r3, r0
 8015538:	4611      	mov	r1, r2
 801553a:	4620      	mov	r0, r4
 801553c:	9308      	str	r3, [sp, #32]
 801553e:	f000 fe55 	bl	80161ec <_Bfree>
 8015542:	9b08      	ldr	r3, [sp, #32]
 8015544:	b9a3      	cbnz	r3, 8015570 <_dtoa_r+0xa00>
 8015546:	9a06      	ldr	r2, [sp, #24]
 8015548:	b992      	cbnz	r2, 8015570 <_dtoa_r+0xa00>
 801554a:	9a07      	ldr	r2, [sp, #28]
 801554c:	b982      	cbnz	r2, 8015570 <_dtoa_r+0xa00>
 801554e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015552:	d029      	beq.n	80155a8 <_dtoa_r+0xa38>
 8015554:	9b00      	ldr	r3, [sp, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	dd01      	ble.n	801555e <_dtoa_r+0x9ee>
 801555a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801555e:	9b05      	ldr	r3, [sp, #20]
 8015560:	1c5d      	adds	r5, r3, #1
 8015562:	f883 8000 	strb.w	r8, [r3]
 8015566:	e782      	b.n	801546e <_dtoa_r+0x8fe>
 8015568:	4630      	mov	r0, r6
 801556a:	e7c2      	b.n	80154f2 <_dtoa_r+0x982>
 801556c:	2301      	movs	r3, #1
 801556e:	e7e3      	b.n	8015538 <_dtoa_r+0x9c8>
 8015570:	9a00      	ldr	r2, [sp, #0]
 8015572:	2a00      	cmp	r2, #0
 8015574:	db04      	blt.n	8015580 <_dtoa_r+0xa10>
 8015576:	d125      	bne.n	80155c4 <_dtoa_r+0xa54>
 8015578:	9a06      	ldr	r2, [sp, #24]
 801557a:	bb1a      	cbnz	r2, 80155c4 <_dtoa_r+0xa54>
 801557c:	9a07      	ldr	r2, [sp, #28]
 801557e:	bb0a      	cbnz	r2, 80155c4 <_dtoa_r+0xa54>
 8015580:	2b00      	cmp	r3, #0
 8015582:	ddec      	ble.n	801555e <_dtoa_r+0x9ee>
 8015584:	2201      	movs	r2, #1
 8015586:	9904      	ldr	r1, [sp, #16]
 8015588:	4620      	mov	r0, r4
 801558a:	f000 fffb 	bl	8016584 <__lshift>
 801558e:	4639      	mov	r1, r7
 8015590:	9004      	str	r0, [sp, #16]
 8015592:	f001 f84b 	bl	801662c <__mcmp>
 8015596:	2800      	cmp	r0, #0
 8015598:	dc03      	bgt.n	80155a2 <_dtoa_r+0xa32>
 801559a:	d1e0      	bne.n	801555e <_dtoa_r+0x9ee>
 801559c:	f018 0f01 	tst.w	r8, #1
 80155a0:	d0dd      	beq.n	801555e <_dtoa_r+0x9ee>
 80155a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155a6:	d1d8      	bne.n	801555a <_dtoa_r+0x9ea>
 80155a8:	9b05      	ldr	r3, [sp, #20]
 80155aa:	9a05      	ldr	r2, [sp, #20]
 80155ac:	1c5d      	adds	r5, r3, #1
 80155ae:	2339      	movs	r3, #57	; 0x39
 80155b0:	7013      	strb	r3, [r2, #0]
 80155b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155b6:	2b39      	cmp	r3, #57	; 0x39
 80155b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80155bc:	d04f      	beq.n	801565e <_dtoa_r+0xaee>
 80155be:	3301      	adds	r3, #1
 80155c0:	7013      	strb	r3, [r2, #0]
 80155c2:	e754      	b.n	801546e <_dtoa_r+0x8fe>
 80155c4:	9a05      	ldr	r2, [sp, #20]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f102 0501 	add.w	r5, r2, #1
 80155cc:	dd06      	ble.n	80155dc <_dtoa_r+0xa6c>
 80155ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155d2:	d0e9      	beq.n	80155a8 <_dtoa_r+0xa38>
 80155d4:	f108 0801 	add.w	r8, r8, #1
 80155d8:	9b05      	ldr	r3, [sp, #20]
 80155da:	e7c2      	b.n	8015562 <_dtoa_r+0x9f2>
 80155dc:	9a02      	ldr	r2, [sp, #8]
 80155de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80155e2:	eba5 030b 	sub.w	r3, r5, fp
 80155e6:	4293      	cmp	r3, r2
 80155e8:	d021      	beq.n	801562e <_dtoa_r+0xabe>
 80155ea:	2300      	movs	r3, #0
 80155ec:	220a      	movs	r2, #10
 80155ee:	9904      	ldr	r1, [sp, #16]
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 fe12 	bl	801621a <__multadd>
 80155f6:	45b1      	cmp	r9, r6
 80155f8:	9004      	str	r0, [sp, #16]
 80155fa:	f04f 0300 	mov.w	r3, #0
 80155fe:	f04f 020a 	mov.w	r2, #10
 8015602:	4649      	mov	r1, r9
 8015604:	4620      	mov	r0, r4
 8015606:	d105      	bne.n	8015614 <_dtoa_r+0xaa4>
 8015608:	f000 fe07 	bl	801621a <__multadd>
 801560c:	4681      	mov	r9, r0
 801560e:	4606      	mov	r6, r0
 8015610:	9505      	str	r5, [sp, #20]
 8015612:	e776      	b.n	8015502 <_dtoa_r+0x992>
 8015614:	f000 fe01 	bl	801621a <__multadd>
 8015618:	4631      	mov	r1, r6
 801561a:	4681      	mov	r9, r0
 801561c:	2300      	movs	r3, #0
 801561e:	220a      	movs	r2, #10
 8015620:	4620      	mov	r0, r4
 8015622:	f000 fdfa 	bl	801621a <__multadd>
 8015626:	4606      	mov	r6, r0
 8015628:	e7f2      	b.n	8015610 <_dtoa_r+0xaa0>
 801562a:	f04f 0900 	mov.w	r9, #0
 801562e:	2201      	movs	r2, #1
 8015630:	9904      	ldr	r1, [sp, #16]
 8015632:	4620      	mov	r0, r4
 8015634:	f000 ffa6 	bl	8016584 <__lshift>
 8015638:	4639      	mov	r1, r7
 801563a:	9004      	str	r0, [sp, #16]
 801563c:	f000 fff6 	bl	801662c <__mcmp>
 8015640:	2800      	cmp	r0, #0
 8015642:	dcb6      	bgt.n	80155b2 <_dtoa_r+0xa42>
 8015644:	d102      	bne.n	801564c <_dtoa_r+0xadc>
 8015646:	f018 0f01 	tst.w	r8, #1
 801564a:	d1b2      	bne.n	80155b2 <_dtoa_r+0xa42>
 801564c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015650:	2b30      	cmp	r3, #48	; 0x30
 8015652:	f105 32ff 	add.w	r2, r5, #4294967295
 8015656:	f47f af0a 	bne.w	801546e <_dtoa_r+0x8fe>
 801565a:	4615      	mov	r5, r2
 801565c:	e7f6      	b.n	801564c <_dtoa_r+0xadc>
 801565e:	4593      	cmp	fp, r2
 8015660:	d105      	bne.n	801566e <_dtoa_r+0xafe>
 8015662:	2331      	movs	r3, #49	; 0x31
 8015664:	f10a 0a01 	add.w	sl, sl, #1
 8015668:	f88b 3000 	strb.w	r3, [fp]
 801566c:	e6ff      	b.n	801546e <_dtoa_r+0x8fe>
 801566e:	4615      	mov	r5, r2
 8015670:	e79f      	b.n	80155b2 <_dtoa_r+0xa42>
 8015672:	f8df b064 	ldr.w	fp, [pc, #100]	; 80156d8 <_dtoa_r+0xb68>
 8015676:	e007      	b.n	8015688 <_dtoa_r+0xb18>
 8015678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801567a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80156dc <_dtoa_r+0xb6c>
 801567e:	b11b      	cbz	r3, 8015688 <_dtoa_r+0xb18>
 8015680:	f10b 0308 	add.w	r3, fp, #8
 8015684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	4658      	mov	r0, fp
 801568a:	b017      	add	sp, #92	; 0x5c
 801568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015690:	9b06      	ldr	r3, [sp, #24]
 8015692:	2b01      	cmp	r3, #1
 8015694:	f77f ae35 	ble.w	8015302 <_dtoa_r+0x792>
 8015698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801569a:	9307      	str	r3, [sp, #28]
 801569c:	e649      	b.n	8015332 <_dtoa_r+0x7c2>
 801569e:	9b02      	ldr	r3, [sp, #8]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	dc03      	bgt.n	80156ac <_dtoa_r+0xb3c>
 80156a4:	9b06      	ldr	r3, [sp, #24]
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	f73f aecc 	bgt.w	8015444 <_dtoa_r+0x8d4>
 80156ac:	465d      	mov	r5, fp
 80156ae:	4639      	mov	r1, r7
 80156b0:	9804      	ldr	r0, [sp, #16]
 80156b2:	f7ff f9d1 	bl	8014a58 <quorem>
 80156b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80156ba:	f805 8b01 	strb.w	r8, [r5], #1
 80156be:	9a02      	ldr	r2, [sp, #8]
 80156c0:	eba5 030b 	sub.w	r3, r5, fp
 80156c4:	429a      	cmp	r2, r3
 80156c6:	ddb0      	ble.n	801562a <_dtoa_r+0xaba>
 80156c8:	2300      	movs	r3, #0
 80156ca:	220a      	movs	r2, #10
 80156cc:	9904      	ldr	r1, [sp, #16]
 80156ce:	4620      	mov	r0, r4
 80156d0:	f000 fda3 	bl	801621a <__multadd>
 80156d4:	9004      	str	r0, [sp, #16]
 80156d6:	e7ea      	b.n	80156ae <_dtoa_r+0xb3e>
 80156d8:	080183c3 	.word	0x080183c3
 80156dc:	08018220 	.word	0x08018220

080156e0 <__sflush_r>:
 80156e0:	898a      	ldrh	r2, [r1, #12]
 80156e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e6:	4605      	mov	r5, r0
 80156e8:	0710      	lsls	r0, r2, #28
 80156ea:	460c      	mov	r4, r1
 80156ec:	d458      	bmi.n	80157a0 <__sflush_r+0xc0>
 80156ee:	684b      	ldr	r3, [r1, #4]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	dc05      	bgt.n	8015700 <__sflush_r+0x20>
 80156f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	dc02      	bgt.n	8015700 <__sflush_r+0x20>
 80156fa:	2000      	movs	r0, #0
 80156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015702:	2e00      	cmp	r6, #0
 8015704:	d0f9      	beq.n	80156fa <__sflush_r+0x1a>
 8015706:	2300      	movs	r3, #0
 8015708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801570c:	682f      	ldr	r7, [r5, #0]
 801570e:	6a21      	ldr	r1, [r4, #32]
 8015710:	602b      	str	r3, [r5, #0]
 8015712:	d032      	beq.n	801577a <__sflush_r+0x9a>
 8015714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015716:	89a3      	ldrh	r3, [r4, #12]
 8015718:	075a      	lsls	r2, r3, #29
 801571a:	d505      	bpl.n	8015728 <__sflush_r+0x48>
 801571c:	6863      	ldr	r3, [r4, #4]
 801571e:	1ac0      	subs	r0, r0, r3
 8015720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015722:	b10b      	cbz	r3, 8015728 <__sflush_r+0x48>
 8015724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015726:	1ac0      	subs	r0, r0, r3
 8015728:	2300      	movs	r3, #0
 801572a:	4602      	mov	r2, r0
 801572c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801572e:	6a21      	ldr	r1, [r4, #32]
 8015730:	4628      	mov	r0, r5
 8015732:	47b0      	blx	r6
 8015734:	1c43      	adds	r3, r0, #1
 8015736:	89a3      	ldrh	r3, [r4, #12]
 8015738:	d106      	bne.n	8015748 <__sflush_r+0x68>
 801573a:	6829      	ldr	r1, [r5, #0]
 801573c:	291d      	cmp	r1, #29
 801573e:	d848      	bhi.n	80157d2 <__sflush_r+0xf2>
 8015740:	4a29      	ldr	r2, [pc, #164]	; (80157e8 <__sflush_r+0x108>)
 8015742:	40ca      	lsrs	r2, r1
 8015744:	07d6      	lsls	r6, r2, #31
 8015746:	d544      	bpl.n	80157d2 <__sflush_r+0xf2>
 8015748:	2200      	movs	r2, #0
 801574a:	6062      	str	r2, [r4, #4]
 801574c:	04d9      	lsls	r1, r3, #19
 801574e:	6922      	ldr	r2, [r4, #16]
 8015750:	6022      	str	r2, [r4, #0]
 8015752:	d504      	bpl.n	801575e <__sflush_r+0x7e>
 8015754:	1c42      	adds	r2, r0, #1
 8015756:	d101      	bne.n	801575c <__sflush_r+0x7c>
 8015758:	682b      	ldr	r3, [r5, #0]
 801575a:	b903      	cbnz	r3, 801575e <__sflush_r+0x7e>
 801575c:	6560      	str	r0, [r4, #84]	; 0x54
 801575e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015760:	602f      	str	r7, [r5, #0]
 8015762:	2900      	cmp	r1, #0
 8015764:	d0c9      	beq.n	80156fa <__sflush_r+0x1a>
 8015766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801576a:	4299      	cmp	r1, r3
 801576c:	d002      	beq.n	8015774 <__sflush_r+0x94>
 801576e:	4628      	mov	r0, r5
 8015770:	f001 f916 	bl	80169a0 <_free_r>
 8015774:	2000      	movs	r0, #0
 8015776:	6360      	str	r0, [r4, #52]	; 0x34
 8015778:	e7c0      	b.n	80156fc <__sflush_r+0x1c>
 801577a:	2301      	movs	r3, #1
 801577c:	4628      	mov	r0, r5
 801577e:	47b0      	blx	r6
 8015780:	1c41      	adds	r1, r0, #1
 8015782:	d1c8      	bne.n	8015716 <__sflush_r+0x36>
 8015784:	682b      	ldr	r3, [r5, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d0c5      	beq.n	8015716 <__sflush_r+0x36>
 801578a:	2b1d      	cmp	r3, #29
 801578c:	d001      	beq.n	8015792 <__sflush_r+0xb2>
 801578e:	2b16      	cmp	r3, #22
 8015790:	d101      	bne.n	8015796 <__sflush_r+0xb6>
 8015792:	602f      	str	r7, [r5, #0]
 8015794:	e7b1      	b.n	80156fa <__sflush_r+0x1a>
 8015796:	89a3      	ldrh	r3, [r4, #12]
 8015798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801579c:	81a3      	strh	r3, [r4, #12]
 801579e:	e7ad      	b.n	80156fc <__sflush_r+0x1c>
 80157a0:	690f      	ldr	r7, [r1, #16]
 80157a2:	2f00      	cmp	r7, #0
 80157a4:	d0a9      	beq.n	80156fa <__sflush_r+0x1a>
 80157a6:	0793      	lsls	r3, r2, #30
 80157a8:	680e      	ldr	r6, [r1, #0]
 80157aa:	bf08      	it	eq
 80157ac:	694b      	ldreq	r3, [r1, #20]
 80157ae:	600f      	str	r7, [r1, #0]
 80157b0:	bf18      	it	ne
 80157b2:	2300      	movne	r3, #0
 80157b4:	eba6 0807 	sub.w	r8, r6, r7
 80157b8:	608b      	str	r3, [r1, #8]
 80157ba:	f1b8 0f00 	cmp.w	r8, #0
 80157be:	dd9c      	ble.n	80156fa <__sflush_r+0x1a>
 80157c0:	4643      	mov	r3, r8
 80157c2:	463a      	mov	r2, r7
 80157c4:	6a21      	ldr	r1, [r4, #32]
 80157c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157c8:	4628      	mov	r0, r5
 80157ca:	47b0      	blx	r6
 80157cc:	2800      	cmp	r0, #0
 80157ce:	dc06      	bgt.n	80157de <__sflush_r+0xfe>
 80157d0:	89a3      	ldrh	r3, [r4, #12]
 80157d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157d6:	81a3      	strh	r3, [r4, #12]
 80157d8:	f04f 30ff 	mov.w	r0, #4294967295
 80157dc:	e78e      	b.n	80156fc <__sflush_r+0x1c>
 80157de:	4407      	add	r7, r0
 80157e0:	eba8 0800 	sub.w	r8, r8, r0
 80157e4:	e7e9      	b.n	80157ba <__sflush_r+0xda>
 80157e6:	bf00      	nop
 80157e8:	20400001 	.word	0x20400001

080157ec <_fflush_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	690b      	ldr	r3, [r1, #16]
 80157f0:	4605      	mov	r5, r0
 80157f2:	460c      	mov	r4, r1
 80157f4:	b1db      	cbz	r3, 801582e <_fflush_r+0x42>
 80157f6:	b118      	cbz	r0, 8015800 <_fflush_r+0x14>
 80157f8:	6983      	ldr	r3, [r0, #24]
 80157fa:	b90b      	cbnz	r3, 8015800 <_fflush_r+0x14>
 80157fc:	f000 f860 	bl	80158c0 <__sinit>
 8015800:	4b0c      	ldr	r3, [pc, #48]	; (8015834 <_fflush_r+0x48>)
 8015802:	429c      	cmp	r4, r3
 8015804:	d109      	bne.n	801581a <_fflush_r+0x2e>
 8015806:	686c      	ldr	r4, [r5, #4]
 8015808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801580c:	b17b      	cbz	r3, 801582e <_fflush_r+0x42>
 801580e:	4621      	mov	r1, r4
 8015810:	4628      	mov	r0, r5
 8015812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015816:	f7ff bf63 	b.w	80156e0 <__sflush_r>
 801581a:	4b07      	ldr	r3, [pc, #28]	; (8015838 <_fflush_r+0x4c>)
 801581c:	429c      	cmp	r4, r3
 801581e:	d101      	bne.n	8015824 <_fflush_r+0x38>
 8015820:	68ac      	ldr	r4, [r5, #8]
 8015822:	e7f1      	b.n	8015808 <_fflush_r+0x1c>
 8015824:	4b05      	ldr	r3, [pc, #20]	; (801583c <_fflush_r+0x50>)
 8015826:	429c      	cmp	r4, r3
 8015828:	bf08      	it	eq
 801582a:	68ec      	ldreq	r4, [r5, #12]
 801582c:	e7ec      	b.n	8015808 <_fflush_r+0x1c>
 801582e:	2000      	movs	r0, #0
 8015830:	bd38      	pop	{r3, r4, r5, pc}
 8015832:	bf00      	nop
 8015834:	08018250 	.word	0x08018250
 8015838:	08018270 	.word	0x08018270
 801583c:	08018230 	.word	0x08018230

08015840 <std>:
 8015840:	2300      	movs	r3, #0
 8015842:	b510      	push	{r4, lr}
 8015844:	4604      	mov	r4, r0
 8015846:	e9c0 3300 	strd	r3, r3, [r0]
 801584a:	6083      	str	r3, [r0, #8]
 801584c:	8181      	strh	r1, [r0, #12]
 801584e:	6643      	str	r3, [r0, #100]	; 0x64
 8015850:	81c2      	strh	r2, [r0, #14]
 8015852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015856:	6183      	str	r3, [r0, #24]
 8015858:	4619      	mov	r1, r3
 801585a:	2208      	movs	r2, #8
 801585c:	305c      	adds	r0, #92	; 0x5c
 801585e:	f7fd f9a2 	bl	8012ba6 <memset>
 8015862:	4b05      	ldr	r3, [pc, #20]	; (8015878 <std+0x38>)
 8015864:	6263      	str	r3, [r4, #36]	; 0x24
 8015866:	4b05      	ldr	r3, [pc, #20]	; (801587c <std+0x3c>)
 8015868:	62a3      	str	r3, [r4, #40]	; 0x28
 801586a:	4b05      	ldr	r3, [pc, #20]	; (8015880 <std+0x40>)
 801586c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801586e:	4b05      	ldr	r3, [pc, #20]	; (8015884 <std+0x44>)
 8015870:	6224      	str	r4, [r4, #32]
 8015872:	6323      	str	r3, [r4, #48]	; 0x30
 8015874:	bd10      	pop	{r4, pc}
 8015876:	bf00      	nop
 8015878:	08013a5d 	.word	0x08013a5d
 801587c:	08013a83 	.word	0x08013a83
 8015880:	08013abb 	.word	0x08013abb
 8015884:	08013adf 	.word	0x08013adf

08015888 <_cleanup_r>:
 8015888:	4901      	ldr	r1, [pc, #4]	; (8015890 <_cleanup_r+0x8>)
 801588a:	f000 b885 	b.w	8015998 <_fwalk_reent>
 801588e:	bf00      	nop
 8015890:	080157ed 	.word	0x080157ed

08015894 <__sfmoreglue>:
 8015894:	b570      	push	{r4, r5, r6, lr}
 8015896:	1e4a      	subs	r2, r1, #1
 8015898:	2568      	movs	r5, #104	; 0x68
 801589a:	4355      	muls	r5, r2
 801589c:	460e      	mov	r6, r1
 801589e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158a2:	f001 f8cb 	bl	8016a3c <_malloc_r>
 80158a6:	4604      	mov	r4, r0
 80158a8:	b140      	cbz	r0, 80158bc <__sfmoreglue+0x28>
 80158aa:	2100      	movs	r1, #0
 80158ac:	e9c0 1600 	strd	r1, r6, [r0]
 80158b0:	300c      	adds	r0, #12
 80158b2:	60a0      	str	r0, [r4, #8]
 80158b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158b8:	f7fd f975 	bl	8012ba6 <memset>
 80158bc:	4620      	mov	r0, r4
 80158be:	bd70      	pop	{r4, r5, r6, pc}

080158c0 <__sinit>:
 80158c0:	6983      	ldr	r3, [r0, #24]
 80158c2:	b510      	push	{r4, lr}
 80158c4:	4604      	mov	r4, r0
 80158c6:	bb33      	cbnz	r3, 8015916 <__sinit+0x56>
 80158c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158cc:	6503      	str	r3, [r0, #80]	; 0x50
 80158ce:	4b12      	ldr	r3, [pc, #72]	; (8015918 <__sinit+0x58>)
 80158d0:	4a12      	ldr	r2, [pc, #72]	; (801591c <__sinit+0x5c>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	6282      	str	r2, [r0, #40]	; 0x28
 80158d6:	4298      	cmp	r0, r3
 80158d8:	bf04      	itt	eq
 80158da:	2301      	moveq	r3, #1
 80158dc:	6183      	streq	r3, [r0, #24]
 80158de:	f000 f81f 	bl	8015920 <__sfp>
 80158e2:	6060      	str	r0, [r4, #4]
 80158e4:	4620      	mov	r0, r4
 80158e6:	f000 f81b 	bl	8015920 <__sfp>
 80158ea:	60a0      	str	r0, [r4, #8]
 80158ec:	4620      	mov	r0, r4
 80158ee:	f000 f817 	bl	8015920 <__sfp>
 80158f2:	2200      	movs	r2, #0
 80158f4:	60e0      	str	r0, [r4, #12]
 80158f6:	2104      	movs	r1, #4
 80158f8:	6860      	ldr	r0, [r4, #4]
 80158fa:	f7ff ffa1 	bl	8015840 <std>
 80158fe:	2201      	movs	r2, #1
 8015900:	2109      	movs	r1, #9
 8015902:	68a0      	ldr	r0, [r4, #8]
 8015904:	f7ff ff9c 	bl	8015840 <std>
 8015908:	2202      	movs	r2, #2
 801590a:	2112      	movs	r1, #18
 801590c:	68e0      	ldr	r0, [r4, #12]
 801590e:	f7ff ff97 	bl	8015840 <std>
 8015912:	2301      	movs	r3, #1
 8015914:	61a3      	str	r3, [r4, #24]
 8015916:	bd10      	pop	{r4, pc}
 8015918:	08018190 	.word	0x08018190
 801591c:	08015889 	.word	0x08015889

08015920 <__sfp>:
 8015920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015922:	4b1b      	ldr	r3, [pc, #108]	; (8015990 <__sfp+0x70>)
 8015924:	681e      	ldr	r6, [r3, #0]
 8015926:	69b3      	ldr	r3, [r6, #24]
 8015928:	4607      	mov	r7, r0
 801592a:	b913      	cbnz	r3, 8015932 <__sfp+0x12>
 801592c:	4630      	mov	r0, r6
 801592e:	f7ff ffc7 	bl	80158c0 <__sinit>
 8015932:	3648      	adds	r6, #72	; 0x48
 8015934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015938:	3b01      	subs	r3, #1
 801593a:	d503      	bpl.n	8015944 <__sfp+0x24>
 801593c:	6833      	ldr	r3, [r6, #0]
 801593e:	b133      	cbz	r3, 801594e <__sfp+0x2e>
 8015940:	6836      	ldr	r6, [r6, #0]
 8015942:	e7f7      	b.n	8015934 <__sfp+0x14>
 8015944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015948:	b16d      	cbz	r5, 8015966 <__sfp+0x46>
 801594a:	3468      	adds	r4, #104	; 0x68
 801594c:	e7f4      	b.n	8015938 <__sfp+0x18>
 801594e:	2104      	movs	r1, #4
 8015950:	4638      	mov	r0, r7
 8015952:	f7ff ff9f 	bl	8015894 <__sfmoreglue>
 8015956:	6030      	str	r0, [r6, #0]
 8015958:	2800      	cmp	r0, #0
 801595a:	d1f1      	bne.n	8015940 <__sfp+0x20>
 801595c:	230c      	movs	r3, #12
 801595e:	603b      	str	r3, [r7, #0]
 8015960:	4604      	mov	r4, r0
 8015962:	4620      	mov	r0, r4
 8015964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015966:	4b0b      	ldr	r3, [pc, #44]	; (8015994 <__sfp+0x74>)
 8015968:	6665      	str	r5, [r4, #100]	; 0x64
 801596a:	e9c4 5500 	strd	r5, r5, [r4]
 801596e:	60a5      	str	r5, [r4, #8]
 8015970:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015974:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015978:	2208      	movs	r2, #8
 801597a:	4629      	mov	r1, r5
 801597c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015980:	f7fd f911 	bl	8012ba6 <memset>
 8015984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801598c:	e7e9      	b.n	8015962 <__sfp+0x42>
 801598e:	bf00      	nop
 8015990:	08018190 	.word	0x08018190
 8015994:	ffff0001 	.word	0xffff0001

08015998 <_fwalk_reent>:
 8015998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801599c:	4680      	mov	r8, r0
 801599e:	4689      	mov	r9, r1
 80159a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80159a4:	2600      	movs	r6, #0
 80159a6:	b914      	cbnz	r4, 80159ae <_fwalk_reent+0x16>
 80159a8:	4630      	mov	r0, r6
 80159aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80159b2:	3f01      	subs	r7, #1
 80159b4:	d501      	bpl.n	80159ba <_fwalk_reent+0x22>
 80159b6:	6824      	ldr	r4, [r4, #0]
 80159b8:	e7f5      	b.n	80159a6 <_fwalk_reent+0xe>
 80159ba:	89ab      	ldrh	r3, [r5, #12]
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d907      	bls.n	80159d0 <_fwalk_reent+0x38>
 80159c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159c4:	3301      	adds	r3, #1
 80159c6:	d003      	beq.n	80159d0 <_fwalk_reent+0x38>
 80159c8:	4629      	mov	r1, r5
 80159ca:	4640      	mov	r0, r8
 80159cc:	47c8      	blx	r9
 80159ce:	4306      	orrs	r6, r0
 80159d0:	3568      	adds	r5, #104	; 0x68
 80159d2:	e7ee      	b.n	80159b2 <_fwalk_reent+0x1a>

080159d4 <rshift>:
 80159d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159d6:	6906      	ldr	r6, [r0, #16]
 80159d8:	114b      	asrs	r3, r1, #5
 80159da:	429e      	cmp	r6, r3
 80159dc:	f100 0414 	add.w	r4, r0, #20
 80159e0:	dd30      	ble.n	8015a44 <rshift+0x70>
 80159e2:	f011 011f 	ands.w	r1, r1, #31
 80159e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80159ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80159ee:	d108      	bne.n	8015a02 <rshift+0x2e>
 80159f0:	4621      	mov	r1, r4
 80159f2:	42b2      	cmp	r2, r6
 80159f4:	460b      	mov	r3, r1
 80159f6:	d211      	bcs.n	8015a1c <rshift+0x48>
 80159f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80159fc:	f841 3b04 	str.w	r3, [r1], #4
 8015a00:	e7f7      	b.n	80159f2 <rshift+0x1e>
 8015a02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015a06:	f1c1 0c20 	rsb	ip, r1, #32
 8015a0a:	40cd      	lsrs	r5, r1
 8015a0c:	3204      	adds	r2, #4
 8015a0e:	4623      	mov	r3, r4
 8015a10:	42b2      	cmp	r2, r6
 8015a12:	4617      	mov	r7, r2
 8015a14:	d30c      	bcc.n	8015a30 <rshift+0x5c>
 8015a16:	601d      	str	r5, [r3, #0]
 8015a18:	b105      	cbz	r5, 8015a1c <rshift+0x48>
 8015a1a:	3304      	adds	r3, #4
 8015a1c:	1b1a      	subs	r2, r3, r4
 8015a1e:	42a3      	cmp	r3, r4
 8015a20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a24:	bf08      	it	eq
 8015a26:	2300      	moveq	r3, #0
 8015a28:	6102      	str	r2, [r0, #16]
 8015a2a:	bf08      	it	eq
 8015a2c:	6143      	streq	r3, [r0, #20]
 8015a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a30:	683f      	ldr	r7, [r7, #0]
 8015a32:	fa07 f70c 	lsl.w	r7, r7, ip
 8015a36:	433d      	orrs	r5, r7
 8015a38:	f843 5b04 	str.w	r5, [r3], #4
 8015a3c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015a40:	40cd      	lsrs	r5, r1
 8015a42:	e7e5      	b.n	8015a10 <rshift+0x3c>
 8015a44:	4623      	mov	r3, r4
 8015a46:	e7e9      	b.n	8015a1c <rshift+0x48>

08015a48 <__hexdig_fun>:
 8015a48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a4c:	2b09      	cmp	r3, #9
 8015a4e:	d802      	bhi.n	8015a56 <__hexdig_fun+0xe>
 8015a50:	3820      	subs	r0, #32
 8015a52:	b2c0      	uxtb	r0, r0
 8015a54:	4770      	bx	lr
 8015a56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a5a:	2b05      	cmp	r3, #5
 8015a5c:	d801      	bhi.n	8015a62 <__hexdig_fun+0x1a>
 8015a5e:	3847      	subs	r0, #71	; 0x47
 8015a60:	e7f7      	b.n	8015a52 <__hexdig_fun+0xa>
 8015a62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a66:	2b05      	cmp	r3, #5
 8015a68:	d801      	bhi.n	8015a6e <__hexdig_fun+0x26>
 8015a6a:	3827      	subs	r0, #39	; 0x27
 8015a6c:	e7f1      	b.n	8015a52 <__hexdig_fun+0xa>
 8015a6e:	2000      	movs	r0, #0
 8015a70:	4770      	bx	lr

08015a72 <__gethex>:
 8015a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a76:	b08b      	sub	sp, #44	; 0x2c
 8015a78:	468a      	mov	sl, r1
 8015a7a:	9002      	str	r0, [sp, #8]
 8015a7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015a7e:	9306      	str	r3, [sp, #24]
 8015a80:	4690      	mov	r8, r2
 8015a82:	f000 fadf 	bl	8016044 <__localeconv_l>
 8015a86:	6803      	ldr	r3, [r0, #0]
 8015a88:	9303      	str	r3, [sp, #12]
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7ea fbb8 	bl	8000200 <strlen>
 8015a90:	9b03      	ldr	r3, [sp, #12]
 8015a92:	9001      	str	r0, [sp, #4]
 8015a94:	4403      	add	r3, r0
 8015a96:	f04f 0b00 	mov.w	fp, #0
 8015a9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015a9e:	9307      	str	r3, [sp, #28]
 8015aa0:	f8da 3000 	ldr.w	r3, [sl]
 8015aa4:	3302      	adds	r3, #2
 8015aa6:	461f      	mov	r7, r3
 8015aa8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015aac:	2830      	cmp	r0, #48	; 0x30
 8015aae:	d06c      	beq.n	8015b8a <__gethex+0x118>
 8015ab0:	f7ff ffca 	bl	8015a48 <__hexdig_fun>
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d16a      	bne.n	8015b90 <__gethex+0x11e>
 8015aba:	9a01      	ldr	r2, [sp, #4]
 8015abc:	9903      	ldr	r1, [sp, #12]
 8015abe:	4638      	mov	r0, r7
 8015ac0:	f001 fe34 	bl	801772c <strncmp>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d166      	bne.n	8015b96 <__gethex+0x124>
 8015ac8:	9b01      	ldr	r3, [sp, #4]
 8015aca:	5cf8      	ldrb	r0, [r7, r3]
 8015acc:	18fe      	adds	r6, r7, r3
 8015ace:	f7ff ffbb 	bl	8015a48 <__hexdig_fun>
 8015ad2:	2800      	cmp	r0, #0
 8015ad4:	d062      	beq.n	8015b9c <__gethex+0x12a>
 8015ad6:	4633      	mov	r3, r6
 8015ad8:	7818      	ldrb	r0, [r3, #0]
 8015ada:	2830      	cmp	r0, #48	; 0x30
 8015adc:	461f      	mov	r7, r3
 8015ade:	f103 0301 	add.w	r3, r3, #1
 8015ae2:	d0f9      	beq.n	8015ad8 <__gethex+0x66>
 8015ae4:	f7ff ffb0 	bl	8015a48 <__hexdig_fun>
 8015ae8:	fab0 f580 	clz	r5, r0
 8015aec:	096d      	lsrs	r5, r5, #5
 8015aee:	4634      	mov	r4, r6
 8015af0:	f04f 0b01 	mov.w	fp, #1
 8015af4:	463a      	mov	r2, r7
 8015af6:	4616      	mov	r6, r2
 8015af8:	3201      	adds	r2, #1
 8015afa:	7830      	ldrb	r0, [r6, #0]
 8015afc:	f7ff ffa4 	bl	8015a48 <__hexdig_fun>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d1f8      	bne.n	8015af6 <__gethex+0x84>
 8015b04:	9a01      	ldr	r2, [sp, #4]
 8015b06:	9903      	ldr	r1, [sp, #12]
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f001 fe0f 	bl	801772c <strncmp>
 8015b0e:	b950      	cbnz	r0, 8015b26 <__gethex+0xb4>
 8015b10:	b954      	cbnz	r4, 8015b28 <__gethex+0xb6>
 8015b12:	9b01      	ldr	r3, [sp, #4]
 8015b14:	18f4      	adds	r4, r6, r3
 8015b16:	4622      	mov	r2, r4
 8015b18:	4616      	mov	r6, r2
 8015b1a:	3201      	adds	r2, #1
 8015b1c:	7830      	ldrb	r0, [r6, #0]
 8015b1e:	f7ff ff93 	bl	8015a48 <__hexdig_fun>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d1f8      	bne.n	8015b18 <__gethex+0xa6>
 8015b26:	b10c      	cbz	r4, 8015b2c <__gethex+0xba>
 8015b28:	1ba4      	subs	r4, r4, r6
 8015b2a:	00a4      	lsls	r4, r4, #2
 8015b2c:	7833      	ldrb	r3, [r6, #0]
 8015b2e:	2b50      	cmp	r3, #80	; 0x50
 8015b30:	d001      	beq.n	8015b36 <__gethex+0xc4>
 8015b32:	2b70      	cmp	r3, #112	; 0x70
 8015b34:	d140      	bne.n	8015bb8 <__gethex+0x146>
 8015b36:	7873      	ldrb	r3, [r6, #1]
 8015b38:	2b2b      	cmp	r3, #43	; 0x2b
 8015b3a:	d031      	beq.n	8015ba0 <__gethex+0x12e>
 8015b3c:	2b2d      	cmp	r3, #45	; 0x2d
 8015b3e:	d033      	beq.n	8015ba8 <__gethex+0x136>
 8015b40:	1c71      	adds	r1, r6, #1
 8015b42:	f04f 0900 	mov.w	r9, #0
 8015b46:	7808      	ldrb	r0, [r1, #0]
 8015b48:	f7ff ff7e 	bl	8015a48 <__hexdig_fun>
 8015b4c:	1e43      	subs	r3, r0, #1
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b18      	cmp	r3, #24
 8015b52:	d831      	bhi.n	8015bb8 <__gethex+0x146>
 8015b54:	f1a0 0210 	sub.w	r2, r0, #16
 8015b58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b5c:	f7ff ff74 	bl	8015a48 <__hexdig_fun>
 8015b60:	1e43      	subs	r3, r0, #1
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	2b18      	cmp	r3, #24
 8015b66:	d922      	bls.n	8015bae <__gethex+0x13c>
 8015b68:	f1b9 0f00 	cmp.w	r9, #0
 8015b6c:	d000      	beq.n	8015b70 <__gethex+0xfe>
 8015b6e:	4252      	negs	r2, r2
 8015b70:	4414      	add	r4, r2
 8015b72:	f8ca 1000 	str.w	r1, [sl]
 8015b76:	b30d      	cbz	r5, 8015bbc <__gethex+0x14a>
 8015b78:	f1bb 0f00 	cmp.w	fp, #0
 8015b7c:	bf0c      	ite	eq
 8015b7e:	2706      	moveq	r7, #6
 8015b80:	2700      	movne	r7, #0
 8015b82:	4638      	mov	r0, r7
 8015b84:	b00b      	add	sp, #44	; 0x2c
 8015b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b8a:	f10b 0b01 	add.w	fp, fp, #1
 8015b8e:	e78a      	b.n	8015aa6 <__gethex+0x34>
 8015b90:	2500      	movs	r5, #0
 8015b92:	462c      	mov	r4, r5
 8015b94:	e7ae      	b.n	8015af4 <__gethex+0x82>
 8015b96:	463e      	mov	r6, r7
 8015b98:	2501      	movs	r5, #1
 8015b9a:	e7c7      	b.n	8015b2c <__gethex+0xba>
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	e7fb      	b.n	8015b98 <__gethex+0x126>
 8015ba0:	f04f 0900 	mov.w	r9, #0
 8015ba4:	1cb1      	adds	r1, r6, #2
 8015ba6:	e7ce      	b.n	8015b46 <__gethex+0xd4>
 8015ba8:	f04f 0901 	mov.w	r9, #1
 8015bac:	e7fa      	b.n	8015ba4 <__gethex+0x132>
 8015bae:	230a      	movs	r3, #10
 8015bb0:	fb03 0202 	mla	r2, r3, r2, r0
 8015bb4:	3a10      	subs	r2, #16
 8015bb6:	e7cf      	b.n	8015b58 <__gethex+0xe6>
 8015bb8:	4631      	mov	r1, r6
 8015bba:	e7da      	b.n	8015b72 <__gethex+0x100>
 8015bbc:	1bf3      	subs	r3, r6, r7
 8015bbe:	3b01      	subs	r3, #1
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	2b07      	cmp	r3, #7
 8015bc4:	dc49      	bgt.n	8015c5a <__gethex+0x1e8>
 8015bc6:	9802      	ldr	r0, [sp, #8]
 8015bc8:	f000 fadc 	bl	8016184 <_Balloc>
 8015bcc:	9b01      	ldr	r3, [sp, #4]
 8015bce:	f100 0914 	add.w	r9, r0, #20
 8015bd2:	f04f 0b00 	mov.w	fp, #0
 8015bd6:	f1c3 0301 	rsb	r3, r3, #1
 8015bda:	4605      	mov	r5, r0
 8015bdc:	f8cd 9010 	str.w	r9, [sp, #16]
 8015be0:	46da      	mov	sl, fp
 8015be2:	9308      	str	r3, [sp, #32]
 8015be4:	42b7      	cmp	r7, r6
 8015be6:	d33b      	bcc.n	8015c60 <__gethex+0x1ee>
 8015be8:	9804      	ldr	r0, [sp, #16]
 8015bea:	f840 ab04 	str.w	sl, [r0], #4
 8015bee:	eba0 0009 	sub.w	r0, r0, r9
 8015bf2:	1080      	asrs	r0, r0, #2
 8015bf4:	6128      	str	r0, [r5, #16]
 8015bf6:	0147      	lsls	r7, r0, #5
 8015bf8:	4650      	mov	r0, sl
 8015bfa:	f000 fb87 	bl	801630c <__hi0bits>
 8015bfe:	f8d8 6000 	ldr.w	r6, [r8]
 8015c02:	1a3f      	subs	r7, r7, r0
 8015c04:	42b7      	cmp	r7, r6
 8015c06:	dd64      	ble.n	8015cd2 <__gethex+0x260>
 8015c08:	1bbf      	subs	r7, r7, r6
 8015c0a:	4639      	mov	r1, r7
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	f000 fe97 	bl	8016940 <__any_on>
 8015c12:	4682      	mov	sl, r0
 8015c14:	b178      	cbz	r0, 8015c36 <__gethex+0x1c4>
 8015c16:	1e7b      	subs	r3, r7, #1
 8015c18:	1159      	asrs	r1, r3, #5
 8015c1a:	f003 021f 	and.w	r2, r3, #31
 8015c1e:	f04f 0a01 	mov.w	sl, #1
 8015c22:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c26:	fa0a f202 	lsl.w	r2, sl, r2
 8015c2a:	420a      	tst	r2, r1
 8015c2c:	d003      	beq.n	8015c36 <__gethex+0x1c4>
 8015c2e:	4553      	cmp	r3, sl
 8015c30:	dc46      	bgt.n	8015cc0 <__gethex+0x24e>
 8015c32:	f04f 0a02 	mov.w	sl, #2
 8015c36:	4639      	mov	r1, r7
 8015c38:	4628      	mov	r0, r5
 8015c3a:	f7ff fecb 	bl	80159d4 <rshift>
 8015c3e:	443c      	add	r4, r7
 8015c40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c44:	42a3      	cmp	r3, r4
 8015c46:	da52      	bge.n	8015cee <__gethex+0x27c>
 8015c48:	4629      	mov	r1, r5
 8015c4a:	9802      	ldr	r0, [sp, #8]
 8015c4c:	f000 face 	bl	80161ec <_Bfree>
 8015c50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c52:	2300      	movs	r3, #0
 8015c54:	6013      	str	r3, [r2, #0]
 8015c56:	27a3      	movs	r7, #163	; 0xa3
 8015c58:	e793      	b.n	8015b82 <__gethex+0x110>
 8015c5a:	3101      	adds	r1, #1
 8015c5c:	105b      	asrs	r3, r3, #1
 8015c5e:	e7b0      	b.n	8015bc2 <__gethex+0x150>
 8015c60:	1e73      	subs	r3, r6, #1
 8015c62:	9305      	str	r3, [sp, #20]
 8015c64:	9a07      	ldr	r2, [sp, #28]
 8015c66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c6a:	4293      	cmp	r3, r2
 8015c6c:	d018      	beq.n	8015ca0 <__gethex+0x22e>
 8015c6e:	f1bb 0f20 	cmp.w	fp, #32
 8015c72:	d107      	bne.n	8015c84 <__gethex+0x212>
 8015c74:	9b04      	ldr	r3, [sp, #16]
 8015c76:	f8c3 a000 	str.w	sl, [r3]
 8015c7a:	3304      	adds	r3, #4
 8015c7c:	f04f 0a00 	mov.w	sl, #0
 8015c80:	9304      	str	r3, [sp, #16]
 8015c82:	46d3      	mov	fp, sl
 8015c84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015c88:	f7ff fede 	bl	8015a48 <__hexdig_fun>
 8015c8c:	f000 000f 	and.w	r0, r0, #15
 8015c90:	fa00 f00b 	lsl.w	r0, r0, fp
 8015c94:	ea4a 0a00 	orr.w	sl, sl, r0
 8015c98:	f10b 0b04 	add.w	fp, fp, #4
 8015c9c:	9b05      	ldr	r3, [sp, #20]
 8015c9e:	e00d      	b.n	8015cbc <__gethex+0x24a>
 8015ca0:	9b05      	ldr	r3, [sp, #20]
 8015ca2:	9a08      	ldr	r2, [sp, #32]
 8015ca4:	4413      	add	r3, r2
 8015ca6:	42bb      	cmp	r3, r7
 8015ca8:	d3e1      	bcc.n	8015c6e <__gethex+0x1fc>
 8015caa:	4618      	mov	r0, r3
 8015cac:	9a01      	ldr	r2, [sp, #4]
 8015cae:	9903      	ldr	r1, [sp, #12]
 8015cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cb2:	f001 fd3b 	bl	801772c <strncmp>
 8015cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d1d8      	bne.n	8015c6e <__gethex+0x1fc>
 8015cbc:	461e      	mov	r6, r3
 8015cbe:	e791      	b.n	8015be4 <__gethex+0x172>
 8015cc0:	1eb9      	subs	r1, r7, #2
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	f000 fe3c 	bl	8016940 <__any_on>
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	d0b2      	beq.n	8015c32 <__gethex+0x1c0>
 8015ccc:	f04f 0a03 	mov.w	sl, #3
 8015cd0:	e7b1      	b.n	8015c36 <__gethex+0x1c4>
 8015cd2:	da09      	bge.n	8015ce8 <__gethex+0x276>
 8015cd4:	1bf7      	subs	r7, r6, r7
 8015cd6:	4629      	mov	r1, r5
 8015cd8:	463a      	mov	r2, r7
 8015cda:	9802      	ldr	r0, [sp, #8]
 8015cdc:	f000 fc52 	bl	8016584 <__lshift>
 8015ce0:	1be4      	subs	r4, r4, r7
 8015ce2:	4605      	mov	r5, r0
 8015ce4:	f100 0914 	add.w	r9, r0, #20
 8015ce8:	f04f 0a00 	mov.w	sl, #0
 8015cec:	e7a8      	b.n	8015c40 <__gethex+0x1ce>
 8015cee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015cf2:	42a0      	cmp	r0, r4
 8015cf4:	dd6a      	ble.n	8015dcc <__gethex+0x35a>
 8015cf6:	1b04      	subs	r4, r0, r4
 8015cf8:	42a6      	cmp	r6, r4
 8015cfa:	dc2e      	bgt.n	8015d5a <__gethex+0x2e8>
 8015cfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d00:	2b02      	cmp	r3, #2
 8015d02:	d022      	beq.n	8015d4a <__gethex+0x2d8>
 8015d04:	2b03      	cmp	r3, #3
 8015d06:	d024      	beq.n	8015d52 <__gethex+0x2e0>
 8015d08:	2b01      	cmp	r3, #1
 8015d0a:	d115      	bne.n	8015d38 <__gethex+0x2c6>
 8015d0c:	42a6      	cmp	r6, r4
 8015d0e:	d113      	bne.n	8015d38 <__gethex+0x2c6>
 8015d10:	2e01      	cmp	r6, #1
 8015d12:	dc0b      	bgt.n	8015d2c <__gethex+0x2ba>
 8015d14:	9a06      	ldr	r2, [sp, #24]
 8015d16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d1a:	6013      	str	r3, [r2, #0]
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	612b      	str	r3, [r5, #16]
 8015d20:	f8c9 3000 	str.w	r3, [r9]
 8015d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d26:	2762      	movs	r7, #98	; 0x62
 8015d28:	601d      	str	r5, [r3, #0]
 8015d2a:	e72a      	b.n	8015b82 <__gethex+0x110>
 8015d2c:	1e71      	subs	r1, r6, #1
 8015d2e:	4628      	mov	r0, r5
 8015d30:	f000 fe06 	bl	8016940 <__any_on>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d1ed      	bne.n	8015d14 <__gethex+0x2a2>
 8015d38:	4629      	mov	r1, r5
 8015d3a:	9802      	ldr	r0, [sp, #8]
 8015d3c:	f000 fa56 	bl	80161ec <_Bfree>
 8015d40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d42:	2300      	movs	r3, #0
 8015d44:	6013      	str	r3, [r2, #0]
 8015d46:	2750      	movs	r7, #80	; 0x50
 8015d48:	e71b      	b.n	8015b82 <__gethex+0x110>
 8015d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d0e1      	beq.n	8015d14 <__gethex+0x2a2>
 8015d50:	e7f2      	b.n	8015d38 <__gethex+0x2c6>
 8015d52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d1dd      	bne.n	8015d14 <__gethex+0x2a2>
 8015d58:	e7ee      	b.n	8015d38 <__gethex+0x2c6>
 8015d5a:	1e67      	subs	r7, r4, #1
 8015d5c:	f1ba 0f00 	cmp.w	sl, #0
 8015d60:	d131      	bne.n	8015dc6 <__gethex+0x354>
 8015d62:	b127      	cbz	r7, 8015d6e <__gethex+0x2fc>
 8015d64:	4639      	mov	r1, r7
 8015d66:	4628      	mov	r0, r5
 8015d68:	f000 fdea 	bl	8016940 <__any_on>
 8015d6c:	4682      	mov	sl, r0
 8015d6e:	117a      	asrs	r2, r7, #5
 8015d70:	2301      	movs	r3, #1
 8015d72:	f007 071f 	and.w	r7, r7, #31
 8015d76:	fa03 f707 	lsl.w	r7, r3, r7
 8015d7a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015d7e:	4621      	mov	r1, r4
 8015d80:	421f      	tst	r7, r3
 8015d82:	4628      	mov	r0, r5
 8015d84:	bf18      	it	ne
 8015d86:	f04a 0a02 	orrne.w	sl, sl, #2
 8015d8a:	1b36      	subs	r6, r6, r4
 8015d8c:	f7ff fe22 	bl	80159d4 <rshift>
 8015d90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015d94:	2702      	movs	r7, #2
 8015d96:	f1ba 0f00 	cmp.w	sl, #0
 8015d9a:	d048      	beq.n	8015e2e <__gethex+0x3bc>
 8015d9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	d015      	beq.n	8015dd0 <__gethex+0x35e>
 8015da4:	2b03      	cmp	r3, #3
 8015da6:	d017      	beq.n	8015dd8 <__gethex+0x366>
 8015da8:	2b01      	cmp	r3, #1
 8015daa:	d109      	bne.n	8015dc0 <__gethex+0x34e>
 8015dac:	f01a 0f02 	tst.w	sl, #2
 8015db0:	d006      	beq.n	8015dc0 <__gethex+0x34e>
 8015db2:	f8d9 3000 	ldr.w	r3, [r9]
 8015db6:	ea4a 0a03 	orr.w	sl, sl, r3
 8015dba:	f01a 0f01 	tst.w	sl, #1
 8015dbe:	d10e      	bne.n	8015dde <__gethex+0x36c>
 8015dc0:	f047 0710 	orr.w	r7, r7, #16
 8015dc4:	e033      	b.n	8015e2e <__gethex+0x3bc>
 8015dc6:	f04f 0a01 	mov.w	sl, #1
 8015dca:	e7d0      	b.n	8015d6e <__gethex+0x2fc>
 8015dcc:	2701      	movs	r7, #1
 8015dce:	e7e2      	b.n	8015d96 <__gethex+0x324>
 8015dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dd2:	f1c3 0301 	rsb	r3, r3, #1
 8015dd6:	9315      	str	r3, [sp, #84]	; 0x54
 8015dd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d0f0      	beq.n	8015dc0 <__gethex+0x34e>
 8015dde:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015de2:	f105 0314 	add.w	r3, r5, #20
 8015de6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015dea:	eb03 010a 	add.w	r1, r3, sl
 8015dee:	f04f 0c00 	mov.w	ip, #0
 8015df2:	4618      	mov	r0, r3
 8015df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015df8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015dfc:	d01c      	beq.n	8015e38 <__gethex+0x3c6>
 8015dfe:	3201      	adds	r2, #1
 8015e00:	6002      	str	r2, [r0, #0]
 8015e02:	2f02      	cmp	r7, #2
 8015e04:	f105 0314 	add.w	r3, r5, #20
 8015e08:	d138      	bne.n	8015e7c <__gethex+0x40a>
 8015e0a:	f8d8 2000 	ldr.w	r2, [r8]
 8015e0e:	3a01      	subs	r2, #1
 8015e10:	42b2      	cmp	r2, r6
 8015e12:	d10a      	bne.n	8015e2a <__gethex+0x3b8>
 8015e14:	1171      	asrs	r1, r6, #5
 8015e16:	2201      	movs	r2, #1
 8015e18:	f006 061f 	and.w	r6, r6, #31
 8015e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e20:	fa02 f606 	lsl.w	r6, r2, r6
 8015e24:	421e      	tst	r6, r3
 8015e26:	bf18      	it	ne
 8015e28:	4617      	movne	r7, r2
 8015e2a:	f047 0720 	orr.w	r7, r7, #32
 8015e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e30:	601d      	str	r5, [r3, #0]
 8015e32:	9b06      	ldr	r3, [sp, #24]
 8015e34:	601c      	str	r4, [r3, #0]
 8015e36:	e6a4      	b.n	8015b82 <__gethex+0x110>
 8015e38:	4299      	cmp	r1, r3
 8015e3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e3e:	d8d8      	bhi.n	8015df2 <__gethex+0x380>
 8015e40:	68ab      	ldr	r3, [r5, #8]
 8015e42:	4599      	cmp	r9, r3
 8015e44:	db12      	blt.n	8015e6c <__gethex+0x3fa>
 8015e46:	6869      	ldr	r1, [r5, #4]
 8015e48:	9802      	ldr	r0, [sp, #8]
 8015e4a:	3101      	adds	r1, #1
 8015e4c:	f000 f99a 	bl	8016184 <_Balloc>
 8015e50:	692a      	ldr	r2, [r5, #16]
 8015e52:	3202      	adds	r2, #2
 8015e54:	f105 010c 	add.w	r1, r5, #12
 8015e58:	4683      	mov	fp, r0
 8015e5a:	0092      	lsls	r2, r2, #2
 8015e5c:	300c      	adds	r0, #12
 8015e5e:	f7fc fe97 	bl	8012b90 <memcpy>
 8015e62:	4629      	mov	r1, r5
 8015e64:	9802      	ldr	r0, [sp, #8]
 8015e66:	f000 f9c1 	bl	80161ec <_Bfree>
 8015e6a:	465d      	mov	r5, fp
 8015e6c:	692b      	ldr	r3, [r5, #16]
 8015e6e:	1c5a      	adds	r2, r3, #1
 8015e70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015e74:	612a      	str	r2, [r5, #16]
 8015e76:	2201      	movs	r2, #1
 8015e78:	615a      	str	r2, [r3, #20]
 8015e7a:	e7c2      	b.n	8015e02 <__gethex+0x390>
 8015e7c:	692a      	ldr	r2, [r5, #16]
 8015e7e:	454a      	cmp	r2, r9
 8015e80:	dd0b      	ble.n	8015e9a <__gethex+0x428>
 8015e82:	2101      	movs	r1, #1
 8015e84:	4628      	mov	r0, r5
 8015e86:	f7ff fda5 	bl	80159d4 <rshift>
 8015e8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e8e:	3401      	adds	r4, #1
 8015e90:	42a3      	cmp	r3, r4
 8015e92:	f6ff aed9 	blt.w	8015c48 <__gethex+0x1d6>
 8015e96:	2701      	movs	r7, #1
 8015e98:	e7c7      	b.n	8015e2a <__gethex+0x3b8>
 8015e9a:	f016 061f 	ands.w	r6, r6, #31
 8015e9e:	d0fa      	beq.n	8015e96 <__gethex+0x424>
 8015ea0:	449a      	add	sl, r3
 8015ea2:	f1c6 0620 	rsb	r6, r6, #32
 8015ea6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015eaa:	f000 fa2f 	bl	801630c <__hi0bits>
 8015eae:	42b0      	cmp	r0, r6
 8015eb0:	dbe7      	blt.n	8015e82 <__gethex+0x410>
 8015eb2:	e7f0      	b.n	8015e96 <__gethex+0x424>

08015eb4 <L_shift>:
 8015eb4:	f1c2 0208 	rsb	r2, r2, #8
 8015eb8:	0092      	lsls	r2, r2, #2
 8015eba:	b570      	push	{r4, r5, r6, lr}
 8015ebc:	f1c2 0620 	rsb	r6, r2, #32
 8015ec0:	6843      	ldr	r3, [r0, #4]
 8015ec2:	6804      	ldr	r4, [r0, #0]
 8015ec4:	fa03 f506 	lsl.w	r5, r3, r6
 8015ec8:	432c      	orrs	r4, r5
 8015eca:	40d3      	lsrs	r3, r2
 8015ecc:	6004      	str	r4, [r0, #0]
 8015ece:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ed2:	4288      	cmp	r0, r1
 8015ed4:	d3f4      	bcc.n	8015ec0 <L_shift+0xc>
 8015ed6:	bd70      	pop	{r4, r5, r6, pc}

08015ed8 <__match>:
 8015ed8:	b530      	push	{r4, r5, lr}
 8015eda:	6803      	ldr	r3, [r0, #0]
 8015edc:	3301      	adds	r3, #1
 8015ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ee2:	b914      	cbnz	r4, 8015eea <__match+0x12>
 8015ee4:	6003      	str	r3, [r0, #0]
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	bd30      	pop	{r4, r5, pc}
 8015eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015eee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015ef2:	2d19      	cmp	r5, #25
 8015ef4:	bf98      	it	ls
 8015ef6:	3220      	addls	r2, #32
 8015ef8:	42a2      	cmp	r2, r4
 8015efa:	d0f0      	beq.n	8015ede <__match+0x6>
 8015efc:	2000      	movs	r0, #0
 8015efe:	e7f3      	b.n	8015ee8 <__match+0x10>

08015f00 <__hexnan>:
 8015f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f04:	680b      	ldr	r3, [r1, #0]
 8015f06:	6801      	ldr	r1, [r0, #0]
 8015f08:	115f      	asrs	r7, r3, #5
 8015f0a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015f0e:	f013 031f 	ands.w	r3, r3, #31
 8015f12:	b087      	sub	sp, #28
 8015f14:	bf18      	it	ne
 8015f16:	3704      	addne	r7, #4
 8015f18:	2500      	movs	r5, #0
 8015f1a:	1f3e      	subs	r6, r7, #4
 8015f1c:	4682      	mov	sl, r0
 8015f1e:	4690      	mov	r8, r2
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	f847 5c04 	str.w	r5, [r7, #-4]
 8015f26:	46b1      	mov	r9, r6
 8015f28:	4634      	mov	r4, r6
 8015f2a:	9502      	str	r5, [sp, #8]
 8015f2c:	46ab      	mov	fp, r5
 8015f2e:	784a      	ldrb	r2, [r1, #1]
 8015f30:	1c4b      	adds	r3, r1, #1
 8015f32:	9303      	str	r3, [sp, #12]
 8015f34:	b342      	cbz	r2, 8015f88 <__hexnan+0x88>
 8015f36:	4610      	mov	r0, r2
 8015f38:	9105      	str	r1, [sp, #20]
 8015f3a:	9204      	str	r2, [sp, #16]
 8015f3c:	f7ff fd84 	bl	8015a48 <__hexdig_fun>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	d143      	bne.n	8015fcc <__hexnan+0xcc>
 8015f44:	9a04      	ldr	r2, [sp, #16]
 8015f46:	9905      	ldr	r1, [sp, #20]
 8015f48:	2a20      	cmp	r2, #32
 8015f4a:	d818      	bhi.n	8015f7e <__hexnan+0x7e>
 8015f4c:	9b02      	ldr	r3, [sp, #8]
 8015f4e:	459b      	cmp	fp, r3
 8015f50:	dd13      	ble.n	8015f7a <__hexnan+0x7a>
 8015f52:	454c      	cmp	r4, r9
 8015f54:	d206      	bcs.n	8015f64 <__hexnan+0x64>
 8015f56:	2d07      	cmp	r5, #7
 8015f58:	dc04      	bgt.n	8015f64 <__hexnan+0x64>
 8015f5a:	462a      	mov	r2, r5
 8015f5c:	4649      	mov	r1, r9
 8015f5e:	4620      	mov	r0, r4
 8015f60:	f7ff ffa8 	bl	8015eb4 <L_shift>
 8015f64:	4544      	cmp	r4, r8
 8015f66:	d944      	bls.n	8015ff2 <__hexnan+0xf2>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	f1a4 0904 	sub.w	r9, r4, #4
 8015f6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f72:	f8cd b008 	str.w	fp, [sp, #8]
 8015f76:	464c      	mov	r4, r9
 8015f78:	461d      	mov	r5, r3
 8015f7a:	9903      	ldr	r1, [sp, #12]
 8015f7c:	e7d7      	b.n	8015f2e <__hexnan+0x2e>
 8015f7e:	2a29      	cmp	r2, #41	; 0x29
 8015f80:	d14a      	bne.n	8016018 <__hexnan+0x118>
 8015f82:	3102      	adds	r1, #2
 8015f84:	f8ca 1000 	str.w	r1, [sl]
 8015f88:	f1bb 0f00 	cmp.w	fp, #0
 8015f8c:	d044      	beq.n	8016018 <__hexnan+0x118>
 8015f8e:	454c      	cmp	r4, r9
 8015f90:	d206      	bcs.n	8015fa0 <__hexnan+0xa0>
 8015f92:	2d07      	cmp	r5, #7
 8015f94:	dc04      	bgt.n	8015fa0 <__hexnan+0xa0>
 8015f96:	462a      	mov	r2, r5
 8015f98:	4649      	mov	r1, r9
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7ff ff8a 	bl	8015eb4 <L_shift>
 8015fa0:	4544      	cmp	r4, r8
 8015fa2:	d928      	bls.n	8015ff6 <__hexnan+0xf6>
 8015fa4:	4643      	mov	r3, r8
 8015fa6:	f854 2b04 	ldr.w	r2, [r4], #4
 8015faa:	f843 2b04 	str.w	r2, [r3], #4
 8015fae:	42a6      	cmp	r6, r4
 8015fb0:	d2f9      	bcs.n	8015fa6 <__hexnan+0xa6>
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f843 2b04 	str.w	r2, [r3], #4
 8015fb8:	429e      	cmp	r6, r3
 8015fba:	d2fb      	bcs.n	8015fb4 <__hexnan+0xb4>
 8015fbc:	6833      	ldr	r3, [r6, #0]
 8015fbe:	b91b      	cbnz	r3, 8015fc8 <__hexnan+0xc8>
 8015fc0:	4546      	cmp	r6, r8
 8015fc2:	d127      	bne.n	8016014 <__hexnan+0x114>
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	6033      	str	r3, [r6, #0]
 8015fc8:	2005      	movs	r0, #5
 8015fca:	e026      	b.n	801601a <__hexnan+0x11a>
 8015fcc:	3501      	adds	r5, #1
 8015fce:	2d08      	cmp	r5, #8
 8015fd0:	f10b 0b01 	add.w	fp, fp, #1
 8015fd4:	dd06      	ble.n	8015fe4 <__hexnan+0xe4>
 8015fd6:	4544      	cmp	r4, r8
 8015fd8:	d9cf      	bls.n	8015f7a <__hexnan+0x7a>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fe0:	2501      	movs	r5, #1
 8015fe2:	3c04      	subs	r4, #4
 8015fe4:	6822      	ldr	r2, [r4, #0]
 8015fe6:	f000 000f 	and.w	r0, r0, #15
 8015fea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015fee:	6020      	str	r0, [r4, #0]
 8015ff0:	e7c3      	b.n	8015f7a <__hexnan+0x7a>
 8015ff2:	2508      	movs	r5, #8
 8015ff4:	e7c1      	b.n	8015f7a <__hexnan+0x7a>
 8015ff6:	9b01      	ldr	r3, [sp, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d0df      	beq.n	8015fbc <__hexnan+0xbc>
 8015ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8016000:	f1c3 0320 	rsb	r3, r3, #32
 8016004:	fa22 f303 	lsr.w	r3, r2, r3
 8016008:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801600c:	401a      	ands	r2, r3
 801600e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016012:	e7d3      	b.n	8015fbc <__hexnan+0xbc>
 8016014:	3e04      	subs	r6, #4
 8016016:	e7d1      	b.n	8015fbc <__hexnan+0xbc>
 8016018:	2004      	movs	r0, #4
 801601a:	b007      	add	sp, #28
 801601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016020 <__locale_ctype_ptr_l>:
 8016020:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016024:	4770      	bx	lr
	...

08016028 <__locale_ctype_ptr>:
 8016028:	4b04      	ldr	r3, [pc, #16]	; (801603c <__locale_ctype_ptr+0x14>)
 801602a:	4a05      	ldr	r2, [pc, #20]	; (8016040 <__locale_ctype_ptr+0x18>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	6a1b      	ldr	r3, [r3, #32]
 8016030:	2b00      	cmp	r3, #0
 8016032:	bf08      	it	eq
 8016034:	4613      	moveq	r3, r2
 8016036:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801603a:	4770      	bx	lr
 801603c:	2000000c 	.word	0x2000000c
 8016040:	20000070 	.word	0x20000070

08016044 <__localeconv_l>:
 8016044:	30f0      	adds	r0, #240	; 0xf0
 8016046:	4770      	bx	lr

08016048 <_localeconv_r>:
 8016048:	4b04      	ldr	r3, [pc, #16]	; (801605c <_localeconv_r+0x14>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	6a18      	ldr	r0, [r3, #32]
 801604e:	4b04      	ldr	r3, [pc, #16]	; (8016060 <_localeconv_r+0x18>)
 8016050:	2800      	cmp	r0, #0
 8016052:	bf08      	it	eq
 8016054:	4618      	moveq	r0, r3
 8016056:	30f0      	adds	r0, #240	; 0xf0
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop
 801605c:	2000000c 	.word	0x2000000c
 8016060:	20000070 	.word	0x20000070

08016064 <_lseek_r>:
 8016064:	b538      	push	{r3, r4, r5, lr}
 8016066:	4c07      	ldr	r4, [pc, #28]	; (8016084 <_lseek_r+0x20>)
 8016068:	4605      	mov	r5, r0
 801606a:	4608      	mov	r0, r1
 801606c:	4611      	mov	r1, r2
 801606e:	2200      	movs	r2, #0
 8016070:	6022      	str	r2, [r4, #0]
 8016072:	461a      	mov	r2, r3
 8016074:	f7ef fbfc 	bl	8005870 <_lseek>
 8016078:	1c43      	adds	r3, r0, #1
 801607a:	d102      	bne.n	8016082 <_lseek_r+0x1e>
 801607c:	6823      	ldr	r3, [r4, #0]
 801607e:	b103      	cbz	r3, 8016082 <_lseek_r+0x1e>
 8016080:	602b      	str	r3, [r5, #0]
 8016082:	bd38      	pop	{r3, r4, r5, pc}
 8016084:	2003be04 	.word	0x2003be04

08016088 <__swhatbuf_r>:
 8016088:	b570      	push	{r4, r5, r6, lr}
 801608a:	460e      	mov	r6, r1
 801608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016090:	2900      	cmp	r1, #0
 8016092:	b096      	sub	sp, #88	; 0x58
 8016094:	4614      	mov	r4, r2
 8016096:	461d      	mov	r5, r3
 8016098:	da07      	bge.n	80160aa <__swhatbuf_r+0x22>
 801609a:	2300      	movs	r3, #0
 801609c:	602b      	str	r3, [r5, #0]
 801609e:	89b3      	ldrh	r3, [r6, #12]
 80160a0:	061a      	lsls	r2, r3, #24
 80160a2:	d410      	bmi.n	80160c6 <__swhatbuf_r+0x3e>
 80160a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80160a8:	e00e      	b.n	80160c8 <__swhatbuf_r+0x40>
 80160aa:	466a      	mov	r2, sp
 80160ac:	f001 fc24 	bl	80178f8 <_fstat_r>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	dbf2      	blt.n	801609a <__swhatbuf_r+0x12>
 80160b4:	9a01      	ldr	r2, [sp, #4]
 80160b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80160ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80160be:	425a      	negs	r2, r3
 80160c0:	415a      	adcs	r2, r3
 80160c2:	602a      	str	r2, [r5, #0]
 80160c4:	e7ee      	b.n	80160a4 <__swhatbuf_r+0x1c>
 80160c6:	2340      	movs	r3, #64	; 0x40
 80160c8:	2000      	movs	r0, #0
 80160ca:	6023      	str	r3, [r4, #0]
 80160cc:	b016      	add	sp, #88	; 0x58
 80160ce:	bd70      	pop	{r4, r5, r6, pc}

080160d0 <__smakebuf_r>:
 80160d0:	898b      	ldrh	r3, [r1, #12]
 80160d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160d4:	079d      	lsls	r5, r3, #30
 80160d6:	4606      	mov	r6, r0
 80160d8:	460c      	mov	r4, r1
 80160da:	d507      	bpl.n	80160ec <__smakebuf_r+0x1c>
 80160dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80160e0:	6023      	str	r3, [r4, #0]
 80160e2:	6123      	str	r3, [r4, #16]
 80160e4:	2301      	movs	r3, #1
 80160e6:	6163      	str	r3, [r4, #20]
 80160e8:	b002      	add	sp, #8
 80160ea:	bd70      	pop	{r4, r5, r6, pc}
 80160ec:	ab01      	add	r3, sp, #4
 80160ee:	466a      	mov	r2, sp
 80160f0:	f7ff ffca 	bl	8016088 <__swhatbuf_r>
 80160f4:	9900      	ldr	r1, [sp, #0]
 80160f6:	4605      	mov	r5, r0
 80160f8:	4630      	mov	r0, r6
 80160fa:	f000 fc9f 	bl	8016a3c <_malloc_r>
 80160fe:	b948      	cbnz	r0, 8016114 <__smakebuf_r+0x44>
 8016100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016104:	059a      	lsls	r2, r3, #22
 8016106:	d4ef      	bmi.n	80160e8 <__smakebuf_r+0x18>
 8016108:	f023 0303 	bic.w	r3, r3, #3
 801610c:	f043 0302 	orr.w	r3, r3, #2
 8016110:	81a3      	strh	r3, [r4, #12]
 8016112:	e7e3      	b.n	80160dc <__smakebuf_r+0xc>
 8016114:	4b0d      	ldr	r3, [pc, #52]	; (801614c <__smakebuf_r+0x7c>)
 8016116:	62b3      	str	r3, [r6, #40]	; 0x28
 8016118:	89a3      	ldrh	r3, [r4, #12]
 801611a:	6020      	str	r0, [r4, #0]
 801611c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016120:	81a3      	strh	r3, [r4, #12]
 8016122:	9b00      	ldr	r3, [sp, #0]
 8016124:	6163      	str	r3, [r4, #20]
 8016126:	9b01      	ldr	r3, [sp, #4]
 8016128:	6120      	str	r0, [r4, #16]
 801612a:	b15b      	cbz	r3, 8016144 <__smakebuf_r+0x74>
 801612c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016130:	4630      	mov	r0, r6
 8016132:	f001 fbf3 	bl	801791c <_isatty_r>
 8016136:	b128      	cbz	r0, 8016144 <__smakebuf_r+0x74>
 8016138:	89a3      	ldrh	r3, [r4, #12]
 801613a:	f023 0303 	bic.w	r3, r3, #3
 801613e:	f043 0301 	orr.w	r3, r3, #1
 8016142:	81a3      	strh	r3, [r4, #12]
 8016144:	89a3      	ldrh	r3, [r4, #12]
 8016146:	431d      	orrs	r5, r3
 8016148:	81a5      	strh	r5, [r4, #12]
 801614a:	e7cd      	b.n	80160e8 <__smakebuf_r+0x18>
 801614c:	08015889 	.word	0x08015889

08016150 <malloc>:
 8016150:	4b02      	ldr	r3, [pc, #8]	; (801615c <malloc+0xc>)
 8016152:	4601      	mov	r1, r0
 8016154:	6818      	ldr	r0, [r3, #0]
 8016156:	f000 bc71 	b.w	8016a3c <_malloc_r>
 801615a:	bf00      	nop
 801615c:	2000000c 	.word	0x2000000c

08016160 <__ascii_mbtowc>:
 8016160:	b082      	sub	sp, #8
 8016162:	b901      	cbnz	r1, 8016166 <__ascii_mbtowc+0x6>
 8016164:	a901      	add	r1, sp, #4
 8016166:	b142      	cbz	r2, 801617a <__ascii_mbtowc+0x1a>
 8016168:	b14b      	cbz	r3, 801617e <__ascii_mbtowc+0x1e>
 801616a:	7813      	ldrb	r3, [r2, #0]
 801616c:	600b      	str	r3, [r1, #0]
 801616e:	7812      	ldrb	r2, [r2, #0]
 8016170:	1c10      	adds	r0, r2, #0
 8016172:	bf18      	it	ne
 8016174:	2001      	movne	r0, #1
 8016176:	b002      	add	sp, #8
 8016178:	4770      	bx	lr
 801617a:	4610      	mov	r0, r2
 801617c:	e7fb      	b.n	8016176 <__ascii_mbtowc+0x16>
 801617e:	f06f 0001 	mvn.w	r0, #1
 8016182:	e7f8      	b.n	8016176 <__ascii_mbtowc+0x16>

08016184 <_Balloc>:
 8016184:	b570      	push	{r4, r5, r6, lr}
 8016186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016188:	4604      	mov	r4, r0
 801618a:	460e      	mov	r6, r1
 801618c:	b93d      	cbnz	r5, 801619e <_Balloc+0x1a>
 801618e:	2010      	movs	r0, #16
 8016190:	f7ff ffde 	bl	8016150 <malloc>
 8016194:	6260      	str	r0, [r4, #36]	; 0x24
 8016196:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801619a:	6005      	str	r5, [r0, #0]
 801619c:	60c5      	str	r5, [r0, #12]
 801619e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80161a0:	68eb      	ldr	r3, [r5, #12]
 80161a2:	b183      	cbz	r3, 80161c6 <_Balloc+0x42>
 80161a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161a6:	68db      	ldr	r3, [r3, #12]
 80161a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80161ac:	b9b8      	cbnz	r0, 80161de <_Balloc+0x5a>
 80161ae:	2101      	movs	r1, #1
 80161b0:	fa01 f506 	lsl.w	r5, r1, r6
 80161b4:	1d6a      	adds	r2, r5, #5
 80161b6:	0092      	lsls	r2, r2, #2
 80161b8:	4620      	mov	r0, r4
 80161ba:	f000 fbe2 	bl	8016982 <_calloc_r>
 80161be:	b160      	cbz	r0, 80161da <_Balloc+0x56>
 80161c0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80161c4:	e00e      	b.n	80161e4 <_Balloc+0x60>
 80161c6:	2221      	movs	r2, #33	; 0x21
 80161c8:	2104      	movs	r1, #4
 80161ca:	4620      	mov	r0, r4
 80161cc:	f000 fbd9 	bl	8016982 <_calloc_r>
 80161d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161d2:	60e8      	str	r0, [r5, #12]
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d1e4      	bne.n	80161a4 <_Balloc+0x20>
 80161da:	2000      	movs	r0, #0
 80161dc:	bd70      	pop	{r4, r5, r6, pc}
 80161de:	6802      	ldr	r2, [r0, #0]
 80161e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80161e4:	2300      	movs	r3, #0
 80161e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80161ea:	e7f7      	b.n	80161dc <_Balloc+0x58>

080161ec <_Bfree>:
 80161ec:	b570      	push	{r4, r5, r6, lr}
 80161ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80161f0:	4606      	mov	r6, r0
 80161f2:	460d      	mov	r5, r1
 80161f4:	b93c      	cbnz	r4, 8016206 <_Bfree+0x1a>
 80161f6:	2010      	movs	r0, #16
 80161f8:	f7ff ffaa 	bl	8016150 <malloc>
 80161fc:	6270      	str	r0, [r6, #36]	; 0x24
 80161fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016202:	6004      	str	r4, [r0, #0]
 8016204:	60c4      	str	r4, [r0, #12]
 8016206:	b13d      	cbz	r5, 8016218 <_Bfree+0x2c>
 8016208:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801620a:	686a      	ldr	r2, [r5, #4]
 801620c:	68db      	ldr	r3, [r3, #12]
 801620e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016212:	6029      	str	r1, [r5, #0]
 8016214:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016218:	bd70      	pop	{r4, r5, r6, pc}

0801621a <__multadd>:
 801621a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621e:	690d      	ldr	r5, [r1, #16]
 8016220:	461f      	mov	r7, r3
 8016222:	4606      	mov	r6, r0
 8016224:	460c      	mov	r4, r1
 8016226:	f101 0c14 	add.w	ip, r1, #20
 801622a:	2300      	movs	r3, #0
 801622c:	f8dc 0000 	ldr.w	r0, [ip]
 8016230:	b281      	uxth	r1, r0
 8016232:	fb02 7101 	mla	r1, r2, r1, r7
 8016236:	0c0f      	lsrs	r7, r1, #16
 8016238:	0c00      	lsrs	r0, r0, #16
 801623a:	fb02 7000 	mla	r0, r2, r0, r7
 801623e:	b289      	uxth	r1, r1
 8016240:	3301      	adds	r3, #1
 8016242:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016246:	429d      	cmp	r5, r3
 8016248:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801624c:	f84c 1b04 	str.w	r1, [ip], #4
 8016250:	dcec      	bgt.n	801622c <__multadd+0x12>
 8016252:	b1d7      	cbz	r7, 801628a <__multadd+0x70>
 8016254:	68a3      	ldr	r3, [r4, #8]
 8016256:	42ab      	cmp	r3, r5
 8016258:	dc12      	bgt.n	8016280 <__multadd+0x66>
 801625a:	6861      	ldr	r1, [r4, #4]
 801625c:	4630      	mov	r0, r6
 801625e:	3101      	adds	r1, #1
 8016260:	f7ff ff90 	bl	8016184 <_Balloc>
 8016264:	6922      	ldr	r2, [r4, #16]
 8016266:	3202      	adds	r2, #2
 8016268:	f104 010c 	add.w	r1, r4, #12
 801626c:	4680      	mov	r8, r0
 801626e:	0092      	lsls	r2, r2, #2
 8016270:	300c      	adds	r0, #12
 8016272:	f7fc fc8d 	bl	8012b90 <memcpy>
 8016276:	4621      	mov	r1, r4
 8016278:	4630      	mov	r0, r6
 801627a:	f7ff ffb7 	bl	80161ec <_Bfree>
 801627e:	4644      	mov	r4, r8
 8016280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016284:	3501      	adds	r5, #1
 8016286:	615f      	str	r7, [r3, #20]
 8016288:	6125      	str	r5, [r4, #16]
 801628a:	4620      	mov	r0, r4
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016290 <__s2b>:
 8016290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016294:	460c      	mov	r4, r1
 8016296:	4615      	mov	r5, r2
 8016298:	461f      	mov	r7, r3
 801629a:	2209      	movs	r2, #9
 801629c:	3308      	adds	r3, #8
 801629e:	4606      	mov	r6, r0
 80162a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80162a4:	2100      	movs	r1, #0
 80162a6:	2201      	movs	r2, #1
 80162a8:	429a      	cmp	r2, r3
 80162aa:	db20      	blt.n	80162ee <__s2b+0x5e>
 80162ac:	4630      	mov	r0, r6
 80162ae:	f7ff ff69 	bl	8016184 <_Balloc>
 80162b2:	9b08      	ldr	r3, [sp, #32]
 80162b4:	6143      	str	r3, [r0, #20]
 80162b6:	2d09      	cmp	r5, #9
 80162b8:	f04f 0301 	mov.w	r3, #1
 80162bc:	6103      	str	r3, [r0, #16]
 80162be:	dd19      	ble.n	80162f4 <__s2b+0x64>
 80162c0:	f104 0809 	add.w	r8, r4, #9
 80162c4:	46c1      	mov	r9, r8
 80162c6:	442c      	add	r4, r5
 80162c8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80162cc:	4601      	mov	r1, r0
 80162ce:	3b30      	subs	r3, #48	; 0x30
 80162d0:	220a      	movs	r2, #10
 80162d2:	4630      	mov	r0, r6
 80162d4:	f7ff ffa1 	bl	801621a <__multadd>
 80162d8:	45a1      	cmp	r9, r4
 80162da:	d1f5      	bne.n	80162c8 <__s2b+0x38>
 80162dc:	eb08 0405 	add.w	r4, r8, r5
 80162e0:	3c08      	subs	r4, #8
 80162e2:	1b2d      	subs	r5, r5, r4
 80162e4:	1963      	adds	r3, r4, r5
 80162e6:	42bb      	cmp	r3, r7
 80162e8:	db07      	blt.n	80162fa <__s2b+0x6a>
 80162ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162ee:	0052      	lsls	r2, r2, #1
 80162f0:	3101      	adds	r1, #1
 80162f2:	e7d9      	b.n	80162a8 <__s2b+0x18>
 80162f4:	340a      	adds	r4, #10
 80162f6:	2509      	movs	r5, #9
 80162f8:	e7f3      	b.n	80162e2 <__s2b+0x52>
 80162fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80162fe:	4601      	mov	r1, r0
 8016300:	3b30      	subs	r3, #48	; 0x30
 8016302:	220a      	movs	r2, #10
 8016304:	4630      	mov	r0, r6
 8016306:	f7ff ff88 	bl	801621a <__multadd>
 801630a:	e7eb      	b.n	80162e4 <__s2b+0x54>

0801630c <__hi0bits>:
 801630c:	0c02      	lsrs	r2, r0, #16
 801630e:	0412      	lsls	r2, r2, #16
 8016310:	4603      	mov	r3, r0
 8016312:	b9b2      	cbnz	r2, 8016342 <__hi0bits+0x36>
 8016314:	0403      	lsls	r3, r0, #16
 8016316:	2010      	movs	r0, #16
 8016318:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801631c:	bf04      	itt	eq
 801631e:	021b      	lsleq	r3, r3, #8
 8016320:	3008      	addeq	r0, #8
 8016322:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016326:	bf04      	itt	eq
 8016328:	011b      	lsleq	r3, r3, #4
 801632a:	3004      	addeq	r0, #4
 801632c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016330:	bf04      	itt	eq
 8016332:	009b      	lsleq	r3, r3, #2
 8016334:	3002      	addeq	r0, #2
 8016336:	2b00      	cmp	r3, #0
 8016338:	db06      	blt.n	8016348 <__hi0bits+0x3c>
 801633a:	005b      	lsls	r3, r3, #1
 801633c:	d503      	bpl.n	8016346 <__hi0bits+0x3a>
 801633e:	3001      	adds	r0, #1
 8016340:	4770      	bx	lr
 8016342:	2000      	movs	r0, #0
 8016344:	e7e8      	b.n	8016318 <__hi0bits+0xc>
 8016346:	2020      	movs	r0, #32
 8016348:	4770      	bx	lr

0801634a <__lo0bits>:
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	f013 0207 	ands.w	r2, r3, #7
 8016350:	4601      	mov	r1, r0
 8016352:	d00b      	beq.n	801636c <__lo0bits+0x22>
 8016354:	07da      	lsls	r2, r3, #31
 8016356:	d423      	bmi.n	80163a0 <__lo0bits+0x56>
 8016358:	0798      	lsls	r0, r3, #30
 801635a:	bf49      	itett	mi
 801635c:	085b      	lsrmi	r3, r3, #1
 801635e:	089b      	lsrpl	r3, r3, #2
 8016360:	2001      	movmi	r0, #1
 8016362:	600b      	strmi	r3, [r1, #0]
 8016364:	bf5c      	itt	pl
 8016366:	600b      	strpl	r3, [r1, #0]
 8016368:	2002      	movpl	r0, #2
 801636a:	4770      	bx	lr
 801636c:	b298      	uxth	r0, r3
 801636e:	b9a8      	cbnz	r0, 801639c <__lo0bits+0x52>
 8016370:	0c1b      	lsrs	r3, r3, #16
 8016372:	2010      	movs	r0, #16
 8016374:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016378:	bf04      	itt	eq
 801637a:	0a1b      	lsreq	r3, r3, #8
 801637c:	3008      	addeq	r0, #8
 801637e:	071a      	lsls	r2, r3, #28
 8016380:	bf04      	itt	eq
 8016382:	091b      	lsreq	r3, r3, #4
 8016384:	3004      	addeq	r0, #4
 8016386:	079a      	lsls	r2, r3, #30
 8016388:	bf04      	itt	eq
 801638a:	089b      	lsreq	r3, r3, #2
 801638c:	3002      	addeq	r0, #2
 801638e:	07da      	lsls	r2, r3, #31
 8016390:	d402      	bmi.n	8016398 <__lo0bits+0x4e>
 8016392:	085b      	lsrs	r3, r3, #1
 8016394:	d006      	beq.n	80163a4 <__lo0bits+0x5a>
 8016396:	3001      	adds	r0, #1
 8016398:	600b      	str	r3, [r1, #0]
 801639a:	4770      	bx	lr
 801639c:	4610      	mov	r0, r2
 801639e:	e7e9      	b.n	8016374 <__lo0bits+0x2a>
 80163a0:	2000      	movs	r0, #0
 80163a2:	4770      	bx	lr
 80163a4:	2020      	movs	r0, #32
 80163a6:	4770      	bx	lr

080163a8 <__i2b>:
 80163a8:	b510      	push	{r4, lr}
 80163aa:	460c      	mov	r4, r1
 80163ac:	2101      	movs	r1, #1
 80163ae:	f7ff fee9 	bl	8016184 <_Balloc>
 80163b2:	2201      	movs	r2, #1
 80163b4:	6144      	str	r4, [r0, #20]
 80163b6:	6102      	str	r2, [r0, #16]
 80163b8:	bd10      	pop	{r4, pc}

080163ba <__multiply>:
 80163ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163be:	4614      	mov	r4, r2
 80163c0:	690a      	ldr	r2, [r1, #16]
 80163c2:	6923      	ldr	r3, [r4, #16]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	bfb8      	it	lt
 80163c8:	460b      	movlt	r3, r1
 80163ca:	4688      	mov	r8, r1
 80163cc:	bfbc      	itt	lt
 80163ce:	46a0      	movlt	r8, r4
 80163d0:	461c      	movlt	r4, r3
 80163d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80163d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80163da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80163de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80163e2:	eb07 0609 	add.w	r6, r7, r9
 80163e6:	42b3      	cmp	r3, r6
 80163e8:	bfb8      	it	lt
 80163ea:	3101      	addlt	r1, #1
 80163ec:	f7ff feca 	bl	8016184 <_Balloc>
 80163f0:	f100 0514 	add.w	r5, r0, #20
 80163f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80163f8:	462b      	mov	r3, r5
 80163fa:	2200      	movs	r2, #0
 80163fc:	4573      	cmp	r3, lr
 80163fe:	d316      	bcc.n	801642e <__multiply+0x74>
 8016400:	f104 0214 	add.w	r2, r4, #20
 8016404:	f108 0114 	add.w	r1, r8, #20
 8016408:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801640c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	9b00      	ldr	r3, [sp, #0]
 8016414:	9201      	str	r2, [sp, #4]
 8016416:	4293      	cmp	r3, r2
 8016418:	d80c      	bhi.n	8016434 <__multiply+0x7a>
 801641a:	2e00      	cmp	r6, #0
 801641c:	dd03      	ble.n	8016426 <__multiply+0x6c>
 801641e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016422:	2b00      	cmp	r3, #0
 8016424:	d05d      	beq.n	80164e2 <__multiply+0x128>
 8016426:	6106      	str	r6, [r0, #16]
 8016428:	b003      	add	sp, #12
 801642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801642e:	f843 2b04 	str.w	r2, [r3], #4
 8016432:	e7e3      	b.n	80163fc <__multiply+0x42>
 8016434:	f8b2 b000 	ldrh.w	fp, [r2]
 8016438:	f1bb 0f00 	cmp.w	fp, #0
 801643c:	d023      	beq.n	8016486 <__multiply+0xcc>
 801643e:	4689      	mov	r9, r1
 8016440:	46ac      	mov	ip, r5
 8016442:	f04f 0800 	mov.w	r8, #0
 8016446:	f859 4b04 	ldr.w	r4, [r9], #4
 801644a:	f8dc a000 	ldr.w	sl, [ip]
 801644e:	b2a3      	uxth	r3, r4
 8016450:	fa1f fa8a 	uxth.w	sl, sl
 8016454:	fb0b a303 	mla	r3, fp, r3, sl
 8016458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801645c:	f8dc 4000 	ldr.w	r4, [ip]
 8016460:	4443      	add	r3, r8
 8016462:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016466:	fb0b 840a 	mla	r4, fp, sl, r8
 801646a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801646e:	46e2      	mov	sl, ip
 8016470:	b29b      	uxth	r3, r3
 8016472:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016476:	454f      	cmp	r7, r9
 8016478:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801647c:	f84a 3b04 	str.w	r3, [sl], #4
 8016480:	d82b      	bhi.n	80164da <__multiply+0x120>
 8016482:	f8cc 8004 	str.w	r8, [ip, #4]
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801648c:	3204      	adds	r2, #4
 801648e:	f1ba 0f00 	cmp.w	sl, #0
 8016492:	d020      	beq.n	80164d6 <__multiply+0x11c>
 8016494:	682b      	ldr	r3, [r5, #0]
 8016496:	4689      	mov	r9, r1
 8016498:	46a8      	mov	r8, r5
 801649a:	f04f 0b00 	mov.w	fp, #0
 801649e:	f8b9 c000 	ldrh.w	ip, [r9]
 80164a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80164a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80164aa:	445c      	add	r4, fp
 80164ac:	46c4      	mov	ip, r8
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80164b4:	f84c 3b04 	str.w	r3, [ip], #4
 80164b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80164bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80164c0:	0c1b      	lsrs	r3, r3, #16
 80164c2:	fb0a b303 	mla	r3, sl, r3, fp
 80164c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80164ca:	454f      	cmp	r7, r9
 80164cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80164d0:	d805      	bhi.n	80164de <__multiply+0x124>
 80164d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80164d6:	3504      	adds	r5, #4
 80164d8:	e79b      	b.n	8016412 <__multiply+0x58>
 80164da:	46d4      	mov	ip, sl
 80164dc:	e7b3      	b.n	8016446 <__multiply+0x8c>
 80164de:	46e0      	mov	r8, ip
 80164e0:	e7dd      	b.n	801649e <__multiply+0xe4>
 80164e2:	3e01      	subs	r6, #1
 80164e4:	e799      	b.n	801641a <__multiply+0x60>
	...

080164e8 <__pow5mult>:
 80164e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164ec:	4615      	mov	r5, r2
 80164ee:	f012 0203 	ands.w	r2, r2, #3
 80164f2:	4606      	mov	r6, r0
 80164f4:	460f      	mov	r7, r1
 80164f6:	d007      	beq.n	8016508 <__pow5mult+0x20>
 80164f8:	3a01      	subs	r2, #1
 80164fa:	4c21      	ldr	r4, [pc, #132]	; (8016580 <__pow5mult+0x98>)
 80164fc:	2300      	movs	r3, #0
 80164fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016502:	f7ff fe8a 	bl	801621a <__multadd>
 8016506:	4607      	mov	r7, r0
 8016508:	10ad      	asrs	r5, r5, #2
 801650a:	d035      	beq.n	8016578 <__pow5mult+0x90>
 801650c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801650e:	b93c      	cbnz	r4, 8016520 <__pow5mult+0x38>
 8016510:	2010      	movs	r0, #16
 8016512:	f7ff fe1d 	bl	8016150 <malloc>
 8016516:	6270      	str	r0, [r6, #36]	; 0x24
 8016518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801651c:	6004      	str	r4, [r0, #0]
 801651e:	60c4      	str	r4, [r0, #12]
 8016520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016528:	b94c      	cbnz	r4, 801653e <__pow5mult+0x56>
 801652a:	f240 2171 	movw	r1, #625	; 0x271
 801652e:	4630      	mov	r0, r6
 8016530:	f7ff ff3a 	bl	80163a8 <__i2b>
 8016534:	2300      	movs	r3, #0
 8016536:	f8c8 0008 	str.w	r0, [r8, #8]
 801653a:	4604      	mov	r4, r0
 801653c:	6003      	str	r3, [r0, #0]
 801653e:	f04f 0800 	mov.w	r8, #0
 8016542:	07eb      	lsls	r3, r5, #31
 8016544:	d50a      	bpl.n	801655c <__pow5mult+0x74>
 8016546:	4639      	mov	r1, r7
 8016548:	4622      	mov	r2, r4
 801654a:	4630      	mov	r0, r6
 801654c:	f7ff ff35 	bl	80163ba <__multiply>
 8016550:	4639      	mov	r1, r7
 8016552:	4681      	mov	r9, r0
 8016554:	4630      	mov	r0, r6
 8016556:	f7ff fe49 	bl	80161ec <_Bfree>
 801655a:	464f      	mov	r7, r9
 801655c:	106d      	asrs	r5, r5, #1
 801655e:	d00b      	beq.n	8016578 <__pow5mult+0x90>
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	b938      	cbnz	r0, 8016574 <__pow5mult+0x8c>
 8016564:	4622      	mov	r2, r4
 8016566:	4621      	mov	r1, r4
 8016568:	4630      	mov	r0, r6
 801656a:	f7ff ff26 	bl	80163ba <__multiply>
 801656e:	6020      	str	r0, [r4, #0]
 8016570:	f8c0 8000 	str.w	r8, [r0]
 8016574:	4604      	mov	r4, r0
 8016576:	e7e4      	b.n	8016542 <__pow5mult+0x5a>
 8016578:	4638      	mov	r0, r7
 801657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801657e:	bf00      	nop
 8016580:	08018390 	.word	0x08018390

08016584 <__lshift>:
 8016584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016588:	460c      	mov	r4, r1
 801658a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801658e:	6923      	ldr	r3, [r4, #16]
 8016590:	6849      	ldr	r1, [r1, #4]
 8016592:	eb0a 0903 	add.w	r9, sl, r3
 8016596:	68a3      	ldr	r3, [r4, #8]
 8016598:	4607      	mov	r7, r0
 801659a:	4616      	mov	r6, r2
 801659c:	f109 0501 	add.w	r5, r9, #1
 80165a0:	42ab      	cmp	r3, r5
 80165a2:	db32      	blt.n	801660a <__lshift+0x86>
 80165a4:	4638      	mov	r0, r7
 80165a6:	f7ff fded 	bl	8016184 <_Balloc>
 80165aa:	2300      	movs	r3, #0
 80165ac:	4680      	mov	r8, r0
 80165ae:	f100 0114 	add.w	r1, r0, #20
 80165b2:	461a      	mov	r2, r3
 80165b4:	4553      	cmp	r3, sl
 80165b6:	db2b      	blt.n	8016610 <__lshift+0x8c>
 80165b8:	6920      	ldr	r0, [r4, #16]
 80165ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80165be:	f104 0314 	add.w	r3, r4, #20
 80165c2:	f016 021f 	ands.w	r2, r6, #31
 80165c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80165ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80165ce:	d025      	beq.n	801661c <__lshift+0x98>
 80165d0:	f1c2 0e20 	rsb	lr, r2, #32
 80165d4:	2000      	movs	r0, #0
 80165d6:	681e      	ldr	r6, [r3, #0]
 80165d8:	468a      	mov	sl, r1
 80165da:	4096      	lsls	r6, r2
 80165dc:	4330      	orrs	r0, r6
 80165de:	f84a 0b04 	str.w	r0, [sl], #4
 80165e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80165e6:	459c      	cmp	ip, r3
 80165e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80165ec:	d814      	bhi.n	8016618 <__lshift+0x94>
 80165ee:	6048      	str	r0, [r1, #4]
 80165f0:	b108      	cbz	r0, 80165f6 <__lshift+0x72>
 80165f2:	f109 0502 	add.w	r5, r9, #2
 80165f6:	3d01      	subs	r5, #1
 80165f8:	4638      	mov	r0, r7
 80165fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80165fe:	4621      	mov	r1, r4
 8016600:	f7ff fdf4 	bl	80161ec <_Bfree>
 8016604:	4640      	mov	r0, r8
 8016606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801660a:	3101      	adds	r1, #1
 801660c:	005b      	lsls	r3, r3, #1
 801660e:	e7c7      	b.n	80165a0 <__lshift+0x1c>
 8016610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016614:	3301      	adds	r3, #1
 8016616:	e7cd      	b.n	80165b4 <__lshift+0x30>
 8016618:	4651      	mov	r1, sl
 801661a:	e7dc      	b.n	80165d6 <__lshift+0x52>
 801661c:	3904      	subs	r1, #4
 801661e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016622:	f841 2f04 	str.w	r2, [r1, #4]!
 8016626:	459c      	cmp	ip, r3
 8016628:	d8f9      	bhi.n	801661e <__lshift+0x9a>
 801662a:	e7e4      	b.n	80165f6 <__lshift+0x72>

0801662c <__mcmp>:
 801662c:	6903      	ldr	r3, [r0, #16]
 801662e:	690a      	ldr	r2, [r1, #16]
 8016630:	1a9b      	subs	r3, r3, r2
 8016632:	b530      	push	{r4, r5, lr}
 8016634:	d10c      	bne.n	8016650 <__mcmp+0x24>
 8016636:	0092      	lsls	r2, r2, #2
 8016638:	3014      	adds	r0, #20
 801663a:	3114      	adds	r1, #20
 801663c:	1884      	adds	r4, r0, r2
 801663e:	4411      	add	r1, r2
 8016640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016648:	4295      	cmp	r5, r2
 801664a:	d003      	beq.n	8016654 <__mcmp+0x28>
 801664c:	d305      	bcc.n	801665a <__mcmp+0x2e>
 801664e:	2301      	movs	r3, #1
 8016650:	4618      	mov	r0, r3
 8016652:	bd30      	pop	{r4, r5, pc}
 8016654:	42a0      	cmp	r0, r4
 8016656:	d3f3      	bcc.n	8016640 <__mcmp+0x14>
 8016658:	e7fa      	b.n	8016650 <__mcmp+0x24>
 801665a:	f04f 33ff 	mov.w	r3, #4294967295
 801665e:	e7f7      	b.n	8016650 <__mcmp+0x24>

08016660 <__mdiff>:
 8016660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016664:	460d      	mov	r5, r1
 8016666:	4607      	mov	r7, r0
 8016668:	4611      	mov	r1, r2
 801666a:	4628      	mov	r0, r5
 801666c:	4614      	mov	r4, r2
 801666e:	f7ff ffdd 	bl	801662c <__mcmp>
 8016672:	1e06      	subs	r6, r0, #0
 8016674:	d108      	bne.n	8016688 <__mdiff+0x28>
 8016676:	4631      	mov	r1, r6
 8016678:	4638      	mov	r0, r7
 801667a:	f7ff fd83 	bl	8016184 <_Balloc>
 801667e:	2301      	movs	r3, #1
 8016680:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016688:	bfa4      	itt	ge
 801668a:	4623      	movge	r3, r4
 801668c:	462c      	movge	r4, r5
 801668e:	4638      	mov	r0, r7
 8016690:	6861      	ldr	r1, [r4, #4]
 8016692:	bfa6      	itte	ge
 8016694:	461d      	movge	r5, r3
 8016696:	2600      	movge	r6, #0
 8016698:	2601      	movlt	r6, #1
 801669a:	f7ff fd73 	bl	8016184 <_Balloc>
 801669e:	692b      	ldr	r3, [r5, #16]
 80166a0:	60c6      	str	r6, [r0, #12]
 80166a2:	6926      	ldr	r6, [r4, #16]
 80166a4:	f105 0914 	add.w	r9, r5, #20
 80166a8:	f104 0214 	add.w	r2, r4, #20
 80166ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80166b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80166b4:	f100 0514 	add.w	r5, r0, #20
 80166b8:	f04f 0e00 	mov.w	lr, #0
 80166bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80166c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80166c4:	fa1e f18a 	uxtah	r1, lr, sl
 80166c8:	b2a3      	uxth	r3, r4
 80166ca:	1ac9      	subs	r1, r1, r3
 80166cc:	0c23      	lsrs	r3, r4, #16
 80166ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80166d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80166d6:	b289      	uxth	r1, r1
 80166d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80166dc:	45c8      	cmp	r8, r9
 80166de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80166e2:	4694      	mov	ip, r2
 80166e4:	f845 3b04 	str.w	r3, [r5], #4
 80166e8:	d8e8      	bhi.n	80166bc <__mdiff+0x5c>
 80166ea:	45bc      	cmp	ip, r7
 80166ec:	d304      	bcc.n	80166f8 <__mdiff+0x98>
 80166ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80166f2:	b183      	cbz	r3, 8016716 <__mdiff+0xb6>
 80166f4:	6106      	str	r6, [r0, #16]
 80166f6:	e7c5      	b.n	8016684 <__mdiff+0x24>
 80166f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80166fc:	fa1e f381 	uxtah	r3, lr, r1
 8016700:	141a      	asrs	r2, r3, #16
 8016702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016706:	b29b      	uxth	r3, r3
 8016708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801670c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016710:	f845 3b04 	str.w	r3, [r5], #4
 8016714:	e7e9      	b.n	80166ea <__mdiff+0x8a>
 8016716:	3e01      	subs	r6, #1
 8016718:	e7e9      	b.n	80166ee <__mdiff+0x8e>
	...

0801671c <__ulp>:
 801671c:	4b12      	ldr	r3, [pc, #72]	; (8016768 <__ulp+0x4c>)
 801671e:	ee10 2a90 	vmov	r2, s1
 8016722:	401a      	ands	r2, r3
 8016724:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016728:	2b00      	cmp	r3, #0
 801672a:	dd04      	ble.n	8016736 <__ulp+0x1a>
 801672c:	2000      	movs	r0, #0
 801672e:	4619      	mov	r1, r3
 8016730:	ec41 0b10 	vmov	d0, r0, r1
 8016734:	4770      	bx	lr
 8016736:	425b      	negs	r3, r3
 8016738:	151b      	asrs	r3, r3, #20
 801673a:	2b13      	cmp	r3, #19
 801673c:	f04f 0000 	mov.w	r0, #0
 8016740:	f04f 0100 	mov.w	r1, #0
 8016744:	dc04      	bgt.n	8016750 <__ulp+0x34>
 8016746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801674a:	fa42 f103 	asr.w	r1, r2, r3
 801674e:	e7ef      	b.n	8016730 <__ulp+0x14>
 8016750:	3b14      	subs	r3, #20
 8016752:	2b1e      	cmp	r3, #30
 8016754:	f04f 0201 	mov.w	r2, #1
 8016758:	bfda      	itte	le
 801675a:	f1c3 031f 	rsble	r3, r3, #31
 801675e:	fa02 f303 	lslle.w	r3, r2, r3
 8016762:	4613      	movgt	r3, r2
 8016764:	4618      	mov	r0, r3
 8016766:	e7e3      	b.n	8016730 <__ulp+0x14>
 8016768:	7ff00000 	.word	0x7ff00000

0801676c <__b2d>:
 801676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676e:	6905      	ldr	r5, [r0, #16]
 8016770:	f100 0714 	add.w	r7, r0, #20
 8016774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016778:	1f2e      	subs	r6, r5, #4
 801677a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801677e:	4620      	mov	r0, r4
 8016780:	f7ff fdc4 	bl	801630c <__hi0bits>
 8016784:	f1c0 0320 	rsb	r3, r0, #32
 8016788:	280a      	cmp	r0, #10
 801678a:	600b      	str	r3, [r1, #0]
 801678c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016804 <__b2d+0x98>
 8016790:	dc14      	bgt.n	80167bc <__b2d+0x50>
 8016792:	f1c0 0e0b 	rsb	lr, r0, #11
 8016796:	fa24 f10e 	lsr.w	r1, r4, lr
 801679a:	42b7      	cmp	r7, r6
 801679c:	ea41 030c 	orr.w	r3, r1, ip
 80167a0:	bf34      	ite	cc
 80167a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167a6:	2100      	movcs	r1, #0
 80167a8:	3015      	adds	r0, #21
 80167aa:	fa04 f000 	lsl.w	r0, r4, r0
 80167ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80167b2:	ea40 0201 	orr.w	r2, r0, r1
 80167b6:	ec43 2b10 	vmov	d0, r2, r3
 80167ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167bc:	42b7      	cmp	r7, r6
 80167be:	bf3a      	itte	cc
 80167c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80167c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167c8:	2100      	movcs	r1, #0
 80167ca:	380b      	subs	r0, #11
 80167cc:	d015      	beq.n	80167fa <__b2d+0x8e>
 80167ce:	4084      	lsls	r4, r0
 80167d0:	f1c0 0520 	rsb	r5, r0, #32
 80167d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80167d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80167dc:	42be      	cmp	r6, r7
 80167de:	fa21 fc05 	lsr.w	ip, r1, r5
 80167e2:	ea44 030c 	orr.w	r3, r4, ip
 80167e6:	bf8c      	ite	hi
 80167e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80167ec:	2400      	movls	r4, #0
 80167ee:	fa01 f000 	lsl.w	r0, r1, r0
 80167f2:	40ec      	lsrs	r4, r5
 80167f4:	ea40 0204 	orr.w	r2, r0, r4
 80167f8:	e7dd      	b.n	80167b6 <__b2d+0x4a>
 80167fa:	ea44 030c 	orr.w	r3, r4, ip
 80167fe:	460a      	mov	r2, r1
 8016800:	e7d9      	b.n	80167b6 <__b2d+0x4a>
 8016802:	bf00      	nop
 8016804:	3ff00000 	.word	0x3ff00000

08016808 <__d2b>:
 8016808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801680c:	460e      	mov	r6, r1
 801680e:	2101      	movs	r1, #1
 8016810:	ec59 8b10 	vmov	r8, r9, d0
 8016814:	4615      	mov	r5, r2
 8016816:	f7ff fcb5 	bl	8016184 <_Balloc>
 801681a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801681e:	4607      	mov	r7, r0
 8016820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016824:	bb34      	cbnz	r4, 8016874 <__d2b+0x6c>
 8016826:	9301      	str	r3, [sp, #4]
 8016828:	f1b8 0300 	subs.w	r3, r8, #0
 801682c:	d027      	beq.n	801687e <__d2b+0x76>
 801682e:	a802      	add	r0, sp, #8
 8016830:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016834:	f7ff fd89 	bl	801634a <__lo0bits>
 8016838:	9900      	ldr	r1, [sp, #0]
 801683a:	b1f0      	cbz	r0, 801687a <__d2b+0x72>
 801683c:	9a01      	ldr	r2, [sp, #4]
 801683e:	f1c0 0320 	rsb	r3, r0, #32
 8016842:	fa02 f303 	lsl.w	r3, r2, r3
 8016846:	430b      	orrs	r3, r1
 8016848:	40c2      	lsrs	r2, r0
 801684a:	617b      	str	r3, [r7, #20]
 801684c:	9201      	str	r2, [sp, #4]
 801684e:	9b01      	ldr	r3, [sp, #4]
 8016850:	61bb      	str	r3, [r7, #24]
 8016852:	2b00      	cmp	r3, #0
 8016854:	bf14      	ite	ne
 8016856:	2102      	movne	r1, #2
 8016858:	2101      	moveq	r1, #1
 801685a:	6139      	str	r1, [r7, #16]
 801685c:	b1c4      	cbz	r4, 8016890 <__d2b+0x88>
 801685e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016862:	4404      	add	r4, r0
 8016864:	6034      	str	r4, [r6, #0]
 8016866:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801686a:	6028      	str	r0, [r5, #0]
 801686c:	4638      	mov	r0, r7
 801686e:	b003      	add	sp, #12
 8016870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016878:	e7d5      	b.n	8016826 <__d2b+0x1e>
 801687a:	6179      	str	r1, [r7, #20]
 801687c:	e7e7      	b.n	801684e <__d2b+0x46>
 801687e:	a801      	add	r0, sp, #4
 8016880:	f7ff fd63 	bl	801634a <__lo0bits>
 8016884:	9b01      	ldr	r3, [sp, #4]
 8016886:	617b      	str	r3, [r7, #20]
 8016888:	2101      	movs	r1, #1
 801688a:	6139      	str	r1, [r7, #16]
 801688c:	3020      	adds	r0, #32
 801688e:	e7e5      	b.n	801685c <__d2b+0x54>
 8016890:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016898:	6030      	str	r0, [r6, #0]
 801689a:	6918      	ldr	r0, [r3, #16]
 801689c:	f7ff fd36 	bl	801630c <__hi0bits>
 80168a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80168a4:	e7e1      	b.n	801686a <__d2b+0x62>

080168a6 <__ratio>:
 80168a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168aa:	4688      	mov	r8, r1
 80168ac:	4669      	mov	r1, sp
 80168ae:	4681      	mov	r9, r0
 80168b0:	f7ff ff5c 	bl	801676c <__b2d>
 80168b4:	a901      	add	r1, sp, #4
 80168b6:	4640      	mov	r0, r8
 80168b8:	ec57 6b10 	vmov	r6, r7, d0
 80168bc:	f7ff ff56 	bl	801676c <__b2d>
 80168c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80168c8:	eba3 0c02 	sub.w	ip, r3, r2
 80168cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168d0:	1a9b      	subs	r3, r3, r2
 80168d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80168d6:	ec5b ab10 	vmov	sl, fp, d0
 80168da:	2b00      	cmp	r3, #0
 80168dc:	bfce      	itee	gt
 80168de:	463a      	movgt	r2, r7
 80168e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80168e4:	465a      	movle	r2, fp
 80168e6:	4659      	mov	r1, fp
 80168e8:	463d      	mov	r5, r7
 80168ea:	bfd4      	ite	le
 80168ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80168f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80168f4:	4630      	mov	r0, r6
 80168f6:	ee10 2a10 	vmov	r2, s0
 80168fa:	460b      	mov	r3, r1
 80168fc:	4629      	mov	r1, r5
 80168fe:	f7e9 ffbd 	bl	800087c <__aeabi_ddiv>
 8016902:	ec41 0b10 	vmov	d0, r0, r1
 8016906:	b003      	add	sp, #12
 8016908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801690c <__copybits>:
 801690c:	3901      	subs	r1, #1
 801690e:	b510      	push	{r4, lr}
 8016910:	1149      	asrs	r1, r1, #5
 8016912:	6914      	ldr	r4, [r2, #16]
 8016914:	3101      	adds	r1, #1
 8016916:	f102 0314 	add.w	r3, r2, #20
 801691a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801691e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016922:	42a3      	cmp	r3, r4
 8016924:	4602      	mov	r2, r0
 8016926:	d303      	bcc.n	8016930 <__copybits+0x24>
 8016928:	2300      	movs	r3, #0
 801692a:	428a      	cmp	r2, r1
 801692c:	d305      	bcc.n	801693a <__copybits+0x2e>
 801692e:	bd10      	pop	{r4, pc}
 8016930:	f853 2b04 	ldr.w	r2, [r3], #4
 8016934:	f840 2b04 	str.w	r2, [r0], #4
 8016938:	e7f3      	b.n	8016922 <__copybits+0x16>
 801693a:	f842 3b04 	str.w	r3, [r2], #4
 801693e:	e7f4      	b.n	801692a <__copybits+0x1e>

08016940 <__any_on>:
 8016940:	f100 0214 	add.w	r2, r0, #20
 8016944:	6900      	ldr	r0, [r0, #16]
 8016946:	114b      	asrs	r3, r1, #5
 8016948:	4298      	cmp	r0, r3
 801694a:	b510      	push	{r4, lr}
 801694c:	db11      	blt.n	8016972 <__any_on+0x32>
 801694e:	dd0a      	ble.n	8016966 <__any_on+0x26>
 8016950:	f011 011f 	ands.w	r1, r1, #31
 8016954:	d007      	beq.n	8016966 <__any_on+0x26>
 8016956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801695a:	fa24 f001 	lsr.w	r0, r4, r1
 801695e:	fa00 f101 	lsl.w	r1, r0, r1
 8016962:	428c      	cmp	r4, r1
 8016964:	d10b      	bne.n	801697e <__any_on+0x3e>
 8016966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801696a:	4293      	cmp	r3, r2
 801696c:	d803      	bhi.n	8016976 <__any_on+0x36>
 801696e:	2000      	movs	r0, #0
 8016970:	bd10      	pop	{r4, pc}
 8016972:	4603      	mov	r3, r0
 8016974:	e7f7      	b.n	8016966 <__any_on+0x26>
 8016976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801697a:	2900      	cmp	r1, #0
 801697c:	d0f5      	beq.n	801696a <__any_on+0x2a>
 801697e:	2001      	movs	r0, #1
 8016980:	e7f6      	b.n	8016970 <__any_on+0x30>

08016982 <_calloc_r>:
 8016982:	b538      	push	{r3, r4, r5, lr}
 8016984:	fb02 f401 	mul.w	r4, r2, r1
 8016988:	4621      	mov	r1, r4
 801698a:	f000 f857 	bl	8016a3c <_malloc_r>
 801698e:	4605      	mov	r5, r0
 8016990:	b118      	cbz	r0, 801699a <_calloc_r+0x18>
 8016992:	4622      	mov	r2, r4
 8016994:	2100      	movs	r1, #0
 8016996:	f7fc f906 	bl	8012ba6 <memset>
 801699a:	4628      	mov	r0, r5
 801699c:	bd38      	pop	{r3, r4, r5, pc}
	...

080169a0 <_free_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4605      	mov	r5, r0
 80169a4:	2900      	cmp	r1, #0
 80169a6:	d045      	beq.n	8016a34 <_free_r+0x94>
 80169a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169ac:	1f0c      	subs	r4, r1, #4
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	bfb8      	it	lt
 80169b2:	18e4      	addlt	r4, r4, r3
 80169b4:	f000 ffdb 	bl	801796e <__malloc_lock>
 80169b8:	4a1f      	ldr	r2, [pc, #124]	; (8016a38 <_free_r+0x98>)
 80169ba:	6813      	ldr	r3, [r2, #0]
 80169bc:	4610      	mov	r0, r2
 80169be:	b933      	cbnz	r3, 80169ce <_free_r+0x2e>
 80169c0:	6063      	str	r3, [r4, #4]
 80169c2:	6014      	str	r4, [r2, #0]
 80169c4:	4628      	mov	r0, r5
 80169c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169ca:	f000 bfd1 	b.w	8017970 <__malloc_unlock>
 80169ce:	42a3      	cmp	r3, r4
 80169d0:	d90c      	bls.n	80169ec <_free_r+0x4c>
 80169d2:	6821      	ldr	r1, [r4, #0]
 80169d4:	1862      	adds	r2, r4, r1
 80169d6:	4293      	cmp	r3, r2
 80169d8:	bf04      	itt	eq
 80169da:	681a      	ldreq	r2, [r3, #0]
 80169dc:	685b      	ldreq	r3, [r3, #4]
 80169de:	6063      	str	r3, [r4, #4]
 80169e0:	bf04      	itt	eq
 80169e2:	1852      	addeq	r2, r2, r1
 80169e4:	6022      	streq	r2, [r4, #0]
 80169e6:	6004      	str	r4, [r0, #0]
 80169e8:	e7ec      	b.n	80169c4 <_free_r+0x24>
 80169ea:	4613      	mov	r3, r2
 80169ec:	685a      	ldr	r2, [r3, #4]
 80169ee:	b10a      	cbz	r2, 80169f4 <_free_r+0x54>
 80169f0:	42a2      	cmp	r2, r4
 80169f2:	d9fa      	bls.n	80169ea <_free_r+0x4a>
 80169f4:	6819      	ldr	r1, [r3, #0]
 80169f6:	1858      	adds	r0, r3, r1
 80169f8:	42a0      	cmp	r0, r4
 80169fa:	d10b      	bne.n	8016a14 <_free_r+0x74>
 80169fc:	6820      	ldr	r0, [r4, #0]
 80169fe:	4401      	add	r1, r0
 8016a00:	1858      	adds	r0, r3, r1
 8016a02:	4282      	cmp	r2, r0
 8016a04:	6019      	str	r1, [r3, #0]
 8016a06:	d1dd      	bne.n	80169c4 <_free_r+0x24>
 8016a08:	6810      	ldr	r0, [r2, #0]
 8016a0a:	6852      	ldr	r2, [r2, #4]
 8016a0c:	605a      	str	r2, [r3, #4]
 8016a0e:	4401      	add	r1, r0
 8016a10:	6019      	str	r1, [r3, #0]
 8016a12:	e7d7      	b.n	80169c4 <_free_r+0x24>
 8016a14:	d902      	bls.n	8016a1c <_free_r+0x7c>
 8016a16:	230c      	movs	r3, #12
 8016a18:	602b      	str	r3, [r5, #0]
 8016a1a:	e7d3      	b.n	80169c4 <_free_r+0x24>
 8016a1c:	6820      	ldr	r0, [r4, #0]
 8016a1e:	1821      	adds	r1, r4, r0
 8016a20:	428a      	cmp	r2, r1
 8016a22:	bf04      	itt	eq
 8016a24:	6811      	ldreq	r1, [r2, #0]
 8016a26:	6852      	ldreq	r2, [r2, #4]
 8016a28:	6062      	str	r2, [r4, #4]
 8016a2a:	bf04      	itt	eq
 8016a2c:	1809      	addeq	r1, r1, r0
 8016a2e:	6021      	streq	r1, [r4, #0]
 8016a30:	605c      	str	r4, [r3, #4]
 8016a32:	e7c7      	b.n	80169c4 <_free_r+0x24>
 8016a34:	bd38      	pop	{r3, r4, r5, pc}
 8016a36:	bf00      	nop
 8016a38:	20037468 	.word	0x20037468

08016a3c <_malloc_r>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	1ccd      	adds	r5, r1, #3
 8016a40:	f025 0503 	bic.w	r5, r5, #3
 8016a44:	3508      	adds	r5, #8
 8016a46:	2d0c      	cmp	r5, #12
 8016a48:	bf38      	it	cc
 8016a4a:	250c      	movcc	r5, #12
 8016a4c:	2d00      	cmp	r5, #0
 8016a4e:	4606      	mov	r6, r0
 8016a50:	db01      	blt.n	8016a56 <_malloc_r+0x1a>
 8016a52:	42a9      	cmp	r1, r5
 8016a54:	d903      	bls.n	8016a5e <_malloc_r+0x22>
 8016a56:	230c      	movs	r3, #12
 8016a58:	6033      	str	r3, [r6, #0]
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	bd70      	pop	{r4, r5, r6, pc}
 8016a5e:	f000 ff86 	bl	801796e <__malloc_lock>
 8016a62:	4a21      	ldr	r2, [pc, #132]	; (8016ae8 <_malloc_r+0xac>)
 8016a64:	6814      	ldr	r4, [r2, #0]
 8016a66:	4621      	mov	r1, r4
 8016a68:	b991      	cbnz	r1, 8016a90 <_malloc_r+0x54>
 8016a6a:	4c20      	ldr	r4, [pc, #128]	; (8016aec <_malloc_r+0xb0>)
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	b91b      	cbnz	r3, 8016a78 <_malloc_r+0x3c>
 8016a70:	4630      	mov	r0, r6
 8016a72:	f000 fe19 	bl	80176a8 <_sbrk_r>
 8016a76:	6020      	str	r0, [r4, #0]
 8016a78:	4629      	mov	r1, r5
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	f000 fe14 	bl	80176a8 <_sbrk_r>
 8016a80:	1c43      	adds	r3, r0, #1
 8016a82:	d124      	bne.n	8016ace <_malloc_r+0x92>
 8016a84:	230c      	movs	r3, #12
 8016a86:	6033      	str	r3, [r6, #0]
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f000 ff71 	bl	8017970 <__malloc_unlock>
 8016a8e:	e7e4      	b.n	8016a5a <_malloc_r+0x1e>
 8016a90:	680b      	ldr	r3, [r1, #0]
 8016a92:	1b5b      	subs	r3, r3, r5
 8016a94:	d418      	bmi.n	8016ac8 <_malloc_r+0x8c>
 8016a96:	2b0b      	cmp	r3, #11
 8016a98:	d90f      	bls.n	8016aba <_malloc_r+0x7e>
 8016a9a:	600b      	str	r3, [r1, #0]
 8016a9c:	50cd      	str	r5, [r1, r3]
 8016a9e:	18cc      	adds	r4, r1, r3
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	f000 ff65 	bl	8017970 <__malloc_unlock>
 8016aa6:	f104 000b 	add.w	r0, r4, #11
 8016aaa:	1d23      	adds	r3, r4, #4
 8016aac:	f020 0007 	bic.w	r0, r0, #7
 8016ab0:	1ac3      	subs	r3, r0, r3
 8016ab2:	d0d3      	beq.n	8016a5c <_malloc_r+0x20>
 8016ab4:	425a      	negs	r2, r3
 8016ab6:	50e2      	str	r2, [r4, r3]
 8016ab8:	e7d0      	b.n	8016a5c <_malloc_r+0x20>
 8016aba:	428c      	cmp	r4, r1
 8016abc:	684b      	ldr	r3, [r1, #4]
 8016abe:	bf16      	itet	ne
 8016ac0:	6063      	strne	r3, [r4, #4]
 8016ac2:	6013      	streq	r3, [r2, #0]
 8016ac4:	460c      	movne	r4, r1
 8016ac6:	e7eb      	b.n	8016aa0 <_malloc_r+0x64>
 8016ac8:	460c      	mov	r4, r1
 8016aca:	6849      	ldr	r1, [r1, #4]
 8016acc:	e7cc      	b.n	8016a68 <_malloc_r+0x2c>
 8016ace:	1cc4      	adds	r4, r0, #3
 8016ad0:	f024 0403 	bic.w	r4, r4, #3
 8016ad4:	42a0      	cmp	r0, r4
 8016ad6:	d005      	beq.n	8016ae4 <_malloc_r+0xa8>
 8016ad8:	1a21      	subs	r1, r4, r0
 8016ada:	4630      	mov	r0, r6
 8016adc:	f000 fde4 	bl	80176a8 <_sbrk_r>
 8016ae0:	3001      	adds	r0, #1
 8016ae2:	d0cf      	beq.n	8016a84 <_malloc_r+0x48>
 8016ae4:	6025      	str	r5, [r4, #0]
 8016ae6:	e7db      	b.n	8016aa0 <_malloc_r+0x64>
 8016ae8:	20037468 	.word	0x20037468
 8016aec:	2003746c 	.word	0x2003746c

08016af0 <__ssputs_r>:
 8016af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016af4:	688e      	ldr	r6, [r1, #8]
 8016af6:	429e      	cmp	r6, r3
 8016af8:	4682      	mov	sl, r0
 8016afa:	460c      	mov	r4, r1
 8016afc:	4690      	mov	r8, r2
 8016afe:	4699      	mov	r9, r3
 8016b00:	d837      	bhi.n	8016b72 <__ssputs_r+0x82>
 8016b02:	898a      	ldrh	r2, [r1, #12]
 8016b04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b08:	d031      	beq.n	8016b6e <__ssputs_r+0x7e>
 8016b0a:	6825      	ldr	r5, [r4, #0]
 8016b0c:	6909      	ldr	r1, [r1, #16]
 8016b0e:	1a6f      	subs	r7, r5, r1
 8016b10:	6965      	ldr	r5, [r4, #20]
 8016b12:	2302      	movs	r3, #2
 8016b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b18:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b1c:	f109 0301 	add.w	r3, r9, #1
 8016b20:	443b      	add	r3, r7
 8016b22:	429d      	cmp	r5, r3
 8016b24:	bf38      	it	cc
 8016b26:	461d      	movcc	r5, r3
 8016b28:	0553      	lsls	r3, r2, #21
 8016b2a:	d530      	bpl.n	8016b8e <__ssputs_r+0x9e>
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	f7ff ff85 	bl	8016a3c <_malloc_r>
 8016b32:	4606      	mov	r6, r0
 8016b34:	b950      	cbnz	r0, 8016b4c <__ssputs_r+0x5c>
 8016b36:	230c      	movs	r3, #12
 8016b38:	f8ca 3000 	str.w	r3, [sl]
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b42:	81a3      	strh	r3, [r4, #12]
 8016b44:	f04f 30ff 	mov.w	r0, #4294967295
 8016b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b4c:	463a      	mov	r2, r7
 8016b4e:	6921      	ldr	r1, [r4, #16]
 8016b50:	f7fc f81e 	bl	8012b90 <memcpy>
 8016b54:	89a3      	ldrh	r3, [r4, #12]
 8016b56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b5e:	81a3      	strh	r3, [r4, #12]
 8016b60:	6126      	str	r6, [r4, #16]
 8016b62:	6165      	str	r5, [r4, #20]
 8016b64:	443e      	add	r6, r7
 8016b66:	1bed      	subs	r5, r5, r7
 8016b68:	6026      	str	r6, [r4, #0]
 8016b6a:	60a5      	str	r5, [r4, #8]
 8016b6c:	464e      	mov	r6, r9
 8016b6e:	454e      	cmp	r6, r9
 8016b70:	d900      	bls.n	8016b74 <__ssputs_r+0x84>
 8016b72:	464e      	mov	r6, r9
 8016b74:	4632      	mov	r2, r6
 8016b76:	4641      	mov	r1, r8
 8016b78:	6820      	ldr	r0, [r4, #0]
 8016b7a:	f000 fedf 	bl	801793c <memmove>
 8016b7e:	68a3      	ldr	r3, [r4, #8]
 8016b80:	1b9b      	subs	r3, r3, r6
 8016b82:	60a3      	str	r3, [r4, #8]
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	441e      	add	r6, r3
 8016b88:	6026      	str	r6, [r4, #0]
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	e7dc      	b.n	8016b48 <__ssputs_r+0x58>
 8016b8e:	462a      	mov	r2, r5
 8016b90:	f000 feef 	bl	8017972 <_realloc_r>
 8016b94:	4606      	mov	r6, r0
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d1e2      	bne.n	8016b60 <__ssputs_r+0x70>
 8016b9a:	6921      	ldr	r1, [r4, #16]
 8016b9c:	4650      	mov	r0, sl
 8016b9e:	f7ff feff 	bl	80169a0 <_free_r>
 8016ba2:	e7c8      	b.n	8016b36 <__ssputs_r+0x46>

08016ba4 <_svfiprintf_r>:
 8016ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba8:	461d      	mov	r5, r3
 8016baa:	898b      	ldrh	r3, [r1, #12]
 8016bac:	061f      	lsls	r7, r3, #24
 8016bae:	b09d      	sub	sp, #116	; 0x74
 8016bb0:	4680      	mov	r8, r0
 8016bb2:	460c      	mov	r4, r1
 8016bb4:	4616      	mov	r6, r2
 8016bb6:	d50f      	bpl.n	8016bd8 <_svfiprintf_r+0x34>
 8016bb8:	690b      	ldr	r3, [r1, #16]
 8016bba:	b96b      	cbnz	r3, 8016bd8 <_svfiprintf_r+0x34>
 8016bbc:	2140      	movs	r1, #64	; 0x40
 8016bbe:	f7ff ff3d 	bl	8016a3c <_malloc_r>
 8016bc2:	6020      	str	r0, [r4, #0]
 8016bc4:	6120      	str	r0, [r4, #16]
 8016bc6:	b928      	cbnz	r0, 8016bd4 <_svfiprintf_r+0x30>
 8016bc8:	230c      	movs	r3, #12
 8016bca:	f8c8 3000 	str.w	r3, [r8]
 8016bce:	f04f 30ff 	mov.w	r0, #4294967295
 8016bd2:	e0c8      	b.n	8016d66 <_svfiprintf_r+0x1c2>
 8016bd4:	2340      	movs	r3, #64	; 0x40
 8016bd6:	6163      	str	r3, [r4, #20]
 8016bd8:	2300      	movs	r3, #0
 8016bda:	9309      	str	r3, [sp, #36]	; 0x24
 8016bdc:	2320      	movs	r3, #32
 8016bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016be2:	2330      	movs	r3, #48	; 0x30
 8016be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016be8:	9503      	str	r5, [sp, #12]
 8016bea:	f04f 0b01 	mov.w	fp, #1
 8016bee:	4637      	mov	r7, r6
 8016bf0:	463d      	mov	r5, r7
 8016bf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016bf6:	b10b      	cbz	r3, 8016bfc <_svfiprintf_r+0x58>
 8016bf8:	2b25      	cmp	r3, #37	; 0x25
 8016bfa:	d13e      	bne.n	8016c7a <_svfiprintf_r+0xd6>
 8016bfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c00:	d00b      	beq.n	8016c1a <_svfiprintf_r+0x76>
 8016c02:	4653      	mov	r3, sl
 8016c04:	4632      	mov	r2, r6
 8016c06:	4621      	mov	r1, r4
 8016c08:	4640      	mov	r0, r8
 8016c0a:	f7ff ff71 	bl	8016af0 <__ssputs_r>
 8016c0e:	3001      	adds	r0, #1
 8016c10:	f000 80a4 	beq.w	8016d5c <_svfiprintf_r+0x1b8>
 8016c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c16:	4453      	add	r3, sl
 8016c18:	9309      	str	r3, [sp, #36]	; 0x24
 8016c1a:	783b      	ldrb	r3, [r7, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f000 809d 	beq.w	8016d5c <_svfiprintf_r+0x1b8>
 8016c22:	2300      	movs	r3, #0
 8016c24:	f04f 32ff 	mov.w	r2, #4294967295
 8016c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c2c:	9304      	str	r3, [sp, #16]
 8016c2e:	9307      	str	r3, [sp, #28]
 8016c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c34:	931a      	str	r3, [sp, #104]	; 0x68
 8016c36:	462f      	mov	r7, r5
 8016c38:	2205      	movs	r2, #5
 8016c3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016c3e:	4850      	ldr	r0, [pc, #320]	; (8016d80 <_svfiprintf_r+0x1dc>)
 8016c40:	f7e9 fae6 	bl	8000210 <memchr>
 8016c44:	9b04      	ldr	r3, [sp, #16]
 8016c46:	b9d0      	cbnz	r0, 8016c7e <_svfiprintf_r+0xda>
 8016c48:	06d9      	lsls	r1, r3, #27
 8016c4a:	bf44      	itt	mi
 8016c4c:	2220      	movmi	r2, #32
 8016c4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c52:	071a      	lsls	r2, r3, #28
 8016c54:	bf44      	itt	mi
 8016c56:	222b      	movmi	r2, #43	; 0x2b
 8016c58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c5c:	782a      	ldrb	r2, [r5, #0]
 8016c5e:	2a2a      	cmp	r2, #42	; 0x2a
 8016c60:	d015      	beq.n	8016c8e <_svfiprintf_r+0xea>
 8016c62:	9a07      	ldr	r2, [sp, #28]
 8016c64:	462f      	mov	r7, r5
 8016c66:	2000      	movs	r0, #0
 8016c68:	250a      	movs	r5, #10
 8016c6a:	4639      	mov	r1, r7
 8016c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c70:	3b30      	subs	r3, #48	; 0x30
 8016c72:	2b09      	cmp	r3, #9
 8016c74:	d94d      	bls.n	8016d12 <_svfiprintf_r+0x16e>
 8016c76:	b1b8      	cbz	r0, 8016ca8 <_svfiprintf_r+0x104>
 8016c78:	e00f      	b.n	8016c9a <_svfiprintf_r+0xf6>
 8016c7a:	462f      	mov	r7, r5
 8016c7c:	e7b8      	b.n	8016bf0 <_svfiprintf_r+0x4c>
 8016c7e:	4a40      	ldr	r2, [pc, #256]	; (8016d80 <_svfiprintf_r+0x1dc>)
 8016c80:	1a80      	subs	r0, r0, r2
 8016c82:	fa0b f000 	lsl.w	r0, fp, r0
 8016c86:	4318      	orrs	r0, r3
 8016c88:	9004      	str	r0, [sp, #16]
 8016c8a:	463d      	mov	r5, r7
 8016c8c:	e7d3      	b.n	8016c36 <_svfiprintf_r+0x92>
 8016c8e:	9a03      	ldr	r2, [sp, #12]
 8016c90:	1d11      	adds	r1, r2, #4
 8016c92:	6812      	ldr	r2, [r2, #0]
 8016c94:	9103      	str	r1, [sp, #12]
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	db01      	blt.n	8016c9e <_svfiprintf_r+0xfa>
 8016c9a:	9207      	str	r2, [sp, #28]
 8016c9c:	e004      	b.n	8016ca8 <_svfiprintf_r+0x104>
 8016c9e:	4252      	negs	r2, r2
 8016ca0:	f043 0302 	orr.w	r3, r3, #2
 8016ca4:	9207      	str	r2, [sp, #28]
 8016ca6:	9304      	str	r3, [sp, #16]
 8016ca8:	783b      	ldrb	r3, [r7, #0]
 8016caa:	2b2e      	cmp	r3, #46	; 0x2e
 8016cac:	d10c      	bne.n	8016cc8 <_svfiprintf_r+0x124>
 8016cae:	787b      	ldrb	r3, [r7, #1]
 8016cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8016cb2:	d133      	bne.n	8016d1c <_svfiprintf_r+0x178>
 8016cb4:	9b03      	ldr	r3, [sp, #12]
 8016cb6:	1d1a      	adds	r2, r3, #4
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	9203      	str	r2, [sp, #12]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	bfb8      	it	lt
 8016cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016cc4:	3702      	adds	r7, #2
 8016cc6:	9305      	str	r3, [sp, #20]
 8016cc8:	4d2e      	ldr	r5, [pc, #184]	; (8016d84 <_svfiprintf_r+0x1e0>)
 8016cca:	7839      	ldrb	r1, [r7, #0]
 8016ccc:	2203      	movs	r2, #3
 8016cce:	4628      	mov	r0, r5
 8016cd0:	f7e9 fa9e 	bl	8000210 <memchr>
 8016cd4:	b138      	cbz	r0, 8016ce6 <_svfiprintf_r+0x142>
 8016cd6:	2340      	movs	r3, #64	; 0x40
 8016cd8:	1b40      	subs	r0, r0, r5
 8016cda:	fa03 f000 	lsl.w	r0, r3, r0
 8016cde:	9b04      	ldr	r3, [sp, #16]
 8016ce0:	4303      	orrs	r3, r0
 8016ce2:	3701      	adds	r7, #1
 8016ce4:	9304      	str	r3, [sp, #16]
 8016ce6:	7839      	ldrb	r1, [r7, #0]
 8016ce8:	4827      	ldr	r0, [pc, #156]	; (8016d88 <_svfiprintf_r+0x1e4>)
 8016cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016cee:	2206      	movs	r2, #6
 8016cf0:	1c7e      	adds	r6, r7, #1
 8016cf2:	f7e9 fa8d 	bl	8000210 <memchr>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d038      	beq.n	8016d6c <_svfiprintf_r+0x1c8>
 8016cfa:	4b24      	ldr	r3, [pc, #144]	; (8016d8c <_svfiprintf_r+0x1e8>)
 8016cfc:	bb13      	cbnz	r3, 8016d44 <_svfiprintf_r+0x1a0>
 8016cfe:	9b03      	ldr	r3, [sp, #12]
 8016d00:	3307      	adds	r3, #7
 8016d02:	f023 0307 	bic.w	r3, r3, #7
 8016d06:	3308      	adds	r3, #8
 8016d08:	9303      	str	r3, [sp, #12]
 8016d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d0c:	444b      	add	r3, r9
 8016d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d10:	e76d      	b.n	8016bee <_svfiprintf_r+0x4a>
 8016d12:	fb05 3202 	mla	r2, r5, r2, r3
 8016d16:	2001      	movs	r0, #1
 8016d18:	460f      	mov	r7, r1
 8016d1a:	e7a6      	b.n	8016c6a <_svfiprintf_r+0xc6>
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	3701      	adds	r7, #1
 8016d20:	9305      	str	r3, [sp, #20]
 8016d22:	4619      	mov	r1, r3
 8016d24:	250a      	movs	r5, #10
 8016d26:	4638      	mov	r0, r7
 8016d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d2c:	3a30      	subs	r2, #48	; 0x30
 8016d2e:	2a09      	cmp	r2, #9
 8016d30:	d903      	bls.n	8016d3a <_svfiprintf_r+0x196>
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d0c8      	beq.n	8016cc8 <_svfiprintf_r+0x124>
 8016d36:	9105      	str	r1, [sp, #20]
 8016d38:	e7c6      	b.n	8016cc8 <_svfiprintf_r+0x124>
 8016d3a:	fb05 2101 	mla	r1, r5, r1, r2
 8016d3e:	2301      	movs	r3, #1
 8016d40:	4607      	mov	r7, r0
 8016d42:	e7f0      	b.n	8016d26 <_svfiprintf_r+0x182>
 8016d44:	ab03      	add	r3, sp, #12
 8016d46:	9300      	str	r3, [sp, #0]
 8016d48:	4622      	mov	r2, r4
 8016d4a:	4b11      	ldr	r3, [pc, #68]	; (8016d90 <_svfiprintf_r+0x1ec>)
 8016d4c:	a904      	add	r1, sp, #16
 8016d4e:	4640      	mov	r0, r8
 8016d50:	f7fb ffc6 	bl	8012ce0 <_printf_float>
 8016d54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d58:	4681      	mov	r9, r0
 8016d5a:	d1d6      	bne.n	8016d0a <_svfiprintf_r+0x166>
 8016d5c:	89a3      	ldrh	r3, [r4, #12]
 8016d5e:	065b      	lsls	r3, r3, #25
 8016d60:	f53f af35 	bmi.w	8016bce <_svfiprintf_r+0x2a>
 8016d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d66:	b01d      	add	sp, #116	; 0x74
 8016d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d6c:	ab03      	add	r3, sp, #12
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	4622      	mov	r2, r4
 8016d72:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <_svfiprintf_r+0x1ec>)
 8016d74:	a904      	add	r1, sp, #16
 8016d76:	4640      	mov	r0, r8
 8016d78:	f7fc fa68 	bl	801324c <_printf_i>
 8016d7c:	e7ea      	b.n	8016d54 <_svfiprintf_r+0x1b0>
 8016d7e:	bf00      	nop
 8016d80:	0801839c 	.word	0x0801839c
 8016d84:	080183a2 	.word	0x080183a2
 8016d88:	080183a6 	.word	0x080183a6
 8016d8c:	08012ce1 	.word	0x08012ce1
 8016d90:	08016af1 	.word	0x08016af1

08016d94 <_sungetc_r>:
 8016d94:	b538      	push	{r3, r4, r5, lr}
 8016d96:	1c4b      	adds	r3, r1, #1
 8016d98:	4614      	mov	r4, r2
 8016d9a:	d103      	bne.n	8016da4 <_sungetc_r+0x10>
 8016d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8016da0:	4628      	mov	r0, r5
 8016da2:	bd38      	pop	{r3, r4, r5, pc}
 8016da4:	8993      	ldrh	r3, [r2, #12]
 8016da6:	f023 0320 	bic.w	r3, r3, #32
 8016daa:	8193      	strh	r3, [r2, #12]
 8016dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016dae:	6852      	ldr	r2, [r2, #4]
 8016db0:	b2cd      	uxtb	r5, r1
 8016db2:	b18b      	cbz	r3, 8016dd8 <_sungetc_r+0x44>
 8016db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016db6:	4293      	cmp	r3, r2
 8016db8:	dd08      	ble.n	8016dcc <_sungetc_r+0x38>
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	1e5a      	subs	r2, r3, #1
 8016dbe:	6022      	str	r2, [r4, #0]
 8016dc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016dc4:	6863      	ldr	r3, [r4, #4]
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	6063      	str	r3, [r4, #4]
 8016dca:	e7e9      	b.n	8016da0 <_sungetc_r+0xc>
 8016dcc:	4621      	mov	r1, r4
 8016dce:	f000 fd4b 	bl	8017868 <__submore>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d0f1      	beq.n	8016dba <_sungetc_r+0x26>
 8016dd6:	e7e1      	b.n	8016d9c <_sungetc_r+0x8>
 8016dd8:	6921      	ldr	r1, [r4, #16]
 8016dda:	6823      	ldr	r3, [r4, #0]
 8016ddc:	b151      	cbz	r1, 8016df4 <_sungetc_r+0x60>
 8016dde:	4299      	cmp	r1, r3
 8016de0:	d208      	bcs.n	8016df4 <_sungetc_r+0x60>
 8016de2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016de6:	42a9      	cmp	r1, r5
 8016de8:	d104      	bne.n	8016df4 <_sungetc_r+0x60>
 8016dea:	3b01      	subs	r3, #1
 8016dec:	3201      	adds	r2, #1
 8016dee:	6023      	str	r3, [r4, #0]
 8016df0:	6062      	str	r2, [r4, #4]
 8016df2:	e7d5      	b.n	8016da0 <_sungetc_r+0xc>
 8016df4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8016dfe:	2303      	movs	r3, #3
 8016e00:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e02:	4623      	mov	r3, r4
 8016e04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e08:	6023      	str	r3, [r4, #0]
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	e7dc      	b.n	8016dc8 <_sungetc_r+0x34>

08016e0e <__ssrefill_r>:
 8016e0e:	b510      	push	{r4, lr}
 8016e10:	460c      	mov	r4, r1
 8016e12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016e14:	b169      	cbz	r1, 8016e32 <__ssrefill_r+0x24>
 8016e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e1a:	4299      	cmp	r1, r3
 8016e1c:	d001      	beq.n	8016e22 <__ssrefill_r+0x14>
 8016e1e:	f7ff fdbf 	bl	80169a0 <_free_r>
 8016e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e24:	6063      	str	r3, [r4, #4]
 8016e26:	2000      	movs	r0, #0
 8016e28:	6360      	str	r0, [r4, #52]	; 0x34
 8016e2a:	b113      	cbz	r3, 8016e32 <__ssrefill_r+0x24>
 8016e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e2e:	6023      	str	r3, [r4, #0]
 8016e30:	bd10      	pop	{r4, pc}
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	6023      	str	r3, [r4, #0]
 8016e36:	2300      	movs	r3, #0
 8016e38:	6063      	str	r3, [r4, #4]
 8016e3a:	89a3      	ldrh	r3, [r4, #12]
 8016e3c:	f043 0320 	orr.w	r3, r3, #32
 8016e40:	81a3      	strh	r3, [r4, #12]
 8016e42:	f04f 30ff 	mov.w	r0, #4294967295
 8016e46:	e7f3      	b.n	8016e30 <__ssrefill_r+0x22>

08016e48 <__ssvfiscanf_r>:
 8016e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016e50:	460c      	mov	r4, r1
 8016e52:	2100      	movs	r1, #0
 8016e54:	9144      	str	r1, [sp, #272]	; 0x110
 8016e56:	9145      	str	r1, [sp, #276]	; 0x114
 8016e58:	499f      	ldr	r1, [pc, #636]	; (80170d8 <__ssvfiscanf_r+0x290>)
 8016e5a:	91a0      	str	r1, [sp, #640]	; 0x280
 8016e5c:	f10d 0804 	add.w	r8, sp, #4
 8016e60:	499e      	ldr	r1, [pc, #632]	; (80170dc <__ssvfiscanf_r+0x294>)
 8016e62:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80170e0 <__ssvfiscanf_r+0x298>
 8016e66:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	4692      	mov	sl, r2
 8016e6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016e70:	9300      	str	r3, [sp, #0]
 8016e72:	270a      	movs	r7, #10
 8016e74:	f89a 3000 	ldrb.w	r3, [sl]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f000 812a 	beq.w	80170d2 <__ssvfiscanf_r+0x28a>
 8016e7e:	4655      	mov	r5, sl
 8016e80:	f7ff f8d2 	bl	8016028 <__locale_ctype_ptr>
 8016e84:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016e88:	4458      	add	r0, fp
 8016e8a:	7843      	ldrb	r3, [r0, #1]
 8016e8c:	f013 0308 	ands.w	r3, r3, #8
 8016e90:	d01c      	beq.n	8016ecc <__ssvfiscanf_r+0x84>
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	dd12      	ble.n	8016ebe <__ssvfiscanf_r+0x76>
 8016e98:	f7ff f8c6 	bl	8016028 <__locale_ctype_ptr>
 8016e9c:	6823      	ldr	r3, [r4, #0]
 8016e9e:	781a      	ldrb	r2, [r3, #0]
 8016ea0:	4410      	add	r0, r2
 8016ea2:	7842      	ldrb	r2, [r0, #1]
 8016ea4:	0712      	lsls	r2, r2, #28
 8016ea6:	d401      	bmi.n	8016eac <__ssvfiscanf_r+0x64>
 8016ea8:	46aa      	mov	sl, r5
 8016eaa:	e7e3      	b.n	8016e74 <__ssvfiscanf_r+0x2c>
 8016eac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016eae:	3201      	adds	r2, #1
 8016eb0:	9245      	str	r2, [sp, #276]	; 0x114
 8016eb2:	6862      	ldr	r2, [r4, #4]
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	3a01      	subs	r2, #1
 8016eb8:	6062      	str	r2, [r4, #4]
 8016eba:	6023      	str	r3, [r4, #0]
 8016ebc:	e7e9      	b.n	8016e92 <__ssvfiscanf_r+0x4a>
 8016ebe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	4630      	mov	r0, r6
 8016ec4:	4798      	blx	r3
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	d0e6      	beq.n	8016e98 <__ssvfiscanf_r+0x50>
 8016eca:	e7ed      	b.n	8016ea8 <__ssvfiscanf_r+0x60>
 8016ecc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016ed0:	f040 8082 	bne.w	8016fd8 <__ssvfiscanf_r+0x190>
 8016ed4:	9343      	str	r3, [sp, #268]	; 0x10c
 8016ed6:	9341      	str	r3, [sp, #260]	; 0x104
 8016ed8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016edc:	2b2a      	cmp	r3, #42	; 0x2a
 8016ede:	d103      	bne.n	8016ee8 <__ssvfiscanf_r+0xa0>
 8016ee0:	2310      	movs	r3, #16
 8016ee2:	9341      	str	r3, [sp, #260]	; 0x104
 8016ee4:	f10a 0502 	add.w	r5, sl, #2
 8016ee8:	46aa      	mov	sl, r5
 8016eea:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016eee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016ef2:	2a09      	cmp	r2, #9
 8016ef4:	d922      	bls.n	8016f3c <__ssvfiscanf_r+0xf4>
 8016ef6:	2203      	movs	r2, #3
 8016ef8:	4879      	ldr	r0, [pc, #484]	; (80170e0 <__ssvfiscanf_r+0x298>)
 8016efa:	f7e9 f989 	bl	8000210 <memchr>
 8016efe:	b138      	cbz	r0, 8016f10 <__ssvfiscanf_r+0xc8>
 8016f00:	eba0 0309 	sub.w	r3, r0, r9
 8016f04:	2001      	movs	r0, #1
 8016f06:	4098      	lsls	r0, r3
 8016f08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f0a:	4318      	orrs	r0, r3
 8016f0c:	9041      	str	r0, [sp, #260]	; 0x104
 8016f0e:	46aa      	mov	sl, r5
 8016f10:	f89a 3000 	ldrb.w	r3, [sl]
 8016f14:	2b67      	cmp	r3, #103	; 0x67
 8016f16:	f10a 0501 	add.w	r5, sl, #1
 8016f1a:	d82b      	bhi.n	8016f74 <__ssvfiscanf_r+0x12c>
 8016f1c:	2b65      	cmp	r3, #101	; 0x65
 8016f1e:	f080 809f 	bcs.w	8017060 <__ssvfiscanf_r+0x218>
 8016f22:	2b47      	cmp	r3, #71	; 0x47
 8016f24:	d810      	bhi.n	8016f48 <__ssvfiscanf_r+0x100>
 8016f26:	2b45      	cmp	r3, #69	; 0x45
 8016f28:	f080 809a 	bcs.w	8017060 <__ssvfiscanf_r+0x218>
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d06c      	beq.n	801700a <__ssvfiscanf_r+0x1c2>
 8016f30:	2b25      	cmp	r3, #37	; 0x25
 8016f32:	d051      	beq.n	8016fd8 <__ssvfiscanf_r+0x190>
 8016f34:	2303      	movs	r3, #3
 8016f36:	9347      	str	r3, [sp, #284]	; 0x11c
 8016f38:	9742      	str	r7, [sp, #264]	; 0x108
 8016f3a:	e027      	b.n	8016f8c <__ssvfiscanf_r+0x144>
 8016f3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016f3e:	fb07 1303 	mla	r3, r7, r3, r1
 8016f42:	3b30      	subs	r3, #48	; 0x30
 8016f44:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f46:	e7cf      	b.n	8016ee8 <__ssvfiscanf_r+0xa0>
 8016f48:	2b5b      	cmp	r3, #91	; 0x5b
 8016f4a:	d06a      	beq.n	8017022 <__ssvfiscanf_r+0x1da>
 8016f4c:	d80c      	bhi.n	8016f68 <__ssvfiscanf_r+0x120>
 8016f4e:	2b58      	cmp	r3, #88	; 0x58
 8016f50:	d1f0      	bne.n	8016f34 <__ssvfiscanf_r+0xec>
 8016f52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f58:	9241      	str	r2, [sp, #260]	; 0x104
 8016f5a:	2210      	movs	r2, #16
 8016f5c:	9242      	str	r2, [sp, #264]	; 0x108
 8016f5e:	2b6e      	cmp	r3, #110	; 0x6e
 8016f60:	bf8c      	ite	hi
 8016f62:	2304      	movhi	r3, #4
 8016f64:	2303      	movls	r3, #3
 8016f66:	e010      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8016f68:	2b63      	cmp	r3, #99	; 0x63
 8016f6a:	d065      	beq.n	8017038 <__ssvfiscanf_r+0x1f0>
 8016f6c:	2b64      	cmp	r3, #100	; 0x64
 8016f6e:	d1e1      	bne.n	8016f34 <__ssvfiscanf_r+0xec>
 8016f70:	9742      	str	r7, [sp, #264]	; 0x108
 8016f72:	e7f4      	b.n	8016f5e <__ssvfiscanf_r+0x116>
 8016f74:	2b70      	cmp	r3, #112	; 0x70
 8016f76:	d04b      	beq.n	8017010 <__ssvfiscanf_r+0x1c8>
 8016f78:	d826      	bhi.n	8016fc8 <__ssvfiscanf_r+0x180>
 8016f7a:	2b6e      	cmp	r3, #110	; 0x6e
 8016f7c:	d062      	beq.n	8017044 <__ssvfiscanf_r+0x1fc>
 8016f7e:	d84c      	bhi.n	801701a <__ssvfiscanf_r+0x1d2>
 8016f80:	2b69      	cmp	r3, #105	; 0x69
 8016f82:	d1d7      	bne.n	8016f34 <__ssvfiscanf_r+0xec>
 8016f84:	2300      	movs	r3, #0
 8016f86:	9342      	str	r3, [sp, #264]	; 0x108
 8016f88:	2303      	movs	r3, #3
 8016f8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8016f8c:	6863      	ldr	r3, [r4, #4]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	dd68      	ble.n	8017064 <__ssvfiscanf_r+0x21c>
 8016f92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f94:	0659      	lsls	r1, r3, #25
 8016f96:	d407      	bmi.n	8016fa8 <__ssvfiscanf_r+0x160>
 8016f98:	f7ff f846 	bl	8016028 <__locale_ctype_ptr>
 8016f9c:	6823      	ldr	r3, [r4, #0]
 8016f9e:	781a      	ldrb	r2, [r3, #0]
 8016fa0:	4410      	add	r0, r2
 8016fa2:	7842      	ldrb	r2, [r0, #1]
 8016fa4:	0712      	lsls	r2, r2, #28
 8016fa6:	d464      	bmi.n	8017072 <__ssvfiscanf_r+0x22a>
 8016fa8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016faa:	2b02      	cmp	r3, #2
 8016fac:	dc73      	bgt.n	8017096 <__ssvfiscanf_r+0x24e>
 8016fae:	466b      	mov	r3, sp
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	a941      	add	r1, sp, #260	; 0x104
 8016fb4:	4630      	mov	r0, r6
 8016fb6:	f000 f9d7 	bl	8017368 <_scanf_chars>
 8016fba:	2801      	cmp	r0, #1
 8016fbc:	f000 8089 	beq.w	80170d2 <__ssvfiscanf_r+0x28a>
 8016fc0:	2802      	cmp	r0, #2
 8016fc2:	f47f af71 	bne.w	8016ea8 <__ssvfiscanf_r+0x60>
 8016fc6:	e01d      	b.n	8017004 <__ssvfiscanf_r+0x1bc>
 8016fc8:	2b75      	cmp	r3, #117	; 0x75
 8016fca:	d0d1      	beq.n	8016f70 <__ssvfiscanf_r+0x128>
 8016fcc:	2b78      	cmp	r3, #120	; 0x78
 8016fce:	d0c0      	beq.n	8016f52 <__ssvfiscanf_r+0x10a>
 8016fd0:	2b73      	cmp	r3, #115	; 0x73
 8016fd2:	d1af      	bne.n	8016f34 <__ssvfiscanf_r+0xec>
 8016fd4:	2302      	movs	r3, #2
 8016fd6:	e7d8      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8016fd8:	6863      	ldr	r3, [r4, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	dd0c      	ble.n	8016ff8 <__ssvfiscanf_r+0x1b0>
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	781a      	ldrb	r2, [r3, #0]
 8016fe2:	455a      	cmp	r2, fp
 8016fe4:	d175      	bne.n	80170d2 <__ssvfiscanf_r+0x28a>
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	6862      	ldr	r2, [r4, #4]
 8016fea:	6023      	str	r3, [r4, #0]
 8016fec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016fee:	3a01      	subs	r2, #1
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	6062      	str	r2, [r4, #4]
 8016ff4:	9345      	str	r3, [sp, #276]	; 0x114
 8016ff6:	e757      	b.n	8016ea8 <__ssvfiscanf_r+0x60>
 8016ff8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ffa:	4621      	mov	r1, r4
 8016ffc:	4630      	mov	r0, r6
 8016ffe:	4798      	blx	r3
 8017000:	2800      	cmp	r0, #0
 8017002:	d0ec      	beq.n	8016fde <__ssvfiscanf_r+0x196>
 8017004:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017006:	2800      	cmp	r0, #0
 8017008:	d159      	bne.n	80170be <__ssvfiscanf_r+0x276>
 801700a:	f04f 30ff 	mov.w	r0, #4294967295
 801700e:	e05c      	b.n	80170ca <__ssvfiscanf_r+0x282>
 8017010:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017012:	f042 0220 	orr.w	r2, r2, #32
 8017016:	9241      	str	r2, [sp, #260]	; 0x104
 8017018:	e79b      	b.n	8016f52 <__ssvfiscanf_r+0x10a>
 801701a:	2308      	movs	r3, #8
 801701c:	9342      	str	r3, [sp, #264]	; 0x108
 801701e:	2304      	movs	r3, #4
 8017020:	e7b3      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8017022:	4629      	mov	r1, r5
 8017024:	4640      	mov	r0, r8
 8017026:	f000 fb4f 	bl	80176c8 <__sccl>
 801702a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801702c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017030:	9341      	str	r3, [sp, #260]	; 0x104
 8017032:	4605      	mov	r5, r0
 8017034:	2301      	movs	r3, #1
 8017036:	e7a8      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8017038:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801703a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801703e:	9341      	str	r3, [sp, #260]	; 0x104
 8017040:	2300      	movs	r3, #0
 8017042:	e7a2      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8017044:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017046:	06c3      	lsls	r3, r0, #27
 8017048:	f53f af2e 	bmi.w	8016ea8 <__ssvfiscanf_r+0x60>
 801704c:	9b00      	ldr	r3, [sp, #0]
 801704e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017050:	1d19      	adds	r1, r3, #4
 8017052:	9100      	str	r1, [sp, #0]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	07c0      	lsls	r0, r0, #31
 8017058:	bf4c      	ite	mi
 801705a:	801a      	strhmi	r2, [r3, #0]
 801705c:	601a      	strpl	r2, [r3, #0]
 801705e:	e723      	b.n	8016ea8 <__ssvfiscanf_r+0x60>
 8017060:	2305      	movs	r3, #5
 8017062:	e792      	b.n	8016f8a <__ssvfiscanf_r+0x142>
 8017064:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017066:	4621      	mov	r1, r4
 8017068:	4630      	mov	r0, r6
 801706a:	4798      	blx	r3
 801706c:	2800      	cmp	r0, #0
 801706e:	d090      	beq.n	8016f92 <__ssvfiscanf_r+0x14a>
 8017070:	e7c8      	b.n	8017004 <__ssvfiscanf_r+0x1bc>
 8017072:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017074:	3201      	adds	r2, #1
 8017076:	9245      	str	r2, [sp, #276]	; 0x114
 8017078:	6862      	ldr	r2, [r4, #4]
 801707a:	3a01      	subs	r2, #1
 801707c:	2a00      	cmp	r2, #0
 801707e:	6062      	str	r2, [r4, #4]
 8017080:	dd02      	ble.n	8017088 <__ssvfiscanf_r+0x240>
 8017082:	3301      	adds	r3, #1
 8017084:	6023      	str	r3, [r4, #0]
 8017086:	e787      	b.n	8016f98 <__ssvfiscanf_r+0x150>
 8017088:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801708a:	4621      	mov	r1, r4
 801708c:	4630      	mov	r0, r6
 801708e:	4798      	blx	r3
 8017090:	2800      	cmp	r0, #0
 8017092:	d081      	beq.n	8016f98 <__ssvfiscanf_r+0x150>
 8017094:	e7b6      	b.n	8017004 <__ssvfiscanf_r+0x1bc>
 8017096:	2b04      	cmp	r3, #4
 8017098:	dc06      	bgt.n	80170a8 <__ssvfiscanf_r+0x260>
 801709a:	466b      	mov	r3, sp
 801709c:	4622      	mov	r2, r4
 801709e:	a941      	add	r1, sp, #260	; 0x104
 80170a0:	4630      	mov	r0, r6
 80170a2:	f000 f9c5 	bl	8017430 <_scanf_i>
 80170a6:	e788      	b.n	8016fba <__ssvfiscanf_r+0x172>
 80170a8:	4b0e      	ldr	r3, [pc, #56]	; (80170e4 <__ssvfiscanf_r+0x29c>)
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f43f aefc 	beq.w	8016ea8 <__ssvfiscanf_r+0x60>
 80170b0:	466b      	mov	r3, sp
 80170b2:	4622      	mov	r2, r4
 80170b4:	a941      	add	r1, sp, #260	; 0x104
 80170b6:	4630      	mov	r0, r6
 80170b8:	f7fc f9da 	bl	8013470 <_scanf_float>
 80170bc:	e77d      	b.n	8016fba <__ssvfiscanf_r+0x172>
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80170c4:	bf18      	it	ne
 80170c6:	f04f 30ff 	movne.w	r0, #4294967295
 80170ca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80170d4:	e7f9      	b.n	80170ca <__ssvfiscanf_r+0x282>
 80170d6:	bf00      	nop
 80170d8:	08016d95 	.word	0x08016d95
 80170dc:	08016e0f 	.word	0x08016e0f
 80170e0:	080183a2 	.word	0x080183a2
 80170e4:	08013471 	.word	0x08013471

080170e8 <__sfputc_r>:
 80170e8:	6893      	ldr	r3, [r2, #8]
 80170ea:	3b01      	subs	r3, #1
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	b410      	push	{r4}
 80170f0:	6093      	str	r3, [r2, #8]
 80170f2:	da08      	bge.n	8017106 <__sfputc_r+0x1e>
 80170f4:	6994      	ldr	r4, [r2, #24]
 80170f6:	42a3      	cmp	r3, r4
 80170f8:	db01      	blt.n	80170fe <__sfputc_r+0x16>
 80170fa:	290a      	cmp	r1, #10
 80170fc:	d103      	bne.n	8017106 <__sfputc_r+0x1e>
 80170fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017102:	f7fd bbc7 	b.w	8014894 <__swbuf_r>
 8017106:	6813      	ldr	r3, [r2, #0]
 8017108:	1c58      	adds	r0, r3, #1
 801710a:	6010      	str	r0, [r2, #0]
 801710c:	7019      	strb	r1, [r3, #0]
 801710e:	4608      	mov	r0, r1
 8017110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017114:	4770      	bx	lr

08017116 <__sfputs_r>:
 8017116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017118:	4606      	mov	r6, r0
 801711a:	460f      	mov	r7, r1
 801711c:	4614      	mov	r4, r2
 801711e:	18d5      	adds	r5, r2, r3
 8017120:	42ac      	cmp	r4, r5
 8017122:	d101      	bne.n	8017128 <__sfputs_r+0x12>
 8017124:	2000      	movs	r0, #0
 8017126:	e007      	b.n	8017138 <__sfputs_r+0x22>
 8017128:	463a      	mov	r2, r7
 801712a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801712e:	4630      	mov	r0, r6
 8017130:	f7ff ffda 	bl	80170e8 <__sfputc_r>
 8017134:	1c43      	adds	r3, r0, #1
 8017136:	d1f3      	bne.n	8017120 <__sfputs_r+0xa>
 8017138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801713c <_vfiprintf_r>:
 801713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017140:	460c      	mov	r4, r1
 8017142:	b09d      	sub	sp, #116	; 0x74
 8017144:	4617      	mov	r7, r2
 8017146:	461d      	mov	r5, r3
 8017148:	4606      	mov	r6, r0
 801714a:	b118      	cbz	r0, 8017154 <_vfiprintf_r+0x18>
 801714c:	6983      	ldr	r3, [r0, #24]
 801714e:	b90b      	cbnz	r3, 8017154 <_vfiprintf_r+0x18>
 8017150:	f7fe fbb6 	bl	80158c0 <__sinit>
 8017154:	4b7c      	ldr	r3, [pc, #496]	; (8017348 <_vfiprintf_r+0x20c>)
 8017156:	429c      	cmp	r4, r3
 8017158:	d158      	bne.n	801720c <_vfiprintf_r+0xd0>
 801715a:	6874      	ldr	r4, [r6, #4]
 801715c:	89a3      	ldrh	r3, [r4, #12]
 801715e:	0718      	lsls	r0, r3, #28
 8017160:	d55e      	bpl.n	8017220 <_vfiprintf_r+0xe4>
 8017162:	6923      	ldr	r3, [r4, #16]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d05b      	beq.n	8017220 <_vfiprintf_r+0xe4>
 8017168:	2300      	movs	r3, #0
 801716a:	9309      	str	r3, [sp, #36]	; 0x24
 801716c:	2320      	movs	r3, #32
 801716e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017172:	2330      	movs	r3, #48	; 0x30
 8017174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017178:	9503      	str	r5, [sp, #12]
 801717a:	f04f 0b01 	mov.w	fp, #1
 801717e:	46b8      	mov	r8, r7
 8017180:	4645      	mov	r5, r8
 8017182:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017186:	b10b      	cbz	r3, 801718c <_vfiprintf_r+0x50>
 8017188:	2b25      	cmp	r3, #37	; 0x25
 801718a:	d154      	bne.n	8017236 <_vfiprintf_r+0xfa>
 801718c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017190:	d00b      	beq.n	80171aa <_vfiprintf_r+0x6e>
 8017192:	4653      	mov	r3, sl
 8017194:	463a      	mov	r2, r7
 8017196:	4621      	mov	r1, r4
 8017198:	4630      	mov	r0, r6
 801719a:	f7ff ffbc 	bl	8017116 <__sfputs_r>
 801719e:	3001      	adds	r0, #1
 80171a0:	f000 80c2 	beq.w	8017328 <_vfiprintf_r+0x1ec>
 80171a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a6:	4453      	add	r3, sl
 80171a8:	9309      	str	r3, [sp, #36]	; 0x24
 80171aa:	f898 3000 	ldrb.w	r3, [r8]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f000 80ba 	beq.w	8017328 <_vfiprintf_r+0x1ec>
 80171b4:	2300      	movs	r3, #0
 80171b6:	f04f 32ff 	mov.w	r2, #4294967295
 80171ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171be:	9304      	str	r3, [sp, #16]
 80171c0:	9307      	str	r3, [sp, #28]
 80171c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171c6:	931a      	str	r3, [sp, #104]	; 0x68
 80171c8:	46a8      	mov	r8, r5
 80171ca:	2205      	movs	r2, #5
 80171cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80171d0:	485e      	ldr	r0, [pc, #376]	; (801734c <_vfiprintf_r+0x210>)
 80171d2:	f7e9 f81d 	bl	8000210 <memchr>
 80171d6:	9b04      	ldr	r3, [sp, #16]
 80171d8:	bb78      	cbnz	r0, 801723a <_vfiprintf_r+0xfe>
 80171da:	06d9      	lsls	r1, r3, #27
 80171dc:	bf44      	itt	mi
 80171de:	2220      	movmi	r2, #32
 80171e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171e4:	071a      	lsls	r2, r3, #28
 80171e6:	bf44      	itt	mi
 80171e8:	222b      	movmi	r2, #43	; 0x2b
 80171ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171ee:	782a      	ldrb	r2, [r5, #0]
 80171f0:	2a2a      	cmp	r2, #42	; 0x2a
 80171f2:	d02a      	beq.n	801724a <_vfiprintf_r+0x10e>
 80171f4:	9a07      	ldr	r2, [sp, #28]
 80171f6:	46a8      	mov	r8, r5
 80171f8:	2000      	movs	r0, #0
 80171fa:	250a      	movs	r5, #10
 80171fc:	4641      	mov	r1, r8
 80171fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017202:	3b30      	subs	r3, #48	; 0x30
 8017204:	2b09      	cmp	r3, #9
 8017206:	d969      	bls.n	80172dc <_vfiprintf_r+0x1a0>
 8017208:	b360      	cbz	r0, 8017264 <_vfiprintf_r+0x128>
 801720a:	e024      	b.n	8017256 <_vfiprintf_r+0x11a>
 801720c:	4b50      	ldr	r3, [pc, #320]	; (8017350 <_vfiprintf_r+0x214>)
 801720e:	429c      	cmp	r4, r3
 8017210:	d101      	bne.n	8017216 <_vfiprintf_r+0xda>
 8017212:	68b4      	ldr	r4, [r6, #8]
 8017214:	e7a2      	b.n	801715c <_vfiprintf_r+0x20>
 8017216:	4b4f      	ldr	r3, [pc, #316]	; (8017354 <_vfiprintf_r+0x218>)
 8017218:	429c      	cmp	r4, r3
 801721a:	bf08      	it	eq
 801721c:	68f4      	ldreq	r4, [r6, #12]
 801721e:	e79d      	b.n	801715c <_vfiprintf_r+0x20>
 8017220:	4621      	mov	r1, r4
 8017222:	4630      	mov	r0, r6
 8017224:	f7fd fb9a 	bl	801495c <__swsetup_r>
 8017228:	2800      	cmp	r0, #0
 801722a:	d09d      	beq.n	8017168 <_vfiprintf_r+0x2c>
 801722c:	f04f 30ff 	mov.w	r0, #4294967295
 8017230:	b01d      	add	sp, #116	; 0x74
 8017232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017236:	46a8      	mov	r8, r5
 8017238:	e7a2      	b.n	8017180 <_vfiprintf_r+0x44>
 801723a:	4a44      	ldr	r2, [pc, #272]	; (801734c <_vfiprintf_r+0x210>)
 801723c:	1a80      	subs	r0, r0, r2
 801723e:	fa0b f000 	lsl.w	r0, fp, r0
 8017242:	4318      	orrs	r0, r3
 8017244:	9004      	str	r0, [sp, #16]
 8017246:	4645      	mov	r5, r8
 8017248:	e7be      	b.n	80171c8 <_vfiprintf_r+0x8c>
 801724a:	9a03      	ldr	r2, [sp, #12]
 801724c:	1d11      	adds	r1, r2, #4
 801724e:	6812      	ldr	r2, [r2, #0]
 8017250:	9103      	str	r1, [sp, #12]
 8017252:	2a00      	cmp	r2, #0
 8017254:	db01      	blt.n	801725a <_vfiprintf_r+0x11e>
 8017256:	9207      	str	r2, [sp, #28]
 8017258:	e004      	b.n	8017264 <_vfiprintf_r+0x128>
 801725a:	4252      	negs	r2, r2
 801725c:	f043 0302 	orr.w	r3, r3, #2
 8017260:	9207      	str	r2, [sp, #28]
 8017262:	9304      	str	r3, [sp, #16]
 8017264:	f898 3000 	ldrb.w	r3, [r8]
 8017268:	2b2e      	cmp	r3, #46	; 0x2e
 801726a:	d10e      	bne.n	801728a <_vfiprintf_r+0x14e>
 801726c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017270:	2b2a      	cmp	r3, #42	; 0x2a
 8017272:	d138      	bne.n	80172e6 <_vfiprintf_r+0x1aa>
 8017274:	9b03      	ldr	r3, [sp, #12]
 8017276:	1d1a      	adds	r2, r3, #4
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	9203      	str	r2, [sp, #12]
 801727c:	2b00      	cmp	r3, #0
 801727e:	bfb8      	it	lt
 8017280:	f04f 33ff 	movlt.w	r3, #4294967295
 8017284:	f108 0802 	add.w	r8, r8, #2
 8017288:	9305      	str	r3, [sp, #20]
 801728a:	4d33      	ldr	r5, [pc, #204]	; (8017358 <_vfiprintf_r+0x21c>)
 801728c:	f898 1000 	ldrb.w	r1, [r8]
 8017290:	2203      	movs	r2, #3
 8017292:	4628      	mov	r0, r5
 8017294:	f7e8 ffbc 	bl	8000210 <memchr>
 8017298:	b140      	cbz	r0, 80172ac <_vfiprintf_r+0x170>
 801729a:	2340      	movs	r3, #64	; 0x40
 801729c:	1b40      	subs	r0, r0, r5
 801729e:	fa03 f000 	lsl.w	r0, r3, r0
 80172a2:	9b04      	ldr	r3, [sp, #16]
 80172a4:	4303      	orrs	r3, r0
 80172a6:	f108 0801 	add.w	r8, r8, #1
 80172aa:	9304      	str	r3, [sp, #16]
 80172ac:	f898 1000 	ldrb.w	r1, [r8]
 80172b0:	482a      	ldr	r0, [pc, #168]	; (801735c <_vfiprintf_r+0x220>)
 80172b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172b6:	2206      	movs	r2, #6
 80172b8:	f108 0701 	add.w	r7, r8, #1
 80172bc:	f7e8 ffa8 	bl	8000210 <memchr>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d037      	beq.n	8017334 <_vfiprintf_r+0x1f8>
 80172c4:	4b26      	ldr	r3, [pc, #152]	; (8017360 <_vfiprintf_r+0x224>)
 80172c6:	bb1b      	cbnz	r3, 8017310 <_vfiprintf_r+0x1d4>
 80172c8:	9b03      	ldr	r3, [sp, #12]
 80172ca:	3307      	adds	r3, #7
 80172cc:	f023 0307 	bic.w	r3, r3, #7
 80172d0:	3308      	adds	r3, #8
 80172d2:	9303      	str	r3, [sp, #12]
 80172d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172d6:	444b      	add	r3, r9
 80172d8:	9309      	str	r3, [sp, #36]	; 0x24
 80172da:	e750      	b.n	801717e <_vfiprintf_r+0x42>
 80172dc:	fb05 3202 	mla	r2, r5, r2, r3
 80172e0:	2001      	movs	r0, #1
 80172e2:	4688      	mov	r8, r1
 80172e4:	e78a      	b.n	80171fc <_vfiprintf_r+0xc0>
 80172e6:	2300      	movs	r3, #0
 80172e8:	f108 0801 	add.w	r8, r8, #1
 80172ec:	9305      	str	r3, [sp, #20]
 80172ee:	4619      	mov	r1, r3
 80172f0:	250a      	movs	r5, #10
 80172f2:	4640      	mov	r0, r8
 80172f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172f8:	3a30      	subs	r2, #48	; 0x30
 80172fa:	2a09      	cmp	r2, #9
 80172fc:	d903      	bls.n	8017306 <_vfiprintf_r+0x1ca>
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d0c3      	beq.n	801728a <_vfiprintf_r+0x14e>
 8017302:	9105      	str	r1, [sp, #20]
 8017304:	e7c1      	b.n	801728a <_vfiprintf_r+0x14e>
 8017306:	fb05 2101 	mla	r1, r5, r1, r2
 801730a:	2301      	movs	r3, #1
 801730c:	4680      	mov	r8, r0
 801730e:	e7f0      	b.n	80172f2 <_vfiprintf_r+0x1b6>
 8017310:	ab03      	add	r3, sp, #12
 8017312:	9300      	str	r3, [sp, #0]
 8017314:	4622      	mov	r2, r4
 8017316:	4b13      	ldr	r3, [pc, #76]	; (8017364 <_vfiprintf_r+0x228>)
 8017318:	a904      	add	r1, sp, #16
 801731a:	4630      	mov	r0, r6
 801731c:	f7fb fce0 	bl	8012ce0 <_printf_float>
 8017320:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017324:	4681      	mov	r9, r0
 8017326:	d1d5      	bne.n	80172d4 <_vfiprintf_r+0x198>
 8017328:	89a3      	ldrh	r3, [r4, #12]
 801732a:	065b      	lsls	r3, r3, #25
 801732c:	f53f af7e 	bmi.w	801722c <_vfiprintf_r+0xf0>
 8017330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017332:	e77d      	b.n	8017230 <_vfiprintf_r+0xf4>
 8017334:	ab03      	add	r3, sp, #12
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	4622      	mov	r2, r4
 801733a:	4b0a      	ldr	r3, [pc, #40]	; (8017364 <_vfiprintf_r+0x228>)
 801733c:	a904      	add	r1, sp, #16
 801733e:	4630      	mov	r0, r6
 8017340:	f7fb ff84 	bl	801324c <_printf_i>
 8017344:	e7ec      	b.n	8017320 <_vfiprintf_r+0x1e4>
 8017346:	bf00      	nop
 8017348:	08018250 	.word	0x08018250
 801734c:	0801839c 	.word	0x0801839c
 8017350:	08018270 	.word	0x08018270
 8017354:	08018230 	.word	0x08018230
 8017358:	080183a2 	.word	0x080183a2
 801735c:	080183a6 	.word	0x080183a6
 8017360:	08012ce1 	.word	0x08012ce1
 8017364:	08017117 	.word	0x08017117

08017368 <_scanf_chars>:
 8017368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801736c:	4615      	mov	r5, r2
 801736e:	688a      	ldr	r2, [r1, #8]
 8017370:	4680      	mov	r8, r0
 8017372:	460c      	mov	r4, r1
 8017374:	b932      	cbnz	r2, 8017384 <_scanf_chars+0x1c>
 8017376:	698a      	ldr	r2, [r1, #24]
 8017378:	2a00      	cmp	r2, #0
 801737a:	bf14      	ite	ne
 801737c:	f04f 32ff 	movne.w	r2, #4294967295
 8017380:	2201      	moveq	r2, #1
 8017382:	608a      	str	r2, [r1, #8]
 8017384:	6822      	ldr	r2, [r4, #0]
 8017386:	06d1      	lsls	r1, r2, #27
 8017388:	bf5f      	itttt	pl
 801738a:	681a      	ldrpl	r2, [r3, #0]
 801738c:	1d11      	addpl	r1, r2, #4
 801738e:	6019      	strpl	r1, [r3, #0]
 8017390:	6817      	ldrpl	r7, [r2, #0]
 8017392:	2600      	movs	r6, #0
 8017394:	69a3      	ldr	r3, [r4, #24]
 8017396:	b1db      	cbz	r3, 80173d0 <_scanf_chars+0x68>
 8017398:	2b01      	cmp	r3, #1
 801739a:	d107      	bne.n	80173ac <_scanf_chars+0x44>
 801739c:	682b      	ldr	r3, [r5, #0]
 801739e:	6962      	ldr	r2, [r4, #20]
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	5cd3      	ldrb	r3, [r2, r3]
 80173a4:	b9a3      	cbnz	r3, 80173d0 <_scanf_chars+0x68>
 80173a6:	2e00      	cmp	r6, #0
 80173a8:	d132      	bne.n	8017410 <_scanf_chars+0xa8>
 80173aa:	e006      	b.n	80173ba <_scanf_chars+0x52>
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d007      	beq.n	80173c0 <_scanf_chars+0x58>
 80173b0:	2e00      	cmp	r6, #0
 80173b2:	d12d      	bne.n	8017410 <_scanf_chars+0xa8>
 80173b4:	69a3      	ldr	r3, [r4, #24]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d12a      	bne.n	8017410 <_scanf_chars+0xa8>
 80173ba:	2001      	movs	r0, #1
 80173bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c0:	f7fe fe32 	bl	8016028 <__locale_ctype_ptr>
 80173c4:	682b      	ldr	r3, [r5, #0]
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	4418      	add	r0, r3
 80173ca:	7843      	ldrb	r3, [r0, #1]
 80173cc:	071b      	lsls	r3, r3, #28
 80173ce:	d4ef      	bmi.n	80173b0 <_scanf_chars+0x48>
 80173d0:	6823      	ldr	r3, [r4, #0]
 80173d2:	06da      	lsls	r2, r3, #27
 80173d4:	bf5e      	ittt	pl
 80173d6:	682b      	ldrpl	r3, [r5, #0]
 80173d8:	781b      	ldrbpl	r3, [r3, #0]
 80173da:	703b      	strbpl	r3, [r7, #0]
 80173dc:	682a      	ldr	r2, [r5, #0]
 80173de:	686b      	ldr	r3, [r5, #4]
 80173e0:	f102 0201 	add.w	r2, r2, #1
 80173e4:	602a      	str	r2, [r5, #0]
 80173e6:	68a2      	ldr	r2, [r4, #8]
 80173e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80173ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80173f0:	606b      	str	r3, [r5, #4]
 80173f2:	f106 0601 	add.w	r6, r6, #1
 80173f6:	bf58      	it	pl
 80173f8:	3701      	addpl	r7, #1
 80173fa:	60a2      	str	r2, [r4, #8]
 80173fc:	b142      	cbz	r2, 8017410 <_scanf_chars+0xa8>
 80173fe:	2b00      	cmp	r3, #0
 8017400:	dcc8      	bgt.n	8017394 <_scanf_chars+0x2c>
 8017402:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017406:	4629      	mov	r1, r5
 8017408:	4640      	mov	r0, r8
 801740a:	4798      	blx	r3
 801740c:	2800      	cmp	r0, #0
 801740e:	d0c1      	beq.n	8017394 <_scanf_chars+0x2c>
 8017410:	6823      	ldr	r3, [r4, #0]
 8017412:	f013 0310 	ands.w	r3, r3, #16
 8017416:	d105      	bne.n	8017424 <_scanf_chars+0xbc>
 8017418:	68e2      	ldr	r2, [r4, #12]
 801741a:	3201      	adds	r2, #1
 801741c:	60e2      	str	r2, [r4, #12]
 801741e:	69a2      	ldr	r2, [r4, #24]
 8017420:	b102      	cbz	r2, 8017424 <_scanf_chars+0xbc>
 8017422:	703b      	strb	r3, [r7, #0]
 8017424:	6923      	ldr	r3, [r4, #16]
 8017426:	441e      	add	r6, r3
 8017428:	6126      	str	r6, [r4, #16]
 801742a:	2000      	movs	r0, #0
 801742c:	e7c6      	b.n	80173bc <_scanf_chars+0x54>
	...

08017430 <_scanf_i>:
 8017430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017434:	469a      	mov	sl, r3
 8017436:	4b74      	ldr	r3, [pc, #464]	; (8017608 <_scanf_i+0x1d8>)
 8017438:	460c      	mov	r4, r1
 801743a:	4683      	mov	fp, r0
 801743c:	4616      	mov	r6, r2
 801743e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017442:	b087      	sub	sp, #28
 8017444:	ab03      	add	r3, sp, #12
 8017446:	68a7      	ldr	r7, [r4, #8]
 8017448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801744c:	4b6f      	ldr	r3, [pc, #444]	; (801760c <_scanf_i+0x1dc>)
 801744e:	69a1      	ldr	r1, [r4, #24]
 8017450:	4a6f      	ldr	r2, [pc, #444]	; (8017610 <_scanf_i+0x1e0>)
 8017452:	2903      	cmp	r1, #3
 8017454:	bf08      	it	eq
 8017456:	461a      	moveq	r2, r3
 8017458:	1e7b      	subs	r3, r7, #1
 801745a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801745e:	bf84      	itt	hi
 8017460:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017464:	60a3      	strhi	r3, [r4, #8]
 8017466:	6823      	ldr	r3, [r4, #0]
 8017468:	9200      	str	r2, [sp, #0]
 801746a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801746e:	bf88      	it	hi
 8017470:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017474:	f104 091c 	add.w	r9, r4, #28
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	bf8c      	ite	hi
 801747c:	197f      	addhi	r7, r7, r5
 801747e:	2700      	movls	r7, #0
 8017480:	464b      	mov	r3, r9
 8017482:	f04f 0800 	mov.w	r8, #0
 8017486:	9301      	str	r3, [sp, #4]
 8017488:	6831      	ldr	r1, [r6, #0]
 801748a:	ab03      	add	r3, sp, #12
 801748c:	2202      	movs	r2, #2
 801748e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017492:	7809      	ldrb	r1, [r1, #0]
 8017494:	f7e8 febc 	bl	8000210 <memchr>
 8017498:	9b01      	ldr	r3, [sp, #4]
 801749a:	b330      	cbz	r0, 80174ea <_scanf_i+0xba>
 801749c:	f1b8 0f01 	cmp.w	r8, #1
 80174a0:	d15a      	bne.n	8017558 <_scanf_i+0x128>
 80174a2:	6862      	ldr	r2, [r4, #4]
 80174a4:	b92a      	cbnz	r2, 80174b2 <_scanf_i+0x82>
 80174a6:	6822      	ldr	r2, [r4, #0]
 80174a8:	2108      	movs	r1, #8
 80174aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174ae:	6061      	str	r1, [r4, #4]
 80174b0:	6022      	str	r2, [r4, #0]
 80174b2:	6822      	ldr	r2, [r4, #0]
 80174b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80174b8:	6022      	str	r2, [r4, #0]
 80174ba:	68a2      	ldr	r2, [r4, #8]
 80174bc:	1e51      	subs	r1, r2, #1
 80174be:	60a1      	str	r1, [r4, #8]
 80174c0:	b19a      	cbz	r2, 80174ea <_scanf_i+0xba>
 80174c2:	6832      	ldr	r2, [r6, #0]
 80174c4:	1c51      	adds	r1, r2, #1
 80174c6:	6031      	str	r1, [r6, #0]
 80174c8:	7812      	ldrb	r2, [r2, #0]
 80174ca:	701a      	strb	r2, [r3, #0]
 80174cc:	1c5d      	adds	r5, r3, #1
 80174ce:	6873      	ldr	r3, [r6, #4]
 80174d0:	3b01      	subs	r3, #1
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	6073      	str	r3, [r6, #4]
 80174d6:	dc07      	bgt.n	80174e8 <_scanf_i+0xb8>
 80174d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174dc:	4631      	mov	r1, r6
 80174de:	4658      	mov	r0, fp
 80174e0:	4798      	blx	r3
 80174e2:	2800      	cmp	r0, #0
 80174e4:	f040 8086 	bne.w	80175f4 <_scanf_i+0x1c4>
 80174e8:	462b      	mov	r3, r5
 80174ea:	f108 0801 	add.w	r8, r8, #1
 80174ee:	f1b8 0f03 	cmp.w	r8, #3
 80174f2:	d1c8      	bne.n	8017486 <_scanf_i+0x56>
 80174f4:	6862      	ldr	r2, [r4, #4]
 80174f6:	b90a      	cbnz	r2, 80174fc <_scanf_i+0xcc>
 80174f8:	220a      	movs	r2, #10
 80174fa:	6062      	str	r2, [r4, #4]
 80174fc:	6862      	ldr	r2, [r4, #4]
 80174fe:	4945      	ldr	r1, [pc, #276]	; (8017614 <_scanf_i+0x1e4>)
 8017500:	6960      	ldr	r0, [r4, #20]
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	1a89      	subs	r1, r1, r2
 8017506:	f000 f8df 	bl	80176c8 <__sccl>
 801750a:	9b01      	ldr	r3, [sp, #4]
 801750c:	f04f 0800 	mov.w	r8, #0
 8017510:	461d      	mov	r5, r3
 8017512:	68a3      	ldr	r3, [r4, #8]
 8017514:	6822      	ldr	r2, [r4, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d03a      	beq.n	8017590 <_scanf_i+0x160>
 801751a:	6831      	ldr	r1, [r6, #0]
 801751c:	6960      	ldr	r0, [r4, #20]
 801751e:	f891 c000 	ldrb.w	ip, [r1]
 8017522:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017526:	2800      	cmp	r0, #0
 8017528:	d032      	beq.n	8017590 <_scanf_i+0x160>
 801752a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801752e:	d121      	bne.n	8017574 <_scanf_i+0x144>
 8017530:	0510      	lsls	r0, r2, #20
 8017532:	d51f      	bpl.n	8017574 <_scanf_i+0x144>
 8017534:	f108 0801 	add.w	r8, r8, #1
 8017538:	b117      	cbz	r7, 8017540 <_scanf_i+0x110>
 801753a:	3301      	adds	r3, #1
 801753c:	3f01      	subs	r7, #1
 801753e:	60a3      	str	r3, [r4, #8]
 8017540:	6873      	ldr	r3, [r6, #4]
 8017542:	3b01      	subs	r3, #1
 8017544:	2b00      	cmp	r3, #0
 8017546:	6073      	str	r3, [r6, #4]
 8017548:	dd1b      	ble.n	8017582 <_scanf_i+0x152>
 801754a:	6833      	ldr	r3, [r6, #0]
 801754c:	3301      	adds	r3, #1
 801754e:	6033      	str	r3, [r6, #0]
 8017550:	68a3      	ldr	r3, [r4, #8]
 8017552:	3b01      	subs	r3, #1
 8017554:	60a3      	str	r3, [r4, #8]
 8017556:	e7dc      	b.n	8017512 <_scanf_i+0xe2>
 8017558:	f1b8 0f02 	cmp.w	r8, #2
 801755c:	d1ad      	bne.n	80174ba <_scanf_i+0x8a>
 801755e:	6822      	ldr	r2, [r4, #0]
 8017560:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017564:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017568:	d1bf      	bne.n	80174ea <_scanf_i+0xba>
 801756a:	2110      	movs	r1, #16
 801756c:	6061      	str	r1, [r4, #4]
 801756e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017572:	e7a1      	b.n	80174b8 <_scanf_i+0x88>
 8017574:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017578:	6022      	str	r2, [r4, #0]
 801757a:	780b      	ldrb	r3, [r1, #0]
 801757c:	702b      	strb	r3, [r5, #0]
 801757e:	3501      	adds	r5, #1
 8017580:	e7de      	b.n	8017540 <_scanf_i+0x110>
 8017582:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017586:	4631      	mov	r1, r6
 8017588:	4658      	mov	r0, fp
 801758a:	4798      	blx	r3
 801758c:	2800      	cmp	r0, #0
 801758e:	d0df      	beq.n	8017550 <_scanf_i+0x120>
 8017590:	6823      	ldr	r3, [r4, #0]
 8017592:	05d9      	lsls	r1, r3, #23
 8017594:	d50c      	bpl.n	80175b0 <_scanf_i+0x180>
 8017596:	454d      	cmp	r5, r9
 8017598:	d908      	bls.n	80175ac <_scanf_i+0x17c>
 801759a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801759e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175a2:	4632      	mov	r2, r6
 80175a4:	4658      	mov	r0, fp
 80175a6:	4798      	blx	r3
 80175a8:	1e6f      	subs	r7, r5, #1
 80175aa:	463d      	mov	r5, r7
 80175ac:	454d      	cmp	r5, r9
 80175ae:	d029      	beq.n	8017604 <_scanf_i+0x1d4>
 80175b0:	6822      	ldr	r2, [r4, #0]
 80175b2:	f012 0210 	ands.w	r2, r2, #16
 80175b6:	d113      	bne.n	80175e0 <_scanf_i+0x1b0>
 80175b8:	702a      	strb	r2, [r5, #0]
 80175ba:	6863      	ldr	r3, [r4, #4]
 80175bc:	9e00      	ldr	r6, [sp, #0]
 80175be:	4649      	mov	r1, r9
 80175c0:	4658      	mov	r0, fp
 80175c2:	47b0      	blx	r6
 80175c4:	f8da 3000 	ldr.w	r3, [sl]
 80175c8:	6821      	ldr	r1, [r4, #0]
 80175ca:	1d1a      	adds	r2, r3, #4
 80175cc:	f8ca 2000 	str.w	r2, [sl]
 80175d0:	f011 0f20 	tst.w	r1, #32
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	d010      	beq.n	80175fa <_scanf_i+0x1ca>
 80175d8:	6018      	str	r0, [r3, #0]
 80175da:	68e3      	ldr	r3, [r4, #12]
 80175dc:	3301      	adds	r3, #1
 80175de:	60e3      	str	r3, [r4, #12]
 80175e0:	eba5 0509 	sub.w	r5, r5, r9
 80175e4:	44a8      	add	r8, r5
 80175e6:	6925      	ldr	r5, [r4, #16]
 80175e8:	4445      	add	r5, r8
 80175ea:	6125      	str	r5, [r4, #16]
 80175ec:	2000      	movs	r0, #0
 80175ee:	b007      	add	sp, #28
 80175f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f4:	f04f 0800 	mov.w	r8, #0
 80175f8:	e7ca      	b.n	8017590 <_scanf_i+0x160>
 80175fa:	07ca      	lsls	r2, r1, #31
 80175fc:	bf4c      	ite	mi
 80175fe:	8018      	strhmi	r0, [r3, #0]
 8017600:	6018      	strpl	r0, [r3, #0]
 8017602:	e7ea      	b.n	80175da <_scanf_i+0x1aa>
 8017604:	2001      	movs	r0, #1
 8017606:	e7f2      	b.n	80175ee <_scanf_i+0x1be>
 8017608:	08017ef8 	.word	0x08017ef8
 801760c:	08014831 	.word	0x08014831
 8017610:	08017845 	.word	0x08017845
 8017614:	080183bd 	.word	0x080183bd

08017618 <_putc_r>:
 8017618:	b570      	push	{r4, r5, r6, lr}
 801761a:	460d      	mov	r5, r1
 801761c:	4614      	mov	r4, r2
 801761e:	4606      	mov	r6, r0
 8017620:	b118      	cbz	r0, 801762a <_putc_r+0x12>
 8017622:	6983      	ldr	r3, [r0, #24]
 8017624:	b90b      	cbnz	r3, 801762a <_putc_r+0x12>
 8017626:	f7fe f94b 	bl	80158c0 <__sinit>
 801762a:	4b13      	ldr	r3, [pc, #76]	; (8017678 <_putc_r+0x60>)
 801762c:	429c      	cmp	r4, r3
 801762e:	d112      	bne.n	8017656 <_putc_r+0x3e>
 8017630:	6874      	ldr	r4, [r6, #4]
 8017632:	68a3      	ldr	r3, [r4, #8]
 8017634:	3b01      	subs	r3, #1
 8017636:	2b00      	cmp	r3, #0
 8017638:	60a3      	str	r3, [r4, #8]
 801763a:	da16      	bge.n	801766a <_putc_r+0x52>
 801763c:	69a2      	ldr	r2, [r4, #24]
 801763e:	4293      	cmp	r3, r2
 8017640:	db02      	blt.n	8017648 <_putc_r+0x30>
 8017642:	b2eb      	uxtb	r3, r5
 8017644:	2b0a      	cmp	r3, #10
 8017646:	d110      	bne.n	801766a <_putc_r+0x52>
 8017648:	4622      	mov	r2, r4
 801764a:	4629      	mov	r1, r5
 801764c:	4630      	mov	r0, r6
 801764e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017652:	f7fd b91f 	b.w	8014894 <__swbuf_r>
 8017656:	4b09      	ldr	r3, [pc, #36]	; (801767c <_putc_r+0x64>)
 8017658:	429c      	cmp	r4, r3
 801765a:	d101      	bne.n	8017660 <_putc_r+0x48>
 801765c:	68b4      	ldr	r4, [r6, #8]
 801765e:	e7e8      	b.n	8017632 <_putc_r+0x1a>
 8017660:	4b07      	ldr	r3, [pc, #28]	; (8017680 <_putc_r+0x68>)
 8017662:	429c      	cmp	r4, r3
 8017664:	bf08      	it	eq
 8017666:	68f4      	ldreq	r4, [r6, #12]
 8017668:	e7e3      	b.n	8017632 <_putc_r+0x1a>
 801766a:	6823      	ldr	r3, [r4, #0]
 801766c:	1c5a      	adds	r2, r3, #1
 801766e:	6022      	str	r2, [r4, #0]
 8017670:	701d      	strb	r5, [r3, #0]
 8017672:	b2e8      	uxtb	r0, r5
 8017674:	bd70      	pop	{r4, r5, r6, pc}
 8017676:	bf00      	nop
 8017678:	08018250 	.word	0x08018250
 801767c:	08018270 	.word	0x08018270
 8017680:	08018230 	.word	0x08018230

08017684 <_read_r>:
 8017684:	b538      	push	{r3, r4, r5, lr}
 8017686:	4c07      	ldr	r4, [pc, #28]	; (80176a4 <_read_r+0x20>)
 8017688:	4605      	mov	r5, r0
 801768a:	4608      	mov	r0, r1
 801768c:	4611      	mov	r1, r2
 801768e:	2200      	movs	r2, #0
 8017690:	6022      	str	r2, [r4, #0]
 8017692:	461a      	mov	r2, r3
 8017694:	f7ee f8a8 	bl	80057e8 <_read>
 8017698:	1c43      	adds	r3, r0, #1
 801769a:	d102      	bne.n	80176a2 <_read_r+0x1e>
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	b103      	cbz	r3, 80176a2 <_read_r+0x1e>
 80176a0:	602b      	str	r3, [r5, #0]
 80176a2:	bd38      	pop	{r3, r4, r5, pc}
 80176a4:	2003be04 	.word	0x2003be04

080176a8 <_sbrk_r>:
 80176a8:	b538      	push	{r3, r4, r5, lr}
 80176aa:	4c06      	ldr	r4, [pc, #24]	; (80176c4 <_sbrk_r+0x1c>)
 80176ac:	2300      	movs	r3, #0
 80176ae:	4605      	mov	r5, r0
 80176b0:	4608      	mov	r0, r1
 80176b2:	6023      	str	r3, [r4, #0]
 80176b4:	f7ee f8ea 	bl	800588c <_sbrk>
 80176b8:	1c43      	adds	r3, r0, #1
 80176ba:	d102      	bne.n	80176c2 <_sbrk_r+0x1a>
 80176bc:	6823      	ldr	r3, [r4, #0]
 80176be:	b103      	cbz	r3, 80176c2 <_sbrk_r+0x1a>
 80176c0:	602b      	str	r3, [r5, #0]
 80176c2:	bd38      	pop	{r3, r4, r5, pc}
 80176c4:	2003be04 	.word	0x2003be04

080176c8 <__sccl>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	780b      	ldrb	r3, [r1, #0]
 80176cc:	2b5e      	cmp	r3, #94	; 0x5e
 80176ce:	bf13      	iteet	ne
 80176d0:	1c4a      	addne	r2, r1, #1
 80176d2:	1c8a      	addeq	r2, r1, #2
 80176d4:	784b      	ldrbeq	r3, [r1, #1]
 80176d6:	2100      	movne	r1, #0
 80176d8:	bf08      	it	eq
 80176da:	2101      	moveq	r1, #1
 80176dc:	1e44      	subs	r4, r0, #1
 80176de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80176e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80176e6:	42ac      	cmp	r4, r5
 80176e8:	d1fb      	bne.n	80176e2 <__sccl+0x1a>
 80176ea:	b913      	cbnz	r3, 80176f2 <__sccl+0x2a>
 80176ec:	3a01      	subs	r2, #1
 80176ee:	4610      	mov	r0, r2
 80176f0:	bd70      	pop	{r4, r5, r6, pc}
 80176f2:	f081 0401 	eor.w	r4, r1, #1
 80176f6:	54c4      	strb	r4, [r0, r3]
 80176f8:	1c51      	adds	r1, r2, #1
 80176fa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80176fe:	2d2d      	cmp	r5, #45	; 0x2d
 8017700:	f101 36ff 	add.w	r6, r1, #4294967295
 8017704:	460a      	mov	r2, r1
 8017706:	d006      	beq.n	8017716 <__sccl+0x4e>
 8017708:	2d5d      	cmp	r5, #93	; 0x5d
 801770a:	d0f0      	beq.n	80176ee <__sccl+0x26>
 801770c:	b90d      	cbnz	r5, 8017712 <__sccl+0x4a>
 801770e:	4632      	mov	r2, r6
 8017710:	e7ed      	b.n	80176ee <__sccl+0x26>
 8017712:	462b      	mov	r3, r5
 8017714:	e7ef      	b.n	80176f6 <__sccl+0x2e>
 8017716:	780e      	ldrb	r6, [r1, #0]
 8017718:	2e5d      	cmp	r6, #93	; 0x5d
 801771a:	d0fa      	beq.n	8017712 <__sccl+0x4a>
 801771c:	42b3      	cmp	r3, r6
 801771e:	dcf8      	bgt.n	8017712 <__sccl+0x4a>
 8017720:	3301      	adds	r3, #1
 8017722:	429e      	cmp	r6, r3
 8017724:	54c4      	strb	r4, [r0, r3]
 8017726:	dcfb      	bgt.n	8017720 <__sccl+0x58>
 8017728:	3102      	adds	r1, #2
 801772a:	e7e6      	b.n	80176fa <__sccl+0x32>

0801772c <strncmp>:
 801772c:	b510      	push	{r4, lr}
 801772e:	b16a      	cbz	r2, 801774c <strncmp+0x20>
 8017730:	3901      	subs	r1, #1
 8017732:	1884      	adds	r4, r0, r2
 8017734:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017738:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801773c:	4293      	cmp	r3, r2
 801773e:	d103      	bne.n	8017748 <strncmp+0x1c>
 8017740:	42a0      	cmp	r0, r4
 8017742:	d001      	beq.n	8017748 <strncmp+0x1c>
 8017744:	2b00      	cmp	r3, #0
 8017746:	d1f5      	bne.n	8017734 <strncmp+0x8>
 8017748:	1a98      	subs	r0, r3, r2
 801774a:	bd10      	pop	{r4, pc}
 801774c:	4610      	mov	r0, r2
 801774e:	e7fc      	b.n	801774a <strncmp+0x1e>

08017750 <_strtoul_l.isra.0>:
 8017750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017754:	4680      	mov	r8, r0
 8017756:	4689      	mov	r9, r1
 8017758:	4692      	mov	sl, r2
 801775a:	461e      	mov	r6, r3
 801775c:	460f      	mov	r7, r1
 801775e:	463d      	mov	r5, r7
 8017760:	9808      	ldr	r0, [sp, #32]
 8017762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017766:	f7fe fc5b 	bl	8016020 <__locale_ctype_ptr_l>
 801776a:	4420      	add	r0, r4
 801776c:	7843      	ldrb	r3, [r0, #1]
 801776e:	f013 0308 	ands.w	r3, r3, #8
 8017772:	d130      	bne.n	80177d6 <_strtoul_l.isra.0+0x86>
 8017774:	2c2d      	cmp	r4, #45	; 0x2d
 8017776:	d130      	bne.n	80177da <_strtoul_l.isra.0+0x8a>
 8017778:	787c      	ldrb	r4, [r7, #1]
 801777a:	1cbd      	adds	r5, r7, #2
 801777c:	2101      	movs	r1, #1
 801777e:	2e00      	cmp	r6, #0
 8017780:	d05c      	beq.n	801783c <_strtoul_l.isra.0+0xec>
 8017782:	2e10      	cmp	r6, #16
 8017784:	d109      	bne.n	801779a <_strtoul_l.isra.0+0x4a>
 8017786:	2c30      	cmp	r4, #48	; 0x30
 8017788:	d107      	bne.n	801779a <_strtoul_l.isra.0+0x4a>
 801778a:	782b      	ldrb	r3, [r5, #0]
 801778c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017790:	2b58      	cmp	r3, #88	; 0x58
 8017792:	d14e      	bne.n	8017832 <_strtoul_l.isra.0+0xe2>
 8017794:	786c      	ldrb	r4, [r5, #1]
 8017796:	2610      	movs	r6, #16
 8017798:	3502      	adds	r5, #2
 801779a:	f04f 32ff 	mov.w	r2, #4294967295
 801779e:	2300      	movs	r3, #0
 80177a0:	fbb2 f2f6 	udiv	r2, r2, r6
 80177a4:	fb06 fc02 	mul.w	ip, r6, r2
 80177a8:	ea6f 0c0c 	mvn.w	ip, ip
 80177ac:	4618      	mov	r0, r3
 80177ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80177b2:	2f09      	cmp	r7, #9
 80177b4:	d817      	bhi.n	80177e6 <_strtoul_l.isra.0+0x96>
 80177b6:	463c      	mov	r4, r7
 80177b8:	42a6      	cmp	r6, r4
 80177ba:	dd23      	ble.n	8017804 <_strtoul_l.isra.0+0xb4>
 80177bc:	2b00      	cmp	r3, #0
 80177be:	db1e      	blt.n	80177fe <_strtoul_l.isra.0+0xae>
 80177c0:	4282      	cmp	r2, r0
 80177c2:	d31c      	bcc.n	80177fe <_strtoul_l.isra.0+0xae>
 80177c4:	d101      	bne.n	80177ca <_strtoul_l.isra.0+0x7a>
 80177c6:	45a4      	cmp	ip, r4
 80177c8:	db19      	blt.n	80177fe <_strtoul_l.isra.0+0xae>
 80177ca:	fb00 4006 	mla	r0, r0, r6, r4
 80177ce:	2301      	movs	r3, #1
 80177d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177d4:	e7eb      	b.n	80177ae <_strtoul_l.isra.0+0x5e>
 80177d6:	462f      	mov	r7, r5
 80177d8:	e7c1      	b.n	801775e <_strtoul_l.isra.0+0xe>
 80177da:	2c2b      	cmp	r4, #43	; 0x2b
 80177dc:	bf04      	itt	eq
 80177de:	1cbd      	addeq	r5, r7, #2
 80177e0:	787c      	ldrbeq	r4, [r7, #1]
 80177e2:	4619      	mov	r1, r3
 80177e4:	e7cb      	b.n	801777e <_strtoul_l.isra.0+0x2e>
 80177e6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80177ea:	2f19      	cmp	r7, #25
 80177ec:	d801      	bhi.n	80177f2 <_strtoul_l.isra.0+0xa2>
 80177ee:	3c37      	subs	r4, #55	; 0x37
 80177f0:	e7e2      	b.n	80177b8 <_strtoul_l.isra.0+0x68>
 80177f2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80177f6:	2f19      	cmp	r7, #25
 80177f8:	d804      	bhi.n	8017804 <_strtoul_l.isra.0+0xb4>
 80177fa:	3c57      	subs	r4, #87	; 0x57
 80177fc:	e7dc      	b.n	80177b8 <_strtoul_l.isra.0+0x68>
 80177fe:	f04f 33ff 	mov.w	r3, #4294967295
 8017802:	e7e5      	b.n	80177d0 <_strtoul_l.isra.0+0x80>
 8017804:	2b00      	cmp	r3, #0
 8017806:	da09      	bge.n	801781c <_strtoul_l.isra.0+0xcc>
 8017808:	2322      	movs	r3, #34	; 0x22
 801780a:	f8c8 3000 	str.w	r3, [r8]
 801780e:	f04f 30ff 	mov.w	r0, #4294967295
 8017812:	f1ba 0f00 	cmp.w	sl, #0
 8017816:	d107      	bne.n	8017828 <_strtoul_l.isra.0+0xd8>
 8017818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801781c:	b101      	cbz	r1, 8017820 <_strtoul_l.isra.0+0xd0>
 801781e:	4240      	negs	r0, r0
 8017820:	f1ba 0f00 	cmp.w	sl, #0
 8017824:	d0f8      	beq.n	8017818 <_strtoul_l.isra.0+0xc8>
 8017826:	b10b      	cbz	r3, 801782c <_strtoul_l.isra.0+0xdc>
 8017828:	f105 39ff 	add.w	r9, r5, #4294967295
 801782c:	f8ca 9000 	str.w	r9, [sl]
 8017830:	e7f2      	b.n	8017818 <_strtoul_l.isra.0+0xc8>
 8017832:	2430      	movs	r4, #48	; 0x30
 8017834:	2e00      	cmp	r6, #0
 8017836:	d1b0      	bne.n	801779a <_strtoul_l.isra.0+0x4a>
 8017838:	2608      	movs	r6, #8
 801783a:	e7ae      	b.n	801779a <_strtoul_l.isra.0+0x4a>
 801783c:	2c30      	cmp	r4, #48	; 0x30
 801783e:	d0a4      	beq.n	801778a <_strtoul_l.isra.0+0x3a>
 8017840:	260a      	movs	r6, #10
 8017842:	e7aa      	b.n	801779a <_strtoul_l.isra.0+0x4a>

08017844 <_strtoul_r>:
 8017844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017846:	4c06      	ldr	r4, [pc, #24]	; (8017860 <_strtoul_r+0x1c>)
 8017848:	4d06      	ldr	r5, [pc, #24]	; (8017864 <_strtoul_r+0x20>)
 801784a:	6824      	ldr	r4, [r4, #0]
 801784c:	6a24      	ldr	r4, [r4, #32]
 801784e:	2c00      	cmp	r4, #0
 8017850:	bf08      	it	eq
 8017852:	462c      	moveq	r4, r5
 8017854:	9400      	str	r4, [sp, #0]
 8017856:	f7ff ff7b 	bl	8017750 <_strtoul_l.isra.0>
 801785a:	b003      	add	sp, #12
 801785c:	bd30      	pop	{r4, r5, pc}
 801785e:	bf00      	nop
 8017860:	2000000c 	.word	0x2000000c
 8017864:	20000070 	.word	0x20000070

08017868 <__submore>:
 8017868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801786c:	460c      	mov	r4, r1
 801786e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017874:	4299      	cmp	r1, r3
 8017876:	d11d      	bne.n	80178b4 <__submore+0x4c>
 8017878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801787c:	f7ff f8de 	bl	8016a3c <_malloc_r>
 8017880:	b918      	cbnz	r0, 801788a <__submore+0x22>
 8017882:	f04f 30ff 	mov.w	r0, #4294967295
 8017886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801788a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801788e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017890:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017894:	6360      	str	r0, [r4, #52]	; 0x34
 8017896:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801789a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801789e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80178a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80178a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80178aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80178ae:	6020      	str	r0, [r4, #0]
 80178b0:	2000      	movs	r0, #0
 80178b2:	e7e8      	b.n	8017886 <__submore+0x1e>
 80178b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80178b6:	0077      	lsls	r7, r6, #1
 80178b8:	463a      	mov	r2, r7
 80178ba:	f000 f85a 	bl	8017972 <_realloc_r>
 80178be:	4605      	mov	r5, r0
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d0de      	beq.n	8017882 <__submore+0x1a>
 80178c4:	eb00 0806 	add.w	r8, r0, r6
 80178c8:	4601      	mov	r1, r0
 80178ca:	4632      	mov	r2, r6
 80178cc:	4640      	mov	r0, r8
 80178ce:	f7fb f95f 	bl	8012b90 <memcpy>
 80178d2:	f8c4 8000 	str.w	r8, [r4]
 80178d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80178da:	e7e9      	b.n	80178b0 <__submore+0x48>

080178dc <__ascii_wctomb>:
 80178dc:	b149      	cbz	r1, 80178f2 <__ascii_wctomb+0x16>
 80178de:	2aff      	cmp	r2, #255	; 0xff
 80178e0:	bf85      	ittet	hi
 80178e2:	238a      	movhi	r3, #138	; 0x8a
 80178e4:	6003      	strhi	r3, [r0, #0]
 80178e6:	700a      	strbls	r2, [r1, #0]
 80178e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80178ec:	bf98      	it	ls
 80178ee:	2001      	movls	r0, #1
 80178f0:	4770      	bx	lr
 80178f2:	4608      	mov	r0, r1
 80178f4:	4770      	bx	lr
	...

080178f8 <_fstat_r>:
 80178f8:	b538      	push	{r3, r4, r5, lr}
 80178fa:	4c07      	ldr	r4, [pc, #28]	; (8017918 <_fstat_r+0x20>)
 80178fc:	2300      	movs	r3, #0
 80178fe:	4605      	mov	r5, r0
 8017900:	4608      	mov	r0, r1
 8017902:	4611      	mov	r1, r2
 8017904:	6023      	str	r3, [r4, #0]
 8017906:	f7ed ff98 	bl	800583a <_fstat>
 801790a:	1c43      	adds	r3, r0, #1
 801790c:	d102      	bne.n	8017914 <_fstat_r+0x1c>
 801790e:	6823      	ldr	r3, [r4, #0]
 8017910:	b103      	cbz	r3, 8017914 <_fstat_r+0x1c>
 8017912:	602b      	str	r3, [r5, #0]
 8017914:	bd38      	pop	{r3, r4, r5, pc}
 8017916:	bf00      	nop
 8017918:	2003be04 	.word	0x2003be04

0801791c <_isatty_r>:
 801791c:	b538      	push	{r3, r4, r5, lr}
 801791e:	4c06      	ldr	r4, [pc, #24]	; (8017938 <_isatty_r+0x1c>)
 8017920:	2300      	movs	r3, #0
 8017922:	4605      	mov	r5, r0
 8017924:	4608      	mov	r0, r1
 8017926:	6023      	str	r3, [r4, #0]
 8017928:	f7ed ff97 	bl	800585a <_isatty>
 801792c:	1c43      	adds	r3, r0, #1
 801792e:	d102      	bne.n	8017936 <_isatty_r+0x1a>
 8017930:	6823      	ldr	r3, [r4, #0]
 8017932:	b103      	cbz	r3, 8017936 <_isatty_r+0x1a>
 8017934:	602b      	str	r3, [r5, #0]
 8017936:	bd38      	pop	{r3, r4, r5, pc}
 8017938:	2003be04 	.word	0x2003be04

0801793c <memmove>:
 801793c:	4288      	cmp	r0, r1
 801793e:	b510      	push	{r4, lr}
 8017940:	eb01 0302 	add.w	r3, r1, r2
 8017944:	d807      	bhi.n	8017956 <memmove+0x1a>
 8017946:	1e42      	subs	r2, r0, #1
 8017948:	4299      	cmp	r1, r3
 801794a:	d00a      	beq.n	8017962 <memmove+0x26>
 801794c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017950:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017954:	e7f8      	b.n	8017948 <memmove+0xc>
 8017956:	4283      	cmp	r3, r0
 8017958:	d9f5      	bls.n	8017946 <memmove+0xa>
 801795a:	1881      	adds	r1, r0, r2
 801795c:	1ad2      	subs	r2, r2, r3
 801795e:	42d3      	cmn	r3, r2
 8017960:	d100      	bne.n	8017964 <memmove+0x28>
 8017962:	bd10      	pop	{r4, pc}
 8017964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017968:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801796c:	e7f7      	b.n	801795e <memmove+0x22>

0801796e <__malloc_lock>:
 801796e:	4770      	bx	lr

08017970 <__malloc_unlock>:
 8017970:	4770      	bx	lr

08017972 <_realloc_r>:
 8017972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017974:	4607      	mov	r7, r0
 8017976:	4614      	mov	r4, r2
 8017978:	460e      	mov	r6, r1
 801797a:	b921      	cbnz	r1, 8017986 <_realloc_r+0x14>
 801797c:	4611      	mov	r1, r2
 801797e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017982:	f7ff b85b 	b.w	8016a3c <_malloc_r>
 8017986:	b922      	cbnz	r2, 8017992 <_realloc_r+0x20>
 8017988:	f7ff f80a 	bl	80169a0 <_free_r>
 801798c:	4625      	mov	r5, r4
 801798e:	4628      	mov	r0, r5
 8017990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017992:	f000 f814 	bl	80179be <_malloc_usable_size_r>
 8017996:	42a0      	cmp	r0, r4
 8017998:	d20f      	bcs.n	80179ba <_realloc_r+0x48>
 801799a:	4621      	mov	r1, r4
 801799c:	4638      	mov	r0, r7
 801799e:	f7ff f84d 	bl	8016a3c <_malloc_r>
 80179a2:	4605      	mov	r5, r0
 80179a4:	2800      	cmp	r0, #0
 80179a6:	d0f2      	beq.n	801798e <_realloc_r+0x1c>
 80179a8:	4631      	mov	r1, r6
 80179aa:	4622      	mov	r2, r4
 80179ac:	f7fb f8f0 	bl	8012b90 <memcpy>
 80179b0:	4631      	mov	r1, r6
 80179b2:	4638      	mov	r0, r7
 80179b4:	f7fe fff4 	bl	80169a0 <_free_r>
 80179b8:	e7e9      	b.n	801798e <_realloc_r+0x1c>
 80179ba:	4635      	mov	r5, r6
 80179bc:	e7e7      	b.n	801798e <_realloc_r+0x1c>

080179be <_malloc_usable_size_r>:
 80179be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179c2:	1f18      	subs	r0, r3, #4
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	bfbc      	itt	lt
 80179c8:	580b      	ldrlt	r3, [r1, r0]
 80179ca:	18c0      	addlt	r0, r0, r3
 80179cc:	4770      	bx	lr
	...

080179d0 <_init>:
 80179d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179d2:	bf00      	nop
 80179d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179d6:	bc08      	pop	{r3}
 80179d8:	469e      	mov	lr, r3
 80179da:	4770      	bx	lr

080179dc <_fini>:
 80179dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179de:	bf00      	nop
 80179e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179e2:	bc08      	pop	{r3}
 80179e4:	469e      	mov	lr, r3
 80179e6:	4770      	bx	lr
